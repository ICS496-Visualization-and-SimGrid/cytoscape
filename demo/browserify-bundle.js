(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _index = require('../src/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var convertSbgnml = require('sbgnml-to-cytoscape'); /* global $ */

var saveAs = require('file-saver').saveAs;

var defaultData = require('./test-data');

var loadFileText = function loadFileText(absFilePath) {
  var xhttp;
  if (window.XMLHttpRequest) {
    xhttp = new XMLHttpRequest();
  } else {
    xhttp = new ActiveXObject('Microsoft.XMLHTTP');
  }
  xhttp.open('GET', absFilePath, false);
  xhttp.send();
  return xhttp.responseText;
};

var readFile = function readFile(renderer, file) {
  var reader = new FileReader();

  reader.onload = function (e) {
    var graph = convertSbgnml(e.target.result);
    renderGraph(renderer, graph);
  };

  reader.readAsText(file);
};

var renderGraph = function renderGraph(cy, cyGraph) {
  cy.startBatch();
  cy.remove('*');
  cy.add(cyGraph);

  var nodePositions = {};
  for (var i = 0; i < cyGraph.nodes.length; i++) {
    var xPos = cyGraph.nodes[i].data.bbox.x;
    var yPos = cyGraph.nodes[i].data.bbox.y;
    nodePositions[cyGraph.nodes[i].data.id] = { 'x': xPos, 'y': yPos };
  }

  cy.layout({
    name: 'preset',
    positions: nodePositions,
    fit: true,
    padding: 50
  });

  var compounds = cy.nodes().filter('$node > node');
  compounds.css('padding-left', 5);
  compounds.css('padding-right', 5);
  compounds.css('padding-top', 5);
  compounds.css('padding-bottom', 5);

  cy.endBatch();
  cy.style().update();
};

var b64toBlob = function b64toBlob(b64Data, contentType, sliceSize) {
  contentType = contentType || '';
  sliceSize = sliceSize || 512;

  var byteCharacters = atob(b64Data);
  var byteArrays = [];

  for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
    var slice = byteCharacters.slice(offset, offset + sliceSize);

    var byteNumbers = new Array(slice.length);
    for (var i = 0; i < slice.length; i++) {
      byteNumbers[i] = slice.charCodeAt(i);
    }

    var byteArray = new Uint8Array(byteNumbers);

    byteArrays.push(byteArray);
  }

  var blob = new Blob(byteArrays, { type: contentType });
  return blob;
};

var save = function save(renderer, filename) {
  var graphFileString = renderer.png({ scale: 3, full: true });

  var b64Data = graphFileString.substr(graphFileString.indexOf(',') + 1);
  saveAs(b64toBlob(b64Data, 'image/png'), filename);
};

$(document).ready(function () {

  var container = $('#sbgn-network-container');

  var renderer = new _index2.default({
    container: container
  });

  renderGraph(renderer, defaultData);

  $('#graph-load').click(function () {
    $('#graph-input').trigger('click');
  });

  $('#graph-input').change(function () {
    if ($(this).val() != '') {
      var file = this.files[0];

      readFile(renderer, file);
    }
  });

  $('#graph-save').click(function () {
    save(renderer, 'graph');
  });

  $('.sample-file').click(function () {
    var fileText = loadFileText('samples/' + $(this)[0].innerText + '.xml');
    var graphJson = convertSbgnml(fileText);
    renderGraph(renderer, graphJson);
  });
});

},{"../src/index":120,"./test-data":2,"file-saver":113,"sbgnml-to-cytoscape":118}],2:[function(require,module,exports){
"use strict";

var mapkCascadeData = {
    "nodes": [{
        "data": {
            "id": "glyph4",
            "bbox": {
                "x": 318.1589165885067,
                "y": 162.59898679973332,
                "w": "60.0",
                "h": "60.0"
            },
            "class": "simple chemical",
            "label": "ATP",
            "statesandinfos": [],
            "parent": "",
            "clonemarker": true,
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph5",
            "bbox": {
                "x": 368.7150698032765,
                "y": 353.3425311332147,
                "w": "60.0",
                "h": "60.0"
            },
            "class": "simple chemical",
            "label": "ADP",
            "statesandinfos": [],
            "parent": "",
            "clonemarker": true,
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph7",
            "bbox": {
                "x": 423.4601247086921,
                "y": 103.68144699737059,
                "w": "60.0",
                "h": "60.0"
            },
            "class": "simple chemical",
            "label": "ATP",
            "statesandinfos": [],
            "parent": "",
            "clonemarker": true,
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph6",
            "bbox": {
                "x": 514.8286564804162,
                "y": 40.16169718646756,
                "w": "60.0",
                "h": "60.0"
            },
            "class": "simple chemical",
            "label": "ADP",
            "statesandinfos": [],
            "parent": "",
            "clonemarker": true,
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph10",
            "bbox": {
                "x": 588.775693273037,
                "y": 410.5318087906144,
                "w": "60.0",
                "h": "60.0"
            },
            "class": "simple chemical",
            "label": "ATP",
            "statesandinfos": [],
            "parent": "",
            "clonemarker": true,
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph9",
            "bbox": {
                "x": 497.6859428037237,
                "y": 352.2241646137692,
                "w": "60.0",
                "h": "60.0"
            },
            "class": "simple chemical",
            "label": "ADP",
            "statesandinfos": [],
            "parent": "",
            "clonemarker": true,
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph2",
            "bbox": {
                "x": 467.18302213209245,
                "y": 240.2873064873903,
                "w": "100.0",
                "h": "60.0"
            },
            "class": "macromolecule",
            "label": "RAF",
            "statesandinfos": [{
                "id": "glyph2a",
                "clazz": "state variable",
                "state": {
                    "value": "P"
                },
                "bbox": {
                    "x": 0,
                    "y": 50,
                    "w": "25.0",
                    "h": "22.0"
                }
            }],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph18",
            "bbox": {
                "x": 944.040949176361,
                "y": 284.0657446868406,
                "w": "60.0",
                "h": "60.0"
            },
            "class": "simple chemical",
            "label": "ADP",
            "statesandinfos": [],
            "parent": "",
            "clonemarker": true,
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph16",
            "bbox": {
                "x": 689.1314585303767,
                "y": 482.44467100584745,
                "w": "60.0",
                "h": "60.0"
            },
            "class": "simple chemical",
            "label": "ADP",
            "statesandinfos": [],
            "parent": "",
            "clonemarker": true,
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph15",
            "bbox": {
                "x": 882.8443326294546,
                "y": 482.5246268128043,
                "w": "60.0",
                "h": "60.0"
            },
            "class": "simple chemical",
            "label": "ATP",
            "statesandinfos": [],
            "parent": "",
            "clonemarker": true,
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph17",
            "bbox": {
                "x": 759.9810408902129,
                "y": 220.58540441014577,
                "w": "60.0",
                "h": "60.0"
            },
            "class": "simple chemical",
            "label": "ATP",
            "statesandinfos": [],
            "parent": "",
            "clonemarker": true,
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph12",
            "bbox": {
                "x": 722.5240088762721,
                "y": 352.770069365478,
                "w": "100.0",
                "h": "60.0"
            },
            "class": "macromolecule",
            "label": "MEK",
            "statesandinfos": [{
                "id": "glyph12a",
                "clazz": "state variable",
                "state": {
                    "value": "2P"
                },
                "bbox": {
                    "x": 0,
                    "y": 50,
                    "w": "32.0",
                    "h": "22.0"
                }
            }],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph19",
            "bbox": {
                "x": 887.0312955929699,
                "y": 188.01104320899924,
                "w": "100.0",
                "h": "60.0"
            },
            "class": "macromolecule",
            "label": "ERK",
            "statesandinfos": [{
                "id": "glyph19a",
                "clazz": "state variable",
                "state": {
                    "value": "2P"
                },
                "bbox": {
                    "x": -25,
                    "y": 50,
                    "w": "32.0",
                    "h": "22.0"
                }
            }],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph20",
            "bbox": {
                "x": 971.0567176507191,
                "y": 84.6685272739719,
                "w": "100.0",
                "h": "60.0"
            },
            "class": "tag",
            "label": "ERK",
            "statesandinfos": [],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph1",
            "bbox": {
                "x": 213.55056132706864,
                "y": 236.18933213306605,
                "w": "100.0",
                "h": "60.0"
            },
            "class": "macromolecule",
            "label": "RAS",
            "statesandinfos": [{
                "id": "glyph1a",
                "clazz": "state variable",
                "state": {
                    "value": "active"
                },
                "bbox": {
                    "x": 0,
                    "y": 50,
                    "w": "50.0",
                    "h": "26.0"
                }
            }],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph0",
            "bbox": {
                "x": 60.134389512288635,
                "y": 200.02587224541605,
                "w": "100.0",
                "h": "60.0"
            },
            "class": "tag",
            "label": "RAS",
            "statesandinfos": [],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph24",
            "bbox": {
                "x": 607.5584862953788,
                "y": 216.36466489184716,
                "w": "100.0",
                "h": "60.0"
            },
            "class": "macromolecule",
            "label": "MEK",
            "statesandinfos": [{
                "id": "glyph24a",
                "clazz": "state variable",
                "state": {
                    "value": "P"
                },
                "bbox": {
                    "x": -25,
                    "y": 50,
                    "w": "25.0",
                    "h": "22.0"
                }
            }],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph11",
            "bbox": {
                "x": 592.6185230656652,
                "y": 313.4502085225929,
                "w": "20.0",
                "h": "20.0"
            },
            "class": "process",
            "statesandinfos": [],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph25",
            "bbox": {
                "x": 247.4431965319236,
                "y": 338.29565236558483,
                "w": "100.0",
                "h": "60.0"
            },
            "class": "macromolecule",
            "label": "RAF",
            "statesandinfos": [{
                "id": "glyph25a",
                "clazz": "state variable",
                "state": {},
                "bbox": {
                    "x": 0,
                    "y": 50,
                    "w": "20.0",
                    "h": "22.0"
                }
            }],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph3",
            "bbox": {
                "x": 337.77918025112933,
                "y": 259.13454532846924,
                "w": "20.0",
                "h": "20.0"
            },
            "class": "process",
            "statesandinfos": [],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph23",
            "bbox": {
                "x": 631.3665810796247,
                "y": 93.61445750305336,
                "w": "100.0",
                "h": "60.0"
            },
            "class": "macromolecule",
            "label": "MEK",
            "statesandinfos": [{
                "id": "glyph23a",
                "clazz": "state variable",
                "state": {},
                "bbox": {
                    "x": -25,
                    "y": 50,
                    "w": "20.0",
                    "h": "22.0"
                }
            }],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph8",
            "bbox": {
                "x": 516.9252315842282,
                "y": 142.01290840429613,
                "w": "20.0",
                "h": "20.0"
            },
            "class": "process",
            "statesandinfos": [],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph22",
            "bbox": {
                "x": 786.1602768573573,
                "y": 557.4534904328991,
                "w": "100.0",
                "h": "60.0"
            },
            "class": "macromolecule",
            "label": "ERK",
            "statesandinfos": [{
                "id": "glyph22a",
                "clazz": "state variable",
                "state": {},
                "bbox": {
                    "x": -25,
                    "y": 50,
                    "w": "20.0",
                    "h": "22.0"
                }
            }],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph13",
            "bbox": {
                "x": 844.4300288939096,
                "y": 284.87165823750354,
                "w": "20.0",
                "h": "20.0"
            },
            "class": "process",
            "statesandinfos": [],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph14",
            "bbox": {
                "x": 783.7402046808443,
                "y": 453.1501505501591,
                "w": "20.0",
                "h": "20.0"
            },
            "class": "process",
            "statesandinfos": [],
            "parent": "",
            "ports": []
        }
    }, {
        "data": {
            "id": "glyph21",
            "bbox": {
                "x": 872.1517334162531,
                "y": 378.5680972732039,
                "w": "100.0",
                "h": "60.0"
            },
            "class": "macromolecule",
            "label": "ERK",
            "statesandinfos": [{
                "id": "glyph21a",
                "clazz": "state variable",
                "state": {
                    "value": "P"
                },
                "bbox": {
                    "x": -25,
                    "y": 50,
                    "w": "25.0",
                    "h": "22.0"
                }
            }],
            "parent": "",
            "ports": []
        }
    }],
    "edges": [{
        "data": {
            "class": "production",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph3",
            "target": "glyph2",
            "portsource": "glyph3",
            "porttarget": "glyph2"
        }
    }, {
        "data": {
            "class": "consumption",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph4",
            "target": "glyph3",
            "portsource": "glyph4",
            "porttarget": "glyph3"
        }
    }, {
        "data": {
            "class": "production",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph3",
            "target": "glyph5",
            "portsource": "glyph3",
            "porttarget": "glyph5"
        }
    }, {
        "data": {
            "class": "catalysis",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph1",
            "target": "glyph3",
            "portsource": "glyph1",
            "porttarget": "glyph3"
        }
    }, {
        "data": {
            "class": "consumption",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph7",
            "target": "glyph8",
            "portsource": "glyph7",
            "porttarget": "glyph8"
        }
    }, {
        "data": {
            "class": "production",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph8",
            "target": "glyph6",
            "portsource": "glyph8",
            "porttarget": "glyph6"
        }
    }, {
        "data": {
            "class": "consumption",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph10",
            "target": "glyph11",
            "portsource": "glyph10",
            "porttarget": "glyph11"
        }
    }, {
        "data": {
            "class": "production",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph11",
            "target": "glyph12",
            "portsource": "glyph11",
            "porttarget": "glyph12"
        }
    }, {
        "data": {
            "class": "production",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph11",
            "target": "glyph9",
            "portsource": "glyph11",
            "porttarget": "glyph9"
        }
    }, {
        "data": {
            "class": "catalysis",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph2",
            "target": "glyph11",
            "portsource": "glyph2",
            "porttarget": "glyph11"
        }
    }, {
        "data": {
            "class": "catalysis",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph2",
            "target": "glyph8",
            "portsource": "glyph2",
            "porttarget": "glyph8"
        }
    }, {
        "data": {
            "class": "production",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph13",
            "target": "glyph19",
            "portsource": "glyph13",
            "porttarget": "glyph19"
        }
    }, {
        "data": {
            "class": "production",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph13",
            "target": "glyph18",
            "portsource": "glyph13",
            "porttarget": "glyph18"
        }
    }, {
        "data": {
            "class": "production",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph14",
            "target": "glyph16",
            "portsource": "glyph14",
            "porttarget": "glyph16"
        }
    }, {
        "data": {
            "class": "consumption",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph15",
            "target": "glyph14",
            "portsource": "glyph15",
            "porttarget": "glyph14"
        }
    }, {
        "data": {
            "class": "consumption",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph17",
            "target": "glyph13",
            "portsource": "glyph17",
            "porttarget": "glyph13"
        }
    }, {
        "data": {
            "class": "catalysis",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph12",
            "target": "glyph13",
            "portsource": "glyph12",
            "porttarget": "glyph13"
        }
    }, {
        "data": {
            "class": "catalysis",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph12",
            "target": "glyph14",
            "portsource": "glyph12",
            "porttarget": "glyph14"
        }
    }, {
        "data": {
            "class": "equivalence arc",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph19",
            "target": "glyph20",
            "portsource": "glyph19",
            "porttarget": "glyph20"
        }
    }, {
        "data": {
            "class": "equivalence arc",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph1",
            "target": "glyph0",
            "portsource": "glyph1",
            "porttarget": "glyph0"
        }
    }, {
        "data": {
            "class": "production",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph8",
            "target": "glyph24",
            "portsource": "glyph8",
            "porttarget": "glyph24"
        }
    }, {
        "data": {
            "class": "consumption",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph24",
            "target": "glyph11",
            "portsource": "glyph24",
            "porttarget": "glyph11"
        }
    }, {
        "data": {
            "class": "consumption",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph25",
            "target": "glyph3",
            "portsource": "glyph25",
            "porttarget": "glyph3"
        }
    }, {
        "data": {
            "class": "consumption",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph23",
            "target": "glyph8",
            "portsource": "glyph23",
            "porttarget": "glyph8"
        }
    }, {
        "data": {
            "class": "consumption",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph22",
            "target": "glyph14",
            "portsource": "glyph22",
            "porttarget": "glyph14"
        }
    }, {
        "data": {
            "class": "consumption",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph21",
            "target": "glyph13",
            "portsource": "glyph21",
            "porttarget": "glyph13"
        }
    }, {
        "data": {
            "class": "production",
            "bendPointPositions": [],
            "cardinality": 0,
            "source": "glyph14",
            "target": "glyph21",
            "portsource": "glyph14",
            "porttarget": "glyph21"
        }
    }]
};

module.exports = mapkCascadeData;

},{}],3:[function(require,module,exports){

},{}],4:[function(require,module,exports){

/*!

Cytoscape.js {{VERSION}} (MIT licensed)

Copyright (c) The Cytoscape Consortium

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the “Software”), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

'use strict';

},{}],5:[function(require,module,exports){
'use strict';

var util = require( './util' );
var is = require( './is' );
var Promise = require( './promise' );

var Animation = function( target, opts, opts2 ){
  if( !(this instanceof Animation) ){
    return new Animation( target, opts, opts2 );
  }

  var _p = this._private = util.extend( {
    duration: 1000
  }, opts, opts2 );

  _p.target = target;
  _p.style = _p.style || _p.css;
  _p.started = false;
  _p.playing = false;
  _p.hooked = false;
  _p.applying = false;
  _p.progress = 0;
  _p.completes = [];
  _p.frames = [];

  if( _p.complete && is.fn( _p.complete ) ){
    _p.completes.push( _p.complete );
  }

  // for future timeline/animations impl
  this.length = 1;
  this[0] = this;
};

var anifn = Animation.prototype;

util.extend( anifn, {

  instanceString: function(){ return 'animation'; },

  hook: function(){
    var _p = this._private;

    if( !_p.hooked ){
      // add to target's animation queue
      var q;
      var tAni = _p.target._private.animation;
      if( _p.queue ){
        q = tAni.queue;
      } else {
        q = tAni.current;
      }
      q.push( this );

      // add to the animation loop pool
      if( is.elementOrCollection( _p.target ) ){
        _p.target.cy().addToAnimationPool( _p.target );
      }

      _p.hooked = true;
    }

    return this;
  },

  play: function(){
    var _p = this._private;

    // autorewind
    if( _p.progress === 1 ){
      _p.progress = 0;
    }

    _p.playing = true;
    _p.started = false; // needs to be started by animation loop
    _p.stopped = false;

    this.hook();

    // the animation loop will start the animation...

    return this;
  },

  playing: function(){
    return this._private.playing;
  },

  apply: function(){
    var _p = this._private;

    _p.applying = true;
    _p.started = false; // needs to be started by animation loop
    _p.stopped = false;

    this.hook();

    // the animation loop will apply the animation at this progress

    return this;
  },

  applying: function(){
    return this._private.applying;
  },

  pause: function(){
    var _p = this._private;

    _p.playing = false;
    _p.started = false;

    return this;
  },

  stop: function(){
    var _p = this._private;

    _p.playing = false;
    _p.started = false;
    _p.stopped = true; // to be removed from animation queues

    return this;
  },

  rewind: function(){
    return this.progress( 0 );
  },

  fastforward: function(){
    return this.progress( 1 );
  },

  time: function( t ){
    var _p = this._private;

    if( t === undefined ){
      return _p.progress * _p.duration;
    } else {
      return this.progress( t / _p.duration );
    }
  },

  progress: function( p ){
    var _p = this._private;
    var wasPlaying = _p.playing;

    if( p === undefined ){
      return _p.progress;
    } else {
      if( wasPlaying ){
        this.pause();
      }

      _p.progress = p;
      _p.started = false;

      if( wasPlaying ){
        this.play();
      }
    }

    return this;
  },

  completed: function(){
    return this._private.progress === 1;
  },

  reverse: function(){
    var _p = this._private;
    var wasPlaying = _p.playing;

    if( wasPlaying ){
      this.pause();
    }

    _p.progress = 1 - _p.progress;
    _p.started = false;

    var swap = function( a, b ){
      var _pa = _p[ a ];

      _p[ a ] = _p[ b ];
      _p[ b ] = _pa;
    };

    swap( 'zoom', 'startZoom' );
    swap( 'pan', 'startPan' );
    swap( 'position', 'startPosition' );

    // swap styles
    for( var i = 0; i < _p.style.length; i++ ){
      var prop = _p.style[ i ];
      var name = prop.name;
      var startStyleProp = _p.startStyle[ name ];

      _p.startStyle[ name ] = prop;
      _p.style[ i ] = startStyleProp;
    }

    if( wasPlaying ){
      this.play();
    }

    return this;
  },

  promise: function( type ){
    var _p = this._private;

    var arr;

    switch( type ){
      case 'frame':
        arr = _p.frames;
        break;
      default:
      case 'complete':
      case 'completed':
        arr = _p.completes;
    }

    return new Promise( function( resolve, reject ){
      arr.push( function(){
        resolve();
      } );
    } );
  }

} );

anifn.complete = anifn.completed;

module.exports = Animation;

},{"./is":86,"./promise":89,"./util":104}],6:[function(require,module,exports){
'use strict';

var is = require( '../../is' );

var elesfn = ({

  // Implemented from pseudocode from wikipedia
  aStar: function( options ){
    var eles = this;

    options = options || {};

    // Reconstructs the path from Start to End, acumulating the result in pathAcum
    var reconstructPath = function( start, end, cameFromMap, pathAcum ){
      // Base case
      if( start == end ){
        pathAcum.push( cy.getElementById( end ) );
        return pathAcum;
      }

      if( end in cameFromMap ){
        // We know which node is before the last one
        var previous = cameFromMap[ end ];
        var previousEdge = cameFromEdge[ end ];

        pathAcum.push( cy.getElementById( end ) );
        pathAcum.push( cy.getElementById( previousEdge ) );


        return reconstructPath( start,
                     previous,
                     cameFromMap,
                     pathAcum );
      }

      // We should not reach here!
      return undefined;
    };

    // Returns the index of the element in openSet which has minimum fScore
    var findMin = function( openSet, fScore ){
      if( openSet.length === 0 ){
        // Should never be the case
        return undefined;
      }
      var minPos = 0;
      var tempScore = fScore[ openSet[0] ];
      for( var i = 1; i < openSet.length; i++ ){
        var s = fScore[ openSet[ i ] ];
        if( s < tempScore ){
          tempScore = s;
          minPos = i;
        }
      }
      return minPos;
    };

    var cy = this._private.cy;

    // root - mandatory!
    if( options != null && options.root != null ){
      var source = is.string( options.root ) ?
        // use it as a selector, e.g. "#rootID
        this.filter( options.root )[0] :
        options.root[0];
    } else {
      return undefined;
    }

    // goal - mandatory!
    if( options.goal != null ){
      var target = is.string( options.goal ) ?
        // use it as a selector, e.g. "#goalID
        this.filter( options.goal )[0] :
        options.goal[0];
    } else {
      return undefined;
    }

    // Heuristic function - optional
    if( options.heuristic != null && is.fn( options.heuristic ) ){
      var heuristic = options.heuristic;
    } else {
      var heuristic = function(){ return 0; }; // use constant if unspecified
    }

    // Weight function - optional
    if( options.weight != null && is.fn( options.weight ) ){
      var weightFn = options.weight;
    } else {
      // If not specified, assume each edge has equal weight (1)
      var weightFn = function( e ){return 1;};
    }

    // directed - optional
    if( options.directed != null ){
      var directed = options.directed;
    } else {
      var directed = false;
    }

    var closedSet = [];
    var openSet = [ source.id() ];
    var cameFrom = {};
    var cameFromEdge = {};
    var gScore = {};
    var fScore = {};

    gScore[ source.id() ] = 0;
    fScore[ source.id() ] = heuristic( source );

    var edges = this.edges().stdFilter( function( e ){ return !e.isLoop(); } );
    var nodes = this.nodes();

    // Counter
    var steps = 0;

    // Main loop
    while( openSet.length > 0 ){
      var minPos = findMin( openSet, fScore );
      var cMin = cy.getElementById( openSet[ minPos ] );
      steps++;

      // If we've found our goal, then we are done
      if( cMin.id() == target.id() ){
        var rPath = reconstructPath( source.id(), target.id(), cameFrom, [] );
        rPath.reverse();
        return {
          found: true,
          distance: gScore[ cMin.id() ],
          path: eles.spawn( rPath ),
          steps: steps
        };
      }

      // Add cMin to processed nodes
      closedSet.push( cMin.id() );
      // Remove cMin from boundary nodes
      openSet.splice( minPos, 1 );

      // Update scores for neighbors of cMin
      // Take into account if graph is directed or not
      var vwEdges = cMin.connectedEdges();
      if( directed ){ vwEdges = vwEdges.stdFilter( function( ele ){ return ele.data( 'source' ) === cMin.id(); } ); }
      vwEdges = vwEdges.intersect( edges );

      for( var i = 0; i < vwEdges.length; i++ ){
        var e = vwEdges[ i ];
        var w = e.connectedNodes().stdFilter( function( n ){ return n.id() !== cMin.id(); } ).intersect( nodes );

        // if node is in closedSet, ignore it
        if( closedSet.indexOf( w.id() ) != -1 ){
          continue;
        }

        // New tentative score for node w
        var tempScore = gScore[ cMin.id() ] + weightFn.apply( e, [ e ] );

        // Update gScore for node w if:
        //   w not present in openSet
        // OR
        //   tentative gScore is less than previous value

        // w not in openSet
        if( openSet.indexOf( w.id() ) == -1 ){
          gScore[ w.id() ] = tempScore;
          fScore[ w.id() ] = tempScore + heuristic( w );
          openSet.push( w.id() ); // Add node to openSet
          cameFrom[ w.id() ] = cMin.id();
          cameFromEdge[ w.id() ] = e.id();
          continue;
        }
        // w already in openSet, but with greater gScore
        if( tempScore < gScore[ w.id() ] ){
          gScore[ w.id() ] = tempScore;
          fScore[ w.id() ] = tempScore + heuristic( w );
          cameFrom[ w.id() ] = cMin.id();
        }

      } // End of neighbors update

    } // End of main loop

    // If we've reached here, then we've not reached our goal
    return {
      found: false,
      distance: undefined,
      path: undefined,
      steps: steps
    };
  }

}); // elesfn


module.exports = elesfn;

},{"../../is":86}],7:[function(require,module,exports){
'use strict';

var is = require( '../../is' );
var util = require( '../../util' );

var elesfn = ({

  // Implemented from pseudocode from wikipedia
  bellmanFord: function( options ){
    var eles = this;

    options = options || {};

    // Weight function - optional
    if( options.weight != null && is.fn( options.weight ) ){
      var weightFn = options.weight;
    } else {
      // If not specified, assume each edge has equal weight (1)
      var weightFn = function( e ){return 1;};
    }

    // directed - optional
    if( options.directed != null ){
      var directed = options.directed;
    } else {
      var directed = false;
    }

    // root - mandatory!
    if( options.root != null ){
      if( is.string( options.root ) ){
        // use it as a selector, e.g. "#rootID
        var source = this.filter( options.root )[0];
      } else {
        var source = options.root[0];
      }
    } else {
      return undefined;
    }

    var cy = this._private.cy;
    var edges = this.edges().stdFilter( function( e ){ return !e.isLoop(); } );
    var nodes = this.nodes();
    var numNodes = nodes.length;

    // mapping: node id -> position in nodes array
    var id2position = {};
    for( var i = 0; i < numNodes; i++ ){
      id2position[ nodes[ i ].id() ] = i;
    }

    // Initializations
    var cost = [];
    var predecessor = [];
    var predEdge = [];

    for( var i = 0; i < numNodes; i++ ){
      if( nodes[ i ].id() === source.id() ){
        cost[ i ] = 0;
      } else {
        cost[ i ] = Infinity;
      }
      predecessor[ i ] = undefined;
    }

    // Edges relaxation
    var flag = false;
    for( var i = 1; i < numNodes; i++ ){
      flag = false;
      for( var e = 0; e < edges.length; e++ ){
        var sourceIndex = id2position[ edges[ e ].source().id() ];
        var targetIndex = id2position[ edges[ e ].target().id() ];
        var weight = weightFn.apply( edges[ e ], [ edges[ e ] ] );

        var temp = cost[ sourceIndex ] + weight;
        if( temp < cost[ targetIndex ] ){
          cost[ targetIndex ] = temp;
          predecessor[ targetIndex ] = sourceIndex;
          predEdge[ targetIndex ] = edges[ e ];
          flag = true;
        }

        // If undirected graph, we need to take into account the 'reverse' edge
        if( !directed ){
          var temp = cost[ targetIndex ] + weight;
          if( temp < cost[ sourceIndex ] ){
            cost[ sourceIndex ] = temp;
            predecessor[ sourceIndex ] = targetIndex;
            predEdge[ sourceIndex ] = edges[ e ];
            flag = true;
          }
        }
      }

      if( !flag ){
        break;
      }
    }

    if( flag ){
      // Check for negative weight cycles
      for( var e = 0; e < edges.length; e++ ){
        var sourceIndex = id2position[ edges[ e ].source().id() ];
        var targetIndex = id2position[ edges[ e ].target().id() ];
        var weight = weightFn.apply( edges[ e ], [ edges[ e ] ] );

        if( cost[ sourceIndex ] + weight < cost[ targetIndex ] ){
          util.error( 'Graph contains a negative weight cycle for Bellman-Ford' );
          return { pathTo: undefined,
               distanceTo: undefined,
               hasNegativeWeightCycle: true};
        }
      }
    }

    // Build result object
    var position2id = [];
    for( var i = 0; i < numNodes; i++ ){
      position2id.push( nodes[ i ].id() );
    }


    var res = {
      distanceTo: function( to ){
        if( is.string( to ) ){
          // to is a selector string
          var toId = (cy.filter( to )[0]).id();
        } else {
          // to is a node
          var toId = to.id();
        }

        return cost[ id2position[ toId ] ];
      },

      pathTo: function( to ){

        var reconstructPathAux = function( predecessor, fromPos, toPos, position2id, acumPath, predEdge ){
          for( ;; ){
            // Add toId to path
            acumPath.push( cy.getElementById( position2id[ toPos ] ) );
            acumPath.push( predEdge[ toPos ] );

            if( fromPos === toPos ){
              // reached starting node
              return acumPath;
            }

            // If no path exists, discart acumulated path and return undefined
            var predPos = predecessor[ toPos ];
            if( typeof predPos === 'undefined' ){
              return undefined;
            }

            toPos = predPos;
          }

        };

        if( is.string( to ) ){
          // to is a selector string
          var toId = (cy.filter( to )[0]).id();
        } else {
          // to is a node
          var toId = to.id();
        }
        var path = [];

        // This returns a reversed path
        var res =  reconstructPathAux( predecessor,
                      id2position[ source.id() ],
                      id2position[ toId ],
                      position2id,
                      path,
                      predEdge );

        // Get it in the correct order and return it
        if( res != null ){
          res.reverse();
        }

        return eles.spawn( res );
      },

      hasNegativeWeightCycle: false
    };

    return res;

  } // bellmanFord

}); // elesfn

module.exports = elesfn;

},{"../../is":86,"../../util":104}],8:[function(require,module,exports){
'use strict';

var is = require( '../../is' );
var Heap = require( '../../heap' );

var elesfn = ({

  // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
  betweennessCentrality: function( options ){
    options = options || {};

    // Weight - optional
    var weighted, weightFn;
    if( is.fn( options.weight ) ){
      weightFn = options.weight;
      weighted = true;
    } else {
      weighted = false;
    }

    // Directed - default false
    var directed = options.directed != null ? options.directed : false;

    var cy = this._private.cy;

    // starting
    var V = this.nodes();
    var A = {};
    var _C = {};
    var max = 0;
    var C = {
      set: function( key, val ){
        _C[ key ] = val;

        if( val > max ){ max = val; }
      },

      get: function( key ){ return _C[ key ]; }
    };

    // A contains the neighborhoods of every node
    for( var i = 0; i < V.length; i++ ){
      var v = V[ i ];
      var vid = v.id();

      if( directed ){
        A[ vid ] = v.outgoers().nodes(); // get outgoers of every node
      } else {
        A[ vid ] = v.openNeighborhood().nodes(); // get neighbors of every node
      }

      C.set( vid, 0 );
    }

    for( var s = 0; s < V.length; s++ ){
      var sid = V[s].id();
      var S = []; // stack
      var P = {};
      var g = {};
      var d = {};
      var Q = new Heap(function( a, b ){
        return d[a] - d[b];
      }); // queue

      // init dictionaries
      for( var i = 0; i < V.length; i++ ){
        var vid = V[ i ].id();

        P[ vid ] = [];
        g[ vid ] = 0;
        d[ vid ] = Infinity;
      }

      g[ sid ] = 1; // sigma
      d[ sid ] = 0; // distance to s

      Q.push( sid );

      while( !Q.empty() ){
        var v = Q.pop();

        S.push( v );

        if( weighted ){
          for( var j = 0; j < A[v].length; j++ ){
            var w = A[v][j];
            var vEle = cy.getElementById( v );

            var edge;
            if( vEle.edgesTo( w ).length > 0 ){
              edge = vEle.edgesTo( w )[0];
            } else {
              edge = w.edgesTo( vEle )[0];
            }

            var edgeWeight = weightFn.apply( edge, [ edge ] );

            w = w.id();

            if( d[w] > d[v] + edgeWeight ){
              d[w] = d[v] + edgeWeight;

              if( Q.nodes.indexOf( w ) < 0 ){ //if w is not in Q
                Q.push( w );
              } else { // update position if w is in Q
                Q.updateItem( w );
              }

              g[w] = 0;
              P[w] = [];
            }

            if( d[w] == d[v] + edgeWeight ){
              g[w] = g[w] + g[v];
              P[w].push( v );
            }
          }
        } else {
          for( var j = 0; j < A[v].length; j++ ){
            var w = A[v][j].id();

            if( d[w] == Infinity ){
              Q.push( w );

              d[w] = d[v] + 1;
            }

            if( d[w] == d[v] + 1 ){
              g[w] = g[w] + g[v];
              P[w].push( v );
            }
          }
        }
      }

      var e = {};
      for( var i = 0; i < V.length; i++ ){
        e[ V[ i ].id() ] = 0;
      }

      while( S.length > 0 ){
        var w = S.pop();

        for( var j = 0; j < P[w].length; j++ ){
          var v = P[w][j];

          e[v] = e[v] + (g[v] / g[w]) * (1 + e[w]);

          if( w != V[s].id() ){
            C.set( w, C.get( w ) + e[w] );
          }
        }
      }
    }

    var ret = {
      betweenness: function( node ){
        if( is.string( node ) ){
          var node = cy.filter( node ).id();
        } else {
          var node = node.id();
        }

        return C.get( node );
      },

      betweennessNormalized: function( node ){
        if ( max == 0 )
          return 0;

        if( is.string( node ) ){
          var node = cy.filter( node ).id();
        } else {
          var node = node.id();
        }

        return C.get( node ) / max;
      }
    };

    // alias
    ret.betweennessNormalised = ret.betweennessNormalized;

    return ret;
  } // betweennessCentrality

}); // elesfn

// nice, short mathemathical alias
elesfn.bc = elesfn.betweennessCentrality;

module.exports = elesfn;

},{"../../heap":84,"../../is":86}],9:[function(require,module,exports){
'use strict';

var is = require( '../../is' );

var defineSearch = function( params ){
  params = {
    bfs: params.bfs || !params.dfs,
    dfs: params.dfs || !params.bfs
  };

  // from pseudocode on wikipedia
  return function searchFn( roots, fn, directed ){
    var options;
    var std;
    var thisArg;
    if( is.plainObject( roots ) && !is.elementOrCollection( roots ) ){
      options = roots;
      roots = options.roots || options.root;
      fn = options.visit;
      directed = options.directed;
      std = options.std;
      thisArg = options.thisArg;
    }

    directed = arguments.length === 2 && !is.fn( fn ) ? fn : directed;
    fn = is.fn( fn ) ? fn : function(){};

    var cy = this._private.cy;
    var v = roots = is.string( roots ) ? this.filter( roots ) : roots;
    var Q = [];
    var connectedNodes = [];
    var connectedBy = {};
    var id2depth = {};
    var V = {};
    var j = 0;
    var found;
    var nodes = this.nodes();
    var edges = this.edges();

    // enqueue v
    for( var i = 0; i < v.length; i++ ){
      if( v[ i ].isNode() ){
        Q.unshift( v[ i ] );

        if( params.bfs ){
          V[ v[ i ].id() ] = true;

          connectedNodes.push( v[ i ] );
        }

        id2depth[ v[ i ].id() ] = 0;
      }
    }

    while( Q.length !== 0 ){
      var v = params.bfs ? Q.shift() : Q.pop();

      if( params.dfs ){
        if( V[ v.id() ] ){ continue; }

        V[ v.id() ] = true;

        connectedNodes.push( v );
      }

      var depth = id2depth[ v.id() ];
      var prevEdge = connectedBy[ v.id() ];
      var prevNode = prevEdge == null ? undefined : prevEdge.connectedNodes().not( v )[0];
      var ret;

      if( std ){
        ret = fn.call( thisArg, v, prevEdge, prevNode, j++, depth );
      } else {
        ret = fn.call( v, j++, depth, v, prevEdge, prevNode );
      }

      if( ret === true ){
        found = v;
        break;
      }

      if( ret === false ){
        break;
      }

      var vwEdges = v.connectedEdges( directed ? function(){ return this.data( 'source' ) === v.id(); } : undefined ).intersect( edges );
      for( var i = 0; i < vwEdges.length; i++ ){
        var e = vwEdges[ i ];
        var w = e.connectedNodes( function(){ return this.id() !== v.id(); } ).intersect( nodes );

        if( w.length !== 0 && !V[ w.id() ] ){
          w = w[0];

          Q.push( w );

          if( params.bfs ){
            V[ w.id() ] = true;

            connectedNodes.push( w );
          }

          connectedBy[ w.id() ] = e;

          id2depth[ w.id() ] = id2depth[ v.id() ] + 1;
        }
      }

    }

    var connectedEles = [];

    for( var i = 0; i < connectedNodes.length; i++ ){
      var node = connectedNodes[ i ];
      var edge = connectedBy[ node.id() ];

      if( edge ){
        connectedEles.push( edge );
      }

      connectedEles.push( node );
    }

    return {
      path: cy.collection( connectedEles, { unique: true } ),
      found: cy.collection( found )
    };
  };
};

// search, spanning trees, etc
var elesfn = ({
  breadthFirstSearch: defineSearch( { bfs: true } ),
  depthFirstSearch: defineSearch( { dfs: true } )
});

// nice, short mathemathical alias
elesfn.bfs = elesfn.breadthFirstSearch;
elesfn.dfs = elesfn.depthFirstSearch;

module.exports = elesfn;

},{"../../is":86}],10:[function(require,module,exports){
'use strict';

var is = require( '../../is' );

var elesfn = ({

  closenessCentralityNormalized: function( options ){
    options = options || {};

    var cy = this.cy();

    var harmonic = options.harmonic;
    if( harmonic === undefined ){
      harmonic = true;
    }

    var closenesses = {};
    var maxCloseness = 0;
    var nodes = this.nodes();
    var fw = this.floydWarshall( { weight: options.weight, directed: options.directed } );

    // Compute closeness for every node and find the maximum closeness
    for( var i = 0; i < nodes.length; i++ ){
      var currCloseness = 0;
      for( var j = 0; j < nodes.length; j++ ){
        if( i != j ){
          var d = fw.distance( nodes[ i ], nodes[ j ] );

          if( harmonic ){
            currCloseness += 1 / d;
          } else {
            currCloseness += d;
          }
        }
      }

      if( !harmonic ){
        currCloseness = 1 / currCloseness;
      }

      if( maxCloseness < currCloseness ){
        maxCloseness = currCloseness;
      }

      closenesses[ nodes[ i ].id() ] = currCloseness;
    }

    return {
      closeness: function( node ){
        if( maxCloseness == 0 ){ return 0; }

        if( is.string( node ) ){
          // from is a selector string
          var node = (cy.filter( node )[0]).id();
        } else {
          // from is a node
          var node = node.id();
        }

        return closenesses[ node ] / maxCloseness;
      }
    };
  },

  // Implemented from pseudocode from wikipedia
  closenessCentrality: function( options ){
    options = options || {};

    // root - mandatory!
    if( options.root != null ){
      if( is.string( options.root ) ){
        // use it as a selector, e.g. "#rootID
        var root = this.filter( options.root )[0];
      } else {
        var root = options.root[0];
      }
    } else {
      return undefined;
    }

    // weight - optional
    if( options.weight != null && is.fn( options.weight ) ){
      var weight = options.weight;
    } else {
      var weight = function(){return 1;};
    }

    // directed - optional
    if( options.directed != null && is.bool( options.directed ) ){
      var directed = options.directed;
    } else {
      var directed = false;
    }

    var harmonic = options.harmonic;
    if( harmonic === undefined ){
      harmonic = true;
    }

    // we need distance from this node to every other node
    var dijkstra = this.dijkstra( {
      root: root,
      weight: weight,
      directed: directed
    } );
    var totalDistance = 0;

    var nodes = this.nodes();
    for( var i = 0; i < nodes.length; i++ ){
      if( nodes[ i ].id() != root.id() ){
        var d = dijkstra.distanceTo( nodes[ i ] );

        if( harmonic ){
          totalDistance += 1 / d;
        } else {
          totalDistance += d;
        }
      }
    }

    return harmonic ? totalDistance : 1 / totalDistance;
  } // closenessCentrality

}); // elesfn

// nice, short mathemathical alias
elesfn.cc = elesfn.closenessCentrality;
elesfn.ccn = elesfn.closenessCentralityNormalised = elesfn.closenessCentralityNormalized;

module.exports = elesfn;

},{"../../is":86}],11:[function(require,module,exports){
'use strict';

var is = require( '../../is' );
var util = require( '../../util' );

var elesfn = ({

  degreeCentralityNormalized: function( options ){
    options = options || {};

    var cy = this.cy();

    // directed - optional
    if( options.directed != null ){
      var directed = options.directed;
    } else {
      var directed = false;
    }

    var nodes = this.nodes();
    var numNodes = nodes.length;

    if( !directed ){
      var degrees = {};
      var maxDegree = 0;

      for( var i = 0; i < numNodes; i++ ){
        var node = nodes[ i ];
        // add current node to the current options object and call degreeCentrality
        var currDegree = this.degreeCentrality( util.extend( {}, options, {root: node} ) );
        if( maxDegree < currDegree.degree )
          maxDegree = currDegree.degree;

        degrees[ node.id() ] = currDegree.degree;
      }

      return {
        degree: function( node ){
          if( maxDegree == 0 )
            return 0;

          if( is.string( node ) ){
            // from is a selector string
            var node = (cy.filter( node )[0]).id();
          } else {
            // from is a node
            var node = node.id();
          }

          return degrees[ node ] / maxDegree;
        }
      };
    } else {
      var indegrees = {};
      var outdegrees = {};
      var maxIndegree = 0;
      var maxOutdegree = 0;

      for( var i = 0; i < numNodes; i++ ){
        var node = nodes[ i ];
        // add current node to the current options object and call degreeCentrality
        var currDegree = this.degreeCentrality( util.extend( {}, options, {root: node} ) );

        if( maxIndegree < currDegree.indegree )
          maxIndegree = currDegree.indegree;

        if( maxOutdegree < currDegree.outdegree )
          maxOutdegree = currDegree.outdegree;

        indegrees[ node.id() ] = currDegree.indegree;
        outdegrees[ node.id() ] = currDegree.outdegree;
      }

      return {
        indegree: function( node ){
          if ( maxIndegree == 0 )
            return 0;

          if( is.string( node ) ){
            // from is a selector string
            var node = (cy.filter( node )[0]).id();
          } else {
            // from is a node
            var node = node.id();
          }

          return indegrees[ node ] / maxIndegree;
        },
        outdegree: function( node ){
          if ( maxOutdegree == 0 )
            return 0;

          if( is.string( node ) ){
            // from is a selector string
            var node = (cy.filter( node )[0]).id();
          } else {
            // from is a node
            var node = node.id();
          }

          return outdegrees[ node ] / maxOutdegree;
        }

      };
    }

  }, // degreeCentralityNormalized

  // Implemented from the algorithm in Opsahl's paper
  // "Node centrality in weighted networks: Generalizing degree and shortest paths"
  // check the heading 2 "Degree"
  degreeCentrality: function( options ){
    options = options || {};

    var callingEles = this;

    // root - mandatory!
    if( options != null && options.root != null ){
      var root = is.string( options.root ) ? this.filter( options.root )[0] : options.root[0];
    } else {
      return undefined;
    }

    // weight - optional
    if( options.weight != null && is.fn( options.weight ) ){
      var weightFn = options.weight;
    } else {
      // If not specified, assume each edge has equal weight (1)
      var weightFn = function( e ){
        return 1;
      };
    }

    // directed - optional
    if( options.directed != null ){
      var directed = options.directed;
    } else {
      var directed = false;
    }

    // alpha - optional
    if( options.alpha != null && is.number( options.alpha ) ){
      var alpha = options.alpha;
    } else {
      alpha = 0;
    }


    if( !directed ){
      var connEdges = root.connectedEdges().intersection( callingEles );
      var k = connEdges.length;
      var s = 0;

      // Now, sum edge weights
      for( var i = 0; i < connEdges.length; i++ ){
        var edge = connEdges[ i ];
        s += weightFn.apply( edge, [ edge ] );
      }

      return {
        degree: Math.pow( k, 1 - alpha ) * Math.pow( s, alpha )
      };
    } else {
      var incoming = root.connectedEdges( 'edge[target = "' + root.id() + '"]' ).intersection( callingEles );
      var outgoing = root.connectedEdges( 'edge[source = "' + root.id() + '"]' ).intersection( callingEles );
      var k_in = incoming.length;
      var k_out = outgoing.length;
      var s_in = 0;
      var s_out = 0;

      // Now, sum incoming edge weights
      for( var i = 0; i < incoming.length; i++ ){
        var edge = incoming[ i ];
        s_in += weightFn.apply( edge, [ edge ] );
      }

      // Now, sum outgoing edge weights
      for( var i = 0; i < outgoing.length; i++ ){
        var edge = outgoing[ i ];
        s_out += weightFn.apply( edge, [ edge ] );
      }

      return {
        indegree: Math.pow( k_in, 1 - alpha ) * Math.pow( s_in, alpha ),
        outdegree: Math.pow( k_out, 1 - alpha ) * Math.pow( s_out, alpha )
      };
    }
  } // degreeCentrality

}); // elesfn

// nice, short mathemathical alias
elesfn.dc = elesfn.degreeCentrality;
elesfn.dcn = elesfn.degreeCentralityNormalised = elesfn.degreeCentralityNormalized;

module.exports = elesfn;

},{"../../is":86,"../../util":104}],12:[function(require,module,exports){
'use strict';

var is = require( '../../is' );
var Heap = require( '../../heap' );

var elesfn = ({

  dijkstra: function( root, weightFn, directed ){
    var options;
    if( is.plainObject( root ) && !is.elementOrCollection( root ) ){
      options = root;
      root = options.root;
      weightFn = options.weight;
      directed = options.directed;
    }

    var cy = this._private.cy;
    weightFn = is.fn( weightFn ) ? weightFn : function(){ return 1; }; // if not specified, assume each edge has equal weight (1)

    var source = is.string( root ) ? this.filter( root )[0] : root[0];
    var dist = {};
    var prev = {};
    var knownDist = {};

    var edges = this.edges().filter( function(){ return !this.isLoop(); } );
    var nodes = this.nodes();

    var getDist = function( node ){
      return dist[ node.id() ];
    };

    var setDist = function( node, d ){
      dist[ node.id() ] = d;

      Q.updateItem( node );
    };

    var Q = new Heap( function( a, b ){
      return getDist( a ) - getDist( b );
    } );

    for( var i = 0; i < nodes.length; i++ ){
      var node = nodes[ i ];

      dist[ node.id() ] = node.same( source ) ? 0 : Infinity;
      Q.push( node );
    }

    var distBetween = function( u, v ){
      var uvs = ( directed ? u.edgesTo( v ) : u.edgesWith( v ) ).intersect( edges );
      var smallestDistance = Infinity;
      var smallestEdge;

      for( var i = 0; i < uvs.length; i++ ){
        var edge = uvs[ i ];
        var weight = weightFn.apply( edge, [ edge ] );

        if( weight < smallestDistance || !smallestEdge ){
          smallestDistance = weight;
          smallestEdge = edge;
        }
      }

      return {
        edge: smallestEdge,
        dist: smallestDistance
      };
    };

    while( Q.size() > 0 ){
      var u = Q.pop();
      var smalletsDist = getDist( u );
      var uid = u.id();

      knownDist[ uid ] = smalletsDist;

      if( smalletsDist === Math.Infinite ){
        break;
      }

      var neighbors = u.neighborhood().intersect( nodes );
      for( var i = 0; i < neighbors.length; i++ ){
        var v = neighbors[ i ];
        var vid = v.id();
        var vDist = distBetween( u, v );

        var alt = smalletsDist + vDist.dist;

        if( alt < getDist( v ) ){
          setDist( v, alt );

          prev[ vid ] = {
            node: u,
            edge: vDist.edge
          };
        }
      } // for
    } // while

    return {
      distanceTo: function( node ){
        var target = is.string( node ) ? nodes.filter( node )[0] : node[0];

        return knownDist[ target.id() ];
      },

      pathTo: function( node ){
        var target = is.string( node ) ? nodes.filter( node )[0] : node[0];
        var S = [];
        var u = target;

        if( target.length > 0 ){
          S.unshift( target );

          while( prev[ u.id() ] ){
            var p = prev[ u.id() ];

            S.unshift( p.edge );
            S.unshift( p.node );

            u = p.node;
          }
        }

        return cy.collection( S );
      }
    };
  }
});

module.exports = elesfn;

},{"../../heap":84,"../../is":86}],13:[function(require,module,exports){
'use strict';

var is = require( '../../is' );

var elesfn = ({

  // Implemented from pseudocode from wikipedia
  floydWarshall: function( options ){
    options = options || {};

    var cy = this.cy();

    // Weight function - optional
    if( options.weight != null && is.fn( options.weight ) ){
      var weightFn = options.weight;
    } else {
      // If not specified, assume each edge has equal weight (1)
      var weightFn = function( e ){return 1;};
    }

    // directed - optional
    if( options.directed != null ){
      var directed = options.directed;
    } else {
      var directed = false;
    }

    var edges = this.edges().stdFilter( function( e ){ return !e.isLoop(); } );
    var nodes = this.nodes();
    var numNodes = nodes.length;

    // mapping: node id -> position in nodes array
    var id2position = {};
    for( var i = 0; i < numNodes; i++ ){
      id2position[ nodes[ i ].id() ] = i;
    }

    // Initialize distance matrix
    var dist = [];
    for( var i = 0; i < numNodes; i++ ){
      var newRow = new Array( numNodes );
      for( var j = 0; j < numNodes; j++ ){
        if( i == j ){
          newRow[ j ] = 0;
        } else {
          newRow[ j ] = Infinity;
        }
      }
      dist.push( newRow );
    }

    // Initialize matrix used for path reconstruction
    // Initialize distance matrix
    var next = [];
    var edgeNext = [];

    var initMatrix = function( next ){
      for( var i = 0; i < numNodes; i++ ){
        var newRow = new Array( numNodes );
        for( var j = 0; j < numNodes; j++ ){
          newRow[ j ] = undefined;
        }
        next.push( newRow );
      }
    };

    initMatrix( next );
    initMatrix( edgeNext );

    // Process edges
    for( var i = 0; i < edges.length ; i++ ){
      var sourceIndex = id2position[ edges[ i ].source().id() ];
      var targetIndex = id2position[ edges[ i ].target().id() ];
      var weight = weightFn.apply( edges[ i ], [ edges[ i ] ] );

      // Check if already process another edge between same 2 nodes
      if( dist[ sourceIndex ][ targetIndex ] > weight ){
        dist[ sourceIndex ][ targetIndex ] = weight;
        next[ sourceIndex ][ targetIndex ] = targetIndex;
        edgeNext[ sourceIndex ][ targetIndex ] = edges[ i ];
      }
    }

    // If undirected graph, process 'reversed' edges
    if( !directed ){
      for( var i = 0; i < edges.length ; i++ ){
        var sourceIndex = id2position[ edges[ i ].target().id() ];
        var targetIndex = id2position[ edges[ i ].source().id() ];
        var weight = weightFn.apply( edges[ i ], [ edges[ i ] ] );

        // Check if already process another edge between same 2 nodes
        if( dist[ sourceIndex ][ targetIndex ] > weight ){
          dist[ sourceIndex ][ targetIndex ] = weight;
          next[ sourceIndex ][ targetIndex ] = targetIndex;
          edgeNext[ sourceIndex ][ targetIndex ] = edges[ i ];
        }
      }
    }

    // Main loop
    for( var k = 0; k < numNodes; k++ ){
      for( var i = 0; i < numNodes; i++ ){
        for( var j = 0; j < numNodes; j++ ){
          if( dist[ i ][ k ] + dist[ k ][ j ] < dist[ i ][ j ] ){
            dist[ i ][ j ] = dist[ i ][ k ] + dist[ k ][ j ];
            next[ i ][ j ] = next[ i ][ k ];
          }
        }
      }
    }

    // Build result object
    var position2id = [];
    for( var i = 0; i < numNodes; i++ ){
      position2id.push( nodes[ i ].id() );
    }

    var res = {
      distance: function( from, to ){
        if( is.string( from ) ){
          // from is a selector string
          var fromId = (cy.filter( from )[0]).id();
        } else {
          // from is a node
          var fromId = from.id();
        }

        if( is.string( to ) ){
          // to is a selector string
          var toId = (cy.filter( to )[0]).id();
        } else {
          // to is a node
          var toId = to.id();
        }

        return dist[ id2position[ fromId ] ][ id2position[ toId ] ];
      },

      path: function( from, to ){
        var reconstructPathAux = function( from, to, next, position2id, edgeNext ){
          if( from === to ){
            return cy.getElementById( position2id[ from ] );
          }
          if( next[ from ][ to ] === undefined ){
            return undefined;
          }

          var path = [ cy.getElementById( position2id[ from ] ) ];
          var prev = from;
          while( from !== to ){
            prev = from;
            from = next[ from ][ to ];

            var edge = edgeNext[ prev ][ from ];
            path.push( edge );

            path.push( cy.getElementById( position2id[ from ] ) );
          }
          return path;
        };

        if( is.string( from ) ){
          // from is a selector string
          var fromId = (cy.filter( from )[0]).id();
        } else {
          // from is a node
          var fromId = from.id();
        }

        if( is.string( to ) ){
          // to is a selector string
          var toId = (cy.filter( to )[0]).id();
        } else {
          // to is a node
          var toId = to.id();
        }

        var pathArr = reconstructPathAux( id2position[ fromId ],
                      id2position[ toId ],
                      next,
                      position2id,
                      edgeNext );

        return cy.collection( pathArr );
      }
    };

    return res;

  } // floydWarshall

}); // elesfn

module.exports = elesfn;

},{"../../is":86}],14:[function(require,module,exports){
'use strict';

var util = require( '../../util' );

var elesfn = {};

[
  require( './bfs-dfs' ),
  require( './dijkstra' ),
  require( './kruskal' ),
  require( './a-star' ),
  require( './floyd-warshall' ),
  require( './bellman-ford' ),
  require( './kerger-stein' ),
  require( './page-rank' ),
  require( './degree-centrality' ),
  require( './closeness-centrality' ),
  require( './betweenness-centrality' )
].forEach( function( props ){
  util.extend( elesfn, props );
} );

module.exports = elesfn;

},{"../../util":104,"./a-star":6,"./bellman-ford":7,"./betweenness-centrality":8,"./bfs-dfs":9,"./closeness-centrality":10,"./degree-centrality":11,"./dijkstra":12,"./floyd-warshall":13,"./kerger-stein":15,"./kruskal":16,"./page-rank":17}],15:[function(require,module,exports){
'use strict';

var util = require( '../../util' );

var elesfn = ({

  // Computes the minimum cut of an undirected graph
  // Returns the correct answer with high probability
  kargerStein: function( options ){
    var eles = this;

    options = options || {};

    // Function which colapses 2 (meta) nodes into one
    // Updates the remaining edge lists
    // Receives as a paramater the edge which causes the collapse
    var colapse = function( edgeIndex, nodeMap, remainingEdges ){
      var edgeInfo = remainingEdges[ edgeIndex ];
      var sourceIn = edgeInfo[1];
      var targetIn = edgeInfo[2];
      var partition1 = nodeMap[ sourceIn ];
      var partition2 = nodeMap[ targetIn ];

      // Delete all edges between partition1 and partition2
      var newEdges = remainingEdges.filter( function( edge ){
        if( nodeMap[ edge[1] ] === partition1 && nodeMap[ edge[2] ] === partition2 ){
          return false;
        }
        if( nodeMap[ edge[1] ] === partition2 && nodeMap[ edge[2] ] === partition1 ){
          return false;
        }
        return true;
      } );

      // All edges pointing to partition2 should now point to partition1
      for( var i = 0; i < newEdges.length; i++ ){
        var edge = newEdges[ i ];
        if( edge[1] === partition2 ){ // Check source
          newEdges[ i ] = edge.slice( 0 );
          newEdges[ i ][1] = partition1;
        } else if( edge[2] === partition2 ){ // Check target
          newEdges[ i ] = edge.slice( 0 );
          newEdges[ i ][2] = partition1;
        }
      }

      // Move all nodes from partition2 to partition1
      for( var i = 0; i < nodeMap.length; i++ ){
        if( nodeMap[ i ] === partition2 ){
          nodeMap[ i ] = partition1;
        }
      }

      return newEdges;
    };


    // Contracts a graph until we reach a certain number of meta nodes
    var contractUntil = function( metaNodeMap,
                   remainingEdges,
                   size,
                   sizeLimit ){
      // Stop condition
      if( size <= sizeLimit ){
        return remainingEdges;
      }

      // Choose an edge randomly
      var edgeIndex = Math.floor( (Math.random() * remainingEdges.length) );

      // Colapse graph based on edge
      var newEdges = colapse( edgeIndex, metaNodeMap, remainingEdges );

      return contractUntil( metaNodeMap,
                 newEdges,
                 size - 1,
                 sizeLimit );
    };

    var cy = this._private.cy;
    var edges = this.edges().stdFilter( function( e ){ return !e.isLoop(); } );
    var nodes = this.nodes();
    var numNodes = nodes.length;
    var numEdges = edges.length;
    var numIter = Math.ceil( Math.pow( Math.log( numNodes ) / Math.LN2, 2 ) );
    var stopSize = Math.floor( numNodes / Math.sqrt( 2 ) );

    if( numNodes < 2 ){
      util.error( 'At least 2 nodes are required for Karger-Stein algorithm' );
      return undefined;
    }

    // Create numerical identifiers for each node
    // mapping: node id -> position in nodes array
    // for reverse mapping, simply use nodes array
    var id2position = {};
    for( var i = 0; i < numNodes; i++ ){
      id2position[ nodes[ i ].id() ] = i;
    }

    // Now store edge destination as indexes
    // Format for each edge (edge index, source node index, target node index)
    var edgeIndexes = [];
    for( var i = 0; i < numEdges; i++ ){
      var e = edges[ i ];
      edgeIndexes.push( [ i, id2position[ e.source().id() ], id2position[ e.target().id() ] ] );
    }

    // We will store the best cut found here
    var minCutSize = Infinity;
    var minCut;

    // Initial meta node partition
    var originalMetaNode = [];
    for( var i = 0; i < numNodes; i++ ){
      originalMetaNode.push( i );
    }

    // Main loop
    for( var iter = 0; iter <= numIter; iter++ ){
      // Create new meta node partition
      var metaNodeMap = originalMetaNode.slice( 0 );

      // Contract until stop point (stopSize nodes)
      var edgesState = contractUntil( metaNodeMap, edgeIndexes, numNodes, stopSize );

      // Create a copy of the colapsed nodes state
      var metaNodeMap2 = metaNodeMap.slice( 0 );

      // Run 2 iterations starting in the stop state
      var res1 = contractUntil( metaNodeMap, edgesState, stopSize, 2 );
      var res2 = contractUntil( metaNodeMap2, edgesState, stopSize, 2 );

      // Is any of the 2 results the best cut so far?
      if( res1.length <= res2.length && res1.length < minCutSize ){
        minCutSize = res1.length;
        minCut = [ res1, metaNodeMap ];
      } else if( res2.length <= res1.length && res2.length < minCutSize ){
        minCutSize = res2.length;
        minCut = [ res2, metaNodeMap2 ];
      }
    } // end of main loop


    // Construct result
    var resEdges = (minCut[0]).map( function( e ){ return edges[ e[0] ]; } );
    var partition1 = [];
    var partition2 = [];

    // traverse metaNodeMap for best cut
    var witnessNodePartition = minCut[1][0];
    for( var i = 0; i < minCut[1].length; i++ ){
      var partitionId = minCut[1][ i ];
      if( partitionId === witnessNodePartition ){
        partition1.push( nodes[ i ] );
      } else {
        partition2.push( nodes[ i ] );
      }
    }

    var ret = {
      cut: eles.spawn( cy, resEdges ),
      partition1: eles.spawn( partition1 ),
      partition2: eles.spawn( partition2 )
    };

    return ret;
  }
}); // elesfn


module.exports = elesfn;

},{"../../util":104}],16:[function(require,module,exports){
'use strict';

var is = require( '../../is' );

// search, spanning trees, etc
var elesfn = ({

  // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
  // implemented from pseudocode from wikipedia
  kruskal: function( weightFn ){
    var cy = this.cy();

    weightFn = is.fn( weightFn ) ? weightFn : function(){ return 1; }; // if not specified, assume each edge has equal weight (1)

    function findSet( ele ){
      for( var i = 0; i < forest.length; i++ ){
        var eles = forest[ i ];

        if( eles.anySame( ele ) ){
          return {
            eles: eles,
            index: i
          };
        }
      }
    }

    var A = cy.collection( cy, [] );
    var forest = [];
    var nodes = this.nodes();

    for( var i = 0; i < nodes.length; i++ ){
      forest.push( nodes[ i ].collection() );
    }

    var edges = this.edges();
    var S = edges.toArray().sort( function( a, b ){
      var weightA = weightFn.call( a, a );
      var weightB = weightFn.call( b, b );

      return weightA - weightB;
    } );

    for( var i = 0; i < S.length; i++ ){
      var edge = S[ i ];
      var u = edge.source()[0];
      var v = edge.target()[0];
      var setU = findSet( u );
      var setV = findSet( v );

      if( setU.index !== setV.index ){
        A = A.add( edge );

        // combine forests for u and v
        forest[ setU.index ] = setU.eles.add( setV.eles );
        forest.splice( setV.index, 1 );
      }
    }

    return nodes.add( A );
  }
});

module.exports = elesfn;

},{"../../is":86}],17:[function(require,module,exports){
'use strict';

var is = require( '../../is' );

var elesfn = ({

  pageRank: function( options ){
    options = options || {};

    var normalizeVector = function( vector ){
      var length = vector.length;

      // First, get sum of all elements
      var total = 0;
      for( var i = 0; i < length; i++ ){
        total += vector[ i ];
      }

      // Now, divide each by the sum of all elements
      for( var i = 0; i < length; i++ ){
        vector[ i ] = vector[ i ] / total;
      }
    };

    // dampingFactor - optional
    if( options != null &&
      options.dampingFactor != null ){
      var dampingFactor = options.dampingFactor;
    } else {
      var dampingFactor = 0.8; // Default damping factor
    }

    // desired precision - optional
    if( options != null &&
      options.precision != null ){
      var epsilon = options.precision;
    } else {
      var epsilon = 0.000001; // Default precision
    }

    // Max number of iterations - optional
    if( options != null &&
      options.iterations != null ){
      var numIter = options.iterations;
    } else {
      var numIter = 200; // Default number of iterations
    }

    // Weight function - optional
    if( options != null &&
      options.weight != null &&
      is.fn( options.weight ) ){
      var weightFn = options.weight;
    } else {
      // If not specified, assume each edge has equal weight (1)
      var weightFn = function( e ){return 1;};
    }

    var cy = this._private.cy;
    var edges = this.edges().stdFilter( function( e ){ return !e.isLoop(); } );
    var nodes = this.nodes();
    var numNodes = nodes.length;
    var numEdges = edges.length;

    // Create numerical identifiers for each node
    // mapping: node id -> position in nodes array
    // for reverse mapping, simply use nodes array
    var id2position = {};
    for( var i = 0; i < numNodes; i++ ){
      id2position[ nodes[ i ].id() ] = i;
    }

    // Construct transposed adjacency matrix
    // First lets have a zeroed matrix of the right size
    // We'll also keep track of the sum of each column
    var matrix = [];
    var columnSum = [];
    var additionalProb = (1 - dampingFactor) / numNodes;

    // Create null matric
    for( var i = 0; i < numNodes; i++ ){
      var newRow = [];
      for( var j = 0; j < numNodes; j++ ){
        newRow.push( 0.0 );
      }
      matrix.push( newRow );
      columnSum.push( 0.0 );
    }

    // Now, process edges
    for( var i = 0; i < numEdges; i++ ){
      var edge = edges[ i ];
      var s = id2position[ edge.source().id() ];
      var t = id2position[ edge.target().id() ];
      var w = weightFn.apply( edge, [ edge ] );

      // Update matrix
      matrix[ t ][ s ] += w;

      // Update column sum
      columnSum[ s ] += w;
    }

    // Add additional probability based on damping factor
    // Also, take into account columns that have sum = 0
    var p = 1.0 / numNodes + additionalProb; // Shorthand
    // Traverse matrix, column by column
    for( var j = 0; j < numNodes; j++ ){
      if( columnSum[ j ] === 0 ){
        // No 'links' out from node jth, assume equal probability for each possible node
        for( var i = 0; i < numNodes; i++ ){
          matrix[ i ][ j ] = p;
        }
      } else {
        // Node jth has outgoing link, compute normalized probabilities
        for( var i = 0; i < numNodes; i++ ){
          matrix[ i ][ j ] = matrix[ i ][ j ] / columnSum[ j ] + additionalProb;
        }
      }
    }

    // Compute dominant eigenvector using power method
    var eigenvector = [];
    var nullVector = [];
    var previous;

    // Start with a vector of all 1's
    // Also, initialize a null vector which will be used as shorthand
    for( var i = 0; i < numNodes; i++ ){
      eigenvector.push( 1.0 );
      nullVector.push( 0.0 );
    }

    for( var iter = 0; iter < numIter; iter++ ){
      // New array with all 0's
      var temp = nullVector.slice( 0 );

      // Multiply matrix with previous result
      for( var i = 0; i < numNodes; i++ ){
        for( var j = 0; j < numNodes; j++ ){
          temp[ i ] += matrix[ i ][ j ] * eigenvector[ j ];
        }
      }

      normalizeVector( temp );
      previous = eigenvector;
      eigenvector = temp;

      var diff = 0;
      // Compute difference (squared module) of both vectors
      for( var i = 0; i < numNodes; i++ ){
        diff += Math.pow( previous[ i ] - eigenvector[ i ], 2 );
      }

      // If difference is less than the desired threshold, stop iterating
      if( diff < epsilon ){
        break;
      }
    }

    // Construct result
    var res = {
      rank: function( node ){
        if( is.string( node ) ){
          // is a selector string
          var nodeId = (cy.filter( node )[0]).id();
        } else {
          // is a node object
          var nodeId = node.id();
        }
        return eigenvector[ id2position[ nodeId ] ];
      }
    };


    return res;
  } // pageRank

}); // elesfn

module.exports = elesfn;

},{"../../is":86}],18:[function(require,module,exports){
'use strict';

var define = require( '../define' );

var elesfn = ({
  animate: define.animate(),
  animation: define.animation(),
  animated: define.animated(),
  clearQueue: define.clearQueue(),
  delay: define.delay(),
  delayAnimation: define.delayAnimation(),
  stop: define.stop()
});

module.exports = elesfn;

},{"../define":47}],19:[function(require,module,exports){
'use strict';

var util = require( '../util' );

var elesfn = ({
  classes: function( classes ){
    classes = classes.match( /\S+/g ) || [];
    var self = this;
    var changed = [];
    var classesMap = {};

    // fill in classes map
    for( var i = 0; i < classes.length; i++ ){
      var cls = classes[ i ];

      classesMap[ cls ] = true;
    }

    // check and update each ele
    for( var j = 0; j < self.length; j++ ){
      var ele = self[ j ];
      var _p = ele._private;
      var eleClasses = _p.classes;
      var changedEle = false;

      // check if ele has all of the passed classes
      for( var i = 0; i < classes.length; i++ ){
        var cls = classes[ i ];
        var eleHasClass = eleClasses[ cls ];

        if( !eleHasClass ){
          changedEle = true;
          break;
        }
      }

      // check if ele has classes outside of those passed
      if( !changedEle ){
        var classes = Object.keys( eleClasses );

        for( var i = 0; i < classes.length; i++ ){
          var eleCls = classes[i];
          var eleHasClass = eleClasses[ eleCls ];
          var specdClass = classesMap[ eleCls ]; // i.e. this class is passed to the function

          if( eleHasClass && !specdClass ){
            changedEle = true;
            break;
          }
        }
      }

      if( changedEle ){
        _p.classes = util.copy( classesMap );

        changed.push( ele );
      }
    }

    // trigger update style on those eles that had class changes
    if( changed.length > 0 ){
      this.spawn( changed )
        .updateStyle()
        .trigger( 'class' )
      ;
    }

    return self;
  },

  addClass: function( classes ){
    return this.toggleClass( classes, true );
  },

  hasClass: function( className ){
    var ele = this[0];
    return ( ele != null && ele._private.classes[ className ] ) ? true : false;
  },

  toggleClass: function( classesStr, toggle ){
    var classes = classesStr.match( /\S+/g ) || [];
    var self = this;
    var changed = []; // eles who had classes changed

    for( var i = 0, il = self.length; i < il; i++ ){
      var ele = self[ i ];
      var changedEle = false;

      for( var j = 0; j < classes.length; j++ ){
        var cls = classes[ j ];
        var eleClasses = ele._private.classes;
        var hasClass = eleClasses[ cls ];
        var shouldAdd = toggle || (toggle === undefined && !hasClass);

        if( shouldAdd ){
          eleClasses[ cls ] = true;

          if( !hasClass && !changedEle ){
            changed.push( ele );
            changedEle = true;
          }
        } else { // then remove
          eleClasses[ cls ] = false;

          if( hasClass && !changedEle ){
            changed.push( ele );
            changedEle = true;
          }
        }

      } // for j classes
    } // for i eles

    // trigger update style on those eles that had class changes
    if( changed.length > 0 ){
      this.spawn( changed )
        .updateStyle()
        .trigger( 'class' )
      ;
    }

    return self;
  },

  removeClass: function( classes ){
    return this.toggleClass( classes, false );
  },

  flashClass: function( classes, duration ){
    var self = this;

    if( duration == null ){
      duration = 250;
    } else if( duration === 0 ){
      return self; // nothing to do really
    }

    self.addClass( classes );
    setTimeout( function(){
      self.removeClass( classes );
    }, duration );

    return self;
  }
});

module.exports = elesfn;

},{"../util":104}],20:[function(require,module,exports){
'use strict';

var elesfn = ({
  allAre: function( selector ){
    return this.filter( selector ).length === this.length;
  },

  is: function( selector ){
    return this.filter( selector ).length > 0;
  },

  some: function( fn, thisArg ){
    for( var i = 0; i < this.length; i++ ){
      var ret = !thisArg ? fn( this[ i ], i, this ) : fn.apply( thisArg, [ this[ i ], i, this ] );

      if( ret ){
        return true;
      }
    }

    return false;
  },

  every: function( fn, thisArg ){
    for( var i = 0; i < this.length; i++ ){
      var ret = !thisArg ? fn( this[ i ], i, this ) : fn.apply( thisArg, [ this[ i ], i, this ] );

      if( !ret ){
        return false;
      }
    }

    return true;
  },

  same: function( collection ){
    collection = this.cy().collection( collection );

    // cheap extra check
    if( this.length !== collection.length ){
      return false;
    }

    return this.intersect( collection ).length === this.length;
  },

  anySame: function( collection ){
    collection = this.cy().collection( collection );

    return this.intersect( collection ).length > 0;
  },

  allAreNeighbors: function( collection ){
    collection = this.cy().collection( collection );

    return this.neighborhood().intersect( collection ).length === collection.length;
  },

  contains: function( collection ){
    collection = this.cy().collection( collection );

    return this.intersect( collection ).length === collection.length;
  }
});

elesfn.allAreNeighbours = elesfn.allAreNeighbors;
elesfn.has = elesfn.contains;

module.exports = elesfn;

},{}],21:[function(require,module,exports){
'use strict';

var elesfn = ({
  parent: function( selector ){
    var parents = [];
    var cy = this._private.cy;

    for( var i = 0; i < this.length; i++ ){
      var ele = this[ i ];
      var parent = cy.getElementById( ele._private.data.parent );

      if( parent.size() > 0 ){
        parents.push( parent );
      }
    }

    return this.spawn( parents, { unique: true } ).filter( selector );
  },

  parents: function( selector ){
    var parents = [];

    var eles = this.parent();
    while( eles.nonempty() ){
      for( var i = 0; i < eles.length; i++ ){
        var ele = eles[ i ];
        parents.push( ele );
      }

      eles = eles.parent();
    }

    return this.spawn( parents, { unique: true } ).filter( selector );
  },

  commonAncestors: function( selector ){
    var ancestors;

    for( var i = 0; i < this.length; i++ ){
      var ele = this[ i ];
      var parents = ele.parents();

      ancestors = ancestors || parents;

      ancestors = ancestors.intersect( parents ); // current list must be common with current ele parents set
    }

    return ancestors.filter( selector );
  },

  orphans: function( selector ){
    return this.stdFilter( function( ele ){
      return ele.isNode() && ele.parent().empty();
    } ).filter( selector );
  },

  nonorphans: function( selector ){
    return this.stdFilter( function( ele ){
      return ele.isNode() && ele.parent().nonempty();
    } ).filter( selector );
  },

  children: function( selector ){
    var children = [];

    for( var i = 0; i < this.length; i++ ){
      var ele = this[ i ];
      children = children.concat( ele._private.children );
    }

    return this.spawn( children, { unique: true } ).filter( selector );
  },

  siblings: function( selector ){
    return this.parent().children().not( this ).filter( selector );
  },

  isParent: function(){
    var ele = this[0];

    if( ele ){
      return ele._private.children.length !== 0;
    }
  },

  isChild: function(){
    var ele = this[0];

    if( ele ){
      return ele._private.data.parent !== undefined && ele.parent().length !== 0;
    }
  },

  descendants: function( selector ){
    var elements = [];

    function add( eles ){
      for( var i = 0; i < eles.length; i++ ){
        var ele = eles[ i ];

        elements.push( ele );

        if( ele.children().nonempty() ){
          add( ele.children() );
        }
      }
    }

    add( this.children() );

    return this.spawn( elements, { unique: true } ).filter( selector );
  }
});

// aliases
elesfn.ancestors = elesfn.parents;

module.exports = elesfn;

},{}],22:[function(require,module,exports){
'use strict';

var define = require( '../define' );
var fn, elesfn;

fn = elesfn = ({

  data: define.data( {
    field: 'data',
    bindingEvent: 'data',
    allowBinding: true,
    allowSetting: true,
    settingEvent: 'data',
    settingTriggersEvent: true,
    triggerFnName: 'trigger',
    allowGetting: true,
    immutableKeys: {
      'id': true,
      'source': true,
      'target': true,
      'parent': true
    },
    updateStyle: true
  } ),

  removeData: define.removeData( {
    field: 'data',
    event: 'data',
    triggerFnName: 'trigger',
    triggerEvent: true,
    immutableKeys: {
      'id': true,
      'source': true,
      'target': true,
      'parent': true
    },
    updateStyle: true
  } ),

  scratch: define.data( {
    field: 'scratch',
    bindingEvent: 'scratch',
    allowBinding: true,
    allowSetting: true,
    settingEvent: 'scratch',
    settingTriggersEvent: true,
    triggerFnName: 'trigger',
    allowGetting: true,
    updateStyle: true
  } ),

  removeScratch: define.removeData( {
    field: 'scratch',
    event: 'scratch',
    triggerFnName: 'trigger',
    triggerEvent: true,
    updateStyle: true
  } ),

  rscratch: define.data( {
    field: 'rscratch',
    allowBinding: false,
    allowSetting: true,
    settingTriggersEvent: false,
    allowGetting: true
  } ),

  removeRscratch: define.removeData( {
    field: 'rscratch',
    triggerEvent: false
  } ),

  id: function(){
    var ele = this[0];

    if( ele ){
      return ele._private.data.id;
    }
  }

});

// aliases
fn.attr = fn.data;
fn.removeAttr = fn.removeData;

module.exports = elesfn;

},{"../define":47}],23:[function(require,module,exports){
'use strict';

var util = require( '../util' );

var elesfn = {};

function defineDegreeFunction( callback ){
  return function( includeLoops ){
    var self = this;

    if( includeLoops === undefined ){
      includeLoops = true;
    }

    if( self.length === 0 ){ return; }

    if( self.isNode() && !self.removed() ){
      var degree = 0;
      var node = self[0];
      var connectedEdges = node._private.edges;

      for( var i = 0; i < connectedEdges.length; i++ ){
        var edge = connectedEdges[ i ];

        if( !includeLoops && edge.isLoop() ){
          continue;
        }

        degree += callback( node, edge );
      }

      return degree;
    } else {
      return;
    }
  };
}

util.extend( elesfn, {
  degree: defineDegreeFunction( function( node, edge ){
    if( edge.source().same( edge.target() ) ){
      return 2;
    } else {
      return 1;
    }
  } ),

  indegree: defineDegreeFunction( function( node, edge ){
    if( edge.target().same( node ) ){
      return 1;
    } else {
      return 0;
    }
  } ),

  outdegree: defineDegreeFunction( function( node, edge ){
    if( edge.source().same( node ) ){
      return 1;
    } else {
      return 0;
    }
  } )
} );

function defineDegreeBoundsFunction( degreeFn, callback ){
  return function( includeLoops ){
    var ret;
    var nodes = this.nodes();

    for( var i = 0; i < nodes.length; i++ ){
      var ele = nodes[ i ];
      var degree = ele[ degreeFn ]( includeLoops );
      if( degree !== undefined && (ret === undefined || callback( degree, ret )) ){
        ret = degree;
      }
    }

    return ret;
  };
}

util.extend( elesfn, {
  minDegree: defineDegreeBoundsFunction( 'degree', function( degree, min ){
    return degree < min;
  } ),

  maxDegree: defineDegreeBoundsFunction( 'degree', function( degree, max ){
    return degree > max;
  } ),

  minIndegree: defineDegreeBoundsFunction( 'indegree', function( degree, min ){
    return degree < min;
  } ),

  maxIndegree: defineDegreeBoundsFunction( 'indegree', function( degree, max ){
    return degree > max;
  } ),

  minOutdegree: defineDegreeBoundsFunction( 'outdegree', function( degree, min ){
    return degree < min;
  } ),

  maxOutdegree: defineDegreeBoundsFunction( 'outdegree', function( degree, max ){
    return degree > max;
  } )
} );

util.extend( elesfn, {
  totalDegree: function( includeLoops ){
    var total = 0;
    var nodes = this.nodes();

    for( var i = 0; i < nodes.length; i++ ){
      total += nodes[ i ].degree( includeLoops );
    }

    return total;
  }
} );

module.exports = elesfn;

},{"../util":104}],24:[function(require,module,exports){
'use strict';

var define = require( '../define' );
var is = require( '../is' );
var util = require( '../util' );
var math = require( '../math' );
var baseNodeShapes = require('../extensions/renderer/base/node-shapes').nodeShapes;
var sbgn = require( '../sbgn' );
var fn, elesfn;

fn = elesfn = ({

  position: define.data( {
    field: 'position',
    bindingEvent: 'position',
    allowBinding: true,
    allowSetting: true,
    settingEvent: 'position',
    settingTriggersEvent: true,
    triggerFnName: 'rtrigger',
    allowGetting: true,
    validKeys: [ 'x', 'y' ],
    onSet: function( eles ){
      var updatedEles = eles.updateCompoundBounds();
      updatedEles.rtrigger( 'position' );
    },
    canSet: function( ele ){
      return !ele.locked() && !ele.isParent();
    }
  } ),

  // position but no notification to renderer
  silentPosition: define.data( {
    field: 'position',
    bindingEvent: 'position',
    allowBinding: false,
    allowSetting: true,
    settingEvent: 'position',
    settingTriggersEvent: false,
    triggerFnName: 'trigger',
    allowGetting: true,
    validKeys: [ 'x', 'y' ],
    onSet: function( eles ){
      eles.updateCompoundBounds();
    },
    canSet: function( ele ){
      return !ele.locked() && !ele.isParent();
    }
  } ),

  positions: function( pos, silent ){
    if( is.plainObject( pos ) ){
      this.position( pos );

    } else if( is.fn( pos ) ){
      var fn = pos;

      for( var i = 0; i < this.length; i++ ){
        var ele = this[ i ];

        var pos = fn.apply( ele, [ i, ele ] );

        if( pos && !ele.locked() && !ele.isParent() ){
          var elePos = ele._private.position;
          elePos.x = pos.x;
          elePos.y = pos.y;
        }
      }

      var updatedEles = this.updateCompoundBounds();
      var toTrigger = updatedEles.length > 0 ? this.add( updatedEles ) : this;

      if( silent ){
        toTrigger.trigger( 'position' );
      } else {
        toTrigger.rtrigger( 'position' );
      }
    }

    return this; // chaining
  },

  silentPositions: function( pos ){
    return this.positions( pos, true );
  },

  // get/set the rendered (i.e. on screen) positon of the element
  renderedPosition: function( dim, val ){
    var ele = this[0];
    var cy = this.cy();
    var zoom = cy.zoom();
    var pan = cy.pan();
    var rpos = is.plainObject( dim ) ? dim : undefined;
    var setting = rpos !== undefined || ( val !== undefined && is.string( dim ) );

    if( ele && ele.isNode() ){ // must have an element and must be a node to return position
      if( setting ){
        for( var i = 0; i < this.length; i++ ){
          var ele = this[ i ];

          if( val !== undefined ){ // set one dimension
            ele._private.position[ dim ] = ( val - pan[ dim ] ) / zoom;
          } else if( rpos !== undefined ){ // set whole position
            ele._private.position = {
              x: ( rpos.x - pan.x ) / zoom,
              y: ( rpos.y - pan.y ) / zoom
            };
          }
        }

        this.rtrigger( 'position' );
      } else { // getting
        var pos = ele._private.position;
        rpos = {
          x: pos.x * zoom + pan.x,
          y: pos.y * zoom + pan.y
        };

        if( dim === undefined ){ // then return the whole rendered position
          return rpos;
        } else { // then return the specified dimension
          return rpos[ dim ];
        }
      }
    } else if( !setting ){
      return undefined; // for empty collection case
    }

    return this; // chaining
  },

  // get/set the position relative to the parent
  relativePosition: function( dim, val ){
    var ele = this[0];
    var cy = this.cy();
    var ppos = is.plainObject( dim ) ? dim : undefined;
    var setting = ppos !== undefined || ( val !== undefined && is.string( dim ) );
    var hasCompoundNodes = cy.hasCompoundNodes();

    if( ele && ele.isNode() ){ // must have an element and must be a node to return position
      if( setting ){
        for( var i = 0; i < this.length; i++ ){
          var ele = this[ i ];
          var parent = hasCompoundNodes ? ele.parent() : null;
          var hasParent = parent && parent.length > 0;
          var relativeToParent = hasParent;

          if( hasParent ){
            parent = parent[0];
          }

          var origin = relativeToParent ? parent._private.position : { x: 0, y: 0 };

          if( val !== undefined ){ // set one dimension
            ele._private.position[ dim ] = val + origin[ dim ];
          } else if( ppos !== undefined ){ // set whole position
            ele._private.position = {
              x: ppos.x + origin.x,
              y: ppos.y + origin.y
            };
          }
        }

        this.rtrigger( 'position' );

      } else { // getting
        var pos = ele._private.position;
        var parent = hasCompoundNodes ? ele.parent() : null;
        var hasParent = parent && parent.length > 0;
        var relativeToParent = hasParent;

        if( hasParent ){
          parent = parent[0];
        }

        var origin = relativeToParent ? parent._private.position : { x: 0, y: 0 };

        ppos = {
          x: pos.x - origin.x,
          y: pos.y - origin.y
        };

        if( dim === undefined ){ // then return the whole rendered position
          return ppos;
        } else { // then return the specified dimension
          return ppos[ dim ];
        }
      }
    } else if( !setting ){
      return undefined; // for empty collection case
    }

    return this; // chaining
  },

  renderedBoundingBox: function( options ){
    var bb = this.boundingBox( options );
    var cy = this.cy();
    var zoom = cy.zoom();
    var pan = cy.pan();

    var x1 = bb.x1 * zoom + pan.x;
    var x2 = bb.x2 * zoom + pan.x;
    var y1 = bb.y1 * zoom + pan.y;
    var y2 = bb.y2 * zoom + pan.y;

    return {
      x1: x1,
      x2: x2,
      y1: y1,
      y2: y2,
      w: x2 - x1,
      h: y2 - y1
    };
  },

  updateCompoundBounds: function(){
    var cy = this.cy();

    // save cycles for non compound graphs or when style disabled
    if( !cy.styleEnabled() || !cy.hasCompoundNodes() ){ return cy.collection(); }

    var updated = [];

    function update( parent ){
      if( !parent.isParent() ){ return; }

      var _p = parent._private;
      var children = parent.children();
      var includeLabels = parent.pstyle( 'compound-sizing-wrt-labels' ).value === 'include';
      var bb = children.boundingBox( {
        includeLabels: includeLabels,
        includeShadows: false,
        includeOverlays: false,

        // updating the compound bounds happens outside of the regular
        // cache cycle (i.e. before fired events)
        useCache: false
      } );
      var padding = {
        top: parent.pstyle( 'padding-top' ).pfValue,
        bottom: parent.pstyle( 'padding-bottom' ).pfValue,
        left: parent.pstyle( 'padding-left' ).pfValue,
        right: parent.pstyle( 'padding-right' ).pfValue
      };
      var pos = _p.position;

      _p.autoWidth = bb.w;
      pos.x = (bb.x1 + bb.x2 - padding.left + padding.right) / 2;

      _p.autoHeight = bb.h;
      pos.y = (bb.y1 + bb.y2 - padding.top + padding.bottom) / 2;

      updated.push( parent );
    }

    // go up, level by level
    var eles = this;
    while( eles.nonempty() ){

      // update each parent node in this level
      for( var i = 0; i < eles.length; i++ ){
        var ele = eles[ i ];

        update( ele );
      }

      // next level
      eles = eles.parent();
    }

    // return changed
    return this.spawn( updated );
  }
});

var noninf = function( x ){
  if( x === Infinity || x === -Infinity ){
    return 0;
  }

  return x;
};

var updateBounds = function( b, x1, y1, x2, y2 ){
  // don't update with zero area boxes
  if( x2 - x1 === 0 || y2 - y1 === 0 ){ return; }

  b.x1 = x1 < b.x1 ? x1 : b.x1;
  b.x2 = x2 > b.x2 ? x2 : b.x2;
  b.y1 = y1 < b.y1 ? y1 : b.y1;
  b.y2 = y2 > b.y2 ? y2 : b.y2;
};

var updateBoundsFromBox = function( b, b2 ){
  return updateBounds( b, b2.x1, b2.y1, b2.x2, b2.y2 );
};

var prefixedProperty = function( obj, field, prefix ){
  return util.getPrefixedProperty( obj, field, prefix );
};

var updateBoundsFromArrow = function( bounds, ele, prefix, options ){
  var _p = ele._private;
  var rstyle = _p.rstyle;
  var halfArW = rstyle.arrowWidth / 2;
  var arrowType = ele.pstyle( prefix + '-arrow-shape' ).value;
  var x;
  var y;

  if( arrowType !== 'none' ){
    if( prefix === 'source' ){
      x = rstyle.srcX;
      y = rstyle.srcY;
    } else if( prefix === 'target' ){
      x = rstyle.tgtX;
      y = rstyle.tgtY;
    } else {
      x = rstyle.midX;
      y = rstyle.midY;
    }

    updateBounds( bounds, x - halfArW, y - halfArW, x + halfArW, y + halfArW );
  }
};

var updateBoundsFromLabel = function( bounds, ele, prefix, options ){
  var prefixDash;

  if( prefix ){
    prefixDash = prefix + '-';
  } else {
    prefixDash = '';
  }

  var _p = ele._private;
  var rstyle = _p.rstyle;
  var label = ele.pstyle( prefixDash + 'label' ).strValue;

  if( label ){
    var halign = ele.pstyle( 'text-halign' );
    var valign = ele.pstyle( 'text-valign' );
    var labelWidth = prefixedProperty( rstyle, 'labelWidth', prefix );
    var labelHeight = prefixedProperty( rstyle, 'labelHeight', prefix );
    var labelX = prefixedProperty( rstyle, 'labelX', prefix );
    var labelY = prefixedProperty( rstyle, 'labelY', prefix );
    var marginX = ele.pstyle( prefixDash + 'text-margin-x' ).pfValue;
    var marginY = ele.pstyle( prefixDash + 'text-margin-y' ).pfValue;
    var isEdge = ele.isEdge();
    var rotation = ele.pstyle( prefixDash + 'text-rotation' );
    var shadowR = ele.pstyle( 'text-shadow-blur' ).pfValue / 2;
    var shadowX = ele.pstyle( 'text-shadow-offset-x' ).pfValue;
    var shadowY = ele.pstyle( 'text-shadow-offset-y' ).pfValue;
    var shadowOpacity = ele.pstyle( 'text-shadow-opacity' ).value;
    var outlineWidth = ele.pstyle( 'text-outline-width' ).pfValue;
    var borderWidth = ele.pstyle( 'text-border-width' ).pfValue;
    var halfBorderWidth = borderWidth / 2;
    var padding = ele.pstyle( 'text-background-padding' ).pfValue;

    var lh = labelHeight + 2 * padding;
    var lw = labelWidth + 2 * padding;
    var lw_2 = lw / 2;
    var lh_2 = lh / 2;
    var lx1, lx2, ly1, ly2;

    if( isEdge ){
      lx1 = labelX - lw_2;
      lx2 = labelX + lw_2;
      ly1 = labelY - lh_2;
      ly2 = labelY + lh_2;
    } else {
      switch( halign.value ){
        case 'left':
          lx1 = labelX - lw;
          lx2 = labelX;
          break;

        case 'center':
          lx1 = labelX - lw_2;
          lx2 = labelX + lw_2;
          break;

        case 'right':
          lx1 = labelX;
          lx2 = labelX + lw;
          break;
      }

      switch( valign.value ){
        case 'top':
          ly1 = labelY - lh;
          ly2 = labelY;
          break;

        case 'center':
          ly1 = labelY - lh_2;
          ly2 = labelY + lh_2;
          break;

        case 'bottom':
          ly1 = labelY;
          ly2 = labelY + lh;
          break;
      }
    }

    var isAutorotate = ( isEdge && rotation.strValue === 'autorotate' );
    var isPfValue = ( rotation.pfValue != null && rotation.pfValue !== 0 );

    if( isAutorotate || isPfValue ){
      var theta = isAutorotate ? prefixedProperty( _p.rstyle, 'labelAngle', prefix ) : rotation.pfValue;
      var cos = Math.cos( theta );
      var sin = Math.sin( theta );

      var rotate = function( x, y ){
        x = x - labelX;
        y = y - labelY;

        return {
          x: x * cos - y * sin + labelX,
          y: x * sin + y * cos + labelY
        };
      };

      var px1y1 = rotate( lx1, ly1 );
      var px1y2 = rotate( lx1, ly2 );
      var px2y1 = rotate( lx2, ly1 );
      var px2y2 = rotate( lx2, ly2 );

      lx1 = Math.min( px1y1.x, px1y2.x, px2y1.x, px2y2.x );
      lx2 = Math.max( px1y1.x, px1y2.x, px2y1.x, px2y2.x );
      ly1 = Math.min( px1y1.y, px1y2.y, px2y1.y, px2y2.y );
      ly2 = Math.max( px1y1.y, px1y2.y, px2y1.y, px2y2.y );
    }

    lx1 += marginX - Math.max( outlineWidth, halfBorderWidth );
    lx2 += marginX + Math.max( outlineWidth, halfBorderWidth );
    ly1 += marginY - Math.max( outlineWidth, halfBorderWidth );
    ly2 += marginY + Math.max( outlineWidth, halfBorderWidth );

    updateBounds( bounds, lx1, ly1, lx2, ly2 );

    if( options.includeShadows && shadowOpacity > 0 ){
      lx1 += - shadowR + shadowX;
      lx2 += + shadowR + shadowX;
      ly1 += - shadowR + shadowY;
      ly2 += + shadowR + shadowY;

      updateBounds( bounds, lx1, ly1, lx2, ly2 );
    }
  }

  return bounds;
};

// get the bounding box of the elements (in raw model position)
var boundingBoxImpl = function( ele, options ){
  var cy = ele._private.cy;
  var cy_p = cy._private;
  var styleEnabled = cy_p.styleEnabled;

  var bounds = {
    x1: Infinity,
    y1: Infinity,
    x2: -Infinity,
    y2: -Infinity
  };

  var _p = ele._private;
  var display = styleEnabled ? ele.pstyle( 'display' ).value : 'element';
  var isNode = ele.isNode();
  var isEdge = ele.isEdge();
  var ex1, ex2, ey1, ey2, x, y;
  var displayed = display !== 'none';

  if( displayed ){
    var overlayOpacity = 0;
    var overlayPadding = 0;

    if( styleEnabled && options.includeOverlays ){
      overlayOpacity = ele.pstyle( 'overlay-opacity' ).value;

      if( overlayOpacity !== 0 ){
        overlayPadding = ele.pstyle( 'overlay-padding' ).value;
      }
    }

    var w = 0;
    var wHalf = 0;

    if( styleEnabled ){
      w = ele.pstyle( 'width' ).pfValue;
      wHalf = w / 2;
    }

    if( isNode && options.includeNodes ){
      var pos = _p.position;
      x = pos.x;
      y = pos.y;
      var w = ele.outerWidth();
      var halfW = w / 2;
      var h = ele.outerHeight();
      var halfH = h / 2;

      // handle node dimensions
      /////////////////////////
      
      var stateAndInfos = ele._private.data.statesandinfos;
      var ports = ele._private.data.ports;
      var minY, maxY, minX, maxX;
      
      for (var i = 0; stateAndInfos && i < stateAndInfos.length; i++) {
        var state = stateAndInfos[i];
        var stateWidth = state.bbox.w;
        var stateHeight = state.bbox.h;
        
        var stateMinY = state.bbox.y * ele.height() / 100 + y - stateHeight / 2;
        var stateMaxY = state.bbox.y * ele.height() / 100 + y + stateHeight / 2;
        
        var stateMinX = state.bbox.x * ele.width() / 100 + x - stateWidth / 2;
        var stateMaxX = state.bbox.x * ele.width() / 100 + x + stateWidth / 2;
        
        if(!minY || stateMinY < minY) {
          minY = stateMinY;
        }
        
        if(!maxY || stateMaxY > maxY) {
          maxY = stateMaxY;
        }
        
        if(!minX || stateMinX < minX) {
          minX = stateMinX;
        }
        
        if(!maxX || stateMaxX > maxX) {
          maxX = stateMaxX;
        }
      }
      
      for( var i = 0; ports && i < ports.length; i++ ) {
        var port = ports[i];
        var portX = x + port.x * ele.width() / 100;
        var portY = y + port.y * ele.height() / 100;
        
        if(!minY || portY < minY) {
          minY = portY;
        }
        
        if(!maxY || portY > maxY) {
          maxY = portY;
        }
        
        if(!minX || portX < minX) {
          minX = portX;
        }
        
        if(!maxX || portX > maxX) {
          maxX = portX;
        }
      }

      ex1 = x - halfW - overlayPadding;
      ex2 = x + halfW + overlayPadding;
      ey1 = y - halfH - overlayPadding;
      ey2 = y + halfH + overlayPadding;

      if(sbgn.isMultimer(ele)) {
        var shape = ele.css('shape');
        var multimerPadding =  baseNodeShapes[shape].multimerPadding;
        ex2 += multimerPadding;
        ey2 += multimerPadding;
      }
      
      if(minY < ey1){
        ey1 = minY;
      }
      
      if(maxY > ey2){
        ey2 = maxY;
      }
      
      if(minX < ex1){
        ex1 = minX;
      }
      
      if(maxX > ex2){
        ex2 = maxX;
      }

      updateBounds( bounds, ex1, ey1, ex2, ey2 );

    } else if( isEdge && options.includeEdges ){
      var rstyle = _p.rstyle || {};

      // handle edge dimensions (rough box estimate)
      //////////////////////////////////////////////
      if( styleEnabled ){
        ex1 = Math.min( rstyle.srcX, rstyle.midX, rstyle.tgtX );
        ex2 = Math.max( rstyle.srcX, rstyle.midX, rstyle.tgtX );
        ey1 = Math.min( rstyle.srcY, rstyle.midY, rstyle.tgtY );
        ey2 = Math.max( rstyle.srcY, rstyle.midY, rstyle.tgtY );

        // take into account edge width
        ex1 -= wHalf;
        ex2 += wHalf;
        ey1 -= wHalf;
        ey2 += wHalf;

        updateBounds( bounds, ex1, ey1, ex2, ey2 );
      }

      // precise haystacks
      ////////////////////
      if( styleEnabled && ele.pstyle( 'curve-style' ).strValue === 'haystack' ){
        var hpts = rstyle.haystackPts;

        ex1 = hpts[0].x;
        ey1 = hpts[0].y;
        ex2 = hpts[1].x;
        ey2 = hpts[1].y;

        if( ex1 > ex2 ){
          var temp = ex1;
          ex1 = ex2;
          ex2 = temp;
        }

        if( ey1 > ey2 ){
          var temp = ey1;
          ey1 = ey2;
          ey2 = temp;
        }

        updateBounds( bounds, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf );

      // handle points along edge
      ///////////////////////////
      } else {
        var pts = rstyle.bezierPts || rstyle.linePts || [];

        for( var j = 0; j < pts.length; j++ ){
          var pt = pts[ j ];

          ex1 = pt.x - wHalf;
          ex2 = pt.x + wHalf;
          ey1 = pt.y - wHalf;
          ey2 = pt.y + wHalf;

          updateBounds( bounds, ex1, ey1, ex2, ey2 );
        }

        // fallback on source and target positions
        //////////////////////////////////////////
        if( pts.length === 0 ){
          var n1 = _p.source;
          var n1_p = n1._private;
          var n1pos = n1_p.position;

          var n2 = _p.target;
          var n2_p = n2._private;
          var n2pos = n2_p.position;

          ex1 = n1pos.x;
          ex2 = n2pos.x;
          ey1 = n1pos.y;
          ey2 = n2pos.y;

          if( ex1 > ex2 ){
            var temp = ex1;
            ex1 = ex2;
            ex2 = temp;
          }

          if( ey1 > ey2 ){
            var temp = ey1;
            ey1 = ey2;
            ey2 = temp;
          }

          // take into account edge width
          ex1 -= wHalf;
          ex2 += wHalf;
          ey1 -= wHalf;
          ey2 += wHalf;

          updateBounds( bounds, ex1, ey1, ex2, ey2 );
        }
      }

    } // edges

    // shadow and overlay
    /////////////////////

    if( styleEnabled ){

      ex1 = bounds.x1;
      ex2 = bounds.x2;
      ey1 = bounds.y1;
      ey2 = bounds.y2;

      if( options.includeShadows && ele.pstyle('shadow-opacity').value > 0 ){
        var r = ele.pstyle('shadow-blur').pfValue / 2;
        var ox = ele.pstyle('shadow-offset-x').pfValue;
        var oy = ele.pstyle('shadow-offset-y').pfValue;

        updateBounds( bounds, ex1 - r + ox, ey1 - r + oy, ex2 + r + ox, ey2 + r + oy );
      }

      updateBounds( bounds, ex1 - overlayPadding, ey1 - overlayPadding, ex2 + overlayPadding, ey2 + overlayPadding );
    }

    // handle edge arrow size
    /////////////////////////

    if( styleEnabled && options.includeEdges && isEdge ){
      updateBoundsFromArrow( bounds, ele, 'mid-source', options );
      updateBoundsFromArrow( bounds, ele, 'mid-target', options );
      updateBoundsFromArrow( bounds, ele, 'source', options );
      updateBoundsFromArrow( bounds, ele, 'target', options );
    }

    // handle label dimensions
    //////////////////////////

    if( styleEnabled && options.includeLabels ){
      updateBoundsFromLabel( bounds, ele, null, options );

      if( isEdge ){
        updateBoundsFromLabel( bounds, ele, 'source', options );
        updateBoundsFromLabel( bounds, ele, 'target', options );
      }
    } // style enabled for labels
  } // if displayed

  bounds.x1 = noninf( bounds.x1 );
  bounds.y1 = noninf( bounds.y1 );
  bounds.x2 = noninf( bounds.x2 );
  bounds.y2 = noninf( bounds.y2 );
  bounds.w = noninf( bounds.x2 - bounds.x1 );
  bounds.h = noninf( bounds.y2 - bounds.y1 );

  // expand bounds by 1 because antialiasing can increase the visual/effective size by 1 on all sides
  if( bounds.w > 0 && bounds.h > 0 && displayed ){
    math.expandBoundingBox( bounds, 1 );
  }

  return bounds;
};

var tf = function( val ){
  if( val ){
    return 't';
  } else {
    return 'f';
  }
};

var getKey = function( opts ){
  var key = '';

  key += tf( opts.incudeNodes );
  key += tf( opts.includeEdges );
  key += tf( opts.includeLabels );
  key += tf( opts.includeShadows );
  key += tf( opts.includeOverlays );

  return key;
};

var cachedBoundingBoxImpl = function( ele, opts ){
  var _p = ele._private;
  var bb;
  var headless = ele.cy().headless();
  var key = opts === defBbOpts ? defBbOptsKey : getKey( opts );

  if( !opts.useCache || headless || !_p.bbCache || !_p.bbCache[key] ){
    bb = boundingBoxImpl( ele, opts );

    if( !headless ){
      _p.bbCache = _p.bbCache || {};
      _p.bbCache[key] = bb;
    }
  } else {
    bb = _p.bbCache[key];
  }

  return bb;
};

var defBbOpts = {
  includeNodes: true,
  includeEdges: true,
  includeLabels: true,
  includeShadows: true,
  includeOverlays: true,
  useCache: true
};

var defBbOptsKey = getKey( defBbOpts );

elesfn.recalculateRenderedStyle = function( useCache ){
  var cy = this.cy();
  var renderer = cy.renderer();
  var styleEnabled = cy.styleEnabled();

  if( renderer && styleEnabled ){
    renderer.recalculateRenderedStyle( this, useCache );
  }

  return this;
};

elesfn.boundingBox = function( options ){
  // the main usecase is ele.boundingBox() for a single element with no/def options
  // specified s.t. the cache is used, so check for this case to make it faster by
  // avoiding the overhead of the rest of the function
  if( this.length === 1 && this[0]._private.bbCache && (options === undefined || options.useCache === undefined || options.useCache === true) ){
    if( options === undefined ){
      options = defBbOpts;
    }

    return cachedBoundingBoxImpl( this[0], options );
  }

  var bounds = {
    x1: Infinity,
    y1: Infinity,
    x2: -Infinity,
    y2: -Infinity
  };

  options = options || util.staticEmptyObject();

  var opts = {
    includeNodes: util.default( options.includeNodes, defBbOpts.includeNodes ),
    includeEdges: util.default( options.includeEdges, defBbOpts.includeEdges ),
    includeLabels: util.default( options.includeLabels, defBbOpts.includeLabels ),
    includeShadows: util.default( options.includeShadows, defBbOpts.includeShadows ),
    includeOverlays: util.default( options.includeOverlays, defBbOpts.includeOverlays ),
    useCache: util.default( options.useCache, defBbOpts.useCache )
  };

  var eles = this;
  var cy = eles.cy();
  var styleEnabled = cy.styleEnabled();

  if( styleEnabled ){
    this.recalculateRenderedStyle( opts.useCache );
  }

  for( var i = 0; i < eles.length; i++ ){
    var ele = eles[i];

    if( styleEnabled && ele.isEdge() && ele.pstyle('curve-style').strValue === 'bezier' ){
      ele.parallelEdges().recalculateRenderedStyle( opts.useCache ); // n.b. ele.parallelEdges() single is cached
    }

    updateBoundsFromBox( bounds, cachedBoundingBoxImpl( ele, opts ) );
  }

  bounds.x1 = noninf( bounds.x1 );
  bounds.y1 = noninf( bounds.y1 );
  bounds.x2 = noninf( bounds.x2 );
  bounds.y2 = noninf( bounds.y2 );
  bounds.w = noninf( bounds.x2 - bounds.x1 );
  bounds.h = noninf( bounds.y2 - bounds.y1 );

  return bounds;
};

var defineDimFns = function( opts ){
  opts.uppercaseName = util.capitalize( opts.name );
  opts.autoName = 'auto' + opts.uppercaseName;
  opts.labelName = 'label' + opts.uppercaseName;
  opts.outerName = 'outer' + opts.uppercaseName;
  opts.uppercaseOuterName = util.capitalize( opts.outerName );

  fn[ opts.name ] = function dimImpl(){
    var ele = this[0];
    var _p = ele._private;
    var cy = _p.cy;
    var styleEnabled = cy._private.styleEnabled;

    if( ele ){
      if( styleEnabled ){
        if( ele.isParent() ){
          return _p[ opts.autoName ] || 0;
        }

        var d = ele.pstyle( opts.name );

        switch( d.strValue ){
          case 'label':
            return _p.rstyle[ opts.labelName ] || 0;
          default:
            return d.pfValue;
        }
      } else {
        return 1;
      }
    }
  };

  fn[ 'outer' + opts.uppercaseName ] = function outerDimImpl(){
    var ele = this[0];
    var _p = ele._private;
    var cy = _p.cy;
    var styleEnabled = cy._private.styleEnabled;

    if( ele ){
      if( styleEnabled ){
        var dim = ele[ opts.name ]();
        var border = ele.pstyle( 'border-width' ).pfValue;
        var padding = ele.pstyle( opts.paddings[0] ).pfValue + ele.pstyle( opts.paddings[1] ).pfValue;

        return dim + border + padding;
      } else {
        return 1;
      }
    }
  };

  fn[ 'rendered' + opts.uppercaseName ] = function renderedDimImpl(){
    var ele = this[0];

    if( ele ){
      var d = ele[ opts.name ]();
      return d * this.cy().zoom();
    }
  };

  fn[ 'rendered' + opts.uppercaseOuterName ] = function renderedOuterDimImpl(){
    var ele = this[0];

    if( ele ){
      var od = ele[ opts.outerName ]();
      return od * this.cy().zoom();
    }
  };
};

defineDimFns( {
  name: 'width',
  paddings: [ 'padding-left', 'padding-right' ]
} );

defineDimFns( {
  name: 'height',
  paddings: [ 'padding-top', 'padding-bottom' ]
} );

// aliases
fn.modelPosition = fn.point = fn.position;
fn.modelPositions = fn.points = fn.positions;
fn.renderedPoint = fn.renderedPosition;
fn.relativePoint = fn.relativePosition;
fn.boundingbox = fn.boundingBox;
fn.renderedBoundingbox = fn.renderedBoundingBox;

module.exports = elesfn;

},{"../define":47,"../extensions/renderer/base/node-shapes":65,"../is":86,"../math":88,"../sbgn":90,"../util":104}],25:[function(require,module,exports){
'use strict';

var util = require( '../util' );
var is = require( '../is' );

// represents a node or an edge
var Element = function( cy, params, restore ){
  var self = this;
  restore = (restore === undefined || restore ? true : false);

  if( cy === undefined || params === undefined || !is.core( cy ) ){
    util.error( 'An element must have a core reference and parameters set' );
    return;
  }

  var group = params.group;

  // try to automatically infer the group if unspecified
  if( group == null ){
    if( params.data && params.data.source != null && params.data.target != null ){
      group = 'edges';
    } else {
      group = 'nodes';
    }
  }

  // validate group
  if( group !== 'nodes' && group !== 'edges' ){
    util.error( 'An element must be of type `nodes` or `edges`; you specified `' + group + '`' );
    return;
  }

  // make the element array-like, just like a collection
  this.length = 1;
  this[0] = this;

  // NOTE: when something is added here, add also to ele.json()
  this._private = {
    cy: cy,
    single: true, // indicates this is an element
    data: params.data || {}, // data object
    position: params.position || {}, // (x, y) position pair
    autoWidth: undefined, // width and height of nodes calculated by the renderer when set to special 'auto' value
    autoHeight: undefined,
    listeners: [], // array of bound listeners
    group: group, // string; 'nodes' or 'edges'
    style: {}, // properties as set by the style
    rstyle: {}, // properties for style sent from the renderer to the core
    styleCxts: [], // applied style contexts from the styler
    removed: true, // whether it's inside the vis; true if removed (set true here since we call restore)
    selected: params.selected ? true : false, // whether it's selected
    selectable: params.selectable === undefined ? true : ( params.selectable ? true : false ), // whether it's selectable
    locked: params.locked ? true : false, // whether the element is locked (cannot be moved)
    grabbed: false, // whether the element is grabbed by the mouse; renderer sets this privately
    grabbable: params.grabbable === undefined ? true : ( params.grabbable ? true : false ), // whether the element can be grabbed
    active: false, // whether the element is active from user interaction
    classes: {}, // map ( className => true )
    animation: { // object for currently-running animations
      current: [],
      queue: []
    },
    rscratch: {}, // object in which the renderer can store information
    scratch: params.scratch || {}, // scratch objects
    edges: [], // array of connected edges
    children: [], // array of children
    traversalCache: {} // cache of output of traversal functions
  };

  // renderedPosition overrides if specified
  if( params.renderedPosition ){
    var rpos = params.renderedPosition;
    var pan = cy.pan();
    var zoom = cy.zoom();

    this._private.position = {
      x: (rpos.x - pan.x) / zoom,
      y: (rpos.y - pan.y) / zoom
    };
  }

  if( is.string( params.classes ) ){
    var classes = params.classes.split( /\s+/ );
    for( var i = 0, l = classes.length; i < l; i++ ){
      var cls = classes[ i ];
      if( !cls || cls === '' ){ continue; }

      self._private.classes[ cls ] = true;
    }
  }

  if( params.style || params.css ){
    cy.style().applyBypass( this, params.style || params.css );
  }

  if( restore === undefined || restore ){
    this.restore();
  }

};

module.exports = Element;

},{"../is":86,"../util":104}],26:[function(require,module,exports){
'use strict';

var define = require( '../define' );

var elesfn = ({
  on: define.on(), // .on( events [, selector] [, data], handler)
  one: define.on( { unbindSelfOnTrigger: true } ),
  once: define.on( { unbindAllBindersOnTrigger: true } ),
  off: define.off(), // .off( events [, selector] [, handler] )
  trigger: define.trigger(), // .trigger( events [, extraParams] )

  rtrigger: function( event, extraParams ){ // for internal use only
    if( this.length === 0 ){ return; } // empty collections don't need to notify anything

    // notify renderer
    this.cy().notify( {
      type: event,
      eles: this
    } );

    this.trigger( event, extraParams );
    return this;
  }
});

// aliases:
define.eventAliasesOn( elesfn );

module.exports = elesfn;

},{"../define":47}],27:[function(require,module,exports){
'use strict';

var is = require( '../is' );
var Selector = require( '../selector' );

var elesfn = ({
  nodes: function( selector ){
    return this.filter( function( i, element ){
      return element.isNode();
    } ).filter( selector );
  },

  edges: function( selector ){
    return this.filter( function( i, element ){
      return element.isEdge();
    } ).filter( selector );
  },

  filter: function( filter ){
    if( filter === undefined ){ // check this first b/c it's the most common/performant case
      return this;
    } else if( is.string( filter ) || is.elementOrCollection( filter ) ){
      return Selector( filter ).filter( this );
    } else if( is.fn( filter ) ){
      var elements = [];

      for( var i = 0; i < this.length; i++ ){
        var ele = this[ i ];

        if( filter.apply( ele, [ i, ele ] ) ){
          elements.push( ele );
        }
      }

      return this.spawn( elements );
    }

    return this.spawn(); // if not handled by above, give 'em an empty collection
  },

  not: function( toRemove ){
    if( !toRemove ){
      return this;
    } else {

      if( is.string( toRemove ) ){
        toRemove = this.filter( toRemove );
      }

      var elements = [];

      for( var i = 0; i < this.length; i++ ){
        var element = this[ i ];

        var remove = toRemove._private.ids[ element.id() ];
        if( !remove ){
          elements.push( element );
        }
      }

      return this.spawn( elements );
    }

  },

  absoluteComplement: function(){
    var cy = this._private.cy;

    return cy.mutableElements().not( this );
  },

  intersect: function( other ){
    // if a selector is specified, then filter by it instead
    if( is.string( other ) ){
      var selector = other;
      return this.filter( selector );
    }

    var elements = [];
    var col1 = this;
    var col2 = other;
    var col1Smaller = this.length < other.length;
    // var ids1 = col1Smaller ? col1._private.ids : col2._private.ids;
    var ids2 = col1Smaller ? col2._private.ids : col1._private.ids;
    var col = col1Smaller ? col1 : col2;

    for( var i = 0; i < col.length; i++ ){
      var id = col[ i ]._private.data.id;
      var ele = ids2[ id ];

      if( ele ){
        elements.push( ele );
      }
    }

    return this.spawn( elements );
  },

  xor: function( other ){
    var cy = this._private.cy;

    if( is.string( other ) ){
      other = cy.$( other );
    }

    var elements = [];
    var col1 = this;
    var col2 = other;

    var add = function( col, other ){

      for( var i = 0; i < col.length; i++ ){
        var ele = col[ i ];
        var id = ele._private.data.id;
        var inOther = other._private.ids[ id ];

        if( !inOther ){
          elements.push( ele );
        }
      }

    };

    add( col1, col2 );
    add( col2, col1 );

    return this.spawn( elements );
  },

  diff: function( other ){
    var cy = this._private.cy;

    if( is.string( other ) ){
      other = cy.$( other );
    }

    var left = [];
    var right = [];
    var both = [];
    var col1 = this;
    var col2 = other;

    var add = function( col, other, retEles ){

      for( var i = 0; i < col.length; i++ ){
        var ele = col[ i ];
        var id = ele._private.data.id;
        var inOther = other._private.ids[ id ];

        if( inOther ){
          both.push( ele );
        } else {
          retEles.push( ele );
        }
      }

    };

    add( col1, col2, left );
    add( col2, col1, right );

    return {
      left: this.spawn( left, { unique: true } ),
      right: this.spawn( right, { unique: true } ),
      both: this.spawn( both, { unique: true } )
    };
  },

  add: function( toAdd ){
    var cy = this._private.cy;

    if( !toAdd ){
      return this;
    }

    if( is.string( toAdd ) ){
      var selector = toAdd;
      toAdd = cy.mutableElements().filter( selector );
    }

    var elements = [];

    for( var i = 0; i < this.length; i++ ){
      elements.push( this[ i ] );
    }

    for( var i = 0; i < toAdd.length; i++ ){

      var add = !this._private.ids[ toAdd[ i ].id() ];
      if( add ){
        elements.push( toAdd[ i ] );
      }
    }

    return this.spawn( elements );
  },

  // in place merge on calling collection
  merge: function( toAdd ){
    var _p = this._private;
    var cy = _p.cy;

    if( !toAdd ){
      return this;
    }

    if( toAdd && is.string( toAdd ) ){
      var selector = toAdd;
      toAdd = cy.mutableElements().filter( selector );
    }

    for( var i = 0; i < toAdd.length; i++ ){
      var toAddEle = toAdd[ i ];
      var id = toAddEle._private.data.id;
      var add = !_p.ids[ id ];

      if( add ){
        var index = this.length++;

        this[ index ] = toAddEle;
        _p.ids[ id ] = toAddEle;
        _p.indexes[ id ] = index;
      } else { // replace
        var index = _p.indexes[ id ];

        this[ index ] = toAddEle;
        _p.ids[ id ] = toAddEle;
      }
    }

    return this; // chaining
  },

  // remove single ele in place in calling collection
  unmergeOne: function( ele ){
    ele = ele[0];

    var _p = this._private;
    var id = ele._private.data.id;
    var i = _p.indexes[ id ];

    if( i == null ){
      return this; // no need to remove
    }

    // remove ele
    this[ i ] = undefined;
    _p.ids[ id ] = undefined;
    _p.indexes[ id ] = undefined;

    var unmergedLastEle = i === this.length - 1;

    // replace empty spot with last ele in collection
    if( this.length > 1 && !unmergedLastEle ){
      var lastEleI = this.length - 1;
      var lastEle = this[ lastEleI ];
      var lastEleId = lastEle._private.data.id;

      this[ lastEleI ] = undefined;
      this[ i ] = lastEle;
      _p.indexes[ lastEleId ] = i;
    }

    // the collection is now 1 ele smaller
    this.length--;

    return this;
  },

  // remove eles in place on calling collection
  unmerge: function( toRemove ){
    var cy = this._private.cy;

    if( !toRemove ){
      return this;
    }

    if( toRemove && is.string( toRemove ) ){
      var selector = toRemove;
      toRemove = cy.mutableElements().filter( selector );
    }

    for( var i = 0; i < toRemove.length; i++ ){
      this.unmergeOne( toRemove[ i ] );
    }

    return this; // chaining
  },

  map: function( mapFn, thisArg ){
    var arr = [];
    var eles = this;

    for( var i = 0; i < eles.length; i++ ){
      var ele = eles[ i ];
      var ret = thisArg ? mapFn.apply( thisArg, [ ele, i, eles ] ) : mapFn( ele, i, eles );

      arr.push( ret );
    }

    return arr;
  },

  reduce: function( fn, initialValue ){
    var val = initialValue;
    var eles = this;

    for( var i = 0; i < eles.length; i++ ){
      val = fn( val, eles[i], i, eles );
    }

    return val;
  },

  stdFilter: function( fn, thisArg ){
    var filterEles = [];
    var eles = this;

    for( var i = 0; i < eles.length; i++ ){
      var ele = eles[ i ];
      var include = thisArg ? fn.apply( thisArg, [ ele, i, eles ] ) : fn( ele, i, eles );

      if( include ){
        filterEles.push( ele );
      }
    }

    return this.spawn( filterEles );
  },

  max: function( valFn, thisArg ){
    var max = -Infinity;
    var maxEle;
    var eles = this;

    for( var i = 0; i < eles.length; i++ ){
      var ele = eles[ i ];
      var val = thisArg ? valFn.apply( thisArg, [ ele, i, eles ] ) : valFn( ele, i, eles );

      if( val > max ){
        max = val;
        maxEle = ele;
      }
    }

    return {
      value: max,
      ele: maxEle
    };
  },

  min: function( valFn, thisArg ){
    var min = Infinity;
    var minEle;
    var eles = this;

    for( var i = 0; i < eles.length; i++ ){
      var ele = eles[ i ];
      var val = thisArg ? valFn.apply( thisArg, [ ele, i, eles ] ) : valFn( ele, i, eles );

      if( val < min ){
        min = val;
        minEle = ele;
      }
    }

    return {
      value: min,
      ele: minEle
    };
  }
});

// aliases
var fn = elesfn;
fn[ 'u' ] = fn[ '|' ] = fn[ '+' ] = fn.union = fn.or = fn.add;
fn[ '\\' ] = fn[ '!' ] = fn[ '-' ] = fn.difference = fn.relativeComplement = fn.subtract = fn.not;
fn[ 'n' ] = fn[ '&' ] = fn[ '.' ] = fn.and = fn.intersection = fn.intersect;
fn[ '^' ] = fn[ '(+)' ] = fn[ '(-)' ] = fn.symmetricDifference = fn.symdiff = fn.xor;
fn.fnFilter = fn.filterFn = fn.stdFilter;
fn.complement = fn.abscomp = fn.absoluteComplement;

module.exports = elesfn;

},{"../is":86,"../selector":91}],28:[function(require,module,exports){
'use strict';

var elesfn = ({
  isNode: function(){
    return this.group() === 'nodes';
  },

  isEdge: function(){
    return this.group() === 'edges';
  },

  isLoop: function(){
    return this.isEdge() && this.source().id() === this.target().id();
  },

  isSimple: function(){
    return this.isEdge() && this.source().id() !== this.target().id();
  },

  group: function(){
    var ele = this[0];

    if( ele ){
      return ele._private.group;
    }
  }
});


module.exports = elesfn;

},{}],29:[function(require,module,exports){
'use strict';

var util = require( '../util' );
var is = require( '../is' );

var Element = require( './element' );

// factory for generating edge ids when no id is specified for a new element
var idFactory = {
  generate: function( cy, element, tryThisId ){
    var id = tryThisId != null ? tryThisId : util.uuid();

    while( cy.hasElementWithId( id ) ){
      id = util.uuid();
    }

    return id;
  }
};

// represents a set of nodes, edges, or both together
var Collection = function( cy, elements, options ){
  if( cy === undefined || !is.core( cy ) ){
    util.error( 'A collection must have a reference to the core' );
    return;
  }

  var ids = {};
  var indexes = {};
  var createdElements = false;

  if( !elements ){
    elements = [];
  } else if( elements.length > 0 && is.plainObject( elements[0] ) && !is.element( elements[0] ) ){
    createdElements = true;

    // make elements from json and restore all at once later
    var eles = [];
    var elesIds = {};

    for( var i = 0, l = elements.length; i < l; i++ ){
      var json = elements[ i ];

      if( json.data == null ){
        json.data = {};
      }

      var data = json.data;

      // make sure newly created elements have valid ids
      if( data.id == null ){
        data.id = idFactory.generate( cy, json );
      } else if( cy.hasElementWithId( data.id ) || elesIds[ data.id ] ){
        continue; // can't create element if prior id already exists
      }

      var ele = new Element( cy, json, false );
      eles.push( ele );
      elesIds[ data.id ] = true;
    }

    elements = eles;
  }

  this.length = 0;

  for( var i = 0, l = elements.length; i < l; i++ ){
    var element = elements[ i ];
    if( !element ){  continue; }

    var id = element._private.data.id;

    if( !options || (options.unique && !ids[ id ] ) ){
      ids[ id ] = element;
      indexes[ id ] = this.length;

      this[ this.length ] = element;
      this.length++;
    }
  }

  this._private = {
    cy: cy,
    ids: ids,
    indexes: indexes
  };

  // restore the elements if we created them from json
  if( createdElements ){
    this.restore();
  }
};

// Functions
////////////////////////////////////////////////////////////////////////////////////////////////////

// keep the prototypes in sync (an element has the same functions as a collection)
// and use elefn and elesfn as shorthands to the prototypes
var elesfn = Element.prototype = Collection.prototype;

elesfn.instanceString = function(){
  return 'collection';
};

elesfn.spawn = function( cy, eles, opts ){
  if( !is.core( cy ) ){ // cy is optional
    opts = eles;
    eles = cy;
    cy = this.cy();
  }

  return new Collection( cy, eles, opts );
};

elesfn.spawnSelf = function(){
  return this.spawn( this );
};

elesfn.cy = function(){
  return this._private.cy;
};

elesfn.element = function(){
  return this[0];
};

elesfn.collection = function(){
  if( is.collection( this ) ){
    return this;
  } else { // an element
    return new Collection( this._private.cy, [ this ] );
  }
};

elesfn.unique = function(){
  return new Collection( this._private.cy, this, { unique: true } );
};

elesfn.hasElementWithId = function( id ){
  return !!this._private.ids[ id ];
};

elesfn.getElementById = function( id ){
  var cy = this._private.cy;
  var ele = this._private.ids[ id ];

  return ele ? ele : new Collection( cy ); // get ele or empty collection
};

elesfn.poolIndex = function(){
  var cy = this._private.cy;
  var eles = cy._private.elements;
  var id = this._private.data.id;

  return eles._private.indexes[ id ];
};

elesfn.json = function( obj ){
  var ele = this.element();
  var cy = this.cy();

  if( ele == null && obj ){ return this; } // can't set to no eles

  if( ele == null ){ return undefined; } // can't get from no eles

  var p = ele._private;

  if( is.plainObject( obj ) ){ // set

    cy.startBatch();

    if( obj.data ){
      ele.data( obj.data );
    }

    if( obj.position ){
      ele.position( obj.position );
    }

    // ignore group -- immutable

    var checkSwitch = function( k, trueFnName, falseFnName ){
      var obj_k = obj[ k ];

      if( obj_k != null && obj_k !== p[ k ] ){
        if( obj_k ){
          ele[ trueFnName ]();
        } else {
          ele[ falseFnName ]();
        }
      }
    };

    checkSwitch( 'removed', 'remove', 'restore' );

    checkSwitch( 'selected', 'select', 'unselect' );

    checkSwitch( 'selectable', 'selectify', 'unselectify' );

    checkSwitch( 'locked', 'lock', 'unlock' );

    checkSwitch( 'grabbable', 'grabify', 'ungrabify' );

    if( obj.classes != null ){
      ele.classes( obj.classes );
    }

    cy.endBatch();

    return this;

  } else if( obj === undefined ){ // get

    var json = {
      data: util.copy( p.data ),
      position: util.copy( p.position ),
      group: p.group,
      removed: p.removed,
      selected: p.selected,
      selectable: p.selectable,
      locked: p.locked,
      grabbable: p.grabbable,
      classes: null
    };

    json.classes = Object.keys( p.classes ).filter(function( cls ){
      return p.classes[cls];
    }).join(' ');

    return json;
  }
};

elesfn.jsons = function(){
  var jsons = [];

  for( var i = 0; i < this.length; i++ ){
    var ele = this[ i ];
    var json = ele.json();

    jsons.push( json );
  }

  return jsons;
};

elesfn.clone = function(){
  var cy = this.cy();
  var elesArr = [];

  for( var i = 0; i < this.length; i++ ){
    var ele = this[ i ];
    var json = ele.json();
    var clone = new Element( cy, json, false ); // NB no restore

    elesArr.push( clone );
  }

  return new Collection( cy, elesArr );
};
elesfn.copy = elesfn.clone;

elesfn.restore = function( notifyRenderer ){
  var self = this;
  var cy = self.cy();
  var cy_p = cy._private;

  if( notifyRenderer === undefined ){
    notifyRenderer = true;
  }

  // create arrays of nodes and edges, since we need to
  // restore the nodes first
  var nodes = [];
  var edges = [];
  var elements;
  for( var i = 0, l = self.length; i < l; i++ ){
    var ele = self[ i ];

    if( !ele.removed() ){
      // don't need to handle this ele
      continue;
    }

    // keep nodes first in the array and edges after
    if( ele.isNode() ){ // put to front of array if node
      nodes.push( ele );
    } else { // put to end of array if edge
      edges.push( ele );
    }
  }

  elements = nodes.concat( edges );

  var i;
  var removeFromElements = function(){
    elements.splice( i, 1 );
    i--;
  };

  // now, restore each element
  for( i = 0; i < elements.length; i++ ){
    var ele = elements[ i ];

    var _private = ele._private;
    var data = _private.data;

    // the traversal cache should start fresh when ele is added
    _private.traversalCache = null;

    // set id and validate
    if( data.id === undefined ){
      data.id = idFactory.generate( cy, ele );

    } else if( is.number( data.id ) ){
      data.id = '' + data.id; // now it's a string

    } else if( is.emptyString( data.id ) || !is.string( data.id ) ){
      util.error( 'Can not create element with invalid string ID `' + data.id + '`' );

      // can't create element if it has empty string as id or non-string id
      removeFromElements();
      continue;
    } else if( cy.hasElementWithId( data.id ) ){
      util.error( 'Can not create second element with ID `' + data.id + '`' );

      // can't create element if one already has that id
      removeFromElements();
      continue;
    }

    var id = data.id; // id is finalised, now let's keep a ref

    if( ele.isNode() ){ // extra checks for nodes
      var node = ele;
      var pos = _private.position;

      // make sure the nodes have a defined position

      if( pos.x == null ){
        pos.x = 0;
      }

      if( pos.y == null ){
        pos.y = 0;
      }
    }

    if( ele.isEdge() ){ // extra checks for edges

      var edge = ele;
      var fields = [ 'source', 'target' ];
      var fieldsLength = fields.length;
      var badSourceOrTarget = false;
      for( var j = 0; j < fieldsLength; j++ ){

        var field = fields[ j ];
        var val = data[ field ];

        if( is.number( val ) ){
          val = data[ field ] = '' + data[ field ]; // now string
        }

        if( val == null || val === '' ){
          // can't create if source or target is not defined properly
          util.error( 'Can not create edge `' + id + '` with unspecified ' + field );
          badSourceOrTarget = true;
        } else if( !cy.hasElementWithId( val ) ){
          // can't create edge if one of its nodes doesn't exist
          util.error( 'Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`' );
          badSourceOrTarget = true;
        }
      }

      if( badSourceOrTarget ){ removeFromElements(); continue; } // can't create this

      var src = cy.getElementById( data.source );
      var tgt = cy.getElementById( data.target );

      src._private.edges.push( edge );
      tgt._private.edges.push( edge );

      edge._private.source = src;
      edge._private.target = tgt;
    } // if is edge

    // create mock ids / indexes maps for element so it can be used like collections
    _private.ids = {};
    _private.ids[ id ] = ele;
    _private.indexes = {};
    _private.indexes[ id ] = ele;

    _private.removed = false;
    cy.addToPool( ele );
  } // for each element

  // do compound node sanity checks
  for( var i = 0; i < nodes.length; i++ ){ // each node
    var node = nodes[ i ];
    var data = node._private.data;

    if( is.number( data.parent ) ){ // then automake string
      data.parent = '' + data.parent;
    }

    var parentId = data.parent;

    var specifiedParent = parentId != null;

    if( specifiedParent ){
      var parent = cy.getElementById( parentId );

      if( parent.empty() ){
        // non-existant parent; just remove it
        data.parent = undefined;
      } else {
        var selfAsParent = false;
        var ancestor = parent;
        while( !ancestor.empty() ){
          if( node.same( ancestor ) ){
            // mark self as parent and remove from data
            selfAsParent = true;
            data.parent = undefined; // remove parent reference

            // exit or we loop forever
            break;
          }

          ancestor = ancestor.parent();
        }

        if( !selfAsParent ){
          // connect with children
          parent[0]._private.children.push( node );
          node._private.parent = parent[0];

          // let the core know we have a compound graph
          cy_p.hasCompoundNodes = true;
        }
      } // else
    } // if specified parent
  } // for each node

  if( elements.length > 0 ){
    var restored = new Collection( cy, elements );

    for( var i = 0; i < restored.length; i++ ){
      var ele = restored[i];

      if( ele.isNode() ){ continue; }

      // adding an edge invalidates the traversal caches for the parallel edges
      var pedges = ele.parallelEdges();
      for( var j = 0; j < pedges.length; j++ ){
        pedges[j]._private.traversalCache = null;
      }

      // adding an edge invalidates the traversal cache for the connected nodes
      ele.source()[0]._private.traversalCache = null;
      ele.target()[0]._private.traversalCache = null;
    }

    var toUpdateStyle;

    if( cy_p.hasCompoundNodes ){
      toUpdateStyle = restored.add( restored.connectedNodes() ).add( restored.parent() );
    } else {
      toUpdateStyle = restored;
    }

    toUpdateStyle.updateStyle( notifyRenderer );

    if( notifyRenderer ){
      restored.rtrigger( 'add' );
    } else {
      restored.trigger( 'add' );
    }
  }

  return self; // chainability
};

elesfn.removed = function(){
  var ele = this[0];
  return ele && ele._private.removed;
};

elesfn.inside = function(){
  var ele = this[0];
  return ele && !ele._private.removed;
};

elesfn.remove = function( notifyRenderer ){
  var self = this;
  var removed = [];
  var elesToRemove = [];
  var elesToRemoveIds = {};
  var cy = self._private.cy;

  if( notifyRenderer === undefined ){
    notifyRenderer = true;
  }

  // add connected edges
  function addConnectedEdges( node ){
    var edges = node._private.edges;
    for( var i = 0; i < edges.length; i++ ){
      add( edges[ i ] );
    }
  }


  // add descendant nodes
  function addChildren( node ){
    var children = node._private.children;

    for( var i = 0; i < children.length; i++ ){
      add( children[ i ] );
    }
  }

  function add( ele ){
    var alreadyAdded =  elesToRemoveIds[ ele.id() ];
    if( alreadyAdded ){
      return;
    } else {
      elesToRemoveIds[ ele.id() ] = true;
    }

    if( ele.isNode() ){
      elesToRemove.push( ele ); // nodes are removed last

      addConnectedEdges( ele );
      addChildren( ele );
    } else {
      elesToRemove.unshift( ele ); // edges are removed first
    }
  }

  // make the list of elements to remove
  // (may be removing more than specified due to connected edges etc)

  for( var i = 0, l = self.length; i < l; i++ ){
    var ele = self[ i ];

    add( ele );
  }

  function removeEdgeRef( node, edge ){
    var connectedEdges = node._private.edges;

    util.removeFromArray( connectedEdges, edge );

    // removing an edges invalidates the traversal cache for its nodes
    node._private.traversalCache = null;
  }

  function removeParallelRefs( edge ){
    // removing an edge invalidates the traversal caches for the parallel edges
    var pedges = edge.parallelEdges();
    for( var j = 0; j < pedges.length; j++ ){
      pedges[j]._private.traversalCache = null;
    }
  }

  var alteredParents = [];
  alteredParents.ids = {};

  function removeChildRef( parent, ele ){
    ele = ele[0];
    parent = parent[0];

    var children = parent._private.children;
    var pid = parent.id();

    util.removeFromArray( children, ele );

    if( !alteredParents.ids[ pid ] ){
      alteredParents.ids[ pid ] = true;
      alteredParents.push( parent );
    }
  }

  // remove from core pool
  cy.removeFromPool( elesToRemove );

  for( var i = 0; i < elesToRemove.length; i++ ){
    var ele = elesToRemove[ i ];

    // mark as removed
    ele._private.removed = true;

    // add to list of removed elements
    removed.push( ele );

    if( ele.isEdge() ){ // remove references to this edge in its connected nodes
      var src = ele.source()[0];
      var tgt = ele.target()[0];

      removeEdgeRef( src, ele );
      removeEdgeRef( tgt, ele );
      removeParallelRefs( ele );

    } else { // remove reference to parent
      var parent = ele.parent();

      if( parent.length !== 0 ){
        removeChildRef( parent, ele );
      }
    }
  }

  // check to see if we have a compound graph or not
  var elesStillInside = cy._private.elements;
  cy._private.hasCompoundNodes = false;
  for( var i = 0; i < elesStillInside.length; i++ ){
    var ele = elesStillInside[ i ];

    if( ele.isParent() ){
      cy._private.hasCompoundNodes = true;
      break;
    }
  }

  var removedElements = new Collection( this.cy(), removed );
  if( removedElements.size() > 0 ){
    // must manually notify since trigger won't do this automatically once removed

    if( notifyRenderer ){
      this.cy().notify( {
        type: 'remove',
        eles: removedElements
      } );
    }

    removedElements.trigger( 'remove' );
  }

  // the parents who were modified by the removal need their style updated
  for( var i = 0; i < alteredParents.length; i++ ){
    var ele = alteredParents[ i ];

    if( !ele.removed() ){
      ele.updateStyle();
    }
  }

  return new Collection( cy, removed );
};

elesfn.move = function( struct ){
  var cy = this._private.cy;

  if( struct.source !== undefined || struct.target !== undefined ){
    var srcId = struct.source;
    var tgtId = struct.target;
    var srcExists = cy.hasElementWithId( srcId );
    var tgtExists = cy.hasElementWithId( tgtId );

    if( srcExists || tgtExists ){
      var jsons = this.jsons();

      this.remove();

      for( var i = 0; i < jsons.length; i++ ){
        var json = jsons[i];
        var ele = this[i];

        if( json.group === 'edges' ){
          if( srcExists ){ json.data.source = srcId; }

          if( tgtExists ){ json.data.target = tgtId; }

          json.scratch = ele._private.scratch;
        }
      }

      return cy.add( jsons );
    }

  } else if( struct.parent !== undefined ){ // move node to new parent
    var parentId = struct.parent;
    var parentExists = parentId === null || cy.hasElementWithId( parentId );

    if( parentExists ){
      var jsons = this.jsons();
      var descs = this.descendants();
      var descsEtcJsons = descs.union( descs.union( this ).connectedEdges() ).jsons();

      this.remove(); // NB: also removes descendants and their connected edges

      for( var i = 0; i < jsons.length; i++ ){
        var json = jsons[i];
        var ele = this[i];

        if( json.group === 'nodes' ){
          json.data.parent = parentId === null ? undefined : parentId;

          json.scratch = ele._private.scratch;
        }
      }

      return cy.add( jsons.concat( descsEtcJsons ) );
    }
  }

  return this; // if nothing done
};

[
  require( './algorithms' ),
  require( './animation' ),
  require( './class' ),
  require( './comparators' ),
  require( './compounds' ),
  require( './data' ),
  require( './degree' ),
  require( './dimensions' ),
  require( './events' ),
  require( './filter' ),
  require( './group' ),
  require( './index' ),
  require( './iteration' ),
  require( './layout' ),
  require( './style' ),
  require( './switch-functions' ),
  require( './traversing' )
].forEach( function( props ){
  util.extend( elesfn, props );
} );

module.exports = Collection;

},{"../is":86,"../util":104,"./algorithms":14,"./animation":18,"./class":19,"./comparators":20,"./compounds":21,"./data":22,"./degree":23,"./dimensions":24,"./element":25,"./events":26,"./filter":27,"./group":28,"./index":29,"./iteration":30,"./layout":31,"./style":32,"./switch-functions":33,"./traversing":34}],30:[function(require,module,exports){
'use strict';

var is = require( '../is' );
var zIndexSort = require( './zsort' );

var elesfn = ({
  each: function( fn ){
    if( is.fn( fn ) ){
      for( var i = 0; i < this.length; i++ ){
        var ele = this[ i ];
        var ret = fn.apply( ele, [ i, ele ] );

        if( ret === false ){ break; } // exit each early on return false
      }
    }
    return this;
  },

  forEach: function( fn, thisArg ){
    if( is.fn( fn ) ){

      for( var i = 0; i < this.length; i++ ){
        var ele = this[ i ];
        var ret = thisArg ? fn.apply( thisArg, [ ele, i, this ] ) : fn( ele, i, this );

        if( ret === false ){ break; } // exit each early on return false
      }
    }

    return this;
  },

  toArray: function(){
    var array = [];

    for( var i = 0; i < this.length; i++ ){
      array.push( this[ i ] );
    }

    return array;
  },

  slice: function( start, end ){
    var array = [];
    var thisSize = this.length;

    if( end == null ){
      end = thisSize;
    }

    if( start == null ){
      start = 0;
    }

    if( start < 0 ){
      start = thisSize + start;
    }

    if( end < 0 ){
      end = thisSize + end;
    }

    for( var i = start; i >= 0 && i < end && i < thisSize; i++ ){
      array.push( this[ i ] );
    }

    return this.spawn( array );
  },

  size: function(){
    return this.length;
  },

  eq: function( i ){
    return this[ i ] || this.spawn();
  },

  first: function(){
    return this[0] || this.spawn();
  },

  last: function(){
    return this[ this.length - 1 ] || this.spawn();
  },

  empty: function(){
    return this.length === 0;
  },

  nonempty: function(){
    return !this.empty();
  },

  sort: function( sortFn ){
    if( !is.fn( sortFn ) ){
      return this;
    }

    var sorted = this.toArray().sort( sortFn );

    return this.spawn( sorted );
  },

  sortByZIndex: function(){
    return this.sort( zIndexSort );
  },

  zDepth: function(){
    var ele = this[0];
    if( !ele ){ return undefined; }

    // var cy = ele.cy();
    var _p = ele._private;
    var group = _p.group;

    if( group === 'nodes' ){
      var depth = _p.data.parent ? ele.parents().size() : 0;

      if( !ele.isParent() ){
        return Number.MAX_SAFE_INTEGER - 1; // childless nodes always on top
      }

      return depth;
    } else {
      var src = _p.source;
      var tgt = _p.target;
      var srcDepth = src.zDepth();
      var tgtDepth = tgt.zDepth();

      return Math.max( srcDepth, tgtDepth, 0 ); // depth of deepest parent
    }
  }
});

module.exports = elesfn;

},{"../is":86,"./zsort":35}],31:[function(require,module,exports){
'use strict';

var is = require( '../is' );
var util = require( '../util' );
var Promise = require('../promise');

var elesfn = ({

  // using standard layout options, apply position function (w/ or w/o animation)
  layoutPositions: function( layout, options, fn ){
    var nodes = this.nodes();
    var cy = this.cy();

    layout.trigger( { type: 'layoutstart', layout: layout } );

    layout.animations = [];

    if( options.animate ){
      for( var i = 0; i < nodes.length; i++ ){
        var node = nodes[ i ];

        var newPos = fn.call( node, i, node );
        var pos = node.position();

        if( !is.number( pos.x ) || !is.number( pos.y ) ){
          node.silentPosition( { x: 0, y: 0 } );
        }

        var ani = node.animation( {
          position: newPos,
          duration: options.animationDuration,
          easing: options.animationEasing
        } );

        layout.animations.push( ani );

        ani.play();
      }

      var onStep;
      cy.on( 'step.*', ( onStep = function(){
        if( options.fit ){
          cy.fit( options.eles, options.padding );
        }
      }) );

      layout.one('layoutstop', function(){
        cy.off('step.*', onStep);
      });

      layout.one( 'layoutready', options.ready );
      layout.trigger( { type: 'layoutready', layout: layout } );

      Promise.all( layout.animations.map(function( ani ){
        return ani.promise();
      }) ).then(function(){
        cy.off('step.*', onStep);

        if( options.zoom != null ){
          cy.zoom( options.zoom );
        }

        if( options.pan ){
          cy.pan( options.pan );
        }

        if( options.fit ){
          cy.fit( options.eles, options.padding );
        }

        layout.one( 'layoutstop', options.stop );
        layout.trigger( { type: 'layoutstop', layout: layout } );
      });
    } else {
      nodes.positions( fn );

      if( options.fit ){
        cy.fit( options.eles, options.padding );
      }

      if( options.zoom != null ){
        cy.zoom( options.zoom );
      }

      if( options.pan ){
        cy.pan( options.pan );
      }

      layout.one( 'layoutready', options.ready );
      layout.trigger( { type: 'layoutready', layout: layout } );

      layout.one( 'layoutstop', options.stop );
      layout.trigger( { type: 'layoutstop', layout: layout } );
    }

    return this; // chaining
  },

  layout: function( options ){
    var cy = this.cy();

    cy.layout( util.extend( {}, options, {
      eles: this
    } ) );

    return this;
  },

  makeLayout: function( options ){
    var cy = this.cy();

    return cy.makeLayout( util.extend( {}, options, {
      eles: this
    } ) );
  }

});

// aliases:
elesfn.createLayout = elesfn.makeLayout;

module.exports = elesfn;

},{"../is":86,"../promise":89,"../util":104}],32:[function(require,module,exports){
'use strict';

var is = require( '../is' );

var elesfn = ({

  // fully updates (recalculates) the style for the elements
  updateStyle: function( notifyRenderer ){
    var cy = this._private.cy;

    if( !cy.styleEnabled() ){ return this; }

    if( cy._private.batchingStyle ){
      var bEles = cy._private.batchStyleEles;

      bEles.merge( this );

      return this; // chaining and exit early when batching
    }

    var style = cy.style();
    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

    style.apply( this );

    var updatedCompounds = this.updateCompoundBounds();
    var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;

    if( notifyRenderer ){
      toNotify.rtrigger( 'style' ); // let renderer know we changed style
    } else {
      toNotify.trigger( 'style' ); // just fire the event
    }
    return this; // chaining
  },

  // just update the mappers in the elements' styles; cheaper than eles.updateStyle()
  updateMappers: function( notifyRenderer ){
    var cy = this._private.cy;
    var style = cy.style();
    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

    if( !cy.styleEnabled() ){ return this; }

    style.updateMappers( this );

    var updatedCompounds = this.updateCompoundBounds();
    var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;

    if( notifyRenderer ){
      toNotify.rtrigger( 'style' ); // let renderer know we changed style
    } else {
      toNotify.trigger( 'style' ); // just fire the event
    }
    return this; // chaining
  },

  // get the internal parsed style object for the specified property
  parsedStyle: function( property ){
    var ele = this[0];
    var cy = ele.cy();

    if( !cy.styleEnabled() ){ return; }

    if( ele ){
      return ele._private.style[ property ] || cy.style().getDefaultProperty( property );
    }
  },

  numericStyle: function( property ){
    var ele = this[0];

    if( !ele.cy().styleEnabled() ){ return; }

    if( ele ){
      var pstyle = ele.pstyle( property );

      return pstyle.pfValue !== undefined ? pstyle.pfValue : pstyle.value;
    }
  },

  numericStyleUnits: function( property ){
    var ele = this[0];

    if( !ele.cy().styleEnabled() ){ return; }

    if( ele ){
      return ele.pstyle( property ).units;
    }
  },

  // get the specified css property as a rendered value (i.e. on-screen value)
  // or get the whole rendered style if no property specified (NB doesn't allow setting)
  renderedStyle: function( property ){
    var cy = this.cy();
    if( !cy.styleEnabled() ){ return this; }

    var ele = this[0];

    if( ele ){
      return cy.style().getRenderedStyle( ele, property );
    }
  },

  // read the calculated css style of the element or override the style (via a bypass)
  style: function( name, value ){
    var cy = this.cy();

    if( !cy.styleEnabled() ){ return this; }

    var updateTransitions = false;
    var style = cy.style();

    if( is.plainObject( name ) ){ // then extend the bypass
      var props = name;
      style.applyBypass( this, props, updateTransitions );

      var updatedCompounds = this.updateCompoundBounds();
      var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;
      toNotify.rtrigger( 'style' ); // let the renderer know we've updated style

    } else if( is.string( name ) ){

      if( value === undefined ){ // then get the property from the style
        var ele = this[0];

        if( ele ){
          return style.getStylePropertyValue( ele, name );
        } else { // empty collection => can't get any value
          return;
        }

      } else { // then set the bypass with the property value
        style.applyBypass( this, name, value, updateTransitions );

        var updatedCompounds = this.updateCompoundBounds();
        var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;
        toNotify.rtrigger( 'style' ); // let the renderer know we've updated style
      }

    } else if( name === undefined ){
      var ele = this[0];

      if( ele ){
        return style.getRawStyle( ele );
      } else { // empty collection => can't get any value
        return;
      }
    }

    return this; // chaining
  },

  removeStyle: function( names ){
    var cy = this.cy();

    if( !cy.styleEnabled() ){ return this; }

    var updateTransitions = false;
    var style = cy.style();
    var eles = this;

    if( names === undefined ){
      for( var i = 0; i < eles.length; i++ ){
        var ele = eles[ i ];

        style.removeAllBypasses( ele, updateTransitions );
      }
    } else {
      names = names.split( /\s+/ );

      for( var i = 0; i < eles.length; i++ ){
        var ele = eles[ i ];

        style.removeBypasses( ele, names, updateTransitions );
      }
    }

    var updatedCompounds = this.updateCompoundBounds();
    var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;
    toNotify.rtrigger( 'style' ); // let the renderer know we've updated style

    return this; // chaining
  },

  show: function(){
    this.css( 'display', 'element' );
    return this; // chaining
  },

  hide: function(){
    this.css( 'display', 'none' );
    return this; // chaining
  },

  visible: function(){
    var cy = this.cy();
    if( !cy.styleEnabled() ){ return true; }

    var ele = this[0];
    var hasCompoundNodes = cy.hasCompoundNodes();

    if( ele ){
      if(
        ele.pstyle( 'visibility' ).value !== 'visible'
        || ele.pstyle( 'display' ).value !== 'element'
        || ele.pstyle('width').pfValue === 0
      ){
        return false;
      }

      if( ele._private.group === 'nodes' ){
        if( ele.pstyle('height').pfValue === 0 ){ return false; }

        if( !hasCompoundNodes ){ return true; }

        var parents = ele._private.data.parent ? ele.parents() : null;

        if( parents ){
          for( var i = 0; i < parents.length; i++ ){
            var parent = parents[ i ];
            var pVis = parent.pstyle( 'visibility' ).value;
            var pDis = parent.pstyle( 'display' ).value;

            if( pVis !== 'visible' || pDis !== 'element' ){
              return false;
            }
          }
        }

        return true;
      } else {
        var src = ele._private.source;
        var tgt = ele._private.target;

        return src.visible() && tgt.visible();
      }

    }
  },

  hidden: function(){
    var ele = this[0];

    if( ele ){
      return !ele.visible();
    }
  },

  effectiveOpacity: function(){
    var cy = this.cy();
    if( !cy.styleEnabled() ){ return 1; }

    var hasCompoundNodes = cy.hasCompoundNodes();
    var ele = this[0];

    if( ele ){
      var _p = ele._private;
      var parentOpacity = ele.pstyle( 'opacity' ).value;

      if( !hasCompoundNodes ){ return parentOpacity; }

      var parents = !_p.data.parent ? null : ele.parents();

      if( parents ){
        for( var i = 0; i < parents.length; i++ ){
          var parent = parents[ i ];
          var opacity = parent.pstyle( 'opacity' ).value;

          parentOpacity = opacity * parentOpacity;
        }
      }

      return parentOpacity;
    }
  },

  transparent: function(){
    var cy = this.cy();
    if( !cy.styleEnabled() ){ return false; }

    var ele = this[0];
    var hasCompoundNodes = ele.cy().hasCompoundNodes();

    if( ele ){
      if( !hasCompoundNodes ){
        return ele.pstyle( 'opacity' ).value === 0;
      } else {
        return ele.effectiveOpacity() === 0;
      }
    }
  },

  backgrounding: function(){
    var cy = this.cy();
    if( !cy.styleEnabled() ){ return false; }

    var ele = this[0];

    return ele._private.backgrounding ? true : false;
  }

});


elesfn.bypass = elesfn.css = elesfn.style;
elesfn.renderedCss = elesfn.renderedStyle;
elesfn.removeBypass = elesfn.removeCss = elesfn.removeStyle;
elesfn.pstyle = elesfn.parsedStyle;

module.exports = elesfn;

},{"../is":86}],33:[function(require,module,exports){
'use strict';

var elesfn = {};

function defineSwitchFunction( params ){
  return function(){
    var args = arguments;
    var changedEles = [];

    // e.g. cy.nodes().select( data, handler )
    if( args.length === 2 ){
      var data = args[0];
      var handler = args[1];
      this.on( params.event, data, handler );
    }

    // e.g. cy.nodes().select( handler )
    else if( args.length === 1 ){
      var handler = args[0];
      this.on( params.event, handler );
    }

    // e.g. cy.nodes().select()
    else if( args.length === 0 ){
      for( var i = 0; i < this.length; i++ ){
        var ele = this[ i ];
        var able = !params.ableField || ele._private[ params.ableField ];
        var changed = ele._private[ params.field ] != params.value;

        if( params.overrideAble ){
          var overrideAble = params.overrideAble( ele );

          if( overrideAble !== undefined ){
            able = overrideAble;

            if( !overrideAble ){ return this; } // to save cycles assume not able for all on override
          }
        }

        if( able ){
          ele._private[ params.field ] = params.value;

          if( changed ){
            changedEles.push( ele );
          }
        }
      }

      var changedColl = this.spawn( changedEles );
      changedColl.updateStyle(); // change of state => possible change of style
      changedColl.trigger( params.event );
    }

    return this;
  };
}

function defineSwitchSet( params ){
  elesfn[ params.field ] = function(){
    var ele = this[0];

    if( ele ){
      if( params.overrideField ){
        var val = params.overrideField( ele );

        if( val !== undefined ){
          return val;
        }
      }

      return ele._private[ params.field ];
    }
  };

  elesfn[ params.on ] = defineSwitchFunction( {
    event: params.on,
    field: params.field,
    ableField: params.ableField,
    overrideAble: params.overrideAble,
    value: true
  } );

  elesfn[ params.off ] = defineSwitchFunction( {
    event: params.off,
    field: params.field,
    ableField: params.ableField,
    overrideAble: params.overrideAble,
    value: false
  } );
}

defineSwitchSet( {
  field: 'locked',
  overrideField: function( ele ){
    return ele.cy().autolock() ? true : undefined;
  },
  on: 'lock',
  off: 'unlock'
} );

defineSwitchSet( {
  field: 'grabbable',
  overrideField: function( ele ){
    return ele.cy().autoungrabify() ? false : undefined;
  },
  on: 'grabify',
  off: 'ungrabify'
} );

defineSwitchSet( {
  field: 'selected',
  ableField: 'selectable',
  overrideAble: function( ele ){
    return ele.cy().autounselectify() ? false : undefined;
  },
  on: 'select',
  off: 'unselect'
} );

defineSwitchSet( {
  field: 'selectable',
  overrideField: function( ele ){
    return ele.cy().autounselectify() ? false : undefined;
  },
  on: 'selectify',
  off: 'unselectify'
} );

elesfn.deselect = elesfn.unselect;

elesfn.grabbed = function(){
  var ele = this[0];
  if( ele ){
    return ele._private.grabbed;
  }
};

defineSwitchSet( {
  field: 'active',
  on: 'activate',
  off: 'unactivate'
} );

elesfn.inactive = function(){
  var ele = this[0];
  if( ele ){
    return !ele._private.active;
  }
};

module.exports = elesfn;

},{}],34:[function(require,module,exports){
'use strict';

var util = require( '../util' );
var is = require( '../is' );

var elesfn = {};

var cache = function( fn, name ){
  return function traversalCache( arg1, arg2, arg3, arg4 ){
    var selectorOrEles = arg1;
    var eles = this;
    var key;

    if( selectorOrEles == null ){
      key = 'null';
    } else if( is.elementOrCollection( selectorOrEles ) && selectorOrEles.length === 1 ){
      key = '#' + selectorOrEles.id();
    }

    if( eles.length === 1 && key ){
      var _p = eles[0]._private;
      var tch = _p.traversalCache = _p.traversalCache || {};
      var ch = tch[ name ] = tch[ name ] || {};
      var cacheHit = ch[ key ];

      if( cacheHit ){
        return cacheHit;
      } else {
        return ( ch[ key ] = fn.call( eles, arg1, arg2, arg3, arg4 ) );
      }
    } else {
      return fn.call( eles, arg1, arg2, arg3, arg4 );
    }
  };
};

// DAG functions
////////////////

var defineDagExtremity = function( params ){
  return function dagExtremityImpl( selector ){
    var eles = this;
    var ret = [];

    for( var i = 0; i < eles.length; i++ ){
      var ele = eles[ i ];
      if( !ele.isNode() ){
        continue;
      }

      var disqualified = false;
      var edges = ele.connectedEdges();

      for( var j = 0; j < edges.length; j++ ){
        var edge = edges[j];
        var src = edge.source();
        var tgt = edge.target();

        if(
             ( params.noIncomingEdges && tgt === ele && src !== ele )
          || ( params.noOutgoingEdges && src === ele && tgt !== ele )
        ){
          disqualified = true;
          break;
        }
      }

      if( !disqualified ){
        ret.push( ele );
      }
    }

    return this.spawn( ret, { unique: true } ).filter( selector );
  };
};

var defineDagOneHop = function( params ){
  return function( selector ){
    var eles = this;
    var oEles = [];

    for( var i = 0; i < eles.length; i++ ){
      var ele = eles[ i ];

      if( !ele.isNode() ){ continue; }

      var edges = ele.connectedEdges();
      for( var j = 0; j < edges.length; j++ ){
        var edge = edges[ j ];
        var src = edge.source();
        var tgt = edge.target();

        if( params.outgoing && src === ele ){
          oEles.push( edge );
          oEles.push( tgt );
        } else if( params.incoming && tgt === ele ){
          oEles.push( edge );
          oEles.push( src );
        }
      }
    }

    return this.spawn( oEles, { unique: true } ).filter( selector );
  };
};

var defineDagAllHops = function( params ){
  return function( selector ){
    var eles = this;
    var sEles = [];
    var sElesIds = {};

    for( ;; ){
      var next = params.outgoing ? eles.outgoers() : eles.incomers();

      if( next.length === 0 ){ break; } // done if none left

      var newNext = false;
      for( var i = 0; i < next.length; i++ ){
        var n = next[ i ];
        var nid = n.id();

        if( !sElesIds[ nid ] ){
          sElesIds[ nid ] = true;
          sEles.push( n );
          newNext = true;
        }
      }

      if( !newNext ){ break; } // done if touched all outgoers already

      eles = next;
    }

    return this.spawn( sEles, { unique: true } ).filter( selector );
  };
};

util.extend( elesfn, {
  // get the root nodes in the DAG
  roots: defineDagExtremity({ noIncomingEdges: true }),

  // get the leaf nodes in the DAG
  leaves: defineDagExtremity({ noOutgoingEdges: true }),

  // normally called children in graph theory
  // these nodes =edges=> outgoing nodes
  outgoers: cache( defineDagOneHop({ outgoing: true }) , 'outgoers' ),

  // aka DAG descendants
  successors: defineDagAllHops({ outgoing: true }),

  // normally called parents in graph theory
  // these nodes <=edges= incoming nodes
  incomers: cache( defineDagOneHop({ incoming: true }), 'incomers' ),

  // aka DAG ancestors
  predecessors: defineDagAllHops({ incoming: true })
} );


// Neighbourhood functions
//////////////////////////

util.extend( elesfn, {
  neighborhood: cache(function( selector ){
    var elements = [];
    var nodes = this.nodes();

    for( var i = 0; i < nodes.length; i++ ){ // for all nodes
      var node = nodes[ i ];
      var connectedEdges = node.connectedEdges();

      // for each connected edge, add the edge and the other node
      for( var j = 0; j < connectedEdges.length; j++ ){
        var edge = connectedEdges[ j ];
        var src = edge.source();
        var tgt = edge.target();
        var otherNode = node === src ? tgt : src;

        // need check in case of loop
        if( otherNode.length > 0 ){
          elements.push( otherNode[0] ); // add node 1 hop away
        }

        // add connected edge
        elements.push( edge[0] );
      }

    }

    return ( this.spawn( elements, { unique: true } ) ).filter( selector );
  }, 'neighborhood'),

  closedNeighborhood: function( selector ){
    return this.neighborhood().add( this ).filter( selector );
  },

  openNeighborhood: function( selector ){
    return this.neighborhood( selector );
  }
} );

// aliases
elesfn.neighbourhood = elesfn.neighborhood;
elesfn.closedNeighbourhood = elesfn.closedNeighborhood;
elesfn.openNeighbourhood = elesfn.openNeighborhood;

// Edge functions
/////////////////

util.extend( elesfn, {
  source: cache(function sourceImpl( selector ){
    var ele = this[0];
    var src;

    if( ele ){
      src = ele._private.source || ele.cy().collection();
    }

    return src && selector ? src.filter( selector ) : src;
  }, 'source'),

  target: cache(function targetImpl( selector ){
    var ele = this[0];
    var tgt;

    if( ele ){
      tgt = ele._private.target || ele.cy().collection();
    }

    return tgt && selector ? tgt.filter( selector ) : tgt;
  }, 'target'),

  sources: defineSourceFunction( {
    attr: 'source'
  } ),

  targets: defineSourceFunction( {
    attr: 'target'
  } )
} );

function defineSourceFunction( params ){
  return function sourceImpl( selector ){
    var sources = [];

    for( var i = 0; i < this.length; i++ ){
      var ele = this[ i ];
      var src = ele._private[ params.attr ];

      if( src ){
        sources.push( src );
      }
    }

    return this.spawn( sources, { unique: true } ).filter( selector );
  };
}

util.extend( elesfn, {
  edgesWith: cache( defineEdgesWithFunction(), 'edgesWith', true ),

  edgesTo: cache( defineEdgesWithFunction( {
    thisIsSrc: true
  } ), 'edgesTo', true )
} );

function defineEdgesWithFunction( params ){

  return function edgesWithImpl( otherNodes ){
    var elements = [];
    var cy = this._private.cy;
    var p = params || {};

    // get elements if a selector is specified
    if( is.string( otherNodes ) ){
      otherNodes = cy.$( otherNodes );
    }

    var thisIds = this._private.ids;
    var otherIds = otherNodes._private.ids;

    for( var h = 0; h < otherNodes.length; h++ ){
      var edges = otherNodes[ h ]._private.edges;

      for( var i = 0; i < edges.length; i++ ){
        var edge = edges[ i ];
        var edgeData = edge._private.data;
        var thisToOther = thisIds[ edgeData.source ] && otherIds[ edgeData.target ];
        var otherToThis = otherIds[ edgeData.source ] && thisIds[ edgeData.target ];
        var edgeConnectsThisAndOther = thisToOther || otherToThis;

        if( !edgeConnectsThisAndOther ){ continue; }

        if( p.thisIsSrc || p.thisIsTgt ){
          if( p.thisIsSrc && !thisToOther ){ continue; }

          if( p.thisIsTgt && !otherToThis ){ continue; }
        }

        elements.push( edge );
      }
    }

    return this.spawn( elements, { unique: true } );
  };
}

util.extend( elesfn, {
  connectedEdges: cache(function( selector ){
    var retEles = [];

    var eles = this;
    for( var i = 0; i < eles.length; i++ ){
      var node = eles[ i ];
      if( !node.isNode() ){ continue; }

      var edges = node._private.edges;

      for( var j = 0; j < edges.length; j++ ){
        var edge = edges[ j ];
        retEles.push( edge );
      }
    }

    return this.spawn( retEles, { unique: true } ).filter( selector );
  }, 'connectedEdges'),

  connectedNodes: cache(function( selector ){
    var retEles = [];

    var eles = this;
    for( var i = 0; i < eles.length; i++ ){
      var edge = eles[ i ];
      if( !edge.isEdge() ){ continue; }

      retEles.push( edge.source()[0] );
      retEles.push( edge.target()[0] );
    }

    return this.spawn( retEles, { unique: true } ).filter( selector );
  }, 'connectedNodes'),

  parallelEdges: cache( defineParallelEdgesFunction(), 'parallelEdges' ),

  codirectedEdges: cache( defineParallelEdgesFunction( {
    codirected: true
  } ), 'codirectedEdges' )
} );

function defineParallelEdgesFunction( params ){
  var defaults = {
    codirected: false
  };
  params = util.extend( {}, defaults, params );

  return function parallelEdgesImpl( selector ){ // micro-optimised for renderer
    var elements = [];
    var edges = this.edges();
    var p = params;

    // look at all the edges in the collection
    for( var i = 0; i < edges.length; i++ ){
      var edge1 = edges[ i ];
      var edge1_p = edge1._private;
      var src1 = edge1_p.source;
      var srcid1 = src1._private.data.id;
      var tgtid1 = edge1_p.data.target;
      var srcEdges1 = src1._private.edges;

      // look at edges connected to the src node of this edge
      for( var j = 0; j < srcEdges1.length; j++ ){
        var edge2 = srcEdges1[ j ];
        var edge2data = edge2._private.data;
        var tgtid2 = edge2data.target;
        var srcid2 = edge2data.source;

        var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
        var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;

        if( (p.codirected && codirected) || (!p.codirected && (codirected || oppdirected)) ){
          elements.push( edge2 );
        }
      }
    }

    return this.spawn( elements, { unique: true } ).filter( selector );
  };

}

// Misc functions
/////////////////

util.extend( elesfn, {
  components: function(){
    var self = this;
    var cy = self.cy();
    var visited = self.spawn();
    var unvisited = self.nodes().spawnSelf();
    var components = [];

    var visitInComponent = function( node, component ){
      visited.merge( node );
      unvisited.unmerge( node );
      component.merge( node );
    };

    if( unvisited.empty() ){ return self.spawn(); }

    do {
      var component = cy.collection();
      components.push( component );

      var root = unvisited[0];
      visitInComponent( root, component );

      self.bfs({
        directed: false,
        roots: root,
        visit: function( i, depth, v, e, u ){
          visitInComponent( v, component );
        }
      } );

    } while( unvisited.length > 0 );

    return components.map(function( component ){
      var connectedEdges = component.connectedEdges().stdFilter(function( edge ){
        return component.anySame( edge.source() ) && component.anySame( edge.target() );
      });

      return component.union( connectedEdges );
    });
  }
} );

module.exports = elesfn;

},{"../is":86,"../util":104}],35:[function(require,module,exports){
'use strict';

/**
 *  Elements are drawn in a specific order based on compound depth (low to high), the element type (nodes above edges),
 *  and z-index (low to high).  These styles affect how this applies:
 *
 *  z-compound-depth: May be `bottom | orphan | auto | top`.  The first drawn is `bottom`, then `orphan` which is the
 *      same depth as the root of the compound graph, followed by the default value `auto` which draws in order from
 *      root to leaves of the compound graph.  The last drawn is `top`.
 *  z-index-compare: May be `auto | manual`.  The default value is `auto` which always draws edges under nodes.
 *      `manual` ignores this convention and draws based on the `z-index` value setting.
 *  z-index: An integer value that affects the relative draw order of elements.  In general, an element with a higher
 *      `z-index` will be drawn on top of an element with a lower `z-index`.
 */
var zIndexSort = function( a, b ){
  var cy = a.cy();
  var hasCompoundNodes = cy.hasCompoundNodes();

  function getDepth(ele){
    var style = ele.pstyle( 'z-compound-depth' );
    if ( style.value === 'auto' ){
      return hasCompoundNodes ? ele.zDepth() : 0
    } else if ( style.value === 'bottom' ){
      return -1
    } else if ( style.value === 'top' ){
      return Number.MAX_SAFE_INTEGER
    }
    // 'orphan'
    return 0
  }
  var depthDiff = getDepth(a) - getDepth(b);
  if ( depthDiff !== 0 ){
    return depthDiff
  }

  function getEleDepth(ele){
    var style = ele.pstyle( 'z-index-compare' );
    if ( style.value === 'auto' ){
      return ele.isNode() ? 1 : 0
    }
    // 'manual'
    return 0
  }
  var eleDiff = getEleDepth(a) - getEleDepth(b);
  if ( eleDiff !== 0 ){
    return eleDiff
  }

  var zDiff = a.pstyle( 'z-index' ).value - b.pstyle( 'z-index' ).value;
  if ( zDiff !== 0 ){
    return zDiff
  }
  // compare indices in the core (order added to graph w/ last on top)
  return a.poolIndex() - b.poolIndex();
};

module.exports = zIndexSort;

},{}],36:[function(require,module,exports){
'use strict';

var is = require( '../is' );
var util = require( '../util' );
var Collection = require( '../collection' );
var Element = require( '../collection/element' );

var corefn = {
  add: function( opts ){

    var elements;
    var cy = this;

    // add the elements
    if( is.elementOrCollection( opts ) ){
      var eles = opts;

      if( eles._private.cy === cy ){ // same instance => just restore
        elements = eles.restore();

      } else { // otherwise, copy from json
        var jsons = [];

        for( var i = 0; i < eles.length; i++ ){
          var ele = eles[ i ];
          jsons.push( ele.json() );
        }

        elements = new Collection( cy, jsons );
      }
    }

    // specify an array of options
    else if( is.array( opts ) ){
      var jsons = opts;

      elements = new Collection( cy, jsons );
    }

    // specify via opts.nodes and opts.edges
    else if( is.plainObject( opts ) && (is.array( opts.nodes ) || is.array( opts.edges )) ){
      var elesByGroup = opts;
      var jsons = [];

      var grs = [ 'nodes', 'edges' ];
      for( var i = 0, il = grs.length; i < il; i++ ){
        var group = grs[ i ];
        var elesArray = elesByGroup[ group ];

        if( is.array( elesArray ) ){

          for( var j = 0, jl = elesArray.length; j < jl; j++ ){
            var json = util.extend( { group: group }, elesArray[ j ] );

            jsons.push( json );
          }
        }
      }

      elements = new Collection( cy, jsons );
    }

    // specify options for one element
    else {
      var json = opts;
      elements = (new Element( cy, json )).collection();
    }

    return elements;
  },

  remove: function( collection ){
    if( is.elementOrCollection( collection ) ){
      // already have right ref
    } else if( is.string( collection ) ){
      var selector = collection;
      collection = this.$( selector );
    }

    return collection.remove();
  },

  load: function( elements, onload, ondone ){
    var cy = this;

    cy.notifications( false );

    // remove old elements
    var oldEles = cy.mutableElements();
    if( oldEles.length > 0 ){
      oldEles.remove();
    }

    if( elements != null ){
      if( is.plainObject( elements ) || is.array( elements ) ){
        cy.add( elements );
      }
    }

    cy.one( 'layoutready', function( e ){
      cy.notifications( true );
      cy.trigger( e ); // we missed this event by turning notifications off, so pass it on

      cy.notify( {
        type: 'load',
        eles: cy.mutableElements()
      } );

      cy.one( 'load', onload );
      cy.trigger( 'load' );
    } ).one( 'layoutstop', function(){
      cy.one( 'done', ondone );
      cy.trigger( 'done' );
    } );

    var layoutOpts = util.extend( {}, cy._private.options.layout );
    layoutOpts.eles = cy.elements();

    cy.layout( layoutOpts );

    return this;
  }
};

module.exports = corefn;

},{"../collection":29,"../collection/element":25,"../is":86,"../util":104}],37:[function(require,module,exports){
'use strict';

var define = require( '../define' );
var util = require( '../util' );
var is = require( '../is' );

var corefn = ({

  // pull in animation functions
  animate: define.animate(),
  animation: define.animation(),
  animated: define.animated(),
  clearQueue: define.clearQueue(),
  delay: define.delay(),
  delayAnimation: define.delayAnimation(),
  stop: define.stop(),

  addToAnimationPool: function( eles ){
    var cy = this;

    if( !cy.styleEnabled() ){ return; } // save cycles when no style used

    cy._private.aniEles.merge( eles );
  },

  stopAnimationLoop: function(){
    this._private.animationsRunning = false;
  },

  startAnimationLoop: function(){
    var cy = this;

    cy._private.animationsRunning = true;

    if( !cy.styleEnabled() ){ return; } // save cycles when no style used

    // NB the animation loop will exec in headless environments if style enabled
    // and explicit cy.destroy() is necessary to stop the loop

    function globalAnimationStep(){
      if( !cy._private.animationsRunning ){ return; }

      util.requestAnimationFrame( function animationStep( now ){
        handleElements( now );
        globalAnimationStep();
      } );
    }

    var renderer = cy.renderer();

    if( renderer && renderer.beforeRender ){ // let the renderer schedule animations
      renderer.beforeRender( function rendererAnimationStep( willDraw, now ){
        handleElements( now );
      }, renderer.beforeRenderPriorities.animations );
    } else { // manage the animation loop ourselves
      globalAnimationStep(); // first call
    }

    function handleElements( now ){
      var eles = cy._private.aniEles;
      var doneEles = [];

      function handleElement( ele, isCore ){
        var _p = ele._private;
        var current = _p.animation.current;
        var queue = _p.animation.queue;
        var ranAnis = false;

        // cancel all animations on display:none ele
        if( !isCore && ele.pstyle('display').value === 'none' ){
          // put all current and queue animations in this tick's current list
          // and empty the lists for the element
          current = current.splice( 0, current.length ).concat( queue.splice( 0, queue.length ) );

          // stop all animations
          for( var i = 0; i < current.length; i++ ){ current[i].stop(); }
        }

        // if nothing currently animating, get something from the queue
        if( current.length === 0 ){
          var next = queue.shift();

          if( next ){
            current.push( next );
          }
        }

        var callbacks = function( callbacks ){
          for( var j = callbacks.length - 1; j >= 0; j-- ){
            var cb = callbacks[ j ];

            cb();
          }

          callbacks.splice( 0, callbacks.length );
        };

        // step and remove if done
        for( var i = current.length - 1; i >= 0; i-- ){
          var ani = current[ i ];
          var ani_p = ani._private;

          if( ani_p.stopped ){
            current.splice( i, 1 );

            ani_p.hooked = false;
            ani_p.playing = false;
            ani_p.started = false;

            callbacks( ani_p.frames );

            continue;
          }

          if( !ani_p.playing && !ani_p.applying ){ continue; }

          // an apply() while playing shouldn't do anything
          if( ani_p.playing && ani_p.applying ){
            ani_p.applying = false;
          }

          if( !ani_p.started ){
            startAnimation( ele, ani, now );
          }

          step( ele, ani, now, isCore );

          if( is.fn( ani_p.step ) ){
            ani_p.step.call( ele, now );
          }

          if( ani_p.applying ){
            ani_p.applying = false;
          }

          callbacks( ani_p.frames );

          if( ani.completed() ){
            current.splice( i, 1 );

            ani_p.hooked = false;
            ani_p.playing = false;
            ani_p.started = false;

            callbacks( ani_p.completes );
          }

          ranAnis = true;
        }

        if( !isCore && current.length === 0 && queue.length === 0 ){
          doneEles.push( ele );
        }

        return ranAnis;
      } // handleElement

      // handle all eles
      var ranEleAni = false;
      for( var e = 0; e < eles.length; e++ ){
        var ele = eles[ e ];
        var handledThisEle = handleElement( ele );

        ranEleAni = ranEleAni || handledThisEle;
      } // each element

      var ranCoreAni = handleElement( cy, true );

      // notify renderer
      if( ranEleAni || ranCoreAni ){
        if( eles.length > 0 ){
          var updatedEles = eles.updateCompoundBounds().spawnSelf().merge( eles );

          cy.notify({
            type: 'draw',
            eles: updatedEles
          });
        } else {
          cy.notify({
            type: 'draw'
          });
        }
      }

      // remove elements from list of currently animating if its queues are empty
      eles.unmerge( doneEles );

      cy.trigger('step');

    } // handleElements

    function startAnimation( self, ani, now ){
      var isCore = is.core( self );
      var isEles = !isCore;
      var ele = self;
      var style = cy._private.style;
      var ani_p = ani._private;

      if( isEles ){
        var pos = ele._private.position;

        ani_p.startPosition = ani_p.startPosition || {
          x: pos.x,
          y: pos.y
        };

        ani_p.startStyle = ani_p.startStyle || style.getAnimationStartStyle( ele, ani_p.style );
      }

      if( isCore ){
        var pan = cy._private.pan;

        ani_p.startPan = ani_p.startPan || {
          x: pan.x,
          y: pan.y
        };

        ani_p.startZoom = ani_p.startZoom != null ? ani_p.startZoom : cy._private.zoom;
      }

      ani_p.started = true;
      ani_p.startTime = now - ani_p.progress * ani_p.duration;
    }

    function step( self, ani, now, isCore ){
      var style = cy._private.style;
      var isEles = !isCore;
      var _p = self._private;
      var ani_p = ani._private;
      var pEasing = ani_p.easing;
      var startTime = ani_p.startTime;

      if( !ani_p.easingImpl ){

        if( pEasing == null ){ // use default
          ani_p.easingImpl = easings[ 'linear' ];

        } else { // then define w/ name
          var easingVals;

          if( is.string( pEasing ) ){
            var easingProp = style.parse( 'transition-timing-function', pEasing );

            easingVals = easingProp.value;

          } else { // then assume preparsed array
            easingVals = pEasing;
          }

          var name, args;

          if( is.string( easingVals ) ){
            name = easingVals;
            args = [];
          } else {
            name = easingVals[1];
            args = easingVals.slice( 2 ).map( function( n ){ return +n; } );
          }

          if( args.length > 0 ){ // create with args
            if( name === 'spring' ){
              args.push( ani_p.duration ); // need duration to generate spring
            }

            ani_p.easingImpl = easings[ name ].apply( null, args );
          } else { // static impl by name
            ani_p.easingImpl = easings[ name ];
          }
        }

      }

      var easing = ani_p.easingImpl;
      var percent;

      if( ani_p.duration === 0 ){
        percent = 1;
      } else {
        percent = (now - startTime) / ani_p.duration;
      }

      if( ani_p.applying ){
        percent = ani_p.progress;
      }

      if( percent < 0 ){
        percent = 0;
      } else if( percent > 1 ){
        percent = 1;
      }

      if( ani_p.delay == null ){ // then update

        var startPos = ani_p.startPosition;
        var endPos = ani_p.position;
        var pos = _p.position;
        if( endPos && isEles ){
          if( valid( startPos.x, endPos.x ) ){
            pos.x = ease( startPos.x, endPos.x, percent, easing );
          }

          if( valid( startPos.y, endPos.y ) ){
            pos.y = ease( startPos.y, endPos.y, percent, easing );
          }

          self.trigger('position');
        }

        var startPan = ani_p.startPan;
        var endPan = ani_p.pan;
        var pan = _p.pan;
        var animatingPan = endPan != null && isCore;
        if( animatingPan ){
          if( valid( startPan.x, endPan.x ) ){
            pan.x = ease( startPan.x, endPan.x, percent, easing );
          }

          if( valid( startPan.y, endPan.y ) ){
            pan.y = ease( startPan.y, endPan.y, percent, easing );
          }

          self.trigger( 'pan' );
        }

        var startZoom = ani_p.startZoom;
        var endZoom = ani_p.zoom;
        var animatingZoom = endZoom != null && isCore;
        if( animatingZoom ){
          if( valid( startZoom, endZoom ) ){
            _p.zoom = ease( startZoom, endZoom, percent, easing );
          }

          self.trigger( 'zoom' );
        }

        if( animatingPan || animatingZoom ){
          self.trigger( 'viewport' );
        }

        var props = ani_p.style;
        if( props && props.length > 0 && isEles ){
          for( var i = 0; i < props.length; i++ ){
            var prop = props[ i ];
            var name = prop.name;
            var end = prop;

            var start = ani_p.startStyle[ name ];
            var easedVal = ease( start, end, percent, easing );

            style.overrideBypass( self, name, easedVal );
          } // for props

          self.trigger('style');

        } // if

      }

      ani_p.progress = percent;

      return percent;
    }

    function valid( start, end ){
      if( start == null || end == null ){
        return false;
      }

      if( is.number( start ) && is.number( end ) ){
        return true;
      } else if( (start) && (end) ){
        return true;
      }

      return false;
    }

    // assumes p0 = 0, p3 = 1
    function evalCubicBezier( p1, p2, t ){
      var one_t = 1 - t;
      var tsq = t * t;

      return ( 3 * one_t * one_t * t * p1 ) + ( 3 * one_t * tsq * p2 ) + tsq * t;
    }

    function cubicBezier( p1, p2 ){
      return function( start, end, percent ){
        return start + (end - start) * evalCubicBezier( p1, p2, percent );
      };
    }

    /*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
    /* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
       then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
    var generateSpringRK4 = (function(){
      function springAccelerationForState( state ){
        return (-state.tension * state.x) - (state.friction * state.v);
      }

      function springEvaluateStateWithDerivative( initialState, dt, derivative ){
        var state = {
          x: initialState.x + derivative.dx * dt,
          v: initialState.v + derivative.dv * dt,
          tension: initialState.tension,
          friction: initialState.friction
        };

        return { dx: state.v, dv: springAccelerationForState( state ) };
      }

      function springIntegrateState( state, dt ){
        var a = {
          dx: state.v,
          dv: springAccelerationForState( state )
        },
        b = springEvaluateStateWithDerivative( state, dt * 0.5, a ),
        c = springEvaluateStateWithDerivative( state, dt * 0.5, b ),
        d = springEvaluateStateWithDerivative( state, dt, c ),
        dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
        dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);

        state.x = state.x + dxdt * dt;
        state.v = state.v + dvdt * dt;

        return state;
      }

      return function springRK4Factory( tension, friction, duration ){

        var initState = {
          x: -1,
          v: 0,
          tension: null,
          friction: null
        },
        path = [0],
        time_lapsed = 0,
        tolerance = 1 / 10000,
        DT = 16 / 1000,
        have_duration, dt, last_state;

        tension = parseFloat( tension ) || 500;
        friction = parseFloat( friction ) || 20;
        duration = duration || null;

        initState.tension = tension;
        initState.friction = friction;

        have_duration = duration !== null;

        /* Calculate the actual time it takes for this animation to complete with the provided conditions. */
        if( have_duration ){
          /* Run the simulation without a duration. */
          time_lapsed = springRK4Factory( tension, friction );
          /* Compute the adjusted time delta. */
          dt = time_lapsed / duration * DT;
        } else {
          dt = DT;
        }

        while( true ){
          /* Next/step function .*/
          last_state = springIntegrateState( last_state || initState, dt );
          /* Store the position. */
          path.push( 1 + last_state.x );
          time_lapsed += 16;
          /* If the change threshold is reached, break. */
          if( !(Math.abs( last_state.x ) > tolerance && Math.abs( last_state.v ) > tolerance) ){
            break;
          }
        }

        /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
           computed path and returns a snapshot of the position according to a given percentComplete. */
        return !have_duration ? time_lapsed : function( percentComplete ){ return path[ (percentComplete * (path.length - 1)) | 0 ]; };
      };
    }());

    var easings = {
      'linear': function( start, end, percent ){
        return start + (end - start) * percent;
      },

      // default easings
      'ease': cubicBezier( 0.25, 0.1, 0.25, 1 ),
      'ease-in': cubicBezier( 0.42, 0, 1, 1 ),
      'ease-out': cubicBezier( 0, 0, 0.58, 1 ),
      'ease-in-out': cubicBezier( 0.42, 0, 0.58, 1 ),

      // sine
      'ease-in-sine': cubicBezier( 0.47, 0, 0.745, 0.715 ),
      'ease-out-sine': cubicBezier( 0.39, 0.575, 0.565, 1 ),
      'ease-in-out-sine': cubicBezier( 0.445, 0.05, 0.55, 0.95 ),

      // quad
      'ease-in-quad': cubicBezier( 0.55, 0.085, 0.68, 0.53 ),
      'ease-out-quad': cubicBezier( 0.25, 0.46, 0.45, 0.94 ),
      'ease-in-out-quad': cubicBezier( 0.455, 0.03, 0.515, 0.955 ),

      // cubic
      'ease-in-cubic': cubicBezier( 0.55, 0.055, 0.675, 0.19 ),
      'ease-out-cubic': cubicBezier( 0.215, 0.61, 0.355, 1 ),
      'ease-in-out-cubic': cubicBezier( 0.645, 0.045, 0.355, 1 ),

      // quart
      'ease-in-quart': cubicBezier( 0.895, 0.03, 0.685, 0.22 ),
      'ease-out-quart': cubicBezier( 0.165, 0.84, 0.44, 1 ),
      'ease-in-out-quart': cubicBezier( 0.77, 0, 0.175, 1 ),

      // quint
      'ease-in-quint': cubicBezier( 0.755, 0.05, 0.855, 0.06 ),
      'ease-out-quint': cubicBezier( 0.23, 1, 0.32, 1 ),
      'ease-in-out-quint': cubicBezier( 0.86, 0, 0.07, 1 ),

      // expo
      'ease-in-expo': cubicBezier( 0.95, 0.05, 0.795, 0.035 ),
      'ease-out-expo': cubicBezier( 0.19, 1, 0.22, 1 ),
      'ease-in-out-expo': cubicBezier( 1, 0, 0, 1 ),

      // circ
      'ease-in-circ': cubicBezier( 0.6, 0.04, 0.98, 0.335 ),
      'ease-out-circ': cubicBezier( 0.075, 0.82, 0.165, 1 ),
      'ease-in-out-circ': cubicBezier( 0.785, 0.135, 0.15, 0.86 ),


      // user param easings...

      'spring': function( tension, friction, duration ){
        if( duration === 0 ){ // can't get a spring w/ duration 0
          return easings.linear; // duration 0 => jump to end so impl doesn't matter
        }

        var spring = generateSpringRK4( tension, friction, duration );

        return function( start, end, percent ){
          return start + (end - start) * spring( percent );
        };
      },

      'cubic-bezier': function( x1, y1, x2, y2 ){
        return cubicBezier( x1, y1, x2, y2 );
      }
    };

    function ease( startProp, endProp, percent, easingFn ){
      if( percent < 0 ){
        percent = 0;
      } else if( percent > 1 ){
        percent = 1;
      }

      var start, end;

      if( startProp.pfValue != null || startProp.value != null ){
        start = startProp.pfValue != null ? startProp.pfValue : startProp.value;
      } else {
        start = startProp;
      }

      if( endProp.pfValue != null || endProp.value != null ){
        end = endProp.pfValue != null ? endProp.pfValue : endProp.value;
      } else {
        end = endProp;
      }

      if( is.number( start ) && is.number( end ) ){
        return easingFn( start, end, percent );

      } else if( is.array( start ) && is.array( end ) ){
        var easedArr = [];

        for( var i = 0; i < end.length; i++ ){
          var si = start[ i ];
          var ei = end[ i ];

          if( si != null && ei != null ){
            var val = easingFn( si, ei, percent );

            if( startProp.roundValue ){ val = Math.round( val ); }

            easedArr.push( val );
          } else {
            easedArr.push( ei );
          }
        }

        return easedArr;
      }

      return undefined;
    }

  }

});

module.exports = corefn;

},{"../define":47,"../is":86,"../util":104}],38:[function(require,module,exports){
'use strict';

var define = require( '../define' );

var corefn = ({
  on: define.on(), // .on( events [, selector] [, data], handler)
  one: define.on( { unbindSelfOnTrigger: true } ),
  once: define.on( { unbindAllBindersOnTrigger: true } ),
  off: define.off(), // .off( events [, selector] [, handler] )
  trigger: define.trigger() // .trigger( events [, extraParams] )
});

define.eventAliasesOn( corefn );

module.exports = corefn;

},{"../define":47}],39:[function(require,module,exports){
'use strict';

var corefn = ({

  png: function( options ){
    var renderer = this._private.renderer;
    options = options || {};

    return renderer.png( options );
  },

  jpg: function( options ){
    var renderer = this._private.renderer;
    options = options || {};

    options.bg = options.bg || '#fff';

    return renderer.jpg( options );
  }

});

corefn.jpeg = corefn.jpg;

module.exports = corefn;

},{}],40:[function(require,module,exports){
'use strict';

var window = require( '../window' );
var util = require( '../util' );
var Collection = require( '../collection' );
var is = require( '../is' );
var Promise = require( '../promise' );
var define = require( '../define' );

var Core = function( opts ){
  var cy = this;

  opts = util.extend( {}, opts );

  var container = opts.container;

  // allow for passing a wrapped jquery object
  // e.g. cytoscape({ container: $('#cy') })
  if( container && !is.htmlElement( container ) && is.htmlElement( container[0] ) ){
    container = container[0];
  }

  var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery
  reg = reg || {};

  if( reg && reg.cy ){
    reg.cy.destroy();

    reg = {}; // old instance => replace reg completely
  }

  var readies = reg.readies = reg.readies || [];

  if( container ){ container._cyreg = reg; } // make sure container assoc'd reg points to this cy
  reg.cy = cy;

  var head = window !== undefined && container !== undefined && !opts.headless;
  var options = opts;
  options.layout = util.extend( { name: head ? 'grid' : 'null' }, options.layout );
  options.renderer = util.extend( { name: head ? 'canvas' : 'null' }, options.renderer );

  var defVal = function( def, val, altVal ){
    if( val !== undefined ){
      return val;
    } else if( altVal !== undefined ){
      return altVal;
    } else {
      return def;
    }
  };

  var _p = this._private = {
    container: container, // html dom ele container
    ready: false, // whether ready has been triggered
    initrender: false, // has initrender has been triggered
    options: options, // cached options
    elements: new Collection( this ), // elements in the graph
    listeners: [], // list of listeners
    aniEles: new Collection( this ), // elements being animated
    scratch: {}, // scratch object for core
    layout: null,
    renderer: null,
    destroyed: false, // whether destroy was called
    notificationsEnabled: true, // whether notifications are sent to the renderer
    minZoom: 1e-50,
    maxZoom: 1e50,
    zoomingEnabled: defVal( true, options.zoomingEnabled ),
    userZoomingEnabled: defVal( true, options.userZoomingEnabled ),
    panningEnabled: defVal( true, options.panningEnabled ),
    userPanningEnabled: defVal( true, options.userPanningEnabled ),
    boxSelectionEnabled: defVal( true, options.boxSelectionEnabled ),
    autolock: defVal( false, options.autolock, options.autolockNodes ),
    autoungrabify: defVal( false, options.autoungrabify, options.autoungrabifyNodes ),
    autounselectify: defVal( false, options.autounselectify ),
    styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,
    zoom: is.number( options.zoom ) ? options.zoom : 1,
    pan: {
      x: is.plainObject( options.pan ) && is.number( options.pan.x ) ? options.pan.x : 0,
      y: is.plainObject( options.pan ) && is.number( options.pan.y ) ? options.pan.y : 0
    },
    animation: { // object for currently-running animations
      current: [],
      queue: []
    },
    hasCompoundNodes: false
  };

  // set selection type
  var selType = options.selectionType;
  if( selType === undefined || (selType !== 'additive' && selType !== 'single') ){
    // then set default

    _p.selectionType = 'single';
  } else {
    _p.selectionType = selType;
  }

  // init zoom bounds
  if( is.number( options.minZoom ) && is.number( options.maxZoom ) && options.minZoom < options.maxZoom ){
    _p.minZoom = options.minZoom;
    _p.maxZoom = options.maxZoom;
  } else if( is.number( options.minZoom ) && options.maxZoom === undefined ){
    _p.minZoom = options.minZoom;
  } else if( is.number( options.maxZoom ) && options.minZoom === undefined ){
    _p.maxZoom = options.maxZoom;
  }

  var loadExtData = function( extData, next ){
    var anyIsPromise = extData.some( is.promise );

    if( anyIsPromise ){
      return Promise.all( extData ).then( next ); // load all data asynchronously, then exec rest of init
    } else {
      next( extData ); // exec synchronously for convenience
    }
  };

  // create the renderer
  cy.initRenderer( util.extend( {
    hideEdgesOnViewport: options.hideEdgesOnViewport,
    textureOnViewport: options.textureOnViewport,
    wheelSensitivity: is.number( options.wheelSensitivity ) && options.wheelSensitivity > 0 ? options.wheelSensitivity : 1,
    motionBlur: options.motionBlur === undefined ? false : options.motionBlur, // off by default
    motionBlurOpacity: options.motionBlurOpacity === undefined ? 0.05 : options.motionBlurOpacity,
    pixelRatio: is.number( options.pixelRatio ) && options.pixelRatio > 0 ? options.pixelRatio : undefined,
    desktopTapThreshold: options.desktopTapThreshold === undefined ? 4 : options.desktopTapThreshold,
    touchTapThreshold: options.touchTapThreshold === undefined ? 8 : options.touchTapThreshold
  }, options.renderer ) );

  loadExtData([ options.style, options.elements ], function( thens ){
    var initStyle = thens[0];
    var initEles = thens[1];

    // init style
    if( _p.styleEnabled ){
      cy.setStyle( initStyle );
    }

    // trigger the passed function for the `initrender` event
    if( options.initrender ){
      cy.on( 'initrender', options.initrender );
      cy.on( 'initrender', function(){
        _p.initrender = true;
      } );
    }

    // initial load
    cy.load( initEles, function(){ // onready
      cy.startAnimationLoop();
      _p.ready = true;

      // if a ready callback is specified as an option, the bind it
      if( is.fn( options.ready ) ){
        cy.on( 'ready', options.ready );
      }

      // bind all the ready handlers registered before creating this instance
      for( var i = 0; i < readies.length; i++ ){
        var fn = readies[ i ];
        cy.on( 'ready', fn );
      }
      if( reg ){ reg.readies = []; } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc

      cy.trigger( 'ready' );
    }, options.done );

  } );
};

var corefn = Core.prototype; // short alias

util.extend( corefn, {
  instanceString: function(){
    return 'core';
  },

  isReady: function(){
    return this._private.ready;
  },

  isDestroyed: function(){
    return this._private.destroyed;
  },

  ready: function( fn ){
    if( this.isReady() ){
      this.trigger( 'ready', [], fn ); // just calls fn as though triggered via ready event
    } else {
      this.on( 'ready', fn );
    }

    return this;
  },

  initrender: function(){
    return this._private.initrender;
  },

  destroy: function(){
    var cy = this;
    if( cy.isDestroyed() ) return;

    cy.stopAnimationLoop();

    cy.destroyRenderer();

    this.trigger( 'destroy' );

    cy._private.destroyed = true;

    return cy;
  },

  hasElementWithId: function( id ){
    return this._private.elements.hasElementWithId( id );
  },

  getElementById: function( id ){
    return this._private.elements.getElementById( id );
  },

  selectionType: function(){
    return this._private.selectionType;
  },

  hasCompoundNodes: function(){
    return this._private.hasCompoundNodes;
  },

  headless: function(){
    return this._private.options.renderer.name === 'null';
  },

  styleEnabled: function(){
    return this._private.styleEnabled;
  },

  addToPool: function( eles ){
    this._private.elements.merge( eles );

    return this; // chaining
  },

  removeFromPool: function( eles ){
    this._private.elements.unmerge( eles );

    return this;
  },

  container: function(){
    return this._private.container;
  },

  options: function(){
    return util.copy( this._private.options );
  },

  json: function( obj ){
    var cy = this;
    var _p = cy._private;
    var eles = cy.mutableElements();

    if( is.plainObject( obj ) ){ // set

      cy.startBatch();

      if( obj.elements ){
        var idInJson = {};

        var updateEles = function( jsons, gr ){
          for( var i = 0; i < jsons.length; i++ ){
            var json = jsons[ i ];
            var id = json.data.id;
            var ele = cy.getElementById( id );

            idInJson[ id ] = true;

            if( ele.length !== 0 ){ // existing element should be updated
              ele.json( json );
            } else { // otherwise should be added
              if( gr ){
                cy.add( util.extend( { group: gr }, json ) );
              } else {
                cy.add( json );
              }
            }
          }
        };

        if( is.array( obj.elements ) ){ // elements: []
          updateEles( obj.elements );

        } else { // elements: { nodes: [], edges: [] }
          var grs = [ 'nodes', 'edges' ];
          for( var i = 0; i < grs.length; i++ ){
            var gr = grs[ i ];
            var elements = obj.elements[ gr ];

            if( is.array( elements ) ){
              updateEles( elements, gr );
            }
          }
        }

        // elements not specified in json should be removed
        eles.stdFilter( function( ele ){
          return !idInJson[ ele.id() ];
        } ).remove();
      }

      if( obj.style ){
        cy.style( obj.style );
      }

      if( obj.zoom != null && obj.zoom !== _p.zoom ){
        cy.zoom( obj.zoom );
      }

      if( obj.pan ){
        if( obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y ){
          cy.pan( obj.pan );
        }
      }

      var fields = [
        'minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled',
        'panningEnabled', 'userPanningEnabled',
        'boxSelectionEnabled',
        'autolock', 'autoungrabify', 'autounselectify'
      ];

      for( var i = 0; i < fields.length; i++ ){
        var f = fields[ i ];

        if( obj[ f ] != null ){
          cy[ f ]( obj[ f ] );
        }
      }

      cy.endBatch();

      return this; // chaining
    } else if( obj === undefined ){ // get
      var json = {};

      json.elements = {};
      eles.forEach( function( ele ){
        var group = ele.group();

        if( !json.elements[ group ] ){
          json.elements[ group ] = [];
        }

        json.elements[ group ].push( ele.json() );
      } );

      if( this._private.styleEnabled ){
        json.style = cy.style().json();
      }

      json.zoomingEnabled = cy._private.zoomingEnabled;
      json.userZoomingEnabled = cy._private.userZoomingEnabled;
      json.zoom = cy._private.zoom;
      json.minZoom = cy._private.minZoom;
      json.maxZoom = cy._private.maxZoom;
      json.panningEnabled = cy._private.panningEnabled;
      json.userPanningEnabled = cy._private.userPanningEnabled;
      json.pan = util.copy( cy._private.pan );
      json.boxSelectionEnabled = cy._private.boxSelectionEnabled;
      json.renderer = util.copy( cy._private.options.renderer );
      json.hideEdgesOnViewport = cy._private.options.hideEdgesOnViewport;
      json.textureOnViewport = cy._private.options.textureOnViewport;
      json.wheelSensitivity = cy._private.options.wheelSensitivity;
      json.motionBlur = cy._private.options.motionBlur;

      return json;
    }
  },

  scratch: define.data( {
    field: 'scratch',
    bindingEvent: 'scratch',
    allowBinding: true,
    allowSetting: true,
    settingEvent: 'scratch',
    settingTriggersEvent: true,
    triggerFnName: 'trigger',
    allowGetting: true
  } ),

  removeScratch: define.removeData( {
    field: 'scratch',
    event: 'scratch',
    triggerFnName: 'trigger',
    triggerEvent: true
  } )

} );

[
  require( './add-remove' ),
  require( './animation' ),
  require( './events' ),
  require( './export' ),
  require( './layout' ),
  require( './notification' ),
  require( './renderer' ),
  require( './search' ),
  require( './style' ),
  require( './viewport' )
].forEach( function( props ){
  util.extend( corefn, props );
} );

module.exports = Core;

},{"../collection":29,"../define":47,"../is":86,"../promise":89,"../util":104,"../window":111,"./add-remove":36,"./animation":37,"./events":38,"./export":39,"./layout":41,"./notification":42,"./renderer":43,"./search":44,"./style":45,"./viewport":46}],41:[function(require,module,exports){
'use strict';

var util = require( '../util' );
var is = require( '../is' );

var corefn = ({

  layout: function( params ){
    var layout = this._private.prevLayout = ( params == null ? this._private.prevLayout : this.makeLayout( params ) );

    layout.run();

    return this; // chaining
  },

  makeLayout: function( options ){
    var cy = this;

    if( options == null ){
      util.error( 'Layout options must be specified to make a layout' );
      return;
    }

    if( options.name == null ){
      util.error( 'A `name` must be specified to make a layout' );
      return;
    }

    var name = options.name;
    var Layout = cy.extension( 'layout', name );

    if( Layout == null ){
      util.error( 'Can not apply layout: No such layout `' + name + '` found; did you include its JS file?' );
      return;
    }

    var eles;
    if( is.string( options.eles ) ){
      eles = cy.$( options.eles );
    } else {
      eles = options.eles != null ? options.eles : cy.$();
    }

    var layout = new Layout( util.extend( {}, options, {
      cy: cy,
      eles: eles
    } ) );

    return layout;
  }

});

corefn.createLayout = corefn.makeLayout;

module.exports = corefn;

},{"../is":86,"../util":104}],42:[function(require,module,exports){
'use strict';

var corefn = ({
  notify: function( params ){
    var _p = this._private;

    if( _p.batchingNotify ){
      var bEles = _p.batchNotifyEles;
      var bTypes = _p.batchNotifyTypes;

      if( params.eles ){
        bEles.merge( params.eles );
      }

      if( !bTypes.ids[ params.type ] ){
        bTypes.push( params.type );
        bTypes.ids[ params.type ] = true;
      }

      return; // notifications are disabled during batching
    }

    if( !_p.notificationsEnabled ){ return; } // exit on disabled

    var renderer = this.renderer();

    // exit if destroy() called on core or renderer in between frames #1499 #1528
    if( this.isDestroyed() || !renderer ){ return; }

    renderer.notify( params );
  },

  notifications: function( bool ){
    var p = this._private;

    if( bool === undefined ){
      return p.notificationsEnabled;
    } else {
      p.notificationsEnabled = bool ? true : false;
    }
  },

  noNotifications: function( callback ){
    this.notifications( false );
    callback();
    this.notifications( true );
  },

  startBatch: function(){
    var _p = this._private;

    if( _p.batchCount == null ){
      _p.batchCount = 0;
    }

    if( _p.batchCount === 0 ){
      _p.batchingStyle = _p.batchingNotify = true;
      _p.batchStyleEles = this.collection();
      _p.batchNotifyEles = this.collection();
      _p.batchNotifyTypes = [];
      _p.batchNotifyTypes.ids = {};
    }

    _p.batchCount++;

    return this;
  },

  endBatch: function(){
    var _p = this._private;

    _p.batchCount--;

    if( _p.batchCount === 0 ){
      // update style for dirty eles
      _p.batchingStyle = false;
      _p.batchStyleEles.updateStyle();

      // notify the renderer of queued eles and event types
      _p.batchingNotify = false;
      this.notify( {
        type: _p.batchNotifyTypes,
        eles: _p.batchNotifyEles
      } );
    }

    return this;
  },

  batch: function( callback ){
    this.startBatch();
    callback();
    this.endBatch();

    return this;
  },

  // for backwards compatibility
  batchData: function( map ){
    var cy = this;

    return this.batch( function(){
      var ids = Object.keys( map );

      for( var i = 0; i < ids.length; i++ ){
        var id = ids[i];
        var data = map[ id ];
        var ele = cy.getElementById( id );

        ele.data( data );
      }
    } );
  }
});

module.exports = corefn;

},{}],43:[function(require,module,exports){
'use strict';

var util = require( '../util' );

var corefn = ({

  renderTo: function( context, zoom, pan, pxRatio ){
    var r = this._private.renderer;

    r.renderTo( context, zoom, pan, pxRatio );
    return this;
  },

  renderer: function(){
    return this._private.renderer;
  },

  forceRender: function(){
    this.notify( {
      type: 'draw'
    } );

    return this;
  },

  resize: function(){
    this.invalidateSize();

    this.notify( {
      type: 'resize'
    } );

    this.trigger( 'resize' );

    return this;
  },

  initRenderer: function( options ){
    var cy = this;

    var RendererProto = cy.extension( 'renderer', options.name );
    if( RendererProto == null ){
      util.error( 'Can not initialise: No such renderer `%s` found; did you include its JS file?', options.name );
      return;
    }

    var rOpts = util.extend( {}, options, {
      cy: cy
    } );

    cy._private.renderer = new RendererProto( rOpts );
  },

  destroyRenderer: function(){
    var cy = this;

    cy.notify( { type: 'destroy' } ); // destroy the renderer

    var domEle = cy.container();
    if( domEle ){
      domEle._cyreg = null;

      while( domEle.childNodes.length > 0 ){
        domEle.removeChild( domEle.childNodes[0] );
      }
    }

    cy._private.renderer = null; // to be extra safe, remove the ref
  },

  onRender: function( fn ){
    return this.on('render', fn);
  },

  offRender: function( fn ){
    return this.off('render', fn);
  }

});

corefn.invalidateDimensions = corefn.resize;

module.exports = corefn;

},{"../util":104}],44:[function(require,module,exports){
'use strict';

var is = require( '../is' );
var Collection = require( '../collection' );

var corefn = ({

  // get a collection
  // - empty collection on no args
  // - collection of elements in the graph on selector arg
  // - guarantee a returned collection when elements or collection specified
  collection: function( eles, opts ){

    if( is.string( eles ) ){
      return this.$( eles );

    } else if( is.elementOrCollection( eles ) ){
      return eles.collection();

    } else if( is.array( eles ) ){
      return new Collection( this, eles, opts );
    }

    return new Collection( this );
  },

  nodes: function( selector ){
    var nodes = this.$( function(){
      return this.isNode();
    } );

    if( selector ){
      return nodes.filter( selector );
    }

    return nodes;
  },

  edges: function( selector ){
    var edges = this.$( function(){
      return this.isEdge();
    } );

    if( selector ){
      return edges.filter( selector );
    }

    return edges;
  },

  // search the graph like jQuery
  $: function( selector ){
    var eles = this._private.elements;

    if( selector ){
      return eles.filter( selector );
    } else {
      return eles.spawnSelf();
    }
  },

  mutableElements: function(){
    return this._private.elements;
  }

});

// aliases
corefn.elements = corefn.filter = corefn.$;

module.exports = corefn;

},{"../collection":29,"../is":86}],45:[function(require,module,exports){
'use strict';

var is = require( '../is' );
var Style = require( '../style' );

var corefn = ({

  style: function( newStyle ){
    if( newStyle ){
      var s = this.setStyle( newStyle );

      s.update();
    }

    return this._private.style;
  },

  setStyle: function( style ){
    var _p = this._private;

    if( is.stylesheet( style ) ){
      _p.style = style.generateStyle( this );

    } else if( is.array( style ) ){
      _p.style = Style.fromJson( this, style );

    } else if( is.string( style ) ){
      _p.style = Style.fromString( this, style );

    } else {
      _p.style = Style( this );
    }

    return _p.style;
  }
});

module.exports = corefn;

},{"../is":86,"../style":96}],46:[function(require,module,exports){
'use strict';

var is = require( '../is' );

var corefn = ({

  autolock: function( bool ){
    if( bool !== undefined ){
      this._private.autolock = bool ? true : false;
    } else {
      return this._private.autolock;
    }

    return this; // chaining
  },

  autoungrabify: function( bool ){
    if( bool !== undefined ){
      this._private.autoungrabify = bool ? true : false;
    } else {
      return this._private.autoungrabify;
    }

    return this; // chaining
  },

  autounselectify: function( bool ){
    if( bool !== undefined ){
      this._private.autounselectify = bool ? true : false;
    } else {
      return this._private.autounselectify;
    }

    return this; // chaining
  },

  panningEnabled: function( bool ){
    if( bool !== undefined ){
      this._private.panningEnabled = bool ? true : false;
    } else {
      return this._private.panningEnabled;
    }

    return this; // chaining
  },

  userPanningEnabled: function( bool ){
    if( bool !== undefined ){
      this._private.userPanningEnabled = bool ? true : false;
    } else {
      return this._private.userPanningEnabled;
    }

    return this; // chaining
  },

  zoomingEnabled: function( bool ){
    if( bool !== undefined ){
      this._private.zoomingEnabled = bool ? true : false;
    } else {
      return this._private.zoomingEnabled;
    }

    return this; // chaining
  },

  userZoomingEnabled: function( bool ){
    if( bool !== undefined ){
      this._private.userZoomingEnabled = bool ? true : false;
    } else {
      return this._private.userZoomingEnabled;
    }

    return this; // chaining
  },

  boxSelectionEnabled: function( bool ){
    if( bool !== undefined ){
      this._private.boxSelectionEnabled = bool ? true : false;
    } else {
      return this._private.boxSelectionEnabled;
    }

    return this; // chaining
  },

  pan: function(){
    var args = arguments;
    var pan = this._private.pan;
    var dim, val, dims, x, y;

    switch( args.length ){
    case 0: // .pan()
      return pan;

    case 1:

      if( is.string( args[0] ) ){ // .pan('x')
        dim = args[0];
        return pan[ dim ];

      } else if( is.plainObject( args[0] ) ){ // .pan({ x: 0, y: 100 })
        if( !this._private.panningEnabled ){
          return this;
        }

        dims = args[0];
        x = dims.x;
        y = dims.y;

        if( is.number( x ) ){
          pan.x = x;
        }

        if( is.number( y ) ){
          pan.y = y;
        }

        this.trigger( 'pan viewport' );
      }
      break;

    case 2: // .pan('x', 100)
      if( !this._private.panningEnabled ){
        return this;
      }

      dim = args[0];
      val = args[1];

      if( (dim === 'x' || dim === 'y') && is.number( val ) ){
        pan[ dim ] = val;
      }

      this.trigger( 'pan viewport' );
      break;

    default:
      break; // invalid
    }

    this.notify( { // notify the renderer that the viewport changed
      type: 'viewport'
    } );

    return this; // chaining
  },

  panBy: function( params ){
    var args = arguments;
    var pan = this._private.pan;
    var dim, val, dims, x, y;

    if( !this._private.panningEnabled ){
      return this;
    }

    switch( args.length ){
    case 1:

      if( is.plainObject( args[0] ) ){ // .panBy({ x: 0, y: 100 })
        dims = args[0];
        x = dims.x;
        y = dims.y;

        if( is.number( x ) ){
          pan.x += x;
        }

        if( is.number( y ) ){
          pan.y += y;
        }

        this.trigger( 'pan viewport' );
      }
      break;

    case 2: // .panBy('x', 100)
      dim = args[0];
      val = args[1];

      if( (dim === 'x' || dim === 'y') && is.number( val ) ){
        pan[ dim ] += val;
      }

      this.trigger( 'pan viewport' );
      break;

    default:
      break; // invalid
    }

    this.notify( { // notify the renderer that the viewport changed
      type: 'viewport'
    } );

    return this; // chaining
  },

  fit: function( elements, padding ){
    var viewportState = this.getFitViewport( elements, padding );

    if( viewportState ){
      var _p = this._private;
      _p.zoom = viewportState.zoom;
      _p.pan = viewportState.pan;

      this.trigger( 'pan zoom viewport' );

      this.notify( { // notify the renderer that the viewport changed
        type: 'viewport'
      } );
    }

    return this; // chaining
  },

  getFitViewport: function( elements, padding ){
    if( is.number( elements ) && padding === undefined ){ // elements is optional
      padding = elements;
      elements = undefined;
    }

    if( !this._private.panningEnabled || !this._private.zoomingEnabled ){
      return;
    }

    var bb;

    if( is.string( elements ) ){
      var sel = elements;
      elements = this.$( sel );

    } else if( is.boundingBox( elements ) ){ // assume bb
      var bbe = elements;
      bb = {
        x1: bbe.x1,
        y1: bbe.y1,
        x2: bbe.x2,
        y2: bbe.y2
      };

      bb.w = bb.x2 - bb.x1;
      bb.h = bb.y2 - bb.y1;

    } else if( !is.elementOrCollection( elements ) ){
      elements = this.mutableElements();
    }

    bb = bb || elements.boundingBox();

    var w = this.width();
    var h = this.height();
    var zoom;
    padding = is.number( padding ) ? padding : 0;

    if( !isNaN( w ) && !isNaN( h ) && w > 0 && h > 0 && !isNaN( bb.w ) && !isNaN( bb.h ) &&  bb.w > 0 && bb.h > 0 ){
      zoom = Math.min( (w - 2 * padding) / bb.w, (h - 2 * padding) / bb.h );

      // crop zoom
      zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
      zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;

      var pan = { // now pan to middle
        x: (w - zoom * ( bb.x1 + bb.x2 )) / 2,
        y: (h - zoom * ( bb.y1 + bb.y2 )) / 2
      };

      return {
        zoom: zoom,
        pan: pan
      };
    }

    return;
  },

  minZoom: function( zoom ){
    if( zoom === undefined ){
      return this._private.minZoom;
    } else if( is.number( zoom ) ){
      this._private.minZoom = zoom;
    }

    return this;
  },

  maxZoom: function( zoom ){
    if( zoom === undefined ){
      return this._private.maxZoom;
    } else if( is.number( zoom ) ){
      this._private.maxZoom = zoom;
    }

    return this;
  },

  zoom: function( params ){
    var pos; // in rendered px
    var zoom;

    if( params === undefined ){ // then get the zoom
      return this._private.zoom;

    } else if( is.number( params ) ){ // then set the zoom
      zoom = params;

    } else if( is.plainObject( params ) ){ // then zoom about a point
      zoom = params.level;

      if( params.position ){
        var p = params.position;
        var pan = this._private.pan;
        var z = this._private.zoom;

        pos = { // convert to rendered px
          x: p.x * z + pan.x,
          y: p.y * z + pan.y
        };
      } else if( params.renderedPosition ){
        pos = params.renderedPosition;
      }

      if( pos && !this._private.panningEnabled ){
        return this; // panning disabled
      }
    }

    if( !this._private.zoomingEnabled ){
      return this; // zooming disabled
    }

    if( !is.number( zoom ) || ( pos && (!is.number( pos.x ) || !is.number( pos.y )) ) ){
      return this; // can't zoom with invalid params
    }

    // crop zoom
    zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
    zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;

    if( pos ){ // set zoom about position
      var pan1 = this._private.pan;
      var zoom1 = this._private.zoom;
      var zoom2 = zoom;

      var pan2 = {
        x: -zoom2 / zoom1 * (pos.x - pan1.x) + pos.x,
        y: -zoom2 / zoom1 * (pos.y - pan1.y) + pos.y
      };

      this._private.zoom = zoom;
      this._private.pan = pan2;

      var posChanged = pan1.x !== pan2.x || pan1.y !== pan2.y;
      this.trigger( ' zoom ' + (posChanged ? ' pan ' : '') + ' viewport ' );

    } else { // just set the zoom
      this._private.zoom = zoom;
      this.trigger( 'zoom viewport' );
    }

    this.notify( { // notify the renderer that the viewport changed
      type: 'viewport'
    } );

    return this; // chaining
  },

  viewport: function( opts ){
    var _p = this._private;
    var zoomDefd = true;
    var panDefd = true;
    var events = []; // to trigger
    var zoomFailed = false;
    var panFailed = false;

    if( !opts ){ return this; }
    if( !is.number( opts.zoom ) ){ zoomDefd = false; }
    if( !is.plainObject( opts.pan ) ){ panDefd = false; }
    if( !zoomDefd && !panDefd ){ return this; }

    if( zoomDefd ){
      var z = opts.zoom;

      if( z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled ){
        zoomFailed = true;

      } else {
        _p.zoom = z;

        events.push( 'zoom' );
      }
    }

    if( panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled ){
      var p = opts.pan;

      if( is.number( p.x ) ){
        _p.pan.x = p.x;
        panFailed = false;
      }

      if( is.number( p.y ) ){
        _p.pan.y = p.y;
        panFailed = false;
      }

      if( !panFailed ){
        events.push( 'pan' );
      }
    }

    if( events.length > 0 ){
      events.push( 'viewport' );
      this.trigger( events.join( ' ' ) );

      this.notify( {
        type: 'viewport'
      } );
    }

    return this; // chaining
  },

  center: function( elements ){
    var pan = this.getCenterPan( elements );

    if( pan ){
      this._private.pan = pan;

      this.trigger( 'pan viewport' );

      this.notify( { // notify the renderer that the viewport changed
        type: 'viewport'
      } );
    }

    return this; // chaining
  },

  getCenterPan: function( elements, zoom ){
    if( !this._private.panningEnabled ){
      return;
    }

    if( is.string( elements ) ){
      var selector = elements;
      elements = this.mutableElements().filter( selector );
    } else if( !is.elementOrCollection( elements ) ){
      elements = this.mutableElements();
    }

    var bb = elements.boundingBox();
    var w = this.width();
    var h = this.height();
    zoom = zoom === undefined ? this._private.zoom : zoom;

    var pan = { // middle
      x: (w - zoom * ( bb.x1 + bb.x2 )) / 2,
      y: (h - zoom * ( bb.y1 + bb.y2 )) / 2
    };

    return pan;
  },

  reset: function(){
    if( !this._private.panningEnabled || !this._private.zoomingEnabled ){
      return this;
    }

    this.viewport( {
      pan: { x: 0, y: 0 },
      zoom: 1
    } );

    return this; // chaining
  },

  invalidateSize: function(){
    this._private.sizeCache = null;
  },

  size: function(){
    var _p = this._private;
    var container = _p.container;

    return ( _p.sizeCache = _p.sizeCache || ( container ? {
      width: container.clientWidth,
      height: container.clientHeight
    } : { // fallback if no container (not 0 b/c can be used for dividing etc)
      width: 1,
      height: 1
    } ) );
  },

  width: function(){
    return this.size().width;
  },

  height: function(){
    return this.size().height;
  },

  extent: function(){
    var pan = this._private.pan;
    var zoom = this._private.zoom;
    var rb = this.renderedExtent();

    var b = {
      x1: ( rb.x1 - pan.x ) / zoom,
      x2: ( rb.x2 - pan.x ) / zoom,
      y1: ( rb.y1 - pan.y ) / zoom,
      y2: ( rb.y2 - pan.y ) / zoom
    };

    b.w = b.x2 - b.x1;
    b.h = b.y2 - b.y1;

    return b;
  },

  renderedExtent: function(){
    var width = this.width();
    var height = this.height();

    return {
      x1: 0,
      y1: 0,
      x2: width,
      y2: height,
      w: width,
      h: height
    };
  }
});

// aliases
corefn.centre = corefn.center;

// backwards compatibility
corefn.autolockNodes = corefn.autolock;
corefn.autoungrabifyNodes = corefn.autoungrabify;

module.exports = corefn;

},{"../is":86}],47:[function(require,module,exports){
'use strict';

// use this module to cherry pick functions into your prototype
// (useful for functions shared between the core and collections, for example)

// e.g.
// var foo = define.foo({ /* params... */ })

var util = require( './util' );
var is = require( './is' );
var Selector = require( './selector' );
var Promise = require( './promise' );
var Event = require( './event' );
var Animation = require( './animation' );

var define = {

  // access data field
  data: function( params ){
    var defaults = {
      field: 'data',
      bindingEvent: 'data',
      allowBinding: false,
      allowSetting: false,
      allowGetting: false,
      settingEvent: 'data',
      settingTriggersEvent: false,
      triggerFnName: 'trigger',
      immutableKeys: {}, // key => true if immutable
      updateStyle: false,
      onSet: function( self ){},
      canSet: function( self ){ return true; }
    };
    params = util.extend( {}, defaults, params );

    return function dataImpl( name, value ){
      var p = params;
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
      var single = selfIsArrayLike ? self[0] : self;

      // .data('foo', ...)
      if( is.string( name ) ){ // set or get property

        // .data('foo')
        if( p.allowGetting && value === undefined ){ // get

          var ret;
          if( single ){
            ret = single._private[ p.field ][ name ];
          }
          return ret;

        // .data('foo', 'bar')
        } else if( p.allowSetting && value !== undefined ){ // set
          var valid = !p.immutableKeys[ name ];
          if( valid ){
            for( var i = 0, l = all.length; i < l; i++ ){
              if( p.canSet( all[ i ] ) ){
                all[ i ]._private[ p.field ][ name ] = value;
              }
            }

            // update mappers if asked
            if( p.updateStyle ){ self.updateStyle(); }

            // call onSet callback
            p.onSet( self );

            if( p.settingTriggersEvent ){
              self[ p.triggerFnName ]( p.settingEvent );
            }
          }
        }

      // .data({ 'foo': 'bar' })
      } else if( p.allowSetting && is.plainObject( name ) ){ // extend
        var obj = name;
        var k, v;
        var keys = Object.keys( obj );

        for( var i = 0; i < keys.length; i++ ){
          k = keys[ i ];
          v = obj[ k ];

          var valid = !p.immutableKeys[ k ];
          if( valid ){
            for( var j = 0; j < all.length; j++ ){
              var ele = all[j];

              if( p.canSet( ele ) ){
                ele._private[ p.field ][ k ] = v;
              }
            }
          }
        }

        // update mappers if asked
        if( p.updateStyle ){ self.updateStyle(); }

        // call onSet callback
        p.onSet( self );

        if( p.settingTriggersEvent ){
          self[ p.triggerFnName ]( p.settingEvent );
        }

      // .data(function(){ ... })
      } else if( p.allowBinding && is.fn( name ) ){ // bind to event
        var fn = name;
        self.on( p.bindingEvent, fn );

      // .data()
      } else if( p.allowGetting && name === undefined ){ // get whole object
        var ret;
        if( single ){
          ret = single._private[ p.field ];
        }
        return ret;
      }

      return self; // maintain chainability
    }; // function
  }, // data

  // remove data field
  removeData: function( params ){
    var defaults = {
      field: 'data',
      event: 'data',
      triggerFnName: 'trigger',
      triggerEvent: false,
      immutableKeys: {} // key => true if immutable
    };
    params = util.extend( {}, defaults, params );

    return function removeDataImpl( names ){
      var p = params;
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like

      // .removeData('foo bar')
      if( is.string( names ) ){ // then get the list of keys, and delete them
        var keys = names.split( /\s+/ );
        var l = keys.length;

        for( var i = 0; i < l; i++ ){ // delete each non-empty key
          var key = keys[ i ];
          if( is.emptyString( key ) ){ continue; }

          var valid = !p.immutableKeys[ key ]; // not valid if immutable
          if( valid ){
            for( var i_a = 0, l_a = all.length; i_a < l_a; i_a++ ){
              all[ i_a ]._private[ p.field ][ key ] = undefined;
            }
          }
        }

        if( p.triggerEvent ){
          self[ p.triggerFnName ]( p.event );
        }

      // .removeData()
      } else if( names === undefined ){ // then delete all keys

        for( var i_a = 0, l_a = all.length; i_a < l_a; i_a++ ){
          var _privateFields = all[ i_a ]._private[ p.field ];
          var keys = Object.keys( _privateFields );

          for( var i = 0; i < keys.length; i++ ){
            var key = keys[i];
            var validKeyToDelete = !p.immutableKeys[ key ];

            if( validKeyToDelete ){
              _privateFields[ key ] = undefined;
            }
          }
        }

        if( p.triggerEvent ){
          self[ p.triggerFnName ]( p.event );
        }
      }

      return self; // maintain chaining
    }; // function
  }, // removeData

  // event function reusable stuff
  event: {
    regex: /(\w+)(\.(?:\w+|\*))?/, // regex for matching event strings (e.g. "click.namespace")
    universalNamespace: '.*', // matches as if no namespace specified and prevents users from unbinding accidentally
    optionalTypeRegex: /(\w+)?(\.(?:\w+|\*))?/,
    falseCallback: function(){ return false; }
  },

  // event binding
  on: function( params ){
    var defaults = {
      unbindSelfOnTrigger: false,
      unbindAllBindersOnTrigger: false
    };
    params = util.extend( {}, defaults, params );

    return function onImpl( events, selector, data, callback ){
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
      var eventsIsString = is.string( events );
      var p = params;

      if( is.plainObject( selector ) ){ // selector is actually data
        callback = data;
        data = selector;
        selector = undefined;
      } else if( is.fn( selector ) || selector === false ){ // selector is actually callback
        callback = selector;
        data = undefined;
        selector = undefined;
      }

      if( is.fn( data ) || data === false ){ // data is actually callback
        callback = data;
        data = undefined;
      }

      // if there isn't a callback, we can't really do anything
      // (can't speak for mapped events arg version)
      if( !(is.fn( callback ) || callback === false) && eventsIsString ){
        return self; // maintain chaining
      }

      if( eventsIsString ){ // then convert to map
        var map = {};
        map[ events ] = callback;
        events = map;
      }

      var keys = Object.keys( events );

      for( var k = 0; k < keys.length; k++ ){
        var evts = keys[k];

        callback = events[ evts ];
        if( callback === false ){
          callback = define.event.falseCallback;
        }

        if( !is.fn( callback ) ){ continue; }

        evts = evts.split( /\s+/ );
        for( var i = 0; i < evts.length; i++ ){
          var evt = evts[ i ];
          if( is.emptyString( evt ) ){ continue; }

          var match = evt.match( define.event.regex ); // type[.namespace]

          if( match ){
            var type = match[1];
            var namespace = match[2] ? match[2] : undefined;

            var listener = {
              callback: callback, // callback to run
              data: data, // extra data in eventObj.data
              delegated: selector ? true : false, // whether the evt is delegated
              selector: selector, // the selector to match for delegated events
              selObj: new Selector( selector ), // cached selector object to save rebuilding
              type: type, // the event type (e.g. 'click')
              namespace: namespace, // the event namespace (e.g. ".foo")
              unbindSelfOnTrigger: p.unbindSelfOnTrigger,
              unbindAllBindersOnTrigger: p.unbindAllBindersOnTrigger,
              binders: all // who bound together
            };

            for( var j = 0; j < all.length; j++ ){
              var _p = all[ j ]._private = all[ j ]._private || {};

              _p.listeners = _p.listeners || [];
              _p.listeners.push( listener );
            }
          }
        } // for events array
      } // for events map

      return self; // maintain chaining
    }; // function
  }, // on

  eventAliasesOn: function( proto ){
    var p = proto;

    p.addListener = p.listen = p.bind = p.on;
    p.removeListener = p.unlisten = p.unbind = p.off;
    p.emit = p.trigger;

    // this is just a wrapper alias of .on()
    p.pon = p.promiseOn = function( events, selector ){
      var self = this;
      var args = Array.prototype.slice.call( arguments, 0 );

      return new Promise( function( resolve, reject ){
        var callback = function( e ){
          self.off.apply( self, offArgs );

          resolve( e );
        };

        var onArgs = args.concat( [ callback ] );
        var offArgs = onArgs.concat( [] );

        self.on.apply( self, onArgs );
      } );
    };
  },

  off: function offImpl( params ){
    var defaults = {
    };
    params = util.extend( {}, defaults, params );

    return function( events, selector, callback ){
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
      var eventsIsString = is.string( events );

      if( arguments.length === 0 ){ // then unbind all

        for( var i = 0; i < all.length; i++ ){
          all[ i ]._private = all[ i ]._private || {};

          _p.listeners = [];
        }

        return self; // maintain chaining
      }

      if( is.fn( selector ) || selector === false ){ // selector is actually callback
        callback = selector;
        selector = undefined;
      }

      if( eventsIsString ){ // then convert to map
        var map = {};
        map[ events ] = callback;
        events = map;
      }

      var keys = Object.keys( events );

      for( var k = 0; k < keys.length; k++ ){
        var evts = keys[k];

        callback = events[ evts ];

        if( callback === false ){
          callback = define.event.falseCallback;
        }

        evts = evts.split( /\s+/ );
        for( var h = 0; h < evts.length; h++ ){
          var evt = evts[ h ];
          if( is.emptyString( evt ) ){ continue; }

          var match = evt.match( define.event.optionalTypeRegex ); // [type][.namespace]
          if( match ){
            var type = match[1] ? match[1] : undefined;
            var namespace = match[2] ? match[2] : undefined;

            for( var i = 0; i < all.length; i++ ){ //
              var _p = all[ i ]._private = all[ i ]._private || {};
              var listeners = _p.listeners = _p.listeners || [];

              for( var j = 0; j < listeners.length; j++ ){
                var listener = listeners[ j ];
                var nsMatches = !namespace || namespace === listener.namespace;
                var typeMatches = !type || listener.type === type;
                var cbMatches = !callback || callback === listener.callback;
                var listenerMatches = nsMatches && typeMatches && cbMatches;

                // delete listener if it matches
                if( listenerMatches ){
                  listeners.splice( j, 1 );
                  j--;
                }
              } // for listeners
            } // for all
          } // if match
        } // for events array

      } // for events map

      return self; // maintain chaining
    }; // function
  }, // off

  trigger: function( params ){
    var defaults = {};
    params = util.extend( {}, defaults, params );

    return function triggerImpl( events, extraParams, fnToTrigger ){
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
      var eventsIsString = is.string( events );
      var eventsIsObject = is.plainObject( events );
      var eventsIsEvent = is.event( events );
      var _p = this._private = this._private || {};
      var cy = _p.cy || ( is.core( this ) ? this : null );
      var hasCompounds = cy ? cy.hasCompoundNodes() : false;

      if( eventsIsString ){ // then make a plain event object for each event name
        var evts = events.split( /\s+/ );
        events = [];

        for( var i = 0; i < evts.length; i++ ){
          var evt = evts[ i ];
          if( is.emptyString( evt ) ){ continue; }

          var match = evt.match( define.event.regex ); // type[.namespace]
          var type = match[1];
          var namespace = match[2] ? match[2] : undefined;

          events.push( {
            type: type,
            namespace: namespace
          } );
        }
      } else if( eventsIsObject ){ // put in length 1 array
        var eventArgObj = events;

        events = [ eventArgObj ];
      }

      if( extraParams ){
        if( !is.array( extraParams ) ){ // make sure extra params are in an array if specified
          extraParams = [ extraParams ];
        }
      } else { // otherwise, we've got nothing
        extraParams = [];
      }

      for( var i = 0; i < events.length; i++ ){ // trigger each event in order
        var evtObj = events[ i ];

        for( var j = 0; j < all.length; j++ ){ // for each
          var triggerer = all[ j ];
          var _p = triggerer._private = triggerer._private || {};
          var listeners = _p.listeners = _p.listeners || [];
          var triggererIsElement = is.element( triggerer );
          var bubbleUp = triggererIsElement || params.layout;

          // create the event for this element from the event object
          var evt;

          if( eventsIsEvent ){ // then just get the object
            evt = evtObj;

            evt.cyTarget = evt.cyTarget || triggerer;
            evt.cy = evt.cy || cy;

          } else { // then we have to make one
            evt = new Event( evtObj, {
              cyTarget: triggerer,
              cy: cy,
              namespace: evtObj.namespace
            } );
          }

          // if a layout was specified, then put it in the typed event
          if( evtObj.layout ){
            evt.layout = evtObj.layout;
          }

          // if triggered by layout, put in event
          if( params.layout ){
            evt.layout = triggerer;
          }

          // create a rendered position based on the passed position
          if( evt.cyPosition ){
            var pos = evt.cyPosition;
            var zoom = cy.zoom();
            var pan = cy.pan();

            evt.cyRenderedPosition = {
              x: pos.x * zoom + pan.x,
              y: pos.y * zoom + pan.y
            };
          }

          if( fnToTrigger ){ // then override the listeners list with just the one we specified
            listeners = [ {
              namespace: evt.namespace,
              type: evt.type,
              callback: fnToTrigger
            } ];
          }

          for( var k = 0; k < listeners.length; k++ ){ // check each listener
            var lis = listeners[ k ];
            var nsMatches = !lis.namespace || lis.namespace === evt.namespace || lis.namespace === define.event.universalNamespace;
            var typeMatches = lis.type === evt.type;
            var targetMatches = lis.delegated ? ( triggerer !== evt.cyTarget && is.element( evt.cyTarget ) && lis.selObj.matches( evt.cyTarget ) ) : (true); // we're not going to validate the hierarchy; that's too expensive
            var listenerMatches = nsMatches && typeMatches && targetMatches;

            if( listenerMatches ){ // then trigger it
              var args = [ evt ];
              args = args.concat( extraParams ); // add extra params to args list

              if( lis.data ){ // add on data plugged into binding
                evt.data = lis.data;
              } else { // or clear it in case the event obj is reused
                evt.data = undefined;
              }

              if( lis.unbindSelfOnTrigger || lis.unbindAllBindersOnTrigger ){ // then remove listener
                listeners.splice( k, 1 );
                k--;
              }

              if( lis.unbindAllBindersOnTrigger ){ // then delete the listener for all binders
                var binders = lis.binders;
                for( var l = 0; l < binders.length; l++ ){
                  var binder = binders[ l ];
                  if( !binder || binder === triggerer ){ continue; } // already handled triggerer or we can't handle it

                  var binderListeners = binder._private.listeners;
                  for( var m = 0; m < binderListeners.length; m++ ){
                    var binderListener = binderListeners[ m ];

                    if( binderListener === lis ){ // delete listener from list
                      binderListeners.splice( m, 1 );
                      m--;
                    }
                  }
                }
              }

              // run the callback
              var context = lis.delegated ? evt.cyTarget : triggerer;
              var ret = lis.callback.apply( context, args );

              if( ret === false || evt.isPropagationStopped() ){
                // then don't bubble
                bubbleUp = false;

                if( ret === false ){
                  // returning false is a shorthand for stopping propagation and preventing the def. action
                  evt.stopPropagation();
                  evt.preventDefault();
                }
              }
            } // if listener matches
          } // for each listener

          // bubble up event for elements
          if( bubbleUp ){
            var parent = hasCompounds ? triggerer._private.parent : null;
            var hasParent = parent != null && parent.length !== 0;

            if( hasParent ){ // then bubble up to parent
              parent = parent[0];
              parent.trigger( evt );
            } else { // otherwise, bubble up to the core
              cy.trigger( evt );
            }
          }

        } // for each of all
      } // for each event

      return self; // maintain chaining
    }; // function
  }, // trigger

  animated: function( fnParams ){
    var defaults = {};
    fnParams = util.extend( {}, defaults, fnParams );

    return function animatedImpl(){
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
      var cy = this._private.cy || this;

      if( !cy.styleEnabled() ){ return false; }

      var ele = all[0];

      if( ele ){
        return ele._private.animation.current.length > 0;
      }
    };
  }, // animated

  clearQueue: function( fnParams ){
    var defaults = {};
    fnParams = util.extend( {}, defaults, fnParams );

    return function clearQueueImpl(){
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
      var cy = this._private.cy || this;

      if( !cy.styleEnabled() ){ return this; }

      for( var i = 0; i < all.length; i++ ){
        var ele = all[ i ];
        ele._private.animation.queue = [];
      }

      return this;
    };
  }, // clearQueue

  delay: function( fnParams ){
    var defaults = {};
    fnParams = util.extend( {}, defaults, fnParams );

    return function delayImpl( time, complete ){
      var cy = this._private.cy || this;

      if( !cy.styleEnabled() ){ return this; }

      return this.animate( {
        delay: time,
        duration: time,
        complete: complete
      } );
    };
  }, // delay

  delayAnimation: function( fnParams ){
    var defaults = {};
    fnParams = util.extend( {}, defaults, fnParams );

    return function delayAnimationImpl( time, complete ){
      var cy = this._private.cy || this;

      if( !cy.styleEnabled() ){ return this; }

      return this.animation( {
        delay: time,
        duration: time,
        complete: complete
      } );
    };
  }, // delay

  animation: function( fnParams ){
    var defaults = {};
    fnParams = util.extend( {}, defaults, fnParams );

    return function animationImpl( properties, params ){
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
      var cy = this._private.cy || this;
      var isCore = !selfIsArrayLike;
      var isEles = !isCore;

      if( !cy.styleEnabled() ){ return this; }

      var style = cy.style();

      properties = util.extend( {}, properties, params );

      if( properties.duration === undefined ){
        properties.duration = 400;
      }

      switch( properties.duration ){
      case 'slow':
        properties.duration = 600;
        break;
      case 'fast':
        properties.duration = 200;
        break;
      }

      var propertiesEmpty = Object.keys( properties ).length === 0;

      if( propertiesEmpty ){
        return new Animation( all[0], properties ); // nothing to animate
      }

      if( isEles ){
        properties.style = style.getPropsList( properties.style || properties.css );

        properties.css = undefined;
      }

      if( properties.renderedPosition && isEles ){
        var rpos = properties.renderedPosition;
        var pan = cy.pan();
        var zoom = cy.zoom();

        properties.position = {
          x: ( rpos.x - pan.x ) / zoom,
          y: ( rpos.y - pan.y ) / zoom
        };
      }

      // override pan w/ panBy if set
      if( properties.panBy && isCore ){
        var panBy = properties.panBy;
        var cyPan = cy.pan();

        properties.pan = {
          x: cyPan.x + panBy.x,
          y: cyPan.y + panBy.y
        };
      }

      // override pan w/ center if set
      var center = properties.center || properties.centre;
      if( center && isCore ){
        var centerPan = cy.getCenterPan( center.eles, properties.zoom );

        if( centerPan ){
          properties.pan = centerPan;
        }
      }

      // override pan & zoom w/ fit if set
      if( properties.fit && isCore ){
        var fit = properties.fit;
        var fitVp = cy.getFitViewport( fit.eles || fit.boundingBox, fit.padding );

        if( fitVp ){
          properties.pan = fitVp.pan;
          properties.zoom = fitVp.zoom;
        }
      }

      return new Animation( all[0], properties );
    };
  }, // animate

  animate: function( fnParams ){
    var defaults = {};
    fnParams = util.extend( {}, defaults, fnParams );

    return function animateImpl( properties, params ){
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
      var cy = this._private.cy || this;

      if( !cy.styleEnabled() ){ return this; }

      if( params ){
        properties = util.extend( {}, properties, params );
      }

      // manually hook and run the animation
      for( var i = 0; i < all.length; i++ ){
        var ele = all[ i ];
        var queue = ele.animated() && (properties.queue === undefined || properties.queue);

        var ani = ele.animation( properties, (queue ? { queue: true } : undefined) );

        ani.play();
      }

      return this; // chaining
    };
  }, // animate

  stop: function( fnParams ){
    var defaults = {};
    fnParams = util.extend( {}, defaults, fnParams );

    return function stopImpl( clearQueue, jumpToEnd ){
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [ self ]; // put in array if not array-like
      var cy = this._private.cy || this;

      if( !cy.styleEnabled() ){ return this; }

      for( var i = 0; i < all.length; i++ ){
        var ele = all[ i ];
        var _p = ele._private;
        var anis = _p.animation.current;

        for( var j = 0; j < anis.length; j++ ){
          var ani = anis[ j ];
          var ani_p = ani._private;

          if( jumpToEnd ){
            // next iteration of the animation loop, the animation
            // will go straight to the end and be removed
            ani_p.duration = 0;
          }
        }

        // clear the queue of future animations
        if( clearQueue ){
          _p.animation.queue = [];
        }

        if( !jumpToEnd ){
          _p.animation.current = [];
        }
      }

      // we have to notify (the animation loop doesn't do it for us on `stop`)
      cy.notify( {
        eles: this,
        type: 'draw'
      } );

      return this;
    };
  } // stop

}; // define

module.exports = define;

},{"./animation":5,"./event":48,"./is":86,"./promise":89,"./selector":91,"./util":104}],48:[function(require,module,exports){
'use strict';

/*!
Event object based on jQuery events, MIT license

https://jquery.org/license/
https://tldrlegal.com/license/mit-license
https://github.com/jquery/jquery/blob/master/src/event.js
*/

var Event = function( src, props ){
  // Allow instantiation without the 'new' keyword
  if( !(this instanceof Event) ){
    return new Event( src, props );
  }

  // Event object
  if( src && src.type ){
    this.originalEvent = src;
    this.type = src.type;

    // Events bubbling up the document may have been marked as prevented
    // by a handler lower down the tree; reflect the correct value.
    this.isDefaultPrevented = ( src.defaultPrevented ) ? returnTrue : returnFalse;

  // Event type
  } else {
    this.type = src;
  }

  // Put explicitly provided properties onto the event object
  if( props ){
    // util.extend( this, props );

    // more efficient to manually copy fields we use
    this.type = props.type !== undefined ? props.type : this.type;
    this.cy = props.cy;
    this.cyTarget = props.cyTarget;
    this.cyPosition = props.cyPosition;
    this.cyRenderedPosition = props.cyRenderedPosition;
    this.namespace = props.namespace;
    this.layout = props.layout;
    this.data = props.data;
    this.message = props.message;
  }

  // Create a timestamp if incoming event doesn't have one
  this.timeStamp = src && src.timeStamp || Date.now();
};

function returnFalse(){
  return false;
}

function returnTrue(){
  return true;
}

// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
Event.prototype = {
  instanceString: function(){
    return 'event';
  },

  preventDefault: function(){
    this.isDefaultPrevented = returnTrue;

    var e = this.originalEvent;
    if( !e ){
      return;
    }

    // if preventDefault exists run it on the original event
    if( e.preventDefault ){
      e.preventDefault();
    }
  },

  stopPropagation: function(){
    this.isPropagationStopped = returnTrue;

    var e = this.originalEvent;
    if( !e ){
      return;
    }

    // if stopPropagation exists run it on the original event
    if( e.stopPropagation ){
      e.stopPropagation();
    }
  },

  stopImmediatePropagation: function(){
    this.isImmediatePropagationStopped = returnTrue;
    this.stopPropagation();
  },

  isDefaultPrevented: returnFalse,
  isPropagationStopped: returnFalse,
  isImmediatePropagationStopped: returnFalse
};

module.exports = Event;

},{}],49:[function(require,module,exports){
'use strict';

var util = require( './util' );
var define = require( './define' );
var Collection = require( './collection' );
var Core = require( './core' );
var incExts = require( './extensions' );
var is = require( './is' );

// registered extensions to cytoscape, indexed by name
var extensions = {};

// registered modules for extensions, indexed by name
var modules = {};

function setExtension( type, name, registrant ){

  var ext = registrant;

  var overrideErr = function( field ){
    util.error( 'Can not register `' + name + '` for `' + type + '` since `' + field + '` already exists in the prototype and can not be overridden' );
  };

  if( type === 'core' ){
    if( Core.prototype[ name ] ){
      return overrideErr( name );
    } else {
      Core.prototype[ name ] = registrant;
    }

  } else if( type === 'collection' ){
    if( Collection.prototype[ name ] ){
      return overrideErr( name );
    } else {
      Collection.prototype[ name ] = registrant;
    }

  } else if( type === 'layout' ){
    // fill in missing layout functions in the prototype

    var Layout = function( options ){
      this.options = options;

      registrant.call( this, options );

      // make sure layout has _private for use w/ std apis like .on()
      if( !is.plainObject( this._private ) ){
        this._private = {};
      }

      this._private.cy = options.cy;
      this._private.listeners = [];
    };

    var layoutProto = Layout.prototype = Object.create( registrant.prototype );

    var optLayoutFns = [];

    for( var i = 0; i < optLayoutFns.length; i++ ){
      var fnName = optLayoutFns[ i ];

      layoutProto[ fnName ] = layoutProto[ fnName ] || function(){ return this; };
    }

    // either .start() or .run() is defined, so autogen the other
    if( layoutProto.start && !layoutProto.run ){
      layoutProto.run = function(){ this.start(); return this; };
    } else if( !layoutProto.start && layoutProto.run ){
      layoutProto.start = function(){ this.run(); return this; };
    }

    if( !layoutProto.stop ){
      layoutProto.stop = function(){
        var opts = this.options;

        if( opts && opts.animate ){
          var anis = this.animations;
          for( var i = 0; i < anis.length; i++ ){
            anis[ i ].stop();
          }
        }

        this.trigger( 'layoutstop' );

        return this;
      };
    }

    if( !layoutProto.destroy ){
      layoutProto.destroy = function(){
        return this;
      };
    }

    layoutProto.on = define.on( { layout: true } );
    layoutProto.one = define.on( { layout: true, unbindSelfOnTrigger: true } );
    layoutProto.once = define.on( { layout: true, unbindAllBindersOnTrigger: true } );
    layoutProto.off = define.off( { layout: true } );
    layoutProto.trigger = define.trigger( { layout: true } );

    define.eventAliasesOn( layoutProto );

    ext = Layout; // replace with our wrapped layout

  } else if( type === 'renderer' && name !== 'null' && name !== 'base' ){
    // user registered renderers inherit from base

    var BaseRenderer = getExtension( 'renderer', 'base' );
    var bProto = BaseRenderer.prototype;
    var RegistrantRenderer = registrant;
    var rProto = registrant.prototype;

    var Renderer = function(){
      BaseRenderer.apply( this, arguments );
      RegistrantRenderer.apply( this, arguments );
    };

    var proto = Renderer.prototype;

    for( var pName in bProto ){
      var pVal = bProto[ pName ];
      var existsInR = rProto[ pName ] != null;

      if( existsInR ){
        return overrideErr( pName );
      }

      proto[ pName ] = pVal; // take impl from base
    }

    for( var pName in rProto ){
      proto[ pName ] = rProto[ pName ]; // take impl from registrant
    }

    bProto.clientFunctions.forEach( function( name ){
      proto[ name ] = proto[ name ] || function(){
        util.error( 'Renderer does not implement `renderer.' + name + '()` on its prototype' );
      };
    } );

    ext = Renderer;

  }

  return util.setMap( {
    map: extensions,
    keys: [ type, name ],
    value: ext
  } );
}

function getExtension( type, name ){
  return util.getMap( {
    map: extensions,
    keys: [ type, name ]
  } );
}

function setModule( type, name, moduleType, moduleName, registrant ){
  return util.setMap( {
    map: modules,
    keys: [ type, name, moduleType, moduleName ],
    value: registrant
  } );
}

function getModule( type, name, moduleType, moduleName ){
  return util.getMap( {
    map: modules,
    keys: [ type, name, moduleType, moduleName ]
  } );
}

var extension = function(){
  // e.g. extension('renderer', 'svg')
  if( arguments.length === 2 ){
    return getExtension.apply( null, arguments );
  }

  // e.g. extension('renderer', 'svg', { ... })
  else if( arguments.length === 3 ){
    return setExtension.apply( null, arguments );
  }

  // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')
  else if( arguments.length === 4 ){
    return getModule.apply( null, arguments );
  }

  // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })
  else if( arguments.length === 5 ){
    return setModule.apply( null, arguments );
  }

  else {
    util.error( 'Invalid extension access syntax' );
  }

};

// allows a core instance to access extensions internally
Core.prototype.extension = extension;

// included extensions
incExts.forEach( function( group ){
  group.extensions.forEach( function( ext ){
    setExtension( group.type, ext.name, ext.impl );
  } );
} );

module.exports = extension;

},{"./collection":29,"./core":40,"./define":47,"./extensions":50,"./is":86,"./util":104}],50:[function(require,module,exports){
'use strict';

module.exports = [
  {
    type: 'layout',
    extensions: require( './layout' )
  },

  {
    type: 'renderer',
    extensions: require( './renderer' )
  }
];

},{"./layout":56,"./renderer":81}],51:[function(require,module,exports){
'use strict';

var util = require( '../../util' );
var math = require( '../../math' );
var is = require( '../../is' );

var defaults = {
  fit: true, // whether to fit the viewport to the graph
  directed: false, // whether the tree is directed downwards (or edges can point in any direction if false)
  padding: 30, // padding on fit
  circle: false, // put depths in concentric circles if true, put depths top down if false
  spacingFactor: 1.75, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
  roots: undefined, // the roots of the trees
  maximalAdjustments: 0, // how many times to try to position the nodes in a maximal way (i.e. no backtracking)
  animate: false, // whether to transition the node positions
  animationDuration: 500, // duration of animation in ms if enabled
  animationEasing: undefined, // easing of animation if enabled
  ready: undefined, // callback on layoutready
  stop: undefined // callback on layoutstop
};

function BreadthFirstLayout( options ){
  this.options = util.extend( {}, defaults, options );
}

BreadthFirstLayout.prototype.run = function(){
  var params = this.options;
  var options = params;

  var cy = params.cy;
  var eles = options.eles;
  var nodes = eles.nodes().not( ':parent' );
  var graph = eles;

  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
    x1: 0, y1: 0, w: cy.width(), h: cy.height()
  } );

  var roots;
  if( is.elementOrCollection( options.roots ) ){
    roots = options.roots;
  } else if( is.array( options.roots ) ){
    var rootsArray = [];

    for( var i = 0; i < options.roots.length; i++ ){
      var id = options.roots[ i ];
      var ele = cy.getElementById( id );
      rootsArray.push( ele );
    }

    roots = cy.collection( rootsArray );
  } else if( is.string( options.roots ) ){
    roots = cy.$( options.roots );

  } else {
    if( options.directed ){
      roots = nodes.roots();
    } else {
      var components = [];
      var unhandledNodes = nodes;

      while( unhandledNodes.length > 0 ){
        var currComp = cy.collection();

        eles.bfs( {
          roots: unhandledNodes[0],
          visit: function( i, depth, node, edge, pNode ){
            currComp = currComp.add( node );
          },
          directed: false
        } );

        unhandledNodes = unhandledNodes.not( currComp );
        components.push( currComp );
      }

      roots = cy.collection();
      for( var i = 0; i < components.length; i++ ){
        var comp = components[ i ];
        var maxDegree = comp.maxDegree( false );
        var compRoots = comp.filter( function(){
          return this.degree( false ) === maxDegree;
        } );

        roots = roots.add( compRoots );
      }

    }
  }


  var depths = [];
  var foundByBfs = {};
  var id2depth = {};
  var prevNode = {};
  var prevEdge = {};
  var successors = {};

  // find the depths of the nodes
  graph.bfs( {
    roots: roots,
    directed: options.directed,
    visit: function( i, depth, node, edge, pNode ){
      var ele = this[0];
      var id = ele.id();

      if( !depths[ depth ] ){
        depths[ depth ] = [];
      }

      depths[ depth ].push( ele );
      foundByBfs[ id ] = true;
      id2depth[ id ] = depth;
      prevNode[ id ] = pNode;
      prevEdge[ id ] = edge;

      if( pNode ){
        var prevId = pNode.id();
        var succ = successors[ prevId ] = successors[ prevId ] || [];

        succ.push( node );
      }
    }
  } );

  // check for nodes not found by bfs
  var orphanNodes = [];
  for( var i = 0; i < nodes.length; i++ ){
    var ele = nodes[ i ];

    if( foundByBfs[ ele.id() ] ){
      continue;
    } else {
      orphanNodes.push( ele );
    }
  }

  // assign orphan nodes a depth from their neighborhood
  var maxChecks = orphanNodes.length * 3;
  var checks = 0;
  while( orphanNodes.length !== 0 && checks < maxChecks ){
    var node = orphanNodes.shift();
    var neighbors = node.neighborhood().nodes();
    var assignedDepth = false;

    for( var i = 0; i < neighbors.length; i++ ){
      var depth = id2depth[ neighbors[ i ].id() ];

      if( depth !== undefined ){
        depths[ depth ].push( node );
        assignedDepth = true;
        break;
      }
    }

    if( !assignedDepth ){
      orphanNodes.push( node );
    }

    checks++;
  }

  // assign orphan nodes that are still left to the depth of their subgraph
  while( orphanNodes.length !== 0 ){
    var node = orphanNodes.shift();
    //var subgraph = graph.bfs( node ).path;
    var assignedDepth = false;

    // for( var i = 0; i < subgraph.length; i++ ){
    //   var depth = id2depth[ subgraph[i].id() ];

    //   if( depth !== undefined ){
    //     depths[depth].push( node );
    //     assignedDepth = true;
    //     break;
    //   }
    // }

    if( !assignedDepth ){ // worst case if the graph really isn't tree friendly, then just dump it in 0
      if( depths.length === 0 ){
        depths.push( [] );
      }

      depths[0].push( node );
    }
  }

  // assign the nodes a depth and index
  var assignDepthsToEles = function(){
    for( var i = 0; i < depths.length; i++ ){
      var eles = depths[ i ];

      for( var j = 0; j < eles.length; j++ ){
        var ele = eles[ j ];

        ele._private.scratch.breadthfirst = {
          depth: i,
          index: j
        };
      }
    }
  };
  assignDepthsToEles();


  var intersectsDepth = function( node ){ // returns true if has edges pointing in from a higher depth
    var edges = node.connectedEdges( function(){
      return this.data( 'target' ) === node.id();
    } );
    var thisInfo = node._private.scratch.breadthfirst;
    var highestDepthOfOther = 0;
    var highestOther;
    for( var i = 0; i < edges.length; i++ ){
      var edge = edges[ i ];
      var otherNode = edge.source()[0];
      var otherInfo = otherNode._private.scratch.breadthfirst;

      if( thisInfo.depth <= otherInfo.depth && highestDepthOfOther < otherInfo.depth ){
        highestDepthOfOther = otherInfo.depth;
        highestOther = otherNode;
      }
    }

    return highestOther;
  };

  // make maximal if so set by adjusting depths
  for( var adj = 0; adj < options.maximalAdjustments; adj++ ){

    var nDepths = depths.length;
    var elesToMove = [];
    for( var i = 0; i < nDepths; i++ ){
      var depth = depths[ i ];

      var nDepth = depth.length;
      for( var j = 0; j < nDepth; j++ ){
        var ele = depth[ j ];
        var info = ele._private.scratch.breadthfirst;
        var intEle = intersectsDepth( ele );

        if( intEle ){
          info.intEle = intEle;
          elesToMove.push( ele );
        }
      }
    }

    for( var i = 0; i < elesToMove.length; i++ ){
      var ele = elesToMove[ i ];
      var info = ele._private.scratch.breadthfirst;
      var intEle = info.intEle;
      var intInfo = intEle._private.scratch.breadthfirst;

      depths[ info.depth ].splice( info.index, 1 ); // remove from old depth & index

      // add to end of new depth
      var newDepth = intInfo.depth + 1;
      while( newDepth > depths.length - 1 ){
        depths.push( [] );
      }
      depths[ newDepth ].push( ele );

      info.depth = newDepth;
      info.index = depths[ newDepth ].length - 1;
    }

    assignDepthsToEles();
  }

  // find min distance we need to leave between nodes
  var minDistance = 0;
  if( options.avoidOverlap ){
    for( var i = 0; i < nodes.length; i++ ){
      var n = nodes[ i ];
      var nbb = n.boundingBox();
      var w = nbb.w;
      var h = nbb.h;

      minDistance = Math.max( minDistance, w, h );
    }
    minDistance *= options.spacingFactor; // just to have some nice spacing
  }

  // get the weighted percent for an element based on its connectivity to other levels
  var cachedWeightedPercent = {};
  var getWeightedPercent = function( ele ){
    if( cachedWeightedPercent[ ele.id() ] ){
      return cachedWeightedPercent[ ele.id() ];
    }

    var eleDepth = ele._private.scratch.breadthfirst.depth;
    var neighbors = ele.neighborhood().nodes().not( ':parent' );
    var percent = 0;
    var samples = 0;

    for( var i = 0; i < neighbors.length; i++ ){
      var neighbor = neighbors[ i ];
      var bf = neighbor._private.scratch.breadthfirst;
      var index = bf.index;
      var depth = bf.depth;
      var nDepth = depths[ depth ].length;

      if( eleDepth > depth || eleDepth === 0 ){ // only get influenced by elements above
        percent += index / nDepth;
        samples++;
      }
    }

    samples = Math.max( 1, samples );
    percent = percent / samples;

    if( samples === 0 ){ // so lone nodes have a "don't care" state in sorting
      percent = undefined;
    }

    cachedWeightedPercent[ ele.id() ] = percent;
    return percent;
  };


  // rearrange the indices in each depth level based on connectivity

  var sortFn = function( a, b ){
    var apct = getWeightedPercent( a );
    var bpct = getWeightedPercent( b );

    return apct - bpct;
  };

  for( var times = 0; times < 3; times++ ){ // do it a few times b/c the depths are dynamic and we want a more stable result

    for( var i = 0; i < depths.length; i++ ){
      depths[ i ] = depths[ i ].sort( sortFn );
    }
    assignDepthsToEles(); // and update

  }

  var biggestDepthSize = 0;
  for( var i = 0; i < depths.length; i++ ){
    biggestDepthSize = Math.max( depths[ i ].length, biggestDepthSize );
  }

  var center = {
    x: bb.x1 + bb.w / 2,
    y: bb.x1 + bb.h / 2
  };

  var getPosition = function( ele, isBottomDepth ){
    var info = ele._private.scratch.breadthfirst;
    var depth = info.depth;
    var index = info.index;
    var depthSize = depths[ depth ].length;

    var distanceX = Math.max( bb.w / (depthSize + 1), minDistance );
    var distanceY = Math.max( bb.h / (depths.length + 1), minDistance );
    var radiusStepSize = Math.min( bb.w / 2 / depths.length, bb.h / 2 / depths.length );
    radiusStepSize = Math.max( radiusStepSize, minDistance );

    if( !options.circle ){

      var epos = {
        x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
        y: (depth + 1) * distanceY
      };

      if( isBottomDepth ){
        return epos;
      }

      // var succs = successors[ ele.id() ];
      // if( succs ){
      //   epos.x = 0;
      //
      //   for( var i = 0 ; i < succs.length; i++ ){
      //     var spos = pos[ succs[i].id() ];
      //
      //     epos.x += spos.x;
      //   }
      //
      //   epos.x /= succs.length;
      // } else {
      //   //debugger;
      // }

      return epos;

    } else {
      if( options.circle ){
        var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);
        var theta = 2 * Math.PI / depths[ depth ].length * index;

        if( depth === 0 && depths[0].length === 1 ){
          radius = 1;
        }

        return {
          x: center.x + radius * Math.cos( theta ),
          y: center.y + radius * Math.sin( theta )
        };

      } else {
        return {
          x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
          y: (depth + 1) * distanceY
        };
      }
    }

  };

  // get positions in reverse depth order
  var pos = {};
  for( var i = depths.length - 1; i >= 0; i-- ){
    var depth = depths[ i ];

    for( var j = 0; j < depth.length; j++ ){
      var node = depth[ j ];

      pos[ node.id() ] = getPosition( node, i === depths.length - 1 );
    }
  }

  nodes.layoutPositions( this, options, function(){
    return pos[ this.id() ];
  } );

  return this; // chaining
};

module.exports = BreadthFirstLayout;

},{"../../is":86,"../../math":88,"../../util":104}],52:[function(require,module,exports){
'use strict';

var util = require( '../../util' );
var math = require( '../../math' );
var is = require( '../../is' );

var defaults = {
  fit: true, // whether to fit the viewport to the graph
  padding: 30, // the padding on fit
  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true, // prevents node overlap, may overflow boundingBox and radius if not enough space
  radius: undefined, // the radius of the circle
  startAngle: 3 / 2 * Math.PI, // where nodes start in radians
  sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
  clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
  sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
  animate: false, // whether to transition the node positions
  animationDuration: 500, // duration of animation in ms if enabled
  animationEasing: undefined, // easing of animation if enabled
  ready: undefined, // callback on layoutready
  stop: undefined // callback on layoutstop
};

function CircleLayout( options ){
  this.options = util.extend( {}, defaults, options );
}

CircleLayout.prototype.run = function(){
  var params = this.options;
  var options = params;

  var cy = params.cy;
  var eles = options.eles;

  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;

  var nodes = eles.nodes().not( ':parent' );

  if( options.sort ){
    nodes = nodes.sort( options.sort );
  }

  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
    x1: 0, y1: 0, w: cy.width(), h: cy.height()
  } );

  var center = {
    x: bb.x1 + bb.w / 2,
    y: bb.y1 + bb.h / 2
  };

  var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / nodes.length : options.sweep;

  var dTheta = sweep / ( Math.max( 1, nodes.length - 1 ) );
  var r;

  var minDistance = 0;
  for( var i = 0; i < nodes.length; i++ ){
    var n = nodes[ i ];
    var nbb = n.boundingBox();
    var w = nbb.w;
    var h = nbb.h;

    minDistance = Math.max( minDistance, w, h );
  }

  if( is.number( options.radius ) ){
    r = options.radius;
  } else if( nodes.length <= 1 ){
    r = 0;
  } else {
    r = Math.min( bb.h, bb.w ) / 2 - minDistance;
  }

  // calculate the radius
  if( nodes.length > 1 && options.avoidOverlap ){ // but only if more than one node (can't overlap)
    minDistance *= 1.75; // just to have some nice spacing

    var dcos = Math.cos( dTheta ) - Math.cos( 0 );
    var dsin = Math.sin( dTheta ) - Math.sin( 0 );
    var rMin = Math.sqrt( minDistance * minDistance / ( dcos * dcos + dsin * dsin ) ); // s.t. no nodes overlapping
    r = Math.max( rMin, r );
  }

  var getPos = function( i, ele ){
    var theta = options.startAngle + i * dTheta * ( clockwise ? 1 : -1 );

    var rx = r * Math.cos( theta );
    var ry = r * Math.sin( theta );
    var pos = {
      x: center.x + rx,
      y: center.y + ry
    };

    return pos;
  };

  nodes.layoutPositions( this, options, getPos );

  return this; // chaining
};

module.exports = CircleLayout;

},{"../../is":86,"../../math":88,"../../util":104}],53:[function(require,module,exports){
'use strict';

var util = require( '../../util' );
var math = require( '../../math' );

var defaults = {
  fit: true, // whether to fit the viewport to the graph
  padding: 30, // the padding on fit
  startAngle: 3 / 2 * Math.PI, // where nodes start in radians
  sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
  clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
  equidistant: false, // whether levels have an equal radial distance betwen them, may cause bounding box overflow
  minNodeSpacing: 10, // min spacing between outside of nodes (used for radius adjustment)
  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
  height: undefined, // height of layout area (overrides container height)
  width: undefined, // width of layout area (overrides container width)
  concentric: function( node ){ // returns numeric value for each node, placing higher nodes in levels towards the centre
    return node.degree();
  },
  levelWidth: function( nodes ){ // the variation of concentric values in each level
    return nodes.maxDegree() / 4;
  },
  animate: false, // whether to transition the node positions
  animationDuration: 500, // duration of animation in ms if enabled
  animationEasing: undefined, // easing of animation if enabled
  ready: undefined, // callback on layoutready
  stop: undefined // callback on layoutstop
};

function ConcentricLayout( options ){
  this.options = util.extend( {}, defaults, options );
}

ConcentricLayout.prototype.run = function(){
  var params = this.options;
  var options = params;

  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;

  var cy = params.cy;

  var eles = options.eles;
  var nodes = eles.nodes().not( ':parent' );

  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
    x1: 0, y1: 0, w: cy.width(), h: cy.height()
  } );

  var center = {
    x: bb.x1 + bb.w / 2,
    y: bb.y1 + bb.h / 2
  };

  var nodeValues = []; // { node, value }
  var theta = options.startAngle;
  var maxNodeSize = 0;

  for( var i = 0; i < nodes.length; i++ ){
    var node = nodes[ i ];
    var value;

    // calculate the node value
    value = options.concentric.apply( node, [ node ] );
    nodeValues.push( {
      value: value,
      node: node
    } );

    // for style mapping
    node._private.scratch.concentric = value;
  }

  // in case we used the `concentric` in style
  nodes.updateStyle();

  // calculate max size now based on potentially updated mappers
  for( var i = 0; i < nodes.length; i++ ){
    var node = nodes[ i ];
    var nbb = node.boundingBox();

    maxNodeSize = Math.max( maxNodeSize, nbb.w, nbb.h );
  }

  // sort node values in descreasing order
  nodeValues.sort( function( a, b ){
    return b.value - a.value;
  } );

  var levelWidth = options.levelWidth( nodes );

  // put the values into levels
  var levels = [ [] ];
  var currentLevel = levels[0];
  for( var i = 0; i < nodeValues.length; i++ ){
    var val = nodeValues[ i ];

    if( currentLevel.length > 0 ){
      var diff = Math.abs( currentLevel[0].value - val.value );

      if( diff >= levelWidth ){
        currentLevel = [];
        levels.push( currentLevel );
      }
    }

    currentLevel.push( val );
  }

  // create positions from levels

  var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes

  if( !options.avoidOverlap ){ // then strictly constrain to bb
    var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
    var maxR = ( Math.min( bb.w, bb.h ) / 2 - minDist );
    var rStep = maxR / ( levels.length + firstLvlHasMulti ? 1 : 0 );

    minDist = Math.min( minDist, rStep );
  }

  // find the metrics for each level
  var r = 0;
  for( var i = 0; i < levels.length; i++ ){
    var level = levels[ i ];
    var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.length : options.sweep;
    var dTheta = level.dTheta = sweep / ( Math.max( 1, level.length - 1 ) );

    // calculate the radius
    if( level.length > 1 && options.avoidOverlap ){ // but only if more than one node (can't overlap)
      var dcos = Math.cos( dTheta ) - Math.cos( 0 );
      var dsin = Math.sin( dTheta ) - Math.sin( 0 );
      var rMin = Math.sqrt( minDist * minDist / ( dcos * dcos + dsin * dsin ) ); // s.t. no nodes overlapping

      r = Math.max( rMin, r );
    }

    level.r = r;

    r += minDist;
  }

  if( options.equidistant ){
    var rDeltaMax = 0;
    var r = 0;

    for( var i = 0; i < levels.length; i++ ){
      var level = levels[ i ];
      var rDelta = level.r - r;

      rDeltaMax = Math.max( rDeltaMax, rDelta );
    }

    r = 0;
    for( var i = 0; i < levels.length; i++ ){
      var level = levels[ i ];

      if( i === 0 ){
        r = level.r;
      }

      level.r = r;

      r += rDeltaMax;
    }
  }

  // calculate the node positions
  var pos = {}; // id => position
  for( var i = 0; i < levels.length; i++ ){
    var level = levels[ i ];
    var dTheta = level.dTheta;
    var r = level.r;

    for( var j = 0; j < level.length; j++ ){
      var val = level[ j ];
      var theta = options.startAngle + (clockwise ? 1 : -1) * dTheta * j;

      var p = {
        x: center.x + r * Math.cos( theta ),
        y: center.y + r * Math.sin( theta )
      };

      pos[ val.node.id() ] = p;
    }
  }

  // position the nodes
  nodes.layoutPositions( this, options, function(){
    var id = this.id();

    return pos[ id ];
  } );

  return this; // chaining
};

module.exports = ConcentricLayout;

},{"../../math":88,"../../util":104}],54:[function(require,module,exports){
'use strict';

/*
The CoSE layout was written by Gerardo Huck.
https://www.linkedin.com/in/gerardohuck/

Based on the following article:
http://dl.acm.org/citation.cfm?id=1498047

Modifications tracked on Github.
*/

var util = require( '../../util' );
var math = require( '../../math' );
var Thread = require( '../../thread' );
var is = require( '../../is' );

var DEBUG;

/**
 * @brief :  default layout options
 */
var defaults = {
  // Called on `layoutready`
  ready: function(){},

  // Called on `layoutstop`
  stop: function(){},

  // Whether to animate while running the layout
  animate: true,

  // The layout animates only after this many milliseconds
  // (prevents flashing on fast runs)
  animationThreshold: 250,

  // Number of iterations between consecutive screen positions update
  // (0 -> only updated on the end)
  refresh: 20,

  // Whether to fit the network view after when done
  fit: true,

  // Padding on fit
  padding: 30,

  // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  boundingBox: undefined,

  // Randomize the initial positions of the nodes (true) or use existing positions (false)
  randomize: false,

  // Extra spacing between components in non-compound graphs
  componentSpacing: 100,

  // Node repulsion (non overlapping) multiplier
  nodeRepulsion: function( node ){ return 400000; },

  // Node repulsion (overlapping) multiplier
  nodeOverlap: 10,

  // Ideal edge (non nested) length
  idealEdgeLength: function( edge ){ return 10; },

  // Divisor to compute edge forces
  edgeElasticity: function( edge ){ return 100; },

  // Nesting factor (multiplier) to compute ideal edge length for nested edges
  nestingFactor: 5,

  // Gravity force (constant)
  gravity: 80,

  // Maximum number of iterations to perform
  numIter: 1000,

  // Initial temperature (maximum node displacement)
  initialTemp: 200,

  // Cooling factor (how the temperature is reduced between consecutive iterations
  coolingFactor: 0.95,

  // Lower temperature threshold (below this point the layout will end)
  minTemp: 1.0,

  // Whether to use threading to speed up the layout
  useMultitasking: true
};


/**
 * @brief       : constructor
 * @arg options : object containing layout options
 */
function CoseLayout( options ){
  this.options = util.extend( {}, defaults, options );

  this.options.layout = this;
}


/**
 * @brief : runs the layout
 */
CoseLayout.prototype.run = function(){
  var options = this.options;
  var cy      = options.cy;
  var layout  = this;
  var thread  = this.thread;

  if( !thread || thread.stopped() ){
    thread = this.thread = Thread( { disabled: !options.useMultitasking } );
  }

  layout.stopped = false;

  layout.trigger( { type: 'layoutstart', layout: layout } );

  // Set DEBUG - Global variable
  if( true === options.debug ){
    DEBUG = true;
  } else {
    DEBUG = false;
  }

  // Initialize layout info
  var layoutInfo = createLayoutInfo( cy, layout, options );

  // Show LayoutInfo contents if debugging
  if( DEBUG ){
    printLayoutInfo( layoutInfo );
  }

  // If required, randomize node positions
  if (options.randomize) {
    randomizePositions( layoutInfo, cy );
  }

  var startTime = Date.now();
  var refreshRequested = false;
  var refresh = function( rOpts ){
    rOpts = rOpts || {};

    if( refreshRequested && !rOpts.next ){
      return;
    }

    if( !rOpts.force && Date.now() - startTime < options.animationThreshold ){
      return;
    }

    refreshRequested = true;

    util.requestAnimationFrame( function(){
      refreshPositions( layoutInfo, cy, options );

      // Fit the graph if necessary
      if( true === options.fit ){
        cy.fit( options.padding );
      }

      refreshRequested = false;

      if( rOpts.next ){ rOpts.next(); }
    });
  };

  thread.on( 'message', function( e ){
    var layoutNodes = e.message;

    layoutInfo.layoutNodes = layoutNodes;
    refresh();
  } );

  thread.pass( {
    layoutInfo: layoutInfo,
    options: {
      animate: options.animate,
      refresh: options.refresh,
      componentSpacing: options.componentSpacing,
      nodeOverlap: options.nodeOverlap,
      nestingFactor: options.nestingFactor,
      gravity: options.gravity,
      numIter: options.numIter,
      initialTemp: options.initialTemp,
      coolingFactor: options.coolingFactor,
      minTemp: options.minTemp
    }
  } ).run( function( pass ){
    var layoutInfo = pass.layoutInfo;
    var options = pass.options;
    var stopped = false;

    /**
     * @brief          : Performs one iteration of the physical simulation
     * @arg layoutInfo : LayoutInfo object already initialized
     * @arg cy         : Cytoscape object
     * @arg options    : Layout options
     */
    var step = function( layoutInfo, options, step ){
      // var s = "\n\n###############################";
      // s += "\nSTEP: " + step;
      // s += "\n###############################\n";
      // logDebug(s);

      // Calculate node repulsions
      calculateNodeForces( layoutInfo, options );
      // Calculate edge forces
      calculateEdgeForces( layoutInfo, options );
      // Calculate gravity forces
      calculateGravityForces( layoutInfo, options );
      // Propagate forces from parent to child
      propagateForces( layoutInfo, options );
      // Update positions based on calculated forces
      updatePositions( layoutInfo, options );
    };

    /**
     * @brief : Computes the node repulsion forces
     */
    var calculateNodeForces = function( layoutInfo, options ){
      // Go through each of the graphs in graphSet
      // Nodes only repel each other if they belong to the same graph
      // var s = 'calculateNodeForces';
      // logDebug(s);
      for( var i = 0; i < layoutInfo.graphSet.length; i ++ ){
        var graph    = layoutInfo.graphSet[ i ];
        var numNodes = graph.length;

        // s = "Set: " + graph.toString();
        // logDebug(s);

        // Now get all the pairs of nodes
        // Only get each pair once, (A, B) = (B, A)
        for( var j = 0; j < numNodes; j++ ){
          var node1 = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ graph[ j ] ] ];

          for( var k = j + 1; k < numNodes; k++ ){
            var node2 = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ graph[ k ] ] ];

            nodeRepulsion( node1, node2, layoutInfo, options );
          }
        }
      }
    };

    var randomDistance = function( max ){
      return -max + 2 * max * Math.random();
    };

    /**
     * @brief : Compute the node repulsion forces between a pair of nodes
     */
    var nodeRepulsion = function( node1, node2, layoutInfo, options ){
      // var s = "Node repulsion. Node1: " + node1.id + " Node2: " + node2.id;

      var cmptId1 = node1.cmptId;
      var cmptId2 = node2.cmptId;

      if( cmptId1 !== cmptId2 && !layoutInfo.isCompound ){ return; }

      // Get direction of line connecting both node centers
      var directionX = node2.positionX - node1.positionX;
      var directionY = node2.positionY - node1.positionY;
      var maxRandDist = 1;
      // s += "\ndirectionX: " + directionX + ", directionY: " + directionY;

      // If both centers are the same, apply a random force
      if( 0 === directionX && 0 === directionY ){
        directionX = randomDistance( maxRandDist );
        directionY = randomDistance( maxRandDist );
      }

      var overlap = nodesOverlap( node1, node2, directionX, directionY );

      if( overlap > 0 ){
        // s += "\nNodes DO overlap.";
        // s += "\nOverlap: " + overlap;
        // If nodes overlap, repulsion force is proportional
        // to the overlap
        var force    = options.nodeOverlap * overlap;

        // Compute the module and components of the force vector
        var distance = Math.sqrt( directionX * directionX + directionY * directionY );
        // s += "\nDistance: " + distance;
        var forceX   = force * directionX / distance;
        var forceY   = force * directionY / distance;

      } else {
        // s += "\nNodes do NOT overlap.";
        // If there's no overlap, force is inversely proportional
        // to squared distance

        // Get clipping points for both nodes
        var point1 = findClippingPoint( node1, directionX, directionY );
        var point2 = findClippingPoint( node2, -1 * directionX, -1 * directionY );

        // Use clipping points to compute distance
        var distanceX   = point2.x - point1.x;
        var distanceY   = point2.y - point1.y;
        var distanceSqr = distanceX * distanceX + distanceY * distanceY;
        var distance    = Math.sqrt( distanceSqr );
        // s += "\nDistance: " + distance;

        // Compute the module and components of the force vector
        var force  = ( node1.nodeRepulsion + node2.nodeRepulsion ) / distanceSqr;
        var forceX = force * distanceX / distance;
        var forceY = force * distanceY / distance;
      }

      // Apply force
      if( !node1.isLocked ){
        node1.offsetX -= forceX;
        node1.offsetY -= forceY;
      }

      if( !node2.isLocked ){
        node2.offsetX += forceX;
        node2.offsetY += forceY;
      }

      // s += "\nForceX: " + forceX + " ForceY: " + forceY;
      // logDebug(s);

      return;
    };

    /**
     * @brief  : Determines whether two nodes overlap or not
     * @return : Amount of overlapping (0 => no overlap)
     */
    var nodesOverlap = function( node1, node2, dX, dY ){

      if( dX > 0 ){
        var overlapX = node1.maxX - node2.minX;
      } else {
        var overlapX = node2.maxX - node1.minX;
      }

      if( dY > 0 ){
        var overlapY = node1.maxY - node2.minY;
      } else {
        var overlapY = node2.maxY - node1.minY;
      }

      if( overlapX >= 0 && overlapY >= 0 ){
        return Math.sqrt( overlapX * overlapX + overlapY * overlapY );
      } else {
        return 0;
      }
    };

    /**
     * @brief : Finds the point in which an edge (direction dX, dY) intersects
     *          the rectangular bounding box of it's source/target node
     */
    var findClippingPoint = function( node, dX, dY ){

      // Shorcuts
      var X = node.positionX;
      var Y = node.positionY;
      var H = node.height || 1;
      var W = node.width || 1;
      var dirSlope     = dY / dX;
      var nodeSlope    = H / W;

      // var s = 'Computing clipping point of node ' + node.id +
      //   " . Height:  " + H + ", Width: " + W +
      //   "\nDirection " + dX + ", " + dY;
      //
      // Compute intersection
      var res = {};
      do {
        // Case: Vertical direction (up)
        if( 0 === dX && 0 < dY ){
          res.x = X;
          // s += "\nUp direction";
          res.y = Y + H / 2;
          break;
        }

        // Case: Vertical direction (down)
        if( 0 === dX && 0 > dY ){
          res.x = X;
          res.y = Y + H / 2;
          // s += "\nDown direction";
          break;
        }

        // Case: Intersects the right border
        if( 0 < dX &&
        -1 * nodeSlope <= dirSlope &&
        dirSlope <= nodeSlope ){
          res.x = X + W / 2;
          res.y = Y + (W * dY / 2 / dX);
          // s += "\nRightborder";
          break;
        }

        // Case: Intersects the left border
        if( 0 > dX &&
        -1 * nodeSlope <= dirSlope &&
        dirSlope <= nodeSlope ){
          res.x = X - W / 2;
          res.y = Y - (W * dY / 2 / dX);
          // s += "\nLeftborder";
          break;
        }

        // Case: Intersects the top border
        if( 0 < dY &&
        ( dirSlope <= -1 * nodeSlope ||
          dirSlope >= nodeSlope ) ){
          res.x = X + (H * dX / 2 / dY);
          res.y = Y + H / 2;
          // s += "\nTop border";
          break;
        }

        // Case: Intersects the bottom border
        if( 0 > dY &&
        ( dirSlope <= -1 * nodeSlope ||
          dirSlope >= nodeSlope ) ){
          res.x = X - (H * dX / 2 / dY);
          res.y = Y - H / 2;
          // s += "\nBottom border";
          break;
        }

      } while( false);

      // s += "\nClipping point found at " + res.x + ", " + res.y;
      // logDebug(s);
      return res;
    };

    /**
     * @brief : Calculates all edge forces
     */
    var calculateEdgeForces = function( layoutInfo, options ){
      // Iterate over all edges
      for( var i = 0; i < layoutInfo.edgeSize; i++ ){
        // Get edge, source & target nodes
        var edge     = layoutInfo.layoutEdges[ i ];
        var sourceIx = layoutInfo.idToIndex[ edge.sourceId ];
        var source   = layoutInfo.layoutNodes[ sourceIx ];
        var targetIx = layoutInfo.idToIndex[ edge.targetId ];
        var target   = layoutInfo.layoutNodes[ targetIx ];

        // Get direction of line connecting both node centers
        var directionX = target.positionX - source.positionX;
        var directionY = target.positionY - source.positionY;

        // If both centers are the same, do nothing.
        // A random force has already been applied as node repulsion
        if( 0 === directionX && 0 === directionY ){
          return;
        }

        // Get clipping points for both nodes
        var point1 = findClippingPoint( source, directionX, directionY );
        var point2 = findClippingPoint( target, -1 * directionX, -1 * directionY );


        var lx = point2.x - point1.x;
        var ly = point2.y - point1.y;
        var l  = Math.sqrt( lx * lx + ly * ly );

        var force  = Math.pow( edge.idealLength - l, 2 ) / edge.elasticity;

        if( 0 !== l ){
          var forceX = force * lx / l;
          var forceY = force * ly / l;
        } else {
          var forceX = 0;
          var forceY = 0;
        }

        // Add this force to target and source nodes
        if( !source.isLocked ){
          source.offsetX += forceX;
          source.offsetY += forceY;
        }

        if( !target.isLocked ){
          target.offsetX -= forceX;
          target.offsetY -= forceY;
        }

        // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;
        // s += "\nDistance: " + l + " Force: (" + forceX + ", " + forceY + ")";
        // logDebug(s);
      }
    };

    /**
     * @brief : Computes gravity forces for all nodes
     */
    var calculateGravityForces = function( layoutInfo, options ){
      var distThreshold = 1;

      // var s = 'calculateGravityForces';
      // logDebug(s);
      for( var i = 0; i < layoutInfo.graphSet.length; i ++ ){
        var graph    = layoutInfo.graphSet[ i ];
        var numNodes = graph.length;

        // s = "Set: " + graph.toString();
        // logDebug(s);

        // Compute graph center
        if( 0 === i ){
          var centerX   = layoutInfo.clientHeight / 2;
          var centerY   = layoutInfo.clientWidth  / 2;
        } else {
          // Get Parent node for this graph, and use its position as center
          var temp    = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ graph[0] ] ];
          var parent  = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ temp.parentId ] ];
          var centerX = parent.positionX;
          var centerY = parent.positionY;
        }
        // s = "Center found at: " + centerX + ", " + centerY;
        // logDebug(s);

        // Apply force to all nodes in graph
        for( var j = 0; j < numNodes; j++ ){
          var node = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ graph[ j ] ] ];
          // s = "Node: " + node.id;

          if( node.isLocked ){ continue; }

          var dx = centerX - node.positionX;
          var dy = centerY - node.positionY;
          var d  = Math.sqrt( dx * dx + dy * dy );
          if( d > distThreshold ){
            var fx = options.gravity * dx / d;
            var fy = options.gravity * dy / d;
            node.offsetX += fx;
            node.offsetY += fy;
            // s += ": Applied force: " + fx + ", " + fy;
          } else {
            // s += ": skypped since it's too close to center";
          }
          // logDebug(s);
        }
      }
    };

    /**
     * @brief          : This function propagates the existing offsets from
     *                   parent nodes to its descendents.
     * @arg layoutInfo : layoutInfo Object
     * @arg cy         : cytoscape Object
     * @arg options    : Layout options
     */
    var propagateForces = function( layoutInfo, options ){
      // Inline implementation of a queue, used for traversing the graph in BFS order
      var queue = [];
      var start = 0;   // Points to the start the queue
      var end   = -1;  // Points to the end of the queue

      // logDebug('propagateForces');

      // Start by visiting the nodes in the root graph
      queue.push.apply( queue, layoutInfo.graphSet[0] );
      end += layoutInfo.graphSet[0].length;

      // Traverse the graph, level by level,
      while( start <= end ){
        // Get the node to visit and remove it from queue
        var nodeId    = queue[ start++ ];
        var nodeIndex = layoutInfo.idToIndex[ nodeId ];
        var node      = layoutInfo.layoutNodes[ nodeIndex ];
        var children  = node.children;

        // We only need to process the node if it's compound
        if( 0 < children.length && !node.isLocked ){
          var offX = node.offsetX;
          var offY = node.offsetY;

          // var s = "Propagating offset from parent node : " + node.id +
          //   ". OffsetX: " + offX + ". OffsetY: " + offY;
          // s += "\n Children: " + children.toString();
          // logDebug(s);

          for( var i = 0; i < children.length; i++ ){
            var childNode = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ children[ i ] ] ];
            // Propagate offset
            childNode.offsetX += offX;
            childNode.offsetY += offY;
            // Add children to queue to be visited
            queue[ ++end ] = children[ i ];
          }

          // Reset parent offsets
          node.offsetX = 0;
          node.offsetY = 0;
        }

      }
    };

    /**
     * @brief : Updates the layout model positions, based on
     *          the accumulated forces
     */
    var updatePositions = function( layoutInfo, options ){
      // var s = 'Updating positions';
      // logDebug(s);

      // Reset boundaries for compound nodes
      for( var i = 0; i < layoutInfo.nodeSize; i++ ){
        var n = layoutInfo.layoutNodes[ i ];
        if( 0 < n.children.length ){
          // logDebug("Resetting boundaries of compound node: " + n.id);
          n.maxX = undefined;
          n.minX = undefined;
          n.maxY = undefined;
          n.minY = undefined;
        }
      }

      for( var i = 0; i < layoutInfo.nodeSize; i++ ){
        var n = layoutInfo.layoutNodes[ i ];
        if( 0 < n.children.length || n.isLocked ){
          // No need to set compound or locked node position
          // logDebug("Skipping position update of node: " + n.id);
          continue;
        }
        // s = "Node: " + n.id + " Previous position: (" +
        // n.positionX + ", " + n.positionY + ").";

        // Limit displacement in order to improve stability
        var tempForce = limitForce( n.offsetX, n.offsetY, layoutInfo.temperature );
        n.positionX += tempForce.x;
        n.positionY += tempForce.y;
        n.offsetX = 0;
        n.offsetY = 0;
        n.minX    = n.positionX - n.width;
        n.maxX    = n.positionX + n.width;
        n.minY    = n.positionY - n.height;
        n.maxY    = n.positionY + n.height;
        // s += " New Position: (" + n.positionX + ", " + n.positionY + ").";
        // logDebug(s);

        // Update ancestry boudaries
        updateAncestryBoundaries( n, layoutInfo );
      }

      // Update size, position of compund nodes
      for( var i = 0; i < layoutInfo.nodeSize; i++ ){
        var n = layoutInfo.layoutNodes[ i ];
        if( 0 < n.children.length && !n.isLocked ){
          n.positionX = (n.maxX + n.minX) / 2;
          n.positionY = (n.maxY + n.minY) / 2;
          n.width     = n.maxX - n.minX;
          n.height    = n.maxY - n.minY;
          // s = "Updating position, size of compound node " + n.id;
          // s += "\nPositionX: " + n.positionX + ", PositionY: " + n.positionY;
          // s += "\nWidth: " + n.width + ", Height: " + n.height;
          // logDebug(s);
        }
      }
    };

    /**
     * @brief : Limits a force (forceX, forceY) to be not
     *          greater (in modulo) than max.
     8          Preserves force direction.
     */
    var limitForce = function( forceX, forceY, max ){
      // var s = "Limiting force: (" + forceX + ", " + forceY + "). Max: " + max;
      var force = Math.sqrt( forceX * forceX + forceY * forceY );

      if( force > max ){
        var res = {
          x: max * forceX / force,
          y: max * forceY / force
        };

      } else {
        var res = {
          x: forceX,
          y: forceY
        };
      }

      // s += ".\nResult: (" + res.x + ", " + res.y + ")";
      // logDebug(s);

      return res;
    };

    /**
     * @brief : Function used for keeping track of compound node
     *          sizes, since they should bound all their subnodes.
     */
    var updateAncestryBoundaries = function( node, layoutInfo ){
      // var s = "Propagating new position/size of node " + node.id;
      var parentId = node.parentId;
      if( null == parentId ){
        // If there's no parent, we are done
        // s += ". No parent node.";
        // logDebug(s);
        return;
      }

      // Get Parent Node
      var p = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ parentId ] ];
      var flag = false;

      // MaxX
      if( null == p.maxX || node.maxX + p.padRight > p.maxX ){
        p.maxX = node.maxX + p.padRight;
        flag = true;
        // s += "\nNew maxX for parent node " + p.id + ": " + p.maxX;
      }

      // MinX
      if( null == p.minX || node.minX - p.padLeft < p.minX ){
        p.minX = node.minX - p.padLeft;
        flag = true;
        // s += "\nNew minX for parent node " + p.id + ": " + p.minX;
      }

      // MaxY
      if( null == p.maxY || node.maxY + p.padBottom > p.maxY ){
        p.maxY = node.maxY + p.padBottom;
        flag = true;
        // s += "\nNew maxY for parent node " + p.id + ": " + p.maxY;
      }

      // MinY
      if( null == p.minY || node.minY - p.padTop < p.minY ){
        p.minY = node.minY - p.padTop;
        flag = true;
        // s += "\nNew minY for parent node " + p.id + ": " + p.minY;
      }

      // If updated boundaries, propagate changes upward
      if( flag ){
        // logDebug(s);
        return updateAncestryBoundaries( p, layoutInfo );
      }

      // s += ". No changes in boundaries/position of parent node " + p.id;
      // logDebug(s);
      return;
    };

    var separateComponents = function( layutInfo, options ){
      var nodes = layoutInfo.layoutNodes;
      var components = [];

      for( var i = 0; i < nodes.length; i++ ){
        var node = nodes[ i ];
        var cid = node.cmptId;
        var component = components[ cid ] = components[ cid ] || [];

        component.push( node );
      }

      var totalA = 0;

      for( var i = 0; i < components.length; i++ ){
        var c = components[ i ];

        if( !c ){ continue; }

        c.x1 = Infinity;
        c.x2 = -Infinity;
        c.y1 = Infinity;
        c.y2 = -Infinity;

        for( var j = 0; j < c.length; j++ ){
          var n = c[ j ];

          c.x1 = Math.min( c.x1, n.positionX - n.width / 2 );
          c.x2 = Math.max( c.x2, n.positionX + n.width / 2 );
          c.y1 = Math.min( c.y1, n.positionY - n.height / 2 );
          c.y2 = Math.max( c.y2, n.positionY + n.height / 2 );
        }

        c.w = c.x2 - c.x1;
        c.h = c.y2 - c.y1;

        totalA += c.w * c.h;
      }

      components.sort( function( c1, c2 ){
        return c2.w * c2.h - c1.w * c1.h;
      } );

      var x = 0;
      var y = 0;
      var usedW = 0;
      var rowH = 0;
      var maxRowW = Math.sqrt( totalA ) * layoutInfo.clientWidth / layoutInfo.clientHeight;

      for( var i = 0; i < components.length; i++ ){
        var c = components[ i ];

        if( !c ){ continue; }

        for( var j = 0; j < c.length; j++ ){
          var n = c[ j ];

          if( !n.isLocked ){
            n.positionX += x;
            n.positionY += y;
          }
        }

        x += c.w + options.componentSpacing;
        usedW += c.w + options.componentSpacing;
        rowH = Math.max( rowH, c.h );

        if( usedW > maxRowW ){
          y += rowH + options.componentSpacing;
          x = 0;
          usedW = 0;
          rowH = 0;
        }
      }
    };

    var mainLoop = function( i ){
      if( stopped ){
        // logDebug("Layout manually stopped. Stopping computation in step " + i);
        return false;
      }

      // Do one step in the phisical simulation
      step( layoutInfo, options, i );

      // Update temperature
      layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor;
      // logDebug("New temperature: " + layoutInfo.temperature);

      if( layoutInfo.temperature < options.minTemp ){
        // logDebug("Temperature drop below minimum threshold. Stopping computation in step " + i);
        return false;
      }

      return true;
    };

    var i = 0;
    var loopRet;

    do {
      var f = 0;

      while( f < options.refresh && i < options.numIter ){
        var loopRet = mainLoop( i );
        if( !loopRet ){ break; }

        f++;
        i++;
      }

      if( options.animate ){
        broadcast( layoutInfo.layoutNodes ); // eslint-disable-line no-undef
      }

    } while( loopRet && i + 1 < options.numIter );

    separateComponents( layoutInfo, options );

    return layoutInfo;
  } ).then( function( layoutInfoUpdated ){
    layoutInfo.layoutNodes = layoutInfoUpdated.layoutNodes; // get the positions

    thread.stop();
    done();
  } );

  var done = function(){
    refresh({
      force: true,
      next: function(){
        // Layout has finished
        layout.one('layoutstop', options.stop);
        layout.trigger({ type: 'layoutstop', layout: layout });
      }
    });
  };

  return this; // chaining
};


/**
 * @brief : called on continuous layouts to stop them before they finish
 */
CoseLayout.prototype.stop = function(){
  this.stopped = true;

  if( this.thread ){
    this.thread.stop();
  }

  this.trigger( 'layoutstop' );

  return this; // chaining
};

CoseLayout.prototype.destroy = function(){
  if( this.thread ){
    this.thread.stop();
  }

  return this; // chaining
};


/**
 * @brief     : Creates an object which is contains all the data
 *              used in the layout process
 * @arg cy    : cytoscape.js object
 * @return    : layoutInfo object initialized
 */
var createLayoutInfo = function( cy, layout, options ){
  // Shortcut
  var edges = options.eles.edges();
  var nodes = options.eles.nodes();

  var layoutInfo   = {
    isCompound: cy.hasCompoundNodes(),
    layoutNodes: [],
    idToIndex: {},
    nodeSize: nodes.size(),
    graphSet: [],
    indexToGraph: [],
    layoutEdges: [],
    edgeSize: edges.size(),
    temperature: options.initialTemp,
    clientWidth: cy.width(),
    clientHeight: cy.width(),
    boundingBox: math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
                     x1: 0, y1: 0, w: cy.width(), h: cy.height()
                   } )
  };

  var components = options.eles.components();
  var id2cmptId = {};

  for( var i = 0; i < components.length; i++ ){
    var component = components[ i ];

    for( var j = 0; j < component.length; j++ ){
      var node = component[ j ];

      id2cmptId[ node.id() ] = i;
    }
  }

  // Iterate over all nodes, creating layout nodes
  for( var i = 0; i < layoutInfo.nodeSize; i++ ){
    var n = nodes[ i ];
    var nbb = n.boundingBox();

    var tempNode        = {};
    tempNode.isLocked   = n.locked();
    tempNode.id         = n.data( 'id' );
    tempNode.parentId   = n.data( 'parent' );
    tempNode.cmptId     = id2cmptId[ n.id() ];
    tempNode.children   = [];
    tempNode.positionX  = n.position( 'x' );
    tempNode.positionY  = n.position( 'y' );
    tempNode.offsetX    = 0;
    tempNode.offsetY    = 0;
    tempNode.height     = nbb.w;
    tempNode.width      = nbb.h;
    tempNode.maxX       = tempNode.positionX + tempNode.width  / 2;
    tempNode.minX       = tempNode.positionX - tempNode.width  / 2;
    tempNode.maxY       = tempNode.positionY + tempNode.height / 2;
    tempNode.minY       = tempNode.positionY - tempNode.height / 2;
    tempNode.padLeft    = parseFloat( n.style( 'padding-left' ) );
    tempNode.padRight   = parseFloat( n.style( 'padding-right' ) );
    tempNode.padTop     = parseFloat( n.style( 'padding-top' ) );
    tempNode.padBottom  = parseFloat( n.style( 'padding-bottom' ) );

    // forces
    tempNode.nodeRepulsion = is.fn( options.nodeRepulsion ) ? options.nodeRepulsion.call( n, n ) : options.nodeRepulsion;

    // Add new node
    layoutInfo.layoutNodes.push( tempNode );
    // Add entry to id-index map
    layoutInfo.idToIndex[ tempNode.id ] = i;
  }

  // Inline implementation of a queue, used for traversing the graph in BFS order
  var queue = [];
  var start = 0;   // Points to the start the queue
  var end   = -1;  // Points to the end of the queue

  var tempGraph = [];

  // Second pass to add child information and
  // initialize queue for hierarchical traversal
  for( var i = 0; i < layoutInfo.nodeSize; i++ ){
    var n = layoutInfo.layoutNodes[ i ];
    var p_id = n.parentId;
    // Check if node n has a parent node
    if( null != p_id ){
      // Add node Id to parent's list of children
      layoutInfo.layoutNodes[ layoutInfo.idToIndex[ p_id ] ].children.push( n.id );
    } else {
      // If a node doesn't have a parent, then it's in the root graph
      queue[ ++end ] = n.id;
      tempGraph.push( n.id );
    }
  }

  // Add root graph to graphSet
  layoutInfo.graphSet.push( tempGraph );

  // Traverse the graph, level by level,
  while( start <= end ){
    // Get the node to visit and remove it from queue
    var node_id  = queue[ start++ ];
    var node_ix  = layoutInfo.idToIndex[ node_id ];
    var node     = layoutInfo.layoutNodes[ node_ix ];
    var children = node.children;
    if( children.length > 0 ){
      // Add children nodes as a new graph to graph set
      layoutInfo.graphSet.push( children );
      // Add children to que queue to be visited
      for( var i = 0; i < children.length; i++ ){
        queue[ ++end ] = children[ i ];
      }
    }
  }

  // Create indexToGraph map
  for( var i = 0; i < layoutInfo.graphSet.length; i++ ){
    var graph = layoutInfo.graphSet[ i ];
    for( var j = 0; j < graph.length; j++ ){
      var index = layoutInfo.idToIndex[ graph[ j ] ];
      layoutInfo.indexToGraph[ index ] = i;
    }
  }

  // Iterate over all edges, creating Layout Edges
  for( var i = 0; i < layoutInfo.edgeSize; i++ ){
    var e = edges[ i ];
    var tempEdge = {};
    tempEdge.id       = e.data( 'id' );
    tempEdge.sourceId = e.data( 'source' );
    tempEdge.targetId = e.data( 'target' );

    // Compute ideal length
    var idealLength = is.fn( options.idealEdgeLength ) ? options.idealEdgeLength.call( e, e ) : options.idealEdgeLength;
    var elasticity = is.fn( options.edgeElasticity ) ? options.edgeElasticity.call( e, e ) : options.edgeElasticity;

    // Check if it's an inter graph edge
    var sourceIx    = layoutInfo.idToIndex[ tempEdge.sourceId ];
    var targetIx    = layoutInfo.idToIndex[ tempEdge.targetId ];
    var sourceGraph = layoutInfo.indexToGraph[ sourceIx ];
    var targetGraph = layoutInfo.indexToGraph[ targetIx ];

    if( sourceGraph != targetGraph ){
      // Find lowest common graph ancestor
      var lca = findLCA( tempEdge.sourceId, tempEdge.targetId, layoutInfo );

      // Compute sum of node depths, relative to lca graph
      var lcaGraph = layoutInfo.graphSet[ lca ];
      var depth    = 0;

      // Source depth
      var tempNode = layoutInfo.layoutNodes[ sourceIx ];
      while( -1 === lcaGraph.indexOf( tempNode.id ) ){
        tempNode = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ tempNode.parentId ] ];
        depth++;
      }

      // Target depth
      tempNode = layoutInfo.layoutNodes[ targetIx ];
      while( -1 === lcaGraph.indexOf( tempNode.id ) ){
        tempNode = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ tempNode.parentId ] ];
        depth++;
      }

      // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +
      //  ". Index: " + lca + " Contents: " + lcaGraph.toString() +
      //  ". Depth: " + depth);

      // Update idealLength
      idealLength *= depth * options.nestingFactor;
    }

    tempEdge.idealLength = idealLength;
    tempEdge.elasticity = elasticity;

    layoutInfo.layoutEdges.push( tempEdge );
  }

  // Finally, return layoutInfo object
  return layoutInfo;
};


/**
 * @brief : This function finds the index of the lowest common
 *          graph ancestor between 2 nodes in the subtree
 *          (from the graph hierarchy induced tree) whose
 *          root is graphIx
 *
 * @arg node1: node1's ID
 * @arg node2: node2's ID
 * @arg layoutInfo: layoutInfo object
 *
 */
var findLCA = function( node1, node2, layoutInfo ){
  // Find their common ancester, starting from the root graph
  var res = findLCA_aux( node1, node2, 0, layoutInfo );
  if( 2 > res.count ){
    // If aux function couldn't find the common ancester,
    // then it is the root graph
    return 0;
  } else {
    return res.graph;
  }
};


/**
 * @brief          : Auxiliary function used for LCA computation
 *
 * @arg node1      : node1's ID
 * @arg node2      : node2's ID
 * @arg graphIx    : subgraph index
 * @arg layoutInfo : layoutInfo object
 *
 * @return         : object of the form {count: X, graph: Y}, where:
 *                   X is the number of ancesters (max: 2) found in
 *                   graphIx (and it's subgraphs),
 *                   Y is the graph index of the lowest graph containing
 *                   all X nodes
 */
var findLCA_aux = function( node1, node2, graphIx, layoutInfo ){
  var graph = layoutInfo.graphSet[ graphIx ];
  // If both nodes belongs to graphIx
  if( -1 < graph.indexOf( node1 ) && -1 < graph.indexOf( node2 ) ){
    return {count: 2, graph: graphIx};
  }

  // Make recursive calls for all subgraphs
  var c = 0;
  for( var i = 0; i < graph.length; i++ ){
    var nodeId   = graph[ i ];
    var nodeIx   = layoutInfo.idToIndex[ nodeId ];
    var children = layoutInfo.layoutNodes[ nodeIx ].children;

    // If the node has no child, skip it
    if( 0 === children.length ){
      continue;
    }

    var childGraphIx = layoutInfo.indexToGraph[ layoutInfo.idToIndex[ children[0] ] ];
    var result = findLCA_aux( node1, node2, childGraphIx, layoutInfo );
    if( 0 === result.count ){
      // Neither node1 nor node2 are present in this subgraph
      continue;
    } else if( 1 === result.count ){
      // One of (node1, node2) is present in this subgraph
      c++;
      if( 2 === c ){
        // We've already found both nodes, no need to keep searching
        break;
      }
    } else {
      // Both nodes are present in this subgraph
      return result;
    }
  }

  return {count: c, graph: graphIx};
};


/**
 * @brief: printsLayoutInfo into js console
 *         Only used for debbuging
 */
var printLayoutInfo = function( layoutInfo ){
  /* eslint-disable */

  if( !DEBUG ){
    return;
  }
  console.debug( 'layoutNodes:' );
  for( var i = 0; i < layoutInfo.nodeSize; i++ ){
    var n = layoutInfo.layoutNodes[ i ];
    var s =
    '\nindex: '     + i +
    '\nId: '        + n.id +
    '\nChildren: '  + n.children.toString() +
    '\nparentId: '  + n.parentId  +
    '\npositionX: ' + n.positionX +
    '\npositionY: ' + n.positionY +
    '\nOffsetX: ' + n.offsetX +
    '\nOffsetY: ' + n.offsetY +
    '\npadLeft: ' + n.padLeft +
    '\npadRight: ' + n.padRight +
    '\npadTop: ' + n.padTop +
    '\npadBottom: ' + n.padBottom;

    console.debug( s );
  }

  console.debug( 'idToIndex' );
  for( var i in layoutInfo.idToIndex ){
    console.debug( 'Id: ' + i + '\nIndex: ' + layoutInfo.idToIndex[ i ] );
  }

  console.debug( 'Graph Set' );
  var set = layoutInfo.graphSet;
  for( var i = 0; i < set.length; i ++ ){
    console.debug( 'Set : ' + i + ': ' + set[ i ].toString() );
  }

  var s = 'IndexToGraph';
  for( var i = 0; i < layoutInfo.indexToGraph.length; i ++ ){
    s += '\nIndex : ' + i + ' Graph: ' + layoutInfo.indexToGraph[ i ];
  }
  console.debug( s );

  s = 'Layout Edges';
  for( var i = 0; i < layoutInfo.layoutEdges.length; i++ ){
    var e = layoutInfo.layoutEdges[ i ];
    s += '\nEdge Index: ' + i + ' ID: ' + e.id +
    ' SouceID: ' + e.sourceId + ' TargetId: ' + e.targetId +
    ' Ideal Length: ' + e.idealLength;
  }
  console.debug( s );

  s =  'nodeSize: ' + layoutInfo.nodeSize;
  s += '\nedgeSize: ' + layoutInfo.edgeSize;
  s += '\ntemperature: ' + layoutInfo.temperature;
  console.debug( s );

  return;
  /* eslint-enable */
};


/**
 * @brief : Randomizes the position of all nodes
 */
var randomizePositions = function( layoutInfo, cy ){
  var width     = layoutInfo.clientWidth;
  var height    = layoutInfo.clientHeight;

  for( var i = 0; i < layoutInfo.nodeSize; i++ ){
    var n = layoutInfo.layoutNodes[ i ];

    // No need to randomize compound nodes or locked nodes
    if( 0 === n.children.length && !n.isLocked ){
      n.positionX = Math.random() * width;
      n.positionY = Math.random() * height;
    }
  }
};


/**
 * @brief          : Updates the positions of nodes in the network
 * @arg layoutInfo : LayoutInfo object
 * @arg cy         : Cytoscape object
 * @arg options    : Layout options
 */
var refreshPositions = function( layoutInfo, cy, options ){
  // var s = 'Refreshing positions';
  // logDebug(s);

  var layout = options.layout;
  var nodes = options.eles.nodes();
  var bb = layoutInfo.boundingBox;
  var coseBB = { x1: Infinity, x2: -Infinity, y1: Infinity, y2: -Infinity };

  if( options.boundingBox ){
    nodes.forEach( function( node ){
      var lnode = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ node.data( 'id' ) ] ];

      coseBB.x1 = Math.min( coseBB.x1, lnode.positionX );
      coseBB.x2 = Math.max( coseBB.x2, lnode.positionX );

      coseBB.y1 = Math.min( coseBB.y1, lnode.positionY );
      coseBB.y2 = Math.max( coseBB.y2, lnode.positionY );
    } );

    coseBB.w = coseBB.x2 - coseBB.x1;
    coseBB.h = coseBB.y2 - coseBB.y1;
  }

  nodes.positions( function( i, ele ){
    var lnode = layoutInfo.layoutNodes[ layoutInfo.idToIndex[ ele.data( 'id' ) ] ];
    // s = "Node: " + lnode.id + ". Refreshed position: (" +
    // lnode.positionX + ", " + lnode.positionY + ").";
    // logDebug(s);

    if( options.boundingBox ){ // then add extra bounding box constraint
      var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
      var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;

      return {
        x: bb.x1 + pctX * bb.w,
        y: bb.y1 + pctY * bb.h
      };
    } else {
      return {
        x: lnode.positionX,
        y: lnode.positionY
      };
    }
  } );

  // Trigger layoutReady only on first call
  if( true !== layoutInfo.ready ){
    // s = 'Triggering layoutready';
    // logDebug(s);
    layoutInfo.ready = true;
    layout.one( 'layoutready', options.ready );
    layout.trigger( { type: 'layoutready', layout: this } );
  }
};

/**
 * @brief : Logs a debug message in JS console, if DEBUG is ON
 */
// var logDebug = function(text) {
//   if (DEBUG) {
//     console.debug(text);
//   }
// };

module.exports = CoseLayout;

},{"../../is":86,"../../math":88,"../../thread":102,"../../util":104}],55:[function(require,module,exports){
'use strict';

var util = require( '../../util' );
var math = require( '../../math' );

var defaults = {
  fit: true, // whether to fit the viewport to the graph
  padding: 30, // padding used on fit
  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
  avoidOverlapPadding: 10, // extra spacing around nodes when avoidOverlap: true
  condense: false, // uses all available space on false, uses minimal space on true
  rows: undefined, // force num of rows in the grid
  cols: undefined, // force num of columns in the grid
  position: function( node ){}, // returns { row, col } for element
  sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
  animate: false, // whether to transition the node positions
  animationDuration: 500, // duration of animation in ms if enabled
  animationEasing: undefined, // easing of animation if enabled
  ready: undefined, // callback on layoutready
  stop: undefined // callback on layoutstop
};

function GridLayout( options ){
  this.options = util.extend( {}, defaults, options );
}

GridLayout.prototype.run = function(){
  var params = this.options;
  var options = params;

  var cy = params.cy;
  var eles = options.eles;
  var nodes = eles.nodes().not( ':parent' );

  if( options.sort ){
    nodes = nodes.sort( options.sort );
  }

  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
    x1: 0, y1: 0, w: cy.width(), h: cy.height()
  } );

  if( bb.h === 0 || bb.w === 0 ){
    nodes.layoutPositions( this, options, function(){
      return { x: bb.x1, y: bb.y1 };
    } );

  } else {

    // width/height * splits^2 = cells where splits is number of times to split width
    var cells = nodes.size();
    var splits = Math.sqrt( cells * bb.h / bb.w );
    var rows = Math.round( splits );
    var cols = Math.round( bb.w / bb.h * splits );

    var small = function( val ){
      if( val == null ){
        return Math.min( rows, cols );
      } else {
        var min = Math.min( rows, cols );
        if( min == rows ){
          rows = val;
        } else {
          cols = val;
        }
      }
    };

    var large = function( val ){
      if( val == null ){
        return Math.max( rows, cols );
      } else {
        var max = Math.max( rows, cols );
        if( max == rows ){
          rows = val;
        } else {
          cols = val;
        }
      }
    };

    var oRows = options.rows;
    var oCols = options.cols != null ? options.cols : options.columns;

    // if rows or columns were set in options, use those values
    if( oRows != null && oCols != null ){
      rows = oRows;
      cols = oCols;
    } else if( oRows != null && oCols == null ){
      rows = oRows;
      cols = Math.ceil( cells / rows );
    } else if( oRows == null && oCols != null ){
      cols = oCols;
      rows = Math.ceil( cells / cols );
    }

    // otherwise use the automatic values and adjust accordingly

    // if rounding was up, see if we can reduce rows or columns
    else if( cols * rows > cells ){
      var sm = small();
      var lg = large();

      // reducing the small side takes away the most cells, so try it first
      if( (sm - 1) * lg >= cells ){
        small( sm - 1 );
      } else if( (lg - 1) * sm >= cells ){
        large( lg - 1 );
      }
    } else {

      // if rounding was too low, add rows or columns
      while( cols * rows < cells ){
        var sm = small();
        var lg = large();

        // try to add to larger side first (adds less in multiplication)
        if( (lg + 1) * sm >= cells ){
          large( lg + 1 );
        } else {
          small( sm + 1 );
        }
      }
    }

    var cellWidth = bb.w / cols;
    var cellHeight = bb.h / rows;

    if( options.condense ){
      cellWidth = 0;
      cellHeight = 0;
    }

    if( options.avoidOverlap ){
      for( var i = 0; i < nodes.length; i++ ){
        var node = nodes[ i ];
        var pos = node._private.position;

        if( pos.x == null || pos.y == null ){ // for bb
          pos.x = 0;
          pos.y = 0;
        }

        var nbb = node.boundingBox();
        var p = options.avoidOverlapPadding;

        var w = nbb.w + p;
        var h = nbb.h + p;

        cellWidth = Math.max( cellWidth, w );
        cellHeight = Math.max( cellHeight, h );
      }
    }

    var cellUsed = {}; // e.g. 'c-0-2' => true

    var used = function( row, col ){
      return cellUsed[ 'c-' + row + '-' + col ] ? true : false;
    };

    var use = function( row, col ){
      cellUsed[ 'c-' + row + '-' + col ] = true;
    };

    // to keep track of current cell position
    var row = 0;
    var col = 0;
    var moveToNextCell = function(){
      col++;
      if( col >= cols ){
        col = 0;
        row++;
      }
    };

    // get a cache of all the manual positions
    var id2manPos = {};
    for( var i = 0; i < nodes.length; i++ ){
      var node = nodes[ i ];
      var rcPos = options.position( node );

      if( rcPos && (rcPos.row !== undefined || rcPos.col !== undefined) ){ // must have at least row or col def'd
        var pos = {
          row: rcPos.row,
          col: rcPos.col
        };

        if( pos.col === undefined ){ // find unused col
          pos.col = 0;

          while( used( pos.row, pos.col ) ){
            pos.col++;
          }
        } else if( pos.row === undefined ){ // find unused row
          pos.row = 0;

          while( used( pos.row, pos.col ) ){
            pos.row++;
          }
        }

        id2manPos[ node.id() ] = pos;
        use( pos.row, pos.col );
      }
    }

    var getPos = function( i, element ){
      var x, y;

      if( element.locked() || element.isParent() ){
        return false;
      }

      // see if we have a manual position set
      var rcPos = id2manPos[ element.id() ];
      if( rcPos ){
        x = rcPos.col * cellWidth + cellWidth / 2 + bb.x1;
        y = rcPos.row * cellHeight + cellHeight / 2 + bb.y1;

      } else { // otherwise set automatically

        while( used( row, col ) ){
          moveToNextCell();
        }

        x = col * cellWidth + cellWidth / 2 + bb.x1;
        y = row * cellHeight + cellHeight / 2 + bb.y1;
        use( row, col );

        moveToNextCell();
      }

      return { x: x, y: y };

    };

    nodes.layoutPositions( this, options, getPos );
  }

  return this; // chaining

};

module.exports = GridLayout;

},{"../../math":88,"../../util":104}],56:[function(require,module,exports){
'use strict';

module.exports = [
  { name: 'breadthfirst', impl: require( './breadthfirst' ) },
  { name: 'circle', impl: require( './circle' ) },
  { name: 'concentric',impl: require( './concentric' ) },
  { name: 'cose', impl: require( './cose' ) },
  { name: 'grid', impl: require( './grid' ) },
  { name: 'null', impl: require( './null' ) },
  { name: 'preset', impl: require( './preset' ) },
  { name: 'random', impl: require( './random' ) }
];

},{"./breadthfirst":51,"./circle":52,"./concentric":53,"./cose":54,"./grid":55,"./null":57,"./preset":58,"./random":59}],57:[function(require,module,exports){
'use strict';

var util = require( '../../util' );

// default layout options
var defaults = {
  ready: function(){}, // on layoutready
  stop: function(){} // on layoutstop
};

// constructor
// options : object containing layout options
function NullLayout( options ){
  this.options = util.extend( {}, defaults, options );
}

// runs the layout
NullLayout.prototype.run = function(){
  var options = this.options;
  var eles = options.eles; // elements to consider in the layout
  var layout = this;

  // cy is automatically populated for us in the constructor
  var cy = options.cy; // jshint ignore:line

  layout.trigger( 'layoutstart' );

  // puts all nodes at (0, 0)
  eles.nodes().positions( function(){
    return {
      x: 0,
      y: 0
    };
  } );

  // trigger layoutready when each node has had its position set at least once
  layout.one( 'layoutready', options.ready );
  layout.trigger( 'layoutready' );

  // trigger layoutstop when the layout stops (e.g. finishes)
  layout.one( 'layoutstop', options.stop );
  layout.trigger( 'layoutstop' );

  return this; // chaining
};

// called on continuous layouts to stop them before they finish
NullLayout.prototype.stop = function(){
  return this; // chaining
};

module.exports = NullLayout;

},{"../../util":104}],58:[function(require,module,exports){
'use strict';

var util = require( '../../util' );
var is = require( '../../is' );

var defaults = {
  positions: undefined, // map of (node id) => (position obj); or function(node){ return somPos; }
  zoom: undefined, // the zoom level to set (prob want fit = false if set)
  pan: undefined, // the pan level to set (prob want fit = false if set)
  fit: true, // whether to fit to viewport
  padding: 30, // padding on fit
  animate: false, // whether to transition the node positions
  animationDuration: 500, // duration of animation in ms if enabled
  animationEasing: undefined, // easing of animation if enabled
  ready: undefined, // callback on layoutready
  stop: undefined // callback on layoutstop
};

function PresetLayout( options ){
  this.options = util.extend( {}, defaults, options );
}

PresetLayout.prototype.run = function(){
  var options = this.options;
  var eles = options.eles;

  var nodes = eles.nodes();
  var posIsFn = is.fn( options.positions );

  function getPosition( node ){
    if( options.positions == null ){
      return null;
    }

    if( posIsFn ){
      return options.positions.apply( node, [ node ] );
    }

    var pos = options.positions[ node._private.data.id ];

    if( pos == null ){
      return null;
    }

    return pos;
  }

  nodes.layoutPositions( this, options, function( i, node ){
    var position = getPosition( node );

    if( node.locked() || position == null ){
      return false;
    }

    return position;
  } );

  return this; // chaining
};

module.exports = PresetLayout;

},{"../../is":86,"../../util":104}],59:[function(require,module,exports){
'use strict';

var util = require( '../../util' );
var math = require( '../../math' );

var defaults = {
  fit: true, // whether to fit to viewport
  padding: 30, // fit padding
  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  animate: false, // whether to transition the node positions
  animationDuration: 500, // duration of animation in ms if enabled
  animationEasing: undefined, // easing of animation if enabled
  ready: undefined, // callback on layoutready
  stop: undefined // callback on layoutstop
};

function RandomLayout( options ){
  this.options = util.extend( {}, defaults, options );
}

RandomLayout.prototype.run = function(){
  var options = this.options;
  var cy = options.cy;
  var eles = options.eles;
  var nodes = eles.nodes().not( ':parent' );

  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
    x1: 0, y1: 0, w: cy.width(), h: cy.height()
  } );

  var getPos = function( i, node ){
    return {
      x: bb.x1 + Math.round( Math.random() * bb.w ),
      y: bb.y1 + Math.round( Math.random() * bb.h )
    };
  };

  nodes.layoutPositions( this, options, getPos );

  return this; // chaining
};

module.exports = RandomLayout;

},{"../../math":88,"../../util":104}],60:[function(require,module,exports){
'use strict';

var math = require( '../../../math' );
var is = require( '../../../is' );
var util = require( '../../../util' );
var sbgn = require( '../../../sbgn' ); 

var BRp = {};

BRp.arrowShapes = {};

BRp.arrowShapeWidth = 0.3;

BRp.registerArrowShapes = function(){
  var arrowShapes = this.arrowShapes = BRp.arrowShapes;
  var renderer = this;

  // Contract for arrow shapes:
  // 0, 0 is arrow tip
  // (0, 1) is direction towards node
  // (1, 0) is right
  //
  // functional api:
  // collide: check x, y in shape
  // roughCollide: called before collide, no false negatives
  // draw: draw
  // spacing: dist(arrowTip, nodeBoundary)
  // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip

  var bbCollide = function( x, y, size, angle, translation, padding ){
    var x1 = translation.x - size / 2 - padding;
    var x2 = translation.x + size / 2 + padding;
    var y1 = translation.y - size / 2 - padding;
    var y2 = translation.y + size / 2 + padding;

    var inside = (x1 <= x && x <= x2) && (y1 <= y && y <= y2);

    return inside;
  };

  var transform = function( x, y, size, angle, translation ){
    var xRotated = x * Math.cos( angle ) - y * Math.sin( angle );
    var yRotated = x * Math.sin( angle ) + y * Math.cos( angle );

    var xScaled = xRotated * size;
    var yScaled = yRotated * size;

    var xTranslated = xScaled + translation.x;
    var yTranslated = yScaled + translation.y;

    return {
      x: xTranslated,
      y: yTranslated
    };
  };

  var transformPoints = function( pts, size, angle, translation ){
    var retPts = [];

    for( var i = 0; i < pts.length; i += 2 ){
      var x = pts[ i ];
      var y = pts[ i + 1];

      retPts.push( transform( x, y, size, angle, translation ) );
    }

    return retPts;
  };

  var pointsToArr = function( pts ){
    var ret = [];

    for( var i = 0; i < pts.length; i++ ){
      var p = pts[ i ];

      ret.push( p.x, p.y );
    }

    return ret;
  };

  var defineArrowShape = function( name, defn ){
    if( is.string( defn ) ){
      defn = arrowShapes[ defn ];
    }

    arrowShapes[ name ] = util.extend( {
      name: name,

      points: [
        -0.15, -0.3,
        0.15, -0.3,
        0.15, 0.3,
        -0.15, 0.3
      ],

      collide: function( x, y, size, angle, translation, padding ){
        var points = pointsToArr( transformPoints( this.points, size + 2 * padding, angle, translation ) );
        var inside = math.pointInsidePolygonPoints( x, y, points );

        return inside;
      },

      roughCollide: bbCollide,

      draw: function( context, size, angle, translation ){
        var points = transformPoints( this.points, size, angle, translation );

        renderer.arrowShapeImpl( 'polygon' )( context, points );
      },

      spacing: function( edge ){
        return 0;
      },

      gap: function( edge ){
        return edge.pstyle( 'width' ).pfValue * 2;
      }
    }, defn );
  };

  defineArrowShape( 'none', {
    collide: util.falsify,

    roughCollide: util.falsify,

    draw: util.noop,

    spacing: util.zeroify,

    gap: util.zeroify
  } );

  defineArrowShape( 'triangle', {
    points: [
      -0.15, -0.3,
      0, 0,
      0.15, -0.3
    ]
  } );

  defineArrowShape( 'arrow', 'triangle' );

  defineArrowShape( 'triangle-backcurve', {
    points: arrowShapes[ 'triangle' ].points,

    controlPoint: [ 0, -0.15 ],

    roughCollide: bbCollide,

    draw: function( context, size, angle, translation ){
      var ptsTrans = transformPoints( this.points, size, angle, translation );
      var ctrlPt = this.controlPoint;
      var ctrlPtTrans = transform( ctrlPt[0], ctrlPt[1], size, angle, translation );

      renderer.arrowShapeImpl( this.name )( context, ptsTrans, ctrlPtTrans );
    },

    gap: function( edge ){
      return edge.pstyle( 'width' ).pfValue;
    }
  } );


  defineArrowShape( 'triangle-tee', {
    points: [
      -0.15, -0.3,
      0, 0,
      0.15, -0.3,
      -0.15, -0.3
    ],

    pointsTee: [
      -0.15, -0.4,
      -0.15, -0.5,
      0.15, -0.5,
      0.15, -0.4
    ],

    collide: function( x, y, size, angle, translation, padding ){
      var triPts = pointsToArr( transformPoints( this.points, size + 2 * padding, angle, translation ) );
      var teePts = pointsToArr( transformPoints( this.pointsTee, size + 2 * padding, angle, translation ) );

      var inside = math.pointInsidePolygonPoints( x, y, triPts ) || math.pointInsidePolygonPoints( x, y, teePts );

      return inside;
    },

    draw: function( context, size, angle, translation ){
      var triPts = transformPoints( this.points, size, angle, translation );
      var teePts = transformPoints( this.pointsTee, size, angle, translation );

      renderer.arrowShapeImpl( this.name )( context, triPts, teePts );
    }
  } );

  defineArrowShape( 'vee', {
    points: [
      -0.15, -0.3,
      0, 0,
      0.15, -0.3,
      0, -0.15
    ],

    gap: function( edge ){
      return edge.pstyle( 'width' ).pfValue;
    }
  } );

  defineArrowShape( 'circle', {
    radius: 0.15,

    collide: function( x, y, size, angle, translation, padding ){
      var t = translation;
      var inside = ( Math.pow( t.x - x, 2 ) + Math.pow( t.y - y, 2 ) <= Math.pow( (size + 2 * padding) * this.radius, 2 ) );

      return inside;
    },

    draw: function( context, size, angle, translation ){
      renderer.arrowShapeImpl( this.name )( context, translation.x, translation.y, this.radius * size );
    },

    spacing: function( edge ){
      return renderer.getArrowWidth( edge.pstyle( 'width' ).pfValue )
        * this.radius;
    }
  } );

  defineArrowShape( 'inhibitor', {
    points: [
      -0.15, 0,
      -0.15, -0.1,
      0.15, -0.1,
      0.15, 0
    ],

    spacing: function( edge ){
      return 1;
    },

    gap: function( edge ){
      return 1;
    }
  } );

  defineArrowShape( 'tee', 'inhibitor' );

  defineArrowShape( 'square', {
    points: [
      -0.15, 0.00,
      0.15, 0.00,
      0.15, -0.3,
      -0.15, -0.3
    ]
  } );

  defineArrowShape( 'diamond', {
    points: [
      -0.15, -0.15,
      0, -0.3,
      0.15, -0.15,
      0, 0
    ],

    gap: function( edge ){
      return edge.pstyle( 'width' ).pfValue;
    }
  } );

  sbgn.registerSbgnArrowShapes();
};

module.exports = BRp;

},{"../../../is":86,"../../../math":88,"../../../sbgn":90,"../../../util":104}],61:[function(require,module,exports){
'use strict';

var math = require( '../../../math' );
var is = require( '../../../is' );
var util = require( '../../../util' );
var zIndexSort = require( '../../../collection/zsort' );
var sbgn = require( '../../../sbgn' );

var BRp = {};

BRp.registerCalculationListeners = function(){
  var cy = this.cy;
  var elesToUpdate = cy.collection();
  var r = this;

  var enqueue = function( eles, e ){
    elesToUpdate.merge( eles );

    for( var i = 0; i < eles.length; i++ ){
      var ele = eles[i];
      var _p = ele._private;
      var rstyle = _p.rstyle;

      rstyle.clean = false;
      _p.bbCache = null;

      var evts = rstyle.dirtyEvents = rstyle.dirtyEvents || { length: 0 };

      if( !evts[ e.type ] ){
        evts[ e.type ] = true;
        evts.length++;
//
        // elesToUpdate.merge( ele );
      }
    }
  };

  r.binder( cy )
    // nodes

    .on('position.* style.* free.*', 'node', function onDirtyModNode( e ){
      var node = e.cyTarget;

      enqueue( node, e );
      enqueue( node.connectedEdges(), e );

      if( cy.hasCompoundNodes() ){
        var parents = node.parents();

        enqueue( parents, e );
        enqueue( parents.connectedEdges(), e );
      }
    })

    .on('add.* background.*', 'node', function onDirtyAddNode( e ){
      var ele = e.cyTarget;

      enqueue( ele, e );
    })

    // edges

    .on('add.* style.*', 'edge', function onDirtyEdge( e ){
      var edge = e.cyTarget;

      enqueue( edge, e );
      enqueue( edge.parallelEdges(), e );
    })

    .on('remove.*', 'edge', function onDirtyRemoveEdge( e ){
      var edge = e.cyTarget;
      var pEdges = edge.parallelEdges();

      for( var i = 0; i < pEdges.length; i++ ){
        var pEdge = pEdges[i];

        if( !pEdge.removed() ){
          enqueue( pEdge, e );
        }
      }
    })
  ;

  var updateEleCalcs = function( willDraw ){
    if( willDraw ){
      var fns = r.onUpdateEleCalcsFns;

      if( fns ){ for( var i = 0; i < fns.length; i++ ){
        var fn = fns[i];

        fn( willDraw, elesToUpdate );
      } }

      r.recalculateRenderedStyle( elesToUpdate, false );

      for( var i = 0; i < elesToUpdate.length; i++ ){
        elesToUpdate[i]._private.rstyle.dirtyEvents = null;
      }

      elesToUpdate = cy.collection();
    }
  };

  r.beforeRender( updateEleCalcs, r.beforeRenderPriorities.eleCalcs );
};

BRp.onUpdateEleCalcs = function( fn ){
  var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];

  fns.push( fn );
};

BRp.recalculateRenderedStyle = function( eles, useCache ){
  var edges = [];
  var nodes = [];

  // the renderer can't be used for calcs when destroyed, e.g. ele.boundingBox()
  if( this.destroyed ){ return; }

  // use cache by default for perf
  if( useCache === undefined ){ useCache = true; }

  for( var i = 0; i < eles.length; i++ ){
    var ele = eles[ i ];
    var _p = ele._private;
    var rstyle = _p.rstyle;

    // only update if dirty and in graph
    if( (useCache && rstyle.clean) || ele.removed() ){ continue; }

    // only update if not display: none
    if( ele.pstyle('display').value === 'none' ){ continue; }

    if( _p.group === 'nodes' ){
      nodes.push( ele );
    } else { // edges
      edges.push( ele );
    }

    rstyle.clean = true;
    // rstyle.dirtyEvents = null;
  }

  // update node data from projections
  for( var i = 0; i < nodes.length; i++ ){
    var ele = nodes[i];
    var _p = ele._private;
    var rstyle = _p.rstyle;
    var pos = _p.position;

    this.recalculateNodeLabelProjection( ele );

    rstyle.nodeX = pos.x;
    rstyle.nodeY = pos.y;
    rstyle.nodeW = ele.pstyle( 'width' ).pfValue;
    rstyle.nodeH = ele.pstyle( 'height' ).pfValue;
  }

  this.recalculateEdgeProjections( edges );

  // update edge data from projections
  for( var i = 0; i < edges.length; i++ ){
    var ele = edges[ i ];
    var _p = ele._private;
    var rstyle = _p.rstyle;
    var rs = _p.rscratch;

    this.recalculateEdgeLabelProjections( ele );

    // update rstyle positions
    rstyle.srcX = rs.arrowStartX;
    rstyle.srcY = rs.arrowStartY;
    rstyle.tgtX = rs.arrowEndX;
    rstyle.tgtY = rs.arrowEndY;
    rstyle.midX = rs.midX;
    rstyle.midY = rs.midY;
    rstyle.labelAngle = rs.labelAngle;
    rstyle.sourceLabelAngle = rs.sourceLabelAngle;
    rstyle.targetLabelAngle = rs.targetLabelAngle;
  }
};

// Project mouse
BRp.projectIntoViewport = function( clientX, clientY ){
  var offsets = this.findContainerClientCoords();
  var offsetLeft = offsets[0];
  var offsetTop = offsets[1];

  var x = clientX - offsetLeft;
  var y = clientY - offsetTop;

  x -= this.cy.pan().x; y -= this.cy.pan().y; x /= this.cy.zoom(); y /= this.cy.zoom();
  return [ x, y ];
};

BRp.findContainerClientCoords = function(){
  var container = this.container;

  var bb = this.containerBB = this.containerBB || container.getBoundingClientRect();

  return [ bb.left, bb.top, bb.right - bb.left, bb.bottom - bb.top ];
};

BRp.invalidateContainerClientCoordsCache = function(){
  this.containerBB = null;
};

BRp.findNearestElement = function( x, y, isTouch ){
  return this.findNearestElements( x, y, isTouch )[0];
};

BRp.findNearestElements = function( x, y, isTouch ){
  var self = this;
  var r = this;
  var eles = r.getCachedZSortedEles();
  var near = []; // 1 node max, 1 edge max
  var zoom = r.cy.zoom();
  var hasCompounds = r.cy.hasCompoundNodes();
  var edgeThreshold = (isTouch ? 24 : 8) / zoom;
  var nodeThreshold = (isTouch ? 8 : 2) / zoom;
  var labelThreshold = (isTouch ? 8 : 2) / zoom;
  var minSqDist = Infinity;
  var nearEdge;
  var nearNode;

  function addEle( ele, sqDist ){
    if( ele.isNode() ){
      if( nearNode ){
        return; // can't replace node
      } else {
        nearNode = ele;
        near.push( ele );
      }
    }

    if( ele.isEdge() && ( sqDist == null || sqDist < minSqDist ) ){
      if( nearEdge ){ // then replace existing edge
        // can replace only if same z-index
        if( nearEdge.pstyle( 'z-index' ).value === ele.pstyle('z-index').value ){
          for( var i = 0; i < near.length; i++ ){
            if( near[i].isEdge() ){
              near[i] = ele;
              nearEdge = ele;
              minSqDist = sqDist != null ? sqDist : minSqDist;
              break;
            }
          }
        }
      } else {
        near.push( ele );
        nearEdge = ele;
        minSqDist = sqDist != null ? sqDist : minSqDist;
      }
    }
  }

  function checkNode( node ){
    var _p = node._private;

    if( node.pstyle( 'events' ).strValue === 'no' ){ return; }

    var width = node.outerWidth() + 2 * nodeThreshold;
    var height = node.outerHeight() + 2 * nodeThreshold;
    var hw = width / 2;
    var hh = height / 2;
    var pos = _p.position;

//    if(
//      pos.x - hw <= x && x <= pos.x + hw // bb check x
//        &&
//      pos.y - hh <= y && y <= pos.y + hh // bb check y
//    ){
      var shape = r.nodeShapes[ self.getNodeShape( node ) ];

      if(
        sbgn.isNodeShapeTotallyOverriden(self, node)?shape.checkPoint( x, y, node, 0 ):shape.checkPoint(x, y, 0, width, height, pos.x, pos.y)
      ){
        addEle( node, 0 );
        return true;
      }

//    }
  }

  function checkEdge( edge ){
    var _p = edge._private;

    if( edge.pstyle('events').strValue === 'no' ){ return; }

    var rs = _p.rscratch;
    var width = edge.pstyle( 'width' ).pfValue / 2 + edgeThreshold; // more like a distance radius from centre
    var widthSq = width * width;
    var width2 = width * 2;
    var src = _p.source;
    var tgt = _p.target;
    var inEdgeBB = false;
    var sqDist;

    if( rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack' ){
      var pts = rs.allpts;

      for( var i = 0; i + 3 < pts.length; i += 2 ){
        if(
          (inEdgeBB = math.inLineVicinity( x, y, pts[ i ], pts[ i + 1], pts[ i + 2], pts[ i + 3], width2 ))
            &&
          widthSq > ( sqDist = math.sqdistToFiniteLine( x, y, pts[ i ], pts[ i + 1], pts[ i + 2], pts[ i + 3] ) )
        ){
          addEle( edge, sqDist );
          return true;
        }
      }

    } else if( rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' ){
      var pts = rs.allpts;
      for( var i = 0; i + 5 < rs.allpts.length; i += 4 ){
        if(
          (inEdgeBB = math.inBezierVicinity( x, y, pts[ i ], pts[ i + 1], pts[ i + 2], pts[ i + 3], pts[ i + 4], pts[ i + 5], width2 ))
            &&
          (widthSq > (sqDist = math.sqdistToQuadraticBezier( x, y, pts[ i ], pts[ i + 1], pts[ i + 2], pts[ i + 3], pts[ i + 4], pts[ i + 5] )) )
        ){
          addEle( edge, sqDist );
          return true;
        }
      }
    }

    // if we're close to the edge but didn't hit it, maybe we hit its arrows
    if( inEdgeBB ){
      var src = src || _p.source;
      var tgt = tgt || _p.target;

      var eWidth = edge.pstyle( 'width' ).pfValue;
      var arSize = self.getArrowWidth( eWidth );

      var arrows = [
        { name: 'source', x: rs.arrowStartX, y: rs.arrowStartY, angle: rs.srcArrowAngle },
        { name: 'target', x: rs.arrowEndX, y: rs.arrowEndY, angle: rs.tgtArrowAngle },
        { name: 'mid-source', x: rs.midX, y: rs.midY, angle: rs.midsrcArrowAngle },
        { name: 'mid-target', x: rs.midX, y: rs.midY, angle: rs.midtgtArrowAngle }
      ];

      for( var i = 0; i < arrows.length; i++ ){
        var ar = arrows[ i ];
        var shape = r.arrowShapes[ edge.pstyle( ar.name + '-arrow-shape' ).value ];

        if(
          shape.roughCollide( x, y, arSize, ar.angle, { x: ar.x, y: ar.y }, edgeThreshold )
           &&
          shape.collide( x, y, arSize, ar.angle, { x: ar.x, y: ar.y }, edgeThreshold )
        ){
          addEle( edge );
          break;
        }
      }
    }

    // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)
    if( hasCompounds && near.length > 0 ){
      checkNode( src );
      checkNode( tgt );
    }
  }

  function preprop( obj, name, pre ){
    return util.getPrefixedProperty( obj, name, pre );
  }

  function checkLabel( ele, prefix ){
    var _p = ele._private;
    var th = labelThreshold;

    var prefixDash;
    if( prefix ){
      prefixDash = prefix + '-';
    } else {
      prefixDash = '';
    }

    var text = ele.pstyle( prefixDash + 'label' ).value;
    var eventsEnabled = ele.pstyle( 'text-events' ).strValue === 'yes';

    if( !eventsEnabled || !text ){ return; }

    var rstyle = _p.rstyle;
    var bw = ele.pstyle('text-border-width').pfValue;
    var pw = ele.pstyle('text-background-padding').pfValue;
    var lw = preprop( rstyle, 'labelWidth', prefix ) + bw + 2*th + 2*pw;
    var lh = preprop( rstyle, 'labelHeight', prefix ) + bw + 2*th + 2*pw;
    var lx = preprop( rstyle, 'labelX', prefix );
    var ly = preprop( rstyle, 'labelY', prefix );

    var theta = preprop( _p.rscratch, 'labelAngle', prefix );

    var lx1 = lx - lw / 2;
    var lx2 = lx + lw / 2;
    var ly1 = ly - lh / 2;
    var ly2 = ly + lh / 2;

    if( theta ){
      var cos = Math.cos( theta );
      var sin = Math.sin( theta );

      var rotate = function( x, y ){
        x = x - lx;
        y = y - ly;

        return {
          x: x * cos - y * sin + lx,
          y: x * sin + y * cos + ly
        };
      };

      var px1y1 = rotate( lx1, ly1 );
      var px1y2 = rotate( lx1, ly2 );
      var px2y1 = rotate( lx2, ly1 );
      var px2y2 = rotate( lx2, ly2 );

      var points = [
        px1y1.x, px1y1.y,
        px2y1.x, px2y1.y,
        px2y2.x, px2y2.y,
        px1y2.x, px1y2.y
      ];

      if( math.pointInsidePolygonPoints( x, y, points ) ){
        addEle( ele );
        return true;
      }
    } else { // do a cheaper bb check
      var bb = {
        w: lw,
        h: lh,
        x1: lx1,
        x2: lx2,
        y1: ly1,
        y2: ly2
      };

      if( math.inBoundingBox( bb, x, y ) ){
        addEle( ele );
        return true;
      }
    }

  }

  for( var i = eles.length - 1; i >= 0; i-- ){ // reverse order for precedence
    var ele = eles[ i ];

    if( ele.isNode() ){
      checkNode( ele ) || checkLabel( ele );

    } else { // then edge
      checkEdge( ele ) || checkLabel( ele ) || checkLabel( ele, 'source' ) || checkLabel( ele, 'target' );
    }
  }

  return near;
};

// 'Give me everything from this box'
BRp.getAllInBox = function( x1, y1, x2, y2 ){
  var eles = this.getCachedZSortedEles();
  var nodes = eles.nodes;
  var edges = eles.edges;
  var box = [];

  var x1c = Math.min( x1, x2 );
  var x2c = Math.max( x1, x2 );
  var y1c = Math.min( y1, y2 );
  var y2c = Math.max( y1, y2 );

  x1 = x1c;
  x2 = x2c;
  y1 = y1c;
  y2 = y2c;

  var boxBb = math.makeBoundingBox( {
    x1: x1, y1: y1,
    x2: x2, y2: y2
  } );

  for( var i = 0; i < nodes.length; i++ ){
    var node = nodes[ i ];
    var nodeBb = node.boundingBox( {
      includeNodes: true,
      includeEdges: false,
      includeLabels: false,
      includeShadows: false
    } );

    if( math.boundingBoxesIntersect( boxBb, nodeBb ) ){
      box.push( nodes[ i ] );
    }
  }

  for( var e = 0; e < edges.length; e++ ){
    var edge = edges[ e ];
    var _p = edge._private;
    var rs = _p.rscratch;

    if( rs.startX != null && rs.startY != null && !math.inBoundingBox( boxBb, rs.startX, rs.startY ) ){ continue; }
    if( rs.endX != null && rs.endY != null && !math.inBoundingBox( boxBb, rs.endX, rs.endY ) ){ continue; }

    if( rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack' ){

      var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
      var allInside = true;

      for( var i = 0; i < pts.length; i++ ){
        if( !math.pointInBoundingBox( boxBb, pts[ i ] ) ){
          allInside = false;
          break;
        }
      }

      if( allInside ){
        box.push( edge );
      }

    } else if( rs.edgeType === 'haystack' || rs.edgeType === 'straight' ){
      box.push( edge );
    }

  }

  return box;
};


/**
 * Returns the shape of the given node. If the height or width of the given node
 * is set to auto, the node is considered to be a compound.
 *
 * @param node          a node
 * @return {String}     shape of the node
 */
BRp.getNodeShape = function( node ){
  var r = this;
  var shape = node.pstyle( 'shape' ).value;

//  if( node.isParent() ){
//    if( shape === 'rectangle' || shape === 'roundrectangle' ){
//      return shape;
//    } else {
//      return 'rectangle';
//    }
//  }

  if( shape === 'polygon' ){
    var points = node.pstyle( 'shape-polygon-points' ).value;

    return r.nodeShapes.makePolygon( points ).name;
  }

  return shape;
};

BRp.updateCachedGrabbedEles = function(){
  var eles = this.cachedZSortedEles;

  if( !eles ){
    // just let this be recalculated on the next z sort tick
    return;
  }

  eles.drag = [];
  eles.nondrag = [];

  var grabTargets = [];

  for( var i = 0; i < eles.length; i++ ){
    var ele = eles[i];
    var rs = ele._private.rscratch;

    if( ele.grabbed() && !ele.isParent() ){
      grabTargets.push( ele );
    } else if( rs.inDragLayer ){
      eles.drag.push( ele );
    } else {
      eles.nondrag.push( ele );
    }
  }

  // put the grab target nodes last so it's on top of its neighbourhood
  for( var i = 0; i < grabTargets.length; i++ ){
    var ele = grabTargets[i];

    eles.drag.push( ele );
  }
};

BRp.invalidateCachedZSortedEles = function(){
  this.cachedZSortedEles = null;
};

BRp.getCachedZSortedEles = function( forceRecalc ){
  if( forceRecalc || !this.cachedZSortedEles ){
    var cyEles = this.cy.mutableElements();
    var eles = [];

    eles.nodes = [];
    eles.edges = [];

    for( var i = 0; i < cyEles.length; i++ ){
      var ele = cyEles[i];

      if( ele.animated() || (ele.visible() && !ele.transparent()) ){
        eles.push( ele );

        if( ele.isNode() ){
          eles.nodes.push( ele );
        } else {
          eles.edges.push( ele );
        }
      }
    }

    eles.sort( zIndexSort );

    this.cachedZSortedEles = eles;

    this.updateCachedGrabbedEles();
  } else {
    eles = this.cachedZSortedEles;
  }

  return eles;
};

function pushBezierPts( r, edge, pts ){
  var qbezierAt = function( p1, p2, p3, t ){ return math.qbezierAt( p1, p2, p3, t ); };
  var _p = edge._private;
  var bpts = _p.rstyle.bezierPts;

  for( var i = 0; i < r.bezierProjPcts.length; i++ ){
    var p = r.bezierProjPcts[i];

    bpts.push( {
      x: qbezierAt( pts[0], pts[2], pts[4], p ),
      y: qbezierAt( pts[1], pts[3], pts[5], p )
    } );
  }
}

BRp.projectLines = function( edge ){
  var _p = edge._private;
  var rs = _p.rscratch;
  var et = rs.edgeType;

  // clear the cached points state
  _p.rstyle.bezierPts = null;
  _p.rstyle.linePts = null;
  _p.rstyle.haystackPts = null;

  if( et === 'multibezier' ||  et === 'bezier' ||  et === 'self' ||  et === 'compound' ){
    var bpts = _p.rstyle.bezierPts = []; // jshint ignore:line

    for( var i = 0; i + 5 < rs.allpts.length; i += 4 ){
      pushBezierPts( this, edge, rs.allpts.slice( i, i + 6 ) );
    }
  } else if(  et === 'segments' ){
    var lpts = _p.rstyle.linePts = [];

    for( var i = 0; i + 1 < rs.allpts.length; i += 2 ){
      lpts.push( {
        x: rs.allpts[ i ],
        y: rs.allpts[ i + 1]
      } );
    }
  } else if( et === 'haystack' ){
    var hpts = rs.haystackPts;

    _p.rstyle.haystackPts = [
      { x: hpts[0], y: hpts[1] },
      { x: hpts[2], y: hpts[3] }
    ];
  }

  _p.rstyle.arrowWidth = this.getArrowWidth( edge.pstyle('width').pfValue ) * this.arrowShapeWidth;
};

BRp.projectBezier = BRp.projectLines;

BRp.recalculateNodeLabelProjection = function( node ){
  var content = node.pstyle( 'label' ).strValue;

  if( is.emptyString(content) ){ return; }

  var textX, textY;
  var _p = node._private;
  var nodeWidth = node.width();
  var nodeHeight = node.height();
  var paddingLeft = node.pstyle('padding-left').pfValue;
  var paddingRight = node.pstyle('padding-right').pfValue;
  var paddingTop = node.pstyle('padding-top').pfValue;
  var paddingBottom = node.pstyle('padding-bottom').pfValue;
  var nodePos = _p.position;
  var textHalign = node.pstyle( 'text-halign' ).strValue;
  var textValign = node.pstyle( 'text-valign' ).strValue;
  var rs = _p.rscratch;
  var rstyle = _p.rstyle;

  switch( textHalign ){
    case 'left':
      textX = nodePos.x - nodeWidth / 2 - paddingLeft;
      break;

    case 'right':
      textX = nodePos.x + nodeWidth / 2 + paddingRight;
      break;

    default: // e.g. center
      textX = nodePos.x;
  }

  switch( textValign ){
    case 'top':
      textY = nodePos.y - nodeHeight / 2 - paddingTop;
      break;

    case 'bottom':
      textY = nodePos.y + nodeHeight / 2 + paddingBottom;
      break;

    default: // e.g. middle
      textY = nodePos.y;
  }

  rs.labelX = textX;
  rs.labelY = textY;
  rstyle.labelX = textX;
  rstyle.labelY = textY;

  this.applyLabelDimensions( node );
};

BRp.recalculateEdgeLabelProjections = function( edge ){
  var p;
  var _p = edge._private;
  var rs = _p.rscratch;
  var r = this;
  var content = {
    mid: edge.pstyle('label').strValue,
    source: edge.pstyle('source-label').strValue,
    target: edge.pstyle('target-label').strValue
  };

  if( content.mid || content.source || content.target ){
    // then we have to calculate...
  } else {
    return; // no labels => no calcs
  }

  // add center point to style so bounding box calculations can use it
  //
  p = {
    x: rs.midX,
    y: rs.midY
  };

  var setRs = function( propName, prefix, value ){
    util.setPrefixedProperty( _p.rscratch, propName, prefix, value );
    util.setPrefixedProperty( _p.rstyle, propName, prefix, value );
  };

  setRs( 'labelX', null, p.x );
  setRs( 'labelY', null, p.y );

  var createControlPointInfo = function(){
    if( createControlPointInfo.cache ){ return createControlPointInfo.cache; } // use cache so only 1x per edge

    var ctrlpts = [];

    // store each ctrlpt info init
    for( var i = 0; i + 5 < rs.allpts.length; i += 4 ){
      var p0 = { x: rs.allpts[i], y: rs.allpts[i+1] };
      var p1 = { x: rs.allpts[i+2], y: rs.allpts[i+3] }; // ctrlpt
      var p2 = { x: rs.allpts[i+4], y: rs.allpts[i+5] };

      ctrlpts.push({
        p0: p0,
        p1: p1,
        p2: p2,
        startDist: 0,
        length: 0,
        segments: []
      });
    }

    var bpts = _p.rstyle.bezierPts;
    var nProjs = r.bezierProjPcts.length;

    function addSegment( cp, p0, p1, t0, t1 ){
      var length = math.dist( p0, p1 );
      var prevSegment = cp.segments[ cp.segments.length - 1 ];
      var segment = {
        p0: p0,
        p1: p1,
        t0: t0,
        t1: t1,
        startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,
        length: length
      };

      cp.segments.push( segment );

      cp.length += length;
    }

    // update each ctrlpt with segment info
    for( var i = 0; i < ctrlpts.length; i++ ){
      var cp = ctrlpts[i];
      var prevCp = ctrlpts[i - 1];

      if( prevCp ){
        cp.startDist = prevCp.startDist + prevCp.length;
      }

      addSegment(
        cp,
        cp.p0,   bpts[ i * nProjs ],
        0,       r.bezierProjPcts[ 0 ]
      ); // first

      for( var j = 0; j < nProjs - 1; j++ ){
        addSegment(
          cp,
          bpts[ i * nProjs + j ],   bpts[ i * nProjs + j + 1 ],
          r.bezierProjPcts[ j ],    r.bezierProjPcts[ j + 1 ]
        );
      }

      addSegment(
        cp,
        bpts[ i * nProjs + nProjs - 1 ],   cp.p2,
        r.bezierProjPcts[ nProjs - 1 ],    1
      ); // last
    }

    return ( createControlPointInfo.cache = ctrlpts );
  };

  var calculateEndProjection = function( prefix ){
    var angle;
    var isSrc = prefix === 'source';

    if( !content[ prefix ] ){ return; }

    var offset = edge.pstyle(prefix+'-text-offset').pfValue;

    var lineAngle = function( p0, p1 ){
      var dx = p1.x - p0.x;
      var dy = p1.y - p0.y;

      return Math.atan( dy / dx );
    };

    var bezierAngle = function( p0, p1, p2, t ){
      var t0 = math.bound( 0, t - 0.001, 1 );
      var t1 = math.bound( 0, t + 0.001, 1 );

      var lp0 = math.qbezierPtAt( p0, p1, p2, t0 );
      var lp1 = math.qbezierPtAt( p0, p1, p2, t1 );

      return lineAngle( lp0, lp1 );
    };

    switch( rs.edgeType ){
      case 'self':
      case 'compound':
      case 'bezier':
      case 'multibezier':
        var cps = createControlPointInfo();
        var selected;
        var startDist = 0;
        var totalDist = 0;

        // find the segment we're on
        for( var i = 0; i < cps.length; i++ ){
          var cp = cps[ isSrc ? i : cps.length - 1 - i ];

          for( var j = 0; j < cp.segments.length; j++ ){
            var seg = cp.segments[ isSrc ? j : cp.segments.length - 1 - j ];
            var lastSeg = i === cps.length - 1 && j === cp.segments.length - 1;

            startDist = totalDist;
            totalDist += seg.length;

            if( totalDist >= offset || lastSeg ){
              selected = { cp: cp, segment: seg };
              break;
            }
          }

          if( selected ){ break; }
        }

        var cp = selected.cp;
        var seg = selected.segment;
        var tSegment = ( offset - startDist ) / ( seg.length );
        var segDt = seg.t1 - seg.t0;
        var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;

        t = math.bound( 0, t, 1 );
        p = math.qbezierPtAt( cp.p0, cp.p1, cp.p2, t );
        angle = bezierAngle( cp.p0, cp.p1, cp.p2, t, p );

        break;

      case 'straight':
      case 'segments':
      case 'haystack':
        var d = 0, di, d0;
        var p0, p1;
        var l = rs.allpts.length;

        for( var i = 0; i + 3 < l; i += 2 ){
          if( isSrc ){
            p0 = { x: rs.allpts[i],     y: rs.allpts[i+1] };
            p1 = { x: rs.allpts[i+2],   y: rs.allpts[i+3] };
          } else {
            p0 = { x: rs.allpts[l-2-i], y: rs.allpts[l-1-i] };
            p1 = { x: rs.allpts[l-4-i], y: rs.allpts[l-3-i] };
          }

          di = math.dist( p0, p1 );
          d0 = d;
          d += di;

          if( d >= offset ){ break; }
        }

        var pD = offset - d0;
        var t = pD / di;

        t  = math.bound( 0, t, 1 );
        p = math.lineAt( p0, p1, t );
        angle = lineAngle( p0, p1 );

        break;
    }

    setRs( 'labelX', prefix, p.x );
    setRs( 'labelY', prefix, p.y );
    setRs( 'labelAutoAngle', prefix, angle );
  };

  calculateEndProjection( 'source' );
  calculateEndProjection( 'target' );

  this.applyLabelDimensions( edge );
};

BRp.applyLabelDimensions = function( ele ){
  this.applyPrefixedLabelDimensions( ele );

  if( ele.isEdge() ){
    this.applyPrefixedLabelDimensions( ele, 'source' );
    this.applyPrefixedLabelDimensions( ele, 'target' );
  }
};

BRp.applyPrefixedLabelDimensions = function( ele, prefix ){
  var _p = ele._private;

  var text = this.getLabelText( ele, prefix );
  var labelDims = this.calculateLabelDimensions( ele, text );

  util.setPrefixedProperty( _p.rstyle,   'labelWidth', prefix, labelDims.width );
  util.setPrefixedProperty( _p.rscratch, 'labelWidth', prefix, labelDims.width );

  util.setPrefixedProperty( _p.rstyle,   'labelHeight', prefix, labelDims.height );
  util.setPrefixedProperty( _p.rscratch, 'labelHeight', prefix, labelDims.height );
};

BRp.getLabelText = function( ele, prefix ){
  var _p = ele._private;
  var pfd = prefix ? prefix + '-' : '';
  var text = ele.pstyle( pfd + 'label' ).strValue;
  var textTransform = ele.pstyle( 'text-transform' ).value;
  var rscratch = function( propName, value ){
    if( value ){
      util.setPrefixedProperty( _p.rscratch, propName, prefix, value );
      return value;
    } else {
      return util.getPrefixedProperty( _p.rscratch, propName, prefix );
    }
  };

  if( textTransform == 'none' ){
    // passthrough
  } else if( textTransform == 'uppercase' ){
    text = text.toUpperCase();
  } else if( textTransform == 'lowercase' ){
    text = text.toLowerCase();
  }

  var wrapStyle = ele.pstyle( 'text-wrap' ).value;

  if( wrapStyle === 'wrap' ){
    //console.log('wrap');

    var labelKey = rscratch( 'labelKey' );

    // save recalc if the label is the same as before
    if( labelKey && rscratch( 'labelWrapKey' ) === labelKey ){
      // console.log('wrap cache hit');
      return rscratch( 'labelWrapCachedText' );
    }
    // console.log('wrap cache miss');

    var lines = text.split( '\n' );
    var maxW = ele.pstyle( 'text-max-width' ).pfValue;
    var wrappedLines = [];

    for( var l = 0; l < lines.length; l++ ){
      var line = lines[ l ];
      var lineDims = this.calculateLabelDimensions( ele, line, 'line=' + line );
      var lineW = lineDims.width;

      if( lineW > maxW ){ // line is too long
        var words = line.split( /\s+/ ); // NB: assume collapsed whitespace into single space
        var subline = '';

        for( var w = 0; w < words.length; w++ ){
          var word = words[ w ];
          var testLine = subline.length === 0 ? word : subline + ' ' + word;
          var testDims = this.calculateLabelDimensions( ele, testLine, 'testLine=' + testLine );
          var testW = testDims.width;

          if( testW <= maxW ){ // word fits on current line
            subline += word + ' ';
          } else { // word starts new line
            wrappedLines.push( subline );
            subline = word + ' ';
          }
        }

        // if there's remaining text, put it in a wrapped line
        if( !subline.match( /^\s+$/ ) ){
          wrappedLines.push( subline );
        }
      } else { // line is already short enough
        wrappedLines.push( line );
      }
    } // for

    rscratch( 'labelWrapCachedLines', wrappedLines );
    text = rscratch( 'labelWrapCachedText', wrappedLines.join( '\n' ) );
    rscratch( 'labelWrapKey', labelKey );

    // console.log(text)
  } else if( wrapStyle === 'ellipsis' ){
    var maxW = ele.pstyle( 'text-max-width' ).pfValue;
    var ellipsized = '';
    var ellipsis = '\u2026';
    var incLastCh = false;

    for( var i = 0; i < text.length; i++ ){
      var widthWithNextCh = this.calculateLabelDimensions( ele, ellipsized + text[i] + ellipsis ).width;

      if( widthWithNextCh > maxW ){ break; }

      ellipsized += text[i];

      if( i === text.length - 1 ){ incLastCh = true; }
    }

    if( !incLastCh ){
      ellipsized += ellipsis;
    }

    return ellipsized;
  } // if ellipsize

  return text;
};

BRp.calculateLabelDimensions = function( ele, text, extraKey ){
  var r = this;

  var cacheKey = ele._private.labelStyleKey + '$@$' + text;

  if( extraKey ){
    cacheKey += '$@$' + extraKey;
  }

  var cache = r.labelDimCache || (r.labelDimCache = {});

  if( cache[ cacheKey ] ){
    return cache[ cacheKey ];
  }

  var sizeMult = 1; // increase the scale to increase accuracy w.r.t. zoomed text
  var fStyle = ele.pstyle( 'font-style' ).strValue;
  var size = ( sizeMult * ele.pstyle( 'font-size' ).pfValue ) + 'px';
  var family = ele.pstyle( 'font-family' ).strValue;
  var weight = ele.pstyle( 'font-weight' ).strValue;

  var div = this.labelCalcDiv;

  if( !div ){
    div = this.labelCalcDiv = document.createElement( 'div' ); // eslint-disable-line no-undef
    document.body.appendChild( div ); // eslint-disable-line no-undef
  }

  var ds = div.style;

  // from ele style
  ds.fontFamily = family;
  ds.fontStyle = fStyle;
  ds.fontSize = size;
  ds.fontWeight = weight;

  // forced style
  ds.position = 'absolute';
  ds.left = '-9999px';
  ds.top = '-9999px';
  ds.zIndex = '-1';
  ds.visibility = 'hidden';
  ds.pointerEvents = 'none';
  ds.padding = '0';
  ds.lineHeight = '1';

  if( ele.pstyle( 'text-wrap' ).value === 'wrap' ){
    ds.whiteSpace = 'pre'; // so newlines are taken into account
  } else {
    ds.whiteSpace = 'normal';
  }

  // put label content in div
  div.textContent = text;

  cache[ cacheKey ] = {
    width: Math.ceil( div.clientWidth / sizeMult ),
    height: Math.ceil( div.clientHeight / sizeMult )
  };

  return cache[ cacheKey ];
};

BRp.recalculateEdgeProjections = function( edges ){
  this.findEdgeControlPoints( edges );
};


// Find edge control points
BRp.findEdgeControlPoints = function( edges ){
  if( !edges || edges.length === 0 ){ return; }

  var r = this;
  var cy = r.cy;
  var hasCompounds = cy.hasCompoundNodes();
  var hashTable = {};
  var pairIds = [];
  var haystackEdges = [];

  // create a table of edge (src, tgt) => list of edges between them
  var pairId;
  for( var i = 0; i < edges.length; i++ ){
    var edge = edges[ i ];
    var _p = edge._private;
    var data = _p.data;
    var curveStyle = edge.pstyle( 'curve-style' ).value;
    var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments';

    // ignore edges who are not to be displayed
    // they shouldn't take up space
    if( edge.pstyle( 'display').value === 'none' ){
      continue;
    }

    if( curveStyle === 'haystack' ){
      haystackEdges.push( edge );
      continue;
    }

    var srcId = data.source;
    var tgtId = data.target;

    pairId = srcId > tgtId ?
      tgtId + '$-$' + srcId :
      srcId + '$-$' + tgtId ;

    if( edgeIsUnbundled ){
      pairId = 'unbundled' + '$-$' + data.id;
    }

    if( hashTable[ pairId ] == null ){
      hashTable[ pairId ] = [];
      pairIds.push( pairId );
    }

    hashTable[ pairId ].push( edge );

    if( edgeIsUnbundled ){
      hashTable[ pairId ].hasUnbundled = true;
    }
  }

  var src, tgt, src_p, tgt_p, srcPos, tgtPos, srcW, srcH, tgtW, tgtH, srcShape, tgtShape;
  var vectorNormInverse;
  var badBezier;
  var portsource, porttarget;

  // for each pair (src, tgt), create the ctrl pts
  // Nested for loop is OK; total number of iterations for both loops = edgeCount
  for( var p = 0; p < pairIds.length; p++ ){
    pairId = pairIds[ p ];
    var pairEdges = hashTable[ pairId ];

    // for each pair id, the edges should be sorted by index
    pairEdges.sort( function( edge1, edge2 ){
      return edge1.poolIndex() - edge2.poolIndex();
    } );

    src = pairEdges[0]._private.source;
    tgt = pairEdges[0]._private.target;
    
    portsource = pairEdges[0].data('portsource');
    porttarget = pairEdges[0].data('porttarget');

    // make sure src/tgt distinction is consistent for bundled edges
    if( !pairEdges.hasUnbundled && src.id() > tgt.id() ){
      var temp = src;
      src = tgt;
      tgt = temp;
      
      temp = portsource;
      portsource = porttarget;
      porttarget = temp;
    }

    src_p = src._private;
    tgt_p = tgt._private;

    srcPos = src_p.position;
    tgtPos = tgt_p.position;

    srcW = src.outerWidth();
    srcH = src.outerHeight();

    tgtW = tgt.outerWidth();
    tgtH = tgt.outerHeight();

    srcShape = r.nodeShapes[ this.getNodeShape( src ) ];
    tgtShape = r.nodeShapes[ this.getNodeShape( tgt ) ];

    badBezier = false;


    if( (pairEdges.length > 1 && src !== tgt) || pairEdges.hasUnbundled ){

      // pt outside src shape to calc distance/displacement from src to tgt
      var srcOutside;
      if(sbgn.isNodeShapeTotallyOverriden(this, src)) { 
        srcOutside = srcShape.intersectLine(src, tgtPos.x, tgtPos.y, portsource);
      }
      else
        srcOutside = srcShape.intersectLine(
          srcPos.x,
          srcPos.y,
          srcW,
          srcH,
          tgtPos.x,
          tgtPos.y,
          0
        );

      // pt outside tgt shape to calc distance/displacement from src to tgt
      var tgtOutside;
      if(sbgn.isNodeShapeTotallyOverriden(this, tgt)){
        tgtOutside = tgtShape.intersectLine(tgt, srcPos.x, srcPos.y, porttarget);
      }
      else
        tgtOutside = tgtShape.intersectLine(
            tgtPos.x,
            tgtPos.y,
            tgtW,
            tgtH,
            srcPos.x,
            srcPos.y,
            0
          );

      var midptSrcPts = {
        x1: srcOutside[0],
        x2: tgtOutside[0],
        y1: srcOutside[1],
        y2: tgtOutside[1]
      };

      var posPts = {
        x1: srcPos.x,
        x2: tgtPos.x,
        y1: srcPos.y,
        y2: tgtPos.y
      };

      var dy = ( tgtPos.y - srcPos.y );
      var dx = ( tgtPos.x - srcPos.x );
      var l = Math.sqrt( dx * dx + dy * dy );

      var vector = {
        x: dx,
        y: dy
      };

      var vectorNorm = {
        x: vector.x / l,
        y: vector.y / l
      };
      vectorNormInverse = {
        x: -vectorNorm.y,
        y: vectorNorm.x
      };


      // if node shapes overlap, then no ctrl pts to draw
      if(
        sbgn.isNodeShapeTotallyOverriden(this, tgt)?tgtShape.checkPoint( srcOutside[0], srcOutside[1], tgt, 0 ):tgtShape.checkPoint( srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y )  ||
        sbgn.isNodeShapeTotallyOverriden(this, src)?srcShape.checkPoint( tgtOutside[0], tgtOutside[1], src, 0 ):srcShape.checkPoint( tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y )
      ){
        vectorNormInverse = {};
        badBezier = true;
      }

    }

    var edge;
    var edge_p;
    var rs;

    var dirCounts = {
      'north': 0,
      'west': 0,
      'south': 0,
      'east': 0,
      'northwest': 0,
      'southwest': 0,
      'northeast': 0,
      'southeast': 0
    }

    for( var i = 0; i < pairEdges.length; i++ ){
      edge = pairEdges[ i ];
      edge_p = edge._private;
      rs = edge_p.rscratch;

      var edgeIndex1 = rs.lastEdgeIndex;
      var edgeIndex2 = i;

      var numEdges1 = rs.lastNumEdges;
      var numEdges2 = pairEdges.length;

      var curveStyle = edge.pstyle( 'curve-style' ).value;
      var ctrlptDists = edge.pstyle( 'control-point-distances' );

      var loopDir = edge.pstyle('loop-direction').pfValue;
      var loopSwp = edge.pstyle('loop-sweep').pfValue;

      var ctrlptWs = edge.pstyle( 'control-point-weights' );
      var bezierN = ctrlptDists && ctrlptWs ? Math.min( ctrlptDists.value.length, ctrlptWs.value.length ) : 1;
      var stepSize = edge.pstyle( 'control-point-step-size' ).pfValue;
      var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
      var ctrlptWeight = ctrlptWs.value[0];
      var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments';

      var srcX1 = rs.lastSrcCtlPtX;
      var srcX2 = srcPos.x;
      var srcY1 = rs.lastSrcCtlPtY;
      var srcY2 = srcPos.y;
      var srcW1 = rs.lastSrcCtlPtW;
      var srcW2 = src.outerWidth();
      var srcH1 = rs.lastSrcCtlPtH;
      var srcH2 = src.outerHeight();

      var tgtX1 = rs.lastTgtCtlPtX;
      var tgtX2 = tgtPos.x;
      var tgtY1 = rs.lastTgtCtlPtY;
      var tgtY2 = tgtPos.y;
      var tgtW1 = rs.lastTgtCtlPtW;
      var tgtW2 = tgt.outerWidth();
      var tgtH1 = rs.lastTgtCtlPtH;
      var tgtH2 = tgt.outerHeight();

      var width1 = rs.lastW;
      var width2 = edge.pstyle( 'control-point-step-size' ).pfValue;

      var edgeDistances = edge.pstyle('edge-distances').value;

      if( badBezier ){
        rs.badBezier = true;
      } else {
        rs.badBezier = false;
      }

      if( srcX1 === srcX2 && srcY1 === srcY2 && srcW1 === srcW2 && srcH1 === srcH2
      &&  tgtX1 === tgtX2 && tgtY1 === tgtY2 && tgtW1 === tgtW2 && tgtH1 === tgtH2
      &&  width1 === width2
      &&  ((edgeIndex1 === edgeIndex2 && numEdges1 === numEdges2) || edgeIsUnbundled) ){
        // console.log('edge ctrl pt cache HIT')
        continue; // then the control points haven't changed and we can skip calculating them
      } else {
        rs.lastSrcCtlPtX = srcX2;
        rs.lastSrcCtlPtY = srcY2;
        rs.lastSrcCtlPtW = srcW2;
        rs.lastSrcCtlPtH = srcH2;
        rs.lastTgtCtlPtX = tgtX2;
        rs.lastTgtCtlPtY = tgtY2;
        rs.lastTgtCtlPtW = tgtW2;
        rs.lastTgtCtlPtH = tgtH2;
        rs.lastEdgeIndex = edgeIndex2;
        rs.lastNumEdges = numEdges2;
        rs.lastWidth = width2;
        // console.log('edge ctrl pt cache MISS')
      }

      if( src === tgt ){
        // Self-edge

        rs.edgeType = 'self';

        var j = i;
        var loopDist = stepSize;

        if( edgeIsUnbundled ){
          j = 0;
          loopDist = ctrlptDist;
        }

        var outAngle =  loopDir - loopSwp / 2;
        var inAngle  =  loopDir + loopSwp / 2;

        // increase by step size for overlapping loops, keyed on direction and sweep values
        var dc = String(loopDir + '_' + loopSwp);
        j = dirCounts[dc] === undefined ? dirCounts[dc] = 0 : ++dirCounts[dc];

        rs.ctrlpts = [
          srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j / 3 + 1),
          srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j / 3 + 1),
          srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j / 3 + 1),
          srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j / 3 + 1)
        ];

      } else if(
        hasCompounds &&
        ( src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild() ) &&
        ( src.parents().anySame( tgt ) || tgt.parents().anySame( src ) )
      ){
        // Compound edge

        rs.edgeType = 'compound';

        // because the line approximation doesn't apply for compound beziers
        // (loop/self edges are already elided b/c of cheap src==tgt check)
        rs.badBezier = false;

        var j = i;
        var loopDist = stepSize;

        if( edgeIsUnbundled ){
          j = 0;
          loopDist = ctrlptDist;
        }

        var loopW = 50;

        var loopaPos = {
          x: srcPos.x - srcW / 2,
          y: srcPos.y - srcH / 2
        };

        var loopbPos = {
          x: tgtPos.x - tgtW / 2,
          y: tgtPos.y - tgtH / 2
        };

        var loopPos = {
          x: Math.min( loopaPos.x, loopbPos.x ),
          y: Math.min( loopaPos.y, loopbPos.y )
        };

        // avoids cases with impossible beziers
        var minCompoundStretch = 0.5;
        var compoundStretchA = Math.max( minCompoundStretch, Math.log( srcW * 0.01 ) );
        var compoundStretchB = Math.max( minCompoundStretch, Math.log( tgtW * 0.01 ) );

        rs.ctrlpts = [
          loopPos.x,
          loopPos.y - (1 + Math.pow( loopW, 1.12 ) / 100) * loopDist * (j / 3 + 1) * compoundStretchA,

          loopPos.x - (1 + Math.pow( loopW, 1.12 ) / 100) * loopDist * (j / 3 + 1) * compoundStretchB,
          loopPos.y
        ];

      } else if( curveStyle === 'segments' ){
        // Segments (multiple straight lines)

        rs.edgeType = 'segments';
        rs.segpts = [];

        var segmentWs = edge.pstyle( 'segment-weights' ).pfValue;
        var segmentDs = edge.pstyle( 'segment-distances' ).pfValue;
        var segmentsN = Math.min( segmentWs.length, segmentDs.length );

        for( var s = 0; s < segmentsN; s++ ){
          var w = segmentWs[ s ];
          var d = segmentDs[ s ];

          var w1 = 1 - w;
          var w2 = w;

          var midptPts = edgeDistances === 'node-position' ? posPts : midptSrcPts;

          var adjustedMidpt = {
            x: midptPts.x1 * w1 + midptPts.x2 * w2,
            y: midptPts.y1 * w1 + midptPts.y2 * w2
          };

          rs.segpts.push(
            adjustedMidpt.x + vectorNormInverse.x * d,
            adjustedMidpt.y + vectorNormInverse.y * d
          );
        }

      // Straight edge
      } else if(
        pairEdges.length % 2 === 1
        && i === Math.floor( pairEdges.length / 2 )
        && !edgeIsUnbundled
      ){

        rs.edgeType = 'straight';

      } else {
        // (Multi)bezier

        var multi = edgeIsUnbundled;

        rs.edgeType = multi ? 'multibezier' : 'bezier';
        rs.ctrlpts = [];

        for( var b = 0; b < bezierN; b++ ){
          var normctrlptDist = (0.5 - pairEdges.length / 2 + i) * stepSize;
          var manctrlptDist;
          var sign = math.signum( normctrlptDist );

          if( multi ){
            ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[ b ] : stepSize; // fall back on step size
            ctrlptWeight = ctrlptWs.value[ b ];
          }

          if( edgeIsUnbundled ){ // multi or single unbundled
            manctrlptDist = ctrlptDist;
          } else {
            manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;
          }

          var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;

          var w1 = 1 - ctrlptWeight;
          var w2 = ctrlptWeight;

          var midptPts = edgeDistances === 'node-position' ? posPts : midptSrcPts;

          var adjustedMidpt = {
            x: midptPts.x1 * w1 + midptPts.x2 * w2,
            y: midptPts.y1 * w1 + midptPts.y2 * w2
          };

          rs.ctrlpts.push(
            adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint,
            adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint
          );
        }

      }

      // find endpts for edge
      this.findEndpoints( edge );

      var badStart = !is.number( rs.startX ) || !is.number( rs.startY );
      var badAStart = !is.number( rs.arrowStartX ) || !is.number( rs.arrowStartY );
      var badEnd = !is.number( rs.endX ) || !is.number( rs.endY );
      var badAEnd = !is.number( rs.arrowEndX ) || !is.number( rs.arrowEndY );

      var minCpADistFactor = 3;
      var arrowW = this.getArrowWidth( edge.pstyle( 'width' ).pfValue ) * this.arrowShapeWidth;
      var minCpADist = minCpADistFactor * arrowW;

      if( rs.edgeType === 'bezier' ){
        var startACpDist = math.dist( { x: rs.ctrlpts[0], y: rs.ctrlpts[1] }, { x: rs.startX, y: rs.startY } );
        var closeStartACp = startACpDist < minCpADist;
        var endACpDist = math.dist( { x: rs.ctrlpts[0], y: rs.ctrlpts[1] }, { x: rs.endX, y: rs.endY } );
        var closeEndACp = endACpDist < minCpADist;

        var overlapping = false;

        if( badStart || badAStart || closeStartACp ){
          overlapping = true;

          // project control point along line from src centre to outside the src shape
          // (otherwise intersection will yield nothing)
          var cpD = { // delta
            x: rs.ctrlpts[0] - srcPos.x,
            y: rs.ctrlpts[1] - srcPos.y
          };
          var cpL = Math.sqrt( cpD.x * cpD.x + cpD.y * cpD.y ); // length of line
          var cpM = { // normalised delta
            x: cpD.x / cpL,
            y: cpD.y / cpL
          };
          var radius = Math.max( srcW, srcH );
          var cpProj = { // *2 radius guarantees outside shape
            x: rs.ctrlpts[0] + cpM.x * 2 * radius,
            y: rs.ctrlpts[1] + cpM.y * 2 * radius
          };

          var srcCtrlPtIntn;
          
          if(sbgn.isNodeShapeTotallyOverriden(this, src))
            srcCtrlPtIntn = srcShape.intersectLine(src, cpProj.x, cpProj.y, edge._private.data.portsource);
          else
            srcCtrlPtIntn = srcShape.intersectLine(
              srcPos.x,
              srcPos.y,
              srcW,
              srcH,
              cpProj.x,
              cpProj.y,
              0
            );

          if( closeStartACp ){
            rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
            rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
          } else {
            rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
            rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
          }
        }

        if( badEnd || badAEnd || closeEndACp ){
          overlapping = true;

          // project control point along line from tgt centre to outside the tgt shape
          // (otherwise intersection will yield nothing)
          var cpD = { // delta
            x: rs.ctrlpts[0] - tgtPos.x,
            y: rs.ctrlpts[1] - tgtPos.y
          };
          var cpL = Math.sqrt( cpD.x * cpD.x + cpD.y * cpD.y ); // length of line
          var cpM = { // normalised delta
            x: cpD.x / cpL,
            y: cpD.y / cpL
          };
          var radius = Math.max( srcW, srcH );
          var cpProj = { // *2 radius guarantees outside shape
            x: rs.ctrlpts[0] + cpM.x * 2 * radius,
            y: rs.ctrlpts[1] + cpM.y * 2 * radius
          };

          var tgtCtrlPtIntn;
          if(sbgn.isNodeShapeTotallyOverriden(this, tgt))
            tgtCtrlPtIntn = tgtShape.intersectLine(tgt, cpProj.x, cpProj.y, edge._private.data.porttarget);
          else
            tgtCtrlPtIntn = tgtShape.intersectLine(
              tgtPos.x,
              tgtPos.y,
              tgtW,
              tgtH,
              cpProj.x,
              cpProj.y,
              0
            );

          if( closeEndACp ){
            rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - endACpDist);
            rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - endACpDist);
          } else {
            rs.ctrlpts[0] = tgtCtrlPtIntn[0] + cpM.x * minCpADist;
            rs.ctrlpts[1] = tgtCtrlPtIntn[1] + cpM.y * minCpADist;
          }

        }

        if( overlapping ){
          // recalc endpts
          this.findEndpoints( edge );
        }

      }

      if( rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' ){
        rs.allpts = [];

        rs.allpts.push( rs.startX, rs.startY );

        for( var b = 0; b + 1 < rs.ctrlpts.length; b += 2 ){
          // ctrl pt itself
          rs.allpts.push( rs.ctrlpts[ b ], rs.ctrlpts[ b + 1] );

          // the midpt between ctrlpts as intermediate destination pts
          if( b + 3 < rs.ctrlpts.length ){
            rs.allpts.push( (rs.ctrlpts[ b ] + rs.ctrlpts[ b + 2]) / 2, (rs.ctrlpts[ b + 1] + rs.ctrlpts[ b + 3]) / 2 );
          }
        }

        rs.allpts.push( rs.endX, rs.endY );

        var m, mt;
        if( rs.ctrlpts.length / 2 % 2 === 0 ){
          m = rs.allpts.length / 2 - 1;

          rs.midX = rs.allpts[ m ];
          rs.midY = rs.allpts[ m + 1];
        } else {
          m = rs.allpts.length / 2 - 3;
          mt = 0.5;

          rs.midX = math.qbezierAt( rs.allpts[ m ], rs.allpts[ m + 2], rs.allpts[ m + 4], mt );
          rs.midY = math.qbezierAt( rs.allpts[ m + 1], rs.allpts[ m + 3], rs.allpts[ m + 5], mt );
        }

      } else if( rs.edgeType === 'straight' ){
        // need to calc these after endpts
        rs.allpts = [ rs.startX, rs.startY, rs.endX, rs.endY ];

        // default midpt for labels etc
        rs.midX = ( rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX ) / 4;
        rs.midY = ( rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY ) / 4;

      } else if( rs.edgeType === 'segments' ){
        rs.allpts = [];
        rs.allpts.push( rs.startX, rs.startY );
        rs.allpts.push.apply( rs.allpts, rs.segpts );
        rs.allpts.push( rs.endX, rs.endY );

        if( rs.segpts.length % 4 === 0 ){
          var i2 = rs.segpts.length / 2;
          var i1 = i2 - 2;

          rs.midX = ( rs.segpts[ i1 ] + rs.segpts[ i2 ] ) / 2;
          rs.midY = ( rs.segpts[ i1 + 1] + rs.segpts[ i2 + 1] ) / 2;
        } else {
          var i1 = rs.segpts.length / 2 - 1;

          rs.midX = rs.segpts[ i1 ];
          rs.midY = rs.segpts[ i1 + 1];
        }


      }

      this.projectLines( edge );
      this.calculateArrowAngles( edge );
      this.recalculateEdgeLabelProjections( edge );
      this.calculateLabelAngles( edge );

    } // for pair edges
  } // for pair ids

  for( var i = 0; i < haystackEdges.length; i++ ){
    var edge = haystackEdges[ i ];
    var _p = edge._private;
    var rscratch = _p.rscratch;
    var rs = rscratch;

    if( !rscratch.haystack ){
      var angle = Math.random() * 2 * Math.PI;

      rscratch.source = {
        x: Math.cos( angle ),
        y: Math.sin( angle )
      };

      var angle = Math.random() * 2 * Math.PI;

      rscratch.target = {
        x: Math.cos( angle ),
        y: Math.sin( angle )
      };

    }

    var src = _p.source;
    var tgt = _p.target;
    var srcPos = src._private.position;
    var tgtPos = tgt._private.position;
    var srcW = src.width();
    var tgtW = tgt.width();
    var srcH = src.height();
    var tgtH = tgt.height();
    var radius = edge.pstyle( 'haystack-radius' ).value;
    var halfRadius = radius / 2; // b/c have to half width/height

    rs.haystackPts = rs.allpts = [
      rs.source.x * srcW * halfRadius + srcPos.x,
      rs.source.y * srcH * halfRadius + srcPos.y,
      rs.target.x * tgtW * halfRadius + tgtPos.x,
      rs.target.y * tgtH * halfRadius + tgtPos.y
    ];

    rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;
    rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2;

    // always override as haystack in case set to different type previously
    rscratch.edgeType = 'haystack';
    rscratch.haystack = true;

    this.projectLines( edge );
    this.calculateArrowAngles( edge );
    this.recalculateEdgeLabelProjections( edge );
    this.calculateLabelAngles( edge );
  }

  return hashTable;
};

var getAngleFromDisp = function( dispX, dispY ){
  return Math.atan2( dispY, dispX ) - Math.PI / 2;
};

BRp.calculateArrowAngles = function( edge ){
  var rs = edge._private.rscratch;
  var isHaystack = rs.edgeType === 'haystack';
  var isBezier = rs.edgeType === 'bezier';
  var isMultibezier = rs.edgeType === 'multibezier';
  var isSegments = rs.edgeType === 'segments';
  var isCompound = rs.edgeType === 'compound';
  var isSelf = rs.edgeType === 'self';
  var isInside = rs.edgePointsTowards === 'inside';

  // Displacement gives direction for arrowhead orientation
  var dispX, dispY;
  var startX, startY, endX, endY;

  var srcPos = edge._private.source._private.position;
  var tgtPos = edge._private.target._private.position;

  if( isHaystack ){
    startX = rs.haystackPts[0];
    startY = rs.haystackPts[1];
    endX = rs.haystackPts[2];
    endY = rs.haystackPts[3];
  } else {
    startX = rs.arrowStartX;
    startY = rs.arrowStartY;
    endX = rs.arrowEndX;
    endY = rs.arrowEndY;
  }

  // source
  //

  if( !isInside && isSegments ){
    dispX = startX - rs.segpts[0];
    dispY = startY - rs.segpts[1];
  } else if( !isInside && ( isMultibezier || isCompound || isSelf || isBezier ) ){
    var pts = rs.allpts;
    var bX = math.qbezierAt( pts[0], pts[2], pts[4], 0.1 );
    var bY = math.qbezierAt( pts[1], pts[3], pts[5], 0.1 );

    dispX = startX - bX;
    dispY = startY - bY;
  } else {
    dispX = srcPos.x - startX;
    dispY = srcPos.y - startY;
  }

  rs.srcArrowAngle = getAngleFromDisp( dispX, dispY );

  // mid target
  //

  var midX = rs.midX;
  var midY = rs.midY;

  if( isHaystack ){
    midX = ( startX + endX ) / 2;
    midY = ( startY + endY ) / 2;
  }

  dispX = endX - startX;
  dispY = endY - startY;

  if( isSelf ){
    dispX = -1;
    dispY = 1;
  } else if( isSegments ){
    var pts = rs.allpts;

    if( pts.length / 2 % 2 === 0 ){
      var i2 = pts.length / 2;
      var i1 = i2 - 2;

      dispX = ( pts[ i2 ] - pts[ i1 ] );
      dispY = ( pts[ i2 + 1] - pts[ i1 + 1] );
    } else {
      var i2 = pts.length / 2 - 1;
      var i1 = i2 - 2;
      var i3 = i2 + 2;

      dispX = ( pts[ i2 ] - pts[ i1 ] );
      dispY = ( pts[ i2 + 1] - pts[ i1 + 1] );
    }
  } else if( isMultibezier || isCompound ){
    var pts = rs.allpts;
    var cpts = rs.ctrlpts;
    var bp0x, bp0y;
    var bp1x, bp1y;

    if( cpts.length / 2 % 2 === 0 ){
      var p0 = pts.length / 2 - 1; // startpt
      var ic = p0 + 2;
      var p1 = ic + 2;

      bp0x = math.qbezierAt( pts[ p0 ], pts[ ic ], pts[ p1 ], 0.0 );
      bp0y = math.qbezierAt( pts[ p0 + 1], pts[ ic + 1], pts[ p1 + 1], 0.0 );

      bp1x = math.qbezierAt( pts[ p0 ], pts[ ic ], pts[ p1 ], 0.0001 );
      bp1y = math.qbezierAt( pts[ p0 + 1], pts[ ic + 1], pts[ p1 + 1], 0.0001 );
    } else {
      var ic = pts.length / 2 - 1; // ctrpt
      var p0 = ic - 2; // startpt
      var p1 = ic + 2; // endpt

      bp0x = math.qbezierAt( pts[ p0 ], pts[ ic ], pts[ p1 ], 0.4999 );
      bp0y = math.qbezierAt( pts[ p0 + 1], pts[ ic + 1], pts[ p1 + 1], 0.4999 );

      bp1x = math.qbezierAt( pts[ p0 ], pts[ ic ], pts[ p1 ], 0.5 );
      bp1y = math.qbezierAt( pts[ p0 + 1], pts[ ic + 1], pts[ p1 + 1], 0.5 );
    }

    dispX = ( bp1x - bp0x );
    dispY = ( bp1y - bp0y );
  }

  rs.midtgtArrowAngle = getAngleFromDisp( dispX, dispY );

  rs.midDispX = dispX;
  rs.midDispY = dispY;

  // mid source
  //

  dispX *= -1;
  dispY *= -1;

  if( isSegments ){
    var pts = rs.allpts;

    if( pts.length / 2 % 2 === 0 ){
      // already ok
    } else {
      var i2 = pts.length / 2 - 1;
      var i3 = i2 + 2;

      dispX = -( pts[ i3 ] - pts[ i2 ] );
      dispY = -( pts[ i3 + 1] - pts[ i2 + 1] );
    }
  }

  rs.midsrcArrowAngle = getAngleFromDisp( dispX, dispY );

  // target
  //

  if( !isInside && isSegments ){
    dispX = endX - rs.segpts[ rs.segpts.length - 2 ];
    dispY = endY - rs.segpts[ rs.segpts.length - 1 ];
  } else if( !isInside && ( isMultibezier || isCompound || isSelf || isBezier ) ){
    var pts = rs.allpts;
    var l = pts.length;
    var bX = math.qbezierAt( pts[l-6], pts[l-4], pts[l-2], 0.9 );
    var bY = math.qbezierAt( pts[l-5], pts[l-3], pts[l-1], 0.9 );

    dispX = endX - bX;
    dispY = endY - bY;
  } else {
    dispX = tgtPos.x - endX;
    dispY = tgtPos.y - endY;
  }

  rs.tgtArrowAngle = getAngleFromDisp( dispX, dispY );
};

BRp.calculateLabelAngles = function( ele ){
  var _p = ele._private;
  var rs = _p.rscratch;
  var isEdge = ele.isEdge();
  var rot = ele.pstyle( 'text-rotation' );
  var rotStr = rot.strValue;

  if( rotStr === 'none' ){
    rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = 0;
  } else if( isEdge && rotStr === 'autorotate' ){
    rs.labelAngle = Math.atan( rs.midDispY / rs.midDispX );
    rs.sourceLabelAngle = rs.sourceLabelAutoAngle;
    rs.targetLabelAngle = rs.targetLabelAutoAngle;
  } else if( rotStr === 'autorotate' ){
    rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = 0;
  } else {
    rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = rot.pfValue;
  }
};


BRp.findEndpoints = function( edge ){
  var r = this;
  var intersect;

  var source = edge.source()[0];
  var target = edge.target()[0];

  var src_p = source._private;
  var tgt_p = target._private;

  var srcPos = src_p.position;
  var tgtPos = tgt_p.position;

  var tgtArShape = edge.pstyle( 'target-arrow-shape' ).value;
  var srcArShape = edge.pstyle( 'source-arrow-shape' ).value;

  var tgtDist = edge.pstyle( 'target-distance-from-node' ).pfValue;
  var srcDist = edge.pstyle( 'source-distance-from-node' ).pfValue;

  var rs = edge._private.rscratch;

  var et = rs.edgeType;
  var self = et === 'self' || et === 'compound';
  var bezier = et === 'bezier' || et === 'multibezier' || self;
  var multi = et !== 'bezier';
  var lines = et === 'straight' || et === 'segments';
  var segments = et === 'segments';
  
  var porttarget = edge._private.data.porttarget;
  var portsource = edge._private.data.portsource;
  
  var hasEndpts = bezier || multi || lines;
  var pointsTowards = self ? 'inside' : edge.pstyle('edge-pointing-direction').value;
  var inside = pointsTowards === 'inside';

  rs.edgePointsTowards = pointsTowards;

  var p1; // last known point of edge on target side
  var p2; // last known point of edge on source side

  var p1_i; // point to intersect with target shape
  var p2_i; // point to intersect with source shape

  if( bezier ){
    var cpStart = [ rs.ctrlpts[0], rs.ctrlpts[1] ];
    var cpEnd = multi ? [ rs.ctrlpts[ rs.ctrlpts.length - 2], rs.ctrlpts[ rs.ctrlpts.length - 1] ] : cpStart;

    p1 = cpEnd;
    p2 = cpStart;
  } else if( lines ){
    var srcArrowFromPt = !segments ? [ tgtPos.x, tgtPos.y ] : rs.segpts.slice( 0, 2 );
    var tgtArrowFromPt = !segments ? [ srcPos.x, srcPos.y ] : rs.segpts.slice( rs.segpts.length - 2 );

    p1 = tgtArrowFromPt;
    p2 = srcArrowFromPt;
    
    if(!segments){
      var portP1 = sbgn.addPortReplacementIfAny(source, portsource);
      var portP2 = sbgn.addPortReplacementIfAny(target, porttarget);

      if(portP1.x != srcPos.x || portP1.y != srcPos.y){
        p1[0] = portP1.x;
        p1[1] = portP1.y;
      }

      if(portP2.x != tgtPos.x || portP2.y != tgtPos.y){
        p2[0] = portP2.x;
        p2[1] = portP2.y;
      }
    }
  }

  p1_i = p1;
  p2_i = p2;

  if( !inside ){
    p1_i = [ srcPos.x, srcPos.y ];
    p2_i = [ tgtPos.x, tgtPos.y ];
  }

  if(sbgn.isNodeShapeTotallyOverriden(this, target))
    intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(target, p1[0], p1[1], porttarget );
  else
    intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(
      tgtPos.x,
      tgtPos.y,
      target.outerWidth(),
      target.outerHeight(),
      p1[0],
      p1[1],
      0
    );

  var arrowEnd = math.shortenIntersection(
    intersect,
    p1,
    r.arrowShapes[ tgtArShape ].spacing( edge ) + tgtDist
  );
  var edgeEnd = math.shortenIntersection(
    intersect,
    p1,
    r.arrowShapes[ tgtArShape ].gap( edge ) + tgtDist
  );

  rs.endX = edgeEnd[0];
  rs.endY = edgeEnd[1];

  rs.arrowEndX = arrowEnd[0];
  rs.arrowEndY = arrowEnd[1];

  if(sbgn.isNodeShapeTotallyOverriden(this, source))
    intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(source, p2[0], p2[1], portsource);
  else
    intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(
      srcPos.x,
      srcPos.y,
      source.outerWidth(),
      source.outerHeight(),
      p2[0],
      p2[1],
      0
    );

  var arrowStart = math.shortenIntersection(
    intersect,
    p2,
    r.arrowShapes[ srcArShape ].spacing( edge ) + srcDist
  );
  var edgeStart = math.shortenIntersection(
    intersect,
    p2,
    r.arrowShapes[ srcArShape ].gap( edge ) + srcDist
  );

  rs.startX = edgeStart[0];
  rs.startY = edgeStart[1];

  rs.arrowStartX = arrowStart[0];
  rs.arrowStartY = arrowStart[1];

  if( hasEndpts ){
    if( !is.number( rs.startX ) || !is.number( rs.startY ) || !is.number( rs.endX ) || !is.number( rs.endY ) ){
      rs.badLine = true;
    } else {
      rs.badLine = false;
    }
  }
};

BRp.getArrowWidth = BRp.getArrowHeight = function( edgeWidth ){
  var cache = this.arrowWidthCache = this.arrowWidthCache || {};

  var cachedVal = cache[ edgeWidth ];
  if( cachedVal ){
    return cachedVal;
  }

  cachedVal =  Math.max( Math.pow( edgeWidth * 13.37, 0.9 ), 29 );
  cache[ edgeWidth ] = cachedVal;

  return cachedVal;
};

module.exports = BRp;

},{"../../../collection/zsort":35,"../../../is":86,"../../../math":88,"../../../sbgn":90,"../../../util":104}],62:[function(require,module,exports){
'use strict';

var BRp = {};

BRp.getCachedImage = function( url, crossOrigin, onLoad ){
  var r = this;
  var imageCache = r.imageCache = r.imageCache || {};
  var cache = imageCache[ url ];

  if( cache ){
    if( !cache.image.complete ){
      cache.image.addEventListener('load', onLoad);
    }

    return cache.image;
  } else {
    cache = imageCache[ url ] = imageCache[ url ] || {};

    var image = cache.image = new Image(); // eslint-disable-line no-undef
    image.addEventListener('load', onLoad);

    // #1582 safari doesn't load data uris with crossOrigin properly
    // https://bugs.webkit.org/show_bug.cgi?id=123978
    var dataUriPrefix = 'data:';
    var isDataUri = url.substring( 0, dataUriPrefix.length ).toLowerCase() === dataUriPrefix;
    if( !isDataUri ){
      image.crossOrigin = crossOrigin; // prevent tainted canvas
    }

    image.src = url;

    return image;
  }
};

module.exports = BRp;

},{}],63:[function(require,module,exports){
'use strict';

var is = require( '../../../is' );
var util = require( '../../../util' );

var BaseRenderer = function( options ){ this.init( options ); };
var BR = BaseRenderer;
var BRp = BR.prototype;

BRp.clientFunctions = [ 'redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl' ];

BRp.init = function( options ){
  var r = this;

  r.options = options;

  r.cy = options.cy;

  r.container = options.cy.container();

  r.selection = [ undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag

  r.bezierProjPcts = [ 0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95 ];

  //--Pointer-related data
  r.hoverData = {down: null, last: null,
      downTime: null, triggerMode: null,
      dragging: false,
      initialPan: [ null, null ], capture: false};

  r.dragData = {possibleDragElements: []};

  r.touchData = {
    start: null, capture: false,

    // These 3 fields related to tap, taphold events
    startPosition: [ null, null, null, null, null, null ],
    singleTouchStartTime: null,
    singleTouchMoved: true,

    now: [ null, null, null, null, null, null ],
    earlier: [ null, null, null, null, null, null ]
  };

  r.redraws = 0;
  r.showFps = options.showFps;

  r.hideEdgesOnViewport = options.hideEdgesOnViewport;
  r.hideLabelsOnViewport = options.hideLabelsOnViewport;
  r.textureOnViewport = options.textureOnViewport;
  r.wheelSensitivity = options.wheelSensitivity;
  r.motionBlurEnabled = options.motionBlur; // on by default
  r.forcedPixelRatio = options.pixelRatio;
  r.motionBlur = options.motionBlur; // for initial kick off
  r.motionBlurOpacity = options.motionBlurOpacity;
  r.motionBlurTransparency = 1 - r.motionBlurOpacity;
  r.motionBlurPxRatio = 1;
  r.mbPxRBlurry = 1; //0.8;
  r.minMbLowQualFrames = 4;
  r.fullQualityMb = false;
  r.clearedForMotionBlur = [];
  r.desktopTapThreshold = options.desktopTapThreshold;
  r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;
  r.touchTapThreshold = options.touchTapThreshold;
  r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;
  r.tapholdDuration = 500;

  r.bindings = [];
  r.beforeRenderCallbacks = [];
  r.beforeRenderPriorities = { // higher priority execs before lower one
    animations:   400,
    eleCalcs:     300,
    eleTxrDeq:    200,
    lyrTxrDeq:    100
  };

  r.registerNodeShapes();
  r.registerArrowShapes();
  r.registerCalculationListeners();
  r.load();
};

BRp.notify = function( params ){
  var types;
  var r = this;

  // the renderer can't be notified after it's destroyed
  if( this.destroyed ){ return; }

  if( is.array( params.type ) ){
    types = params.type;

  } else {
    types = [ params.type ];
  }

  var has = {};
  for( var i = 0; i < types.length; i++ ){
    var type = types[ i ];

    has[ type ] = true;
  } // for

  if( has['destroy'] ){
    r.destroy();
    return;
  }

  if( has['add'] || has['remove'] || has['load'] || has['zorder'] ){
    r.invalidateCachedZSortedEles();
  }

  if( has['viewport'] ){
    r.redrawHint( 'select', true );
  }

  if( has['load'] || has['resize'] ){
    r.invalidateContainerClientCoordsCache();
    r.matchCanvasSize( r.container );
  }

  r.redrawHint( 'eles', true );
  r.redrawHint( 'drag', true );

  this.startRenderLoop();

  this.redraw();
};

BRp.destroy = function(){
  var r = this;

  r.destroyed = true;

  r.cy.stopAnimationLoop();

  for( var i = 0; i < r.bindings.length; i++ ){
    var binding = r.bindings[ i ];
    var b = binding;
    var tgt = b.target;

    ( tgt.off || tgt.removeEventListener ).apply( tgt, b.args );
  }

  r.bindings = [];
  r.beforeRenderCallbacks = [];
  r.onUpdateEleCalcsFns = [];

  if( r.removeObserver ){
    r.removeObserver.disconnect();
  }

  if( r.styleObserver ){
    r.styleObserver.disconnect();
  }

  if( r.labelCalcDiv ){
    try {
      document.body.removeChild( r.labelCalcDiv ); // eslint-disable-line no-undef
    } catch( e ){
      // ie10 issue #1014
    }
  }
};

[
  require( './arrow-shapes' ),
  require( './coord-ele-math' ),
  require( './images' ),
  require( './load-listeners' ),
  require( './node-shapes' ),
  require( './redraw' )
].forEach( function( props ){
  util.extend( BRp, props );
} );

module.exports = BR;

},{"../../../is":86,"../../../util":104,"./arrow-shapes":60,"./coord-ele-math":61,"./images":62,"./load-listeners":64,"./node-shapes":65,"./redraw":66}],64:[function(require,module,exports){
'use strict';

var is = require( '../../../is' );
var util = require( '../../../util' );
var math = require( '../../../math' );
var Event = require( '../../../event' );

var BRp = {};

BRp.registerBinding = function( target, event, handler, useCapture ){
  var args = Array.prototype.slice.apply( arguments, [1] ); // copy
  var b = this.binder( target );

  return b.on.apply( b, args );
};

BRp.binder = function( tgt ){
  var r = this;

  var on = function(){
    var args = arguments;

    r.bindings.push({
      target: tgt,
      args: args
    });

    ( tgt.addEventListener || tgt.on ).apply( tgt, args );

    return this;
  };

  return {
    on: on,
    addEventListener: on,
    addListener: on,
    bind: on
  };
};

BRp.nodeIsDraggable = function( node ){
  return (
    node
    && node.isNode()
    && !node.locked()
    && node.grabbable()
  );
};

BRp.nodeIsGrabbable = function( node ){
  return (
    this.nodeIsDraggable( node )
    && node.pstyle( 'opacity' ).value !== 0
    && node.pstyle( 'visibility' ).value === 'visible'
    && node.pstyle( 'display' ).value === 'element'
  );
};

BRp.load = function(){
  var r = this;

  var triggerEvents = function( target, names, e, props ){
    if( target == null ){
      target = r.cy;
    }

    for( var i = 0; i < names.length; i++ ){
      var name = names[ i ];

      var event = new Event( e, util.extend( { type: name }, props ) );
      target.trigger( event );
    }
  };

  var isMultSelKeyDown = function( e ){
    return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey
  };

  var allowPanningPassthrough = function( down, downs ){
    var allowPassthrough = true;

    if( r.cy.hasCompoundNodes() && down && down.isEdge() ){
      // a compound node below the edge => no passthrough panning
      for( var i = 0; downs && i < downs.length; i++ ){
        var down = downs[i];

        if( down.isNode() && down.isParent() ){
          allowPassthrough = false;
          break;
        }
      }
    } else {
      allowPassthrough = true;
    }

    return allowPassthrough;
  };

  var getDragListIds = function( opts ){
    var listHasId;

    if( opts.addToList && r.cy.hasCompoundNodes() ){ // only needed for compound graphs
      if( !opts.addToList.hasId ){ // build ids lookup if doesn't already exist
        opts.addToList.hasId = {};

        for( var i = 0; i < opts.addToList.length; i++ ){
          var ele = opts.addToList[ i ];

          opts.addToList.hasId[ ele.id() ] = true;
        }
      }

      listHasId = opts.addToList.hasId;
    }

    return listHasId || {};
  };

  var setGrabbed = function( ele ){
    ele[0]._private.grabbed = true;
  };

  var setFreed = function( ele ){
    ele[0]._private.grabbed = false;
  };

  var setInDragLayer = function( ele ){
    ele[0]._private.rscratch.inDragLayer = true;
  };

  var setOutDragLayer = function( ele ){
    ele[0]._private.rscratch.inDragLayer = false;
  };

  var setGrabTarget = function( ele ){
    ele[0]._private.rscratch.isGrabTarget = true;
  };

  var removeGrabTarget = function( ele ){
    ele[0]._private.rscratch.isGrabTarget = false;
  };

  var addToDragList = function( ele, opts ){
    var listHasId = getDragListIds( opts );

    if( !listHasId[ ele.id() ] ){
      opts.addToList.push( ele );
      listHasId[ ele.id() ] = true;

      setGrabbed( ele );
    }
  };

  // helper function to determine which child nodes and inner edges
  // of a compound node to be dragged as well as the grabbed and selected nodes
  var addDescendantsToDrag = function( node, opts ){
    if( !node.cy().hasCompoundNodes() ){
      return;
    }

    if( opts.inDragLayer == null && opts.addToList == null ){ return; } // nothing to do

    var innerNodes = node.descendants();

    if( opts.inDragLayer ){
      innerNodes.forEach( setInDragLayer );
      innerNodes.connectedEdges().forEach( setInDragLayer );
    }

    if( opts.addToList ){
      innerNodes.forEach(function( ele ){
        addToDragList( ele, opts );
      });
    }
  };

  // adds the given nodes and its neighbourhood to the drag layer
  var addNodesToDrag = function( nodes, opts ){
    opts = opts || {};

    var hasCompoundNodes = nodes.cy().hasCompoundNodes();

    if( opts.inDragLayer ){
      nodes.forEach( setInDragLayer );

      nodes.neighborhood().stdFilter(function( ele ){
        return !hasCompoundNodes || ele.isEdge();
      }).forEach( setInDragLayer );
    }

    if( opts.addToList ){
      nodes.forEach(function( ele ){
        addToDragList( ele, opts );
      });
    }

    addDescendantsToDrag( nodes, opts ); // always add to drag

    // also add nodes and edges related to the topmost ancestor
    updateAncestorsInDragLayer( nodes, {
      inDragLayer: opts.inDragLayer
    } );

    r.updateCachedGrabbedEles();
  };

  var addNodeToDrag = addNodesToDrag;

  var freeDraggedElements = function( grabbedEles ){
    if( !grabbedEles ){ return; }

    grabbedEles.hasId = {}; // clear the id list

    // just go over all elements rather than doing a bunch of (possibly expensive) traversals
    r.getCachedZSortedEles().forEach(function( ele ){
      setFreed( ele );
      setOutDragLayer( ele );
      removeGrabTarget( ele );
    });

    r.updateCachedGrabbedEles();
  };

  // helper function to determine which ancestor nodes and edges should go
  // to the drag layer (or should be removed from drag layer).
  var updateAncestorsInDragLayer = function( node, opts ){

    if( opts.inDragLayer == null && opts.addToList == null ){ return; } // nothing to do

    if( !node.cy().hasCompoundNodes() ){
      return;
    }

    // find top-level parent
    var parent = node.ancestors().orphans();

    // no parent node: no nodes to add to the drag layer
    if( parent.same( node ) ){
      return;
    }

    var nodes = parent.descendants().spawnSelf()
      .merge( parent )
      .unmerge( node )
      .unmerge( node.descendants() )
    ;

    var edges = nodes.connectedEdges();

    if( opts.inDragLayer ){
      edges.forEach( setInDragLayer );
      nodes.forEach( setInDragLayer );
    }

    if( opts.addToList ){
      nodes.forEach(function( ele ){
        addToDragList( ele, opts );
      });
    }
  };

  var haveMutationsApi = typeof MutationObserver !== 'undefined';

  // watch for when the cy container is removed from the dom
  if( haveMutationsApi ){
    r.removeObserver = new MutationObserver( function( mutns ){ // eslint-disable-line no-undef
      for( var i = 0; i < mutns.length; i++ ){
        var mutn = mutns[ i ];
        var rNodes = mutn.removedNodes;

        if( rNodes ){ for( var j = 0; j < rNodes.length; j++ ){
          var rNode = rNodes[ j ];

          if( rNode === r.container ){
            r.destroy();
            break;
          }
        } }
      }
    } );

    if( r.container.parentNode ){
      r.removeObserver.observe( r.container.parentNode, { childList: true } );
    }
  } else {
    r.registerBinding( r.container, 'DOMNodeRemoved', function( e ){
      r.destroy();
    } );
  }

  var onResize = util.debounce( function(){
    r.cy.invalidateSize();
    r.invalidateContainerClientCoordsCache();

    r.matchCanvasSize( r.container );
    r.redrawHint( 'eles', true );
    r.redrawHint( 'drag', true );
    r.redraw();
  }, 100 );

  if( haveMutationsApi ){
    r.styleObserver = new MutationObserver( onResize ); // eslint-disable-line no-undef

    r.styleObserver.observe( r.container, { attributes: true } );
  }

  // auto resize
  r.registerBinding( window, 'resize', onResize ); // eslint-disable-line no-undef

  var invalCtnrBBOnScroll = function( domEle ){
    r.registerBinding( domEle, 'scroll', function( e ){
      r.invalidateContainerClientCoordsCache();
    } );
  };

  var bbCtnr = r.cy.container();

  for( ;; ){

    invalCtnrBBOnScroll( bbCtnr );

    if( bbCtnr.parentNode ){
      bbCtnr = bbCtnr.parentNode;
    } else {
      break;
    }

  }

  // stop right click menu from appearing on cy
  r.registerBinding( r.container, 'contextmenu', function( e ){
    e.preventDefault();
  } );

  var inBoxSelection = function(){
    return r.selection[4] !== 0;
  };

  // Primary key
  r.registerBinding( r.container, 'mousedown', function mousedownHandler( e ){
    e.preventDefault();
    r.hoverData.capture = true;
    r.hoverData.which = e.which;

    var cy = r.cy;
    var gpos = [ e.clientX, e.clientY ];
    var pos = r.projectIntoViewport( gpos[0], gpos[1] );
    var select = r.selection;
    var nears = r.findNearestElements( pos[0], pos[1], false );
    var near = nears[0];
    var draggedElements = r.dragData.possibleDragElements;

    r.hoverData.mdownPos = pos;
    r.hoverData.mdownGPos = gpos;

    var checkForTaphold = function(){
      r.hoverData.tapholdCancelled = false;

      clearTimeout( r.hoverData.tapholdTimeout );

      r.hoverData.tapholdTimeout = setTimeout( function(){

        if( r.hoverData.tapholdCancelled ){
          return;
        } else {
          var ele = r.hoverData.down;

          if( ele ){
            ele.trigger( new Event( e, {
              type: 'taphold',
              cyPosition: { x: pos[0], y: pos[1] }
            } ) );
          } else {
            cy.trigger( new Event( e, {
              type: 'taphold',
              cyPosition: { x: pos[0], y: pos[1] }
            } ) );
          }
        }

      }, r.tapholdDuration );
    };

    // Right click button
    if( e.which == 3 ){

      r.hoverData.cxtStarted = true;

      var cxtEvt = new Event( e, {
        type: 'cxttapstart',
        cyPosition: { x: pos[0], y: pos[1] }
      } );

      if( near ){
        near.activate();
        near.trigger( cxtEvt );

        r.hoverData.down = near;
      } else {
        cy.trigger( cxtEvt );
      }

      r.hoverData.downTime = (new Date()).getTime();
      r.hoverData.cxtDragged = false;

    // Primary button
    } else if( e.which == 1 ){

      if( near ){
        near.activate();
      }

      // Element dragging
      {
        // If something is under the cursor and it is draggable, prepare to grab it
        if( near != null ){

          if( r.nodeIsGrabbable( near ) ){

            var grabEvent = new Event( e, {
              type: 'grab',
              cyPosition: { x: pos[0], y: pos[1] }
            } );

            setGrabTarget( near );

            if( !near.selected() ){

              draggedElements = r.dragData.possibleDragElements = [];
              addNodeToDrag( near, { addToList: draggedElements } );

              near.trigger( grabEvent );

            } else if( near.selected() ){
              draggedElements = r.dragData.possibleDragElements = [  ];

              var selectedNodes = cy.$( function(){ return this.isNode() && this.selected() && r.nodeIsGrabbable( this ); } );

              addNodesToDrag( selectedNodes, { addToList: draggedElements } );

              near.trigger( grabEvent );
            }

            r.redrawHint( 'eles', true );
            r.redrawHint( 'drag', true );

          }

        }

        r.hoverData.down = near;
        r.hoverData.downs = nears;
        r.hoverData.downTime = (new Date()).getTime();
      }

      triggerEvents( near, [ 'mousedown', 'tapstart', 'vmousedown' ], e, {
        cyPosition: { x: pos[0], y: pos[1] }
      } );

      if( near == null ){
        select[4] = 1;

        r.data.bgActivePosistion = {
          x: pos[0],
          y: pos[1]
        };

        r.redrawHint( 'select', true );

        r.redraw();
      } else if( near.isEdge() ){
        select[4] = 1; // for future pan
      }

      checkForTaphold();

    }

    // Initialize selection box coordinates
    select[0] = select[2] = pos[0];
    select[1] = select[3] = pos[1];

  }, false );

  r.registerBinding( window, 'mousemove', function mousemoveHandler( e ){ // eslint-disable-line no-undef
    var preventDefault = false;
    var capture = r.hoverData.capture;

    // save cycles if mouse events aren't to be captured
    if( !capture ){
      var containerPageCoords = r.findContainerClientCoords();

      if( e.clientX > containerPageCoords[0] && e.clientX < containerPageCoords[0] + r.canvasWidth
        && e.clientY > containerPageCoords[1] && e.clientY < containerPageCoords[1] + r.canvasHeight
      ){
        // inside container bounds so OK
      } else {
        return;
      }

      var cyContainer = r.container;
      var target = e.target;
      var tParent = target.parentNode;
      var containerIsTarget = false;

      while( tParent ){
        if( tParent === cyContainer ){
          containerIsTarget = true;
          break;
        }

        tParent = tParent.parentNode;
      }

      if( !containerIsTarget ){ return; } // if target is outisde cy container, then this event is not for us
    }

    var cy = r.cy;
    var zoom = cy.zoom();
    var gpos = [ e.clientX, e.clientY ];
    var pos = r.projectIntoViewport( gpos[0], gpos[1] );
    var mdownPos = r.hoverData.mdownPos;
    var mdownGPos = r.hoverData.mdownGPos;
    var select = r.selection;

    var near = null;
    if( !r.hoverData.draggingEles && !r.hoverData.dragging && !r.hoverData.selecting ){
      near = r.findNearestElement( pos[0], pos[1], false );
    }
    var last = r.hoverData.last;
    var down = r.hoverData.down;

    var disp = [ pos[0] - select[2], pos[1] - select[3] ];

    var draggedElements = r.dragData.possibleDragElements;

    var isOverThresholdDrag;

    if( mdownGPos ){
      var dx = gpos[0] - mdownGPos[0];
      var dx2 = dx * dx;
      var dy = gpos[1] - mdownGPos[1];
      var dy2 = dy * dy;
      var dist2 = dx2 + dy2;

      isOverThresholdDrag = dist2 >= r.desktopTapThreshold2;
    }

    var multSelKeyDown = isMultSelKeyDown( e );

    if (isOverThresholdDrag) {
      r.hoverData.tapholdCancelled = true;
    }

    var updateDragDelta = function(){
      var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];

      if( dragDelta.length === 0 ){
        dragDelta.push( disp[0] );
        dragDelta.push( disp[1] );
      } else {
        dragDelta[0] += disp[0];
        dragDelta[1] += disp[1];
      }
    };


    preventDefault = true;

    triggerEvents( near, [ 'mousemove', 'vmousemove', 'tapdrag' ], e, {
      cyPosition: { x: pos[0], y: pos[1] }
    } );

    var goIntoBoxMode = function(){
      r.data.bgActivePosistion = undefined;

      if( !r.hoverData.selecting ){
        cy.trigger('boxstart');
      }

      select[4] = 1;
      r.hoverData.selecting = true;

      r.redrawHint( 'select', true );
      r.redraw();
    };

    // trigger context drag if rmouse down
    if( r.hoverData.which === 3 ){
      // but only if over threshold
      if( isOverThresholdDrag ){
        var cxtEvt = new Event( e, {
          type: 'cxtdrag',
          cyPosition: { x: pos[0], y: pos[1] }
        } );

        if( down ){
          down.trigger( cxtEvt );
        } else {
          cy.trigger( cxtEvt );
        }

        r.hoverData.cxtDragged = true;

        if( !r.hoverData.cxtOver || near !== r.hoverData.cxtOver ){

          if( r.hoverData.cxtOver ){
            r.hoverData.cxtOver.trigger( new Event( e, {
              type: 'cxtdragout',
              cyPosition: { x: pos[0], y: pos[1] }
            } ) );
          }

          r.hoverData.cxtOver = near;

          if( near ){
            near.trigger( new Event( e, {
              type: 'cxtdragover',
              cyPosition: { x: pos[0], y: pos[1] }
            } ) );
          }

        }
      }

    // Check if we are drag panning the entire graph
    } else if( r.hoverData.dragging ){
      preventDefault = true;

      if( cy.panningEnabled() && cy.userPanningEnabled() ){
        var deltaP;

        if( r.hoverData.justStartedPan ){
          var mdPos = r.hoverData.mdownPos;

          deltaP = {
            x: ( pos[0] - mdPos[0] ) * zoom,
            y: ( pos[1] - mdPos[1] ) * zoom
          };

          r.hoverData.justStartedPan = false;

        } else {
          deltaP = {
            x: disp[0] * zoom,
            y: disp[1] * zoom
          };

        }

        cy.panBy( deltaP );

        r.hoverData.dragged = true;
      }

      // Needs reproject due to pan changing viewport
      pos = r.projectIntoViewport( e.clientX, e.clientY );

    // Checks primary button down & out of time & mouse not moved much
    } else if(
        select[4] == 1 && (down == null || down.isEdge())
    ){

      if( isOverThresholdDrag ){

        if( !r.hoverData.dragging && cy.boxSelectionEnabled() && ( multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled() ) ){
          goIntoBoxMode();

        } else if( !r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled() ){
          var allowPassthrough = allowPanningPassthrough( down, r.hoverData.downs );

          if( allowPassthrough ){
            r.hoverData.dragging = true;
            r.hoverData.justStartedPan = true;
            select[4] = 0;

            r.data.bgActivePosistion = math.array2point( mdownPos );

            r.redrawHint( 'select', true );
            r.redraw();
          }
        }

        if( down && down.isEdge() && down.active() ){ down.unactivate(); }

      }

    } else {
      if( down && down.isEdge() && down.active() ){ down.unactivate(); }

      if( ( !down || !down.grabbed() ) && near != last ){

        if( last ){
          triggerEvents( last, [ 'mouseout', 'tapdragout' ], e, {
            cyPosition: { x: pos[0], y: pos[1] }
          } );
        }

        if( near ){
          triggerEvents( near, [ 'mouseover', 'tapdragover' ], e, {
            cyPosition: { x: pos[0], y: pos[1] }
          } );
        }

        r.hoverData.last = near;
      }

      if( down && r.nodeIsDraggable( down ) ){

        if( isOverThresholdDrag ){ // then we can take action

          if( cy.boxSelectionEnabled() && multSelKeyDown ){ // then selection overrides
            if( down && down.grabbed() ){
              freeDraggedElements( draggedElements );

              down.trigger('free');
            }

            goIntoBoxMode();

          } else { // otherwise drag
            var justStartedDrag = !r.dragData.didDrag;

            if( justStartedDrag ){
              r.redrawHint( 'eles', true );
            }

            r.dragData.didDrag = true; // indicate that we actually did drag the node

            var toTrigger = [];

            // now, add the elements to the drag layer if not done already
            if( !r.hoverData.draggingEles ){
              addNodesToDrag( cy.collection( draggedElements ), { inDragLayer: true } );
            }

            for( var i = 0; i < draggedElements.length; i++ ){
              var dEle = draggedElements[ i ];

              // Locked nodes not draggable, as well as non-visible nodes
              if( r.nodeIsDraggable( dEle ) && dEle.grabbed() ){
                var dPos = dEle._private.position;

                toTrigger.push( dEle );

                if( is.number( disp[0] ) && is.number( disp[1] ) ){
                  var updatePos = !dEle.isParent();

                  if( updatePos ){
                    dPos.x += disp[0];
                    dPos.y += disp[1];
                  }

                  if( justStartedDrag ){
                    var dragDelta = r.hoverData.dragDelta;

                    if( updatePos && dragDelta && is.number( dragDelta[0] ) && is.number( dragDelta[1] ) ){
                      dPos.x += dragDelta[0];
                      dPos.y += dragDelta[1];
                    }
                  }
                }

              }
            }

            r.hoverData.draggingEles = true;

            var tcol = cy.collection( toTrigger );

            tcol.updateCompoundBounds();
            tcol.trigger( 'position drag' );

            r.redrawHint( 'drag', true );
            r.redraw();
          }

        } else { // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant
          updateDragDelta();
        }
      }

      // prevent the dragging from triggering text selection on the page
      preventDefault = true;
    }

    select[2] = pos[0]; select[3] = pos[1];

    if( preventDefault ){
      if( e.stopPropagation ) e.stopPropagation();
      if( e.preventDefault ) e.preventDefault();
      return false;
    }
  }, false );

  r.registerBinding( window, 'mouseup', function mouseupHandler( e ){ // eslint-disable-line no-undef
    var capture = r.hoverData.capture;
    if( !capture ){ return; }
    r.hoverData.capture = false;

    var cy = r.cy; var pos = r.projectIntoViewport( e.clientX, e.clientY ); var select = r.selection;
    var near = r.findNearestElement( pos[0], pos[1], false );
    var draggedElements = r.dragData.possibleDragElements; var down = r.hoverData.down;
    var multSelKeyDown = isMultSelKeyDown( e );

    if( r.data.bgActivePosistion ){
      r.redrawHint( 'select', true );
      r.redraw();
    }

    r.hoverData.tapholdCancelled = true;

    r.data.bgActivePosistion = undefined; // not active bg now

    if( down ){
      down.unactivate();
    }

    if( r.hoverData.which === 3 ){
      var cxtEvt = new Event( e, {
        type: 'cxttapend',
        cyPosition: { x: pos[0], y: pos[1] }
      } );

      if( down ){
        down.trigger( cxtEvt );
      } else {
        cy.trigger( cxtEvt );
      }

      if( !r.hoverData.cxtDragged ){
        var cxtTap = new Event( e, {
          type: 'cxttap',
          cyPosition: { x: pos[0], y: pos[1] }
        } );

        if( down ){
          down.trigger( cxtTap );
        } else {
          cy.trigger( cxtTap );
        }
      }

      r.hoverData.cxtDragged = false;
      r.hoverData.which = null;

    } else if( r.hoverData.which === 1 ){

      // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something
      if( (down == null) // not mousedown on node
        && !r.dragData.didDrag // didn't move the node around
        && !r.hoverData.selecting // not box selection
        && !r.hoverData.dragged // didn't pan
        && !isMultSelKeyDown( e )
      ){

        cy.$( function(){
          return this.selected();
        } ).unselect();

        if( draggedElements.length > 0 ){
          r.redrawHint( 'eles', true );
        }

        r.dragData.possibleDragElements = draggedElements = [];
      }

      triggerEvents( near, [ 'mouseup', 'tapend', 'vmouseup' ], e, {
        cyPosition: { x: pos[0], y: pos[1] }
      } );

      if(
        !r.dragData.didDrag // didn't move a node around
        && !r.hoverData.dragged // didn't pan
        && !r.hoverData.selecting // not box selection
      ){
        triggerEvents( down, ['click', 'tap', 'vclick'], e, {
          cyPosition: { x: pos[0], y: pos[1] }
        } );
      }

      // Single selection
      if( near == down && !r.dragData.didDrag && !r.hoverData.selecting ){
        if( near != null && near._private.selectable ){

          if( r.hoverData.dragging ){
            // if panning, don't change selection state
          } else if( cy.selectionType() === 'additive' || multSelKeyDown ){
            if( near.selected() ){
              near.unselect();
            } else {
              near.select();
            }
          } else {
            if( !multSelKeyDown ){
              cy.$( ':selected' ).unmerge( near ).unselect();
              near.select();
            }
          }

          r.redrawHint( 'eles', true );
        }
      }

      if( r.hoverData.selecting ){
        var box = cy.collection( r.getAllInBox( select[0], select[1], select[2], select[3] ) );

        r.redrawHint( 'select', true );

        if( box.length > 0 ){
          r.redrawHint( 'eles', true );
        }

        cy.trigger('boxend');

        var eleWouldBeSelected = function( ele ){ return ele.selectable() && !ele.selected(); };

        if( cy.selectionType() === 'additive' ){
          box
            .trigger('box')
            .stdFilter( eleWouldBeSelected )
              .select()
              .trigger('boxselect')
          ;
        } else {
          if( !multSelKeyDown ){
            cy.$( ':selected' ).unmerge( box ).unselect();
          }

          box
            .trigger('box')
            .stdFilter( eleWouldBeSelected )
              .select()
              .trigger('boxselect')
          ;
        }

        // always need redraw in case eles unselectable
        r.redraw();

      }

      // Cancel drag pan
      if( r.hoverData.dragging ){
        r.hoverData.dragging = false;

        r.redrawHint( 'select', true );
        r.redrawHint( 'eles', true );

        r.redraw();
      }

      if( !select[4] ) {
        r.redrawHint('drag', true);
        r.redrawHint('eles', true);

        var downWasGrabbed = down && down.grabbed();

        freeDraggedElements( draggedElements );

        if( downWasGrabbed ){ down.trigger('free'); }
      }

    } // else not right mouse

    select[4] = 0; r.hoverData.down = null;

    r.hoverData.cxtStarted = false;
    r.hoverData.draggingEles = false;
    r.hoverData.selecting = false;
    r.dragData.didDrag = false;
    r.hoverData.dragged = false;
    r.hoverData.dragDelta = [];
    r.hoverData.mdownPos = null;
    r.hoverData.mdownGPos = null;

  }, false );

  var wheelHandler = function( e ){


    if( r.scrollingPage ){ return; } // while scrolling, ignore wheel-to-zoom

    var cy = r.cy;
    var pos = r.projectIntoViewport( e.clientX, e.clientY );
    var rpos = [ pos[0] * cy.zoom() + cy.pan().x,
                  pos[1] * cy.zoom() + cy.pan().y ];

    if( r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection() ){ // if pan dragging or cxt dragging, wheel movements make no zoom
      e.preventDefault();
      return;
    }

    if( cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled() ){
      e.preventDefault();

      r.data.wheelZooming = true;
      clearTimeout( r.data.wheelTimeout );
      r.data.wheelTimeout = setTimeout( function(){
        r.data.wheelZooming = false;

        r.redrawHint( 'eles', true );
        r.redraw();
      }, 150 );

      var diff;

      if( e.deltaY != null ){
        diff = e.deltaY / -250;
      } else if( e.wheelDeltaY != null ){
        diff = e.wheelDeltaY / 1000;
      } else {
        diff = e.wheelDelta / 1000;
      }

      diff = diff * r.wheelSensitivity;

      var needsWheelFix = e.deltaMode === 1;
      if( needsWheelFix ){ // fixes slow wheel events on ff/linux and ff/windows
        diff *= 33;
      }

      cy.zoom( {
        level: cy.zoom() * Math.pow( 10, diff ),
        renderedPosition: { x: rpos[0], y: rpos[1] }
      } );
    }

  };

  // Functions to help with whether mouse wheel should trigger zooming
  // --
  r.registerBinding( r.container, 'wheel', wheelHandler, true );

  // disable nonstandard wheel events
  // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);
  // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);
  // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox

  r.registerBinding( window, 'scroll', function scrollHandler( e ){ // eslint-disable-line no-undef
    r.scrollingPage = true;

    clearTimeout( r.scrollingPageTimeout );
    r.scrollingPageTimeout = setTimeout( function(){
      r.scrollingPage = false;
    }, 250 );
  }, true );

  // Functions to help with handling mouseout/mouseover on the Cytoscape container
  // Handle mouseout on Cytoscape container
  r.registerBinding( r.container, 'mouseout', function mouseOutHandler( e ){
    var pos = r.projectIntoViewport( e.clientX, e.clientY );

    r.cy.trigger( new Event( e, {
      type: 'mouseout',
      cyPosition: { x: pos[0], y: pos[1] }
    } ) );
  }, false );

  r.registerBinding( r.container, 'mouseover', function mouseOverHandler( e ){
    var pos = r.projectIntoViewport( e.clientX, e.clientY );

    r.cy.trigger( new Event( e, {
      type: 'mouseover',
      cyPosition: { x: pos[0], y: pos[1] }
    } ) );
  }, false );

  var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom
  var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom
  var center1, modelCenter1; // center point on start pinch to zoom
  var offsetLeft, offsetTop;
  var containerWidth, containerHeight;
  var twoFingersStartInside;

  var distance = function( x1, y1, x2, y2 ){
    return Math.sqrt( (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) );
  };

  var distanceSq = function( x1, y1, x2, y2 ){
    return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
  };

  var touchstartHandler;
  r.registerBinding( r.container, 'touchstart', touchstartHandler = function( e ){
    r.touchData.capture = true;
    r.data.bgActivePosistion = undefined;

    var cy = r.cy;
    var now = r.touchData.now;
    var earlier = r.touchData.earlier;

    if( e.touches[0] ){ var pos = r.projectIntoViewport( e.touches[0].clientX, e.touches[0].clientY ); now[0] = pos[0]; now[1] = pos[1]; }
    if( e.touches[1] ){ var pos = r.projectIntoViewport( e.touches[1].clientX, e.touches[1].clientY ); now[2] = pos[0]; now[3] = pos[1]; }
    if( e.touches[2] ){ var pos = r.projectIntoViewport( e.touches[2].clientX, e.touches[2].clientY ); now[4] = pos[0]; now[5] = pos[1]; }

    // record starting points for pinch-to-zoom
    if( e.touches[1] ){

      freeDraggedElements( r.dragData.touchDragEles );

      var offsets = r.findContainerClientCoords();
      offsetLeft = offsets[0];
      offsetTop = offsets[1];
      containerWidth = offsets[2];
      containerHeight = offsets[3];

      f1x1 = e.touches[0].clientX - offsetLeft;
      f1y1 = e.touches[0].clientY - offsetTop;

      f2x1 = e.touches[1].clientX - offsetLeft;
      f2y1 = e.touches[1].clientY - offsetTop;

      twoFingersStartInside =
           0 <= f1x1 && f1x1 <= containerWidth
        && 0 <= f2x1 && f2x1 <= containerWidth
        && 0 <= f1y1 && f1y1 <= containerHeight
        && 0 <= f2y1 && f2y1 <= containerHeight
      ;

      var pan = cy.pan();
      var zoom = cy.zoom();

      distance1 = distance( f1x1, f1y1, f2x1, f2y1 );
      distance1Sq = distanceSq( f1x1, f1y1, f2x1, f2y1 );
      center1 = [ (f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2 ];
      modelCenter1 = [
        (center1[0] - pan.x) / zoom,
        (center1[1] - pan.y) / zoom
      ];

      // consider context tap
      var cxtDistThreshold = 200;
      var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;
      if( distance1Sq < cxtDistThresholdSq && !e.touches[2] ){

        var near1 = r.findNearestElement( now[0], now[1], true );
        var near2 = r.findNearestElement( now[2], now[3], true );

        if( near1 && near1.isNode() ){
          near1.activate().trigger( new Event( e, {
            type: 'cxttapstart',
            cyPosition: { x: now[0], y: now[1] }
          } ) );
          r.touchData.start = near1;

        } else if( near2 && near2.isNode() ){
          near2.activate().trigger( new Event( e, {
            type: 'cxttapstart',
            cyPosition: { x: now[0], y: now[1] }
          } ) );
          r.touchData.start = near2;

        } else {
          cy.trigger( new Event( e, {
            type: 'cxttapstart',
            cyPosition: { x: now[0], y: now[1] }
          } ) );
          r.touchData.start = null;
        }

        if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }
        r.touchData.cxt = true;
        r.touchData.cxtDragged = false;
        r.data.bgActivePosistion = undefined;

        r.redraw();
        return;

      }

    }

    if( e.touches[2] ){
      // ignore
    } else if( e.touches[1] ){
      // ignore
    } else if( e.touches[0] ){
      var nears = r.findNearestElements( now[0], now[1], true );
      var near = nears[0];

      if( near != null ){
        near.activate();

        r.touchData.start = near;
        r.touchData.starts = nears;

        if( r.nodeIsGrabbable( near ) ){

          var draggedEles = r.dragData.touchDragEles = [];

          r.redrawHint( 'eles', true );
          r.redrawHint( 'drag', true );

          if( near.selected() ){
            // reset drag elements, since near will be added again

            var selectedNodes = cy.$( function(){
              return this.selected() && r.nodeIsGrabbable( this );
            } );

            addNodesToDrag( selectedNodes, { addToList: draggedEles } );
          } else {
            addNodeToDrag( near, { addToList: draggedEles } );
          }

          setGrabTarget( near );

          near.trigger( new Event( e, {
            type: 'grab',
            cyPosition: { x: now[0], y: now[1] }
          } ) );
        }
      }

      triggerEvents( near, [ 'touchstart', 'tapstart', 'vmousedown' ], e, {
        cyPosition: { x: now[0], y: now[1] }
      } );

      if( near == null ){
        r.data.bgActivePosistion = {
          x: pos[0],
          y: pos[1]
        };

        r.redrawHint( 'select', true );
        r.redraw();
      }


      // Tap, taphold
      // -----

      r.touchData.startPosition = [];
      for (var i=0; i<now.length; i++) {
        earlier[i] = now[i];
        r.touchData.startPosition[i] = now[i];
      }

      r.touchData.startGPosition = [ e.touches[0].clientX, e.touches[0].clientY ];

      r.touchData.singleTouchMoved = false;
      r.touchData.singleTouchStartTime = +new Date();

      clearTimeout( r.touchData.tapholdTimeout );
      r.touchData.tapholdTimeout = setTimeout( function(){
        if(
            r.touchData.singleTouchMoved === false
            && !r.pinching // if pinching, then taphold unselect shouldn't take effect
            && !r.touchData.selecting // box selection shouldn't allow taphold through
        ){
          triggerEvents( r.touchData.start, [ 'taphold' ], e, {
            cyPosition: { x: now[0], y: now[1] }
          } );

          if( !r.touchData.start ){
            cy.$( ':selected' ).unselect();
          }

        }
      }, r.tapholdDuration );
    }

  }, false );

  var touchmoveHandler;
  r.registerBinding(window, 'touchmove', touchmoveHandler = function(e) { // eslint-disable-line no-undef
    var select = r.selection;
    var capture = r.touchData.capture;
    var cy = r.cy;
    var now = r.touchData.now;
    var earlier = r.touchData.earlier;
    var zoom = cy.zoom();

    if( e.touches[0] ){ var pos = r.projectIntoViewport( e.touches[0].clientX, e.touches[0].clientY ); now[0] = pos[0]; now[1] = pos[1]; }
    if( e.touches[1] ){ var pos = r.projectIntoViewport( e.touches[1].clientX, e.touches[1].clientY ); now[2] = pos[0]; now[3] = pos[1]; }
    if( e.touches[2] ){ var pos = r.projectIntoViewport( e.touches[2].clientX, e.touches[2].clientY ); now[4] = pos[0]; now[5] = pos[1]; }

    var isOverThresholdDrag;

    if( capture && e.touches[0] ){
      var disp = []; for (var j=0;j<now.length;j++) { disp[j] = now[j] - earlier[j]; }
      var startGPos = r.touchData.startGPosition;
      var dx = e.touches[0].clientX - startGPos[0];
      var dx2 = dx * dx;
      var dy = e.touches[0].clientY - startGPos[1];
      var dy2 = dy * dy;
      var dist2 = dx2 + dy2;

      isOverThresholdDrag = dist2 >= r.touchTapThreshold2;
    }

    // context swipe cancelling
    if( capture && r.touchData.cxt ){
      e.preventDefault();

      var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;
      var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;
      // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );
      var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
      var factorSq = distance2Sq / distance1Sq;

      var distThreshold = 150;
      var distThresholdSq = distThreshold * distThreshold;
      var factorThreshold = 1.5;
      var factorThresholdSq = factorThreshold * factorThreshold;

      // cancel ctx gestures if the distance b/t the fingers increases
      if( factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq ){
        r.touchData.cxt = false;
        if( r.touchData.start ){ r.touchData.start.unactivate(); r.touchData.start = null; }
        r.data.bgActivePosistion = undefined;
        r.redrawHint( 'select', true );

        var cxtEvt = new Event( e, {
          type: 'cxttapend',
          cyPosition: { x: now[0], y: now[1] }
        } );
        if( r.touchData.start ){
          r.touchData.start.trigger( cxtEvt );
        } else {
          cy.trigger( cxtEvt );
        }
      }

    }

    // context swipe
    if( capture && r.touchData.cxt ){
      var cxtEvt = new Event( e, {
        type: 'cxtdrag',
        cyPosition: { x: now[0], y: now[1] }
      } );
      r.data.bgActivePosistion = undefined;
      r.redrawHint( 'select', true );

      if( r.touchData.start ){
        r.touchData.start.trigger( cxtEvt );
      } else {
        cy.trigger( cxtEvt );
      }

      if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }
      r.touchData.cxtDragged = true;

      var near = r.findNearestElement( now[0], now[1], true );

      if( !r.touchData.cxtOver || near !== r.touchData.cxtOver ){

        if( r.touchData.cxtOver ){
          r.touchData.cxtOver.trigger( new Event( e, {
            type: 'cxtdragout',
            cyPosition: { x: now[0], y: now[1] }
          } ) );
        }

        r.touchData.cxtOver = near;

        if( near ){
          near.trigger( new Event( e, {
            type: 'cxtdragover',
            cyPosition: { x: now[0], y: now[1] }
          } ) );

        }

      }

    // box selection
    } else if( capture && e.touches[2] && cy.boxSelectionEnabled() ){
      e.preventDefault();

      r.data.bgActivePosistion = undefined;

      this.lastThreeTouch = +new Date();

      if( !r.touchData.selecting ){
        cy.trigger('boxstart');
      }

      r.touchData.selecting = true;

      r.redrawHint( 'select', true );

      if( !select || select.length === 0 || select[0] === undefined ){
        select[0] = (now[0] + now[2] + now[4]) / 3;
        select[1] = (now[1] + now[3] + now[5]) / 3;
        select[2] = (now[0] + now[2] + now[4]) / 3 + 1;
        select[3] = (now[1] + now[3] + now[5]) / 3 + 1;
      } else {
        select[2] = (now[0] + now[2] + now[4]) / 3;
        select[3] = (now[1] + now[3] + now[5]) / 3;
      }

      select[4] = 1;
      r.touchData.selecting = true;

      r.redraw();

    // pinch to zoom
    } else if( capture && e.touches[1] && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled() ){ // two fingers => pinch to zoom
      e.preventDefault();

      r.data.bgActivePosistion = undefined;
      r.redrawHint( 'select', true );

      var draggedEles = r.dragData.touchDragEles;
      if( draggedEles ){
        r.redrawHint( 'drag', true );

        for( var i = 0; i < draggedEles.length; i++ ){
          draggedEles[ i ]._private.grabbed = false;
          draggedEles[ i ]._private.rscratch.inDragLayer = false;
        }
      }

      // (x2, y2) for fingers 1 and 2
      var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;
      var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;


      var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );
      // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
      // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );
      var factor = distance2 / distance1;

      if( factor != 1 && twoFingersStartInside ){
        // delta finger1
        var df1x = f1x2 - f1x1;
        var df1y = f1y2 - f1y1;

        // delta finger 2
        var df2x = f2x2 - f2x1;
        var df2y = f2y2 - f2y1;

        // translation is the normalised vector of the two fingers movement
        // i.e. so pinching cancels out and moving together pans
        var tx = (df1x + df2x) / 2;
        var ty = (df1y + df2y) / 2;

        // adjust factor by the speed multiplier
        // var speed = 1.5;
        // if( factor > 1 ){
        //   factor = (factor - 1) * speed + 1;
        // } else {
        //   factor = 1 - (1 - factor) * speed;
        // }

        // now calculate the zoom
        var zoom1 = cy.zoom();
        var zoom2 = zoom1 * factor;
        var pan1 = cy.pan();

        // the model center point converted to the current rendered pos
        var ctrx = modelCenter1[0] * zoom1 + pan1.x;
        var ctry = modelCenter1[1] * zoom1 + pan1.y;

        var pan2 = {
          x: -zoom2 / zoom1 * (ctrx - pan1.x - tx) + ctrx,
          y: -zoom2 / zoom1 * (ctry - pan1.y - ty) + ctry
        };

        // remove dragged eles
        if( r.touchData.start ){
          var draggedEles = r.dragData.touchDragEles;

          freeDraggedElements( draggedEles );

          r.redrawHint( 'drag', true );
          r.redrawHint( 'eles', true );

          r.touchData.start
            .trigger( 'free' )
            .unactivate()
          ;
        }

        cy.viewport( {
          zoom: zoom2,
          pan: pan2,
          cancelOnFailedZoom: true
        } );

        distance1 = distance2;
        f1x1 = f1x2;
        f1y1 = f1y2;
        f2x1 = f2x2;
        f2y1 = f2y2;

        r.pinching = true;
      }

      // Re-project
      if( e.touches[0] ){ var pos = r.projectIntoViewport( e.touches[0].clientX, e.touches[0].clientY ); now[0] = pos[0]; now[1] = pos[1]; }
      if( e.touches[1] ){ var pos = r.projectIntoViewport( e.touches[1].clientX, e.touches[1].clientY ); now[2] = pos[0]; now[3] = pos[1]; }
      if( e.touches[2] ){ var pos = r.projectIntoViewport( e.touches[2].clientX, e.touches[2].clientY ); now[4] = pos[0]; now[5] = pos[1]; }

    } else if( e.touches[0] ){
      var start = r.touchData.start;
      var last = r.touchData.last;
      var near;

      if( !r.hoverData.draggingEles && !r.swipePanning ){
        near = r.findNearestElement( now[0], now[1], true );
      }

      if( capture && start != null ){
        e.preventDefault();
      }

      // dragging nodes
      if( capture && start != null && r.nodeIsDraggable( start ) ){

        if( isOverThresholdDrag ){ // then dragging can happen
          var draggedEles = r.dragData.touchDragEles;
          var justStartedDrag = !r.dragData.didDrag;

          if( justStartedDrag ){
            addNodesToDrag( cy.collection( draggedEles ), { inDragLayer: true } );
          }

          for( var k = 0; k < draggedEles.length; k++ ){
            var draggedEle = draggedEles[ k ];

            if( r.nodeIsDraggable( draggedEle ) && draggedEle.grabbed() ){
              r.dragData.didDrag = true;
              var dPos = draggedEle._private.position;
              var updatePos = !draggedEle.isParent();

              if( updatePos && is.number( disp[0] ) && is.number( disp[1] ) ){
                dPos.x += disp[0];
                dPos.y += disp[1];
              }

              if( justStartedDrag ){
                r.redrawHint( 'eles', true );

                var dragDelta = r.touchData.dragDelta;

                if( updatePos && dragDelta && is.number( dragDelta[0] ) && is.number( dragDelta[1] ) ){
                  dPos.x += dragDelta[0];
                  dPos.y += dragDelta[1];
                }

              }
            }
          }

          var tcol = cy.collection( draggedEles );

          tcol.updateCompoundBounds();
          tcol.trigger( 'position drag' );

          r.hoverData.draggingEles = true;

          r.redrawHint( 'drag', true );

          if(
               r.touchData.startPosition[0] == earlier[0]
            && r.touchData.startPosition[1] == earlier[1]
          ){

            r.redrawHint( 'eles', true );
          }

          r.redraw();
        } else { // otherise keep track of drag delta for later
          var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];

          if( dragDelta.length === 0 ){
            dragDelta.push( disp[0] );
            dragDelta.push( disp[1] );
          } else {
            dragDelta[0] += disp[0];
            dragDelta[1] += disp[1];
          }
        }
      }

      // touchmove
      {
        triggerEvents( (start || near), [ 'touchmove', 'tapdrag', 'vmousemove' ], e, {
          cyPosition: { x: now[0], y: now[1] }
        } );

        if( ( !start || !start.grabbed() ) && near != last ){
          if( last ){ last.trigger( new Event( e, { type: 'tapdragout', cyPosition: { x: now[0], y: now[1] } } ) ); }
          if( near ){ near.trigger( new Event( e, { type: 'tapdragover', cyPosition: { x: now[0], y: now[1] } } ) ); }
        }

        r.touchData.last = near;
      }

      // check to cancel taphold
      if( capture ){
        for( var i = 0; i < now.length; i++ ){
          if( now[ i ]
            && r.touchData.startPosition[ i ]
            && isOverThresholdDrag ){

            r.touchData.singleTouchMoved = true;
          }
        }
      }

      // panning
      if(
          capture
          && ( start == null || start.isEdge() )
          && cy.panningEnabled() && cy.userPanningEnabled()
      ){

        var allowPassthrough = allowPanningPassthrough( start, r.touchData.starts );

        if( allowPassthrough ){
          e.preventDefault();

          if( r.swipePanning ){
            cy.panBy( {
              x: disp[0] * zoom,
              y: disp[1] * zoom
            } );

          } else if( isOverThresholdDrag ){
            r.swipePanning = true;

            cy.panBy( {
              x: dx * zoom,
              y: dy * zoom
            } );

            if( start ){
              start.unactivate();

              if( !r.data.bgActivePosistion ){
                r.data.bgActivePosistion = math.array2point( r.touchData.startPosition );
              }

              r.redrawHint( 'select', true );

              r.touchData.start = null;
            }
          }

        }

        // Re-project
        var pos = r.projectIntoViewport( e.touches[0].clientX, e.touches[0].clientY );
        now[0] = pos[0]; now[1] = pos[1];
      }
    }

    for( var j = 0; j < now.length; j++ ){ earlier[ j ] = now[ j ]; }
    //r.redraw();

  }, false );

  var touchcancelHandler;
  r.registerBinding( window, 'touchcancel', touchcancelHandler = function( e ){ // eslint-disable-line no-undef
    var start = r.touchData.start;

    r.touchData.capture = false;

    if( start ){
      start.unactivate();
    }
  } );

  var touchendHandler;
  r.registerBinding( window, 'touchend', touchendHandler = function( e ){ // eslint-disable-line no-undef
    var start = r.touchData.start;

    var capture = r.touchData.capture;

    if( capture ){
      r.touchData.capture = false;

      e.preventDefault();
    } else {
      return;
    }

    var select = r.selection;

    r.swipePanning = false;
    r.hoverData.draggingEles = false;

    var cy = r.cy;
    var zoom = cy.zoom();
    var now = r.touchData.now;
    var earlier = r.touchData.earlier;

    if( e.touches[0] ){ var pos = r.projectIntoViewport( e.touches[0].clientX, e.touches[0].clientY ); now[0] = pos[0]; now[1] = pos[1]; }
    if( e.touches[1] ){ var pos = r.projectIntoViewport( e.touches[1].clientX, e.touches[1].clientY ); now[2] = pos[0]; now[3] = pos[1]; }
    if( e.touches[2] ){ var pos = r.projectIntoViewport( e.touches[2].clientX, e.touches[2].clientY ); now[4] = pos[0]; now[5] = pos[1]; }

    if( start ){
      start.unactivate();
    }

    var ctxTapend;
    if( r.touchData.cxt ){
      ctxTapend = new Event( e, {
        type: 'cxttapend',
        cyPosition: { x: now[0], y: now[1] }
      } );

      if( start ){
        start.trigger( ctxTapend );
      } else {
        cy.trigger( ctxTapend );
      }

      if( !r.touchData.cxtDragged ){
        var ctxTap = new Event( e, {
          type: 'cxttap',
          cyPosition: { x: now[0], y: now[1] }
        } );

        if( start ){
          start.trigger( ctxTap );
        } else {
          cy.trigger( ctxTap );
        }

      }

      if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }
      r.touchData.cxt = false;
      r.touchData.start = null;

      r.redraw();
      return;
    }

    // no more box selection if we don't have three fingers
    if( !e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting ){
      r.touchData.selecting = false;

      var box = cy.collection( r.getAllInBox( select[0], select[1], select[2], select[3] ) );

      select[0] = undefined;
      select[1] = undefined;
      select[2] = undefined;
      select[3] = undefined;
      select[4] = 0;

      r.redrawHint( 'select', true );

      cy.trigger('boxend');

      var eleWouldBeSelected = function( ele ){ return ele.selectable() && !ele.selected(); };

      box
        .trigger('box')
        .stdFilter( eleWouldBeSelected )
          .select()
          .trigger('boxselect')
      ;

      if( box.nonempty() ){
        r.redrawHint( 'eles', true );
      }

      r.redraw();
    }

    if( start != null ){
      start.unactivate();
    }

    if( e.touches[2] ){
      r.data.bgActivePosistion = undefined;
      r.redrawHint( 'select', true );
    } else if( e.touches[1] ){
      // ignore
    } else if( e.touches[0] ){
      // ignore

    // Last touch released
    } else if( !e.touches[0] ){

      r.data.bgActivePosistion = undefined;
      r.redrawHint( 'select', true );

      var draggedEles = r.dragData.touchDragEles;

      if( start != null ){

        var startWasGrabbed = start._private.grabbed;

        freeDraggedElements( draggedEles );

        r.redrawHint( 'drag', true );
        r.redrawHint( 'eles', true );

        if( startWasGrabbed ){
          start.trigger( 'free' );
        }

        triggerEvents( start, [ 'touchend', 'tapend', 'vmouseup', 'tapdragout' ], e, {
          cyPosition: { x: now[0], y: now[1] }
        } );

        start.unactivate();

        r.touchData.start = null;

      } else {
        var near = r.findNearestElement( now[0], now[1], true );

        triggerEvents( near, [ 'touchend', 'tapend', 'vmouseup', 'tapdragout' ], e, {
          cyPosition: { x: now[0], y: now[1] }
        } );

      }

      var dx = r.touchData.startPosition[0] - now[0];
      var dx2 = dx * dx;
      var dy = r.touchData.startPosition[1] - now[1];
      var dy2 = dy * dy;
      var dist2 = dx2 + dy2;
      var rdist2 = dist2 * zoom * zoom;

      // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance
      if( start != null
          && !r.dragData.didDrag // didn't drag nodes around
          && start._private.selectable
          && rdist2 < r.touchTapThreshold2
          && !r.pinching // pinch to zoom should not affect selection
      ){

        if( cy.selectionType() === 'single' ){
          cy.$( ':selected' ).unmerge( start ).unselect();
          start.select();
        } else {
          if( start.selected() ){
            start.unselect();
          } else {
            start.select();
          }
        }

        r.redrawHint( 'eles', true );
      }

      // Tap event, roughly same as mouse click event for touch
      if( !r.touchData.singleTouchMoved ){
        triggerEvents( start, [ 'tap', 'vclick' ], e, {
          cyPosition: { x: now[0], y: now[1] }
        } );
      }

      r.touchData.singleTouchMoved = true;
    }

    for( var j = 0; j < now.length; j++ ){ earlier[ j ] = now[ j ]; }

    r.dragData.didDrag = false; // reset for next mousedown

    if( e.touches.length === 0 ){
      r.touchData.dragDelta = [];
      r.touchData.startPosition = null;
      r.touchData.startGPosition = null;
    }

    if( e.touches.length < 2 ){
      r.pinching = false;
      r.redrawHint( 'eles', true );
      r.redraw();
    }

    //r.redraw();

  }, false );

  // fallback compatibility layer for ms pointer events
  if( typeof TouchEvent === 'undefined' ){

    var pointers = [];

    var makeTouch = function( e ){
      return {
        clientX: e.clientX,
        clientY: e.clientY,
        force: 1,
        identifier: e.pointerId,
        pageX: e.pageX,
        pageY: e.pageY,
        radiusX: e.width / 2,
        radiusY: e.height / 2,
        screenX: e.screenX,
        screenY: e.screenY,
        target: e.target
      };
    };

    var makePointer = function( e ){
      return {
        event: e,
        touch: makeTouch( e )
      };
    };

    var addPointer = function( e ){
      pointers.push( makePointer( e ) );
    };

    var removePointer = function( e ){
      for( var i = 0; i < pointers.length; i++ ){
        var p = pointers[ i ];

        if( p.event.pointerId === e.pointerId ){
          pointers.splice( i, 1 );
          return;
        }
      }
    };

    var updatePointer = function( e ){
      var p = pointers.filter( function( p ){
        return p.event.pointerId === e.pointerId;
      } )[0];

      p.event = e;
      p.touch = makeTouch( e );
    };

    var addTouchesToEvent = function( e ){
      e.touches = pointers.map( function( p ){
        return p.touch;
      } );
    };

    r.registerBinding( r.container, 'pointerdown', function( e ){
      if( e.pointerType === 'mouse' ){ return; } // mouse already handled

      e.preventDefault();

      addPointer( e );

      addTouchesToEvent( e );
      touchstartHandler( e );
    } );

    r.registerBinding( r.container, 'pointerup', function( e ){
      if( e.pointerType === 'mouse' ){ return; } // mouse already handled

      removePointer( e );

      addTouchesToEvent( e );
      touchendHandler( e );
    } );

    r.registerBinding( r.container, 'pointercancel', function( e ){
      if( e.pointerType === 'mouse' ){ return; } // mouse already handled

      removePointer( e );

      addTouchesToEvent( e );
      touchcancelHandler( e );
    } );

    r.registerBinding( r.container, 'pointermove', function( e ){
      if( e.pointerType === 'mouse' ){ return; } // mouse already handled

      e.preventDefault();

      updatePointer( e );

      addTouchesToEvent( e );
      touchmoveHandler( e );
    } );

  }
};

module.exports = BRp;

},{"../../../event":48,"../../../is":86,"../../../math":88,"../../../util":104}],65:[function(require,module,exports){
'use strict';

var math = require( '../../../math' );
var sbgn = require( '../../../sbgn' );

var BRp = {};

BRp.nodeShapes = {};

BRp.generatePolygon = function( name, points ){
  return ( this.nodeShapes[ name ] = {
    renderer: this,

    name: name,

    points: points,

    draw: function( context, centerX, centerY, width, height ){
      this.renderer.nodeShapeImpl( 'polygon', context, centerX, centerY, width, height, this.points );
    },

    intersectLine: function( nodeX, nodeY, width, height, x, y, padding ){
      return math.polygonIntersectLine(
          x, y,
          this.points,
          nodeX,
          nodeY,
          width / 2, height / 2,
          padding )
        ;
    },

    checkPoint: function( x, y, padding, width, height, centerX, centerY ){
      return math.pointInsidePolygon( x, y, this.points,
        centerX, centerY, width, height, [0, -1], padding )
      ;
    }
  } );
};

BRp.generateEllipse = function(){
  return ( this.nodeShapes['ellipse'] = {
    renderer: this,

    name: 'ellipse',

    draw: function( context, centerX, centerY, width, height ){
      this.renderer.nodeShapeImpl( this.name, context, centerX, centerY, width, height );
    },

    intersectLine: function( nodeX, nodeY, width, height, x, y, padding ){
      return math.intersectLineEllipse(
        x, y,
        nodeX,
        nodeY,
        width / 2 + padding,
        height / 2 + padding )
      ;
    },

    checkPoint: function( x, y, padding, width, height, centerX, centerY ){
      x -= centerX;
      y -= centerY;

      x /= (width / 2 + padding);
      y /= (height / 2 + padding);

      return x * x + y * y <= 1;
    }
  } );
};

BRp.generateRoundRectangle = function(){
  return ( this.nodeShapes['roundrectangle'] = {
    renderer: this,

    name: 'roundrectangle',

    points: math.generateUnitNgonPointsFitToSquare( 4, 0 ),

    draw: function( context, centerX, centerY, width, height ){
      this.renderer.nodeShapeImpl( this.name, context, centerX, centerY, width, height );
    },

    intersectLine: function( nodeX, nodeY, width, height, x, y, padding ){
      return math.roundRectangleIntersectLine(
        x, y,
        nodeX,
        nodeY,
        width, height,
        padding )
      ;
    },

    // Looks like the width passed into this function is actually the total width / 2
    checkPoint: function(
      x, y, padding, width, height, centerX, centerY ){

      var cornerRadius = math.getRoundRectangleRadius( width, height );

      // Check hBox
      if( math.pointInsidePolygon( x, y, this.points,
        centerX, centerY, width, height - 2 * cornerRadius, [0, -1], padding ) ){
        return true;
      }

      // Check vBox
      if( math.pointInsidePolygon( x, y, this.points,
        centerX, centerY, width - 2 * cornerRadius, height, [0, -1], padding ) ){
        return true;
      }

      var checkInEllipse = function( x, y, centerX, centerY, width, height, padding ){
        x -= centerX;
        y -= centerY;

        x /= (width / 2 + padding);
        y /= (height / 2 + padding);

        return (x * x + y * y <= 1);
      };


      // Check top left quarter circle
      if( checkInEllipse( x, y,
        centerX - width / 2 + cornerRadius,
        centerY - height / 2 + cornerRadius,
        cornerRadius * 2, cornerRadius * 2, padding ) ){

        return true;
      }

      // Check top right quarter circle
      if( checkInEllipse( x, y,
        centerX + width / 2 - cornerRadius,
        centerY - height / 2 + cornerRadius,
        cornerRadius * 2, cornerRadius * 2, padding ) ){

        return true;
      }

      // Check bottom right quarter circle
      if( checkInEllipse( x, y,
        centerX + width / 2 - cornerRadius,
        centerY + height / 2 - cornerRadius,
        cornerRadius * 2, cornerRadius * 2, padding ) ){

        return true;
      }

      // Check bottom left quarter circle
      if( checkInEllipse( x, y,
        centerX - width / 2 + cornerRadius,
        centerY + height / 2 - cornerRadius,
        cornerRadius * 2, cornerRadius * 2, padding ) ){

        return true;
      }

      return false;
    }
  } );
};

BRp.registerNodeShapes = function(){
  var nodeShapes = this.nodeShapes = BRp.nodeShapes;
  var renderer = this;

  this.generateEllipse();

  this.generatePolygon( 'triangle', math.generateUnitNgonPointsFitToSquare( 3, 0 ) );

  this.generatePolygon( 'rectangle', math.generateUnitNgonPointsFitToSquare( 4, 0 ) );
  nodeShapes[ 'square' ] = nodeShapes[ 'rectangle' ];

  this.generateRoundRectangle();

  this.generatePolygon( 'diamond', [
    0, 1,
    1, 0,
    0, -1,
    -1, 0
  ] );

  this.generatePolygon( 'pentagon', math.generateUnitNgonPointsFitToSquare( 5, 0 ) );

  this.generatePolygon( 'hexagon', math.generateUnitNgonPointsFitToSquare( 6, 0 ) );

  this.generatePolygon( 'heptagon', math.generateUnitNgonPointsFitToSquare( 7, 0 ) );

  this.generatePolygon( 'octagon', math.generateUnitNgonPointsFitToSquare( 8, 0 ) );

  var star5Points = new Array( 20 );
  {
    var outerPoints = math.generateUnitNgonPoints( 5, 0 );
    var innerPoints = math.generateUnitNgonPoints( 5, Math.PI / 5 );

    // Outer radius is 1; inner radius of star is smaller
    var innerRadius = 0.5 * (3 - Math.sqrt( 5 ));
    innerRadius *= 1.57;

    for( var i = 0;i < innerPoints.length / 2;i++ ){
      innerPoints[ i * 2] *= innerRadius;
      innerPoints[ i * 2 + 1] *= innerRadius;
    }

    for( var i = 0;i < 20 / 4;i++ ){
      star5Points[ i * 4] = outerPoints[ i * 2];
      star5Points[ i * 4 + 1] = outerPoints[ i * 2 + 1];

      star5Points[ i * 4 + 2] = innerPoints[ i * 2];
      star5Points[ i * 4 + 3] = innerPoints[ i * 2 + 1];
    }
  }

  star5Points = math.fitPolygonToSquare( star5Points );

  this.generatePolygon( 'star', star5Points );

  this.generatePolygon( 'vee', [
    -1, -1,
    0, -0.333,
    1, -1,
    0, 1
  ] );

  this.generatePolygon( 'rhomboid', [
    -1, -1,
    0.333, -1,
    1, 1,
    -0.333, 1
  ] );

  nodeShapes.makePolygon = function( points ){

    // use caching on user-specified polygons so they are as fast as native shapes

    var key = points.join( '$' );
    var name = 'polygon-' + key;
    var shape;

    if( (shape = this[ name ]) ){ // got cached shape
      return shape;
    }

    // create and cache new shape
    return renderer.generatePolygon( name, points );
  };

  sbgn.registerSbgnNodeShapes();
};

module.exports = BRp;

},{"../../../math":88,"../../../sbgn":90}],66:[function(require,module,exports){
'use strict';

var util = require( '../../../util' );

var BRp = {};

BRp.timeToRender = function(){
  return this.redrawTotalTime / this.redrawCount;
};

BRp.redraw = function( options ){
  options = options || util.staticEmptyObject();

  var r = this;

  if( r.averageRedrawTime === undefined ){ r.averageRedrawTime = 0; }
  if( r.lastRedrawTime === undefined ){ r.lastRedrawTime = 0; }
  if( r.lastDrawTime === undefined ){ r.lastDrawTime = 0; }

  r.requestedFrame = true;
  r.renderOptions = options;
};

BRp.beforeRender = function( fn, priority ){
  // the renderer can't add tick callbacks when destroyed
  if( this.destroyed ){ return; }

  priority = priority || 0;

  var cbs = this.beforeRenderCallbacks;

  cbs.push({ fn: fn, priority: priority });

  // higher priority callbacks executed first
  cbs.sort(function( a, b ){ return b.priority - a.priority; });
};

var beforeRenderCallbacks = function( r, willDraw, startTime ){
  var cbs = r.beforeRenderCallbacks;

  for( var i = 0; i < cbs.length; i++ ){
    cbs[i].fn( willDraw, startTime );
  }
};

BRp.startRenderLoop = function(){
  var r = this;

  if( r.renderLoopStarted ){
    return;
  } else {
    r.renderLoopStarted = true;
  }

  var renderFn = function( requestTime ){
    if( r.destroyed ){ return; }

    if( r.requestedFrame && !r.skipFrame ){
      beforeRenderCallbacks( r, true, requestTime );

      var startTime = util.performanceNow();

      r.render( r.renderOptions );

      var endTime = r.lastDrawTime = util.performanceNow();

      if( r.averageRedrawTime === undefined ){
        r.averageRedrawTime = endTime - startTime;
      }

      if( r.redrawCount === undefined ){
        r.redrawCount = 0;
      }

      r.redrawCount++;

      if( r.redrawTotalTime === undefined ){
        r.redrawTotalTime = 0;
      }

      var duration = endTime - startTime;

      r.redrawTotalTime += duration;
      r.lastRedrawTime = duration;

      // use a weighted average with a bias from the previous average so we don't spike so easily
      r.averageRedrawTime = r.averageRedrawTime / 2 + duration / 2;

      r.requestedFrame = false;
    } else {
      beforeRenderCallbacks( r, false, requestTime );
    }

    r.skipFrame = false;

    util.requestAnimationFrame( renderFn );
  };

  util.requestAnimationFrame( renderFn );

};

module.exports = BRp;

},{"../../../util":104}],67:[function(require,module,exports){
'use strict';

var CRp = {};

var impl;

CRp.arrowShapeImpl = function( name ){
  return ( impl || (impl = {
    'polygon': function( context, points ){
      for( var i = 0; i < points.length; i++ ){
        var pt = points[ i ];

        context.lineTo( pt.x, pt.y );
      }
    },

    'triangle-backcurve': function( context, points, controlPoint ){
      var firstPt;

      for( var i = 0; i < points.length; i++ ){
        var pt = points[ i ];

        if( i === 0 ){
          firstPt = pt;
        }

        context.lineTo( pt.x, pt.y );
      }

      context.quadraticCurveTo( controlPoint.x, controlPoint.y, firstPt.x, firstPt.y );
    },

    'triangle-tee': function( context, trianglePoints, teePoints ){
      var triPts = trianglePoints;
      for( var i = 0; i < triPts.length; i++ ){
        var pt = triPts[ i ];

        context.lineTo( pt.x, pt.y );
      }

      var teePts = teePoints;
      var firstTeePt = teePoints[0];
      context.moveTo( firstTeePt.x, firstTeePt.y );

      for( var i = 0; i < teePts.length; i++ ){
        var pt = teePts[ i ];

        context.lineTo( pt.x, pt.y );
      }
    },

    'circle': function( context, rx, ry, r ){
      context.arc( rx, ry, r, 0, Math.PI * 2, false );
    }
  }) )[ name ];
};

module.exports = CRp;

},{}],68:[function(require,module,exports){
'use strict';

var CRp = {};

CRp.drawEdge = function( context, edge, shiftToOriginWithBb, drawLabel, drawOverlayInstead ){
  var rs = edge._private.rscratch;
  var usePaths = this.usePaths();

  // if bezier ctrl pts can not be calculated, then die
  if( rs.badLine || isNaN(rs.allpts[0]) ){ // isNaN in case edge is impossible and browser bugs (e.g. safari)
    return;
  }

  if( !edge.visible() ){ return; }

  var bb;
  if( shiftToOriginWithBb ){
    bb = shiftToOriginWithBb;

    context.translate( -bb.x1, -bb.y1 );
  }

  var overlayPadding = edge.pstyle( 'overlay-padding' ).pfValue;
  var overlayOpacity = edge.pstyle( 'overlay-opacity' ).value;
  var overlayColor = edge.pstyle( 'overlay-color' ).value;

  // Edge color & opacity
  if( drawOverlayInstead ){

    if( overlayOpacity === 0 ){ // exit early if no overlay
      return;
    }

    this.strokeStyle( context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity );
    context.lineCap = 'round';

    if( rs.edgeType == 'self' && !usePaths ){
      context.lineCap = 'butt';
    }

  } else {
    var lineColor = edge.pstyle( 'line-color' ).value;

    this.strokeStyle( context, lineColor[0], lineColor[1], lineColor[2], edge.pstyle( 'opacity' ).value );

    context.lineCap = 'butt';
  }

  context.lineJoin = 'round';

  var edgeWidth = edge.pstyle( 'width' ).pfValue + (drawOverlayInstead ? 2 * overlayPadding : 0);
  var lineStyle = drawOverlayInstead ? 'solid' : edge.pstyle( 'line-style' ).value;
  context.lineWidth = edgeWidth;

  var shadowBlur = edge.pstyle( 'shadow-blur' ).pfValue;
  var shadowOpacity = edge.pstyle( 'shadow-opacity' ).value;
  var shadowColor = edge.pstyle( 'shadow-color' ).value;
  var shadowOffsetX = edge.pstyle( 'shadow-offset-x' ).pfValue;
  var shadowOffsetY = edge.pstyle( 'shadow-offset-y' ).pfValue;

  this.shadowStyle( context,  shadowColor, drawOverlayInstead ? 0 : shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY );

  this.drawEdgePath(
    edge,
    context,
    rs.allpts,
    lineStyle,
    edgeWidth
  );

  this.drawArrowheads( context, edge, drawOverlayInstead );

  this.shadowStyle( context, 'transparent', 0 ); // reset for next guy

  if( !drawOverlayInstead ){
    this.drawEdge( context, edge, false, drawLabel, true );
  }

  this.drawElementText( context, edge, drawLabel );

  if( shiftToOriginWithBb ){
    context.translate( bb.x1, bb.y1 );
  }
};


CRp.drawEdgePath = function( edge, context, pts, type, width ){
  var rs = edge._private.rscratch;
  var canvasCxt = context;
  var path;
  var pathCacheHit = false;
  var usePaths = this.usePaths();

  if( usePaths ){
    var pathCacheKey = pts.join( '$' );
    var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;

    if( keyMatches ){
      path = context = rs.pathCache;
      pathCacheHit = true;
    } else {
      path = context = new Path2D(); // eslint-disable-line no-undef
      rs.pathCacheKey = pathCacheKey;
      rs.pathCache = path;
    }
  }

  if( canvasCxt.setLineDash ){ // for very outofdate browsers
    switch( type ){
      case 'dotted':
        canvasCxt.setLineDash( [ 1, 1 ] );
        break;

      case 'dashed':
        canvasCxt.setLineDash( [ 6, 3 ] );
        break;

      case 'solid':
        canvasCxt.setLineDash( [ ] );
        break;
    }
  }

  if( !pathCacheHit && !rs.badLine ){
    if( context.beginPath ){ context.beginPath(); }
    context.moveTo( pts[0], pts[1] );

    switch( rs.edgeType ){
      case 'bezier':
      case 'self':
      case 'compound':
      case 'multibezier':
        for( var i = 2; i + 3 < pts.length; i += 4 ){
          context.quadraticCurveTo( pts[ i ], pts[ i + 1], pts[ i + 2], pts[ i + 3] );
        }
        break;

      case 'straight':
      case 'segments':
      case 'haystack':
        for( var i = 2; i + 1 < pts.length; i += 2 ){
          context.lineTo( pts[ i ], pts[ i + 1] );
        }
        break;
    }
  }

  context = canvasCxt;
  if( usePaths ){
    context.stroke( path );
  } else {
    context.stroke();
  }

  // reset any line dashes
  if( context.setLineDash ){ // for very outofdate browsers
    context.setLineDash( [ ] );
  }

};

CRp.drawArrowheads = function( context, edge, drawOverlayInstead ){
  if( drawOverlayInstead ){ return; } // don't do anything for overlays

  var rs = edge._private.rscratch;
  var isHaystack = rs.edgeType === 'haystack';

  if( !isHaystack ){
    this.drawArrowhead( context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle );
  }

  this.drawArrowhead( context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle );

  this.drawArrowhead( context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle );

  if( !isHaystack ){
    this.drawArrowhead( context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle );
  }
};

CRp.drawArrowhead = function( context, edge, prefix, x, y, angle ){
  if( isNaN( x ) || x == null || isNaN( y ) || y == null || isNaN( angle ) || angle == null ){ return; }

  var self = this;
  var arrowShape = edge.pstyle( prefix + '-arrow-shape' ).value;

  if( arrowShape === 'none' ){
    return;
  }

  var gco = context.globalCompositeOperation;

  var arrowClearFill = edge.pstyle( prefix + '-arrow-fill' ).value === 'hollow' ? 'both' : 'filled';
  var arrowFill = edge.pstyle( prefix + '-arrow-fill' ).value;
  var opacity = edge.pstyle( 'opacity' ).value;

  if( arrowShape === 'half-triangle-overshot' ){
    arrowFill = 'hollow';
    arrowClearFill = 'hollow';
  }

  if( opacity !== 1 || arrowFill === 'hollow' ){ // then extra clear is needed
    context.globalCompositeOperation = 'destination-out';

    self.fillStyle( context, 255, 255, 255, 1 );
    self.strokeStyle( context, 255, 255, 255, 1 );

    self.drawArrowShape( edge, prefix, context,
      arrowClearFill, edge.pstyle( 'width' ).pfValue, edge.pstyle( prefix + '-arrow-shape' ).value,
      x, y, angle
    );

    context.globalCompositeOperation = gco;
  } // otherwise, the opaque arrow clears it for free :)

  var color = edge.pstyle( prefix + '-arrow-color' ).value;
  self.fillStyle( context, color[0], color[1], color[2], opacity );
  self.strokeStyle( context, color[0], color[1], color[2], opacity );

  self.drawArrowShape( edge, prefix, context,
    arrowFill, edge.pstyle( 'width' ).pfValue, edge.pstyle( prefix + '-arrow-shape' ).value,
    x, y, angle
  );
};

CRp.drawArrowShape = function( edge, arrowType, context, fill, edgeWidth, shape, x, y, angle ){
  var r = this;
  var usePaths = this.usePaths();
  var rs = edge._private.rscratch;
  var pathCacheHit = false;
  var path;
  var canvasContext = context;
  var translation = { x: x, y: y };
  var size = this.getArrowWidth( edgeWidth );
  var shapeImpl = r.arrowShapes[ shape ];

  if( usePaths ){
    var pathCacheKey = size + '$' + shape + '$' + angle + '$' + x + '$' + y;
    rs.arrowPathCacheKey = rs.arrowPathCacheKey || {};
    rs.arrowPathCache = rs.arrowPathCache || {};

    var alreadyCached = rs.arrowPathCacheKey[ arrowType ] === pathCacheKey;
    if( alreadyCached ){
      path = context = rs.arrowPathCache[ arrowType ];
      pathCacheHit = true;
    } else {
      path = context = new Path2D(); // eslint-disable-line no-undef
      rs.arrowPathCacheKey[ arrowType ] = pathCacheKey;
      rs.arrowPathCache[ arrowType ] = path;
    }
  }

  if( context.beginPath ){ context.beginPath(); }

  if( !pathCacheHit ){
    shapeImpl.draw( context, size, angle, translation );
  }

  if( !shapeImpl.leavePathOpen && context.closePath ){
    context.closePath();
  }

  context = canvasContext;

  if( fill === 'filled' || fill === 'both' ){
    if( usePaths ){
      context.fill( path );
    } else {
      context.fill();
    }
  }

  if( fill === 'hollow' || fill === 'both' ){
    context.lineWidth = ( shapeImpl.matchEdgeWidth ? edgeWidth : 1 );
    context.lineJoin = 'miter';

    if( usePaths ){
      context.stroke( path );
    } else {
      context.stroke();
    }

  }
};

module.exports = CRp;

},{}],69:[function(require,module,exports){
'use strict';

var math = require( '../../../math' );

var CRp = {};

CRp.drawElement = function( context, ele, shiftToOriginWithBb, showLabel ){
  var r = this;

  if( ele.isNode() ){
    r.drawNode( context, ele, shiftToOriginWithBb, showLabel );
  } else {
    r.drawEdge( context, ele, shiftToOriginWithBb, showLabel );
  }
};

CRp.drawCachedElement = function( context, ele, pxRatio, extent ){
  var r = this;
  var bb = ele.boundingBox();

  if( bb.w === 0 || bb.h === 0 ){ return; }

  if( !extent || math.boundingBoxesIntersect( bb, extent ) ){
    var cache = r.data.eleTxrCache.getElement( ele, bb, pxRatio );

    if( cache ){
      context.drawImage( cache.texture.canvas, cache.x, 0, cache.width, cache.height, bb.x1, bb.y1, bb.w, bb.h );
    } else { // if the element is not cacheable, then draw directly
      r.drawElement( context, ele );
    }
  }
};

CRp.drawElements = function( context, eles ){
  var r = this;

  for( var i = 0; i < eles.length; i++ ){
    var ele = eles[ i ];

    r.drawElement( context, ele );
  }
};

CRp.drawCachedElements = function( context, eles, pxRatio, extent ){
  var r = this;

  for( var i = 0; i < eles.length; i++ ){
    var ele = eles[ i ];

    r.drawCachedElement( context, ele, pxRatio, extent );
  }
};

CRp.drawCachedNodes = function( context, eles, pxRatio, extent ){
  var r = this;

  for( var i = 0; i < eles.length; i++ ){
    var ele = eles[ i ];

    if( !ele.isNode() ){ continue; }

    r.drawCachedElement( context, ele, pxRatio, extent );
  }
};

CRp.drawLayeredElements = function( context, eles, pxRatio, extent ){
  var r = this;

  var layers = r.data.lyrTxrCache.getLayers( eles, pxRatio );

  if( layers ){
    for( var i = 0; i < layers.length; i++ ){
      var layer = layers[i];
      var bb = layer.bb;

      if( bb.w === 0 || bb.h === 0 ){ continue; }

      context.drawImage( layer.canvas, bb.x1, bb.y1, bb.w, bb.h );
    }
  } else { // fall back on plain caching if no layers
    r.drawCachedElements( context, eles, pxRatio, extent );
  }
};

module.exports = CRp;

},{"../../../math":88}],70:[function(require,module,exports){
'use strict';
var sbgn = require( '../../../sbgn' );

var CRp = {};

CRp.safeDrawImage = function( context, img, ix, iy, iw, ih, x, y, w, h ){
  var r = this;

  try {
    context.drawImage( img, ix, iy, iw, ih, x, y, w, h );
  } catch( e ){
    r.redrawHint( 'eles', true );
    r.redrawHint( 'drag', true );

    r.drawingImage = true;

    r.redraw();
  }
};

CRp.drawInscribedImage = function( context, img, node ){
  var r = this;
  var nodeX = node._private.position.x;
  var nodeY = node._private.position.y;
  var fit = node.pstyle( 'background-fit' ).value;
  var xPos = node.pstyle( 'background-position-x' );
  var yPos = node.pstyle( 'background-position-y' );
  var repeat = node.pstyle( 'background-repeat' ).value;
  var nodeW = node.width();
  var nodeH = node.height();
  var rs = node._private.rscratch;
  var clip = node.pstyle( 'background-clip' ).value;
  var shouldClip = clip === 'node';
  var imgOpacity = node.pstyle( 'background-image-opacity' ).value;

  var imgW = img.width || img.cachedW;
  var imgH = img.height || img.cachedH;

  // workaround for broken browsers like ie
  if( null == imgW || null == imgH ){
    document.body.appendChild( img ); // eslint-disable-line no-undef

    imgW = img.cachedW = img.width || img.offsetWidth;
    imgH = img.cachedH = img.height || img.offsetHeight;

    document.body.removeChild( img ); // eslint-disable-line no-undef
  }

  var w = imgW;
  var h = imgH;

  var bgW = node.pstyle( 'background-width' );
  if( bgW.value !== 'auto' ){
    if( bgW.units === '%' ){
      w = bgW.value / 100 * nodeW;
    } else {
      w = bgW.pfValue;
    }
  }

  var bgH = node.pstyle( 'background-height' );
  if( bgH.value !== 'auto' ){
    if( bgH.units === '%' ){
      h = bgH.value / 100 * nodeH;
    } else {
      h = bgH.pfValue;
    }
  }

  if( w === 0 || h === 0 ){
    return; // no point in drawing empty image (and chrome is broken in this case)
  }

  if( fit === 'contain' ){
    var scale = Math.min( nodeW / w, nodeH / h );

    w *= scale;
    h *= scale;

  } else if( fit === 'cover' ){
    var scale = Math.max( nodeW / w, nodeH / h );

    w *= scale;
    h *= scale;
  }

  var x = (nodeX - nodeW / 2); // left
  if( xPos.units === '%' ){
    x += (nodeW - w) * xPos.value / 100;
  } else {
    x += xPos.pfValue;
  }

  var y = (nodeY - nodeH / 2); // top
  if( yPos.units === '%' ){
    y += (nodeH - h) * yPos.value / 100;
  } else {
    y += yPos.pfValue;
  }

  if( rs.pathCache ){
    x -= nodeX;
    y -= nodeY;

    nodeX = 0;
    nodeY = 0;
  }

  var gAlpha = context.globalAlpha;

  context.globalAlpha = imgOpacity;

  if( repeat === 'no-repeat' ){

    if( shouldClip ){
      context.save();

      if( rs.pathCache ){
        context.clip( rs.pathCache );
      } else {
        if(sbgn.sbgnShapes[this.getNodeShape(node)]){
            r.nodeShapes[this.getNodeShape(node)].draw(
                context,
                node);
        }
        else{
            r.nodeShapes[r.getNodeShape(node)].draw(
              context,
              nodeX, nodeY,
              nodeW, nodeH);
        }

        context.clip();
      }
    }

    r.safeDrawImage( context, img, 0, 0, imgW, imgH, x, y, w, h );

    if( shouldClip ){
      context.restore();
    }
  } else {
    var pattern = context.createPattern( img, repeat );
    context.fillStyle = pattern;

    if(sbgn.sbgnShapes[this.getNodeShape(node)]){
        r.nodeShapes[this.getNodeShape(node)].draw(
            context,
            node);
    }
    else{
        r.nodeShapes[r.getNodeShape(node)].draw(
          context,
          nodeX, nodeY,
          nodeW, nodeH);
    }

    context.translate( x, y );
    context.fill();
    context.translate( -x, -y );
  }

  context.globalAlpha = gAlpha;

};

module.exports = CRp;

},{"../../../sbgn":90}],71:[function(require,module,exports){
'use strict';

var util = require( '../../../util' );
var math = require( '../../../math' );

var CRp = {};

CRp.eleTextBiggerThanMin = function( ele, scale ){
  if( !scale ){
    var zoom = ele.cy().zoom();
    var pxRatio = this.getPixelRatio();
    var lvl = Math.ceil( math.log2( zoom * pxRatio ) ); // the effective texture level

    scale = Math.pow( 2, lvl );
  }

  var computedSize = ele.pstyle( 'font-size' ).pfValue * scale;
  var minSize = ele.pstyle( 'min-zoomed-font-size' ).pfValue;

  if( computedSize < minSize ){
    return false;
  }

  return true;
};

CRp.drawElementText = function( context, ele, force ){
  var r = this;

  if( force === undefined ){
    if( !r.eleTextBiggerThanMin( ele ) ){ return; }
  } else {
    if( !force ){ return; }
  }

  if( ele.isNode() ){
    var label = ele.pstyle( 'label' );

    if( !label || !label.value ){ return; }

    var textHalign = ele.pstyle( 'text-halign' ).strValue;
    var textValign = ele.pstyle( 'text-valign' ).strValue;

    switch( textHalign ){
      case 'left':
        context.textAlign = 'right';
        break;

      case 'right':
        context.textAlign = 'left';
        break;

      default: // e.g. center
        context.textAlign = 'center';
    }

    context.textBaseline = 'bottom';
  } else {
    var label = ele.pstyle( 'label' );
    var srcLabel = ele.pstyle( 'source-label' );
    var tgtLabel = ele.pstyle( 'target-label' );

    if(
      ( !label || !label.value )
      && ( !srcLabel || !srcLabel.value )
      && ( !tgtLabel || !tgtLabel.value )
    ){
      return;
    }

    context.textAlign = 'center';
    context.textBaseline = 'bottom';
  }


  r.drawText( context, ele );

  if( ele.isEdge() ){
    r.drawText( context, ele, 'source' );

    r.drawText( context, ele, 'target' );
  }
};

CRp.drawNodeText = CRp.drawEdgeText = CRp.drawElementText;

CRp.getFontCache = function( context ){
  var cache;

  this.fontCaches = this.fontCaches || [];

  for( var i = 0; i < this.fontCaches.length; i++ ){
    cache = this.fontCaches[ i ];

    if( cache.context === context ){
      return cache;
    }
  }

  cache = {
    context: context
  };
  this.fontCaches.push( cache );

  return cache;
};

// set up canvas context with font
// returns transformed text string
CRp.setupTextStyle = function( context, ele ){
  // Font style
  var parentOpacity = ele.effectiveOpacity();
  var labelStyle = ele.pstyle( 'font-style' ).strValue;
  var labelSize = ele.pstyle( 'font-size' ).pfValue + 'px';
  var labelFamily = ele.pstyle( 'font-family' ).strValue;
  var labelWeight = ele.pstyle( 'font-weight' ).strValue;
  var opacity = ele.pstyle( 'text-opacity' ).value * ele.pstyle( 'opacity' ).value * parentOpacity;
  var outlineOpacity = ele.pstyle( 'text-outline-opacity' ).value * opacity;
  var color = ele.pstyle( 'color' ).value;
  var outlineColor = ele.pstyle( 'text-outline-color' ).value;
  var shadowBlur = ele.pstyle( 'text-shadow-blur' ).pfValue;
  var shadowOpacity = ele.pstyle( 'text-shadow-opacity' ).value;
  var shadowColor = ele.pstyle( 'text-shadow-color' ).value;
  var shadowOffsetX = ele.pstyle( 'text-shadow-offset-x' ).pfValue;
  var shadowOffsetY = ele.pstyle( 'text-shadow-offset-y' ).pfValue;

  var fontCacheKey = ele._private.fontKey;
  var cache = this.getFontCache( context );

  if( cache.key !== fontCacheKey ){
    context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;

    cache.key = fontCacheKey;
  }

  // Calculate text draw position based on text alignment

  // so text outlines aren't jagged
  context.lineJoin = 'round';

  this.fillStyle( context, color[ 0 ], color[ 1 ], color[ 2 ], opacity );

  this.strokeStyle( context, outlineColor[ 0 ], outlineColor[ 1 ], outlineColor[ 2 ], outlineOpacity );

  this.shadowStyle( context, shadowColor, shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY );
};

function roundRect( ctx, x, y, width, height, radius ){
  var radius = radius || 5;
  ctx.beginPath();
  ctx.moveTo( x + radius, y );
  ctx.lineTo( x + width - radius, y );
  ctx.quadraticCurveTo( x + width, y, x + width, y + radius );
  ctx.lineTo( x + width, y + height - radius );
  ctx.quadraticCurveTo( x + width, y + height, x + width - radius, y + height );
  ctx.lineTo( x + radius, y + height );
  ctx.quadraticCurveTo( x, y + height, x, y + height - radius );
  ctx.lineTo( x, y + radius );
  ctx.quadraticCurveTo( x, y, x + radius, y );
  ctx.closePath();
  ctx.fill();
}

// Draw text
CRp.drawText = function( context, ele, prefix ){
  var _p = ele._private;
  var rscratch = _p.rscratch;
  var parentOpacity = ele.effectiveOpacity();
  if( parentOpacity === 0 || ele.pstyle( 'text-opacity' ).value === 0 ){
    return;
  }

  var textX = util.getPrefixedProperty( rscratch, 'labelX', prefix );
  var textY = util.getPrefixedProperty( rscratch, 'labelY', prefix );
  var text = this.getLabelText( ele, prefix );

  if( text != null && text !== '' && !isNaN( textX ) && !isNaN( textY ) ){
    this.setupTextStyle( context, ele );

    var pdash = prefix ? prefix + '-' : '';
    var textW = util.getPrefixedProperty( rscratch, 'labelWidth', prefix );
    var textH = util.getPrefixedProperty( rscratch, 'labelHeight', prefix );
    var textAngle = util.getPrefixedProperty( rscratch, 'labelAngle', prefix );
    var marginX = ele.pstyle( pdash + 'text-margin-x' ).pfValue;
    var marginY = ele.pstyle( pdash + 'text-margin-y' ).pfValue;

    var isEdge = ele.isEdge();
    var isNode = ele.isNode();

    var halign = ele.pstyle( 'text-halign' ).value;
    var valign = ele.pstyle( 'text-valign' ).value;

    if( isEdge ){
      halign = 'center';
      valign = 'center';
    }

    textX += marginX;
    textY += marginY;

    var rotation = ele.pstyle( 'text-rotation' );
    var theta;

    if( rotation.strValue === 'autorotate' ){
      theta = isEdge ? textAngle : 0;
    } else if( rotation.strValue === 'none' ){
      theta = 0;
    } else {
      theta = rotation.pfValue;
    }

    if( theta !== 0 ){
      var orgTextX = textX;
      var orgTextY = textY;

      context.translate( orgTextX, orgTextY );
      context.rotate( theta );

      textX = 0;
      textY = 0;
    }

    if( isNode ){
      var pLeft = ele.pstyle( 'padding-left' ).pfValue;
      var pRight = ele.pstyle( 'padding-right' ).pfValue;
      var pTop = ele.pstyle( 'padding-top' ).pfValue;
      var pBottom = ele.pstyle( 'padding-bottom' ).pfValue;

      textX += pLeft / 2;
      textX -= pRight / 2;

      textY += pTop / 2;
      textY -= pBottom / 2;
    }

    switch( valign ){
      case 'top':
        break;
      case 'center':
        textY += textH / 2;
        break;
      case 'bottom':
        textY += textH;
        break;
    }

    var backgroundOpacity = ele.pstyle( 'text-background-opacity' ).value;
    var borderOpacity = ele.pstyle( 'text-border-opacity' ).value;
    var textBorderWidth = ele.pstyle( 'text-border-width' ).pfValue;
    var backgroundPadding = ele.pstyle( 'text-background-padding' ).pfValue;

    if( backgroundOpacity > 0 || ( textBorderWidth > 0 && borderOpacity > 0 ) ){
      var bgX = textX - backgroundPadding;

      switch( halign ){
        case 'left':
          bgX -= textW;
          break;
        case 'center':
          bgX -= textW / 2;
          break;
        case 'right':
          break;
      }

      var bgY = textY - textH - backgroundPadding;
      var bgW = textW + 2*backgroundPadding;
      var bgH = textH + 2*backgroundPadding;

      if( backgroundOpacity > 0 ){
        var textFill = context.fillStyle;
        var textBackgroundColor = ele.pstyle( 'text-background-color' ).value;

        context.fillStyle = 'rgba(' + textBackgroundColor[ 0 ] + ',' + textBackgroundColor[ 1 ] + ',' + textBackgroundColor[ 2 ] + ',' + backgroundOpacity * parentOpacity + ')';
        var styleShape = ele.pstyle( 'text-background-shape' ).strValue;
        if( styleShape == 'roundrectangle' ){
          roundRect( context, bgX, bgY, bgW, bgH, 2 );
        } else {
          context.fillRect( bgX, bgY, bgW, bgH );
        }
        context.fillStyle = textFill;
      }

      if( textBorderWidth > 0 && borderOpacity > 0 ){
        var textStroke = context.strokeStyle;
        var textLineWidth = context.lineWidth;
        var textBorderColor = ele.pstyle( 'text-border-color' ).value;
        var textBorderStyle = ele.pstyle( 'text-border-style' ).value;

        context.strokeStyle = 'rgba(' + textBorderColor[ 0 ] + ',' + textBorderColor[ 1 ] + ',' + textBorderColor[ 2 ] + ',' + borderOpacity * parentOpacity + ')';
        context.lineWidth = textBorderWidth;

        if( context.setLineDash ){ // for very outofdate browsers
          switch( textBorderStyle ){
            case 'dotted':
              context.setLineDash( [ 1, 1 ] );
              break;
            case 'dashed':
              context.setLineDash( [ 4, 2 ] );
              break;
            case 'double':
              context.lineWidth = textBorderWidth / 4; // 50% reserved for white between the two borders
              context.setLineDash( [] );
              break;
            case 'solid':
              context.setLineDash( [] );
              break;
          }
        }

        context.strokeRect( bgX, bgY, bgW, bgH );

        if( textBorderStyle === 'double' ){
          var whiteWidth = textBorderWidth / 2;

          context.strokeRect( bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2 );
        }

        if( context.setLineDash ){ // for very outofdate browsers
          context.setLineDash( [] );
        }
        context.lineWidth = textLineWidth;
        context.strokeStyle = textStroke;
      }

    }

    var lineWidth = 2 * ele.pstyle( 'text-outline-width' ).pfValue; // *2 b/c the stroke is drawn centred on the middle

    if( lineWidth > 0 ){
      context.lineWidth = lineWidth;
    }

    if( ele.pstyle( 'text-wrap' ).value === 'wrap' ){
      var lines = rscratch.labelWrapCachedLines;
      var lineHeight = textH / lines.length;

      switch( valign ){
        case 'top':
          textY -= ( lines.length - 1 ) * lineHeight;
          break;
        case 'center':
        case 'bottom':
          textY -= ( lines.length - 1 ) * lineHeight;
          break;
      }

      for( var l = 0; l < lines.length; l++ ){
        if( lineWidth > 0 ){
          context.strokeText( lines[ l ], textX, textY );
        }

        context.fillText( lines[ l ], textX, textY );

        textY += lineHeight;
      }

    } else {
      if( lineWidth > 0 ){
        context.strokeText( text, textX, textY );
      }

      context.fillText( text, textX, textY );
    }

    if( theta !== 0 ){
      context.rotate( -theta );
      context.translate( -orgTextX, -orgTextY );
    }

    this.shadowStyle( context, 'transparent', 0 ); // reset for next guy
  }
};

module.exports = CRp;

},{"../../../math":88,"../../../util":104}],72:[function(require,module,exports){
'use strict';

var is = require( '../../../is' );
var sbgn = require( '../../../sbgn' );

var CRp = {};

CRp.drawNode = function( context, node, shiftToOriginWithBb, drawLabel ){
  var r = this;
  var nodeWidth, nodeHeight;
  var rs = node._private.rscratch;
  var _p = node._private;
  var pos = pos || _p.position;

  if( !is.number( pos.x ) || !is.number( pos.y ) ){
    return; // can't draw node with undefined position
  }

  if( !node.visible() ){ return; }

  var parentOpacity = node.effectiveOpacity();

  var usePaths = this.usePaths();
  var path;
  var pathCacheHit = false;

  nodeWidth = node.width() + node.pstyle( 'padding-left' ).pfValue + node.pstyle( 'padding-right' ).pfValue;
  nodeHeight = node.height() + node.pstyle( 'padding-top' ).pfValue + node.pstyle( 'padding-bottom' ).pfValue;

  context.lineWidth = node.pstyle( 'border-width' ).pfValue;

  //
  // setup shift

  var bb;
  if( shiftToOriginWithBb ){
    bb = shiftToOriginWithBb;

    context.translate( -bb.x1, -bb.y1 );
  }

  //
  // load bg image

  var bgImgProp = node.pstyle( 'background-image' );
  var url = bgImgProp.value[2] || bgImgProp.value[1];
  var image;

  if( url !== undefined ){

    var bgImgCrossOrigin = node.pstyle( 'background-image-crossorigin' );

    // get image, and if not loaded then ask to redraw when later loaded
    image = this.getCachedImage( url, bgImgCrossOrigin, function(){
      node.trigger('background');

      r.redrawHint( 'eles', true );
      r.redrawHint( 'drag', true );

      r.drawingImage = true;

      r.redraw();
    } );

    var prevBging = _p.backgrounding;
    _p.backgrounding = !image.complete;

    if( prevBging !== _p.backgrounding ){ // update style b/c :backgrounding state changed
      node.updateStyle( false );
    }
  }

  //
  // setup styles

  var bgColor = node.pstyle( 'background-color' ).value;
  var borderColor = node.pstyle( 'border-color' ).value;
  var borderStyle = node.pstyle( 'border-style' ).value;

  this.fillStyle( context, bgColor[0], bgColor[1], bgColor[2], node.pstyle( 'background-opacity' ).value * parentOpacity );

  this.strokeStyle( context, borderColor[0], borderColor[1], borderColor[2], node.pstyle( 'border-opacity' ).value * parentOpacity );

  var shadowBlur = node.pstyle( 'shadow-blur' ).pfValue;
  var shadowOpacity = node.pstyle( 'shadow-opacity' ).value;
  var shadowColor = node.pstyle( 'shadow-color' ).value;
  var shadowOffsetX = node.pstyle( 'shadow-offset-x' ).pfValue;
  var shadowOffsetY = node.pstyle( 'shadow-offset-y' ).pfValue;

  this.shadowStyle( context, shadowColor, shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY );

  context.lineJoin = 'miter'; // so borders are square with the node shape

  if( context.setLineDash ){ // for very outofdate browsers
    switch( borderStyle ){
      case 'dotted':
        context.setLineDash( [ 1, 1 ] );
        break;

      case 'dashed':
        context.setLineDash( [ 4, 2 ] );
        break;

      case 'solid':
      case 'double':
        context.setLineDash( [ ] );
        break;
    }
  }


  //
  // draw shape

  var styleShape = node.pstyle('shape').strValue;
  var shapePts = node.pstyle('shape-polygon-points').pfValue;

  if( usePaths ){
    var pathCacheKey = styleShape + '$' + nodeWidth + '$' + nodeHeight + ( styleShape === 'polygon' ? '$' + shapePts.join('$') : '' );

    context.translate( pos.x, pos.y );

    if( rs.pathCacheKey === pathCacheKey ){
      path = rs.pathCache;
      pathCacheHit = true;
    } else {
      path = new Path2D(); // eslint-disable-line no-undef
      rs.pathCacheKey = pathCacheKey;
      rs.pathCache = path;
    }
  }

  if( !pathCacheHit ){

    var npos = pos;

    if( usePaths ){
      npos = {
        x: 0,
        y: 0
      };
    }

    if(sbgn.sbgnShapes[this.getNodeShape(node)]){
        r.nodeShapes[this.getNodeShape(node)].draw(
            context,
            node);
    }
    else{
        r.nodeShapes[r.getNodeShape(node)].draw(
          ( path || context ),
          npos.x,
          npos.y,
          nodeWidth,
          nodeHeight);
    }
  }

  if( usePaths ){
    context.fill( path );
  } else {
    context.fill();
  }

  this.shadowStyle( context, 'transparent', 0 ); // reset for next guy

  //
  // bg image

  if( url !== undefined ){
    if( image.complete ){
      this.drawInscribedImage( context, image, node );
    }
  }

  //
  // pie

  var darkness = node.pstyle( 'background-blacken' ).value;
  var borderWidth = node.pstyle( 'border-width' ).pfValue;

  if( this.hasPie( node ) ){
    this.drawPie( context, node, parentOpacity );

    // redraw path for blacken and border
    if( darkness !== 0 || borderWidth !== 0 ){

      if( !usePaths ){
        if(sbgn.sbgnShapes[this.getNodeShape(node)]){
            r.nodeShapes[this.getNodeShape(node)].draw(
                context,
                node);
        }
        else{
            r.nodeShapes[r.getNodeShape(node)].draw(
              context,
              pos.x,
              pos.y,
              nodeWidth,
              nodeHeight);
        }
      }
    }
  }

  //
  // darken/lighten

  if( darkness > 0 ){
    this.fillStyle( context, 0, 0, 0, darkness );

    if( usePaths ){
      context.fill( path );
    } else {
      context.fill();
    }

  } else if( darkness < 0 ){
    this.fillStyle( context, 255, 255, 255, -darkness );

    if( usePaths ){
      context.fill( path );
    } else {
      context.fill();
    }
  }

  //
  // border

  if( borderWidth > 0 ){

    if( usePaths ){
      context.stroke( path );
    } else {
      context.stroke();
    }

    if( borderStyle === 'double' ){
      context.lineWidth = node.pstyle( 'border-width' ).pfValue / 3;

      var gco = context.globalCompositeOperation;
      context.globalCompositeOperation = 'destination-out';

      if( usePaths ){
        context.stroke( path );
      } else {
        context.stroke();
      }

      context.globalCompositeOperation = gco;
    }

  }

  if( usePaths ){
    context.translate( -pos.x, -pos.y );
  }

  // reset in case we changed the border style
  if( context.setLineDash ){ // for very outofdate browsers
    context.setLineDash( [ ] );
  }

  //
  // label

  r.drawElementText( context, node, drawLabel );

  //
  // overlay

  var overlayPadding = node.pstyle( 'overlay-padding' ).pfValue;
  var overlayOpacity = node.pstyle( 'overlay-opacity' ).value;
  var overlayColor = node.pstyle( 'overlay-color' ).value;

  if( overlayOpacity > 0 ){
    this.fillStyle( context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity );

    r.nodeShapes[ 'roundrectangle' ].draw(
      context,
      node._private.position.x,
      node._private.position.y,
      nodeWidth + overlayPadding * 2,
      nodeHeight + overlayPadding * 2
    );

    context.fill();
  }

  //
  // clean up shift

  if( shiftToOriginWithBb ){
    context.translate( bb.x1, bb.y1 );
  }

};

// does the node have at least one pie piece?
CRp.hasPie = function( node ){
  node = node[0]; // ensure ele ref

  return node._private.hasPie;
};

CRp.drawPie = function( context, node, nodeOpacity, pos ){
  node = node[0]; // ensure ele ref

  var _p = node._private;
  var cyStyle = node.cy().style();
  var pieSize = node.pstyle( 'pie-size' );
  var nodeW = node.width();
  var nodeH = node.height();
  var pos = pos || _p.position;
  var x = pos.x;
  var y = pos.y;
  var radius = Math.min( nodeW, nodeH ) / 2; // must fit in node
  var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]
  var usePaths = this.usePaths();

  if( usePaths ){
    x = 0;
    y = 0;
  }

  if( pieSize.units === '%' ){
    radius = radius * pieSize.value / 100;
  } else if( pieSize.pfValue !== undefined ){
    radius = pieSize.pfValue / 2;
  }

  for( var i = 1; i <= cyStyle.pieBackgroundN; i++ ){ // 1..N
    var size = node.pstyle( 'pie-' + i + '-background-size' ).value;
    var color = node.pstyle( 'pie-' + i + '-background-color' ).value;
    var opacity = node.pstyle( 'pie-' + i + '-background-opacity' ).value * nodeOpacity;
    var percent = size / 100; // map integer range [0, 100] to [0, 1]

    // percent can't push beyond 1
    if( percent + lastPercent > 1 ){
      percent = 1 - lastPercent;
    }

    var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise
    var angleDelta = 2 * Math.PI * percent;
    var angleEnd = angleStart + angleDelta;

    // ignore if
    // - zero size
    // - we're already beyond the full circle
    // - adding the current slice would go beyond the full circle
    if( size === 0 || lastPercent >= 1 || lastPercent + percent > 1 ){
      continue;
    }

    context.beginPath();
    context.moveTo( x, y );
    context.arc( x, y, radius, angleStart, angleEnd );
    context.closePath();

    this.fillStyle( context, color[0], color[1], color[2], opacity );

    context.fill();

    lastPercent += percent;
  }

};


module.exports = CRp;

},{"../../../is":86,"../../../sbgn":90}],73:[function(require,module,exports){
'use strict';

var CRp = {};

var util = require( '../../../util' );

var motionBlurDelay = 100;

// var isFirefox = typeof InstallTrigger !== 'undefined';

CRp.getPixelRatio = function(){
  var context = this.data.contexts[0];

  if( this.forcedPixelRatio != null ){
    return this.forcedPixelRatio;
  }

  var backingStore = context.backingStorePixelRatio ||
    context.webkitBackingStorePixelRatio ||
    context.mozBackingStorePixelRatio ||
    context.msBackingStorePixelRatio ||
    context.oBackingStorePixelRatio ||
    context.backingStorePixelRatio || 1;

  return (window.devicePixelRatio || 1) / backingStore; // eslint-disable-line no-undef
};

CRp.paintCache = function( context ){
  var caches = this.paintCaches = this.paintCaches || [];
  var needToCreateCache = true;
  var cache;

  for( var i = 0; i < caches.length; i++ ){
    cache = caches[ i ];

    if( cache.context === context ){
      needToCreateCache = false;
      break;
    }
  }

  if( needToCreateCache ){
    cache = {
      context: context
    };
    caches.push( cache );
  }

  return cache;
};

CRp.fillStyle = function( context, r, g, b, a ){
  context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

  // turn off for now, seems context does its own caching

  // var cache = this.paintCache(context);

  // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

  // if( cache.fillStyle !== fillStyle ){
  //   context.fillStyle = cache.fillStyle = fillStyle;
  // }
};

CRp.strokeStyle = function( context, r, g, b, a ){
  context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

  // turn off for now, seems context does its own caching

  // var cache = this.paintCache(context);

  // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

  // if( cache.strokeStyle !== strokeStyle ){
  //   context.strokeStyle = cache.strokeStyle = strokeStyle;
  // }
};

CRp.shadowStyle = function( context, color, opacity, blur, offsetX, offsetY ){
  var zoom = this.cy.zoom();

  // var cache = this.paintCache( context );
  //
  // // don't make expensive changes to the shadow style if it's not used
  // if( cache.shadowOpacity === 0 && opacity === 0 ){
  //   return;
  // }
  //
  // cache.shadowOpacity = opacity;

  if( opacity > 0 ){
    context.shadowBlur = blur * zoom;
    context.shadowColor = 'rgba(' + color[0] + ',' + color[1] + ',' + color[2] + ',' + opacity + ')';
    context.shadowOffsetX = offsetX * zoom;
    context.shadowOffsetY = offsetY * zoom;
  } else {
    context.shadowBlur = 0;
    context.shadowColor = 'transparent';
    context.shadowOffsetX = 0;
    context.shadowOffsetY = 0;
  }
};

// Resize canvas
CRp.matchCanvasSize = function( container ){
  var r = this;
  var data = r.data;
  var width = container.clientWidth;
  var height = container.clientHeight;
  var pixelRatio = r.getPixelRatio();
  var mbPxRatio = r.motionBlurPxRatio;

  if(
    container === r.data.bufferCanvases[ r.MOTIONBLUR_BUFFER_NODE ] ||
    container === r.data.bufferCanvases[ r.MOTIONBLUR_BUFFER_DRAG ]
  ){
    pixelRatio = mbPxRatio;
  }

  var canvasWidth = width * pixelRatio;
  var canvasHeight = height * pixelRatio;
  var canvas;

  if( canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight ){
    return; // save cycles if same
  }

  r.fontCaches = null; // resizing resets the style

  var canvasContainer = data.canvasContainer;
  canvasContainer.style.width = width + 'px';
  canvasContainer.style.height = height + 'px';

  for( var i = 0; i < r.CANVAS_LAYERS; i++ ){

    canvas = data.canvases[ i ];

    if( canvas.width !== canvasWidth || canvas.height !== canvasHeight ){

      canvas.width = canvasWidth;
      canvas.height = canvasHeight;

      canvas.style.width = width + 'px';
      canvas.style.height = height + 'px';
    }
  }

  for( var i = 0; i < r.BUFFER_COUNT; i++ ){

    canvas = data.bufferCanvases[ i ];

    if( canvas.width !== canvasWidth || canvas.height !== canvasHeight ){

      canvas.width = canvasWidth;
      canvas.height = canvasHeight;

      canvas.style.width = width + 'px';
      canvas.style.height = height + 'px';
    }
  }

  r.textureMult = 1;
  if( pixelRatio <= 1 ){
    canvas = data.bufferCanvases[ r.TEXTURE_BUFFER ];

    r.textureMult = 2;
    canvas.width = canvasWidth * r.textureMult;
    canvas.height = canvasHeight * r.textureMult;
  }

  r.canvasWidth = canvasWidth;
  r.canvasHeight = canvasHeight;

};

CRp.renderTo = function( cxt, zoom, pan, pxRatio ){
  this.render( {
    forcedContext: cxt,
    forcedZoom: zoom,
    forcedPan: pan,
    drawAllLayers: true,
    forcedPxRatio: pxRatio
  } );
};

CRp.render = function( options ){
  options = options || util.staticEmptyObject();

  var forcedContext = options.forcedContext;
  var drawAllLayers = options.drawAllLayers;
  var drawOnlyNodeLayer = options.drawOnlyNodeLayer;
  var forcedZoom = options.forcedZoom;
  var forcedPan = options.forcedPan;
  var r = this;
  var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;
  var cy = r.cy; var data = r.data;
  var needDraw = data.canvasNeedsRedraw;
  var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);
  var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;
  var mbPxRatio = r.motionBlurPxRatio;
  var hasCompoundNodes = cy.hasCompoundNodes();
  var inNodeDragGesture = r.hoverData.draggingEles;
  var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;
  motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;
  var motionBlurFadeEffect = motionBlur;

  if( !forcedContext ){
    if( r.prevPxRatio !== pixelRatio ){
      r.invalidateContainerClientCoordsCache();
      r.matchCanvasSize( r.container );

      r.redrawHint('eles', true);
      r.redrawHint('drag', true);
    }

    r.prevPxRatio = pixelRatio;
  }

  if( !forcedContext && r.motionBlurTimeout ){
    clearTimeout( r.motionBlurTimeout );
  }

  if( motionBlur ){
    if( r.mbFrames == null ){
      r.mbFrames = 0;
    }

    if( !r.drawingImage ){ // image loading frames don't count towards motion blur blurry frames
      r.mbFrames++;
    }

    if( r.mbFrames < 3 ){ // need several frames before even high quality motionblur
      motionBlurFadeEffect = false;
    }

    // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)
    if( r.mbFrames > r.minMbLowQualFrames ){
      //r.fullQualityMb = false;
      r.motionBlurPxRatio = r.mbPxRBlurry;
    }
  }

  if( r.clearingMotionBlur ){
    r.motionBlurPxRatio = 1;
  }

  // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame
  // because a rogue async texture frame would clear needDraw
  if( r.textureDrawLastFrame && !textureDraw ){
    needDraw[ r.NODE ] = true;
    needDraw[ r.SELECT_BOX ] = true;
  }

  var coreStyle = cy.style()._private.coreStyle;

  var zoom = cy.zoom();
  var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;
  var pan = cy.pan();
  var effectivePan = {
    x: pan.x,
    y: pan.y
  };

  var vp = {
    zoom: zoom,
    pan: {
      x: pan.x,
      y: pan.y
    }
  };
  var prevVp = r.prevViewport;
  var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y;

  // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)
  if( !viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes) ){
    r.motionBlurPxRatio = 1;
  }

  if( forcedPan ){
    effectivePan = forcedPan;
  }

  // apply pixel ratio

  effectiveZoom *= pixelRatio;
  effectivePan.x *= pixelRatio;
  effectivePan.y *= pixelRatio;

  var eles = r.getCachedZSortedEles();

  function mbclear( context, x, y, w, h ){
    var gco = context.globalCompositeOperation;

    context.globalCompositeOperation = 'destination-out';
    r.fillStyle( context, 255, 255, 255, r.motionBlurTransparency );
    context.fillRect( x, y, w, h );

    context.globalCompositeOperation = gco;
  }

  function setContextTransform( context, clear ){
    var ePan, eZoom, w, h;

    if( !r.clearingMotionBlur && (context === data.bufferContexts[ r.MOTIONBLUR_BUFFER_NODE ] || context === data.bufferContexts[ r.MOTIONBLUR_BUFFER_DRAG ]) ){
      ePan = {
        x: pan.x * mbPxRatio,
        y: pan.y * mbPxRatio
      };

      eZoom = zoom * mbPxRatio;

      w = r.canvasWidth * mbPxRatio;
      h = r.canvasHeight * mbPxRatio;
    } else {
      ePan = effectivePan;
      eZoom = effectiveZoom;

      w = r.canvasWidth;
      h = r.canvasHeight;
    }

    context.setTransform( 1, 0, 0, 1, 0, 0 );

    if( clear === 'motionBlur' ){
      mbclear( context, 0, 0, w, h );
    } else if( !forcedContext && (clear === undefined || clear) ){
      context.clearRect( 0, 0, w, h );
    }

    if( !drawAllLayers ){
      context.translate( ePan.x, ePan.y );
      context.scale( eZoom, eZoom );
    }
    if( forcedPan ){
      context.translate( forcedPan.x, forcedPan.y );
    }
    if( forcedZoom ){
      context.scale( forcedZoom, forcedZoom );
    }
  }

  if( !textureDraw ){
    r.textureDrawLastFrame = false;
  }

  if( textureDraw ){
    r.textureDrawLastFrame = true;

    var bb;

    if( !r.textureCache ){
      r.textureCache = {};

      bb = r.textureCache.bb = cy.mutableElements().boundingBox();

      r.textureCache.texture = r.data.bufferCanvases[ r.TEXTURE_BUFFER ];

      var cxt = r.data.bufferContexts[ r.TEXTURE_BUFFER ];

      cxt.setTransform( 1, 0, 0, 1, 0, 0 );
      cxt.clearRect( 0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult );

      r.render( {
        forcedContext: cxt,
        drawOnlyNodeLayer: true,
        forcedPxRatio: pixelRatio * r.textureMult
      } );

      var vp = r.textureCache.viewport = {
        zoom: cy.zoom(),
        pan: cy.pan(),
        width: r.canvasWidth,
        height: r.canvasHeight
      };

      vp.mpan = {
        x: (0 - vp.pan.x) / vp.zoom,
        y: (0 - vp.pan.y) / vp.zoom
      };
    }

    needDraw[ r.DRAG ] = false;
    needDraw[ r.NODE ] = false;

    var context = data.contexts[ r.NODE ];

    var texture = r.textureCache.texture;
    var vp = r.textureCache.viewport;
    bb = r.textureCache.bb;

    context.setTransform( 1, 0, 0, 1, 0, 0 );

    if( motionBlur ){
      mbclear( context, 0, 0, vp.width, vp.height );
    } else {
      context.clearRect( 0, 0, vp.width, vp.height );
    }

    var outsideBgColor = coreStyle[ 'outside-texture-bg-color' ].value;
    var outsideBgOpacity = coreStyle[ 'outside-texture-bg-opacity' ].value;
    r.fillStyle( context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity );
    context.fillRect( 0, 0, vp.width, vp.height );

    var zoom = cy.zoom();

    setContextTransform( context, false );

    context.clearRect( vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio );
    context.drawImage( texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio );

  } else if( r.textureOnViewport && !forcedContext ){ // clear the cache since we don't need it
    r.textureCache = null;
  }

  var extent = cy.extent();
  var vpManip = (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles);
  var hideEdges = r.hideEdgesOnViewport && vpManip;

  var needMbClear = [];

  needMbClear[ r.NODE ] = !needDraw[ r.NODE ] && motionBlur && !r.clearedForMotionBlur[ r.NODE ] || r.clearingMotionBlur;
  if( needMbClear[ r.NODE ] ){ r.clearedForMotionBlur[ r.NODE ] = true; }

  needMbClear[ r.DRAG ] = !needDraw[ r.DRAG ] && motionBlur && !r.clearedForMotionBlur[ r.DRAG ] || r.clearingMotionBlur;
  if( needMbClear[ r.DRAG ] ){ r.clearedForMotionBlur[ r.DRAG ] = true; }

  if( needDraw[ r.NODE ] || drawAllLayers || drawOnlyNodeLayer || needMbClear[ r.NODE ] ){
    var useBuffer = motionBlur && !needMbClear[ r.NODE ] && mbPxRatio !== 1;
    var context = forcedContext || ( useBuffer ? r.data.bufferContexts[ r.MOTIONBLUR_BUFFER_NODE ] : data.contexts[ r.NODE ] );
    var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;

    setContextTransform( context, clear );

    if( hideEdges ){
      r.drawCachedNodes( context, eles.nondrag, pixelRatio, extent );
    } else {
      r.drawLayeredElements( context, eles.nondrag, pixelRatio, extent );
    }

    if( !drawAllLayers && !motionBlur ){
      needDraw[ r.NODE ] = false;
    }
  }

  if( !drawOnlyNodeLayer && (needDraw[ r.DRAG ] || drawAllLayers || needMbClear[ r.DRAG ]) ){
    var useBuffer = motionBlur && !needMbClear[ r.DRAG ] && mbPxRatio !== 1;
    var context = forcedContext || ( useBuffer ? r.data.bufferContexts[ r.MOTIONBLUR_BUFFER_DRAG ] : data.contexts[ r.DRAG ] );

    setContextTransform( context, motionBlur && !useBuffer ? 'motionBlur' : undefined );

    if( hideEdges ){
      r.drawCachedNodes( context, eles.drag, pixelRatio, extent );
    } else {
      r.drawCachedElements( context, eles.drag, pixelRatio, extent );
    }

    if( !drawAllLayers && !motionBlur ){
      needDraw[ r.DRAG ] = false;
    }
  }

  if( r.showFps || (!drawOnlyNodeLayer && (needDraw[ r.SELECT_BOX ] && !drawAllLayers)) ){
    var context = forcedContext || data.contexts[ r.SELECT_BOX ];

    setContextTransform( context );

    if( r.selection[4] == 1 && ( r.hoverData.selecting || r.touchData.selecting ) ){
      var zoom = r.cy.zoom();
      var borderWidth = coreStyle[ 'selection-box-border-width' ].value / zoom;

      context.lineWidth = borderWidth;
      context.fillStyle = 'rgba('
        + coreStyle[ 'selection-box-color' ].value[0] + ','
        + coreStyle[ 'selection-box-color' ].value[1] + ','
        + coreStyle[ 'selection-box-color' ].value[2] + ','
        + coreStyle[ 'selection-box-opacity' ].value + ')';

      context.fillRect(
        r.selection[0],
        r.selection[1],
        r.selection[2] - r.selection[0],
        r.selection[3] - r.selection[1] );

      if( borderWidth > 0 ){
        context.strokeStyle = 'rgba('
          + coreStyle[ 'selection-box-border-color' ].value[0] + ','
          + coreStyle[ 'selection-box-border-color' ].value[1] + ','
          + coreStyle[ 'selection-box-border-color' ].value[2] + ','
          + coreStyle[ 'selection-box-opacity' ].value + ')';

        context.strokeRect(
          r.selection[0],
          r.selection[1],
          r.selection[2] - r.selection[0],
          r.selection[3] - r.selection[1] );
      }
    }

    if( data.bgActivePosistion && !r.hoverData.selecting ){
      var zoom = r.cy.zoom();
      var pos = data.bgActivePosistion;

      context.fillStyle = 'rgba('
        + coreStyle[ 'active-bg-color' ].value[0] + ','
        + coreStyle[ 'active-bg-color' ].value[1] + ','
        + coreStyle[ 'active-bg-color' ].value[2] + ','
        + coreStyle[ 'active-bg-opacity' ].value + ')';

      context.beginPath();
      context.arc( pos.x, pos.y, coreStyle[ 'active-bg-size' ].pfValue / zoom, 0, 2 * Math.PI );
      context.fill();
    }

    var timeToRender = r.lastRedrawTime;
    if( r.showFps && timeToRender ){
      timeToRender = Math.round( timeToRender );
      var fps = Math.round( 1000 / timeToRender );

      context.setTransform( 1, 0, 0, 1, 0, 0 );

      context.fillStyle = 'rgba(255, 0, 0, 0.75)';
      context.strokeStyle = 'rgba(255, 0, 0, 0.75)';
      context.lineWidth = 1;
      context.fillText( '1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20 );

      var maxFps = 60;
      context.strokeRect( 0, 30, 250, 20 );
      context.fillRect( 0, 30, 250 * Math.min( fps / maxFps, 1 ), 20 );
    }

    if( !drawAllLayers ){
      needDraw[ r.SELECT_BOX ] = false;
    }
  }

  // motionblur: blit rendered blurry frames
  if( motionBlur && mbPxRatio !== 1 ){
    var cxtNode = data.contexts[ r.NODE ];
    var txtNode = r.data.bufferCanvases[ r.MOTIONBLUR_BUFFER_NODE ];

    var cxtDrag = data.contexts[ r.DRAG ];
    var txtDrag = r.data.bufferCanvases[ r.MOTIONBLUR_BUFFER_DRAG ];

    var drawMotionBlur = function( cxt, txt, needClear ){
      cxt.setTransform( 1, 0, 0, 1, 0, 0 );

      if( needClear || !motionBlurFadeEffect ){
        cxt.clearRect( 0, 0, r.canvasWidth, r.canvasHeight );
      } else {
        mbclear( cxt, 0, 0, r.canvasWidth, r.canvasHeight );
      }

      var pxr = mbPxRatio;

      cxt.drawImage(
        txt, // img
        0, 0, // sx, sy
        r.canvasWidth * pxr, r.canvasHeight * pxr, // sw, sh
        0, 0, // x, y
        r.canvasWidth, r.canvasHeight // w, h
      );
    };

    if( needDraw[ r.NODE ] || needMbClear[ r.NODE ] ){
      drawMotionBlur( cxtNode, txtNode, needMbClear[ r.NODE ] );
      needDraw[ r.NODE ] = false;
    }

    if( needDraw[ r.DRAG ] || needMbClear[ r.DRAG ] ){
      drawMotionBlur( cxtDrag, txtDrag, needMbClear[ r.DRAG ] );
      needDraw[ r.DRAG ] = false;
    }
  }

  r.prevViewport = vp;

  if( r.clearingMotionBlur ){
    r.clearingMotionBlur = false;
    r.motionBlurCleared = true;
    r.motionBlur = true;
  }

  if( motionBlur ){
    r.motionBlurTimeout = setTimeout( function(){
      r.motionBlurTimeout = null;

      r.clearedForMotionBlur[ r.NODE ] = false;
      r.clearedForMotionBlur[ r.DRAG ] = false;
      r.motionBlur = false;
      r.clearingMotionBlur = !textureDraw;
      r.mbFrames = 0;

      needDraw[ r.NODE ] = true;
      needDraw[ r.DRAG ] = true;

      r.redraw();
    }, motionBlurDelay );
  }

  r.drawingImage = false;


  if( !forcedContext && !r.initrender ){
    r.initrender = true;
    cy.trigger( 'initrender' );
  }

  if( !forcedContext ){
    cy.trigger('render');
  }

};

module.exports = CRp;

},{"../../../util":104}],74:[function(require,module,exports){
'use strict';

var math = require( '../../../math' );

var CRp = {};

// @O Polygon drawing
CRp.drawPolygonPath = function(
  context, x, y, width, height, points ){

  var halfW = width / 2;
  var halfH = height / 2;

  if( context.beginPath ){ context.beginPath(); }

  context.moveTo( x + halfW * points[0], y + halfH * points[1] );

  for( var i = 1; i < points.length / 2; i++ ){
    context.lineTo( x + halfW * points[ i * 2], y + halfH * points[ i * 2 + 1] );
  }

  context.closePath();
};

// Round rectangle drawing
CRp.drawRoundRectanglePath = function(
  context, x, y, width, height ){

  var halfWidth = width / 2;
  var halfHeight = height / 2;
  var cornerRadius = math.getRoundRectangleRadius( width, height );

  if( context.beginPath ){ context.beginPath(); }

  // Start at top middle
  context.moveTo( x, y - halfHeight );
  // Arc from middle top to right side
  context.arcTo( x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius );
  // Arc from right side to bottom
  context.arcTo( x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius );
  // Arc from bottom to left side
  context.arcTo( x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius );
  // Arc from left side to topBorder
  context.arcTo( x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius );
  // Join line
  context.lineTo( x, y - halfHeight );


  context.closePath();
};

var sin0 = Math.sin( 0 );
var cos0 = Math.cos( 0 );

var sin = {};
var cos = {};

var ellipseStepSize = Math.PI / 40;

for( var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize ){
  sin[ i ] = Math.sin( i );
  cos[ i ] = Math.cos( i );
}

CRp.drawEllipsePath = function( context, centerX, centerY, width, height ){
    if( context.beginPath ){ context.beginPath(); }

    if( context.ellipse ){
      context.ellipse( centerX, centerY, width / 2, height / 2, 0, 0, 2 * Math.PI );
    } else {
      var xPos, yPos;
      var rw = width / 2;
      var rh = height / 2;
      for( var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize ){
        xPos = centerX - (rw * sin[ i ]) * sin0 + (rw * cos[ i ]) * cos0;
        yPos = centerY + (rh * cos[ i ]) * sin0 + (rh * sin[ i ]) * cos0;

        if( i === 0 ){
          context.moveTo( xPos, yPos );
        } else {
          context.lineTo( xPos, yPos );
        }
      }
    }

    context.closePath();
  };

module.exports = CRp;

},{"../../../math":88}],75:[function(require,module,exports){
'use strict';

var math = require( '../../../math' );
var util = require( '../../../util' );
var Heap = require( '../../../heap' );
var defs = require( './texture-cache-defs' );

var minTxrH = 25; // the size of the texture cache for small height eles (special case)
var txrStepH = 50; // the min size of the regular cache, and the size it increases with each step up
var minLvl = -4; // when scaling smaller than that we don't need to re-render
var maxLvl = 2; // when larger than this scale just render directly (caching is not helpful)
var maxZoom = 3.99; // beyond this zoom level, layered textures are not used
var eleTxrSpacing = 8; // spacing between elements on textures to avoid blitting overlaps
var defTxrWidth = 1024; // default/minimum texture width
var maxTxrW = 1024; // the maximum width of a texture
var maxTxrH = 1024;  // the maximum height of a texture
var minUtility = 0.5; // if usage of texture is less than this, it is retired
var maxFullness = 0.8; // fullness of texture after which queue removal is checked
var maxFullnessChecks = 10; // dequeued after this many checks
var allowEdgeTxrCaching = false; // whether edges can be cached as textures (TODO maybe better on if webgl supported?)
var allowParentTxrCaching = false; // whether parent nodes can be cached as textures (TODO maybe better on if webgl supported?)
var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame
var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time
var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing
var deqFastCost = 0.9; // % of frame time to be used when >60fps
var deqRedrawThreshold = 100; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile
var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch

var getTxrReasons = {
  dequeue: 'dequeue',
  downscale: 'downscale',
  highQuality: 'highQuality'
};

var ElementTextureCache = function( renderer ){
  var self = this;

  self.renderer = renderer;
  self.onDequeues = [];

  self.setupDequeueing();
};

var ETCp = ElementTextureCache.prototype;

ETCp.reasons = getTxrReasons;

// the list of textures in which new subtextures for elements can be placed
ETCp.getTextureQueue = function( txrH ){
  var self = this;
  self.eleImgCaches = self.eleImgCaches || {};

  return ( self.eleImgCaches[ txrH ] = self.eleImgCaches[ txrH ] || [] );
};

// the list of usused textures which can be recycled (in use in texture queue)
ETCp.getRetiredTextureQueue = function( txrH ){
  var self = this;

  var rtxtrQs = self.eleImgCaches.retired = self.eleImgCaches.retired || {};
  var rtxtrQ = rtxtrQs[ txrH ] = rtxtrQs[ txrH ] || [];

  return rtxtrQ;
};

// queue of element draw requests at different scale levels
ETCp.getElementQueue = function(){
  var self = this;

  var q = self.eleCacheQueue = self.eleCacheQueue || new Heap(function( a, b ){
    return b.reqs - a.reqs;
  });

  return q;
};

// queue of element draw requests at different scale levels (element id lookup)
ETCp.getElementIdToQueue = function(){
  var self = this;

  var id2q = self.eleIdToCacheQueue = self.eleIdToCacheQueue || {};

  return id2q;
};

ETCp.getElement = function( ele, bb, pxRatio, lvl, reason ){
  var self = this;
  var r = this.renderer;
  var rs = ele._private.rscratch;
  var zoom = r.cy.zoom();

  if( bb.w === 0 || bb.h === 0 ){ return null; }

  if( lvl == null ){
    lvl = Math.ceil( math.log2( zoom * pxRatio ) );
  }

  if( lvl < minLvl ){
    lvl = minLvl;
  } else if( zoom >= maxZoom || lvl > maxLvl ){
    return null;
  }

  var scale = Math.pow( 2, lvl );
  var eleScaledH = bb.h * scale;
  var eleScaledW = bb.w * scale;
  var caches = rs.imgCaches = rs.imgCaches || {};
  var eleCache = caches[lvl];

  if( eleCache ){
    return eleCache;
  }

  var txrH; // which texture height this ele belongs to

  if( eleScaledH <= minTxrH ){
    txrH = minTxrH;
  } else if( eleScaledH <= txrStepH ){
    txrH = txrStepH;
  } else {
    txrH = Math.ceil( eleScaledH / txrStepH ) * txrStepH;
  }

  if(
    eleScaledH > maxTxrH
    || eleScaledW > maxTxrW
    || ( !allowEdgeTxrCaching && ele.isEdge() )
    || ( !allowParentTxrCaching && ele.isParent() )
  ){
    return null; // caching large elements is not efficient
  }

  var txrQ = self.getTextureQueue( txrH );

  // first try the second last one in case it has space at the end
  var txr = txrQ[ txrQ.length - 2 ];

  var addNewTxr = function(){
    return self.recycleTexture( txrH, eleScaledW ) || self.addTexture( txrH, eleScaledW );
  };

  // try the last one if there is no second last one
  if( !txr ){
    txr = txrQ[ txrQ.length - 1 ];
  }

  // if the last one doesn't exist, we need a first one
  if( !txr ){
    txr = addNewTxr();
  }

  // if there's no room in the current texture, we need a new one
  if( txr.width - txr.usedWidth < eleScaledW ){
    txr = addNewTxr();
  }

  var scaledLabelShown = r.eleTextBiggerThanMin( ele, scale );
  var scalableFrom = function( otherCache ){
    return otherCache && otherCache.scaledLabelShown === scaledLabelShown;
  };

  var deqing = reason && reason === getTxrReasons.dequeue;
  var highQualityReq = reason && reason === getTxrReasons.highQuality;
  var downscaleReq = reason && reason === getTxrReasons.downscale;

  var higherCache; // the nearest cache with a higher level
  for( var l = lvl + 1; l <= maxLvl; l++ ){
    var c = caches[l];

    if( c ){ higherCache = c; break; }
  }

  var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;

  var downscale = function(){
    txr.context.drawImage(
      oneUpCache.texture.canvas,
      oneUpCache.x, 0,
      oneUpCache.width, oneUpCache.height,
      txr.usedWidth, 0,
      eleScaledW, eleScaledH
    );
  };

  if( scalableFrom(oneUpCache) ){
    // then we can relatively cheaply rescale the existing image w/o rerendering
    downscale();

  } else if( scalableFrom(higherCache) ){
    // then use the higher cache for now and queue the next level down
    // to cheaply scale towards the smaller level

    if( highQualityReq ){
      for( var l = higherCache.level; l > lvl; l-- ){
        oneUpCache = self.getElement( ele, bb, pxRatio, l, getTxrReasons.downscale );
      }

      downscale();

    } else {
      self.queueElement( ele, bb, higherCache.level - 1 );

      return higherCache;
    }
  } else {

    var lowerCache; // the nearest cache with a lower level
    if( !deqing && !highQualityReq && !downscaleReq ){
      for( var l = lvl - 1; l >= minLvl; l-- ){
        var c = caches[l];

        if( c ){ lowerCache = c; break; }
      }
    }

    if( scalableFrom(lowerCache) ){
      // then use the lower quality cache for now and queue the better one for later

      self.queueElement( ele, bb, lvl );

      return lowerCache;
    }

    txr.context.translate( txr.usedWidth, 0 );
    txr.context.scale( scale, scale );

    r.drawElement( txr.context, ele, bb, scaledLabelShown );

    txr.context.scale( 1/scale, 1/scale );
    txr.context.translate( -txr.usedWidth, 0 );
  }

  eleCache = caches[lvl] = {
    ele: ele,
    x: txr.usedWidth,
    texture: txr,
    level: lvl,
    scale: scale,
    width: eleScaledW,
    height: eleScaledH,
    scaledLabelShown: scaledLabelShown
  };

  txr.usedWidth += Math.ceil( eleScaledW + eleTxrSpacing );

  txr.eleCaches.push( eleCache );

  self.checkTextureFullness( txr );

  return eleCache;
};

ETCp.invalidateElement = function( ele ){
  var self = this;
  var caches = ele._private.rscratch.imgCaches;

  if( caches ){
    for( var lvl = minLvl; lvl <= maxLvl; lvl++ ){
      var cache = caches[ lvl ];

      if( cache ){
        var txr = cache.texture;

        // remove space from the texture it belongs to
        txr.invalidatedWidth += cache.width;

        // remove refs with the element
        caches[ lvl ] = null;
        util.removeFromArray( txr.eleCaches, cache );

        // might have to remove the entire texture if it's not efficiently using its space
        self.checkTextureUtility( txr );
      }
    }
  }
};

ETCp.checkTextureUtility = function( txr ){
  // invalidate all entries in the cache if the cache size is small
  if( txr.invalidatedWidth >= minUtility * txr.width ){
    this.retireTexture( txr );
  }
};

ETCp.checkTextureFullness = function( txr ){
  // if texture has been mostly filled and passed over several times, remove
  // it from the queue so we don't need to waste time looking at it to put new things

  var self = this;
  var txrQ = self.getTextureQueue( txr.height );

  if( txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks ){
    util.removeFromArray( txrQ, txr );
  } else {
    txr.fullnessChecks++;
  }
};

ETCp.retireTexture = function( txr ){
  var self = this;
  var txrH = txr.height;
  var txrQ = self.getTextureQueue( txrH );

  // retire the texture from the active / searchable queue:

  util.removeFromArray( txrQ, txr );

  txr.retired = true;

  // remove the refs from the eles to the caches:

  var eleCaches = txr.eleCaches;

  for( var i = 0; i < eleCaches.length; i++ ){
    var eleCache = eleCaches[i];
    var ele = eleCache.ele;
    var lvl = eleCache.level;
    var imgCaches = ele._private.rscratch.imgCaches;

    if( imgCaches ){
      imgCaches[ lvl ] = null;
    }
  }

  util.clearArray( eleCaches );

  // add the texture to a retired queue so it can be recycled in future:

  var rtxtrQ = self.getRetiredTextureQueue( txrH );

  rtxtrQ.push( txr );
};

ETCp.addTexture = function( txrH, minW ){
  var self = this;
  var txrQ = self.getTextureQueue( txrH );
  var txr = {};

  txrQ.push( txr );

  txr.eleCaches = [];

  txr.height = txrH;
  txr.width = Math.max( defTxrWidth, minW );
  txr.usedWidth = 0;
  txr.invalidatedWidth = 0;
  txr.fullnessChecks = 0;

  txr.canvas = document.createElement('canvas'); // eslint-disable-line no-undef
  txr.canvas.width = txr.width;
  txr.canvas.height = txr.height;

  txr.context = txr.canvas.getContext('2d');

  return txr;
};

ETCp.recycleTexture = function( txrH, minW ){
  var self = this;
  var txrQ = self.getTextureQueue( txrH );
  var rtxtrQ = self.getRetiredTextureQueue( txrH );

  for( var i = 0; i < rtxtrQ.length; i++ ){
    var txr = rtxtrQ[i];

    if( txr.width >= minW ){
      txr.retired = false;

      txr.usedWidth = 0;
      txr.invalidatedWidth = 0;
      txr.fullnessChecks = 0;

      util.clearArray( txr.eleCaches );

      txr.context.clearRect( 0, 0, txr.width, txr.height );

      util.removeFromArray( rtxtrQ, txr );
      txrQ.push( txr );

      return txr;
    }
  }
};

ETCp.queueElement = function( ele, bb, lvl ){
  var self = this;
  var q = self.getElementQueue();
  var id2q = self.getElementIdToQueue();
  var id = ele.id();
  var existingReq = id2q[ id ];

  if( existingReq ){ // use the max lvl b/c in between lvls are cheap to make
    existingReq.level = Math.max( existingReq.level, lvl );
    existingReq.reqs++;

    q.updateItem( existingReq );
  } else {
    var req = {
      ele: ele,
      bb: bb,
      position: math.copyPosition( ele.position() ),
      level: lvl,
      reqs: 1
    };

    if( ele.isEdge() ){
      req.positions = {
        source: math.copyPosition( ele.source().position() ),
        target: math.copyPosition( ele.target().position() )
      };
    }

    q.push( req );

    id2q[ id ] = req;
  }
};

ETCp.dequeue = function( pxRatio, extent ){
  var self = this;
  var q = self.getElementQueue();
  var id2q = self.getElementIdToQueue();
  var dequeued = [];

  for( var i = 0; i < maxDeqSize; i++ ){
    if( q.size() > 0 ){
      var req = q.pop();

      id2q[ req.ele.id() ] = null;

      dequeued.push( req );

      var ele = req.ele;
      var bb;

      if(
        ( ele.isEdge()
          && (
            !math.arePositionsSame( ele.source().position(), req.positions.source )
            || !math.arePositionsSame( ele.target().position(), req.positions.target )
          )
        )
        || ( !math.arePositionsSame( ele.position(), req.position ) )
      ){
        bb = ele.boundingBox();
      } else {
        bb = req.bb;
      }

      self.getElement( req.ele, bb, pxRatio, req.level, getTxrReasons.dequeue );
    } else {
      break;
    }
  }

  return dequeued;
};

ETCp.onDequeue = function( fn ){ this.onDequeues.push( fn ); };
ETCp.offDequeue = function( fn ){ util.removeFromArray( this.onDequeues, fn ); };

ETCp.setupDequeueing = defs.setupDequeueing({
  deqRedrawThreshold: deqRedrawThreshold,
  deqCost: deqCost,
  deqAvgCost: deqAvgCost,
  deqNoDrawCost: deqNoDrawCost,
  deqFastCost: deqFastCost,
  deq: function( self, pxRatio, extent ){
    return self.dequeue( pxRatio, extent );
  },
  onDeqd: function( self, deqd ){
    for( var i = 0; i < self.onDequeues.length; i++ ){
      var fn = self.onDequeues[i];

      fn( deqd );
    }
  },
  shouldRedraw: function( self, deqd, pxRatio, extent ){
    for( var i = 0; i < deqd.length; i++ ){
      var bb = deqd[i].bb;

      if( math.boundingBoxesIntersect( bb, extent ) ){
        return true;
      }
    }

    return false;
  },
  priority: function( self ){
    return self.renderer.beforeRenderPriorities.eleTxrDeq;
  }
});

module.exports = ElementTextureCache;

},{"../../../heap":84,"../../../math":88,"../../../util":104,"./texture-cache-defs":80}],76:[function(require,module,exports){
'use strict';

var is = require( '../../../is' );

var CRp = {};

CRp.createBuffer = function( w, h ){
  var buffer = document.createElement( 'canvas' ); // eslint-disable-line no-undef
  buffer.width = w;
  buffer.height = h;

  return [ buffer, buffer.getContext( '2d' ) ];
};

CRp.bufferCanvasImage = function( options ){
  var cy = this.cy;
  var eles = cy.mutableElements();
  var bb = eles.boundingBox();
  var width = options.full ? Math.ceil( bb.w ) : this.container.clientWidth;
  var height = options.full ? Math.ceil( bb.h ) : this.container.clientHeight;
  var specdMaxDims = is.number( options.maxWidth ) || is.number( options.maxHeight );
  var pxRatio = this.getPixelRatio();
  var scale = 1;

  if( options.scale !== undefined ){
    width *= options.scale;
    height *= options.scale;

    scale = options.scale;
  } else if( specdMaxDims ){
    var maxScaleW = Infinity;
    var maxScaleH = Infinity;

    if( is.number( options.maxWidth ) ){
      maxScaleW = scale * options.maxWidth / width;
    }

    if( is.number( options.maxHeight ) ){
      maxScaleH = scale * options.maxHeight / height;
    }

    scale = Math.min( maxScaleW, maxScaleH );

    width *= scale;
    height *= scale;
  }

  if( !specdMaxDims ){
    width *= pxRatio;
    height *= pxRatio;
    scale *= pxRatio;
  }

  var buffCanvas = document.createElement( 'canvas' ); // eslint-disable-line no-undef

  buffCanvas.width = width;
  buffCanvas.height = height;

  buffCanvas.style.width = width + 'px';
  buffCanvas.style.height = height + 'px';

  var buffCxt = buffCanvas.getContext( '2d' );

  // Rasterize the layers, but only if container has nonzero size
  if( width > 0 && height > 0 ){

    buffCxt.clearRect( 0, 0, width, height );

    if( options.bg ){
      buffCxt.fillStyle = options.bg;
      buffCxt.rect( 0, 0, width, height );
      buffCxt.fill();
    }

    buffCxt.globalCompositeOperation = 'source-over';

    var zsortedEles = this.getCachedZSortedEles();

    if( options.full ){ // draw the full bounds of the graph
      buffCxt.translate( -bb.x1 * scale, -bb.y1 * scale );
      buffCxt.scale( scale, scale );

      this.drawElements( buffCxt, zsortedEles );
    } else { // draw the current view
      var pan = cy.pan();

      var translation = {
        x: pan.x * scale,
        y: pan.y * scale
      };

      scale *= cy.zoom();

      buffCxt.translate( translation.x, translation.y );
      buffCxt.scale( scale, scale );

      this.drawElements( buffCxt, zsortedEles );
    }
  }

  return buffCanvas;
};

function b64ToBlob( b64, mimeType ){
  var bytes = atob( b64 );
  var buff = new ArrayBuffer( bytes.length );
  var buffUint8 = new Uint8Array( buff );

  for( var i = 0; i < bytes.length; i++ ){
    buffUint8[i] = bytes.charCodeAt(i);
  }

  return new Blob( [buff], { type: mimeType } );
}

function b64UriToB64( b64uri ){
  var i = b64uri.indexOf(',');

  return b64uri.substr( i + 1 );
};

function output( options, canvas, mimeType ){
  var b64Uri = canvas.toDataURL( mimeType, options.quality );

  switch( options.output ){
    case 'blob':
      return b64ToBlob( b64UriToB64( b64Uri ), mimeType );

    case 'base64':
      return b64UriToB64( b64Uri );

    case 'base64uri':
    default:
      return b64Uri;
  }
}

CRp.png = function( options ){
  return output( options, this.bufferCanvasImage( options ), 'image/png' );
};

CRp.jpg = function( options ){
  return output( options, this.bufferCanvasImage( options ), 'image/jpeg' );
};

module.exports = CRp;

},{"../../../is":86}],77:[function(require,module,exports){
/*
The canvas renderer was written by Yue Dong.

Modifications tracked on Github.
*/

'use strict';

var util = require( '../../../util' );
var is = require( '../../../is' );
var ElementTextureCache = require('./ele-texture-cache');
var LayeredTextureCache = require('./layered-texture-cache');

var CR = CanvasRenderer;
var CRp = CanvasRenderer.prototype;

CRp.CANVAS_LAYERS = 3;
//
CRp.SELECT_BOX = 0;
CRp.DRAG = 1;
CRp.NODE = 2;

CRp.BUFFER_COUNT = 3;
//
CRp.TEXTURE_BUFFER = 0;
CRp.MOTIONBLUR_BUFFER_NODE = 1;
CRp.MOTIONBLUR_BUFFER_DRAG = 2;

function CanvasRenderer( options ){
  var r = this;

  r.data = {
    canvases: new Array( CRp.CANVAS_LAYERS ),
    contexts: new Array( CRp.CANVAS_LAYERS ),
    canvasNeedsRedraw: new Array( CRp.CANVAS_LAYERS ),

    bufferCanvases: new Array( CRp.BUFFER_COUNT ),
    bufferContexts: new Array( CRp.CANVAS_LAYERS ),
  };

  r.data.canvasContainer = document.createElement( 'div' ); // eslint-disable-line no-undef
  var containerStyle = r.data.canvasContainer.style;
  r.data.canvasContainer.setAttribute( 'style', '-webkit-tap-highlight-color: rgba(0,0,0,0);' );
  containerStyle.position = 'relative';
  containerStyle.zIndex = '0';
  containerStyle.overflow = 'hidden';

  var container = options.cy.container();
  container.appendChild( r.data.canvasContainer );
  container.setAttribute( 'style', ( container.getAttribute( 'style' ) || '' ) + '-webkit-tap-highlight-color: rgba(0,0,0,0);' );

  for( var i = 0; i < CRp.CANVAS_LAYERS; i++ ){
    var canvas = r.data.canvases[ i ] = document.createElement( 'canvas' );  // eslint-disable-line no-undef
    r.data.contexts[ i ] = canvas.getContext( '2d' );
    canvas.setAttribute( 'style', '-webkit-user-select: none; -moz-user-select: -moz-none; user-select: none; -webkit-tap-highlight-color: rgba(0,0,0,0); outline-style: none;' + ( is.ms() ? ' -ms-touch-action: none; touch-action: none; ' : '' ) );
    canvas.style.position = 'absolute';
    canvas.setAttribute( 'data-id', 'layer' + i );
    canvas.style.zIndex = String( CRp.CANVAS_LAYERS - i );
    r.data.canvasContainer.appendChild( canvas );

    r.data.canvasNeedsRedraw[ i ] = false;
  }
  r.data.topCanvas = r.data.canvases[0];

  r.data.canvases[ CRp.NODE ].setAttribute( 'data-id', 'layer' + CRp.NODE + '-node' );
  r.data.canvases[ CRp.SELECT_BOX ].setAttribute( 'data-id', 'layer' + CRp.SELECT_BOX + '-selectbox' );
  r.data.canvases[ CRp.DRAG ].setAttribute( 'data-id', 'layer' + CRp.DRAG + '-drag' );

  for( var i = 0; i < CRp.BUFFER_COUNT; i++ ){
    r.data.bufferCanvases[ i ] = document.createElement( 'canvas' );  // eslint-disable-line no-undef
    r.data.bufferContexts[ i ] = r.data.bufferCanvases[ i ].getContext( '2d' );
    r.data.bufferCanvases[ i ].style.position = 'absolute';
    r.data.bufferCanvases[ i ].setAttribute( 'data-id', 'buffer' + i );
    r.data.bufferCanvases[ i ].style.zIndex = String( -i - 1 );
    r.data.bufferCanvases[ i ].style.visibility = 'hidden';
    //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);
  }

  r.pathsEnabled = true;

  r.data.eleTxrCache = new ElementTextureCache( r );
  r.data.lyrTxrCache = new LayeredTextureCache( r, r.data.eleTxrCache );

  r.onUpdateEleCalcs(function invalidateTextureCaches( willDraw, eles ){
    for( var i = 0; i < eles.length; i++ ){
      var ele = eles[i];
      var rs = ele._private.rstyle;
      var de = rs.dirtyEvents;

      if( ele.isNode() && de && de.length === 1 && de['position'] ){
        // then keep cached ele texture
      } else {
        r.data.eleTxrCache.invalidateElement( ele );
      }
    }

    if( eles.length > 0 ){
      r.data.lyrTxrCache.invalidateElements( eles );
    }
  });
}

CRp.redrawHint = function( group, bool ){
  var r = this;

  switch( group ){
    case 'eles':
      r.data.canvasNeedsRedraw[ CRp.NODE ] = bool;
      break;
    case 'drag':
      r.data.canvasNeedsRedraw[ CRp.DRAG ] = bool;
      break;
    case 'select':
      r.data.canvasNeedsRedraw[ CRp.SELECT_BOX ] = bool;
      break;
  }
};

// whether to use Path2D caching for drawing
var pathsImpld = typeof Path2D !== 'undefined';

CRp.path2dEnabled = function( on ){
  if( on === undefined ){
    return this.pathsEnabled;
  }

  this.pathsEnabled = on ? true : false;
};

CRp.usePaths = function(){
  return false;
};

[
  require( './arrow-shapes' ),
  require( './drawing-elements' ),
  require( './drawing-edges' ),
  require( './drawing-images' ),
  require( './drawing-label-text' ),
  require( './drawing-nodes' ),
  require( './drawing-redraw' ),
  require( './drawing-shapes' ),
  require( './export-image' ),
  require( './node-shapes' )
].forEach( function( props ){
  util.extend( CRp, props );
} );

module.exports = CR;

},{"../../../is":86,"../../../util":104,"./arrow-shapes":67,"./drawing-edges":68,"./drawing-elements":69,"./drawing-images":70,"./drawing-label-text":71,"./drawing-nodes":72,"./drawing-redraw":73,"./drawing-shapes":74,"./ele-texture-cache":75,"./export-image":76,"./layered-texture-cache":78,"./node-shapes":79}],78:[function(require,module,exports){
'use strict';

var util = require( '../../../util' );
var math = require( '../../../math' );
var Heap = require( '../../../heap' );
var is = require( '../../../is' );
var defs = require( './texture-cache-defs' );

var defNumLayers = 1; // default number of layers to use
var minLvl = -4; // when scaling smaller than that we don't need to re-render
var maxLvl = 2; // when larger than this scale just render directly (caching is not helpful)
var maxZoom = 3.99; // beyond this zoom level, layered textures are not used
var deqRedrawThreshold = 50; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile
var refineEleDebounceTime = 50; // time to debounce sharper ele texture updates
var disableEleImgSmoothing = true; // when drawing eles on layers from an ele cache ; crisper and more performant when true
var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame
var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time
var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing
var deqFastCost = 0.9; // % of frame time to be used when >60fps
var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch
var invalidThreshold = 250; // time threshold for disabling b/c of invalidations
var maxLayerArea = 4000 * 4000; // layers can't be bigger than this
var alwaysQueue = true; // never draw all the layers in a level on a frame; draw directly until all dequeued
var useHighQualityEleTxrReqs = true; // whether to use high quality ele txr requests (generally faster and cheaper in the longterm)

var useEleTxrCaching = true; // whether to use individual ele texture caching underneath this cache

// var log = function(){ console.log.apply( console, arguments ); };

var LayeredTextureCache = function( renderer, eleTxrCache ){
  var self = this;

  var r = self.renderer = renderer;

  self.layersByLevel = {}; // e.g. 2 => [ layer1, layer2, ..., layerN ]

  self.firstGet = true;

  self.lastInvalidationTime = util.performanceNow() - 2*invalidThreshold;

  self.skipping = false;

  r.beforeRender(function( willDraw, now ){
    if( now - self.lastInvalidationTime <= invalidThreshold ){
      self.skipping = true;
    } else {
      self.skipping = false;
    }
  });

  var qSort = function(a, b){
    return b.reqs - a.reqs;
  };

  self.layersQueue = new Heap( qSort );

  self.eleTxrCache = eleTxrCache;

  self.setupEleCacheInvalidation();

  self.setupDequeueing();
};

var LTCp = LayeredTextureCache.prototype;

var layerIdPool = 0;
var MAX_INT = Math.pow(2, 53) - 1;

LTCp.makeLayer = function( bb, lvl ){
  var scale = Math.pow( 2, lvl );

  var w = Math.ceil( bb.w * scale );
  var h = Math.ceil( bb.h * scale );

  var canvas = document.createElement('canvas'); // eslint-disable-line no-undef

  canvas.width = w;
  canvas.height = h;

  var layer = {
    id: (layerIdPool = ++layerIdPool % MAX_INT ),
    bb: bb,
    level: lvl,
    width: w,
    height: h,
    canvas: canvas,
    context: canvas.getContext('2d'),
    eles: [],
    elesQueue: [],
    reqs: 0
  };

  // log('make layer %s with w %s and h %s and lvl %s', layer.id, layer.width, layer.height, layer.level);

  var cxt = layer.context;
  var dx = -layer.bb.x1;
  var dy = -layer.bb.y1;

  // do the transform on creation to save cycles (it's the same for all eles)
  cxt.scale( scale, scale );
  cxt.translate( dx, dy );

  return layer;
};

LTCp.getLayers = function( eles, pxRatio, lvl ){
  var self = this;
  var r = self.renderer;
  var cy = r.cy;
  var zoom = cy.zoom();
  var firstGet = self.firstGet;

  self.firstGet = false;

  // log('--\nget layers with %s eles', eles.length);
  //log eles.map(function(ele){ return ele.id() }) );

  if( lvl == null ){
    lvl = Math.ceil( math.log2( zoom * pxRatio ) );

    if( lvl < minLvl ){
      lvl = minLvl;
    } else if( zoom >= maxZoom || lvl > maxLvl ){
      return null;
    }
  }

  self.validateLayersElesOrdering( lvl, eles );

  var layersByLvl = self.layersByLevel;
  var scale = Math.pow( 2, lvl );
  var layers = layersByLvl[ lvl ] = layersByLvl[ lvl ] || [];
  var bb;

  var lvlComplete = self.levelIsComplete( lvl, eles );
  var tmpLayers;

  var checkTempLevels = function(){
    var canUseAsTmpLvl = function( l ){
      self.validateLayersElesOrdering( l, eles );

      if( self.levelIsComplete( l, eles ) ){
        tmpLayers = layersByLvl[l];
        return true;
      }
    };

    var checkLvls = function( dir ){
      if( tmpLayers ){ return; }

      for( var l = lvl + dir; minLvl <= l && l <= maxLvl; l += dir ){
        if( canUseAsTmpLvl(l) ){ break; }
      }
    };

    checkLvls( +1 );
    checkLvls( -1 );

    // remove the invalid layers; they will be replaced as needed later in this function
    for( var i = layers.length - 1; i >= 0; i-- ){
      var layer = layers[i];

      if( layer.invalid ){
        util.removeFromArray( layers, layer );
      }
    }
  };

  if( !lvlComplete ){
    // if the current level is incomplete, then use the closest, best quality layerset temporarily
    // and later queue the current layerset so we can get the proper quality level soon

    checkTempLevels();

  } else {
    // log('level complete, using existing layers\n--');
    return layers;
  }

  var getBb = function(){
    if( !bb ){
      bb = math.makeBoundingBox();

      for( var i = 0; i < eles.length; i++ ){
        math.updateBoundingBox( bb, eles[i].boundingBox() );
      }
    }

    return bb;
  };

  var makeLayer = function( opts ){
    opts = opts || {};

    var after = opts.after;

    getBb();

    var area = ( bb.w * scale ) * ( bb.h * scale );

    if( area > maxLayerArea ){
      return null;
    }

    var layer = self.makeLayer( bb, lvl );

    if( after != null ){
      var index = layers.indexOf( after ) + 1;

      layers.splice( index, 0, layer );
    } else if( opts.insert === undefined || opts.insert ){
      // no after specified => first layer made so put at start
      layers.unshift( layer );
    }

    // if( tmpLayers ){
      //self.queueLayer( layer );
    // }

    return layer;
  };

  if( self.skipping && !firstGet ){
    // log('skip layers');
    return null;
  }

  // log('do layers');

  var layer = null;
  var maxElesPerLayer = eles.length / defNumLayers;
  var allowLazyQueueing = alwaysQueue && !firstGet;

  for( var i = 0; i < eles.length; i++ ){
    var ele = eles[i];
    var rs = ele._private.rscratch;
    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

    // log('look at ele', ele.id());

    var existingLayer = caches[ lvl ];

    if( existingLayer ){
      // reuse layer for later eles
      // log('reuse layer for', ele.id());
      layer = existingLayer;
      continue;
    }

    if(
      !layer
      || layer.eles.length >= maxElesPerLayer
      || !math.boundingBoxInBoundingBox( layer.bb, ele.boundingBox() )
    ){
      // log('make new layer for ele %s', ele.id());

      layer = makeLayer({ insert: true, after: layer });

      // if now layer can be built then we can't use layers at this level
      if( !layer ){ return null; }

      // log('new layer with id %s', layer.id);
    }

    if( tmpLayers || allowLazyQueueing ){
      // log('queue ele %s in layer %s', ele.id(), layer.id);
      self.queueLayer( layer, ele );
    } else {
      // log('draw ele %s in layer %s', ele.id(), layer.id);
      self.drawEleInLayer( layer, ele, lvl, pxRatio );
    }

    layer.eles.push( ele );

    caches[ lvl ] = layer;
  }

  // log('--');

  if( tmpLayers ){ // then we only queued the current layerset and can't draw it yet
    return tmpLayers;
  }

  if( allowLazyQueueing ){
    // log('lazy queue level', lvl);
    return null;
  }

  return layers;
};

// a layer may want to use an ele cache of a higher level to avoid blurriness
// so the layer level might not equal the ele level
LTCp.getEleLevelForLayerLevel = function( lvl, pxRatio ){
  return lvl;
};

function imgSmoothing( context, bool ){
  if( context.imageSmoothingEnabled != null ){
    context.imageSmoothingEnabled = bool;
  } else {
    context.webkitImageSmoothingEnabled = bool;
    context.mozImageSmoothingEnabled = bool;
    context.msImageSmoothingEnabled = bool;
  }
}

LTCp.drawEleInLayer = function( layer, ele, lvl, pxRatio ){
  var self = this;
  var r = this.renderer;
  var context = layer.context;
  var bb = ele.boundingBox();

  if( bb.w === 0 || bb.h === 0 ){ return; }

  var eleCache = self.eleTxrCache;
  var reason = useHighQualityEleTxrReqs ? eleCache.reasons.highQuality : undefined;

  lvl = self.getEleLevelForLayerLevel( lvl, pxRatio );

  var cache = useEleTxrCaching ? eleCache.getElement( ele, bb, null, lvl, reason ) : null;

  if( cache ){
    if( disableEleImgSmoothing ){ imgSmoothing( context, false ); }

    context.drawImage( cache.texture.canvas, cache.x, 0, cache.width, cache.height, bb.x1, bb.y1, bb.w, bb.h );

    if( disableEleImgSmoothing ){ imgSmoothing( context, true ); }
  } else { // if the element is not cacheable, then draw directly
    r.drawElement( context, ele );
  }
};

LTCp.levelIsComplete = function( lvl, eles ){
  var self = this;
  var layers = self.layersByLevel[ lvl ];

  if( !layers || layers.length === 0 ){ return false; }

  var numElesInLayers = 0;

  for( var i = 0; i < layers.length; i++ ){
    var layer = layers[i];

    // if there are any eles needed to be drawn yet, the level is not complete
    if( layer.reqs > 0 ){ return false; }

    // if the layer is invalid, the level is not complete
    if( layer.invalid ){ return false; }

    numElesInLayers += layer.eles.length;
  }

  // we should have exactly the number of eles passed in to be complete
  if( numElesInLayers !== eles.length ){ return false; }

  return true;
};

LTCp.validateLayersElesOrdering = function( lvl, eles ){
  var layers = this.layersByLevel[ lvl ];

  if( !layers ){ return; }

  // if in a layer the eles are not in the same order, then the layer is invalid
  // (i.e. there is an ele in between the eles in the layer)

  for( var i = 0; i < layers.length; i++ ){
    var layer = layers[i];
    var offset = -1;

    // find the offset
    for( var j = 0; j < eles.length; j++ ){
      if( layer.eles[0] === eles[j] ){
        offset = j;
        break;
      }
    }

    if( offset < 0 ){
      // then the layer has nonexistant elements and is invalid
      this.invalidateLayer( layer );
      continue;
    }

    // the eles in the layer must be in the same continuous order, else the layer is invalid

    var o = offset;

    for( var j = 0; j < layer.eles.length; j++ ){
      if( layer.eles[j] !== eles[o+j] ){
        // log('invalidate based on ordering', layer.id);

        this.invalidateLayer( layer );
        break;
      }
    }
  }
};

LTCp.updateElementsInLayers = function( eles, update ){
  var self = this;
  var isEles = is.element( eles[0] );

  // collect udpated elements (cascaded from the layers) and update each
  // layer itself along the way
  for( var i = 0; i < eles.length; i++ ){
    var req = isEles ? null : eles[i];
    var ele = isEles ? eles[i] : eles[i].ele;
    var rs = ele._private.rscratch;
    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

    for( var l = minLvl; l <= maxLvl; l++ ){
      var layer = caches[l];

      if( !layer ){ continue; }

      // if update is a request from the ele cache, then it affects only
      // the matching level
      if( req && self.getEleLevelForLayerLevel( layer.level ) !== req.level ){
        continue;
      }

      update( layer, ele, req );
    }
  }
};

LTCp.haveLayers = function(){
  var self = this;
  var haveLayers = false;

  for( var l = minLvl; l <= maxLvl; l++ ){
    var layers = self.layersByLevel[l];

    if( layers && layers.length > 0 ){
      haveLayers = true;
      break;
    }
  }

  return haveLayers;
};

LTCp.invalidateElements = function( eles ){
  var self = this;

  self.lastInvalidationTime = util.performanceNow();

  // log('update invalidate layer time from eles');

  if( eles.length === 0 || !self.haveLayers() ){ return; }

  self.updateElementsInLayers( eles, function invalAssocLayers( layer, ele, req ){
    self.invalidateLayer( layer );
  } );
};

LTCp.invalidateLayer = function( layer ){
  // log('update invalidate layer time');

  this.lastInvalidationTime = util.performanceNow();

  if( layer.invalid ){ return; } // save cycles

  var lvl = layer.level;
  var eles = layer.eles;
  var layers = this.layersByLevel[ lvl ];

   // log('invalidate layer', layer.id );

  util.removeFromArray( layers, layer );
  // layer.eles = [];

  layer.elesQueue = [];

  layer.invalid = true;

  if( layer.replacement ){
    layer.replacement.invalid = true;
  }

  for( var i = 0; i < eles.length; i++ ){
    var caches = eles[i]._private.rscratch.imgLayerCaches;

    if( caches ){
      caches[ lvl ] = null;
    }
  }
};

LTCp.refineElementTextures = function( eles ){
  var self = this;

  // log('refine', eles.length);

  self.updateElementsInLayers( eles, function refineEachEle( layer, ele, req ){
    var rLyr = layer.replacement;

    if( !rLyr ){
      rLyr = layer.replacement = self.makeLayer( layer.bb, layer.level );
      rLyr.replaces = layer;
      rLyr.eles = layer.eles;

       // log('make replacement layer %s for %s with level %s', rLyr.id, layer.id, rLyr.level);
    }

    if( !rLyr.reqs ){
      for( var i = 0; i < rLyr.eles.length; i++ ){
        self.queueLayer( rLyr, rLyr.eles[i] );
      }

       // log('queue replacement layer refinement', rLyr.id);
    }
  } );
};

LTCp.setupEleCacheInvalidation = function(){
  var self = this;
  var eleDeqs = [];

  if( !useEleTxrCaching ){ return; }

  var updatedElesInLayers = util.debounce( function(){
    self.refineElementTextures( eleDeqs );

    eleDeqs = [];
  }, refineEleDebounceTime );

  self.eleTxrCache.onDequeue(function( reqs ){
    for( var i = 0; i < reqs.length; i++ ){
      eleDeqs.push( reqs[i] );
    }

    updatedElesInLayers();
  });
};

LTCp.queueLayer = function( layer, ele ){
  var self = this;
  var q = self.layersQueue;
  var elesQ = layer.elesQueue;
  var hasId = elesQ.hasId = elesQ.hasId || {};

  // if a layer is going to be replaced, queuing is a waste of time
  if( layer.replacement ){ return; }

  if( ele ){
    if( hasId[ ele.id() ] ){
      return;
    }

    elesQ.push( ele );
    hasId[ ele.id() ] = true;
  }

  if( layer.reqs ){
    layer.reqs++;

    q.updateItem( layer );
  } else {
    layer.reqs = 1;

    q.push( layer );
  }
};

LTCp.dequeue = function( pxRatio ){
  var self = this;
  var q = self.layersQueue;
  var deqd = [];
  var eleDeqs = 0;

  while( eleDeqs < maxDeqSize ){
    if( q.size() === 0 ){ break; }

    var layer = q.peek();

    // if a layer has been or will be replaced, then don't waste time with it
    if( layer.replacement ){
       // log('layer %s in queue skipped b/c it already has a replacement', layer.id);
      q.pop();
      continue;
    }

    // if this is a replacement layer that has been superceded, then forget it
    if( layer.replaces && layer !== layer.replaces.replacement ){
       // log('layer is no longer the most uptodate replacement; dequeued', layer.id)
      q.pop();
      continue;
    }

    if( layer.invalid ){
       // log('replacement layer %s is invalid; dequeued', layer.id);
      q.pop();
      continue;
    }

    var ele = layer.elesQueue.shift();

    if( ele ){
       // log('dequeue layer %s', layer.id);

      self.drawEleInLayer( layer, ele, layer.level, pxRatio );

      eleDeqs++;
    }

    if( deqd.length === 0 ){
      // we need only one entry in deqd to queue redrawing etc
      deqd.push( true );
    }

    // if the layer has all its eles done, then remove from the queue
    if( layer.elesQueue.length === 0 ){
      q.pop();

      layer.reqs = 0;

       // log('dequeue of layer %s complete', layer.id);

      // when a replacement layer is dequeued, it replaces the old layer in the level
      if( layer.replaces ){
        self.applyLayerReplacement( layer );
      }

      self.requestRedraw();
    }
  }

  return deqd;
};

LTCp.applyLayerReplacement = function( layer ){
  var self = this;
  var layersInLevel = self.layersByLevel[ layer.level ];
  var replaced = layer.replaces;
  var index = layersInLevel.indexOf( replaced );

  // if the replaced layer is not in the active list for the level, then replacing
  // refs would be a mistake (i.e. overwriting the true active layer)
  if( index < 0 || replaced.invalid ){
     // log('replacement layer would have no effect', layer.id);
    return;
  }

  layersInLevel[ index ] = layer; // replace level ref

  // replace refs in eles
  for( var i = 0; i < layer.eles.length; i++ ){
    var _p = layer.eles[i]._private;
    var cache = _p.imgLayerCaches = _p.imgLayerCaches || {};

    if( cache ){
      cache[ layer.level ] = layer;
    }
  }

   // log('apply replacement layer %s over %s', layer.id, replaced.id);

  self.requestRedraw();
};

LTCp.requestRedraw = util.debounce( function(){
  var r = this.renderer;

  r.redrawHint( 'eles', true );
  r.redrawHint( 'drag', true );
  r.redraw();
}, 100 );

LTCp.setupDequeueing = defs.setupDequeueing({
  deqRedrawThreshold: deqRedrawThreshold,
  deqCost: deqCost,
  deqAvgCost: deqAvgCost,
  deqNoDrawCost: deqNoDrawCost,
  deqFastCost: deqFastCost,
  deq: function( self, pxRatio ){
    return self.dequeue( pxRatio );
  },
  onDeqd: util.noop,
  shouldRedraw: util.trueify,
  priority: function( self ){
    return self.renderer.beforeRenderPriorities.lyrTxrDeq;
  }
});

module.exports = LayeredTextureCache;

},{"../../../heap":84,"../../../is":86,"../../../math":88,"../../../util":104,"./texture-cache-defs":80}],79:[function(require,module,exports){
'use strict';

var CRp = {};

CRp.nodeShapeImpl = function( name, context, centerX, centerY, width, height, points ){
  switch( name ){
    case 'ellipse':
      return this.drawEllipsePath( context, centerX, centerY, width, height );
    case 'polygon':
      return this.drawPolygonPath( context, centerX, centerY, width, height, points );
    case 'roundrectangle':
      return this.drawRoundRectanglePath( context, centerX, centerY, width, height );
  }
};

module.exports = CRp;

},{}],80:[function(require,module,exports){
'use strict';

var util = require( '../../../util' );

var fullFpsTime = 1000/60; // assume 60 frames per second

module.exports = {
  setupDequeueing: function( opts ){
    return function setupDequeueingImpl(){
      var self = this;
      var r = this.renderer;

      if( self.dequeueingSetup ){
        return;
      } else {
        self.dequeueingSetup = true;
      }

      var queueRedraw = util.debounce( function(){
        r.redrawHint( 'eles', true );
        r.redrawHint( 'drag', true );

        r.redraw();
      }, opts.deqRedrawThreshold );

      var dequeue = function( willDraw, frameStartTime ){
        var startTime = util.performanceNow();
        var avgRenderTime = r.averageRedrawTime;
        var renderTime = r.lastRedrawTime;
        var deqd = [];
        var extent = r.cy.extent();
        var pixelRatio = r.getPixelRatio();

        while( true ){
          var now = util.performanceNow();
          var duration = now - startTime;
          var frameDuration = now - frameStartTime;

          if( renderTime < fullFpsTime ){
            // if we're rendering faster than the ideal fps, then do dequeueing
            // during all of the remaining frame time

            var timeAvailable = fullFpsTime - ( willDraw ? avgRenderTime : 0 );

            if( frameDuration >= opts.deqFastCost * timeAvailable ){
              break;
            }
          } else {
            if( willDraw ){
              if(
                   duration >= opts.deqCost * renderTime
                || duration >= opts.deqAvgCost * avgRenderTime
              ){
                break;
              }
            } else if( frameDuration >= opts.deqNoDrawCost * fullFpsTime ){
              break;
            }
          }

          var thisDeqd = opts.deq( self, pixelRatio, extent );

          if( thisDeqd.length > 0 ){
            for( var i = 0; i < thisDeqd.length; i++ ){
              deqd.push( thisDeqd[i] );
            }
          } else {
            break;
          }
        }

        // callbacks on dequeue
        if( deqd.length > 0 ){
          opts.onDeqd( self, deqd );

          if( !willDraw && opts.shouldRedraw( self, deqd, pixelRatio, extent ) ){
            queueRedraw();
          }
        }
      };

      var priority = opts.priority || util.noop;

      r.beforeRender( dequeue, priority( self ) );
    };
  }
};

},{"../../../util":104}],81:[function(require,module,exports){
'use strict';

module.exports = [
  { name: 'null', impl: require( './null' ) },
  { name: 'base', impl: require( './base' ) },
  { name: 'canvas', impl: require( './canvas' ) }
];

},{"./base":63,"./canvas":77,"./null":82}],82:[function(require,module,exports){
'use strict';

function NullRenderer( options ){
  this.options = options;
  this.notifications = 0; // for testing
}

var noop = function(){};

NullRenderer.prototype = {
  recalculateRenderedStyle: noop,
  notify: function(){ this.notifications++; },
  init: noop
};

module.exports = NullRenderer;

},{}],83:[function(require,module,exports){
/*! Weaver licensed under MIT (https://tldrlegal.com/license/mit-license), copyright Max Franz */

'use strict';

var is = require('./is');
var util = require('./util');
var Thread = require('./thread');
var Promise = require('./promise');
var define = require('./define');

var Fabric = function( N ){
  if( !(this instanceof Fabric) ){
    return new Fabric( N );
  }

  this._private = {
    pass: []
  };

  var defN = 4;

  if( is.number(N) ){
    // then use the specified number of threads
  } if( typeof navigator !== 'undefined' && navigator.hardwareConcurrency != null ){
    N = navigator.hardwareConcurrency;
  } else {
    try{
      N = require('os').cpus().length;
    } catch( err ){
      N = defN;
    }
  } // TODO could use an estimation here but would the additional expense be worth it?

  for( var i = 0; i < N; i++ ){
    this[i] = new Thread();
  }

  this.length = N;
};

var fabfn = Fabric.prototype; // short alias

util.extend(fabfn, {

  instanceString: function(){ return 'fabric'; },

  // require fn in all threads
  require: function( fn, as ){
    for( var i = 0; i < this.length; i++ ){
      var thread = this[i];

      thread.require( fn, as );
    }

    return this;
  },

  // get a random thread
  random: function(){
    var i = Math.round( (this.length - 1) * Math.random() );
    var thread = this[i];

    return thread;
  },

  // run on random thread
  run: function( fn ){
    var pass = this._private.pass.shift();

    return this.random().pass( pass ).run( fn );
  },

  // sends a random thread a message
  message: function( m ){
    return this.random().message( m );
  },

  // send all threads a message
  broadcast: function( m ){
    for( var i = 0; i < this.length; i++ ){
      var thread = this[i];

      thread.message( m );
    }

    return this; // chaining
  },

  // stop all threads
  stop: function(){
    for( var i = 0; i < this.length; i++ ){
      var thread = this[i];

      thread.stop();
    }

    return this; // chaining
  },

  // pass data to be used with .spread() etc.
  pass: function( data ){
    var pass = this._private.pass;

    if( is.array(data) ){
      pass.push( data );
    } else {
      throw 'Only arrays may be used with fabric.pass()';
    }

    return this; // chaining
  },

  spreadSize: function(){
    var subsize =  Math.ceil( this._private.pass[0].length / this.length );

    subsize = Math.max( 1, subsize ); // don't pass less than one ele to each thread

    return subsize;
  },

  // split the data into slices to spread the data equally among threads
  spread: function( fn ){
    var self = this;
    var _p = self._private;
    var subsize = self.spreadSize(); // number of pass eles to handle in each thread
    var pass = _p.pass.shift().concat([]); // keep a copy
    var runPs = [];

    for( var i = 0; i < this.length; i++ ){
      var thread = this[i];
      var slice = pass.splice( 0, subsize );

      var runP = thread.pass( slice ).run( fn );

      runPs.push( runP );

      var doneEarly = pass.length === 0;
      if( doneEarly ){ break; }
    }

    return Promise.all( runPs ).then(function( thens ){
      var postpass = [];
      var p = 0;

      // fill postpass with the total result joined from all threads
      for( var i = 0; i < thens.length; i++ ){
        var then = thens[i]; // array result from thread i

        for( var j = 0; j < then.length; j++ ){
          var t = then[j]; // array element

          postpass[ p++ ] = t;
        }
      }

      return postpass;
    });
  },

  // parallel version of array.map()
  map: function( fn ){
    var self = this;

    self.require( fn, '_$_$_fabmap' );

    return self.spread(function( split ){
      var mapped = [];
      var origResolve = resolve; // jshint ignore:line

      resolve = function( val ){ // jshint ignore:line
        mapped.push( val );
      };

      for( var i = 0; i < split.length; i++ ){
        var oldLen = mapped.length;
        var ret = _$_$_fabmap( split[i] ); // jshint ignore:line
        var nothingInsdByResolve = oldLen === mapped.length;

        if( nothingInsdByResolve ){
          mapped.push( ret );
        }
      }

      resolve = origResolve; // jshint ignore:line

      return mapped;
    });

  },

  // parallel version of array.filter()
  filter: function( fn ){
    var _p = this._private;
    var pass = _p.pass[0];

    return this.map( fn ).then(function( include ){
      var ret = [];

      for( var i = 0; i < pass.length; i++ ){
        var datum = pass[i];
        var incDatum = include[i];

        if( incDatum ){
          ret.push( datum );
        }
      }

      return ret;
    });
  },

  // sorts the passed array using a divide and conquer strategy
  sort: function( cmp ){
    var self = this;
    var P = this._private.pass[0].length;
    var subsize = this.spreadSize();

    cmp = cmp || function( a, b ){ // default comparison function
      if( a < b ){
        return -1;
      } else if( a > b ){
        return 1;
      }

      return 0;
    };

    self.require( cmp, '_$_$_cmp' );

    return self.spread(function( split ){ // sort each split normally
      var sortedSplit = split.sort( _$_$_cmp ); // jshint ignore:line
      resolve( sortedSplit ); // jshint ignore:line

    }).then(function( joined ){
      // do all the merging in the main thread to minimise data transfer

      // TODO could do merging in separate threads but would incur add'l cost of data transfer
      // for each level of the merge

      var merge = function( i, j, max ){
        // don't overflow array
        j = Math.min( j, P );
        max = Math.min( max, P );

        // left and right sides of merge
        var l = i;
        var r = j;

        var sorted = [];

        for( var k = l; k < max; k++ ){

          var eleI = joined[i];
          var eleJ = joined[j];

          if( i < r && ( j >= max || cmp(eleI, eleJ) <= 0 ) ){
            sorted.push( eleI );
            i++;
          } else {
            sorted.push( eleJ );
            j++;
          }

        }

        // in the array proper, put the sorted values
        for( var k = 0; k < sorted.length; k++ ){ // kth sorted item
          var index = l + k;

          joined[ index ] = sorted[k];
        }
      };

      for( var splitL = subsize; splitL < P; splitL *= 2 ){ // merge until array is "split" as 1

        for( var i = 0; i < P; i += 2*splitL ){
          merge( i, i + splitL, i + 2*splitL );
        }

      }

      return joined;
    });
  }


});

var defineRandomPasser = function( opts ){
  opts = opts || {};

  return function( fn, arg1 ){
    var pass = this._private.pass.shift();

    return this.random().pass( pass )[ opts.threadFn ]( fn, arg1 );
  };
};

util.extend(fabfn, {
  randomMap: defineRandomPasser({ threadFn: 'map' }),

  reduce: defineRandomPasser({ threadFn: 'reduce' }),

  reduceRight: defineRandomPasser({ threadFn: 'reduceRight' })
});

// aliases
var fn = fabfn;
fn.promise = fn.run;
fn.terminate = fn.halt = fn.stop;
fn.include = fn.require;

// pull in event apis
util.extend(fabfn, {
  on: define.on(),
  one: define.on({ unbindSelfOnTrigger: true }),
  off: define.off(),
  trigger: define.trigger()
});

define.eventAliasesOn( fabfn );

module.exports = Fabric;

},{"./define":47,"./is":86,"./promise":89,"./thread":102,"./util":104,"os":115}],84:[function(require,module,exports){
/*!
Ported by Xueqiao Xu <xueqiaoxu@gmail.com>;

PSF LICENSE AGREEMENT FOR PYTHON 2.7.2

1. This LICENSE AGREEMENT is between the Python Software Foundation (“PSF”), and the Individual or Organization (“Licensee”) accessing and otherwise using Python 2.7.2 software in source or binary form and its associated documentation.
2. Subject to the terms and conditions of this License Agreement, PSF hereby grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use Python 2.7.2 alone or in any derivative version, provided, however, that PSF’s License Agreement and PSF’s notice of copyright, i.e., “Copyright © 2001-2012 Python Software Foundation; All Rights Reserved” are retained in Python 2.7.2 alone or in any derivative version prepared by Licensee.
3. In the event Licensee prepares a derivative work that is based on or incorporates Python 2.7.2 or any part thereof, and wants to make the derivative work available to others as provided herein, then Licensee hereby agrees to include in any such work a brief summary of the changes made to Python 2.7.2.
4. PSF is making Python 2.7.2 available to Licensee on an “AS IS” basis. PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 2.7.2 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 2.7.2 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 2.7.2, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
6. This License Agreement will automatically terminate upon a material breach of its terms and conditions.
7. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between PSF and Licensee. This License Agreement does not grant permission to use PSF trademarks or trade name in a trademark sense to endorse or promote products or services of Licensee, or any third party.
8. By copying, installing or otherwise using Python 2.7.2, Licensee agrees to be bound by the terms and conditions of this License Agreement.
*/

'use strict';
// Generated by CoffeeScript 1.8.0

var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

floor = Math.floor, min = Math.min;


/*
Default comparison function to be used
 */

defaultCmp = function( x, y ){
  if( x < y ){
    return -1;
  }
  if( x > y ){
    return 1;
  }
  return 0;
};


/*
Insert item x in list a, and keep it sorted assuming a is sorted.

If x is already in a, insert it to the right of the rightmost x.

Optional args lo (default 0) and hi (default a.length) bound the slice
of a to be searched.
 */

insort = function( a, x, lo, hi, cmp ){
  var mid;
  if( lo == null ){
    lo = 0;
  }
  if( cmp == null ){
    cmp = defaultCmp;
  }
  if( lo < 0 ){
    throw new Error( 'lo must be non-negative' );
  }
  if( hi == null ){
    hi = a.length;
  }
  while( lo < hi ){
    mid = floor( (lo + hi) / 2 );
    if( cmp( x, a[ mid ] ) < 0 ){
      hi = mid;
    } else {
      lo = mid + 1;
    }
  }
  return ([].splice.apply( a, [ lo, lo - lo ].concat( x ) ), x);
};


/*
Push item onto heap, maintaining the heap invariant.
 */

heappush = function( array, item, cmp ){
  if( cmp == null ){
    cmp = defaultCmp;
  }
  array.push( item );
  return _siftdown( array, 0, array.length - 1, cmp );
};


/*
Pop the smallest item off the heap, maintaining the heap invariant.
 */

heappop = function( array, cmp ){
  var lastelt, returnitem;
  if( cmp == null ){
    cmp = defaultCmp;
  }
  lastelt = array.pop();
  if( array.length ){
    returnitem = array[0];
    array[0] = lastelt;
    _siftup( array, 0, cmp );
  } else {
    returnitem = lastelt;
  }
  return returnitem;
};


/*
Pop and return the current smallest value, and add the new item.

This is more efficient than heappop() followed by heappush(), and can be
more appropriate when using a fixed size heap. Note that the value
returned may be larger than item! That constrains reasonable use of
this routine unless written as part of a conditional replacement:
    if item > array[0]
      item = heapreplace(array, item)
 */

heapreplace = function( array, item, cmp ){
  var returnitem;
  if( cmp == null ){
    cmp = defaultCmp;
  }
  returnitem = array[0];
  array[0] = item;
  _siftup( array, 0, cmp );
  return returnitem;
};


/*
Fast version of a heappush followed by a heappop.
 */

heappushpop = function( array, item, cmp ){
  var _ref;
  if( cmp == null ){
    cmp = defaultCmp;
  }
  if( array.length && cmp( array[0], item ) < 0 ){
    _ref = [ array[0], item ], item = _ref[0], array[0] = _ref[1];
    _siftup( array, 0, cmp );
  }
  return item;
};


/*
Transform list into a heap, in-place, in O(array.length) time.
 */

heapify = function( array, cmp ){
  var i, _i, _j, _len, _ref, _ref1, _results, _results1;
  if( cmp == null ){
    cmp = defaultCmp;
  }
  _ref1 = (function(){
    _results1 = [];
    for( var _j = 0, _ref = floor( array.length / 2 ); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j-- ){ _results1.push( _j ); }
    return _results1;
  }).apply( this ).reverse();
  _results = [];
  for( _i = 0, _len = _ref1.length; _i < _len; _i++ ){
    i = _ref1[ _i ];
    _results.push( _siftup( array, i, cmp ) );
  }
  return _results;
};


/*
Update the position of the given item in the heap.
This function should be called every time the item is being modified.
 */

updateItem = function( array, item, cmp ){
  var pos;
  if( cmp == null ){
    cmp = defaultCmp;
  }
  pos = array.indexOf( item );
  if( pos === -1 ){
    return;
  }
  _siftdown( array, 0, pos, cmp );
  return _siftup( array, pos, cmp );
};


/*
Find the n largest elements in a dataset.
 */

nlargest = function( array, n, cmp ){
  var elem, result, _i, _len, _ref;
  if( cmp == null ){
    cmp = defaultCmp;
  }
  result = array.slice( 0, n );
  if( !result.length ){
    return result;
  }
  heapify( result, cmp );
  _ref = array.slice( n );
  for( _i = 0, _len = _ref.length; _i < _len; _i++ ){
    elem = _ref[ _i ];
    heappushpop( result, elem, cmp );
  }
  return result.sort( cmp ).reverse();
};


/*
Find the n smallest elements in a dataset.
 */

nsmallest = function( array, n, cmp ){
  var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
  if( cmp == null ){
    cmp = defaultCmp;
  }
  if( n * 10 <= array.length ){
    result = array.slice( 0, n ).sort( cmp );
    if( !result.length ){
      return result;
    }
    los = result[ result.length - 1];
    _ref = array.slice( n );
    for( _i = 0, _len = _ref.length; _i < _len; _i++ ){
      elem = _ref[ _i ];
      if( cmp( elem, los ) < 0 ){
        insort( result, elem, 0, null, cmp );
        result.pop();
        los = result[ result.length - 1];
      }
    }
    return result;
  }
  heapify( array, cmp );
  _results = [];
  for( i = _j = 0, _ref1 = min( n, array.length ); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j ){
    _results.push( heappop( array, cmp ) );
  }
  return _results;
};

_siftdown = function( array, startpos, pos, cmp ){
  var newitem, parent, parentpos;
  if( cmp == null ){
    cmp = defaultCmp;
  }
  newitem = array[ pos ];
  while( pos > startpos ){
    parentpos = (pos - 1) >> 1;
    parent = array[ parentpos ];
    if( cmp( newitem, parent ) < 0 ){
      array[ pos ] = parent;
      pos = parentpos;
      continue;
    }
    break;
  }
  return array[ pos ] = newitem;
};

_siftup = function( array, pos, cmp ){
  var childpos, endpos, newitem, rightpos, startpos;
  if( cmp == null ){
    cmp = defaultCmp;
  }
  endpos = array.length;
  startpos = pos;
  newitem = array[ pos ];
  childpos = 2 * pos + 1;
  while( childpos < endpos ){
    rightpos = childpos + 1;
    if( rightpos < endpos && !(cmp( array[ childpos ], array[ rightpos ] ) < 0) ){
      childpos = rightpos;
    }
    array[ pos ] = array[ childpos ];
    pos = childpos;
    childpos = 2 * pos + 1;
  }
  array[ pos ] = newitem;
  return _siftdown( array, startpos, pos, cmp );
};

Heap = (function(){
  Heap.push = heappush;

  Heap.pop = heappop;

  Heap.replace = heapreplace;

  Heap.pushpop = heappushpop;

  Heap.heapify = heapify;

  Heap.updateItem = updateItem;

  Heap.nlargest = nlargest;

  Heap.nsmallest = nsmallest;

  function Heap( cmp ){
    this.cmp = cmp != null ? cmp : defaultCmp;
    this.nodes = [];
  }

  Heap.prototype.push = function( x ){
    return heappush( this.nodes, x, this.cmp );
  };

  Heap.prototype.pop = function(){
    return heappop( this.nodes, this.cmp );
  };

  Heap.prototype.peek = function(){
    return this.nodes[0];
  };

  Heap.prototype.contains = function( x ){
    return this.nodes.indexOf( x ) !== -1;
  };

  Heap.prototype.replace = function( x ){
    return heapreplace( this.nodes, x, this.cmp );
  };

  Heap.prototype.pushpop = function( x ){
    return heappushpop( this.nodes, x, this.cmp );
  };

  Heap.prototype.heapify = function(){
    return heapify( this.nodes, this.cmp );
  };

  Heap.prototype.updateItem = function( x ){
    return updateItem( this.nodes, x, this.cmp );
  };

  Heap.prototype.clear = function(){
    return this.nodes = [];
  };

  Heap.prototype.empty = function(){
    return this.nodes.length === 0;
  };

  Heap.prototype.size = function(){
    return this.nodes.length;
  };

  Heap.prototype.clone = function(){
    var heap;
    heap = new Heap();
    heap.nodes = this.nodes.slice( 0 );
    return heap;
  };

  Heap.prototype.toArray = function(){
    return this.nodes.slice( 0 );
  };

  Heap.prototype.insert = Heap.prototype.push;

  Heap.prototype.top = Heap.prototype.peek;

  Heap.prototype.front = Heap.prototype.peek;

  Heap.prototype.has = Heap.prototype.contains;

  Heap.prototype.copy = Heap.prototype.clone;

  return Heap;

})();

module.exports = Heap;

},{}],85:[function(require,module,exports){
'use strict';

require('./-preamble');

var window = require( './window' );
var is = require( './is' );
var Core = require( './core' );
var extension = require( './extension' );
var registerJquery = require( './jquery-plugin' );
var Stylesheet = require( './stylesheet' );
var Thread = require( './thread' );
var Fabric = require( './fabric' );

var baseNodeShapes = require('./extensions/renderer/base/node-shapes').nodeShapes;
var math = require('./math');
var styleProperties = require('./style/properties');
var baseArrowShapes = require('./extensions/renderer/base/arrow-shapes').arrowShapes;
var sbgn = require( './sbgn' );

var cytoscape = function( options ){ // jshint ignore:line
  // if no options specified, use default
  if( options === undefined ){
    options = {};
  }

  // create instance
  if( is.plainObject( options ) ){
    return new Core( options );
  }

  // allow for registration of extensions
  else if( is.string( options ) ){
    return extension.apply( extension, arguments );
  }
};

// replaced by build system
cytoscape.version = require('./version.json');

// try to register w/ jquery
if( window && window.jQuery ){
  registerJquery( window.jQuery, cytoscape );
}

// expose register api
cytoscape.registerJquery = function( jQuery ){
  registerJquery( jQuery, cytoscape );
};

// expose public apis (mostly for extensions)
cytoscape.stylesheet = cytoscape.Stylesheet = Stylesheet;
cytoscape.thread = cytoscape.Thread = Thread;
cytoscape.fabric = cytoscape.Fabric = Fabric;

// expose these api's for sbgnviz
cytoscape.baseNodeShapes = baseNodeShapes;
cytoscape.math = math;
cytoscape.styleProperties = styleProperties;
cytoscape.baseArrowShapes = baseArrowShapes;
cytoscape.sbgn = sbgn;

module.exports = cytoscape;
},{"./-preamble":4,"./core":40,"./extension":49,"./extensions/renderer/base/arrow-shapes":60,"./extensions/renderer/base/node-shapes":65,"./fabric":83,"./is":86,"./jquery-plugin":87,"./math":88,"./sbgn":90,"./style/properties":99,"./stylesheet":101,"./thread":102,"./version.json":110,"./window":111}],86:[function(require,module,exports){
'use strict';

/*global HTMLElement DocumentTouch */

var window = require( './window' );
var navigator = window ? window.navigator : null;
var document = window ? window.document : null;

var typeofstr = typeof '';
var typeofobj = typeof {};
var typeoffn = typeof function(){};
var typeofhtmlele = typeof HTMLElement;

var instanceStr = function( obj ){
  return obj && obj.instanceString && is.fn( obj.instanceString ) ? obj.instanceString() : null;
};

var is = {
  defined: function( obj ){
    return obj != null; // not undefined or null
  },

  string: function( obj ){
    return obj != null && typeof obj == typeofstr;
  },

  fn: function( obj ){
    return obj != null && typeof obj === typeoffn;
  },

  array: function( obj ){
    return Array.isArray ? Array.isArray( obj ) : obj != null && obj instanceof Array;
  },

  plainObject: function( obj ){
    return obj != null && typeof obj === typeofobj && !is.array( obj ) && obj.constructor === Object;
  },

  object: function( obj ){
    return obj != null && typeof obj === typeofobj;
  },

  number: function( obj ){
    return obj != null && typeof obj === typeof 1 && !isNaN( obj );
  },

  integer: function( obj ){
    return is.number( obj ) && Math.floor( obj ) === obj;
  },

  bool: function( obj ){
    return obj != null && typeof obj === typeof true;
  },

  htmlElement: function( obj ){
    if( 'undefined' === typeofhtmlele ){
      return undefined;
    } else {
      return null != obj && obj instanceof HTMLElement;
    }
  },

  elementOrCollection: function( obj ){
    return is.element( obj ) || is.collection( obj );
  },

  element: function( obj ){
    return instanceStr( obj ) === 'collection' && obj._private.single;
  },

  collection: function( obj ){
    return instanceStr( obj ) === 'collection' && !obj._private.single;
  },

  core: function( obj ){
    return instanceStr( obj ) === 'core';
  },

  style: function( obj ){
    return instanceStr( obj ) === 'style';
  },

  stylesheet: function( obj ){
    return instanceStr( obj ) === 'stylesheet';
  },

  event: function( obj ){
    return instanceStr( obj ) === 'event';
  },

  thread: function( obj ){
    return instanceStr( obj ) === 'thread';
  },

  fabric: function( obj ){
    return instanceStr( obj ) === 'fabric';
  },

  emptyString: function( obj ){
    if( obj === undefined || obj === null ){ // null is empty
      return true;
    } else if( obj === '' || obj.match( /^\s+$/ ) ){
      return true; // empty string is empty
    }

    return false; // otherwise, we don't know what we've got
  },

  nonemptyString: function( obj ){
    if( obj && is.string( obj ) && obj !== '' && !obj.match( /^\s+$/ ) ){
      return true;
    }

    return false;
  },

  domElement: function( obj ){
    if( typeof HTMLElement === 'undefined' ){
      return false; // we're not in a browser so it doesn't matter
    } else {
      return obj instanceof HTMLElement;
    }
  },

  boundingBox: function( obj ){
    return is.plainObject( obj ) &&
      is.number( obj.x1 ) && is.number( obj.x2 ) &&
      is.number( obj.y1 ) && is.number( obj.y2 )
    ;
  },

  promise: function( obj ){
    return is.object( obj ) && is.fn( obj.then );
  },

  touch: function(){
    return window && ( ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch );
  },

  gecko: function(){
    return window && ( typeof InstallTrigger !== 'undefined' || ('MozAppearance' in document.documentElement.style) );
  },

  webkit: function(){
    return window && ( typeof webkitURL !== 'undefined' || ('WebkitAppearance' in document.documentElement.style) );
  },

  chromium: function(){
    return window && ( typeof chrome !== 'undefined' );
  },

  khtml: function(){
    return navigator && navigator.vendor.match( /kde/i ); // probably a better way to detect this...
  },

  khtmlEtc: function(){
    return is.khtml() || is.webkit() || is.chromium();
  },

  ms: function(){
    return navigator && navigator.userAgent.match( /msie|trident|edge/i ); // probably a better way to detect this...
  },

  windows: function(){
    return navigator && navigator.appVersion.match( /Win/i );
  },

  mac: function(){
    return navigator && navigator.appVersion.match( /Mac/i );
  },

  linux: function(){
    return navigator && navigator.appVersion.match( /Linux/i );
  },

  unix: function(){
    return navigator && navigator.appVersion.match( /X11/i );
  }
};

module.exports = is;

},{"./window":111}],87:[function(require,module,exports){
'use strict';

var is = require( './is' );

var cyReg = function( $ele ){
  var d = $ele[0]._cyreg = $ele[0]._cyreg || {};

  return d;
};

var registerJquery = function( $, cytoscape ){
  if( !$ ){ return; } // no jquery => don't need this

  if( $.fn.cytoscape ){ return; } // already registered

  // allow calls on a jQuery selector by proxying calls to $.cytoscape
  // e.g. $("#foo").cytoscape(options) => $.cytoscape(options) on #foo
  $.fn.cytoscape = function( opts ){
    var $this = $( this );

    // get object
    if( opts === 'get' ){
      return cyReg( $this ).cy;
    }

    // bind to ready
    else if( is.fn( opts ) ){

      var ready = opts;
      var cy = cyReg( $this ).cy;

      if( cy && cy.isReady() ){ // already ready so just trigger now
        cy.trigger( 'ready', [], ready );

      } else { // not yet ready, so add to readies list
        var data = cyReg( $this );
        var readies = data.readies = data.readies || [];

        readies.push( ready );
      }

    }

    // proxy to create instance
    else if( is.plainObject( opts ) ){
      return $this.each( function(){
        var options = $.extend( {}, opts, {
          container: $( this )[0]
        } );

        cytoscape( options );
      } );
    }
  };

  // allow access to the global cytoscape object under jquery for legacy reasons
  $.cytoscape = cytoscape;

  // use short alias (cy) if not already defined
  if( $.fn.cy == null && $.cy == null ){
    $.fn.cy = $.fn.cytoscape;
    $.cy = $.cytoscape;
  }
};

module.exports = registerJquery;

},{"./is":86}],88:[function(require,module,exports){
'use strict';

var math = {};

math.arePositionsSame = function( p1, p2 ){
  return p1.x === p2.x && p1.y === p2.y;
};

math.copyPosition = function( p ){
  return { x: p.x, y: p.y };
};

math.array2point = function( arr ){
  return {
    x: arr[0],
    y: arr[1]
  };
};

math.deg2rad = function( deg ){
  return Math.PI * deg / 180;
};

math.log2 = Math.log2 || function( n ){
  return Math.log( n ) / Math.log( 2 );
};

math.signum = function( x ){
  if( x > 0 ){
    return 1;
  } else if( x < 0 ){
    return -1;
  } else {
    return 0;
  }
};

math.dist = function( p1, p2 ){
  return Math.sqrt( math.sqdist( p1, p2 ) );
};

math.sqdist = function( p1, p2 ){
  var dx = p2.x - p1.x;
  var dy = p2.y - p1.y;

  return dx * dx + dy * dy;
};

// from http://en.wikipedia.org/wiki/Bézier_curve#Quadratic_curves
math.qbezierAt = function( p0, p1, p2, t ){
  return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;
};

math.qbezierPtAt = function( p0, p1, p2, t ){
  return {
    x: math.qbezierAt( p0.x, p1.x, p2.x, t ),
    y: math.qbezierAt( p0.y, p1.y, p2.y, t )
  };
};

math.lineAt = function( p0, p1, t, d ){
  var vec = {
    x: p1.x - p0.x,
    y: p1.y - p0.y
  };

  var vecDist = math.dist( p0, p1 );

  var normVec = {
    x: vec.x / vecDist,
    y: vec.y / vecDist
  };

  t = t == null ? 0 : t;

  var d = d != null ? d : t * vecDist;

  return {
    x: p0.x + normVec.x * d,
    y: p0.y + normVec.y * d
  };
};

math.lineAtDist = function( p0, p1, d ){
  return math.lineAt( p0, p1, undefined, d );
};

// get angle at A via cosine law
math.triangleAngle = function( A, B, C ){
  var a = math.dist( B, C );
  var b = math.dist( A, C );
  var c = math.dist( A, B );

  return Math.acos( (a*a + b*b - c*c)/(2*a*b) );
};

math.bound = function( min, val, max ){
  return Math.max( min, Math.min( max, val ) );
};

// makes a full bb (x1, y1, x2, y2, w, h) from implicit params
math.makeBoundingBox = function( bb ){
  if( bb == null ){
    return {
      x1: Infinity,
      y1: Infinity,
      x2: -Infinity,
      y2: -Infinity,
      w: 0,
      h: 0
    };
  } else if( bb.x1 != null && bb.y1 != null ){
    if( bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1 ){
      return {
        x1: bb.x1,
        y1: bb.y1,
        x2: bb.x2,
        y2: bb.y2,
        w: bb.x2 - bb.x1,
        h: bb.y2 - bb.y1
      };
    } else if( bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0 ){
      return {
        x1: bb.x1,
        y1: bb.y1,
        x2: bb.x1 + bb.w,
        y2: bb.y1 + bb.h,
        w: bb.w,
        h: bb.h
      };
    }
  }
};

math.updateBoundingBox = function( bb1, bb2 ){
  // update bb1 with bb2 bounds

  bb1.x1 = Math.min( bb1.x1, bb2.x1 );
  bb1.x2 = Math.max( bb1.x2, bb2.x2 );
  bb1.w = bb1.x2 - bb1.x1;

  bb1.y1 = Math.min( bb1.y1, bb2.y1 );
  bb1.y2 = Math.max( bb1.y2, bb2.y2 );
  bb1.h = bb1.y2 - bb1.y1;
};

math.expandBoundingBox = function( bb, padding ){
  bb.x1 -= padding;
  bb.x2 += padding;
  bb.y1 -= padding;
  bb.y2 += padding;
  bb.w = bb.x2 - bb.x1;
  bb.h = bb.y2 - bb.y1;

  return bb;
};

math.boundingBoxesIntersect = function( bb1, bb2 ){
  // case: one bb to right of other
  if( bb1.x1 > bb2.x2 ){ return false; }
  if( bb2.x1 > bb1.x2 ){ return false; }

  // case: one bb to left of other
  if( bb1.x2 < bb2.x1 ){ return false; }
  if( bb2.x2 < bb1.x1 ){ return false; }

  // case: one bb above other
  if( bb1.y2 < bb2.y1 ){ return false; }
  if( bb2.y2 < bb1.y1 ){ return false; }

  // case: one bb below other
  if( bb1.y1 > bb2.y2 ){ return false; }
  if( bb2.y1 > bb1.y2 ){ return false; }

  // otherwise, must have some overlap
  return true;
};

math.inBoundingBox = function( bb, x, y ){
  return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;
};

math.pointInBoundingBox = function( bb, pt ){
  return this.inBoundingBox( bb, pt.x, pt.y );
};

math.boundingBoxInBoundingBox = function( bb1, bb2 ){
  return (
       math.inBoundingBox( bb1, bb2.x1, bb2.y1 )
    && math.inBoundingBox( bb1, bb2.x2, bb2.y2 )
  );
};

math.roundRectangleIntersectLine = function(
  x, y, nodeX, nodeY, width, height, padding ){

  var cornerRadius = this.getRoundRectangleRadius( width, height );

  var halfWidth = width / 2;
  var halfHeight = height / 2;

  // Check intersections with straight line segments
  var straightLineIntersections;

  // Top segment, left to right
  {
    var topStartX = nodeX - halfWidth + cornerRadius - padding;
    var topStartY = nodeY - halfHeight - padding;
    var topEndX = nodeX + halfWidth - cornerRadius + padding;
    var topEndY = topStartY;

    straightLineIntersections = this.finiteLinesIntersect(
      x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false );

    if( straightLineIntersections.length > 0 ){
      return straightLineIntersections;
    }
  }

  // Right segment, top to bottom
  {
    var rightStartX = nodeX + halfWidth + padding;
    var rightStartY = nodeY - halfHeight + cornerRadius - padding;
    var rightEndX = rightStartX;
    var rightEndY = nodeY + halfHeight - cornerRadius + padding;

    straightLineIntersections = this.finiteLinesIntersect(
      x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false );

    if( straightLineIntersections.length > 0 ){
      return straightLineIntersections;
    }
  }

  // Bottom segment, left to right
  {
    var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
    var bottomStartY = nodeY + halfHeight + padding;
    var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
    var bottomEndY = bottomStartY;

    straightLineIntersections = this.finiteLinesIntersect(
      x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false );

    if( straightLineIntersections.length > 0 ){
      return straightLineIntersections;
    }
  }

  // Left segment, top to bottom
  {
    var leftStartX = nodeX - halfWidth - padding;
    var leftStartY = nodeY - halfHeight + cornerRadius - padding;
    var leftEndX = leftStartX;
    var leftEndY = nodeY + halfHeight - cornerRadius + padding;

    straightLineIntersections = this.finiteLinesIntersect(
      x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false );

    if( straightLineIntersections.length > 0 ){
      return straightLineIntersections;
    }
  }

  // Check intersections with arc segments
  var arcIntersections;

  // Top Left
  {
    var topLeftCenterX = nodeX - halfWidth + cornerRadius;
    var topLeftCenterY = nodeY - halfHeight + cornerRadius;
    arcIntersections = this.intersectLineCircle(
      x, y, nodeX, nodeY,
      topLeftCenterX, topLeftCenterY, cornerRadius + padding );

    // Ensure the intersection is on the desired quarter of the circle
    if( arcIntersections.length > 0
      && arcIntersections[0] <= topLeftCenterX
      && arcIntersections[1] <= topLeftCenterY ){
      return [ arcIntersections[0], arcIntersections[1] ];
    }
  }

  // Top Right
  {
    var topRightCenterX = nodeX + halfWidth - cornerRadius;
    var topRightCenterY = nodeY - halfHeight + cornerRadius;
    arcIntersections = this.intersectLineCircle(
      x, y, nodeX, nodeY,
      topRightCenterX, topRightCenterY, cornerRadius + padding );

    // Ensure the intersection is on the desired quarter of the circle
    if( arcIntersections.length > 0
      && arcIntersections[0] >= topRightCenterX
      && arcIntersections[1] <= topRightCenterY ){
      return [ arcIntersections[0], arcIntersections[1] ];
    }
  }

  // Bottom Right
  {
    var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
    var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
    arcIntersections = this.intersectLineCircle(
      x, y, nodeX, nodeY,
      bottomRightCenterX, bottomRightCenterY, cornerRadius + padding );

    // Ensure the intersection is on the desired quarter of the circle
    if( arcIntersections.length > 0
      && arcIntersections[0] >= bottomRightCenterX
      && arcIntersections[1] >= bottomRightCenterY ){
      return [ arcIntersections[0], arcIntersections[1] ];
    }
  }

  // Bottom Left
  {
    var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
    var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
    arcIntersections = this.intersectLineCircle(
      x, y, nodeX, nodeY,
      bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding );

    // Ensure the intersection is on the desired quarter of the circle
    if( arcIntersections.length > 0
      && arcIntersections[0] <= bottomLeftCenterX
      && arcIntersections[1] >= bottomLeftCenterY ){
      return [ arcIntersections[0], arcIntersections[1] ];
    }
  }

  return []; // if nothing
};

math.inLineVicinity = function( x, y, lx1, ly1, lx2, ly2, tolerance ){
  var t = tolerance;

  var x1 = Math.min( lx1, lx2 );
  var x2 = Math.max( lx1, lx2 );
  var y1 = Math.min( ly1, ly2 );
  var y2 = Math.max( ly1, ly2 );

  return x1 - t <= x && x <= x2 + t
    && y1 - t <= y && y <= y2 + t;
};

math.inBezierVicinity = function(
  x, y, x1, y1, x2, y2, x3, y3, tolerance ){

  var bb = {
    x1: Math.min( x1, x3, x2 ) - tolerance,
    x2: Math.max( x1, x3, x2 ) + tolerance,
    y1: Math.min( y1, y3, y2 ) - tolerance,
    y2: Math.max( y1, y3, y2 ) + tolerance
  };

  // if outside the rough bounding box for the bezier, then it can't be a hit
  if( x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2 ){
    // console.log('bezier out of rough bb')
    return false;
  } else {
    // console.log('do more expensive check');
    return true;
  }

};

math.solveCubic = function( a, b, c, d, result ){

  // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where
  // r is the real component, i is the imaginary component

  // An implementation of the Cardano method from the year 1545
  // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots

  b /= a;
  c /= a;
  d /= a;

  var discriminant, q, r, dum1, s, t, term1, r13;

  q = (3.0 * c - (b * b)) / 9.0;
  r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));
  r /= 54.0;

  discriminant = q * q * q + r * r;
  result[1] = 0;
  term1 = (b / 3.0);

  if( discriminant > 0 ){
    s = r + Math.sqrt( discriminant );
    s = ((s < 0) ? -Math.pow( -s, (1.0 / 3.0) ) : Math.pow( s, (1.0 / 3.0) ));
    t = r - Math.sqrt( discriminant );
    t = ((t < 0) ? -Math.pow( -t, (1.0 / 3.0) ) : Math.pow( t, (1.0 / 3.0) ));
    result[0] = -term1 + s + t;
    term1 += (s + t) / 2.0;
    result[4] = result[2] = -term1;
    term1 = Math.sqrt( 3.0 ) * (-t + s) / 2;
    result[3] = term1;
    result[5] = -term1;
    return;
  }

  result[5] = result[3] = 0;

  if( discriminant === 0 ){
    r13 = ((r < 0) ? -Math.pow( -r, (1.0 / 3.0) ) : Math.pow( r, (1.0 / 3.0) ));
    result[0] = -term1 + 2.0 * r13;
    result[4] = result[2] = -(r13 + term1);
    return;
  }

  q = -q;
  dum1 = q * q * q;
  dum1 = Math.acos( r / Math.sqrt( dum1 ) );
  r13 = 2.0 * Math.sqrt( q );
  result[0] = -term1 + r13 * Math.cos( dum1 / 3.0 );
  result[2] = -term1 + r13 * Math.cos( (dum1 + 2.0 * Math.PI) / 3.0 );
  result[4] = -term1 + r13 * Math.cos( (dum1 + 4.0 * Math.PI) / 3.0 );

  return;
};

math.sqdistToQuadraticBezier = function(
  x, y, x1, y1, x2, y2, x3, y3 ){

  // Find minimum distance by using the minimum of the distance
  // function between the given point and the curve

  // This gives the coefficients of the resulting cubic equation
  // whose roots tell us where a possible minimum is
  // (Coefficients are divided by 4)

  var a = 1.0 * x1 * x1 - 4 * x1 * x2 + 2 * x1 * x3 + 4 * x2 * x2 - 4 * x2 * x3 + x3 * x3
    + y1 * y1 - 4 * y1 * y2 + 2 * y1 * y3 + 4 * y2 * y2 - 4 * y2 * y3 + y3 * y3;

  var b = 1.0 * 9 * x1 * x2 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x2 * x2 + 3 * x2 * x3
    + 9 * y1 * y2 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y2 * y2 + 3 * y2 * y3;

  var c = 1.0 * 3 * x1 * x1 - 6 * x1 * x2 + x1 * x3 - x1 * x + 2 * x2 * x2 + 2 * x2 * x - x3 * x
    + 3 * y1 * y1 - 6 * y1 * y2 + y1 * y3 - y1 * y + 2 * y2 * y2 + 2 * y2 * y - y3 * y;

  var d = 1.0 * x1 * x2 - x1 * x1 + x1 * x - x2 * x
    + y1 * y2 - y1 * y1 + y1 * y - y2 * y;

  // debug("coefficients: " + a / a + ", " + b / a + ", " + c / a + ", " + d / a);

  var roots = [];

  // Use the cubic solving algorithm
  this.solveCubic( a, b, c, d, roots );

  var zeroThreshold = 0.0000001;

  var params = [];

  for( var index = 0; index < 6; index += 2 ){
    if( Math.abs( roots[ index + 1] ) < zeroThreshold
        && roots[ index ] >= 0
        && roots[ index ] <= 1.0 ){
      params.push( roots[ index ] );
    }
  }

  params.push( 1.0 );
  params.push( 0.0 );

  var minDistanceSquared = -1;
  var closestParam;

  var curX, curY, distSquared;
  for( var i = 0; i < params.length; i++ ){
    curX = Math.pow( 1.0 - params[ i ], 2.0 ) * x1
      + 2.0 * (1 - params[ i ]) * params[ i ] * x2
      + params[ i ] * params[ i ] * x3;

    curY = Math.pow( 1 - params[ i ], 2.0 ) * y1
      + 2 * (1.0 - params[ i ]) * params[ i ] * y2
      + params[ i ] * params[ i ] * y3;

    distSquared = Math.pow( curX - x, 2 ) + Math.pow( curY - y, 2 );
    // debug('distance for param ' + params[i] + ": " + Math.sqrt(distSquared));
    if( minDistanceSquared >= 0 ){
      if( distSquared < minDistanceSquared ){
        minDistanceSquared = distSquared;
        closestParam = params[ i ];
      }
    } else {
      minDistanceSquared = distSquared;
      closestParam = params[ i ];
    }
  }

  return minDistanceSquared;
};

math.sqdistToFiniteLine = function( x, y, x1, y1, x2, y2 ){
  var offset = [ x - x1, y - y1 ];
  var line = [ x2 - x1, y2 - y1 ];

  var lineSq = line[0] * line[0] + line[1] * line[1];
  var hypSq = offset[0] * offset[0] + offset[1] * offset[1];

  var dotProduct = offset[0] * line[0] + offset[1] * line[1];
  var adjSq = dotProduct * dotProduct / lineSq;

  if( dotProduct < 0 ){
    return hypSq;
  }

  if( adjSq > lineSq ){
    return (x - x2) * (x - x2) + (y - y2) * (y - y2);
  }

  return hypSq - adjSq;
};

math.pointInsidePolygonPoints = function( x, y, points ){
  var x1, y1, x2, y2;
  var y3;

  // Intersect with vertical line through (x, y)
  var up = 0;
  var down = 0;
  for( var i = 0; i < points.length / 2; i++ ){

    x1 = points[ i * 2];
    y1 = points[ i * 2 + 1];

    if( i + 1 < points.length / 2 ){
      x2 = points[ (i + 1) * 2];
      y2 = points[ (i + 1) * 2 + 1];
    } else {
      x2 = points[ (i + 1 - points.length / 2) * 2];
      y2 = points[ (i + 1 - points.length / 2) * 2 + 1];
    }

    if( x1 == x && x2 == x ){
      // then ignore
    } else if( (x1 >= x && x >= x2)
      || (x1 <= x && x <= x2) ){

      y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;

      if( y3 > y ){
        up++;
      }

      if( y3 < y ){
        down++;
      }

    } else {
      continue;
    }

  }

  if( up % 2 === 0 ){
    return false;
  } else {
    return true;
  }
};

math.pointInsidePolygon = function(
  x, y, basePoints, centerX, centerY, width, height, direction, padding ){

  //var direction = arguments[6];
  var transformedPoints = new Array( basePoints.length );

  // Gives negative angle
  var angle;

  if( direction[0] != null ){
    angle = Math.atan( direction[1] / direction[0] );

    if( direction[0] < 0 ){
      angle = angle + Math.PI / 2;
    } else {
      angle = -angle - Math.PI / 2;
    }
  } else {
    angle = direction;
  }

  var cos = Math.cos( -angle );
  var sin = Math.sin( -angle );

  //    console.log("base: " + basePoints);
  for( var i = 0; i < transformedPoints.length / 2; i++ ){
    transformedPoints[ i * 2] =
      width / 2 * (basePoints[ i * 2] * cos
        - basePoints[ i * 2 + 1] * sin);

    transformedPoints[ i * 2 + 1] =
      height / 2 * (basePoints[ i * 2 + 1] * cos
        + basePoints[ i * 2] * sin);

    transformedPoints[ i * 2] += centerX;
    transformedPoints[ i * 2 + 1] += centerY;
  }

  var points;

  if( padding > 0 ){
    var expandedLineSet = this.expandPolygon(
      transformedPoints,
      -padding );

    points = this.joinLines( expandedLineSet );
  } else {
    points = transformedPoints;
  }

  return math.pointInsidePolygonPoints( x, y, points );
};

math.joinLines = function( lineSet ){

  var vertices = new Array( lineSet.length / 2 );

  var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;
  var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;

  for( var i = 0; i < lineSet.length / 4; i++ ){
    currentLineStartX = lineSet[ i * 4];
    currentLineStartY = lineSet[ i * 4 + 1];
    currentLineEndX = lineSet[ i * 4 + 2];
    currentLineEndY = lineSet[ i * 4 + 3];

    if( i < lineSet.length / 4 - 1 ){
      nextLineStartX = lineSet[ (i + 1) * 4];
      nextLineStartY = lineSet[ (i + 1) * 4 + 1];
      nextLineEndX = lineSet[ (i + 1) * 4 + 2];
      nextLineEndY = lineSet[ (i + 1) * 4 + 3];
    } else {
      nextLineStartX = lineSet[0];
      nextLineStartY = lineSet[1];
      nextLineEndX = lineSet[2];
      nextLineEndY = lineSet[3];
    }

    var intersection = this.finiteLinesIntersect(
      currentLineStartX, currentLineStartY,
      currentLineEndX, currentLineEndY,
      nextLineStartX, nextLineStartY,
      nextLineEndX, nextLineEndY,
      true );

    vertices[ i * 2] = intersection[0];
    vertices[ i * 2 + 1] = intersection[1];
  }

  return vertices;
};

math.expandPolygon = function( points, pad ){

  var expandedLineSet = new Array( points.length * 2 );

  var currentPointX, currentPointY, nextPointX, nextPointY;

  for( var i = 0; i < points.length / 2; i++ ){
    currentPointX = points[ i * 2];
    currentPointY = points[ i * 2 + 1];

    if( i < points.length / 2 - 1 ){
      nextPointX = points[ (i + 1) * 2];
      nextPointY = points[ (i + 1) * 2 + 1];
    } else {
      nextPointX = points[0];
      nextPointY = points[1];
    }

    // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]

    // Assume CCW polygon winding

    var offsetX = (nextPointY - currentPointY);
    var offsetY = -(nextPointX - currentPointX);

    // Normalize
    var offsetLength = Math.sqrt( offsetX * offsetX + offsetY * offsetY );
    var normalizedOffsetX = offsetX / offsetLength;
    var normalizedOffsetY = offsetY / offsetLength;

    expandedLineSet[ i * 4] = currentPointX + normalizedOffsetX * pad;
    expandedLineSet[ i * 4 + 1] = currentPointY + normalizedOffsetY * pad;
    expandedLineSet[ i * 4 + 2] = nextPointX + normalizedOffsetX * pad;
    expandedLineSet[ i * 4 + 3] = nextPointY + normalizedOffsetY * pad;
  }

  return expandedLineSet;
};

math.intersectLineEllipse = function(
  x, y, centerX, centerY, ellipseWradius, ellipseHradius ){

  var dispX = centerX - x;
  var dispY = centerY - y;

  dispX /= ellipseWradius;
  dispY /= ellipseHradius;

  var len = Math.sqrt( dispX * dispX + dispY * dispY );

  var newLength = len - 1;

  if( newLength < 0 ){
    return [];
  }

  var lenProportion = newLength / len;

  return [ (centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y ];
};

// Returns intersections of increasing distance from line's start point
math.intersectLineCircle = function(
  x1, y1, x2, y2, centerX, centerY, radius ){

  // Calculate d, direction vector of line
  var d = [ x2 - x1, y2 - y1 ]; // Direction vector of line
  var c = [ centerX, centerY ]; // Center of circle
  var f = [ x1 - centerX, y1 - centerY ];

  var a = d[0] * d[0] + d[1] * d[1];
  var b = 2 * (f[0] * d[0] + f[1] * d[1]);
  var c = (f[0] * f[0] + f[1] * f[1]) - radius * radius ;

  var discriminant = b * b - 4 * a * c;

  if( discriminant < 0 ){
    return [];
  }

  var t1 = (-b + Math.sqrt( discriminant )) / (2 * a);
  var t2 = (-b - Math.sqrt( discriminant )) / (2 * a);

  var tMin = Math.min( t1, t2 );
  var tMax = Math.max( t1, t2 );
  var inRangeParams = [];

  if( tMin >= 0 && tMin <= 1 ){
    inRangeParams.push( tMin );
  }

  if( tMax >= 0 && tMax <= 1 ){
    inRangeParams.push( tMax );
  }

  if( inRangeParams.length === 0 ){
    return [];
  }

  var nearIntersectionX = inRangeParams[0] * d[0] + x1;
  var nearIntersectionY = inRangeParams[0] * d[1] + y1;

  if( inRangeParams.length > 1 ){

    if( inRangeParams[0] == inRangeParams[1] ){
      return [ nearIntersectionX, nearIntersectionY ];
    } else {

      var farIntersectionX = inRangeParams[1] * d[0] + x1;
      var farIntersectionY = inRangeParams[1] * d[1] + y1;

      return [ nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY ];
    }

  } else {
    return [ nearIntersectionX, nearIntersectionY ];
  }

};

math.findCircleNearPoint = function( centerX, centerY,
  radius, farX, farY ){

  var displacementX = farX - centerX;
  var displacementY = farY - centerY;
  var distance = Math.sqrt( displacementX * displacementX
    + displacementY * displacementY );

  var unitDisplacementX = displacementX / distance;
  var unitDisplacementY = displacementY / distance;

  return [ centerX + unitDisplacementX * radius,
    centerY + unitDisplacementY * radius ];
};

math.findMaxSqDistanceToOrigin = function( points ){
  var maxSqDistance = 0.000001;
  var sqDistance;

  for( var i = 0; i < points.length / 2; i++ ){

    sqDistance = points[ i * 2] * points[ i * 2]
      + points[ i * 2 + 1] * points[ i * 2 + 1];

    if( sqDistance > maxSqDistance ){
      maxSqDistance = sqDistance;
    }
  }

  return maxSqDistance;
};

math.midOfThree = function( a, b, c ){
  if( (b <= a && a <= c) || (c <= a && a <= b) ){
    return a;
  } else if( (a <= b && b <= c) || (c <= b && b <= a) ){
    return b;
  } else {
    return c;
  }
};

math.finiteLinesIntersect = function( x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines ){

  var dx13 = x1 - x3;
  var dx21 = x2 - x1;
  var dx43 = x4 - x3;

  var dy13 = y1 - y3;
  var dy21 = y2 - y1;
  var dy43 = y4 - y3;

  var ua_t = dx43 * dy13 - dy43 * dx13;
  var ub_t = dx21 * dy13 - dy21 * dx13;
  var u_b  = dy43 * dx21 - dx43 * dy21;

  if( u_b !== 0 ){
    var ua = ua_t / u_b;
    var ub = ub_t / u_b;

    var flptThreshold = 0.001;
    var min = 0 - flptThreshold;
    var max = 1 + flptThreshold;

    if( min <= ua && ua <= max && min <= ub && ub <= max ){
      return [ x1 + ua * dx21, y1 + ua * dy21 ];

    } else {
      if( !infiniteLines ){
        return [];
      } else {
        return [ x1 + ua * dx21, y1 + ua * dy21 ];
      }
    }
  } else {
    if( ua_t === 0 || ub_t === 0 ){

      // Parallel, coincident lines. Check if overlap

      // Check endpoint of second line
      if( this.midOfThree( x1, x2, x4 ) === x4 ){
        return [ x4, y4 ];
      }

      // Check start point of second line
      if( this.midOfThree( x1, x2, x3 ) === x3 ){
        return [ x3, y3 ];
      }

      // Endpoint of first line
      if( this.midOfThree( x3, x4, x2 ) === x2 ){
        return [ x2, y2 ];
      }

      return [];
    } else {

      // Parallel, non-coincident
      return [];
    }
  }
};

math.polygonIntersectLine = function(
  x, y, basePoints, centerX, centerY, width, height, padding ){

  var intersections = [];
  var intersection;

  var transformedPoints = new Array( basePoints.length );

  for( var i = 0; i < transformedPoints.length / 2; i++ ){
    transformedPoints[ i * 2] = basePoints[ i * 2] * width + centerX;
    transformedPoints[ i * 2 + 1] = basePoints[ i * 2 + 1] * height + centerY;
  }

  var points;

  if( padding > 0 ){
    var expandedLineSet = math.expandPolygon(
      transformedPoints,
      -padding );

    points = math.joinLines( expandedLineSet );
  } else {
    points = transformedPoints;
  }
  // var points = transformedPoints;

  var currentX, currentY, nextX, nextY;

  for( var i = 0; i < points.length / 2; i++ ){

    currentX = points[ i * 2];
    currentY = points[ i * 2 + 1];

    if( i < points.length / 2 - 1 ){
      nextX = points[ (i + 1) * 2];
      nextY = points[ (i + 1) * 2 + 1];
    } else {
      nextX = points[0];
      nextY = points[1];
    }

    intersection = this.finiteLinesIntersect(
      x, y, centerX, centerY,
      currentX, currentY,
      nextX, nextY );

    if( intersection.length !== 0 ){
      intersections.push( intersection[0], intersection[1] );
    }
  }

  return intersections;
};

math.shortenIntersection = function(
  intersection, offset, amount ){

  var disp = [ intersection[0] - offset[0], intersection[1] - offset[1] ];

  var length = Math.sqrt( disp[0] * disp[0] + disp[1] * disp[1] );

  var lenRatio = (length - amount) / length;

  if( lenRatio < 0 ){
    lenRatio = 0.00001;
  }

  return [ offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1] ];
};

math.generateUnitNgonPointsFitToSquare = function( sides, rotationRadians ){
  var points = math.generateUnitNgonPoints( sides, rotationRadians );
  points = math.fitPolygonToSquare( points );

  return points;
};

math.fitPolygonToSquare = function( points ){
  var x, y;
  var sides = points.length / 2;
  var minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;

  for( var i = 0; i < sides; i++ ){
    x = points[2 * i ];
    y = points[2 * i + 1];

    minX = Math.min( minX, x );
    maxX = Math.max( maxX, x );
    minY = Math.min( minY, y );
    maxY = Math.max( maxY, y );
  }

  // stretch factors
  var sx = 2 / (maxX - minX);
  var sy = 2 / (maxY - minY);

  for( var i = 0; i < sides; i++ ){
    x = points[2 * i ] = points[2 * i ] * sx;
    y = points[2 * i + 1] = points[2 * i + 1] * sy;

    minX = Math.min( minX, x );
    maxX = Math.max( maxX, x );
    minY = Math.min( minY, y );
    maxY = Math.max( maxY, y );
  }

  if( minY < -1 ){
    for( var i = 0; i < sides; i++ ){
      y = points[2 * i + 1] = points[2 * i + 1] + (-1 - minY);
    }
  }

  return points;
};

math.generateUnitNgonPoints = function( sides, rotationRadians ){

  var increment = 1.0 / sides * 2 * Math.PI;
  var startAngle = sides % 2 === 0 ?
    Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;
  //    console.log(nodeShapes['square']);
  startAngle += rotationRadians;

  var points = new Array( sides * 2 );

  var currentAngle, x, y;
  for( var i = 0; i < sides; i++ ){
    currentAngle = i * increment + startAngle;

    x = points[2 * i ] = Math.cos( currentAngle );// * (1 + i/2);
    y = points[2 * i + 1] = Math.sin( -currentAngle );//  * (1 + i/2);
  }

  return points;
};

math.getRoundRectangleRadius = function( width, height ){

  // Set the default radius, unless half of width or height is smaller than default
  return Math.min( width / 4, height / 4, 8 );
};

module.exports = math;

},{}],89:[function(require,module,exports){
/*!
Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
Licensed under The MIT License (http://opensource.org/licenses/MIT)
*/

'use strict';

/*  promise states [Promises/A+ 2.1]  */
var STATE_PENDING   = 0;                                         /*  [Promises/A+ 2.1.1]  */
var STATE_FULFILLED = 1;                                         /*  [Promises/A+ 2.1.2]  */
var STATE_REJECTED  = 2;                                         /*  [Promises/A+ 2.1.3]  */

/*  promise object constructor  */
var api = function( executor ){
  /*  optionally support non-constructor/plain-function call  */
  if( !(this instanceof api) )
    return new api( executor );

  /*  initialize object  */
  this.id           = 'Thenable/1.0.7';
  this.state        = STATE_PENDING; /*  initial state  */
  this.fulfillValue = undefined;     /*  initial value  */     /*  [Promises/A+ 1.3, 2.1.2.2]  */
  this.rejectReason = undefined;     /*  initial reason */     /*  [Promises/A+ 1.5, 2.1.3.2]  */
  this.onFulfilled  = [];            /*  initial handlers  */
  this.onRejected   = [];            /*  initial handlers  */

  /*  provide optional information-hiding proxy  */
  this.proxy = {
    then: this.then.bind( this )
  };

  /*  support optional executor function  */
  if( typeof executor === 'function' )
    executor.call( this, this.fulfill.bind( this ), this.reject.bind( this ) );
};

/*  promise API methods  */
api.prototype = {
  /*  promise resolving methods  */
  fulfill: function( value ){ return deliver( this, STATE_FULFILLED, 'fulfillValue', value ); },
  reject:  function( value ){ return deliver( this, STATE_REJECTED,  'rejectReason', value ); },

  /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
  then: function( onFulfilled, onRejected ){
    var curr = this;
    var next = new api();                                    /*  [Promises/A+ 2.2.7]  */
    curr.onFulfilled.push(
      resolver( onFulfilled, next, 'fulfill' ) );             /*  [Promises/A+ 2.2.2/2.2.6]  */
    curr.onRejected.push(
      resolver( onRejected,  next, 'reject' ) );             /*  [Promises/A+ 2.2.3/2.2.6]  */
    execute( curr );
    return next.proxy;                                       /*  [Promises/A+ 2.2.7, 3.3]  */
  }
};

/*  deliver an action  */
var deliver = function( curr, state, name, value ){
  if( curr.state === STATE_PENDING ){
    curr.state = state;                                      /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */
    curr[ name ] = value;                                      /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */
    execute( curr );
  }
  return curr;
};

/*  execute all handlers  */
var execute = function( curr ){
  if( curr.state === STATE_FULFILLED )
    execute_handlers( curr, 'onFulfilled', curr.fulfillValue );
  else if( curr.state === STATE_REJECTED )
    execute_handlers( curr, 'onRejected',  curr.rejectReason );
};

/*  execute particular set of handlers  */
var execute_handlers = function( curr, name, value ){
  /* global setImmediate: true */
  /* global setTimeout: true */

  /*  short-circuit processing  */
  if( curr[ name ].length === 0 )
    return;

  /*  iterate over all handlers, exactly once  */
  var handlers = curr[ name ];
  curr[ name ] = [];                                             /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */
  var func = function(){
    for( var i = 0; i < handlers.length; i++ )
      handlers[ i ]( value );                                  /*  [Promises/A+ 2.2.5]  */
  };

  /*  execute procedure asynchronously  */                     /*  [Promises/A+ 2.2.4, 3.1]  */
  if( typeof setImmediate === 'function' )
    setImmediate( func );
  else
    setTimeout( func, 0 );
};

/*  generate a resolver function  */
var resolver = function( cb, next, method ){
  return function( value ){
    if( typeof cb !== 'function' )                            /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */
      next[ method ].call( next, value );                      /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */
    else {
      var result;
      try { result = cb( value ); }                          /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */
      catch( e ){
        next.reject( e );                                  /*  [Promises/A+ 2.2.7.2]  */
        return;
      }
      resolve( next, result );                               /*  [Promises/A+ 2.2.7.1]  */
    }
  };
};

/*  "Promise Resolution Procedure"  */                           /*  [Promises/A+ 2.3]  */
var resolve = function( promise, x ){
  /*  sanity check arguments  */                               /*  [Promises/A+ 2.3.1]  */
  if( promise === x || promise.proxy === x ){
    promise.reject( new TypeError( 'cannot resolve promise with itself' ) );
    return;
  }

  /*  surgically check for a "then" method
    (mainly to just call the "getter" of "then" only once)  */
  var then;
  if( (typeof x === 'object' && x !== null) || typeof x === 'function' ){
    try { then = x.then; }                                   /*  [Promises/A+ 2.3.3.1, 3.5]  */
    catch( e ){
      promise.reject( e );                                   /*  [Promises/A+ 2.3.3.2]  */
      return;
    }
  }

  /*  handle own Thenables    [Promises/A+ 2.3.2]
    and similar "thenables" [Promises/A+ 2.3.3]  */
  if( typeof then === 'function' ){
    var resolved = false;
    try {
      /*  call retrieved "then" method */                  /*  [Promises/A+ 2.3.3.3]  */
      then.call( x,
        /*  resolvePromise  */                           /*  [Promises/A+ 2.3.3.3.1]  */
        function( y ){
          if( resolved ) return; resolved = true;       /*  [Promises/A+ 2.3.3.3.3]  */
          if( y === x )                                 /*  [Promises/A+ 3.6]  */
            promise.reject( new TypeError( 'circular thenable chain' ) );
          else
            resolve( promise, y );
        },

        /*  rejectPromise  */                            /*  [Promises/A+ 2.3.3.3.2]  */
        function( r ){
          if( resolved ) return; resolved = true;       /*  [Promises/A+ 2.3.3.3.3]  */
          promise.reject( r );
        }
      );
    }
    catch( e ){
      if( !resolved )                                       /*  [Promises/A+ 2.3.3.3.3]  */
        promise.reject( e );                               /*  [Promises/A+ 2.3.3.3.4]  */
    }
    return;
  }

  /*  handle other values  */
  promise.fulfill( x );                                          /*  [Promises/A+ 2.3.4, 2.3.3.4]  */
};

// so we always have Promise.all()
api.all = function( ps ){
  return new api(function( resolveAll, rejectAll ){
    var vals = new Array( ps.length );
    var doneCount = 0;

    var fulfill = function( i, val ){
      vals[ i ] = val;
      doneCount++;

      if( doneCount === ps.length ){
        resolveAll( vals );
      }
    };

    for( var i = 0; i < ps.length; i++ ){
      (function( i ){
        var p = ps[i];
        var isPromise = p != null && p.then != null;

        if( isPromise ){
          p.then( function( val ){
            fulfill( i, val );
          }, function( err ){
            rejectAll( err );
          } );
        } else {
          var val = p;
          fulfill( i, val );
        }
      })( i );
    }

  } );
};

api.resolve = function( val ){
  return new api(function( resolve, reject ){ resolve( val ); });
};

api.reject = function( val ){
  return new api(function( resolve, reject ){ reject( val ); });
};

module.exports = typeof Promise !== 'undefined' ? Promise : api; // eslint-disable-line no-undef

},{}],90:[function(require,module,exports){
// sbgn shapes not supported by cytoscape.js this object will be exposed in cytoscape.js
// and will be filled in sbgnviz.js
// TODO consider filling this object here and remove related things from sbgnviz
var sbgn = {};

module.exports = sbgn;
},{}],91:[function(require,module,exports){
'use strict';

var is = require( './is' );
var util = require( './util' );

var Selector = function( selector ){

  if( !(this instanceof Selector) ){
    return new Selector( selector );
  }

  var self = this;

  self._private = {
    selectorText: null,
    invalid: true
  };

  // storage for parsed queries
  var newQuery = function(){
    return {
      classes: [],
      colonSelectors: [],
      data: [],
      group: null,
      ids: [],
      meta: [],

      // fake selectors
      collection: null, // a collection to match against
      filter: null, // filter function

      // these are defined in the upward direction rather than down (e.g. child)
      // because we need to go up in Selector.filter()
      parent: null, // parent query obj
      ancestor: null, // ancestor query obj
      subject: null, // defines subject in compound query (subject query obj; points to self if subject)

      // use these only when subject has been defined
      child: null,
      descendant: null
    };
  };

  if( !selector || ( is.string( selector ) && selector.match( /^\s*$/ ) ) ){

    self.length = 0;

  } else if( selector === '*' || selector === 'edge' || selector === 'node' ){

    // make single, group-only selectors cheap to make and cheap to filter

    self[0] = newQuery();
    self[0].group = selector === '*' ? selector : selector + 's';
    self[0].groupOnly = true;
    self._private.invalid = false;
    self._private.selectorText = selector;
    self.length = 1;

  } else if( is.elementOrCollection( selector ) ){

    var collection = selector.collection();

    self[0] = newQuery();
    self[0].collection = collection;
    self.length = 1;

  } else if( is.fn( selector ) ){

    self[0] = newQuery();
    self[0].filter = selector;
    self.length = 1;

  } else if( is.string( selector ) ){

    // the current subject in the query
    var currentSubject = null;

    // tokens in the query language
    var tokens = {
      metaChar: '[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]', // chars we need to escape in var names, etc
      comparatorOp: '=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=', // binary comparison op (used in data selectors)
      boolOp: '\\?|\\!|\\^', // boolean (unary) operators (used in data selectors)
      string: '"(?:\\\\"|[^"])+"' + '|' + "'(?:\\\\'|[^'])+'", // string literals (used in data selectors) -- doublequotes | singlequotes
      number: util.regex.number, // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
      meta: 'degree|indegree|outdegree', // allowed metadata fields (i.e. allowed functions to use from Collection)
      separator: '\\s*,\\s*', // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
      descendant: '\\s+',
      child: '\\s+>\\s+',
      subject: '\\$'
    };
    tokens.variable = '(?:[\\w-]|(?:\\\\' + tokens.metaChar + '))+'; // a variable name
    tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number
    tokens.className = tokens.variable; // a class name (follows variable conventions)
    tokens.id = tokens.variable; // an element id (follows variable conventions)

    // when a token like a variable has escaped meta characters, we need to clean the backslashes out
    // so that values get compared properly in Selector.filter()
    var cleanMetaChars = function( str ){
      return str.replace( new RegExp( '\\\\(' + tokens.metaChar + ')', 'g' ), function( match, $1, offset, original ){
        return $1;
      } );
    };

    // add @ variants to comparatorOp
    var ops = tokens.comparatorOp.split( '|' );
    for( var i = 0; i < ops.length; i++ ){
      var op = ops[ i ];
      tokens.comparatorOp += '|@' + op;
    }

    // add ! variants to comparatorOp
    var ops = tokens.comparatorOp.split( '|' );
    for( var i = 0; i < ops.length; i++ ){
      var op = ops[ i ];

      if( op.indexOf( '!' ) >= 0 ){ continue; } // skip ops that explicitly contain !
      if( op === '=' ){ continue; } // skip = b/c != is explicitly defined

      tokens.comparatorOp += '|\\!' + op;
    }

    // NOTE: add new expression syntax here to have it recognised by the parser;
    // - a query contains all adjacent (i.e. no separator in between) expressions;
    // - the current query is stored in self[i] --- you can use the reference to `this` in the populate function;
    // - you need to check the query objects in Selector.filter() for it actually filter properly, but that's pretty straight forward
    // - when you add something here, also add to Selector.toString()
    var exprs = [
      {
        name: 'group',
        query: true,
        regex: '(node|edge|\\*)',
        populate: function( group ){
          this.group = group === '*' ? group : group + 's';
        }
      },

      {
        name: 'state',
        query: true,
        // NB: if one colon selector is a substring of another from its start, place the longer one first
        // e.g. :foobar|:foo
        regex: '(:selected|:unselected|:locked|:unlocked|:visible|:hidden|:transparent|:grabbed|:free|:removed|:inside|:grabbable|:ungrabbable|:animated|:unanimated|:selectable|:unselectable|:orphan|:nonorphan|:parent|:child|:loop|:simple|:active|:inactive|:touch|:backgrounding|:nonbackgrounding)',
        populate: function( state ){
          this.colonSelectors.push( state );
        }
      },

      {
        name: 'id',
        query: true,
        regex: '\\#(' + tokens.id + ')',
        populate: function( id ){
          this.ids.push( cleanMetaChars( id ) );
        }
      },

      {
        name: 'className',
        query: true,
        regex: '\\.(' + tokens.className + ')',
        populate: function( className ){
          this.classes.push( cleanMetaChars( className ) );
        }
      },

      {
        name: 'dataExists',
        query: true,
        regex: '\\[\\s*(' + tokens.variable + ')\\s*\\]',
        populate: function( variable ){
          this.data.push( {
            field: cleanMetaChars( variable )
          } );
        }
      },

      {
        name: 'dataCompare',
        query: true,
        regex: '\\[\\s*(' + tokens.variable + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.value + ')\\s*\\]',
        populate: function( variable, comparatorOp, value ){
          var valueIsString = new RegExp( '^' + tokens.string + '$' ).exec( value ) != null;

          if( valueIsString ){
            value = value.substring( 1, value.length - 1 );
          } else {
            value = parseFloat( value );
          }

          this.data.push( {
            field: cleanMetaChars( variable ),
            operator: comparatorOp,
            value: value
          } );
        }
      },

      {
        name: 'dataBool',
        query: true,
        regex: '\\[\\s*(' + tokens.boolOp + ')\\s*(' + tokens.variable + ')\\s*\\]',
        populate: function( boolOp, variable ){
          this.data.push( {
            field: cleanMetaChars( variable ),
            operator: boolOp
          } );
        }
      },

      {
        name: 'metaCompare',
        query: true,
        regex: '\\[\\[\\s*(' + tokens.meta + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.number + ')\\s*\\]\\]',
        populate: function( meta, comparatorOp, number ){
          this.meta.push( {
            field: cleanMetaChars( meta ),
            operator: comparatorOp,
            value: parseFloat( number )
          } );
        }
      },

      {
        name: 'nextQuery',
        separator: true,
        regex: tokens.separator,
        populate: function(){
          // go on to next query
          self[ ++i ] = newQuery();
          currentSubject = null;
        }
      },

      {
        name: 'child',
        separator: true,
        regex: tokens.child,
        populate: function(){
          // this query is the parent of the following query
          var childQuery = newQuery();
          childQuery.parent = this;
          childQuery.subject = currentSubject;

          // we're now populating the child query with expressions that follow
          self[ i ] = childQuery;
        }
      },

      {
        name: 'descendant',
        separator: true,
        regex: tokens.descendant,
        populate: function(){
          // this query is the ancestor of the following query
          var descendantQuery = newQuery();
          descendantQuery.ancestor = this;
          descendantQuery.subject = currentSubject;

          // we're now populating the descendant query with expressions that follow
          self[ i ] = descendantQuery;
        }
      },

      {
        name: 'subject',
        modifier: true,
        regex: tokens.subject,
        populate: function(){
          if( currentSubject != null && this.subject != this ){
            util.error( 'Redefinition of subject in selector `' + selector + '`' );
            return false;
          }

          currentSubject = this;
          this.subject = this;
        }

      }
    ];

    self._private.selectorText = selector;
    var remaining = selector;
    var i = 0;

    // of all the expressions, find the first match in the remaining text
    var consumeExpr = function( expectation ){
      var expr;
      var match;
      var name;

      for( var j = 0; j < exprs.length; j++ ){
        var e = exprs[ j ];
        var n = e.name;

        // ignore this expression if it doesn't meet the expectation function
        if( is.fn( expectation ) && !expectation( n, e ) ){ continue; }

        var m = remaining.match( new RegExp( '^' + e.regex ) );

        if( m != null ){
          match = m;
          expr = e;
          name = n;

          var consumed = m[0];
          remaining = remaining.substring( consumed.length );

          break; // we've consumed one expr, so we can return now
        }
      }

      return {
        expr: expr,
        match: match,
        name: name
      };
    };

    // consume all leading whitespace
    var consumeWhitespace = function(){
      var match = remaining.match( /^\s+/ );

      if( match ){
        var consumed = match[0];
        remaining = remaining.substring( consumed.length );
      }
    };

    self[0] = newQuery(); // get started

    consumeWhitespace(); // get rid of leading whitespace
    for( ;; ){
      var check = consumeExpr();

      if( check.expr == null ){
        util.error( 'The selector `' + selector + '`is invalid' );
        return;
      } else {
        var args = [];
        for( var j = 1; j < check.match.length; j++ ){
          args.push( check.match[ j ] );
        }

        // let the token populate the selector object (i.e. in self[i])
        var ret = check.expr.populate.apply( self[ i ], args );

        if( ret === false ){ return; } // exit if population failed
      }

      // we're done when there's nothing left to parse
      if( remaining.match( /^\s*$/ ) ){
        break;
      }
    }

    self.length = i + 1;

    // adjust references for subject
    for( var j = 0; j < self.length; j++ ){
      var query = self[ j ];

      if( query.subject != null ){
        // go up the tree until we reach the subject
        for( ;; ){
          if( query.subject == query ){ break; } // done if subject is self

          if( query.parent != null ){ // swap parent/child reference
            var parent = query.parent;
            var child = query;

            child.parent = null;
            parent.child = child;

            query = parent; // go up the tree
          } else if( query.ancestor != null ){ // swap ancestor/descendant
            var ancestor = query.ancestor;
            var descendant = query;

            descendant.ancestor = null;
            ancestor.descendant = descendant;

            query = ancestor; // go up the tree
          } else {
            util.error( 'When adjusting references for the selector `' + query + '`, neither parent nor ancestor was found' );
            break;
          }
        } // for

        self[ j ] = query.subject; // subject should be the root query
      } // if
    } // for

  } else {
    util.error( 'A selector must be created from a string; found ' + selector );
    return;
  }

  self._private.invalid = false;

};

var selfn = Selector.prototype;

selfn.size = function(){
  return this.length;
};

selfn.eq = function( i ){
  return this[ i ];
};

var queryMatches = function( query, ele ){
  var ele_p = ele._private;

  // make single group-only selectors really cheap to check since they're the most common ones
  if( query.groupOnly ){
    return query.group === '*' || query.group === ele_p.group;
  }

  // check group
  if( query.group != null && query.group != '*' && query.group != ele_p.group ){
    return false;
  }

  var cy = ele.cy();

  // check colon selectors
  var allColonSelectorsMatch = true;
  for( var k = 0; k < query.colonSelectors.length; k++ ){
    var sel = query.colonSelectors[ k ];

    switch( sel ){
      case ':selected':
        allColonSelectorsMatch = ele.selected();
        break;
      case ':unselected':
        allColonSelectorsMatch = !ele.selected();
        break;
      case ':selectable':
        allColonSelectorsMatch = ele.selectable();
        break;
      case ':unselectable':
        allColonSelectorsMatch = !ele.selectable();
        break;
      case ':locked':
        allColonSelectorsMatch = ele.locked();
        break;
      case ':unlocked':
        allColonSelectorsMatch = !ele.locked();
        break;
      case ':visible':
        allColonSelectorsMatch = ele.visible();
        break;
      case ':hidden':
        allColonSelectorsMatch = !ele.visible();
        break;
      case ':transparent':
        allColonSelectorsMatch = ele.transparent();
        break;
      case ':grabbed':
        allColonSelectorsMatch = ele.grabbed();
        break;
      case ':free':
        allColonSelectorsMatch = !ele.grabbed();
        break;
      case ':removed':
        allColonSelectorsMatch = ele.removed();
        break;
      case ':inside':
        allColonSelectorsMatch = !ele.removed();
        break;
      case ':grabbable':
        allColonSelectorsMatch = ele.grabbable();
        break;
      case ':ungrabbable':
        allColonSelectorsMatch = !ele.grabbable();
        break;
      case ':animated':
        allColonSelectorsMatch = ele.animated();
        break;
      case ':unanimated':
        allColonSelectorsMatch = !ele.animated();
        break;
      case ':parent':
        allColonSelectorsMatch = ele.isNode() && ele.children().nonempty();
        break;
      case ':child':
      case ':nonorphan':
        allColonSelectorsMatch = ele.isNode() && ele.parent().nonempty();
        break;
      case ':orphan':
        allColonSelectorsMatch = ele.isNode() && ele.parent().empty();
        break;
      case ':loop':
        allColonSelectorsMatch = ele.isEdge() && ele.data( 'source' ) === ele.data( 'target' );
        break;
      case ':simple':
        allColonSelectorsMatch = ele.isEdge() && ele.data( 'source' ) !== ele.data( 'target' );
        break;
      case ':active':
        allColonSelectorsMatch = ele.active();
        break;
      case ':inactive':
        allColonSelectorsMatch = !ele.active();
        break;
      case ':touch':
        allColonSelectorsMatch = is.touch();
        break;
      case ':backgrounding':
        allColonSelectorsMatch = ele.backgrounding();
        break;
      case ':nonbackgrounding':
        allColonSelectorsMatch = !ele.backgrounding();
        break;
    }

    if( !allColonSelectorsMatch ) break;
  }
  if( !allColonSelectorsMatch ) return false;

  // check id
  var allIdsMatch = true;
  for( var k = 0; k < query.ids.length; k++ ){
    var id = query.ids[ k ];
    var actualId = ele_p.data.id;

    allIdsMatch = allIdsMatch && (id == actualId);

    if( !allIdsMatch ) break;
  }
  if( !allIdsMatch ) return false;

  // check classes
  var allClassesMatch = true;
  for( var k = 0; k < query.classes.length; k++ ){
    var cls = query.classes[ k ];

    allClassesMatch = allClassesMatch && ele.hasClass( cls );

    if( !allClassesMatch ) break;
  }
  if( !allClassesMatch ) return false;

  // generic checking for data/metadata
  var operandsMatch = function( params ){
    var allDataMatches = true;
    for( var k = 0; k < query[ params.name ].length; k++ ){
      var data = query[ params.name ][ k ];
      var operator = data.operator;
      var value = data.value;
      var field = data.field;
      var matches;

      if( operator != null && value != null ){

        var fieldVal = params.fieldValue( field );
        var fieldStr = !is.string( fieldVal ) && !is.number( fieldVal ) ? '' : '' + fieldVal;
        var valStr = '' + value;

        var caseInsensitive = false;
        if( operator.indexOf( '@' ) >= 0 ){
          fieldStr = fieldStr.toLowerCase();
          valStr = valStr.toLowerCase();

          operator = operator.replace( '@', '' );
          caseInsensitive = true;
        }

        var notExpr = false;
        if( operator.indexOf( '!' ) >= 0 ){
          operator = operator.replace( '!', '' );
          notExpr = true;
        }

        // if we're doing a case insensitive comparison, then we're using a STRING comparison
        // even if we're comparing numbers
        if( caseInsensitive ){
          value = valStr.toLowerCase();
          fieldVal = fieldStr.toLowerCase();
        }

        var isIneqCmp = false;

        switch( operator ){
        case '*=':
          matches = fieldStr.indexOf( valStr ) >= 0;
          break;
        case '$=':
          matches = fieldStr.indexOf( valStr, fieldStr.length - valStr.length ) >= 0;
          break;
        case '^=':
          matches = fieldStr.indexOf( valStr ) === 0;
          break;
        case '=':
          matches = fieldVal === value;
          break;
        case '>':
          isIneqCmp = true;
          matches = fieldVal > value;
          break;
        case '>=':
          isIneqCmp = true;
          matches = fieldVal >= value;
          break;
        case '<':
          isIneqCmp = true;
          matches = fieldVal < value;
          break;
        case '<=':
          isIneqCmp = true;
          matches = fieldVal <= value;
          break;
        default:
          matches = false;
          break;
        }

        // apply the not op, but null vals for inequalities should always stay non-matching
        if( notExpr && ( fieldVal != null || !isIneqCmp ) ){
          matches = !matches;
        }
      } else if( operator != null ){
        switch( operator ){
        case '?':
          matches = params.fieldTruthy( field );
          break;
        case '!':
          matches = !params.fieldTruthy( field );
          break;
        case '^':
          matches = params.fieldUndefined( field );
          break;
        }
      } else {
        matches = !params.fieldUndefined( field );
      }

      if( !matches ){
        allDataMatches = false;
        break;
      }
    } // for

    return allDataMatches;
  }; // operandsMatch

  // check data matches
  var allDataMatches = operandsMatch( {
    name: 'data',
    fieldValue: function( field ){
      return ele_p.data[ field ];
    },
    fieldUndefined: function( field ){
      return ele_p.data[ field ] === undefined;
    },
    fieldTruthy: function( field ){
      if( ele_p.data[ field ] ){
        return true;
      }
      return false;
    }
  } );

  if( !allDataMatches ){
    return false;
  }

  // check metadata matches
  var allMetaMatches = operandsMatch( {
    name: 'meta',
    fieldValue: function( field ){
      return ele[ field ]();
    },
    fieldUndefined: function( field ){
      return ele[ field ]() == null;
    },
    fieldTruthy: function( field ){
      if( ele[ field ]() ){
        return true;
      }
      return false;
    }
  } );

  if( !allMetaMatches ){
    return false;
  }

  // check collection
  if( query.collection != null ){
    var matchesAny = query.collection.hasElementWithId( ele.id() );

    if( !matchesAny ){
      return false;
    }
  }

  // check filter function
  if( query.filter != null && ele.collection().filter( query.filter ).size() === 0 ){
    return false;
  }

  // check parent/child relations
  var confirmRelations = function( query, eles ){
    if( query != null ){
      var matches = false;

      if( !cy.hasCompoundNodes() ){
        return false;
      }

      eles = eles(); // save cycles if query == null

      // query must match for at least one element (may be recursive)
      for( var i = 0; i < eles.length; i++ ){
        if( queryMatches( query, eles[ i ] ) ){
          matches = true;
          break;
        }
      }

      return matches;
    } else {
      return true;
    }
  };

  if( !confirmRelations( query.parent, function(){
    return ele.parent();
  } ) ){ return false; }

  if( !confirmRelations( query.ancestor, function(){
    return ele.parents();
  } ) ){ return false; }

  if( !confirmRelations( query.child, function(){
    return ele.children();
  } ) ){ return false; }

  if( !confirmRelations( query.descendant, function(){
    return ele.descendants();
  } ) ){ return false; }

  // we've reached the end, so we've matched everything for this query
  return true;
}; // queryMatches

// filter an existing collection
selfn.filter = function( collection ){
  var self = this;
  var cy = collection.cy();

  // don't bother trying if it's invalid
  if( self._private.invalid ){
    return cy.collection();
  }

  var selectorFunction = function( i, element ){
    for( var j = 0; j < self.length; j++ ){
      var query = self[ j ];

      if( queryMatches( query, element ) ){
        return true;
      }
    }

    return false;
  };

  if( self._private.selectorText == null ){
    selectorFunction = function(){ return true; };
  }

  var filteredCollection = collection.filter( selectorFunction );

  return filteredCollection;
}; // filter

// does selector match a single element?
selfn.matches = function( ele ){
  var self = this;

  // don't bother trying if it's invalid
  if( self._private.invalid ){
    return false;
  }

  for( var j = 0; j < self.length; j++ ){
    var query = self[ j ];

    if( queryMatches( query, ele ) ){
      return true;
    }
  }

  return false;
}; // filter

// ith query to string
selfn.toString = selfn.selector = function(){

  var str = '';

  var clean = function( obj ){
    if( obj == null ){
      return '';
    } else {
      return obj;
    }
  };

  var cleanVal = function( val ){
    if( is.string( val ) ){
      return '"' + val + '"';
    } else {
      return clean( val );
    }
  };

  var space = function( val ){
    return ' ' + val + ' ';
  };

  var queryToString = function( query ){
    var str = '';

    if( query.subject === query ){
      str += '$';
    }

    var group = clean( query.group );
    str += group.substring( 0, group.length - 1 );

    for( var j = 0; j < query.data.length; j++ ){
      var data = query.data[ j ];

      if( data.value ){
        str += '[' + data.field + space( clean( data.operator ) ) + cleanVal( data.value ) + ']';
      } else {
        str += '[' + clean( data.operator ) + data.field + ']';
      }
    }

    for( var j = 0; j < query.meta.length; j++ ){
      var meta = query.meta[ j ];
      str += '[[' + meta.field + space( clean( meta.operator ) ) + cleanVal( meta.value ) + ']]';
    }

    for( var j = 0; j < query.colonSelectors.length; j++ ){
      var sel = query.colonSelectors[ i ];
      str += sel;
    }

    for( var j = 0; j < query.ids.length; j++ ){
      var sel = '#' + query.ids[ i ];
      str += sel;
    }

    for( var j = 0; j < query.classes.length; j++ ){
      var sel = '.' + query.classes[ j ];
      str += sel;
    }

    if( query.parent != null ){
      str = queryToString( query.parent ) + ' > ' + str;
    }

    if( query.ancestor != null ){
      str = queryToString( query.ancestor ) + ' ' + str;
    }

    if( query.child != null ){
      str += ' > ' + queryToString( query.child );
    }

    if( query.descendant != null ){
      str += ' ' + queryToString( query.descendant );
    }

    return str;
  };

  for( var i = 0; i < this.length; i++ ){
    var query = this[ i ];

    str += queryToString( query );

    if( this.length > 1 && i < this.length - 1 ){
      str += ', ';
    }
  }

  return str;
};

module.exports = Selector;

},{"./is":86,"./util":104}],92:[function(require,module,exports){
'use strict';

var util = require( '../util' );
var is = require( '../is' );

var styfn = {};

// (potentially expensive calculation)
// apply the style to the element based on
// - its bypass
// - what selectors match it
styfn.apply = function( eles ){
  var self = this;
  var _p = self._private;

  if( _p.newStyle ){ // clear style caches
    _p.contextStyles = {};
    _p.propDiffs = {};

    self.cleanElements( eles, true );
  }

  for( var ie = 0; ie < eles.length; ie++ ){
    var ele = eles[ ie ];

    var cxtMeta = self.getContextMeta( ele );
    var cxtStyle = self.getContextStyle( cxtMeta );
    var app = self.applyContextStyle( cxtMeta, cxtStyle, ele );

    self.updateTransitions( ele, app.diffProps );
    self.updateStyleHints( ele );

  } // for elements

  _p.newStyle = false;
};

styfn.getPropertiesDiff = function( oldCxtKey, newCxtKey ){
  var self = this;
  var cache = self._private.propDiffs = self._private.propDiffs || {};
  var dualCxtKey = oldCxtKey + '-' + newCxtKey;
  var cachedVal = cache[ dualCxtKey ];

  if( cachedVal ){
    return cachedVal;
  }

  var diffProps = [];
  var addedProp = {};

  for( var i = 0; i < self.length; i++ ){
    var cxt = self[ i ];
    var oldHasCxt = oldCxtKey[ i ] === 't';
    var newHasCxt = newCxtKey[ i ] === 't';
    var cxtHasDiffed = oldHasCxt !== newHasCxt;
    var cxtHasMappedProps = cxt.mappedProperties.length > 0;

    if( cxtHasDiffed || cxtHasMappedProps ){
      var props;

      if( cxtHasDiffed && cxtHasMappedProps ){
        props = cxt.properties; // suffices b/c mappedProperties is a subset of properties
      } else if( cxtHasDiffed ){
        props = cxt.properties; // need to check them all
      } else if( cxtHasMappedProps ){
        props = cxt.mappedProperties; // only need to check mapped
      }

      for( var j = 0; j < props.length; j++ ){
        var prop = props[ j ];
        var name = prop.name;

        // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter
        // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result
        // is cached)
        var laterCxtOverrides = false;
        for( var k = i + 1; k < self.length; k++ ){
          var laterCxt = self[ k ];
          var hasLaterCxt = newCxtKey[ k ] === 't';

          if( !hasLaterCxt ){ continue; } // can't override unless the context is active

          laterCxtOverrides = laterCxt.properties[ prop.name ] != null;

          if( laterCxtOverrides ){ break; } // exit early as long as one later context overrides
        }

        if( !addedProp[ name ] && !laterCxtOverrides ){
          addedProp[ name ] = true;
          diffProps.push( name );
        }
      } // for props
    } // if

  } // for contexts

  cache[ dualCxtKey ] = diffProps;
  return diffProps;
};

styfn.getContextMeta = function( ele ){
  var self = this;
  var cxtKey = '';
  var diffProps;
  var prevKey = ele._private.styleCxtKey || '';

  if( self._private.newStyle ){
    prevKey = ''; // since we need to apply all style if a fresh stylesheet
  }

  // get the cxt key
  for( var i = 0; i < self.length; i++ ){
    var context = self[ i ];
    var contextSelectorMatches = context.selector && context.selector.matches( ele ); // NB: context.selector may be null for 'core'

    if( contextSelectorMatches ){
      cxtKey += 't';
    } else {
      cxtKey += 'f';
    }
  } // for context

  diffProps = self.getPropertiesDiff( prevKey, cxtKey );

  ele._private.styleCxtKey = cxtKey;

  return {
    key: cxtKey,
    diffPropNames: diffProps
  };
};

// gets a computed ele style object based on matched contexts
styfn.getContextStyle = function( cxtMeta ){
  var cxtKey = cxtMeta.key;
  var self = this;
  var cxtStyles = this._private.contextStyles = this._private.contextStyles || {};

  // if already computed style, returned cached copy
  if( cxtStyles[ cxtKey ] ){ return cxtStyles[ cxtKey ]; }

  var style = {
    _private: {
      key: cxtKey
    }
  };

  for( var i = 0; i < self.length; i++ ){
    var cxt = self[ i ];
    var hasCxt = cxtKey[ i ] === 't';

    if( !hasCxt ){ continue; }

    for( var j = 0; j < cxt.properties.length; j++ ){
      var prop = cxt.properties[ j ];

      style[ prop.name ] = prop;
    }
  }

  cxtStyles[ cxtKey ] = style;
  return style;
};

styfn.applyContextStyle = function( cxtMeta, cxtStyle, ele ){
  var self = this;
  var diffProps = cxtMeta.diffPropNames;
  var retDiffProps = {};

  for( var i = 0; i < diffProps.length; i++ ){
    var diffPropName = diffProps[ i ];
    var cxtProp = cxtStyle[ diffPropName ];
    var eleProp = ele.pstyle( diffPropName );

    if( !cxtProp ){ // no context prop means delete
      if( !eleProp ){
        continue; // no existing prop means nothing needs to be removed
        // nb affects initial application on mapped values like control-point-distances
      } else if( eleProp.bypass ){
        cxtProp = { name: diffPropName, deleteBypassed: true };
      } else {
        cxtProp = { name: diffPropName, delete: true };
      }
    }

    // save cycles when the context prop doesn't need to be applied
    if( eleProp === cxtProp ){ continue; }

    var retDiffProp = retDiffProps[ diffPropName ] = {
      prev: eleProp
    };

    self.applyParsedProperty( ele, cxtProp );

    retDiffProp.next = ele.pstyle( diffPropName );

    if( retDiffProp.next && retDiffProp.next.bypass ){
      retDiffProp.next = retDiffProp.next.bypassed;
    }
  }

  return {
    diffProps: retDiffProps
  };
};

styfn.updateStyleHints = function(ele){
  var _p = ele._private;
  var self = this;

  if( ele.removed() ){ return; }

  // set whether has pie or not; for greater efficiency
  var hasPie = false;
  if( _p.group === 'nodes' ){
    for( var i = 1; i <= self.pieBackgroundN; i++ ){ // 1..N
      var size = ele.pstyle( 'pie-' + i + '-background-size' ).value;

      if( size > 0 ){
        hasPie = true;
        break;
      }
    }
  }

  _p.hasPie = hasPie;

  var transform = ele.pstyle( 'text-transform' ).strValue;
  var content = ele.pstyle( 'label' ).strValue;
  var srcContent = ele.pstyle( 'source-label' ).strValue;
  var tgtContent = ele.pstyle( 'target-label' ).strValue;
  var fStyle = ele.pstyle( 'font-style' ).strValue;
  var size = ele.pstyle( 'font-size' ).pfValue + 'px';
  var family = ele.pstyle( 'font-family' ).strValue;
  // var variant = style['font-variant'].strValue;
  var weight = ele.pstyle( 'font-weight' ).strValue;
  var valign = ele.pstyle( 'text-valign' ).strValue;
  var halign = ele.pstyle( 'text-valign' ).strValue;
  var oWidth = ele.pstyle( 'text-outline-width' ).pfValue;
  var wrap = ele.pstyle( 'text-wrap' ).strValue;
  var wrapW = ele.pstyle( 'text-max-width' ).pfValue;
  var labelStyleKey = fStyle + '$' + size + '$' + family + '$' + weight + '$' + transform + '$' + valign + '$' + halign + '$' + oWidth + '$' + wrap + '$' + wrapW;
  _p.labelStyleKey = labelStyleKey;
  _p.sourceLabelKey = labelStyleKey + '$' + srcContent;
  _p.targetLabelKey = labelStyleKey + '$' + tgtContent;
  _p.labelKey = labelStyleKey + '$' + content;
  _p.fontKey = fStyle + '$' + weight + '$' + size + '$' + family;

  _p.styleKey = Date.now();
};

// apply a property to the style (for internal use)
// returns whether application was successful
//
// now, this function flattens the property, and here's how:
//
// for parsedProp:{ bypass: true, deleteBypass: true }
// no property is generated, instead the bypass property in the
// element's style is replaced by what's pointed to by the `bypassed`
// field in the bypass property (i.e. restoring the property the
// bypass was overriding)
//
// for parsedProp:{ mapped: truthy }
// the generated flattenedProp:{ mapping: prop }
//
// for parsedProp:{ bypass: true }
// the generated flattenedProp:{ bypassed: parsedProp }
styfn.applyParsedProperty = function( ele, parsedProp ){
  var self = this;
  var prop = parsedProp;
  var style = ele._private.style;
  var fieldVal, flatProp;
  var types = self.types;
  var type = self.properties[ prop.name ].type;
  var propIsBypass = prop.bypass;
  var origProp = style[ prop.name ];
  var origPropIsBypass = origProp && origProp.bypass;
  var _p = ele._private;
  var flatPropMapping = 'mapping';

  // edges connected to compound nodes can not be haystacks
  if(
    parsedProp.name === 'curve-style'
    && parsedProp.value === 'haystack'
    && ele.isEdge()
    && ( ele.isLoop() || ele.source().isParent() || ele.target().isParent() )
  ){
    prop = parsedProp = this.parse( parsedProp.name, 'bezier', propIsBypass );
  }

  if( prop.delete ){ // delete the property and use the default value on falsey value
    style[ prop.name ] = undefined;

    return true;
  }

  if( prop.deleteBypassed ){ // delete the property that the
    if( !origProp ){
      return true; // can't delete if no prop

    } else if( origProp.bypass ){ // delete bypassed
      origProp.bypassed = undefined;
      return true;

    } else {
      return false; // we're unsuccessful deleting the bypassed
    }
  }

  // check if we need to delete the current bypass
  if( prop.deleteBypass ){ // then this property is just here to indicate we need to delete
    if( !origProp ){
      return true; // property is already not defined

    } else if( origProp.bypass ){ // then replace the bypass property with the original
      // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)
      style[ prop.name ] = origProp.bypassed;
      return true;

    } else {
      return false; // we're unsuccessful deleting the bypass
    }
  }

  var printMappingErr = function(){
    util.error( 'Do not assign mappings to elements without corresponding data (e.g. ele `' + ele.id() + '` for property `' + prop.name + '` with data field `' + prop.field + '`); try a `[' + prop.field + ']` selector to limit scope to elements with `' + prop.field + '` defined' );
  };

  // put the property in the style objects
  switch( prop.mapped ){ // flatten the property if mapped
  case types.mapData:
  case types.mapLayoutData:
  case types.mapScratch:

    var isLayout = prop.mapped === types.mapLayoutData;
    var isScratch = prop.mapped === types.mapScratch;

    // flatten the field (e.g. data.foo.bar)
    var fields = prop.field.split( '.' );
    var fieldVal;

    if( isScratch || isLayout ){
      fieldVal = _p.scratch;
    } else {
      fieldVal = _p.data;
    }

    for( var i = 0; i < fields.length && fieldVal; i++ ){
      var field = fields[ i ];
      fieldVal = fieldVal[ field ];
    }

    var percent;
    if( !is.number( fieldVal ) ){ // then keep the mapping but assume 0% for now
      percent = 0;
    } else {
      percent = (fieldVal - prop.fieldMin) / (prop.fieldMax - prop.fieldMin);
    }

    // make sure to bound percent value
    if( percent < 0 ){
      percent = 0;
    } else if( percent > 1 ){
      percent = 1;
    }

    if( type.color ){
      var r1 = prop.valueMin[0];
      var r2 = prop.valueMax[0];
      var g1 = prop.valueMin[1];
      var g2 = prop.valueMax[1];
      var b1 = prop.valueMin[2];
      var b2 = prop.valueMax[2];
      var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
      var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];

      var clr = [
        Math.round( r1 + (r2 - r1) * percent ),
        Math.round( g1 + (g2 - g1) * percent ),
        Math.round( b1 + (b2 - b1) * percent ),
        Math.round( a1 + (a2 - a1) * percent )
      ];

      flatProp = { // colours are simple, so just create the flat property instead of expensive string parsing
        bypass: prop.bypass, // we're a bypass if the mapping property is a bypass
        name: prop.name,
        value: clr,
        strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'
      };

    } else if( type.number ){
      var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
      flatProp = this.parse( prop.name, calcValue, prop.bypass, flatPropMapping );

    } else {
      return false; // can only map to colours and numbers
    }

    if( !flatProp ){ // if we can't flatten the property, then use the origProp so we still keep the mapping itself
      flatProp = this.parse( prop.name, origProp.strValue, prop.bypass, flatPropMapping );
    }

    if( !flatProp ){ printMappingErr(); }
    flatProp.mapping = prop; // keep a reference to the mapping
    prop = flatProp; // the flattened (mapped) property is the one we want

    break;

  // direct mapping
  case types.data:
  case types.layoutData:
  case types.scratch:
    var isLayout = prop.mapped === types.layoutData;
    var isScratch = prop.mapped === types.scratch;

    // flatten the field (e.g. data.foo.bar)
    var fields = prop.field.split( '.' );
    var fieldVal;

    if( isScratch || isLayout ){
      fieldVal = _p.scratch;
    } else {
      fieldVal = _p.data;
    }

    if( fieldVal ){ for( var i = 0; i < fields.length; i++ ){
      var field = fields[ i ];
      fieldVal = fieldVal[ field ];
    } }

    flatProp = this.parse( prop.name, fieldVal, prop.bypass, flatPropMapping );

    if( !flatProp ){ // if we can't flatten the property, then use the origProp so we still keep the mapping itself
      var flatPropVal = origProp ? origProp.strValue : '';

      flatProp = this.parse( prop.name, flatPropVal, prop.bypass, flatPropMapping );
    }

    if( !flatProp ){ printMappingErr(); }
    flatProp.mapping = prop; // keep a reference to the mapping
    prop = flatProp; // the flattened (mapped) property is the one we want

    break;

  case types.fn:
    var fn = prop.value;
    var fnRetVal = fn( ele );

    flatProp = this.parse( prop.name, fnRetVal, prop.bypass, flatPropMapping );
    flatProp.mapping = prop; // keep a reference to the mapping
    prop = flatProp; // the flattened (mapped) property is the one we want

    break;

  case undefined:
    break; // just set the property

  default:
    return false; // not a valid mapping
  }

  // if the property is a bypass property, then link the resultant property to the original one
  if( propIsBypass ){
    if( origPropIsBypass ){ // then this bypass overrides the existing one
      prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass
    } else { // then link the orig prop to the new bypass
      prop.bypassed = origProp;
    }

    style[ prop.name ] = prop; // and set

  } else { // prop is not bypass
    if( origPropIsBypass ){ // then keep the orig prop (since it's a bypass) and link to the new prop
      origProp.bypassed = prop;
    } else { // then just replace the old prop with the new one
      style[ prop.name ] = prop;
    }
  }

  this.checkZOrderTrigger( ele, prop.name, origProp ? origProp.value : null, prop.value );

  return true;
};

styfn.cleanElements = function( eles, keepBypasses ){
  var self = this;
  var props = self.properties;

  for( var i = 0; i < eles.length; i++ ){
    var ele = eles[i];

    if( !keepBypasses ){
      ele._private.style = {};
    } else {
      var style = ele._private.style;

      for( var j = 0; j < props.length; j++ ){
        var prop = props[j];
        var eleProp = style[ prop.name ];

        if( eleProp ){
          if( eleProp.bypass ){
            eleProp.bypassed = null;
          } else {
            style[ prop.name ] = null;
          }
        }
      }
    }
  }
};

// updates the visual style for all elements (useful for manual style modification after init)
styfn.update = function(){
  var cy = this._private.cy;
  var eles = cy.mutableElements();

  eles.updateStyle();
};

// just update the functional properties (i.e. mappings) in the elements'
// styles (less expensive than recalculation)
styfn.updateMappers = function( eles ){
  var self = this;

  for( var i = 0; i < eles.length; i++ ){ // for each ele
    var ele = eles[ i ];
    var style = ele._private.style;

    for( var j = 0; j < self.properties.length; j++ ){ // for each prop
      var prop = self.properties[ j ];
      var propInStyle = style[ prop.name ];

      if( propInStyle && propInStyle.mapping ){
        var mapping = propInStyle.mapping;
        this.applyParsedProperty( ele, mapping ); // reapply the mapping property
      }
    }

    this.updateStyleHints( ele );
  }
};

// diffProps : { name => { prev, next } }
styfn.updateTransitions = function( ele, diffProps, isBypass ){
  var self = this;
  var _p = ele._private;
  var props = ele.pstyle( 'transition-property' ).value;
  var duration = ele.pstyle( 'transition-duration' ).pfValue;
  var delay = ele.pstyle( 'transition-delay' ).pfValue;

  if( props.length > 0 && duration > 0 ){

    var css = {};

    // build up the style to animate towards
    var anyPrev = false;
    for( var i = 0; i < props.length; i++ ){
      var prop = props[ i ];
      var styProp = ele.pstyle( prop );
      var diffProp = diffProps[ prop ];

      if( !diffProp ){ continue; }

      var prevProp = diffProp.prev;
      var fromProp = prevProp;
      var toProp = diffProp.next != null ? diffProp.next : styProp;
      var diff = false;
      var initVal;
      var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)

      if( !fromProp ){ continue; }

      // consider px values
      if( is.number( fromProp.pfValue ) && is.number( toProp.pfValue ) ){
        diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy
        initVal = fromProp.pfValue + initDt * diff;

      // consider numerical values
      } else if( is.number( fromProp.value ) && is.number( toProp.value ) ){
        diff = toProp.value - fromProp.value; // nonzero is truthy
        initVal = fromProp.value + initDt * diff;

      // consider colour values
      } else if( is.array( fromProp.value ) && is.array( toProp.value ) ){
        diff = fromProp.value[0] !== toProp.value[0]
          || fromProp.value[1] !== toProp.value[1]
          || fromProp.value[2] !== toProp.value[2]
        ;

        initVal = fromProp.strValue;
      }

      // the previous value is good for an animation only if it's different
      if( diff ){
        css[ prop ] = toProp.strValue; // to val
        this.applyBypass( ele, prop, initVal ); // from val
        anyPrev = true;
      }

    } // end if props allow ani

    // can't transition if there's nothing previous to transition from
    if( !anyPrev ){ return; }

    _p.transitioning = true;

    ele.stop();

    if( delay > 0 ){
      ele.delay( delay );
    }

    ele.animate( {
      css: css
    }, {
      duration: duration,
      easing: ele.pstyle( 'transition-timing-function' ).value,
      queue: false,
      complete: function(){
        if( !isBypass ){
          self.removeBypasses( ele, props );
        }

        _p.transitioning = false;
      }
    } );

  } else if( _p.transitioning ){
    ele.stop();

    this.removeBypasses( ele, props );

    _p.transitioning = false;
  }
};

styfn.checkZOrderTrigger = function( ele, name, fromValue, toValue ){
  var prop = this.properties[ name ];

  if( prop.triggersZOrder && ( fromValue == null || prop.triggersZOrder( fromValue, toValue ) ) ){
    this._private.cy.notify({
      type: 'zorder',
      eles: ele
    });
  }
};

module.exports = styfn;

},{"../is":86,"../util":104}],93:[function(require,module,exports){
'use strict';

var is = require( '../is' );
var util = require( '../util' );

var styfn = {};

// bypasses are applied to an existing style on an element, and just tacked on temporarily
// returns true iff application was successful for at least 1 specified property
styfn.applyBypass = function( eles, name, value, updateTransitions ){
  var self = this;
  var props = [];
  var isBypass = true;

  // put all the properties (can specify one or many) in an array after parsing them
  if( name === '*' || name === '**' ){ // apply to all property names

    if( value !== undefined ){
      for( var i = 0; i < self.properties.length; i++ ){
        var prop = self.properties[ i ];
        var name = prop.name;

        var parsedProp = this.parse( name, value, true );

        if( parsedProp ){
          props.push( parsedProp );
        }
      }
    }

  } else if( is.string( name ) ){ // then parse the single property
    var parsedProp = this.parse( name, value, true );

    if( parsedProp ){
      props.push( parsedProp );
    }
  } else if( is.plainObject( name ) ){ // then parse each property
    var specifiedProps = name;
    updateTransitions = value;

    for( var i = 0; i < self.properties.length; i++ ){
      var prop = self.properties[ i ];
      var name = prop.name;
      var value = specifiedProps[ name ];

      if( value === undefined ){ // try camel case name too
        value = specifiedProps[ util.dash2camel( name ) ];
      }

      if( value !== undefined ){
        var parsedProp = this.parse( name, value, true );

        if( parsedProp ){
          props.push( parsedProp );
        }
      }
    }
  } else { // can't do anything without well defined properties
    return false;
  }

  // we've failed if there are no valid properties
  if( props.length === 0 ){ return false; }

  // now, apply the bypass properties on the elements
  var ret = false; // return true if at least one succesful bypass applied
  for( var i = 0; i < eles.length; i++ ){ // for each ele
    var ele = eles[ i ];
    var diffProps = {};
    var diffProp;

    for( var j = 0; j < props.length; j++ ){ // for each prop
      var prop = props[ j ];

      if( updateTransitions ){
        var prevProp = ele.pstyle( prop.name );
        diffProp = diffProps[ prop.name ] = { prev: prevProp };
      }

      ret = this.applyParsedProperty( ele, prop ) || ret;

      if( updateTransitions ){
        diffProp.next = ele.pstyle( prop.name );
      }

    } // for props

    if( ret ){
      this.updateStyleHints( ele );
    }

    if( updateTransitions ){
      this.updateTransitions( ele, diffProps, isBypass );
    }
  } // for eles

  return ret;
};

// only useful in specific cases like animation
styfn.overrideBypass = function( eles, name, value ){
  name = util.camel2dash( name );

  for( var i = 0; i < eles.length; i++ ){
    var ele = eles[ i ];
    var prop = ele._private.style[ name ];
    var type = this.properties[ name ].type;
    var isColor = type.color;
    var isMulti = type.mutiple;

    if( !prop || !prop.bypass ){ // need a bypass if one doesn't exist
      this.applyBypass( ele, name, value );
      continue;
    }

    var oldValue = prop.pfValue != null ? prop.pfValue : prop.value;

    prop.value = value;

    if( prop.pfValue != null ){
      prop.pfValue = value;
    }

    if( isColor ){
      prop.strValue = 'rgb(' + value.join( ',' ) + ')';
    } else if( isMulti ){
      prop.strValue = value.join( ' ' );
    } else {
      prop.strValue = '' + value;
    }

    this.checkZOrderTrigger( ele, name, oldValue, value );
  }
};

styfn.removeAllBypasses = function( eles, updateTransitions ){
  return this.removeBypasses( eles, this.propertyNames, updateTransitions );
};

styfn.removeBypasses = function( eles, props, updateTransitions ){
  var isBypass = true;

  for( var j = 0; j < eles.length; j++ ){
    var ele = eles[ j ];
    var diffProps = {};

    for( var i = 0; i < props.length; i++ ){
      var name = props[ i ];
      var prop = this.properties[ name ];
      var prevProp = ele.pstyle( prop.name );

      if( !prevProp || !prevProp.bypass ){
        // if a bypass doesn't exist for the prop, nothing needs to be removed
        continue;
      }

      var value = ''; // empty => remove bypass
      var parsedProp = this.parse( name, value, true );
      var diffProp = diffProps[ prop.name ] = { prev: prevProp };

      this.applyParsedProperty( ele, parsedProp );

      diffProp.next = ele.pstyle( prop.name );
    } // for props

    this.updateStyleHints( ele );

    if( updateTransitions ){
      this.updateTransitions( ele, diffProps, isBypass );
    }
  } // for eles
};

module.exports = styfn;

},{"../is":86,"../util":104}],94:[function(require,module,exports){
'use strict';

var window = require( '../window' );

var styfn = {};

// gets what an em size corresponds to in pixels relative to a dom element
styfn.getEmSizeInPixels = function(){
  var px = this.containerCss( 'font-size' );

  if( px != null ){
    return parseFloat( px );
  } else {
    return 1; // for headless
  }
};

// gets css property from the core container
styfn.containerCss = function( propName ){
  var cy = this._private.cy;
  var domElement = cy.container();

  if( window && domElement && window.getComputedStyle ){
    return window.getComputedStyle( domElement ).getPropertyValue( propName );
  }
};

module.exports = styfn;

},{"../window":111}],95:[function(require,module,exports){
'use strict';

var util = require( '../util' );
var is = require( '../is' );

var styfn = {};

// gets the rendered style for an element
styfn.getRenderedStyle = function( ele, prop ){
  if( prop ){
    return this.getStylePropertyValue( ele, prop, true );
  } else {
    return this.getRawStyle( ele, true );
  }
};

// gets the raw style for an element
styfn.getRawStyle = function( ele, isRenderedVal ){
  var self = this;
  var ele = ele[0]; // insure it's an element

  if( ele ){
    var rstyle = {};

    for( var i = 0; i < self.properties.length; i++ ){
      var prop = self.properties[ i ];
      var val = self.getStylePropertyValue( ele, prop.name, isRenderedVal );

      if( val != null ){
        rstyle[ prop.name ] = val;
        rstyle[ util.dash2camel( prop.name ) ] = val;
      }
    }

    return rstyle;
  }
};

styfn.getStylePropertyValue = function( ele, propName, isRenderedVal ){
  var self = this;
  var ele = ele[0]; // insure it's an element

  if( ele ){
    var prop = self.properties[ propName ];
    var type = prop.type;
    var styleProp = ele.pstyle( prop.name );
    var zoom = ele.cy().zoom();

    if( styleProp ){
      var units = styleProp.units ? type.implicitUnits || 'px' : null;
      var val = units ? [].concat( styleProp.pfValue ).map( function( pfValue ){
        return ( pfValue * (isRenderedVal ? zoom : 1) ) + units;
      } ).join( ' ' ) : styleProp.strValue;

      return val;
    }
  }
};

styfn.getAnimationStartStyle = function( ele, aniProps ){
  var rstyle = {};

  for( var i = 0; i < aniProps.length; i++ ){
    var aniProp = aniProps[ i ];
    var name = aniProp.name;

    var styleProp = ele.pstyle( name );

    if( styleProp !== undefined ){ // then make a prop of it
      if( is.plainObject( styleProp ) ){
        styleProp = this.parse( name, styleProp.strValue );
      } else {
        styleProp = this.parse( name, styleProp );
      }
    }

    if( styleProp ){
      rstyle[ name ] = styleProp;
    }
  }

  return rstyle;
};

styfn.getPropsList = function( propsObj ){
  var self = this;
  var rstyle = [];
  var style = propsObj;
  var props = self.properties;

  if( style ){
    var names = Object.keys( style );

    for( var i = 0; i < names.length; i++ ){
      var name = names[i];
      var val = style[ name ];
      var prop = props[ name ] || props[ util.camel2dash( name ) ];
      var styleProp = this.parse( prop.name, val );

      rstyle.push( styleProp );
    }
  }

  return rstyle;
};

module.exports = styfn;

},{"../is":86,"../util":104}],96:[function(require,module,exports){
'use strict';

var is = require( '../is' );
var util = require( '../util' );
var Selector = require( '../selector' );

var Style = function( cy ){

  if( !(this instanceof Style) ){
    return new Style( cy );
  }

  if( !is.core( cy ) ){
    util.error( 'A style must have a core reference' );
    return;
  }

  this._private = {
    cy: cy,
    coreStyle: {}
  };

  this.length = 0;

  this.resetToDefault();
};

var styfn = Style.prototype;

styfn.instanceString = function(){
  return 'style';
};

// remove all contexts
styfn.clear = function(){
  for( var i = 0; i < this.length; i++ ){
    this[ i ] = undefined;
  }
  this.length = 0;

  var _p = this._private;

  _p.newStyle = true;

  return this; // chaining
};

styfn.resetToDefault = function(){
  this.clear();
  this.addDefaultStylesheet();

  return this;
};

// builds a style object for the 'core' selector
styfn.core = function(){
  return this._private.coreStyle;
};

// create a new context from the specified selector string and switch to that context
styfn.selector = function( selectorStr ){
  // 'core' is a special case and does not need a selector
  var selector = selectorStr === 'core' ? null : new Selector( selectorStr );

  var i = this.length++; // new context means new index
  this[ i ] = {
    selector: selector,
    properties: [],
    mappedProperties: [],
    index: i
  };

  return this; // chaining
};

// add one or many css rules to the current context
styfn.css = function(){
  var self = this;
  var args = arguments;

  switch( args.length ){
  case 1:
    var map = args[0];

    for( var i = 0; i < self.properties.length; i++ ){
      var prop = self.properties[ i ];
      var mapVal = map[ prop.name ];

      if( mapVal === undefined ){
        mapVal = map[ util.dash2camel( prop.name ) ];
      }

      if( mapVal !== undefined ){
        this.cssRule( prop.name, mapVal );
      }
    }

    break;

  case 2:
    this.cssRule( args[0], args[1] );
    break;

  default:
    break; // do nothing if args are invalid
  }

  return this; // chaining
};
styfn.style = styfn.css;

// add a single css rule to the current context
styfn.cssRule = function( name, value ){
  // name-value pair
  var property = this.parse( name, value );

  // add property to current context if valid
  if( property ){
    var i = this.length - 1;
    this[ i ].properties.push( property );
    this[ i ].properties[ property.name ] = property; // allow access by name as well

    if( property.name.match( /pie-(\d+)-background-size/ ) && property.value ){
      this._private.hasPie = true;
    }

    if( property.mapped ){
      this[ i ].mappedProperties.push( property );
    }

    // add to core style if necessary
    var currentSelectorIsCore = !this[ i ].selector;
    if( currentSelectorIsCore ){
      this._private.coreStyle[ property.name ] = property;
    }
  }

  return this; // chaining
};

// static function
Style.fromJson = function( cy, json ){
  var style = new Style( cy );

  style.fromJson( json );

  return style;
};

Style.fromString = function( cy, string ){
  return new Style( cy ).fromString( string );
};

[
  require( './apply' ),
  require( './bypass' ),
  require( './container' ),
  require( './get-for-ele' ),
  require( './json' ),
  require( './string-sheet' ),
  require( './properties' ),
  require( './parse' )
].forEach( function( props ){
  util.extend( styfn, props );
} );


Style.types = styfn.types;
Style.properties = styfn.properties;

module.exports = Style;

},{"../is":86,"../selector":91,"../util":104,"./apply":92,"./bypass":93,"./container":94,"./get-for-ele":95,"./json":97,"./parse":98,"./properties":99,"./string-sheet":100}],97:[function(require,module,exports){
'use strict';

var styfn = {};

styfn.applyFromJson = function( json ){
  var style = this;

  for( var i = 0; i < json.length; i++ ){
    var context = json[ i ];
    var selector = context.selector;
    var props = context.style || context.css;
    var names = Object.keys( props );

    style.selector( selector ); // apply selector

    for( var j = 0; j < names.length; j++ ){
      var name = names[j];
      var value = props[ name ];

      style.css( name, value ); // apply property
    }
  }

  return style;
};

// accessible cy.style() function
styfn.fromJson = function( json ){
  var style = this;

  style.resetToDefault();
  style.applyFromJson( json );

  return style;
};

// get json from cy.style() api
styfn.json = function(){
  var json = [];

  for( var i = this.defaultLength; i < this.length; i++ ){
    var cxt = this[ i ];
    var selector = cxt.selector;
    var props = cxt.properties;
    var css = {};

    for( var j = 0; j < props.length; j++ ){
      var prop = props[ j ];
      css[ prop.name ] = prop.strValue;
    }

    json.push( {
      selector: !selector ? 'core' : selector.toString(),
      style: css
    } );
  }

  return json;
};

module.exports = styfn;

},{}],98:[function(require,module,exports){
'use strict';

var util = require( '../util' );
var is = require( '../is' );
var math = require( '../math' );

var styfn = {};

// a caching layer for property parsing
styfn.parse = function( name, value, propIsBypass, propIsFlat ){
  var self = this;

  // function values can't be cached in all cases, and there isn't much benefit of caching them anyway
  if( is.fn( value ) ){
    return self.parseImplWarn( name, value, propIsBypass, propIsFlat );
  }

  var flatKey = ( propIsFlat === 'mapping' || propIsFlat === true || propIsFlat === false || propIsFlat == null ) ? 'dontcare' : propIsFlat;
  var argHash = [ name, value, propIsBypass, flatKey ].join( '$' );
  var propCache = self.propCache = self.propCache || {};
  var ret;

  if( !(ret = propCache[ argHash ]) ){
    ret = propCache[ argHash ] = self.parseImplWarn( name, value, propIsBypass, propIsFlat );
  }

  // - bypasses can't be shared b/c the value can be changed by animations or otherwise overridden
  // - mappings can't be shared b/c mappings are per-element
  if( propIsBypass || propIsFlat === 'mapping' ){
    // need a copy since props are mutated later in their lifecycles
    ret = util.copy( ret );

    if( ret ){
      ret.value = util.copy( ret.value ); // because it could be an array, e.g. colour
    }
  }

  return ret;
};

styfn.parseImplWarn = function( name, value, propIsBypass, propIsFlat ){
  var prop = this.parseImpl( name, value, propIsBypass, propIsFlat );

  if( !prop && value != null ){
    util.error('The style property `%s: %s` is invalid', name, value);
  }

  return prop;
};

// parse a property; return null on invalid; return parsed property otherwise
// fields :
// - name : the name of the property
// - value : the parsed, native-typed value of the property
// - strValue : a string value that represents the property value in valid css
// - bypass : true iff the property is a bypass property
styfn.parseImpl = function( name, value, propIsBypass, propIsFlat ){
  var self = this;

  name = util.camel2dash( name ); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')

  var property = self.properties[ name ];
  var passedValue = value;
  var types = self.types;

  if( !property ){ return null; } // return null on property of unknown name
  if( value === undefined || value === null ){ return null; } // can't assign null

  // the property may be an alias
  if( property.alias ){
    property = property.pointsTo;
    name = property.name;
  }

  var valueIsString = is.string( value );
  if( valueIsString ){ // trim the value to make parsing easier
    value = value.trim();
  }

  var type = property.type;
  if( !type ){ return null; } // no type, no luck

  // check if bypass is null or empty string (i.e. indication to delete bypass property)
  if( propIsBypass && (value === '' || value === null) ){
    return {
      name: name,
      value: value,
      bypass: true,
      deleteBypass: true
    };
  }

  // check if value is a function used as a mapper
  if( is.fn( value ) ){
    return {
      name: name,
      value: value,
      strValue: 'fn',
      mapped: types.fn,
      bypass: propIsBypass
    };
  }

  // check if value is mapped
  var data, mapData, layoutData, mapLayoutData, scratch, mapScratch;
  if( !valueIsString || propIsFlat ){
    // then don't bother to do the expensive regex checks

  } else if(
    ( data = new RegExp( types.data.regex ).exec( value ) ) ||
    ( layoutData = new RegExp( types.layoutData.regex ).exec( value ) ) ||
    ( scratch = new RegExp( types.scratch.regex ).exec( value ) )
  ){
    if( propIsBypass ){ return false; } // mappers not allowed in bypass

    var mapped;
    if( data ){
      mapped = types.data;
    } else if( layoutData ){
      mapped = types.layoutData;
    } else {
      mapped = types.scratch;
    }

    data = data || layoutData || scratch;

    return {
      name: name,
      value: data,
      strValue: '' + value,
      mapped: mapped,
      field: data[1],
      bypass: propIsBypass
    };

  } else if(
    ( mapData = new RegExp( types.mapData.regex ).exec( value ) ) ||
    ( mapLayoutData = new RegExp( types.mapLayoutData.regex ).exec( value ) ) ||
    ( mapScratch = new RegExp( types.mapScratch.regex ).exec( value ) )
  ){
    if( propIsBypass ){ return false; } // mappers not allowed in bypass
    if( type.multiple ){ return false; } // impossible to map to num

    var mapped;
    if( mapData ){
      mapped = types.mapData;
    } else if( mapLayoutData ){
      mapped = types.mapLayoutData;
    } else {
      mapped = types.mapScratch;
    }

    mapData = mapData || mapLayoutData || mapScratch;

    // we can map only if the type is a colour or a number
    if( !(type.color || type.number) ){ return false; }

    var valueMin = this.parse( name, mapData[4] ); // parse to validate
    if( !valueMin || valueMin.mapped ){ return false; } // can't be invalid or mapped

    var valueMax = this.parse( name, mapData[5] ); // parse to validate
    if( !valueMax || valueMax.mapped ){ return false; } // can't be invalid or mapped

    // check if valueMin and valueMax are the same
    if( valueMin.value === valueMax.value ){
      return false; // can't make much of a mapper without a range

    } else if( type.color ){
      var c1 = valueMin.value;
      var c2 = valueMax.value;

      var same = c1[0] === c2[0] // red
        && c1[1] === c2[1] // green
        && c1[2] === c2[2] // blue
        && ( // optional alpha
          c1[3] === c2[3] // same alpha outright
          || (
            (c1[3] == null || c1[3] === 1) // full opacity for colour 1?
            &&
            (c2[3] == null || c2[3] === 1) // full opacity for colour 2?
          )
        )
      ;

      if( same ){ return false; } // can't make a mapper without a range
    }

    return {
      name: name,
      value: mapData,
      strValue: '' + value,
      mapped: mapped,
      field: mapData[1],
      fieldMin: parseFloat( mapData[2] ), // min & max are numeric
      fieldMax: parseFloat( mapData[3] ),
      valueMin: valueMin.value,
      valueMax: valueMax.value,
      bypass: propIsBypass
    };
  }

  if( type.multiple && propIsFlat !== 'multiple' ){
    var vals;

    if( valueIsString ){
      vals = value.split( /\s+/ );
    } else if( is.array( value ) ){
      vals = value;
    } else {
      vals = [ value ];
    }

    if( type.evenMultiple && vals.length % 2 !== 0 ){ return null; }

    var valArr = vals.map( function( v ){
      var p = self.parse( name, v, propIsBypass, 'multiple' );

      if( p.pfValue != null ){
        return p.pfValue;
      } else {
        return p.value;
      }
    } );

    return {
      name: name,
      value: valArr,
      pfValue: valArr,
      strValue: valArr.join( ' ' ),
      bypass: propIsBypass,
      units: type.number && !type.unitless ? type.implicitUnits || 'px' : undefined
    };
  }

  // several types also allow enums
  var checkEnums = function(){
    for( var i = 0; i < type.enums.length; i++ ){
      var en = type.enums[ i ];

      if( en === value ){
        return {
          name: name,
          value: value,
          strValue: '' + value,
          bypass: propIsBypass
        };
      }
    }

    return null;
  };

  // check the type and return the appropriate object
  if( type.number ){
    var units;
    var implicitUnits = 'px'; // not set => px

    if( type.units ){ // use specified units if set
      units = type.units;
    }

    if( type.implicitUnits ){
      implicitUnits = type.implicitUnits;
    }

    if( !type.unitless ){
      if( valueIsString ){
        var unitsRegex = 'px|em' + (type.allowPercent ? '|\\%' : '');
        if( units ){ unitsRegex = units; } // only allow explicit units if so set
        var match = value.match( '^(' + util.regex.number + ')(' + unitsRegex + ')?' + '$' );

        if( match ){
          value = match[1];
          units = match[2] || implicitUnits;
        }

      } else if( !units || type.implicitUnits ){
        units = implicitUnits; // implicitly px if unspecified
      }
    }

    value = parseFloat( value );

    // if not a number and enums not allowed, then the value is invalid
    if( isNaN( value ) && type.enums === undefined ){
      return null;
    }

    // check if this number type also accepts special keywords in place of numbers
    // (i.e. `left`, `auto`, etc)
    if( isNaN( value ) && type.enums !== undefined ){
      value = passedValue;

      return checkEnums();
    }

    // check if value must be an integer
    if( type.integer && !is.integer( value ) ){
      return null;
    }

    // check value is within range
    if( (type.min !== undefined && value < type.min)
    || (type.max !== undefined && value > type.max)
    ){
      return null;
    }

    var ret = {
      name: name,
      value: value,
      strValue: '' + value + (units ? units : ''),
      units: units,
      bypass: propIsBypass
    };

    // normalise value in pixels
    if( type.unitless || (units !== 'px' && units !== 'em') ){
      ret.pfValue = value;
    } else {
      ret.pfValue = ( units === 'px' || !units ? (value) : (this.getEmSizeInPixels() * value) );
    }

    // normalise value in ms
    if( units === 'ms' || units === 's' ){
      ret.pfValue = units === 'ms' ? value : 1000 * value;
    }

    // normalise value in rad
    if( units === 'deg' || units === 'rad' ){
      ret.pfValue = units === 'rad' ? value : math.deg2rad( value );
    }

    return ret;

  } else if( type.propList ){

    var props = [];
    var propsStr = '' + value;

    if( propsStr === 'none' ){
      // leave empty

    } else { // go over each prop

      var propsSplit = propsStr.split( ',' );
      for( var i = 0; i < propsSplit.length; i++ ){
        var propName = propsSplit[ i ].trim();

        if( self.properties[ propName ] ){
          props.push( propName );
        }
      }

      if( props.length === 0 ){ return null; }
    }

    return {
      name: name,
      value: props,
      strValue: props.length === 0 ? 'none' : props.join( ', ' ),
      bypass: propIsBypass
    };

  } else if( type.color ){
    var tuple = util.color2tuple( value );

    if( !tuple ){ return null; }

    return {
      name: name,
      value: tuple,
      strValue: '' + value,
      bypass: propIsBypass,
      roundValue: true
    };

  } else if( type.regex || type.regexes ){

    // first check enums
    if( type.enums ){
      var enumProp = checkEnums();

      if( enumProp ){ return enumProp; }
    }

    var regexes = type.regexes ? type.regexes : [ type.regex ];

    for( var i = 0; i < regexes.length; i++ ){
      var regex = new RegExp( regexes[ i ] ); // make a regex from the type string
      var m = regex.exec( value );

      if( m ){ // regex matches
        return {
          name: name,
          value: m,
          strValue: '' + value,
          bypass: propIsBypass
        };

      }
    }

    return null; // didn't match any

  } else if( type.string ){
    // just return
    return {
      name: name,
      value: '' + value,
      strValue: '' + value,
      bypass: propIsBypass
    };

  } else if( type.enums ){ // check enums last because it's a combo type in others
    return checkEnums();

  } else {
    return null; // not a type we can handle
  }

};

module.exports = styfn;

},{"../is":86,"../math":88,"../util":104}],99:[function(require,module,exports){
'use strict';

var util = require( '../util' );

var styfn = {};

(function(){
  var number = util.regex.number;
  var rgba = util.regex.rgbaNoBackRefs;
  var hsla = util.regex.hslaNoBackRefs;
  var hex3 = util.regex.hex3;
  var hex6 = util.regex.hex6;
  var data = function( prefix ){ return '^' + prefix + '\\s*\\(\\s*([\\w\\.]+)\\s*\\)$'; };
  var mapData = function( prefix ){
    var mapArg = number + '|\\w+|' + rgba + '|' + hsla + '|' + hex3 + '|' + hex6;
    return '^' + prefix + '\\s*\\(([\\w\\.]+)\\s*\\,\\s*(' + number + ')\\s*\\,\\s*(' + number + ')\\s*,\\s*(' + mapArg + ')\\s*\\,\\s*(' + mapArg + ')\\)$';
  };

  // each visual style property has a type and needs to be validated according to it
  styfn.types = {
    time: { number: true, min: 0, units: 's|ms', implicitUnits: 'ms' },
    percent: { number: true, min: 0, max: 100, units: '%', implicitUnits: '%' },
    zeroOneNumber: { number: true, min: 0, max: 1, unitless: true },
    nOneOneNumber: { number: true, min: -1, max: 1, unitless: true },
    nonNegativeInt: { number: true, min: 0, integer: true, unitless: true },
    position: { enums: [ 'parent', 'origin' ] },
    nodeSize: { number: true, min: 0, enums: [ 'label' ] },
    number: { number: true, unitless: true },
    numbers: { number: true, unitless: true, multiple: true },
    size: { number: true, min: 0 },
    bidirectionalSize: { number: true }, // allows negative
    bidirectionalSizes: { number: true, multiple: true }, // allows negative
    bgSize: { number: true, min: 0, allowPercent: true },
    bgWH: { number: true, min: 0, allowPercent: true, enums: [ 'auto' ] },
    bgPos: { number: true, allowPercent: true },
    bgRepeat: { enums: [ 'repeat', 'repeat-x', 'repeat-y', 'no-repeat' ] },
    bgFit: { enums: [ 'none', 'contain', 'cover' ] },
    bgCrossOrigin: { enums: [ 'anonymous', 'use-credentials' ] },
    bgClip: { enums: [ 'none', 'node' ] },
    color: { color: true },
    bool: { enums: [ 'yes', 'no' ] },
    lineStyle: { enums: [ 'solid', 'dotted', 'dashed' ] },
    borderStyle: { enums: [ 'solid', 'dotted', 'dashed', 'double' ] },
    curveStyle: { enums: [ 'bezier', 'unbundled-bezier', 'haystack', 'segments' ] },
    fontFamily: { regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$' },
    fontVariant: { enums: [ 'small-caps', 'normal' ] },
    fontStyle: { enums: [ 'italic', 'normal', 'oblique' ] },
    fontWeight: { enums: [ 'normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900 ] },
    textDecoration: { enums: [ 'none', 'underline', 'overline', 'line-through' ] },
    textTransform: { enums: [ 'none', 'uppercase', 'lowercase' ] },
    textWrap: { enums: [ 'none', 'wrap', 'ellipsis' ] },
    textBackgroundShape: { enums: [ 'rectangle', 'roundrectangle' ]},
    nodeShape: { enums: [ 'rectangle', 'roundrectangle', 'ellipse', 'triangle', 'square', 'pentagon', 'hexagon', 'heptagon', 'octagon', 'star', 'diamond', 'vee', 'rhomboid', 'polygon' ] },
    compoundIncludeLabels: { enums: [ 'include', 'exclude' ] },
    arrowShape: { enums: [ 'tee', 'triangle', 'triangle-tee', 'triangle-backcurve', 'half-triangle-overshot', 'vee', 'square', 'circle', 'diamond', 'none' ] },
    arrowFill: { enums: [ 'filled', 'hollow' ] },
    display: { enums: [ 'element', 'none' ] },
    visibility: { enums: [ 'hidden', 'visible' ] },
    zCompoundDepth: { enums: [ 'bottom', 'orphan', 'auto', 'top' ] },
    zIndexCompare: { enums: [ 'auto', 'manual' ] },
    valign: { enums: [ 'top', 'center', 'bottom' ] },
    halign: { enums: [ 'left', 'center', 'right' ] },
    text: { string: true },
    data: { mapping: true, regex: data( 'data' ) },
    layoutData: { mapping: true, regex: data( 'layoutData' ) },
    scratch: { mapping: true, regex: data( 'scratch' ) },
    mapData: { mapping: true, regex: mapData( 'mapData' ) },
    mapLayoutData: { mapping: true, regex: mapData( 'mapLayoutData' ) },
    mapScratch: { mapping: true, regex: mapData( 'mapScratch' ) },
    fn: { mapping: true, fn: true },
    url: { regex: 'url\\s*\\(\\s*[\'"]?(.+?)[\'"]?\\s*\\)|none|(.+)$' },
    propList: { propList: true },
    angle: { number: true, units: 'deg|rad', implicitUnits: 'rad' },
    textRotation: { number: true, units: 'deg|rad', implicitUnits: 'rad', enums: [ 'none', 'autorotate' ] },
    polygonPointList: { number: true, multiple: true, evenMultiple: true, min: -1, max: 1, unitless: true },
    edgeDistances: { enums: ['intersection', 'node-position'] },
    edgeDirections: { enums: ['outside', 'inside'] },
    easing: {
      regexes: [
        '^(spring)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$',
        '^(cubic-bezier)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$'
      ],
      enums: [
        'linear',
        'ease', 'ease-in', 'ease-out', 'ease-in-out',
        'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine',
        'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad',
        'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic',
        'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart',
        'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint',
        'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo',
        'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ'
      ]
    }
  };

  var zOrderDiff = {
    zeroNonZero: function( val1, val2 ){
      if( val1 === 0 && val2 !== 0 ){
        return true;
      } else if( val1 !== 0 && val2 === 0 ){
        return true;
      } else {
        return false;
      }
    },
    anyDiff: function( val1, val2 ){
      return val1 !== val2;
    }
  };

  var zd = zOrderDiff;

  // define visual style properties
  var t = styfn.types;
  var props = styfn.properties = [
    // main label
    { name: 'label', type: t.text },
    { name: 'text-rotation', type: t.textRotation },
    { name: 'text-margin-x', type: t.bidirectionalSize },
    { name: 'text-margin-y', type: t.bidirectionalSize },

    // source label
    { name: 'source-label', type: t.text },
    { name: 'source-text-rotation', type: t.textRotation },
    { name: 'source-text-margin-x', type: t.bidirectionalSize },
    { name: 'source-text-margin-y', type: t.bidirectionalSize },
    { name: 'source-text-offset', type: t.size },

    // target label
    { name: 'target-label', type: t.text },
    { name: 'target-text-rotation', type: t.textRotation },
    { name: 'target-text-margin-x', type: t.bidirectionalSize },
    { name: 'target-text-margin-y', type: t.bidirectionalSize },
    { name: 'target-text-offset', type: t.size },

    // common label style
    { name: 'text-valign', type: t.valign },
    { name: 'text-halign', type: t.halign },
    { name: 'color', type: t.color },
    { name: 'text-outline-color', type: t.color },
    { name: 'text-outline-width', type: t.size },
    { name: 'text-outline-opacity', type: t.zeroOneNumber },
    { name: 'text-opacity', type: t.zeroOneNumber },
    { name: 'text-background-color', type: t.color },
    { name: 'text-background-opacity', type: t.zeroOneNumber },
    { name: 'text-background-padding', type: t.size },
    { name: 'text-border-opacity', type: t.zeroOneNumber },
    { name: 'text-border-color', type: t.color },
    { name: 'text-border-width', type: t.size },
    { name: 'text-border-style', type: t.borderStyle },
    { name: 'text-background-shape', type: t.textBackgroundShape},
    // { name: 'text-decoration', type: t.textDecoration }, // not supported in canvas
    { name: 'text-transform', type: t.textTransform },
    { name: 'text-wrap', type: t.textWrap },
    { name: 'text-max-width', type: t.size },
    { name: 'text-events', type: t.bool },
    { name: 'font-family', type: t.fontFamily },
    { name: 'font-style', type: t.fontStyle },
    // { name: 'font-variant', type: t.fontVariant }, // not useful
    { name: 'font-weight', type: t.fontWeight },
    { name: 'font-size', type: t.size },
    { name: 'min-zoomed-font-size', type: t.size },

    // behaviour
    { name: 'events', type: t.bool },

    // visibility
    { name: 'display', type: t.display, triggersZOrder: zd.anyDiff },
    { name: 'visibility', type: t.visibility, triggersZOrder: zd.anyDiff },
    { name: 'opacity', type: t.zeroOneNumber, triggersZOrder: zd.zeroNonZero },
    { name: 'z-compound-depth', type: t.zCompoundDepth, triggersZOrder: zd.anyDiff },
    { name: 'z-index-compare', type: t.zIndexCompare, triggersZOrder: zd.anyDiff },
    { name: 'z-index', type: t.nonNegativeInt, triggersZOrder: zd.anyDiff },

    // overlays
    { name: 'overlay-padding', type: t.size },
    { name: 'overlay-color', type: t.color },
    { name: 'overlay-opacity', type: t.zeroOneNumber },

    // shadows
    { name: 'shadow-blur', type: t.size },
    { name: 'shadow-color', type: t.color },
    { name: 'shadow-opacity', type: t.zeroOneNumber },
    { name: 'shadow-offset-x', type: t.bidirectionalSize },
    { name: 'shadow-offset-y', type: t.bidirectionalSize },

    // label shadows
    { name: 'text-shadow-blur', type: t.size },
    { name: 'text-shadow-color', type: t.color },
    { name: 'text-shadow-opacity', type: t.zeroOneNumber },
    { name: 'text-shadow-offset-x', type: t.bidirectionalSize },
    { name: 'text-shadow-offset-y', type: t.bidirectionalSize },

    // transition anis
    { name: 'transition-property', type: t.propList },
    { name: 'transition-duration', type: t.time },
    { name: 'transition-delay', type: t.time },
    { name: 'transition-timing-function', type: t.easing },

    // node body
    { name: 'height', type: t.nodeSize },
    { name: 'width', type: t.nodeSize },
    { name: 'shape', type: t.nodeShape },
    { name: 'shape-polygon-points', type: t.polygonPointList },
    { name: 'background-color', type: t.color },
    { name: 'background-opacity', type: t.zeroOneNumber },
    { name: 'background-blacken', type: t.nOneOneNumber },
    { name: 'padding-left', type: t.size },
    { name: 'padding-right', type: t.size },
    { name: 'padding-top', type: t.size },
    { name: 'padding-bottom', type: t.size },

    // node border
    { name: 'border-color', type: t.color },
    { name: 'border-opacity', type: t.zeroOneNumber },
    { name: 'border-width', type: t.size },
    { name: 'border-style', type: t.borderStyle },

    // node background images
    { name: 'background-image', type: t.url },
    { name: 'background-image-crossorigin', type: t.bgCrossOrigin },
    { name: 'background-image-opacity', type: t.zeroOneNumber },
    { name: 'background-position-x', type: t.bgPos },
    { name: 'background-position-y', type: t.bgPos },
    { name: 'background-repeat', type: t.bgRepeat },
    { name: 'background-fit', type: t.bgFit },
    { name: 'background-clip', type: t.bgClip },
    { name: 'background-width', type: t.bgWH },
    { name: 'background-height', type: t.bgWH },

    // compound props
    { name: 'position', type: t.position },
    { name: 'compound-sizing-wrt-labels', type: t.compoundIncludeLabels },

    // edge line
    { name: 'line-style', type: t.lineStyle },
    { name: 'line-color', type: t.color },
    { name: 'curve-style', type: t.curveStyle },
    { name: 'haystack-radius', type: t.zeroOneNumber },
    { name: 'control-point-step-size', type: t.size },
    { name: 'control-point-distances', type: t.bidirectionalSizes },
    { name: 'control-point-weights', type: t.numbers },
    { name: 'segment-distances', type: t.bidirectionalSizes },
    { name: 'segment-weights', type: t.numbers },
    { name: 'edge-distances', type: t.edgeDistances },
    { name: 'edge-pointing-direction', type: t.edgeDirections },
    { name: 'loop-direction', type: t.angle },
    { name: 'loop-sweep', type: t.angle },
    { name: 'source-distance-from-node', type: t.size },
    { name: 'target-distance-from-node', type: t.size },

    // these are just for the core
    { name: 'selection-box-color', type: t.color },
    { name: 'selection-box-opacity', type: t.zeroOneNumber },
    { name: 'selection-box-border-color', type: t.color },
    { name: 'selection-box-border-width', type: t.size },
    { name: 'active-bg-color', type: t.color },
    { name: 'active-bg-opacity', type: t.zeroOneNumber },
    { name: 'active-bg-size', type: t.size },
    { name: 'outside-texture-bg-color', type: t.color },
    { name: 'outside-texture-bg-opacity', type: t.zeroOneNumber }
  ];

  // define aliases
  var aliases = styfn.aliases = [
    { name: 'content', pointsTo: 'label' },
    { name: 'control-point-distance', pointsTo: 'control-point-distances' },
    { name: 'control-point-weight', pointsTo: 'control-point-weights' },
    { name: 'edge-text-rotation', pointsTo: 'text-rotation' }
  ];

  // pie backgrounds for nodes
  styfn.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)
  props.push( { name: 'pie-size', type: t.bgSize } );
  for( var i = 1; i <= styfn.pieBackgroundN; i++ ){
    props.push( { name: 'pie-' + i + '-background-color', type: t.color } );
    props.push( { name: 'pie-' + i + '-background-size', type: t.percent } );
    props.push( { name: 'pie-' + i + '-background-opacity', type: t.zeroOneNumber } );
  }

  // edge arrows
  var arrowPrefixes = styfn.arrowPrefixes = [ 'source', 'mid-source', 'target', 'mid-target' ];
  [
    { name: 'arrow-shape', type: t.arrowShape },
    { name: 'arrow-color', type: t.color },
    { name: 'arrow-fill', type: t.arrowFill }
  ].forEach( function( prop ){
    arrowPrefixes.forEach( function( prefix ){
      var name = prefix + '-' + prop.name;
      var type = prop.type;

      props.push( { name: name, type: type } );
    } );
  }, {} );

  // list of property names
  styfn.propertyNames = props.map( function( p ){ return p.name; } );

  // allow access of properties by name ( e.g. style.properties.height )
  for( var i = 0; i < props.length; i++ ){
    var prop = props[ i ];

    props[ prop.name ] = prop; // allow lookup by name
  }

  // map aliases
  for( var i = 0; i < aliases.length; i++ ){
    var alias = aliases[ i ];
    var pointsToProp = props[ alias.pointsTo ];
    var aliasProp = {
      name: alias.name,
      alias: true,
      pointsTo: pointsToProp
    };

    // add alias prop for parsing
    props.push( aliasProp );

    props[ alias.name ] = aliasProp; // allow lookup by name
  }
})();

styfn.getDefaultProperty = function( name ){
  return this.getDefaultProperties()[ name ];
};

styfn.getDefaultProperties = util.memoize( function(){
  var rawProps = util.extend( {
    'events': 'yes',
    'text-events': 'no',
    'text-valign': 'top',
    'text-halign': 'center',
    'color': '#000',
    'text-outline-color': '#000',
    'text-outline-width': 0,
    'text-outline-opacity': 1,
    'text-opacity': 1,
    'text-decoration': 'none',
    'text-transform': 'none',
    'text-wrap': 'none',
    'text-max-width': 9999,
    'text-background-color': '#000',
    'text-background-opacity': 0,
    'text-background-shape': 'rectangle',
    'text-background-padding': 0,
    'text-border-opacity': 0,
    'text-border-width': 0,
    'text-border-style': 'solid',
    'text-border-color': '#000',
    'font-family': 'Helvetica Neue, Helvetica, sans-serif',
    'font-style': 'normal',
    // 'font-variant': fontVariant,
    'font-weight': 'normal',
    'font-size': 16,
    'min-zoomed-font-size': 0,
    'text-rotation': 'none',
    'source-text-rotation': 'none',
    'target-text-rotation': 'none',
    'visibility': 'visible',
    'display': 'element',
    'opacity': 1,
    'z-compound-depth': 'auto',
    'z-index-compare': 'auto',
    'z-index': 0,
    'label': '',
    'text-margin-x': 0,
    'text-margin-y': 0,
    'source-label': '',
    'source-text-offset': 0,
    'source-text-margin-x': 0,
    'source-text-margin-y': 0,
    'target-label': '',
    'target-text-offset': 0,
    'target-text-margin-x': 0,
    'target-text-margin-y': 0,
    'overlay-opacity': 0,
    'overlay-color': '#000',
    'overlay-padding': 10,
    'shadow-opacity': 0,
    'shadow-color': '#000',
    'shadow-blur': 10,
    'shadow-offset-x': 0,
    'shadow-offset-y': 0,
    'text-shadow-opacity': 0,
    'text-shadow-color': '#000',
    'text-shadow-blur': 5,
    'text-shadow-offset-x': 0,
    'text-shadow-offset-y': 0,
    'transition-property': 'none',
    'transition-duration': 0,
    'transition-delay': 0,
    'transition-timing-function': 'linear',
    'loop-direction': '-135deg',
    'loop-sweep': '-90deg',
    'source-distance-from-node': 0,
    'target-distance-from-node': 0,

    // node props
    'background-blacken': 0,
    'background-color': '#999',
    'background-opacity': 1,
    'background-image': 'none',
    'background-image-crossorigin': 'anonymous',
    'background-image-opacity': 1,
    'background-position-x': '50%',
    'background-position-y': '50%',
    'background-repeat': 'no-repeat',
    'background-fit': 'none',
    'background-clip': 'node',
    'background-width': 'auto',
    'background-height': 'auto',
    'border-color': '#000',
    'border-opacity': 1,
    'border-width': 0,
    'border-style': 'solid',
    'height': 30,
    'width': 30,
    'shape': 'ellipse',
    'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',

    // compound props
    'padding-top': 0,
    'padding-bottom': 0,
    'padding-left': 0,
    'padding-right': 0,
    'position': 'origin',
    'compound-sizing-wrt-labels': 'include'
  }, {
    // node pie bg
    'pie-size': '100%'
  }, [
    { name: 'pie-{{i}}-background-color', value: 'black' },
    { name: 'pie-{{i}}-background-size', value: '0%' },
    { name: 'pie-{{i}}-background-opacity', value: 1 }
  ].reduce( function( css, prop ){
    for( var i = 1; i <= styfn.pieBackgroundN; i++ ){
      var name = prop.name.replace( '{{i}}', i );
      var val = prop.value;

      css[ name ] = val;
    }

    return css;
  }, {} ), {
    // edge props
    'line-style': 'solid',
    'line-color': '#999',
    'control-point-step-size': 40,
    'control-point-weights': 0.5,
    'segment-weights': 0.5,
    'segment-distances': 20,
    'edge-distances': 'intersection',
    'edge-pointing-direction': 'inside',
    'curve-style': 'bezier',
    'haystack-radius': 0
  }, [
    { name: 'arrow-shape', value: 'none' },
    { name: 'arrow-color', value: '#999' },
    { name: 'arrow-fill', value: 'filled' }
  ].reduce( function( css, prop ){
    styfn.arrowPrefixes.forEach( function( prefix ){
      var name = prefix + '-' + prop.name;
      var val = prop.value;

      css[ name ] = val;
    } );

    return css;
  }, {} ) );

  var parsedProps = {};

  for( var i = 0; i < this.properties.length; i++ ){
    var prop = this.properties[i];

    if( prop.pointsTo ){ continue; }

    var name = prop.name;
    var val = rawProps[ name ];
    var parsedProp = this.parse( name, val );

    parsedProps[ name ] = parsedProp;
  }

  return parsedProps;
} );

styfn.addDefaultStylesheet = function(){
  this
    .selector( '$node > node' ) // compound (parent) node properties
      .css( {
        'shape': 'rectangle',
        'padding-top': 10,
        'padding-right': 10,
        'padding-left': 10,
        'padding-bottom': 10,
        'background-color': '#eee',
        'border-color': '#ccc',
        'border-width': 1
      } )
    .selector( 'edge' ) // just edge properties
      .css( {
        'width': 3,
        'curve-style': 'haystack'
      } )
    .selector( ':selected' )
      .css( {
        'background-color': '#0169D9',
        'line-color': '#0169D9',
        'source-arrow-color': '#0169D9',
        'target-arrow-color': '#0169D9',
        'mid-source-arrow-color': '#0169D9',
        'mid-target-arrow-color': '#0169D9'
      } )
    .selector( 'node:parent:selected' )
      .css( {
        'background-color': '#CCE1F9',
        'border-color': '#aec8e5'
      } )
    .selector( ':active' )
      .css( {
        'overlay-color': 'black',
        'overlay-padding': 10,
        'overlay-opacity': 0.25
      } )
    .selector( 'core' ) // just core properties
      .css( {
        'selection-box-color': '#ddd',
        'selection-box-opacity': 0.65,
        'selection-box-border-color': '#aaa',
        'selection-box-border-width': 1,
        'active-bg-color': 'black',
        'active-bg-opacity': 0.15,
        'active-bg-size': 30,
        'outside-texture-bg-color': '#000',
        'outside-texture-bg-opacity': 0.125
      } )
  ;

  this.defaultLength = this.length;
};

module.exports = styfn;

},{"../util":104}],100:[function(require,module,exports){
'use strict';

var util = require( '../util' );
var Selector = require( '../selector' );

var styfn = {};

styfn.applyFromString = function( string ){
  var self = this;
  var style = this;
  var remaining = '' + string;
  var selAndBlockStr;
  var blockRem;
  var propAndValStr;

  // remove comments from the style string
  remaining = remaining.replace( /[/][*](\s|.)+?[*][/]/g, '' );

  function removeSelAndBlockFromRemaining(){
    // remove the parsed selector and block from the remaining text to parse
    if( remaining.length > selAndBlockStr.length ){
      remaining = remaining.substr( selAndBlockStr.length );
    } else {
      remaining = '';
    }
  }

  function removePropAndValFromRem(){
    // remove the parsed property and value from the remaining block text to parse
    if( blockRem.length > propAndValStr.length ){
      blockRem = blockRem.substr( propAndValStr.length );
    } else {
      blockRem = '';
    }
  }

  while( true ){
    var nothingLeftToParse = remaining.match( /^\s*$/ );
    if( nothingLeftToParse ){ break; }

    var selAndBlock = remaining.match( /^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/ );

    if( !selAndBlock ){
      util.error( 'Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining );
      break;
    }

    selAndBlockStr = selAndBlock[0];

    // parse the selector
    var selectorStr = selAndBlock[1];
    if( selectorStr !== 'core' ){
      var selector = new Selector( selectorStr );
      if( selector._private.invalid ){
        util.error( 'Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr );

        // skip this selector and block
        removeSelAndBlockFromRemaining();
        continue;
      }
    }

    // parse the block of properties and values
    var blockStr = selAndBlock[2];
    var invalidBlock = false;
    blockRem = blockStr;
    var props = [];

    while( true ){
      var nothingLeftToParse = blockRem.match( /^\s*$/ );
      if( nothingLeftToParse ){ break; }

      var propAndVal = blockRem.match( /^\s*(.+?)\s*:\s*(.+?)\s*;/ );

      if( !propAndVal ){
        util.error( 'Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr );
        invalidBlock = true;
        break;
      }

      propAndValStr = propAndVal[0];
      var propStr = propAndVal[1];
      var valStr = propAndVal[2];

      var prop = self.properties[ propStr ];
      if( !prop ){
        util.error( 'Skipping property: Invalid property name in: ' + propAndValStr );

        // skip this property in the block
        removePropAndValFromRem();
        continue;
      }

      var parsedProp = style.parse( propStr, valStr );

      if( !parsedProp ){
        util.error( 'Skipping property: Invalid property definition in: ' + propAndValStr );

        // skip this property in the block
        removePropAndValFromRem();
        continue;
      }

      props.push( {
        name: propStr,
        val: valStr
      } );
      removePropAndValFromRem();
    }

    if( invalidBlock ){
      removeSelAndBlockFromRemaining();
      break;
    }

    // put the parsed block in the style
    style.selector( selectorStr );
    for( var i = 0; i < props.length; i++ ){
      var prop = props[ i ];
      style.css( prop.name, prop.val );
    }

    removeSelAndBlockFromRemaining();
  }

  return style;
};

styfn.fromString = function( string ){
  var style = this;

  style.resetToDefault();
  style.applyFromString( string );

  return style;
};

module.exports = styfn;

},{"../selector":91,"../util":104}],101:[function(require,module,exports){
'use strict';

var is = require( './is' );
var util = require( './util' );
var Style = require( './style' );

// a dummy stylesheet object that doesn't need a reference to the core
// (useful for init)
var Stylesheet = function(){
  if( !(this instanceof Stylesheet) ){
    return new Stylesheet();
  }

  this.length = 0;
};

var sheetfn = Stylesheet.prototype;

sheetfn.instanceString = function(){
  return 'stylesheet';
};

// just store the selector to be parsed later
sheetfn.selector = function( selector ){
  var i = this.length++;

  this[ i ] = {
    selector: selector,
    properties: []
  };

  return this; // chaining
};

// just store the property to be parsed later
sheetfn.css = function( name, value ){
  var i = this.length - 1;

  if( is.string( name ) ){
    this[ i ].properties.push( {
      name: name,
      value: value
    } );
  } else if( is.plainObject( name ) ){
    var map = name;

    for( var j = 0; j < Style.properties.length; j++ ){
      var prop = Style.properties[ j ];
      var mapVal = map[ prop.name ];

      if( mapVal === undefined ){ // also try camel case name
        mapVal = map[ util.dash2camel( prop.name ) ];
      }

      if( mapVal !== undefined ){
        var name = prop.name;
        var value = mapVal;

        this[ i ].properties.push( {
          name: name,
          value: value
        } );
      }
    }
  }

  return this; // chaining
};

sheetfn.style = sheetfn.css;

// generate a real style object from the dummy stylesheet
sheetfn.generateStyle = function( cy ){
  var style = new Style( cy );

  for( var i = 0; i < this.length; i++ ){
    var context = this[ i ];
    var selector = context.selector;
    var props = context.properties;

    style.selector( selector ); // apply selector

    for( var j = 0; j < props.length; j++ ){
      var prop = props[ j ];

      style.css( prop.name, prop.value ); // apply property
    }
  }

  return style;
};

module.exports = Stylesheet;

},{"./is":86,"./style":96,"./util":104}],102:[function(require,module,exports){
(function (__dirname){
/*! Weaver licensed under MIT (https://tldrlegal.com/license/mit-license), copyright Max Franz */

// cross-env thread/worker
// NB : uses (heavyweight) processes on nodejs so best not to create too many threads

'use strict';

var window = require('./window');
var util = require('./util');
var Promise = require('./promise');
var Event = require('./event');
var define = require('./define');
var is = require('./is');

var Thread = function( opts ){
  if( !(this instanceof Thread) ){
    return new Thread( opts );
  }

  var _p = this._private = {
    requires: [],
    files: [],
    queue: null,
    pass: [],
    disabled: false
  };

  if( is.plainObject(opts) ){
    if( opts.disabled != null ){
      _p.disabled = !!opts.disabled;
    }
  }

};

var thdfn = Thread.prototype; // short alias

var stringifyFieldVal = function( val ){
  var valStr = is.fn( val ) ? val.toString() : "JSON.parse('" + JSON.stringify(val) + "')";

  return valStr;
};

// allows for requires with prototypes and subobjs etc
var fnAsRequire = function( fn ){
  var req;
  var fnName;

  if( is.object(fn) && fn.fn ){ // manual fn
    req = fnAs( fn.fn, fn.name );
    fnName = fn.name;
    fn = fn.fn;
  } else if( is.fn(fn) ){ // auto fn
    req = fn.toString();
    fnName = fn.name;
  } else if( is.string(fn) ){ // stringified fn
    req = fn;
  } else if( is.object(fn) ){ // plain object
    if( fn.proto ){
      req = '';
    } else {
      req = fn.name + ' = {};';
    }

    fnName = fn.name;
    fn = fn.obj;
  }

  req += '\n';

  var protoreq = function( val, subname ){
    if( val.prototype ){
      var protoNonempty = false;
      for( var prop in val.prototype ){ protoNonempty = true; break; } // jshint ignore:line

      if( protoNonempty ){
        req += fnAsRequire( {
          name: subname,
          obj: val,
          proto: true
        }, val );
      }
    }
  };

  // pull in prototype
  if( fn.prototype && fnName != null ){

    for( var name in fn.prototype ){
      var protoStr = '';

      var val = fn.prototype[ name ];
      var valStr = stringifyFieldVal( val );
      var subname = fnName + '.prototype.' + name;

      protoStr += subname + ' = ' + valStr + ';\n';

      if( protoStr ){
        req += protoStr;
      }

      protoreq( val, subname ); // subobject with prototype
    }

  }

  // pull in properties for obj/fns
  if( !is.string(fn) ){ for( var name in fn ){
    var propsStr = '';

    if( fn.hasOwnProperty(name) ){
      var val = fn[ name ];
      var valStr = stringifyFieldVal( val );
      var subname = fnName + '["' + name + '"]';

      propsStr += subname + ' = ' + valStr + ';\n';
    }

    if( propsStr ){
      req += propsStr;
    }

    protoreq( val, subname ); // subobject with prototype
  } }

  return req;
};

var isPathStr = function( str ){
  return is.string(str) && str.match(/\.js$/);
};

util.extend(thdfn, {

  instanceString: function(){ return 'thread'; },

  require: function( fn, as ){
    var requires = this._private.requires;

    if( isPathStr(fn) ){
      this._private.files.push( fn );

      return this;
    }

    if( as ){
      if( is.fn(fn) ){
        fn = { name: as, fn: fn };
      } else {
        fn = { name: as, obj: fn };
      }
    } else {
      if( is.fn(fn) ){
        if( !fn.name ){
          throw 'The function name could not be automatically determined.  Use thread.require( someFunction, "someFunction" )';
        }

        fn = { name: fn.name, fn: fn };
      }
    }

    requires.push( fn );

    return this; // chaining
  },

  pass: function( data ){
    this._private.pass.push( data );

    return this; // chaining
  },

  run: function( fn, pass ){ // fn used like main()
    var self = this;
    var _p = this._private;
    pass = pass || _p.pass.shift();

    if( _p.stopped ){
      throw 'Attempted to run a stopped thread!  Start a new thread or do not stop the existing thread and reuse it.';
    }

    if( _p.running ){
      return ( _p.queue = _p.queue.then(function(){ // inductive step
        return self.run( fn, pass );
      }) );
    }

    var useWW = window != null && !_p.disabled;
    var useNode = !window && typeof module !== 'undefined' && !_p.disabled;

    self.trigger('run');

    var runP = new Promise(function( resolve, reject ){

      _p.running = true;

      var threadTechAlreadyExists = _p.ran;

      var fnImplStr = is.string( fn ) ? fn : fn.toString();

      // worker code to exec
      var fnStr = '\n' + ( _p.requires.map(function( r ){
        return fnAsRequire( r );
      }) ).concat( _p.files.map(function( f ){
        if( useWW ){
          var wwifyFile = function( file ){
            if( file.match(/^\.\//) || file.match(/^\.\./) ){
              return window.location.origin + window.location.pathname + file;
            } else if( file.match(/^\//) ){
              return window.location.origin + '/' + file;
            }
            return file;
          };

          return 'importScripts("' + wwifyFile(f) + '");';
        } else if( useNode ) {
          return 'eval( require("fs").readFileSync("' + f + '", { encoding: "utf8" }) );';
        } else {
          throw 'External file `' + f + '` can not be required without any threading technology.';
        }
      }) ).concat([
        '( function(){',
          'var ret = (' + fnImplStr + ')(' + JSON.stringify(pass) + ');',
          'if( ret !== undefined ){ resolve(ret); }', // assume if ran fn returns defined value (incl. null), that we want to resolve to it
        '} )()\n'
      ]).join('\n');

      // because we've now consumed the requires, empty the list so we don't dupe on next run()
      _p.requires = [];
      _p.files = [];

      if( useWW ){
        var fnBlob, fnUrl;

        // add normalised thread api functions
        if( !threadTechAlreadyExists ){
          var fnPre = fnStr + '';

          fnStr = [
            'function _ref_(o){ return eval(o); };',
            'function broadcast(m){ return message(m); };', // alias
            'function message(m){ postMessage(m); };',
            'function listen(fn){',
            '  self.addEventListener("message", function(m){ ',
            '    if( typeof m === "object" && (m.data.$$eval || m.data === "$$start") ){',
            '    } else { ',
            '      fn( m.data );',
            '    }',
            '  });',
            '};',
            'self.addEventListener("message", function(m){  if( m.data.$$eval ){ eval( m.data.$$eval ); }  });',
            'function resolve(v){ postMessage({ $$resolve: v }); };',
            'function reject(v){ postMessage({ $$reject: v }); };'
          ].join('\n');

          fnStr += fnPre;

          fnBlob = new Blob([ fnStr ], {
            type: 'application/javascript'
          });
          fnUrl = window.URL.createObjectURL( fnBlob );
        }
        // create webworker and let it exec the serialised code
        var ww = _p.webworker = _p.webworker || new Worker( fnUrl );

        if( threadTechAlreadyExists ){ // then just exec new run() code
          ww.postMessage({
            $$eval: fnStr
          });
        }

        // worker messages => events
        var cb;
        ww.addEventListener('message', cb = function( m ){
          var isObject = is.object(m) && is.object( m.data );

          if( isObject && ('$$resolve' in m.data) ){
            ww.removeEventListener('message', cb); // done listening b/c resolve()

            resolve( m.data.$$resolve );
          } else if( isObject && ('$$reject' in m.data) ){
            ww.removeEventListener('message', cb); // done listening b/c reject()

            reject( m.data.$$reject );
          } else {
            self.trigger( new Event(m, { type: 'message', message: m.data }) );
          }
        }, false);

        if( !threadTechAlreadyExists ){
          ww.postMessage('$$start'); // start up the worker
        }

      } else if( useNode ){
        // create a new process

        if( !_p.child ){
          _p.child = ( require('child_process').fork( require('path').join(__dirname, 'thread-node-fork') ) );
        }

        var child = _p.child;

        // child process messages => events
        var cb;
        child.on('message', cb = function( m ){
          if( is.object(m) && ('$$resolve' in m) ){
            child.removeListener('message', cb); // done listening b/c resolve()

            resolve( m.$$resolve );
          } else if( is.object(m) && ('$$reject' in m) ){
            child.removeListener('message', cb); // done listening b/c reject()

            reject( m.$$reject );
          } else {
            self.trigger( new Event({}, { type: 'message', message: m }) );
          }
        });

        // ask the child process to eval the worker code
        child.send({
          $$eval: fnStr
        });

      } else { // use a fallback mechanism using a timeout

        var promiseResolve = resolve;
        var promiseReject = reject;

        var timer = _p.timer = _p.timer || {

          listeners: [],

          exec: function(){
            // as a string so it can't be mangled by minifiers and processors
            fnStr = [
              'function _ref_(o){ return eval(o); };',
              'function broadcast(m){ return message(m); };',
              'function message(m){ self.trigger( new Event({}, { type: "message", message: m }) ); };',
              'function listen(fn){ timer.listeners.push( fn ); };',
              'function resolve(v){ promiseResolve(v); };',
              'function reject(v){ promiseReject(v); };'
            ].join('\n') + fnStr;

            // the .run() code
            eval( fnStr ); // jshint ignore:line
          },

          message: function( m ){
            var ls = timer.listeners;

            for( var i = 0; i < ls.length; i++ ){
              var fn = ls[i];

              fn( m );
            }
          }

        };

        timer.exec();
      }

    }).then(function( v ){
      _p.running = false;
      _p.ran = true;

      self.trigger('ran');

      return v;
    });

    if( _p.queue == null ){
      _p.queue = runP; // i.e. first step of inductive promise chain (for queue)
    }

    return runP;
  },

  // send the thread a message
  message: function( m ){
    var _p = this._private;

    if( _p.webworker ){
      _p.webworker.postMessage( m );
    }

    if( _p.child ){
      _p.child.send( m );
    }

    if( _p.timer ){
      _p.timer.message( m );
    }

    return this; // chaining
  },

  stop: function(){
    var _p = this._private;

    if( _p.webworker ){
      _p.webworker.terminate();
    }

    if( _p.child ){
      _p.child.kill();
    }

    if( _p.timer ){
      // nothing we can do if we've run a timeout
    }

    _p.stopped = true;

    return this.trigger('stop'); // chaining
  },

  stopped: function(){
    return this._private.stopped;
  }

});

// turns a stringified function into a (re)named function
var fnAs = function( fn, name ){
  var fnStr = fn.toString();
  fnStr = fnStr.replace(/function\s*?\S*?\s*?\(/, 'function ' + name + '(');

  return fnStr;
};

var defineFnal = function( opts ){
  opts = opts || {};

  return function fnalImpl( fn, arg1 ){
    var fnStr = fnAs( fn, '_$_$_' + opts.name );

    this.require( fnStr );

    return this.run( [
      'function( data ){',
      '  var origResolve = resolve;',
      '  var res = [];',
      '  ',
      '  resolve = function( val ){',
      '    res.push( val );',
      '  };',
      '  ',
      '  var ret = data.' + opts.name + '( _$_$_' + opts.name + ( arguments.length > 1 ? ', ' + JSON.stringify(arg1) : '' ) + ' );',
      '  ',
      '  resolve = origResolve;',
      '  resolve( res.length > 0 ? res : ret );',
      '}'
    ].join('\n') );
  };
};

util.extend(thdfn, {
  reduce: defineFnal({ name: 'reduce' }),

  reduceRight: defineFnal({ name: 'reduceRight' }),

  map: defineFnal({ name: 'map' })
});

// aliases
var fn = thdfn;
fn.promise = fn.run;
fn.terminate = fn.halt = fn.stop;
fn.include = fn.require;

// pull in event apis
util.extend(thdfn, {
  on: define.on(),
  one: define.on({ unbindSelfOnTrigger: true }),
  off: define.off(),
  trigger: define.trigger()
});

define.eventAliasesOn( thdfn );

module.exports = Thread;

}).call(this,"/node_modules/cytoscape-for-sbgnviz/src")

},{"./define":47,"./event":48,"./is":86,"./promise":89,"./util":104,"./window":111,"child_process":3,"path":116}],103:[function(require,module,exports){
'use strict';

var is = require( '../is' );

module.exports = {
  // get [r, g, b] from #abc or #aabbcc
  hex2tuple: function( hex ){
    if( !(hex.length === 4 || hex.length === 7) || hex[0] !== '#' ){ return; }

    var shortHex = hex.length === 4;
    var r, g, b;
    var base = 16;

    if( shortHex ){
      r = parseInt( hex[1] + hex[1], base );
      g = parseInt( hex[2] + hex[2], base );
      b = parseInt( hex[3] + hex[3], base );
    } else {
      r = parseInt( hex[1] + hex[2], base );
      g = parseInt( hex[3] + hex[4], base );
      b = parseInt( hex[5] + hex[6], base );
    }

    return [ r, g, b ];
  },

  // get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)
  hsl2tuple: function( hsl ){
    var ret;
    var h, s, l, a, r, g, b;
    function hue2rgb( p, q, t ){
      if( t < 0 ) t += 1;
      if( t > 1 ) t -= 1;
      if( t < 1 / 6 ) return p + (q - p) * 6 * t;
      if( t < 1 / 2 ) return q;
      if( t < 2 / 3 ) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    }

    var m = new RegExp( '^' + this.regex.hsla + '$' ).exec( hsl );
    if( m ){

      // get hue
      h = parseInt( m[1] );
      if( h < 0 ){
        h = ( 360 - (-1 * h % 360) ) % 360;
      } else if( h > 360 ){
        h = h % 360;
      }
      h /= 360; // normalise on [0, 1]

      s = parseFloat( m[2] );
      if( s < 0 || s > 100 ){ return; } // saturation is [0, 100]
      s = s / 100; // normalise on [0, 1]

      l = parseFloat( m[3] );
      if( l < 0 || l > 100 ){ return; } // lightness is [0, 100]
      l = l / 100; // normalise on [0, 1]

      a = m[4];
      if( a !== undefined ){
        a = parseFloat( a );

        if( a < 0 || a > 1 ){ return; } // alpha is [0, 1]
      }

      // now, convert to rgb
      // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript
      if( s === 0 ){
        r = g = b = Math.round( l * 255 ); // achromatic
      } else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = Math.round( 255 * hue2rgb( p, q, h + 1 / 3 ) );
        g = Math.round( 255 * hue2rgb( p, q, h ) );
        b = Math.round( 255 * hue2rgb( p, q, h - 1 / 3 ) );
      }

      ret = [ r, g, b, a ];
    }

    return ret;
  },

  // get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)
  rgb2tuple: function( rgb ){
    var ret;

    var m = new RegExp( '^' + this.regex.rgba + '$' ).exec( rgb );
    if( m ){
      ret = [];

      var isPct = [];
      for( var i = 1; i <= 3; i++ ){
        var channel = m[ i ];

        if( channel[ channel.length - 1 ] === '%' ){
          isPct[ i ] = true;
        }
        channel = parseFloat( channel );

        if( isPct[ i ] ){
          channel = channel / 100 * 255; // normalise to [0, 255]
        }

        if( channel < 0 || channel > 255 ){ return; } // invalid channel value

        ret.push( Math.floor( channel ) );
      }

      var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
      var allArePct = isPct[1] && isPct[2] && isPct[3];
      if( atLeastOneIsPct && !allArePct ){ return; } // must all be percent values if one is

      var alpha = m[4];
      if( alpha !== undefined ){
        alpha = parseFloat( alpha );

        if( alpha < 0 || alpha > 1 ){ return; } // invalid alpha value

        ret.push( alpha );
      }
    }

    return ret;
  },

  colorname2tuple: function( color ){
    return this.colors[ color.toLowerCase() ];
  },

  color2tuple: function( color ){
    return ( is.array( color ) ? color : null )
      || this.colorname2tuple( color )
      || this.hex2tuple( color )
      || this.rgb2tuple( color )
      || this.hsl2tuple( color );
  },

  colors: {
    // special colour names
    transparent: [0, 0, 0, 0], // NB alpha === 0

    // regular colours
    aliceblue: [ 240, 248, 255 ],
    antiquewhite: [ 250, 235, 215 ],
    aqua: [0, 255, 255 ],
    aquamarine: [ 127, 255, 212 ],
    azure: [ 240, 255, 255 ],
    beige: [ 245, 245, 220 ],
    bisque: [ 255, 228, 196 ],
    black: [0, 0, 0],
    blanchedalmond: [ 255, 235, 205 ],
    blue: [0, 0, 255 ],
    blueviolet: [ 138, 43, 226 ],
    brown: [ 165, 42, 42 ],
    burlywood: [ 222, 184, 135 ],
    cadetblue: [ 95, 158, 160 ],
    chartreuse: [ 127, 255, 0],
    chocolate: [ 210, 105, 30 ],
    coral: [ 255, 127, 80 ],
    cornflowerblue: [ 100, 149, 237 ],
    cornsilk: [ 255, 248, 220 ],
    crimson: [ 220, 20, 60 ],
    cyan: [0, 255, 255 ],
    darkblue: [0, 0, 139 ],
    darkcyan: [0, 139, 139 ],
    darkgoldenrod: [ 184, 134, 11 ],
    darkgray: [ 169, 169, 169 ],
    darkgreen: [0, 100, 0],
    darkgrey: [ 169, 169, 169 ],
    darkkhaki: [ 189, 183, 107 ],
    darkmagenta: [ 139, 0, 139 ],
    darkolivegreen: [ 85, 107, 47 ],
    darkorange: [ 255, 140, 0],
    darkorchid: [ 153, 50, 204 ],
    darkred: [ 139, 0, 0],
    darksalmon: [ 233, 150, 122 ],
    darkseagreen: [ 143, 188, 143 ],
    darkslateblue: [ 72, 61, 139 ],
    darkslategray: [ 47, 79, 79 ],
    darkslategrey: [ 47, 79, 79 ],
    darkturquoise: [0, 206, 209 ],
    darkviolet: [ 148, 0, 211 ],
    deeppink: [ 255, 20, 147 ],
    deepskyblue: [0, 191, 255 ],
    dimgray: [ 105, 105, 105 ],
    dimgrey: [ 105, 105, 105 ],
    dodgerblue: [ 30, 144, 255 ],
    firebrick: [ 178, 34, 34 ],
    floralwhite: [ 255, 250, 240 ],
    forestgreen: [ 34, 139, 34 ],
    fuchsia: [ 255, 0, 255 ],
    gainsboro: [ 220, 220, 220 ],
    ghostwhite: [ 248, 248, 255 ],
    gold: [ 255, 215, 0],
    goldenrod: [ 218, 165, 32 ],
    gray: [ 128, 128, 128 ],
    grey: [ 128, 128, 128 ],
    green: [0, 128, 0],
    greenyellow: [ 173, 255, 47 ],
    honeydew: [ 240, 255, 240 ],
    hotpink: [ 255, 105, 180 ],
    indianred: [ 205, 92, 92 ],
    indigo: [ 75, 0, 130 ],
    ivory: [ 255, 255, 240 ],
    khaki: [ 240, 230, 140 ],
    lavender: [ 230, 230, 250 ],
    lavenderblush: [ 255, 240, 245 ],
    lawngreen: [ 124, 252, 0],
    lemonchiffon: [ 255, 250, 205 ],
    lightblue: [ 173, 216, 230 ],
    lightcoral: [ 240, 128, 128 ],
    lightcyan: [ 224, 255, 255 ],
    lightgoldenrodyellow: [ 250, 250, 210 ],
    lightgray: [ 211, 211, 211 ],
    lightgreen: [ 144, 238, 144 ],
    lightgrey: [ 211, 211, 211 ],
    lightpink: [ 255, 182, 193 ],
    lightsalmon: [ 255, 160, 122 ],
    lightseagreen: [ 32, 178, 170 ],
    lightskyblue: [ 135, 206, 250 ],
    lightslategray: [ 119, 136, 153 ],
    lightslategrey: [ 119, 136, 153 ],
    lightsteelblue: [ 176, 196, 222 ],
    lightyellow: [ 255, 255, 224 ],
    lime: [0, 255, 0],
    limegreen: [ 50, 205, 50 ],
    linen: [ 250, 240, 230 ],
    magenta: [ 255, 0, 255 ],
    maroon: [ 128, 0, 0],
    mediumaquamarine: [ 102, 205, 170 ],
    mediumblue: [0, 0, 205 ],
    mediumorchid: [ 186, 85, 211 ],
    mediumpurple: [ 147, 112, 219 ],
    mediumseagreen: [ 60, 179, 113 ],
    mediumslateblue: [ 123, 104, 238 ],
    mediumspringgreen: [0, 250, 154 ],
    mediumturquoise: [ 72, 209, 204 ],
    mediumvioletred: [ 199, 21, 133 ],
    midnightblue: [ 25, 25, 112 ],
    mintcream: [ 245, 255, 250 ],
    mistyrose: [ 255, 228, 225 ],
    moccasin: [ 255, 228, 181 ],
    navajowhite: [ 255, 222, 173 ],
    navy: [0, 0, 128 ],
    oldlace: [ 253, 245, 230 ],
    olive: [ 128, 128, 0],
    olivedrab: [ 107, 142, 35 ],
    orange: [ 255, 165, 0],
    orangered: [ 255, 69, 0],
    orchid: [ 218, 112, 214 ],
    palegoldenrod: [ 238, 232, 170 ],
    palegreen: [ 152, 251, 152 ],
    paleturquoise: [ 175, 238, 238 ],
    palevioletred: [ 219, 112, 147 ],
    papayawhip: [ 255, 239, 213 ],
    peachpuff: [ 255, 218, 185 ],
    peru: [ 205, 133, 63 ],
    pink: [ 255, 192, 203 ],
    plum: [ 221, 160, 221 ],
    powderblue: [ 176, 224, 230 ],
    purple: [ 128, 0, 128 ],
    red: [ 255, 0, 0],
    rosybrown: [ 188, 143, 143 ],
    royalblue: [ 65, 105, 225 ],
    saddlebrown: [ 139, 69, 19 ],
    salmon: [ 250, 128, 114 ],
    sandybrown: [ 244, 164, 96 ],
    seagreen: [ 46, 139, 87 ],
    seashell: [ 255, 245, 238 ],
    sienna: [ 160, 82, 45 ],
    silver: [ 192, 192, 192 ],
    skyblue: [ 135, 206, 235 ],
    slateblue: [ 106, 90, 205 ],
    slategray: [ 112, 128, 144 ],
    slategrey: [ 112, 128, 144 ],
    snow: [ 255, 250, 250 ],
    springgreen: [0, 255, 127 ],
    steelblue: [ 70, 130, 180 ],
    tan: [ 210, 180, 140 ],
    teal: [0, 128, 128 ],
    thistle: [ 216, 191, 216 ],
    tomato: [ 255, 99, 71 ],
    turquoise: [ 64, 224, 208 ],
    violet: [ 238, 130, 238 ],
    wheat: [ 245, 222, 179 ],
    white: [ 255, 255, 255 ],
    whitesmoke: [ 245, 245, 245 ],
    yellow: [ 255, 255, 0],
    yellowgreen: [ 154, 205, 50 ]
  }
};

},{"../is":86}],104:[function(require,module,exports){
'use strict';

/*global console */

var is = require( '../is' );
var math = require( '../math' );

var util = {

  trueify: function(){ return true; },

  falsify: function(){ return false; },

  zeroify: function(){ return 0; },

  noop: function(){},

  error: function( msg ){
    /* eslint-disable */
    if( console.error ){
      console.error.apply( console, arguments );

      if( console.trace ){ console.trace(); }
    } else {
      console.log.apply( console, arguments );

      if( console.trace ){ console.trace(); }
    }
    /* eslint-enable */
  },

  clone: function( obj ){
    return this.extend( {}, obj );
  },

  // gets a shallow copy of the argument
  copy: function( obj ){
    if( obj == null ){
      return obj;
    } if( is.array( obj ) ){
      return obj.slice();
    } else if( is.plainObject( obj ) ){
      return this.clone( obj );
    } else {
      return obj;
    }
  },

  uuid: function(
      a,b                // placeholders
  ){
      for(               // loop :)
          b=a='';        // b - result , a - numeric variable
          a++<36;        //
          b+=a*51&52  // if "a" is not 9 or 14 or 19 or 24
                      ?  //  return a random number or 4
             (
               a^15      // if "a" is not 15
                  ?      // genetate a random number from 0 to 15
               8^Math.random()*
               (a^20?16:4)  // unless "a" is 20, in which case a random number from 8 to 11
                  :
               4            //  otherwise 4
               ).toString(16)
                      :
             '-'            //  in other cases (if "a" is 9,14,19,24) insert "-"
          );
      return b;
  }

};

util.makeBoundingBox = math.makeBoundingBox.bind( math );

util._staticEmptyObject = {};

util.staticEmptyObject = function(){
  return util._staticEmptyObject;
};

util.extend = Object.assign != null ? Object.assign : function( tgt ){
  var args = arguments;

  for( var i = 1; i < args.length; i++ ){
    var obj = args[ i ];

    if( !obj ){ continue; }

    var keys = Object.keys( obj );

    for( var j = 0; j < keys.length; j++ ){
      var k = keys[j];

      tgt[ k ] = obj[ k ];
    }
  }

  return tgt;
};

util.default = function( val, def ){
  if( val === undefined ){
    return def;
  } else {
    return val;
  }
};

util.removeFromArray = function( arr, ele, manyCopies ){
  for( var i = arr.length; i >= 0; i-- ){
    if( arr[i] === ele ){
      arr.splice( i, 1 );

      if( !manyCopies ){ break; }
    }
  }
};

util.clearArray = function( arr ){
  arr.splice( 0, arr.length );
};

util.getPrefixedProperty = function( obj, propName, prefix ){
  if( prefix ){
    propName = this.prependCamel( prefix, propName ); // e.g. (labelWidth, source) => sourceLabelWidth
  }

  return obj[ propName ];
};

util.setPrefixedProperty = function( obj, propName, prefix, value ){
  if( prefix ){
    propName = this.prependCamel( prefix, propName ); // e.g. (labelWidth, source) => sourceLabelWidth
  }

  obj[ propName ] = value;
};

[
  require( './colors' ),
  require( './maps' ),
  { memoize: require( './memoize' ) },
  require( './regex' ),
  require( './strings' ),
  require( './timing' )
].forEach( function( req ){
  util.extend( util, req );
} );

module.exports = util;

},{"../is":86,"../math":88,"./colors":103,"./maps":105,"./memoize":106,"./regex":107,"./strings":108,"./timing":109}],105:[function(require,module,exports){
'use strict';

var is = require( '../is' );

module.exports = {
  // has anything been set in the map
  mapEmpty: function( map ){
    var empty = true;

    if( map != null ){
      return Object.keys( map ).length === 0;
    }

    return empty;
  },

  // pushes to the array at the end of a map (map may not be built)
  pushMap: function( options ){
    var array = this.getMap( options );

    if( array == null ){ // if empty, put initial array
      this.setMap( this.extend( {}, options, {
        value: [ options.value ]
      } ) );
    } else {
      array.push( options.value );
    }
  },

  // sets the value in a map (map may not be built)
  setMap: function( options ){
    var obj = options.map;
    var key;
    var keys = options.keys;
    var l = keys.length;

    for( var i = 0; i < l; i++ ){
      var key = keys[ i ];

      if( is.plainObject( key ) ){
        this.error( 'Tried to set map with object key' );
      }

      if( i < keys.length - 1 ){

        // extend the map if necessary
        if( obj[ key ] == null ){
          obj[ key ] = {};
        }

        obj = obj[ key ];
      } else {
        // set the value
        obj[ key ] = options.value;
      }
    }
  },

  // gets the value in a map even if it's not built in places
  getMap: function( options ){
    var obj = options.map;
    var keys = options.keys;
    var l = keys.length;

    for( var i = 0; i < l; i++ ){
      var key = keys[ i ];

      if( is.plainObject( key ) ){
        this.error( 'Tried to get map with object key' );
      }

      obj = obj[ key ];

      if( obj == null ){
        return obj;
      }
    }

    return obj;
  },

  // deletes the entry in the map
  deleteMap: function( options ){
    var obj = options.map;
    var keys = options.keys;
    var l = keys.length;
    var keepChildren = options.keepChildren;

    for( var i = 0; i < l; i++ ){
      var key = keys[ i ];

      if( is.plainObject( key ) ){
        this.error( 'Tried to delete map with object key' );
      }

      var lastKey = i === options.keys.length - 1;
      if( lastKey ){

        if( keepChildren ){ // then only delete child fields not in keepChildren
          var children = Object.keys( obj );

          for( var j = 0; j < children.length; j++ ){
            var child = children[j];

            if( !keepChildren[ child ] ){
              obj[ child ] = undefined;
            }
          }
        } else {
          obj[ key ] = undefined;
        }

      } else {
        obj = obj[ key ];
      }
    }
  }
};

},{"../is":86}],106:[function(require,module,exports){
'use strict';

module.exports = function memoize( fn, keyFn ){
  if( !keyFn ){
    keyFn = function(){
      if( arguments.length === 1 ){
        return arguments[0];
      } else if( arguments.length === 0 ){
        return 'undefined';
      }

      var args = [];

      for( var i = 0; i < arguments.length; i++ ){
        args.push( arguments[ i ] );
      }

      return args.join( '$' );
    };
  }

  var memoizedFn = function(){
    var self = this;
    var args = arguments;
    var ret;
    var k = keyFn.apply( self, args );
    var cache = memoizedFn.cache;

    if( !(ret = cache[ k ]) ){
      ret = cache[ k ] = fn.apply( self, args );
    }

    return ret;
  };

  memoizedFn.cache = {};

  return memoizedFn;
};

},{}],107:[function(require,module,exports){
'use strict';

var number = '(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))';

var rgba = 'rgb[a]?\\((' + number + '[%]?)\\s*,\\s*(' + number + '[%]?)\\s*,\\s*(' + number + '[%]?)(?:\\s*,\\s*(' + number + '))?\\)';
var rgbaNoBackRefs = 'rgb[a]?\\((?:' + number + '[%]?)\\s*,\\s*(?:' + number + '[%]?)\\s*,\\s*(?:' + number + '[%]?)(?:\\s*,\\s*(?:' + number + '))?\\)';

var hsla = 'hsl[a]?\\((' + number + ')\\s*,\\s*(' + number + '[%])\\s*,\\s*(' + number + '[%])(?:\\s*,\\s*(' + number + '))?\\)';
var hslaNoBackRefs = 'hsl[a]?\\((?:' + number + ')\\s*,\\s*(?:' + number + '[%])\\s*,\\s*(?:' + number + '[%])(?:\\s*,\\s*(?:' + number + '))?\\)';

var hex3 = '\\#[0-9a-fA-F]{3}';
var hex6 = '\\#[0-9a-fA-F]{6}';

module.exports = {
  regex: {
    number: number,
    rgba: rgba,
    rgbaNoBackRefs: rgbaNoBackRefs,
    hsla: hsla,
    hslaNoBackRefs: hslaNoBackRefs,
    hex3: hex3,
    hex6: hex6
  }
};

},{}],108:[function(require,module,exports){
'use strict';

var memoize = require( './memoize' );
var is = require( '../is' );

module.exports = {

  camel2dash: memoize( function( str ){
    return str.replace( /([A-Z])/g, function( v ){
      return '-' + v.toLowerCase();
    } );
  } ),

  dash2camel: memoize( function( str ){
    return str.replace( /(-\w)/g, function( v ){
      return v[1].toUpperCase();
    } );
  } ),

  prependCamel: memoize( function( prefix, str ){
    return prefix + str[0].toUpperCase() + str.substring(1);
  }, function( prefix, str ){
    return prefix + '$' + str;
  } ),

  capitalize: function( str ){
    if( is.emptyString( str ) ){
      return str;
    }

    return str.charAt( 0 ).toUpperCase() + str.substring( 1 );
  }

};

},{"../is":86,"./memoize":106}],109:[function(require,module,exports){
'use strict';

var window = require( '../window' );
var is = require( '../is' );
var performance = window ? window.performance : null;

var util = {};

var raf = !window ? function( fn ){
  if( fn ){
    setTimeout( function(){
      fn( pnow() );
    }, 1000 / 60 );
  }
} : (function(){
  if( window.requestAnimationFrame ){
    return function( fn ){ window.requestAnimationFrame( fn ); };
  } else if( window.mozRequestAnimationFrame ){
    return function( fn ){ window.mozRequestAnimationFrame( fn ); }
  } else if( window.webkitRequestAnimationFrame ){
    return function( fn ){ window.webkitRequestAnimationFrame( fn ); }
  } else if( window.msRequestAnimationFrame ){
    return function( fn ){ window.msRequestAnimationFrame( fn ); }
  }
})();

util.requestAnimationFrame = function( fn ){
  raf( fn );
};

var pnow = performance && performance.now ? function(){ return performance.now(); } : function(){ return Date.now(); };

util.performanceNow = pnow;

// ported lodash throttle function
util.throttle = function( func, wait, options ){
  var leading = true,
      trailing = true;

  if( options === false ){
    leading = false;
  } else if( is.plainObject( options ) ){
    leading = 'leading' in options ? options.leading : leading;
    trailing = 'trailing' in options ? options.trailing : trailing;
  }
  options = options || {};
  options.leading = leading;
  options.maxWait = wait;
  options.trailing = trailing;

  return util.debounce( func, wait, options );
};

util.now = function(){
  return Date.now();
};

util.debounce = function( func, wait, options ){ // ported lodash debounce function
  var util = this;
  var args,
      maxTimeoutId,
      result,
      stamp,
      thisArg,
      timeoutId,
      trailingCall,
      lastCalled = 0,
      maxWait = false,
      trailing = true;

  if( !is.fn( func ) ){
    return;
  }
  wait = Math.max( 0, wait ) || 0;
  if( options === true ){
    var leading = true;
    trailing = false;
  } else if( is.plainObject( options ) ){
    leading = options.leading;
    maxWait = 'maxWait' in options && (Math.max( wait, options.maxWait ) || 0);
    trailing = 'trailing' in options ? options.trailing : trailing;
  }
  var delayed = function(){
    var remaining = wait - (util.now() - stamp);
    if( remaining <= 0 ){
      if( maxTimeoutId ){
        clearTimeout( maxTimeoutId );
      }
      var isCalled = trailingCall;
      maxTimeoutId = timeoutId = trailingCall = undefined;
      if( isCalled ){
        lastCalled = util.now();
        result = func.apply( thisArg, args );
        if( !timeoutId && !maxTimeoutId ){
          args = thisArg = null;
        }
      }
    } else {
      timeoutId = setTimeout( delayed, remaining );
    }
  };

  var maxDelayed = function(){
    if( timeoutId ){
      clearTimeout( timeoutId );
    }
    maxTimeoutId = timeoutId = trailingCall = undefined;
    if( trailing || (maxWait !== wait) ){
      lastCalled = util.now();
      result = func.apply( thisArg, args );
      if( !timeoutId && !maxTimeoutId ){
        args = thisArg = null;
      }
    }
  };

  return function(){
    args = arguments;
    stamp = util.now();
    thisArg = this;
    trailingCall = trailing && (timeoutId || !leading);

    if( maxWait === false ){
      var leadingCall = leading && !timeoutId;
    } else {
      if( !maxTimeoutId && !leading ){
        lastCalled = stamp;
      }
      var remaining = maxWait - (stamp - lastCalled),
          isCalled = remaining <= 0;

      if( isCalled ){
        if( maxTimeoutId ){
          maxTimeoutId = clearTimeout( maxTimeoutId );
        }
        lastCalled = stamp;
        result = func.apply( thisArg, args );
      }
      else if( !maxTimeoutId ){
        maxTimeoutId = setTimeout( maxDelayed, remaining );
      }
    }
    if( isCalled && timeoutId ){
      timeoutId = clearTimeout( timeoutId );
    }
    else if( !timeoutId && wait !== maxWait ){
      timeoutId = setTimeout( delayed, wait );
    }
    if( leadingCall ){
      isCalled = true;
      result = func.apply( thisArg, args );
    }
    if( isCalled && !timeoutId && !maxTimeoutId ){
      args = thisArg = null;
    }
    return result;
  };
};

module.exports = util;

},{"../is":86,"../window":111}],110:[function(require,module,exports){
module.exports="2.7.12"
},{}],111:[function(require,module,exports){
module.exports = ( typeof window === 'undefined' ? null : window ); // eslint-disable-line no-undef

},{}],112:[function(require,module,exports){
'use strict';

var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;

var isArray = function isArray(arr) {
	if (typeof Array.isArray === 'function') {
		return Array.isArray(arr);
	}

	return toStr.call(arr) === '[object Array]';
};

var isPlainObject = function isPlainObject(obj) {
	if (!obj || toStr.call(obj) !== '[object Object]') {
		return false;
	}

	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	// Not own constructor property must be Object
	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
		return false;
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for (key in obj) {/**/}

	return typeof key === 'undefined' || hasOwn.call(obj, key);
};

module.exports = function extend() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0],
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if (typeof target === 'boolean') {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {
		target = {};
	}

	for (; i < length; ++i) {
		options = arguments[i];
		// Only deal with non-null/undefined values
		if (options != null) {
			// Extend the base object
			for (name in options) {
				src = target[name];
				copy = options[name];

				// Prevent never-ending loop
				if (target !== copy) {
					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && isArray(src) ? src : [];
						} else {
							clone = src && isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = extend(deep, clone, copy);

					// Don't bring in undefined values
					} else if (typeof copy !== 'undefined') {
						target[name] = copy;
					}
				}
			}
		}
	}

	// Return the modified object
	return target;
};


},{}],113:[function(require,module,exports){
/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.3.2
 * 2016-06-16 18:25:19
 *
 * By Eli Grey, http://eligrey.com
 * License: MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs || (function(view) {
	"use strict";
	// IE <10 is explicitly unsupported
	if (typeof view === "undefined" || typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
		return;
	}
	var
		  doc = view.document
		  // only get URL when necessary in case Blob.js hasn't overridden it yet
		, get_URL = function() {
			return view.URL || view.webkitURL || view;
		}
		, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
		, can_use_save_link = "download" in save_link
		, click = function(node) {
			var event = new MouseEvent("click");
			node.dispatchEvent(event);
		}
		, is_safari = /constructor/i.test(view.HTMLElement) || view.safari
		, is_chrome_ios =/CriOS\/[\d]+/.test(navigator.userAgent)
		, throw_outside = function(ex) {
			(view.setImmediate || view.setTimeout)(function() {
				throw ex;
			}, 0);
		}
		, force_saveable_type = "application/octet-stream"
		// the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
		, arbitrary_revoke_timeout = 1000 * 40 // in ms
		, revoke = function(file) {
			var revoker = function() {
				if (typeof file === "string") { // file is an object URL
					get_URL().revokeObjectURL(file);
				} else { // file is a File
					file.remove();
				}
			};
			setTimeout(revoker, arbitrary_revoke_timeout);
		}
		, dispatch = function(filesaver, event_types, event) {
			event_types = [].concat(event_types);
			var i = event_types.length;
			while (i--) {
				var listener = filesaver["on" + event_types[i]];
				if (typeof listener === "function") {
					try {
						listener.call(filesaver, event || filesaver);
					} catch (ex) {
						throw_outside(ex);
					}
				}
			}
		}
		, auto_bom = function(blob) {
			// prepend BOM for UTF-8 XML and text/* types (including HTML)
			// note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
			if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
				return new Blob([String.fromCharCode(0xFEFF), blob], {type: blob.type});
			}
			return blob;
		}
		, FileSaver = function(blob, name, no_auto_bom) {
			if (!no_auto_bom) {
				blob = auto_bom(blob);
			}
			// First try a.download, then web filesystem, then object URLs
			var
				  filesaver = this
				, type = blob.type
				, force = type === force_saveable_type
				, object_url
				, dispatch_all = function() {
					dispatch(filesaver, "writestart progress write writeend".split(" "));
				}
				// on any filesys errors revert to saving with object URLs
				, fs_error = function() {
					if ((is_chrome_ios || (force && is_safari)) && view.FileReader) {
						// Safari doesn't allow downloading of blob urls
						var reader = new FileReader();
						reader.onloadend = function() {
							var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');
							var popup = view.open(url, '_blank');
							if(!popup) view.location.href = url;
							url=undefined; // release reference before dispatching
							filesaver.readyState = filesaver.DONE;
							dispatch_all();
						};
						reader.readAsDataURL(blob);
						filesaver.readyState = filesaver.INIT;
						return;
					}
					// don't create more object URLs than needed
					if (!object_url) {
						object_url = get_URL().createObjectURL(blob);
					}
					if (force) {
						view.location.href = object_url;
					} else {
						var opened = view.open(object_url, "_blank");
						if (!opened) {
							// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
							view.location.href = object_url;
						}
					}
					filesaver.readyState = filesaver.DONE;
					dispatch_all();
					revoke(object_url);
				}
			;
			filesaver.readyState = filesaver.INIT;

			if (can_use_save_link) {
				object_url = get_URL().createObjectURL(blob);
				setTimeout(function() {
					save_link.href = object_url;
					save_link.download = name;
					click(save_link);
					dispatch_all();
					revoke(object_url);
					filesaver.readyState = filesaver.DONE;
				});
				return;
			}

			fs_error();
		}
		, FS_proto = FileSaver.prototype
		, saveAs = function(blob, name, no_auto_bom) {
			return new FileSaver(blob, name || blob.name || "download", no_auto_bom);
		}
	;
	// IE 10+ (native saveAs)
	if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
		return function(blob, name, no_auto_bom) {
			name = name || blob.name || "download";

			if (!no_auto_bom) {
				blob = auto_bom(blob);
			}
			return navigator.msSaveOrOpenBlob(blob, name);
		};
	}

	FS_proto.abort = function(){};
	FS_proto.readyState = FS_proto.INIT = 0;
	FS_proto.WRITING = 1;
	FS_proto.DONE = 2;

	FS_proto.error =
	FS_proto.onwritestart =
	FS_proto.onprogress =
	FS_proto.onwrite =
	FS_proto.onabort =
	FS_proto.onerror =
	FS_proto.onwriteend =
		null;

	return saveAs;
}(
	   typeof self !== "undefined" && self
	|| typeof window !== "undefined" && window
	|| this.content
));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== "undefined" && module.exports) {
  module.exports.saveAs = saveAs;
} else if ((typeof define !== "undefined" && define !== null) && (define.amd !== null)) {
  define("FileSaver.js", function() {
    return saveAs;
  });
}

},{}],114:[function(require,module,exports){
(function (global){
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `map.set` because it's not chainable in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  // Don't return `set.add` because it's not chainable in IE 11.
  set.add(value);
  return set;
}

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    objectCreate = Object.create,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object),
    nativeMax = Math.max;

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (typeof key == 'number' && value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @param {boolean} [isFull] Specify a clone including symbols.
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
  var result;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      if (isHostObject(value)) {
        return object ? value : {};
      }
      result = initCloneObject(isFunc ? {} : value);
      if (!isDeep) {
        return copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (!isArr) {
    var props = isFull ? getAllKeys(value) : keys(value);
  }
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
  });
  return result;
}

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  if (!(isArray(source) || isTypedArray(source))) {
    var props = baseKeysIn(source);
  }
  arrayEach(props || source, function(srcValue, key) {
    if (props) {
      key = srcValue;
      srcValue = source[key];
    }
    if (isObject(srcValue)) {
      stack || (stack = new Stack);
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(object[key], srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  });
}

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = object[key],
      srcValue = source[key],
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    newValue = srcValue;
    if (isArray(srcValue) || isTypedArray(srcValue)) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else {
        isCommon = false;
        newValue = baseClone(srcValue, true);
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
        isCommon = false;
        newValue = baseClone(srcValue, true);
      }
      else {
        newValue = objValue;
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var result = new buffer.constructor(buffer.length);
  buffer.copy(result);
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor);
}

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor);
}

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  }
  return object;
}

/**
 * Copies own symbol properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Creates an array of the own enumerable symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Used by `_.defaultsDeep` to customize its `_.merge` use.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to merge.
 * @param {Object} object The parent object of `objValue`.
 * @param {Object} source The parent object of `srcValue`.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 * @returns {*} Returns the value to assign.
 */
function mergeDefaults(objValue, srcValue, key, object, source, stack) {
  if (isObject(objValue) && isObject(srcValue)) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, objValue);
    baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
    stack['delete'](srcValue);
  }
  return objValue;
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) ||
      objectToString.call(value) != objectTag || isHostObject(value)) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return (typeof Ctor == 'function' &&
    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

/**
 * This method is like `_.defaults` except that it recursively assigns
 * default properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaults
 * @example
 *
 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
 * // => { 'a': { 'b': 2, 'c': 3 } }
 */
var defaultsDeep = baseRest(function(args) {
  args.push(undefined, mergeDefaults);
  return apply(mergeWith, undefined, args);
});

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with seven arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */
var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
  baseMerge(object, source, srcIndex, customizer);
});

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = defaultsDeep;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],115:[function(require,module,exports){
exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

},{}],116:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":117}],117:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],118:[function(require,module,exports){
var converter = require('./sbgnmlConverter');

module.exports = function (text) {
  return converter.convert(text);
};

},{"./sbgnmlConverter":119}],119:[function(require,module,exports){
/* jslint browser: true */
/* global ActiveXObject: false */

var sbgnmlConverter = {
  loadXMLFromString: function (text) {
    var doc;
    if (window.ActiveXObject) {
      doc = new ActiveXObject('Microsoft.XMLDOM');
      doc.async = 'false';
      doc.loadXML(text);
    } else {
      var parser = new DOMParser();
      doc = parser.parseFromString(text, 'text/xml');
    }

    var parseError = doc.getElementsByTagName('parsererror');
    if (parseError.length > 0) {
      throw new Error('Could not convert the following text to xml: ' + JSON.stringify(text));
    }

    return doc;
  },
  sbgnmlTags: {
    'unspecified entity': true,
    'simple chemical': true,
    'macromolecule': true,
    'nucleic acid feature': true,
    'perturbing agent': true,
    'source and sink': true,
    'complex': true,
    'process': true,
    'omitted process': true,
    'uncertain process': true,
    'association': true,
    'dissociation': true,
    'phenotype': true,
    'tag': true,
    'consumption': true,
    'production': true,
    'modulation': true,
    'stimulation': true,
    'catalysis': true,
    'inhibition': true,
    'necessary stimulation': true,
    'logic arc': true,
    'equivalence arc': true,
    'and operator': true,
    'or operator': true,
    'not operator': true,
    'and': true,
    'or': true,
    'not': true,
    'nucleic acid feature multimer': true,
    'macromolecule multimer': true,
    'simple chemical multimer': true,
    'complex multimer': true,
    'compartment': true
  },
  insertedNodes: {},
  getAllCompartments: function (xmlObject) {
    var compartments = [];

    var compartmentEls = xmlObject.querySelectorAll("glyph[class='compartment']");

    for (var i = 0; i < compartmentEls.length; i++) {
      var compartment = compartmentEls[i];
      var bbox = this.findChildNode(compartment, 'bbox');
      compartments.push({
        'x': parseFloat(bbox.getAttribute('x')),
        'y': parseFloat(bbox.getAttribute('y')),
        'w': parseFloat(bbox.getAttribute('w')),
        'h': parseFloat(bbox.getAttribute('h')),
        'id': compartment.getAttribute('id')
      });
    }

    compartments.sort(function (c1, c2) {
      if (c1.h * c1.w < c2.h * c2.w) {
        return -1;
      }
      if (c1.h * c1.w > c2.h * c2.w) {
        return 1;
      }
      return 0;
    });

    return compartments;
  },
  isInBoundingBox: function (bbox1, bbox2) {
    if (bbox1.x > bbox2.x &&
        bbox1.y > bbox2.y &&
        bbox1.x + bbox1.w < bbox2.x + bbox2.w &&
        bbox1.y + bbox1.h < bbox2.y + bbox2.h) {
      return true;
    }
    return false;
  },
  bboxProp: function (ele) {
    var bbox = {};
    var bboxEl = ele.querySelector('bbox');

    bbox.x = bboxEl.getAttribute('x');
    bbox.y = bboxEl.getAttribute('y');
    bbox.w = bboxEl.getAttribute('w');
    bbox.h = bboxEl.getAttribute('h');
    // set positions as center
    bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;
    bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;

    return bbox;
  },
  stateAndInfoBboxProp: function (ele, parentBbox) {
    var xPos = parseFloat(parentBbox.x);
    var yPos = parseFloat(parentBbox.y);

    var bbox = {};
    var bboxEl = ele.querySelector('bbox');

    bbox.x = bboxEl.getAttribute('x');
    bbox.y = bboxEl.getAttribute('y');
    bbox.w = bboxEl.getAttribute('w');
    bbox.h = bboxEl.getAttribute('h');

    // set positions as center
    bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2 - xPos;
    bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2 - yPos;

    bbox.x = bbox.x / parseFloat(parentBbox.w) * 100;
    bbox.y = bbox.y / parseFloat(parentBbox.h) * 100;

    return bbox;
  },
  findChildNodes: function (ele, childTagName) {
    // find child nodes at depth level of 1 relative to the element
    var children = [];
    for (var i = 0; i < ele.childNodes.length; i++) {
      var child = ele.childNodes[i];
      if (child.nodeType === 1 && child.tagName === childTagName) {
        children.push(child);
      }
    }
    return children;
  },
  findChildNode: function (ele, childTagName) {
    var nodes = this.findChildNodes(ele, childTagName);
    return nodes.length > 0 ? nodes[0] : undefined;
  },
  stateAndInfoProp: function (ele, parentBbox) {
    var self = this;
    var stateAndInfoArray = [];

    var childGlyphs = this.findChildNodes(ele, 'glyph');

    for (var i = 0; i < childGlyphs.length; i++) {
      var glyph = childGlyphs[i];
      var info = {};

      if (glyph.className === 'unit of information') {
        info.id = glyph.getAttribute('id') || undefined;
        info.clazz = glyph.className || undefined;
        var label = glyph.querySelector('label');
        info.label = {
          'text': (label && label.getAttribute('text')) || undefined
        };
        info.bbox = self.stateAndInfoBboxProp(glyph, parentBbox);
        stateAndInfoArray.push(info);
      } else if (glyph.className === 'state variable') {
        info.id = glyph.getAttribute('id') || undefined;
        info.clazz = glyph.className || undefined;
        var state = glyph.querySelector('state');
        var value = (state && state.getAttribute('value')) || undefined;
        var variable = (state && state.getAttribute('variable')) || undefined;
        info.state = {
          'value': value,
          'variable': variable
        };
        info.bbox = self.stateAndInfoBboxProp(glyph, parentBbox);
        stateAndInfoArray.push(info);
      }
    }


    return stateAndInfoArray;
  },
  addParentInfoToNode: function (ele, nodeObj, parent, compartments) {
    var self = this;
    var compartmentRef = ele.getAttribute('compartmentRef');

    if (parent) {
      nodeObj.parent = parent;
      return;
    }

    if (compartmentRef) {
      nodeObj.parent = compartmentRef;
    } else {
      nodeObj.parent = '';

      // add compartment according to geometry
      for (var i = 0; i < compartments.length; i++) {
        var bboxEl = self.findChildNode(ele, 'bbox');
        var bbox = {
          'x': parseFloat(bboxEl.getAttribute('x')),
          'y': parseFloat(bboxEl.getAttribute('y')),
          'w': parseFloat(bboxEl.getAttribute('w')),
          'h': parseFloat(bboxEl.getAttribute('h')),
          'id': ele.getAttribute('id')
        };
        if (self.isInBoundingBox(bbox, compartments[i])) {
          nodeObj.parent = compartments[i].id;
          break;
        }
      }
    }
  },
  addCytoscapeJsNode: function (ele, jsonArray, parent, compartments) {
    var self = this;
    var nodeObj = {};

    // add id information
    nodeObj.id = ele.getAttribute('id');
    // add node bounding box information
    nodeObj.bbox = self.bboxProp(ele);
    // add class information
    nodeObj.class = ele.className;
    // add label information
    var label = self.findChildNode(ele, 'label');
    nodeObj.label = (label && label.getAttribute('text')) || undefined;
    // add state and info box information
    nodeObj.statesandinfos = self.stateAndInfoProp(ele, nodeObj.bbox);
    // adding parent information
    self.addParentInfoToNode(ele, nodeObj, parent, compartments);

    // add clone information
    var cloneMarkers = self.findChildNodes(ele, 'clone');
    if (cloneMarkers.length > 0) {
      nodeObj.clonemarker = true;
    } else {
      nodeObj.clonemarker = undefined;
    }

    // add port information
    var ports = [];
    var portElements = ele.querySelectorAll('port');

    for (var i = 0; i < portElements.length; i++) {
      var portEl = portElements[i];
      var id = portEl.getAttribute('id');
      var relativeXPos = parseFloat(portEl.getAttribute('x')) - nodeObj.bbox.x;
      var relativeYPos = parseFloat(portEl.getAttribute('y')) - nodeObj.bbox.y;

      relativeXPos = relativeXPos / parseFloat(nodeObj.bbox.w) * 100;
      relativeYPos = relativeYPos / parseFloat(nodeObj.bbox.h) * 100;

      ports.push({
        id: id,
        x: relativeXPos,
        y: relativeYPos
      });
    }

    nodeObj.ports = ports;

    var cytoscapeJsNode = {data: nodeObj};
    jsonArray.push(cytoscapeJsNode);
  },
  traverseNodes: function (ele, jsonArray, parent, compartments) {
    var elId = ele.getAttribute('id');
    if (!this.sbgnmlTags[ele.className]) {
      return;
    }
    this.insertedNodes[elId] = true;
    var self = this;
    // add complex nodes here

    var eleClass = ele.className;

    if (eleClass === 'complex' || eleClass === 'submap') {
      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);

      var childGlyphs = self.findChildNodes(ele, 'glyph');
      for (var i = 0; i < childGlyphs.length; i++) {
        var glyph = childGlyphs[i];
        var glyphClass = glyph.className;
        if (glyphClass !== 'state variable' && glyphClass !== 'unit of information') {
          self.traverseNodes(glyph, jsonArray, elId, compartments);
        }
      }
    } else {
      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);
    }
  },
  getPorts: function (xmlObject) {
    return ( xmlObject._cachedPorts = xmlObject._cachedPorts || xmlObject.querySelectorAll('port'));
  },
  getGlyphs: function (xmlObject) {
    var glyphs = xmlObject._cachedGlyphs;

    if (!glyphs) {
      glyphs = xmlObject._cachedGlyphs = xmlObject._cachedGlyphs || xmlObject.querySelectorAll('glyph');

      var id2glyph = xmlObject._id2glyph = {};

      for ( var i = 0; i < glyphs.length; i++ ) {
        var g = glyphs[i];
        var id = g.getAttribute('id');

        id2glyph[ id ] = g;
      }
    }

    return glyphs;
  },
  getGlyphById: function (xmlObject, id) {
    this.getGlyphs(xmlObject); // make sure cache is built

    return xmlObject._id2glyph[id];
  },
  getArcSourceAndTarget: function (arc, xmlObject) {
    // source and target can be inside of a port
    var source = arc.getAttribute('source');
    var target = arc.getAttribute('target');
    var sourceNodeId;
    var targetNodeId;

    var sourceExists = this.getGlyphById(xmlObject, source);
    var targetExists = this.getGlyphById(xmlObject, target);

    if (sourceExists) {
      sourceNodeId = source;
    }

    if (targetExists) {
      targetNodeId = target;
    }


    var i;
    var portEls = this.getPorts(xmlObject);
    var port;
    if (sourceNodeId === undefined) {
      for (i = 0; i < portEls.length; i++ ) {
        port = portEls[i];
        if (port.getAttribute('id') === source) {
          sourceNodeId = port.parentElement.getAttribute('id');
        }
      }
    }

    if (targetNodeId === undefined) {
      for (i = 0; i < portEls.length; i++) {
        port = portEls[i];
        if (port.getAttribute('id') === target) {
          targetNodeId = port.parentElement.getAttribute('id');
        }
      }
    }

    return {'source': sourceNodeId, 'target': targetNodeId};
  },

  getArcBendPointPositions: function (ele) {
    var bendPointPositions = [];

    var children = this.findChildNodes(ele, 'next');

    for (var i = 0; i < children.length; i++) {
      var posX = children[i].getAttribute('x');
      var posY = children[i].getAttribute('y');

      bendPointPositions.push({
        x: posX,
        y: posY
      });
    }

    return bendPointPositions;
  },
  addCytoscapeJsEdge: function (ele, jsonArray, xmlObject) {
    if (!this.sbgnmlTags[ele.className]) {
      return;
    }

    var self = this;
    var sourceAndTarget = self.getArcSourceAndTarget(ele, xmlObject);

    if (!this.insertedNodes[sourceAndTarget.source] || !this.insertedNodes[sourceAndTarget.target]) {
      return;
    }

    var edgeObj = {};
    var bendPointPositions = self.getArcBendPointPositions(ele);

    edgeObj.id = ele.getAttribute('id') || undefined;
    edgeObj.class = ele.className;
    edgeObj.bendPointPositions = bendPointPositions;

    var glyphChildren = self.findChildNodes(ele, 'glyph');
    var glyphDescendents = ele.querySelectorAll('glyph');
    if (glyphDescendents.length <= 0) {
      edgeObj.cardinality = 0;
    } else {
      for (var i = 0; i < glyphChildren.length; i++) {
        if (glyphChildren[i].className === 'cardinality') {
          var label = glyphChildren[i].querySelector('label');
          edgeObj.cardinality = label.getAttribute('text') || undefined;
        }
      }
    }

    edgeObj.source = sourceAndTarget.source;
    edgeObj.target = sourceAndTarget.target;

    edgeObj.portsource = ele.getAttribute('source');
    edgeObj.porttarget = ele.getAttribute('target');

    var cytoscapeJsEdge = {data: edgeObj};
    jsonArray.push(cytoscapeJsEdge);
  },
  convert: function (sbgnmlText) {
    var self = this;
    var cytoscapeJsNodes = [];
    var cytoscapeJsEdges = [];

    var xmlObject = this.loadXMLFromString(sbgnmlText);

    var compartments = self.getAllCompartments(xmlObject);

    var glyphs = self.findChildNodes(xmlObject.querySelector('map'), 'glyph');
    var arcs = self.findChildNodes(xmlObject.querySelector('map'), 'arc');

    var i;
    for (i = 0; i < glyphs.length; i++) {
      var glyph = glyphs[i];
      self.traverseNodes(glyph, cytoscapeJsNodes, '', compartments);
    }

    for (i = 0; i < arcs.length; i++) {
      var arc = arcs[i];
      self.addCytoscapeJsEdge(arc, cytoscapeJsEdges, xmlObject);
    }

    var cytoscapeJsGraph = {};
    cytoscapeJsGraph.nodes = cytoscapeJsNodes;
    cytoscapeJsGraph.edges = cytoscapeJsEdges;

    this.insertedNodes = {};

    return cytoscapeJsGraph;
  }
};

module.exports = sbgnmlConverter;

},{}],120:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Cytoscape = require('cytoscape-for-sbgnviz');
var defaultsDeep = require('lodash.defaultsdeep');

var augment = require('./sbgnRenderer/augmentCytoscape');
var graphStyleSheet = require('./style/graphStyleSheet');

augment(Cytoscape); // TODO should be removed eventually (just use vanilla cy)

var defaultOptions = {
  style: graphStyleSheet(Cytoscape),
  boxSelectionEnabled: true,
  showOverlay: false,
  minZoom: false,
  maxZoom: false,
  motionBlur: false,
  wheelSensitivity: 0.1
};

var SBGNRenderer = function (_Cytoscape) {
  _inherits(SBGNRenderer, _Cytoscape);

  function SBGNRenderer(options) {
    _classCallCheck(this, SBGNRenderer);

    return _possibleConstructorReturn(this, (SBGNRenderer.__proto__ || Object.getPrototypeOf(SBGNRenderer)).call(this, defaultsDeep({}, defaultOptions, options)));
  }
  //   TODO: Initial sbgn-renderer api
  //   sbgn (kdfkd) { // the function that can possibly turned into an extension
  //   ...; // style sheet can be set in here
  //   ...; // accept sbngml file or string, promise to resolve to string (fetch support), possibly always treat it as a promise
  //   ...; // export  to sbgnml file or picture
  //  }


  return SBGNRenderer;
}(Cytoscape);

exports.default = SBGNRenderer;

},{"./sbgnRenderer/augmentCytoscape":121,"./style/graphStyleSheet":130,"cytoscape-for-sbgnviz":85,"lodash.defaultsdeep":114}],121:[function(require,module,exports){
'use strict';

var extend = require('extend');

// sbgn constants
var config = require('./config');

// rendering
var _draw = require('./draw');
var renderIntersect = require('./intersect');
var renderPoint = require('./point'); // rPoint because it seems that point is used as a variable often

// cytoscape math
var cyMath = require('./cyMath');

// At the core of the renderer is cytoscape.
// We need to augment it to render SBGN specific graphics.

// At a birds eye view, these are functions are designed to
// write sbgn shapes such as polygons, square boxes, arrows, etc. to the
// canvas.

// At the conceptual level this is bad.  It exposes cytoscape internals
// and modifies the cytoscape object itself.

module.exports = function (cytoscape) {
  var cyStyleProperties = cytoscape.styleProperties;
  var cyBaseArrowShapes = cytoscape.baseArrowShapes;
  var cyShapes = cytoscape.baseNodeShapes; // we need dont want to mutate ./cyShapes.js
  var $$ = cytoscape;

  // modified cytoscape.js needs these or it breaks
  $$.sbgn.sbgnShapes = config.sbgnShapes;

  // define new cytoscape shapes, line styles, arrowshapes
  cyStyleProperties.types.nodeShape.enums.push('nucleic acid feature');
  cyStyleProperties.types.nodeShape.enums.push('complex');
  cyStyleProperties.types.nodeShape.enums.push('macromolecule');
  cyStyleProperties.types.nodeShape.enums.push('simple chemical');
  cyStyleProperties.types.nodeShape.enums.push('unspecified entity');
  cyStyleProperties.types.nodeShape.enums.push('process');
  cyStyleProperties.types.nodeShape.enums.push('omitted process');
  cyStyleProperties.types.nodeShape.enums.push('uncertain process');
  cyStyleProperties.types.nodeShape.enums.push('association');

  cyStyleProperties.types.lineStyle.enums.push('consumption');
  cyStyleProperties.types.lineStyle.enums.push('production');

  cyStyleProperties.types.arrowShape.enums.push('necessary stimulation');

  $$.sbgn.registerSbgnArrowShapes = function () {
    cyBaseArrowShapes['necessary stimulation'] = extend({}, cyBaseArrowShapes['triangle-tee']);
    cyBaseArrowShapes['necessary stimulation'].pointsTee = [-0.18, -0.43, 0.18, -0.43];
  };

  $$.sbgn.registerSbgnNodeShapes = function () {
    cyShapes['process'] = {
      points: cyMath.generateUnitNgonPointsFitToSquare(4, 0),
      label: '',
      draw: function draw(context, node) {
        var width = node.width();
        var height = node.height();
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;

        _draw.drawPolygonPath(context, centerX, centerY, width, height, cyShapes['process'].points);
        context.fill();

        context.stroke();

        _draw.drawPortsToPolygonShape(context, node, this.points);
      },
      intersectLine: function intersectLine(node, x, y, portId) {
        var nodeX = node._private.position.x;
        var nodeY = node._private.position.y;
        var width = node.width();
        var height = node.height();
        var padding = parseInt(node.css('border-width')) / 2;

        var portIntersection = renderIntersect.intersectLinePorts(node, x, y, portId);
        if (portIntersection.length > 0) {
          return portIntersection;
        }

        return cyMath.polygonIntersectLine(x, y, cyShapes['process'].points, nodeX, nodeY, width / 2, height / 2, padding);
      },
      checkPoint: function checkPoint(x, y, node) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var width = node.width();
        var height = node.height();
        var padding = parseInt(node.css('border-width')) / 2;

        return cyMath.pointInsidePolygon(x, y, cyShapes['process'].points, centerX, centerY, width, height, [0, -1], padding);
      }
    };

    cyShapes['omitted process'] = extend(true, {}, cyShapes['process']);
    cyShapes['omitted process'].label = '\\\\';

    cyShapes['uncertain process'] = extend(true, {}, cyShapes['process']);
    cyShapes['uncertain process'].label = '?';

    cyShapes['unspecified entity'] = {
      draw: function draw(context, node) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;

        var width = node.width();
        var height = node.height();
        var cloneMarker = node._private.data.clonemarker;

        _draw.drawEllipse(context, centerX, centerY, width, height);

        context.stroke();

        $$.sbgn.cloneMarker.unspecifiedEntity(context, centerX, centerY, width, height, cloneMarker, node.css('background-opacity'));

        forceOpacityToOne(node, context);
        _draw.drawStateAndInfos(node, context, centerX, centerY);
      },
      intersectLine: function intersectLine(node, x, y, portId) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;

        var width = node.width();
        var height = node.height();
        var padding = parseInt(node.css('border-width')) / 2;

        var portIntersection = renderIntersect.intersectLinePorts(node, x, y, portId);
        if (portIntersection.length > 0) {
          return portIntersection;
        }

        var stateAndInfoIntersectLines = renderIntersect.intersectLineStateAndInfoBoxes(node, x, y);

        var nodeIntersectLines = cyShapes['ellipse'].intersectLine(centerX, centerY, width, height, x, y, padding);

        var intersections = stateAndInfoIntersectLines.concat(nodeIntersectLines);
        return renderIntersect.intersectClosestPoint([x, y], intersections);
      },
      checkPoint: function checkPoint(x, y, node, threshold) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;

        var width = node.width();
        var height = node.height();
        var padding = parseInt(node.css('border-width')) / 2;

        var nodeCheckPoint = cyShapes['ellipse'].checkPoint(x, y, padding, width, height, centerX, centerY);

        var stateAndInfoCheckPoint = renderPoint.checkPointStateAndInfoBoxes(x, y, node, threshold);

        return nodeCheckPoint || stateAndInfoCheckPoint;
      }
    };

    cyShapes['simple chemical'] = {
      multimerPadding: 5,
      draw: function draw(context, node) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;

        var width = node.width();
        var height = node.height();
        var multimerPadding = cyShapes['simple chemical'].multimerPadding;
        var padding = parseInt(node.css('border-width'));
        var cloneMarker = node._private.data.clonemarker;

        if ($$.sbgn.isMultimer(node)) {
          //add multimer shape
          _draw.drawSimpleChemical(context, centerX + multimerPadding, centerY + multimerPadding, width, height);

          context.stroke();

          $$.sbgn.cloneMarker.simpleChemical(context, centerX + multimerPadding, centerY + multimerPadding, width - padding, height - padding, cloneMarker, true, node.css('background-opacity'));
        }

        _draw.drawSimpleChemical(context, centerX, centerY, width, height);

        context.stroke();

        $$.sbgn.cloneMarker.simpleChemical(context, centerX, centerY, width - padding, height - padding, cloneMarker, false, node.css('background-opacity'));

        var oldStyle = context.fillStyle;
        forceOpacityToOne(node, context);
        _draw.drawStateAndInfos(node, context, centerX, centerY);
        context.fillStyle = oldStyle;
      },
      intersectLine: function intersectLine(node, x, y, portId) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;

        var width = node.width();
        var height = node.height();
        var padding = parseInt(node.css('border-width'));
        var multimerPadding = cyShapes['simple chemical'].multimerPadding;

        var portIntersection = renderIntersect.intersectLinePorts(node, x, y, portId);
        if (portIntersection.length > 0) {
          return portIntersection;
        }

        var stateAndInfoIntersectLines = renderIntersect.intersectLineStateAndInfoBoxes(node, x, y);

        var nodeIntersectLines = cyShapes['ellipse'].intersectLine(centerX, centerY, width, height, x, y, padding);

        //check whether sbgn class includes multimer substring or not
        var multimerIntersectionLines = [];
        if ($$.sbgn.isMultimer(node)) {
          multimerIntersectionLines = cyShapes['ellipse'].intersectLine(centerX + multimerPadding, centerY + multimerPadding, width, height, x, y, padding);
        }

        var intersections = stateAndInfoIntersectLines.concat(nodeIntersectLines, multimerIntersectionLines);

        return renderIntersect.intersectClosestPoint([x, y], intersections);
      },
      checkPoint: function checkPoint(x, y, node, threshold) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;

        var width = node.width();
        var height = node.height();
        var padding = parseInt(node.css('border-width')) / 2;
        var multimerPadding = cyShapes['simple chemical'].multimerPadding;

        var nodeCheckPoint = cyShapes['roundrectangle'].checkPoint(x, y, padding, width, height, centerX, centerY);

        var stateAndInfoCheckPoint = renderPoint.checkPointStateAndInfoBoxes(x, y, node, threshold);

        //check whether sbgn class includes multimer substring or not
        var multimerCheckPoint = false;
        if ($$.sbgn.isMultimer(node)) {
          multimerCheckPoint = cyShapes['ellipse'].checkPoint(x, y, padding, width, height, centerX + multimerPadding, centerY + multimerPadding);
        }

        return nodeCheckPoint || stateAndInfoCheckPoint || multimerCheckPoint;
      }
    };

    cyShapes['macromolecule'] = {
      points: cyMath.generateUnitNgonPoints(4, 0),
      multimerPadding: 5,
      draw: function draw(context, node) {
        var width = node.width();
        var height = node.height();
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var multimerPadding = cyShapes['macromolecule'].multimerPadding;
        var cloneMarker = node._private.data.clonemarker;

        //check whether sbgn class includes multimer substring or not
        if ($$.sbgn.isMultimer(node)) {
          //add multimer shape
          _draw.drawRoundRectanglePath(context, centerX + multimerPadding, centerY + multimerPadding, width, height);

          context.fill();
          context.stroke();

          $$.sbgn.cloneMarker.macromolecule(context, centerX + multimerPadding, centerY + multimerPadding, width, height, cloneMarker, true, node.css('background-opacity'));
        }

        _draw.drawRoundRectanglePath(context, centerX, centerY, width, height);
        context.fill();

        context.stroke();

        $$.sbgn.cloneMarker.macromolecule(context, centerX, centerY, width, height, cloneMarker, false, node.css('background-opacity'));

        var oldStyle = context.fillStyle;
        forceOpacityToOne(node, context);
        _draw.drawStateAndInfos(node, context, centerX, centerY);
        context.fillStyle = oldStyle;
      },
      intersectLine: function intersectLine(node, x, y, portId) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var width = node.width();
        var height = node.height();
        var padding = parseInt(node.css('border-width')) / 2;
        var multimerPadding = cyShapes['macromolecule'].multimerPadding;
        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);

        var portIntersection = renderIntersect.intersectLinePorts(node, x, y, portId);
        if (portIntersection.length > 0) {
          return portIntersection;
        }

        var stateAndInfoIntersectLines = renderIntersect.intersectLineStateAndInfoBoxes(node, x, y);

        var nodeIntersectLines = renderIntersect.intersectRoundRectangleLine(x, y, centerX, centerY, centerX, centerY, width, height, cornerRadius, padding);

        //check whether sbgn class includes multimer substring or not
        var multimerIntersectionLines = [];
        if ($$.sbgn.isMultimer(node)) {
          multimerIntersectionLines = renderIntersect.intersectRoundRectangleLine(x, y, centerX, centerY, centerX + multimerPadding, centerY + multimerPadding, width, height, cornerRadius, padding);
        }

        var intersections = stateAndInfoIntersectLines.concat(nodeIntersectLines, multimerIntersectionLines);

        return renderIntersect.intersectClosestPoint([x, y], intersections);
      },
      checkPoint: function checkPoint(x, y, node, threshold) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var width = node.width() + threshold;
        var height = node.height() + threshold;
        var padding = parseInt(node.css('border-width')) / 2;
        var multimerPadding = cyShapes['macromolecule'].multimerPadding;

        var nodeCheckPoint = cyShapes['roundrectangle'].checkPoint(x, y, padding, width, height, centerX, centerY);
        var stateAndInfoCheckPoint = renderPoint.checkPointStateAndInfoBoxes(x, y, node, threshold);

        //check whether sbgn class includes multimer substring or not
        var multimerCheckPoint = false;
        if ($$.sbgn.isMultimer(node)) {
          multimerCheckPoint = cyShapes['roundrectangle'].checkPoint(x, y, padding, width, height, centerX + multimerPadding, centerY + multimerPadding);
        }

        return nodeCheckPoint || stateAndInfoCheckPoint || multimerCheckPoint;
      }
    };

    cyShapes['association'] = {
      draw: function draw(context, node) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var width = node.width();
        var height = node.height();

        cyShapes['ellipse'].draw(context, centerX, centerY, width, height);
        context.fill();
        context.stroke();

        _draw.drawPortsToEllipseShape(context, node);
      },
      intersectLine: function intersectLine(node, x, y, portId) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var width = node.width();
        var height = node.height();
        var padding = parseInt(node.css('border-width')) / 2;

        var portIntersection = renderIntersect.intersectLinePorts(node, x, y, portId);
        if (portIntersection.length > 0) {
          return portIntersection;
        }

        var intersect = cyMath.intersectLineEllipse(x, y, centerX, centerY, width / 2 + padding, height / 2 + padding);

        return intersect;
      },
      checkPoint: function checkPoint(x, y, node) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var width = node.width();
        var height = node.height();
        var padding = parseInt(node.css('border-width')) / 2;

        x -= centerX;
        y -= centerY;

        x /= width / 2 + padding;
        y /= height / 2 + padding;

        return Math.pow(x, 2) + Math.pow(y, 2) <= 1;
      }
    };

    cyShapes['complex'] = {
      points: [],
      multimerPadding: 5,
      cornerLength: 12,
      draw: function draw(context, node) {
        var width = node.outerWidth() - parseFloat(node.css('border-width'));
        var height = node.outerHeight() - parseFloat(node.css('border-width'));
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var stateAndInfos = node._private.data.statesandinfos;
        var cornerLength = cyShapes['complex'].cornerLength;
        var multimerPadding = cyShapes['complex'].multimerPadding;
        var cloneMarker = node._private.data.clonemarker;

        cyShapes['complex'].points = renderPoint.generateComplexShapePoints(cornerLength, width, height);

        //check whether sbgn class includes multimer substring or not
        if ($$.sbgn.isMultimer(node)) {
          //add multimer shape
          _draw.drawPolygonPath(context, centerX + multimerPadding, centerY + multimerPadding, width, height, cyShapes['complex'].points);
          context.fill();

          context.stroke();

          $$.sbgn.cloneMarker.complex(context, centerX + multimerPadding, centerY + multimerPadding, width, height, cornerLength, cloneMarker, true, node.css('background-opacity'));
        }

        _draw.drawPolygonPath(context, centerX, centerY, width, height, cyShapes['complex'].points);
        context.fill();

        context.stroke();

        $$.sbgn.cloneMarker.complex(context, centerX, centerY, width, height, cornerLength, cloneMarker, false, node.css('background-opacity'));

        var oldStyle = context.fillStyle;
        forceOpacityToOne(node, context);
        _draw.drawComplexStateAndInfo(context, node, stateAndInfos, centerX, centerY, width, height);
        context.fillStyle = oldStyle;
      },
      intersectLine: function intersectLine(node, x, y, portId) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var width = node.outerWidth() - parseFloat(node.css('border-width'));
        var height = node.outerHeight() - parseFloat(node.css('border-width'));
        var padding = parseInt(node.css('border-width')) / 2;
        var multimerPadding = cyShapes['complex'].multimerPadding;
        var cornerLength = cyShapes['complex'].cornerLength;

        var portIntersection = renderIntersect.intersectLinePorts(node, x, y, portId);
        if (portIntersection.length > 0) {
          return portIntersection;
        }

        cyShapes['complex'].points = renderPoint.generateComplexShapePoints(cornerLength, width, height);

        var stateAndInfoIntersectLines = renderIntersect.intersectLineStateAndInfoBoxes(node, x, y);

        var nodeIntersectLines = cyMath.polygonIntersectLine(x, y, cyShapes['complex'].points, centerX, centerY, width / 2, height / 2, padding);

        //check whether sbgn class includes multimer substring or not
        var multimerIntersectionLines = [];
        if ($$.sbgn.isMultimer(node)) {
          multimerIntersectionLines = cyMath.polygonIntersectLine(x, y, cyShapes['complex'].points, centerX + multimerPadding, centerY + multimerPadding, width / 2, height / 2, padding);
        }

        var intersections = stateAndInfoIntersectLines.concat(nodeIntersectLines, multimerIntersectionLines);

        return renderIntersect.intersectClosestPoint([x, y], intersections);
      },
      checkPoint: function checkPoint(x, y, node, threshold) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var width = node.outerWidth() - parseFloat(node.css('border-width'));
        var height = node.outerHeight() - parseFloat(node.css('border-width'));
        var padding = parseInt(node.css('border-width')) / 2;
        var multimerPadding = cyShapes['complex'].multimerPadding;
        var cornerLength = cyShapes['complex'].cornerLength;

        cyShapes['complex'].points = renderPoint.generateComplexShapePoints(cornerLength, width, height);

        var nodeCheckPoint = cyMath.pointInsidePolygon(x, y, cyShapes['complex'].points, centerX, centerY, width, height, [0, -1], padding);

        var stateAndInfoCheckPoint = renderPoint.checkPointStateAndInfoBoxes(x, y, node, threshold);

        //check whether sbgn class includes multimer substring or not
        var multimerCheckPoint = false;
        if ($$.sbgn.isMultimer(node)) {
          multimerCheckPoint = cyMath.pointInsidePolygon(x, y, cyShapes['complex'].points, centerX + multimerPadding, centerY + multimerPadding, width, height, [0, -1], padding);
        }

        return nodeCheckPoint || stateAndInfoCheckPoint || multimerCheckPoint;
      }
    };

    cyShapes['nucleic acid feature'] = {
      points: cyMath.generateUnitNgonPointsFitToSquare(4, 0),
      multimerPadding: 5,
      draw: function draw(context, node) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var width = node.width();
        var height = node.height();
        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);
        var multimerPadding = cyShapes['nucleic acid feature'].multimerPadding;
        var cloneMarker = node._private.data.clonemarker;

        //check whether sbgn class includes multimer substring or not
        if ($$.sbgn.isMultimer(node)) {
          //add multimer shape
          _draw.drawNucAcidFeature(context, width, height, centerX + multimerPadding, centerY + multimerPadding, cornerRadius);

          context.stroke();

          $$.sbgn.cloneMarker.nucleicAcidFeature(context, centerX + multimerPadding, centerY + multimerPadding, width, height, cloneMarker, true, node.css('background-opacity'));
        }

        _draw.drawNucAcidFeature(context, width, height, centerX, centerY, cornerRadius);

        context.stroke();

        $$.sbgn.cloneMarker.nucleicAcidFeature(context, centerX, centerY, width, height, cloneMarker, false, node.css('background-opacity'));

        var oldStyle = context.fillStyle;
        forceOpacityToOne(node, context);
        _draw.drawStateAndInfos(node, context, centerX, centerY);
        context.fillStyle = oldStyle;
      },
      drawPath: function drawPath(context, node) {},
      intersectLine: function intersectLine(node, x, y, portId) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var multimerPadding = cyShapes['nucleic acid feature'].multimerPadding;
        var width = node.width();
        var height = node.height();
        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);

        var portIntersection = renderIntersect.intersectLinePorts(node, x, y, portId);
        if (portIntersection.length > 0) {
          return portIntersection;
        }

        var stateAndInfoIntersectLines = renderIntersect.intersectLineStateAndInfoBoxes(node, x, y);

        var nodeIntersectLines = renderIntersect.intersectNucleicAcidLine(node, x, y, centerX, centerY, cornerRadius);

        //check whether sbgn class includes multimer substring or not
        var multimerIntersectionLines = [];
        if ($$.sbgn.isMultimer(node)) {
          multimerIntersectionLines = renderIntersect.intersectNucleicAcidLine(node, x, y, centerX + multimerPadding, centerY + multimerPadding, cornerRadius);
        }

        var intersections = stateAndInfoIntersectLines.concat(nodeIntersectLines, multimerIntersectionLines);

        return renderIntersect.intersectClosestPoint([x, y], intersections);
      },
      checkPoint: function checkPoint(x, y, node, threshold) {
        var centerX = node._private.position.x;
        var centerY = node._private.position.y;
        var multimerPadding = cyShapes['nucleic acid feature'].multimerPadding;
        var width = node.width();
        var height = node.height();
        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);

        var nodeCheckPoint = renderPoint.nucleicAcidCheckPoint(x, y, centerX, centerY, node, threshold, this.points, cornerRadius);
        var stateAndInfoCheckPoint = renderPoint.checkPointStateAndInfoBoxes(x, y, node, threshold);

        //check whether sbgn class includes multimer substring or not
        var multimerCheckPoint = false;
        if ($$.sbgn.isMultimer(node)) {
          multimerCheckPoint = renderPoint.nucleicAcidCheckPoint(x, y, centerX + multimerPadding, centerY + multimerPadding, node, threshold, this.points, cornerRadius);
        }

        return nodeCheckPoint || stateAndInfoCheckPoint || multimerCheckPoint;
      }
    };
  };

  function simpleChemicalLeftClone(context, centerX, centerY, width, height, cloneMarker, opacity) {
    if (cloneMarker != null) {
      var oldGlobalAlpha = context.globalAlpha;
      context.globalAlpha = opacity;
      var oldStyle = context.fillStyle;
      context.fillStyle = config.colors.clone;

      context.beginPath();
      context.translate(centerX, centerY);
      context.scale(width / 2, height / 2);

      var markerBeginX = -1 * Math.sin(Math.PI / 3);
      var markerBeginY = Math.cos(Math.PI / 3);
      var markerEndX = 0;
      var markerEndY = markerBeginY;

      context.moveTo(markerBeginX, markerBeginY);
      context.lineTo(markerEndX, markerEndY);
      context.arc(0, 0, 1, 3 * Math.PI / 6, 5 * Math.PI / 6);

      context.scale(2 / width, 2 / height);
      context.translate(-centerX, -centerY);
      context.closePath();

      context.fill();
      context.fillStyle = oldStyle;
      context.globalAlpha = oldGlobalAlpha;
    }
  }

  function simpleChemicalRightClone(context, centerX, centerY, width, height, cloneMarker, opacity) {
    if (cloneMarker != null) {
      var oldGlobalAlpha = context.globalAlpha;
      context.globalAlpha = opacity;
      var oldStyle = context.fillStyle;
      context.fillStyle = config.colors.clone;

      context.beginPath();
      context.translate(centerX, centerY);
      context.scale(width / 2, height / 2);

      var markerBeginX = 0;
      var markerBeginY = Math.cos(Math.PI / 3);
      var markerEndX = 1 * Math.sin(Math.PI / 3);
      var markerEndY = markerBeginY;

      context.moveTo(markerBeginX, markerBeginY);
      context.lineTo(markerEndX, markerEndY);
      context.arc(0, 0, 1, Math.PI / 6, 3 * Math.PI / 6);

      context.scale(2 / width, 2 / height);
      context.translate(-centerX, -centerY);
      context.closePath();

      context.fill();
      context.fillStyle = oldStyle;
      context.globalAlpha = oldGlobalAlpha;
    }
  }

  $$.sbgn.cloneMarker = {
    unspecifiedEntity: function unspecifiedEntity(context, centerX, centerY, width, height, cloneMarker, opacity) {
      if (cloneMarker != null) {
        var oldGlobalAlpha = context.globalAlpha;
        context.globalAlpha = opacity;
        var oldStyle = context.fillStyle;
        context.fillStyle = config.colors.clone;

        context.beginPath();
        context.translate(centerX, centerY);
        context.scale(width / 2, height / 2);

        var markerBeginX = -1 * Math.sin(Math.PI / 3);
        var markerBeginY = Math.cos(Math.PI / 3);
        var markerEndX = 1 * Math.sin(Math.PI / 3);
        var markerEndY = markerBeginY;

        context.moveTo(markerBeginX, markerBeginY);
        context.lineTo(markerEndX, markerEndY);
        context.arc(0, 0, 1, Math.PI / 6, 5 * Math.PI / 6);

        context.scale(2 / width, 2 / height);
        context.translate(-centerX, -centerY);
        context.closePath();

        context.fill();
        context.fillStyle = oldStyle;
        context.globalAlpha = oldGlobalAlpha;
      }
    },
    sourceAndSink: function sourceAndSink(context, centerX, centerY, width, height, cloneMarker, opacity) {
      $$.sbgn.cloneMarker.unspecifiedEntity(context, centerX, centerY, width, height, cloneMarker, opacity);
    },
    simpleChemical: function simpleChemical(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {
      if (cloneMarker != null) {
        var cornerRadius = Math.min(width / 2, height / 2);

        var firstCircleCenterX = centerX - width / 2 + cornerRadius;
        var firstCircleCenterY = centerY;
        var secondCircleCenterX = centerX + width / 2 - cornerRadius;
        var secondCircleCenterY = centerY;

        simpleChemicalLeftClone(context, firstCircleCenterX, firstCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);

        simpleChemicalRightClone(context, secondCircleCenterX, secondCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);

        var oldStyle = context.fillStyle;
        context.fillStyle = config.colors.clone;
        var oldGlobalAlpha = context.globalAlpha;
        context.globalAlpha = opacity;

        var recPoints = cyMath.generateUnitNgonPointsFitToSquare(4, 0);
        var cloneX = centerX;
        var cloneY = centerY + 3 / 4 * cornerRadius;
        var cloneWidth = width - 2 * cornerRadius;
        var cloneHeight = cornerRadius / 2;

        _draw.drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, recPoints);
        context.fill();
        context.fillStyle = oldStyle;
        context.globalAlpha = oldGlobalAlpha;
      }
    },
    perturbingAgent: function perturbingAgent(context, centerX, centerY, width, height, cloneMarker, opacity) {
      if (cloneMarker != null) {
        var cloneWidth = width;
        var cloneHeight = height / 4;
        var cloneX = centerX;
        var cloneY = centerY + height / 2 - height / 8;

        var markerPoints = [-5 / 6, -1, 5 / 6, -1, 1, 1, -1, 1];

        var oldStyle = context.fillStyle;
        context.fillStyle = config.colors.clone;
        var oldGlobalAlpha = context.globalAlpha;
        context.globalAlpha = opacity;

        _draw.drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, markerPoints);

        context.fill();

        context.fillStyle = oldStyle;
        context.globalAlpha = oldGlobalAlpha;
      }
    },
    nucleicAcidFeature: function nucleicAcidFeature(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {
      if (cloneMarker != null) {
        var cloneWidth = width;
        var cloneHeight = height / 4;
        var cloneX = centerX;
        var cloneY = centerY + 3 * height / 8;

        var oldStyle = context.fillStyle;
        context.fillStyle = config.colors.clone;
        var oldGlobalAlpha = context.globalAlpha;
        context.globalAlpha = opacity;

        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);

        _draw.drawNucAcidFeature(context, cloneWidth, cloneHeight, cloneX, cloneY, cornerRadius, opacity);

        context.fillStyle = oldStyle;
        context.globalAlpha = oldGlobalAlpha;
      }
    },
    macromolecule: function macromolecule(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {
      $$.sbgn.cloneMarker.nucleicAcidFeature(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity);
    },
    complex: function complex(context, centerX, centerY, width, height, cornerLength, cloneMarker, isMultimer, opacity) {
      if (cloneMarker != null) {
        var cpX = cornerLength / width;
        var cpY = cornerLength / height;
        var cloneWidth = width;
        var cloneHeight = height * cpY / 2;
        var cloneX = centerX;
        var cloneY = centerY + height / 2 - cloneHeight / 2;

        var markerPoints = [-1, -1, 1, -1, 1 - cpX, 1, -1 + cpX, 1];

        var oldStyle = context.fillStyle;
        context.fillStyle = config.colors.clone;
        var oldGlobalAlpha = context.globalAlpha;
        context.globalAlpha = opacity;

        _draw.drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, markerPoints);
        context.fill();

        context.fillStyle = oldStyle;
        context.globalAlpha = oldGlobalAlpha;
      }
    }
  };

  // modified cytoscape.js needs these or it breaks
  $$.sbgn.addPortReplacementIfAny = function (node, edgePort) {
    var posX = node.position().x;
    var posY = node.position().y;
    if (typeof node._private.data.ports != 'undefined') {
      for (var i = 0; i < node._private.data.ports.length; i++) {
        var port = node._private.data.ports[i];
        if (port.id == edgePort) {
          posX = posX + port.x * node.width() / 100;
          posY = posY + port.y * node.height() / 100;
          break;
        }
      }
    }
    return { 'x': posX, 'y': posY };
  };

  // Checks if each of the draw, intersect, and check point functions are
  // overriden for a given node.  i.e it is a sbgn node that overrides each of
  // the base nodes methods
  // modified cytoscape.js needs these or it breaks
  $$.sbgn.isNodeShapeTotallyOverriden = function (render, node) {
    return !!config.totallyOverridenNodeShapes[render.getNodeShape(node)];
  };

  // modified cytoscape.js needs this or it breaks
  $$.sbgn.isMultimer = function (node) {
    var sbgnClass = node._private.data.class;
    return sbgnClass && sbgnClass.indexOf('multimer') != -1;
  };

  var forceOpacityToOne = function forceOpacityToOne(node, context) {
    var parentOpacity = node.effectiveOpacity();
    if (parentOpacity === 0) {
      return;
    }

    context.fillStyle = 'rgba(' + node._private.style['background-color'].value[0] + ',' + node._private.style['background-color'].value[1] + ',' + node._private.style['background-color'].value[2] + ',' + 1 * node.css('opacity') * parentOpacity + ')';
  };
};

},{"./config":122,"./cyMath":123,"./draw":125,"./intersect":126,"./point":127,"extend":112}],122:[function(require,module,exports){
'use strict';

var config = {
  sbgnShapes: {
    'nucleic acid feature': true,
    'complex': true,
    'dissociation': true,
    'macromolecule': true,
    'simple chemical': true,
    'unspecified entity': true,
    'necessary stimulation': true,
    'process': true,
    'uncertain process': true,
    'omitted process': true,
    'association': true
  },
  totallyOverridenNodeShapes: {
    'macromolecule': true,
    'nucleic acid feature': true,
    'simple chemical': true,
    'complex': true,
    'unspecified entity': true,
    'process': true,
    'uncertain process': true,
    'omitted process': true,
    'dissociation': true,
    'association': true
  },
  colors: {
    clone: '#a9a9a9',
    association: '#6B6B6B',
    port: '#6B6B6B'
  }
};

module.exports = config;

},{}],123:[function(require,module,exports){
'use strict';

var cytoscape = require('cytoscape-for-sbgnviz');

module.exports = cytoscape.math;

},{"cytoscape-for-sbgnviz":85}],124:[function(require,module,exports){
'use strict';

var cytoscape = require('cytoscape-for-sbgnviz');

module.exports = cytoscape.baseNodeShapes;

},{"cytoscape-for-sbgnviz":85}],125:[function(require,module,exports){
'use strict';

var colors = require('./config').colors;
var cyMath = require('./cyMath');
var cyShapes = require('./cyShapes');

var drawRoundRectanglePath = function drawRoundRectanglePath(context, x, y, width, height, radius) {

  var halfWidth = width / 2;
  var halfHeight = height / 2;
  var cornerRadius = radius || Math.min(width / 4, height / 4, 8);

  if (context.beginPath) {
    context.beginPath();
  }

  // Start at top middle
  context.moveTo(x, y - halfHeight);
  // Arc from middle top to right side
  context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);
  // Arc from right side to bottom
  context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
  // Arc from bottom to left side
  context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
  // Arc from left side to topBorder
  context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);
  // Join line
  context.lineTo(x, y - halfHeight);

  context.closePath();
};

// Taken from cytoscape.js
var drawPolygonPath = function drawPolygonPath(context, x, y, width, height, points) {

  var halfW = width / 2;
  var halfH = height / 2;

  if (context.beginPath) {
    context.beginPath();
  }

  context.moveTo(x + halfW * points[0], y + halfH * points[1]);

  for (var i = 1; i < points.length / 2; i++) {
    context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);
  }

  context.closePath();
};

var drawEllipse = function drawEllipse(context, x, y, width, height) {
  cyShapes['ellipse'].draw(context, x, y, width, height);
};

var drawPortsToPolygonShape = function drawPortsToPolygonShape(context, node, points) {
  var width = node.width();
  var height = node.height();
  var centerX = node._private.position.x;
  var centerY = node._private.position.y;
  var padding = parseInt(node.css('border-width')) / 2;

  for (var i = 0; i < node._private.data.ports.length; i++) {
    var port = node._private.data.ports[i];
    var portX = port.x * width / 100 + centerX;
    var portY = port.y * height / 100 + centerY;
    var closestPoint = cyMath.polygonIntersectLine(portX, portY, points, centerX, centerY, width / 2, height / 2, padding);
    context.beginPath();
    context.moveTo(portX, portY);
    context.lineTo(closestPoint[0], closestPoint[1]);
    context.stroke();
    context.closePath();

    //add a little black circle to ports
    var oldStyle = context.fillStyle;
    context.fillStyle = colors.port;
    drawEllipse(context, portX, portY, 2, 2);
    context.fillStyle = oldStyle;
    context.stroke();
  }
};

var drawStateText = function drawStateText(context, textProp) {
  var stateValue = textProp.state.value || '';
  var stateVariable = textProp.state.variable || '';

  var stateLabel = stateValue + (stateVariable ? '@' + stateVariable : '');

  var fontSize = parseInt(textProp.height / 1.5);

  textProp.font = fontSize + 'px Arial';
  textProp.label = stateLabel;
  textProp.color = '#0f0f0f';
  drawText(context, textProp);
};

var drawInfoText = function drawInfoText(context, textProp) {
  var fontSize = parseInt(textProp.height / 1.5);
  textProp.font = fontSize + 'px Arial';
  textProp.color = '#0f0f0f';
  drawText(context, textProp);
};

var drawText = function drawText(context, textProp) {
  var oldFont = context.font;
  context.font = textProp.font;
  context.textAlign = 'center';
  context.textBaseline = 'middle';
  var oldStyle = context.fillStyle;
  context.fillStyle = textProp.color;
  var oldOpacity = context.globalAlpha;
  context.globalAlpha = textProp.opacity;
  var text;

  textProp.label = textProp.label || '';

  text = textProp.label;

  context.fillText(text, textProp.centerX, textProp.centerY);
  context.fillStyle = oldStyle;
  context.font = oldFont;
  context.globalAlpha = oldOpacity;
};

var drawStateAndInfos = function drawStateAndInfos(node, context, centerX, centerY) {
  var unitOfInfoRadius = 4;
  var stateVarRadius = 15;

  var stateAndInfos = node._private.data.statesandinfos;

  for (var i = 0; i < stateAndInfos.length && i < 4; i++) {
    var state = stateAndInfos[i];
    var stateWidth = state.bbox.w;
    var stateHeight = state.bbox.h;
    var stateCenterX = state.bbox.x * node.width() / 100 + centerX;
    var stateCenterY = state.bbox.y * node.height() / 100 + centerY;

    var textProp = { 'centerX': stateCenterX, 'centerY': stateCenterY,
      'opacity': node.css('text-opacity') * node.css('opacity'),
      'width': stateWidth, 'height': stateHeight };

    if (state.clazz == 'state variable') {
      //draw ellipse
      //var stateLabel = state.state.value;
      drawRoundRectanglePath(context, stateCenterX, stateCenterY, stateWidth, stateHeight, Math.min(stateWidth / 2, stateHeight / 2, stateVarRadius));

      context.fill();
      textProp.state = state.state;
      drawStateText(context, textProp);

      context.stroke();
    } else if (state.clazz == 'unit of information') {
      //draw rectangle
      drawRoundRectanglePath(context, stateCenterX, stateCenterY, stateWidth, stateHeight, Math.min(stateWidth / 2, stateHeight / 2, unitOfInfoRadius));

      context.fill();

      textProp.label = state.label.text || '';
      drawInfoText(context, textProp);

      context.stroke();
    }
  }
  drawEllipse(context, centerX, centerY, 0, 0);
};

var drawComplexStateAndInfo = function drawComplexStateAndInfo(context, node, stateAndInfos, centerX, centerY, width, height) {

  var unitOfInfoRadius = 4;
  var stateVarRadius = 15;

  drawEllipse(context, centerX, centerY, 0, 0);

  var upWidth = 0,
      downWidth = 0;
  var boxPadding = 10;
  var beginPosY = height / 2,
      beginPosX = width / 2;

  for (var i = 0; i < stateAndInfos.length; i++) {
    var state = stateAndInfos[i];
    var stateWidth = state.bbox.w;
    var stateHeight = state.bbox.h;
    var relativeYPos = state.bbox.y;
    var stateCenterX, stateCenterY;

    if (relativeYPos < 0) {
      if (upWidth + stateWidth < width) {
        stateCenterX = centerX - beginPosX + boxPadding + upWidth + stateWidth / 2;
        stateCenterY = centerY - beginPosY;

        var textProp = { 'centerX': stateCenterX, 'centerY': stateCenterY,
          'opacity': node.css('text-opacity') * node.css('opacity'),
          'width': stateWidth, 'height': stateHeight };

        if (state.clazz == 'state variable') {
          //draw ellipse
          drawRoundRectanglePath(context, stateCenterX, stateCenterY, stateWidth, stateHeight, Math.min(stateWidth / 2, stateHeight / 2, stateVarRadius));
          context.fill();

          textProp.state = state.state;
          drawStateText(context, textProp);
        } else if (state.clazz == 'unit of information') {
          //draw rectangle
          drawRoundRectanglePath(context, stateCenterX, stateCenterY, stateWidth, stateHeight, Math.min(stateWidth / 2, stateHeight / 2, unitOfInfoRadius));
          context.fill();

          textProp.label = state.label.text;
          drawInfoText(context, textProp);
        }
      }
      upWidth = upWidth + width + boxPadding;
    } else if (relativeYPos > 0) {
      if (downWidth + stateWidth < width) {
        stateCenterX = centerX - beginPosX + boxPadding + downWidth + stateWidth / 2;
        stateCenterY = centerY + beginPosY;

        var textProp = { 'centerX': stateCenterX, 'centerY': stateCenterY,
          'opacity': node.css('text-opacity') * node.css('opacity'),
          'width': stateWidth, 'height': stateHeight };

        if (state.clazz == 'state variable') {
          //draw ellipse
          drawRoundRectanglePath(context, stateCenterX, stateCenterY, stateWidth, stateHeight, Math.min(stateWidth / 2, stateHeight / 2, stateVarRadius));
          context.fill();

          textProp.state = state.state;
          drawStateText(context, textProp);
        } else if (state.clazz == 'unit of information') {
          //draw rectangle
          drawRoundRectanglePath(context, stateCenterX, stateCenterY, stateWidth, stateHeight, Math.min(stateWidth / 2, stateHeight / 2, unitOfInfoRadius));
          context.fill();

          textProp.label = state.label.text;
          drawInfoText(context, textProp);
        }
      }
      downWidth = downWidth + width + boxPadding;
    }
    context.stroke();

    //This is a temporary workaround
    drawEllipse(context, centerX, centerY, 0, 0);

    //update new state and info position(relative to node center)
    state.bbox.x = (stateCenterX - centerX) * 100 / node.width();
    state.bbox.y = (stateCenterY - centerY) * 100 / node.height();
  }
};
var drawSimpleChemicalPath = function drawSimpleChemicalPath(context, x, y, width, height) {

  var halfWidth = width / 2;
  var halfHeight = height / 2;
  //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);
  var cornerRadius = Math.min(halfWidth, halfHeight);
  context.translate(x, y);

  context.beginPath();

  // Start at top middle
  context.moveTo(0, -halfHeight);
  // Arc from middle top to right side
  context.arcTo(halfWidth, -halfHeight, halfWidth, 0, cornerRadius);
  // Arc from right side to bottom
  context.arcTo(halfWidth, halfHeight, 0, halfHeight, cornerRadius);
  // Arc from bottom to left side
  context.arcTo(-halfWidth, halfHeight, -halfWidth, 0, cornerRadius);
  // Arc from left side to topBorder
  context.arcTo(-halfWidth, -halfHeight, 0, -halfHeight, cornerRadius);
  // Join line
  context.lineTo(0, -halfHeight);

  context.closePath();

  context.translate(-x, -y);
};

var drawSimpleChemical = function drawSimpleChemical(context, x, y, width, height) {
  drawSimpleChemicalPath(context, x, y, width, height);
  context.fill();
};

var drawNucAcidFeature = function drawNucAcidFeature(context, width, height, centerX, centerY, cornerRadius) {
  var halfWidth = width / 2;
  var halfHeight = height / 2;

  context.translate(centerX, centerY);
  context.beginPath();

  context.moveTo(-halfWidth, -halfHeight);
  context.lineTo(halfWidth, -halfHeight);
  context.lineTo(halfWidth, 0);
  context.arcTo(halfWidth, halfHeight, 0, halfHeight, cornerRadius);
  context.arcTo(-halfWidth, halfHeight, -halfWidth, 0, cornerRadius);
  context.lineTo(-halfWidth, -halfHeight);

  context.closePath();
  context.translate(-centerX, -centerY);
  context.fill();
};

var drawPortsToEllipseShape = function drawPortsToEllipseShape(context, node) {
  var width = node.width();
  var height = node.height();
  var centerX = node._private.position.x;
  var centerY = node._private.position.y;

  for (var i = 0; i < node._private.data.ports.length; i++) {
    var port = node._private.data.ports[i];
    var portX = port.x * width / 100 + centerX;
    var portY = port.y * height / 100 + centerY;
    var closestPoint = cyMath.intersectLineEllipse(portX, portY, centerX, centerY, width / 2, height / 2);
    context.moveTo(portX, portY);
    context.lineTo(closestPoint[0], closestPoint[1]);
    context.stroke();

    //add a little black circle to ports
    var oldStyle = context.fillStyle;
    context.fillStyle = colors.port;
    drawEllipse(context, portX, portY, 2, 2);
    context.fillStyle = oldStyle;
    context.stroke();
  }
};

module.exports = {
  drawEllipse: drawEllipse,
  drawInfoText: drawInfoText,
  drawStateText: drawStateText,
  drawStateAndInfos: drawStateAndInfos,
  drawComplexStateAndInfo: drawComplexStateAndInfo,
  drawPortsToEllipseShape: drawPortsToEllipseShape,
  drawNucAcidFeature: drawNucAcidFeature,
  drawText: drawText,
  drawPolygonPath: drawPolygonPath,
  drawRoundRectanglePath: drawRoundRectanglePath,
  drawPortsToPolygonShape: drawPortsToPolygonShape,
  drawSimpleChemical: drawSimpleChemical,
  drawSimpleChemicalPath: drawSimpleChemicalPath
};

},{"./config":122,"./cyMath":123,"./cyShapes":124}],126:[function(require,module,exports){
'use strict';

var cyMath = require('./cyMath');

var intersectLineEllipse = function intersectLineEllipse(x1, y1, x2, y2, centerX, centerY, width, height, padding) {

  var w = width / 2 + padding;
  var h = height / 2 + padding;
  var an = centerX;
  var bn = centerY;

  var d = [x2 - x1, y2 - y1];

  var m = d[1] / d[0];
  var n = -1 * m * x2 + y2;
  var a = h * h + w * w * m * m;
  var b = -2 * an * h * h + 2 * m * n * w * w - 2 * bn * m * w * w;
  var c = an * an * h * h + n * n * w * w - 2 * bn * w * w * n + bn * bn * w * w - h * h * w * w;

  var discriminant = b * b - 4 * a * c;

  if (discriminant < 0) {
    return [];
  }

  var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
  var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);

  var xMin = Math.min(t1, t2);
  var xMax = Math.max(t1, t2);

  var yMin = m * xMin - m * x2 + y2;
  var yMax = m * xMax - m * x2 + y2;

  return [xMin, yMin, xMax, yMax];
};

var intersectLinePorts = function intersectLinePorts(node, x, y, portId) {
  var ports = node._private.data.ports;
  if (ports.length < 0) return [];

  var nodeX = node._private.position.x;
  var nodeY = node._private.position.y;
  var width = node.width();
  var height = node.height();

  for (var i = 0; i < node._private.data.ports.length; i++) {
    var port = node._private.data.ports[i];
    if (portId == port.id) {
      return cyMath.intersectLineEllipse(x, y, port.x * width / 100 + nodeX, port.y * height / 100 + nodeY, 1, 1);
    }
  }
  return [];
};

var intersectRoundRectangleLine = function intersectRoundRectangleLine(x1, y1, x2, y2, nodeX, nodeY, width, height, cornerRadius, padding) {

  var halfWidth = width / 2;
  var halfHeight = height / 2;

  // Check intersections with straight line segments
  var straightLineIntersections = [];
  var intersection;

  // Top segment, left to right
  {
    var topStartX = nodeX - halfWidth + cornerRadius - padding;
    var topStartY = nodeY - halfHeight - padding;
    var topEndX = nodeX + halfWidth - cornerRadius + padding;
    var topEndY = topStartY;

    intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);

    if (intersection.length > 0) {
      straightLineIntersections = straightLineIntersections.concat(intersection);
    }
  }

  // Right segment, top to bottom
  {
    var rightStartX = nodeX + halfWidth + padding;
    var rightStartY = nodeY - halfHeight + cornerRadius - padding;
    var rightEndX = rightStartX;
    var rightEndY = nodeY + halfHeight - cornerRadius + padding;

    intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);

    if (intersection.length > 0) {
      straightLineIntersections = straightLineIntersections.concat(intersection);
    }
  }

  // Bottom segment, left to right
  {
    var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
    var bottomStartY = nodeY + halfHeight + padding;
    var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
    var bottomEndY = bottomStartY;

    intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

    if (intersection.length > 0) {
      straightLineIntersections = straightLineIntersections.concat(intersection);
    }
  }

  // Left segment, top to bottom
  {
    var leftStartX = nodeX - halfWidth - padding;
    var leftStartY = nodeY - halfHeight + cornerRadius - padding;
    var leftEndX = leftStartX;
    var leftEndY = nodeY + halfHeight - cornerRadius + padding;

    intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);

    if (intersection.length > 0) {
      straightLineIntersections = straightLineIntersections.concat(intersection);
    }
  }

  // Check intersections with arc segments
  var arcIntersections;

  // Top Left
  {
    var topLeftCenterX = nodeX - halfWidth + cornerRadius;
    var topLeftCenterY = nodeY - halfHeight + cornerRadius;
    arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topLeftCenterX, topLeftCenterY, cornerRadius + padding);

    // Ensure the intersection is on the desired quarter of the circle
    if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {
      straightLineIntersections = straightLineIntersections.concat(arcIntersections);
    }
  }

  // Top Right
  {
    var topRightCenterX = nodeX + halfWidth - cornerRadius;
    var topRightCenterY = nodeY - halfHeight + cornerRadius;
    arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topRightCenterX, topRightCenterY, cornerRadius + padding);

    // Ensure the intersection is on the desired quarter of the circle
    if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {
      straightLineIntersections = straightLineIntersections.concat(arcIntersections);
    }
  }

  // Bottom Right
  {
    var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
    var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
    arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);

    // Ensure the intersection is on the desired quarter of the circle
    if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
      straightLineIntersections = straightLineIntersections.concat(arcIntersections);
    }
  }

  // Bottom Left
  {
    var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
    var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
    arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);

    // Ensure the intersection is on the desired quarter of the circle
    if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
      straightLineIntersections = straightLineIntersections.concat(arcIntersections);
    }
  }

  if (straightLineIntersections.length > 0) return straightLineIntersections;
  return []; // if nothing
};

var intersectLineStateAndInfoBoxes = function intersectLineStateAndInfoBoxes(node, x, y) {
  var centerX = node._private.position.x;
  var centerY = node._private.position.y;
  var padding = parseInt(node.css('border-width')) / 2;

  var stateAndInfos = node._private.data.statesandinfos;

  var stateCount = 0,
      infoCount = 0;

  var intersections = [];

  for (var i = 0; i < stateAndInfos.length; i++) {
    var state = stateAndInfos[i];
    var stateWidth = state.bbox.w;
    var stateHeight = state.bbox.h;
    var stateCenterX = state.bbox.x * node.width() / 100 + centerX;
    var stateCenterY = state.bbox.y * node.height() / 100 + centerY;

    if (state.clazz == 'state variable' && stateCount < 2) {
      //draw ellipse
      var stateIntersectLines = intersectLineEllipse(x, y, centerX, centerY, stateCenterX, stateCenterY, stateWidth, stateHeight, padding);

      if (stateIntersectLines.length > 0) intersections = intersections.concat(stateIntersectLines);

      stateCount++;
    } else if (state.clazz == 'unit of information' && infoCount < 2) {
      //draw rectangle
      var infoIntersectLines = intersectRoundRectangleLine(x, y, centerX, centerY, stateCenterX, stateCenterY, stateWidth, stateHeight, 5, padding);

      if (infoIntersectLines.length > 0) intersections = intersections.concat(infoIntersectLines);

      infoCount++;
    }
  }
  if (intersections.length > 0) return intersections;
  return [];
};

var intersectNucleicAcidLine = function intersectNucleicAcidLine(node, x, y, nodeX, nodeY, cornerRadius) {
  var nodeX = node._private.position.x;
  var nodeY = node._private.position.y;
  var width = node.width();
  var height = node.height();
  var padding = parseInt(node.css('border-width')) / 2;

  var halfWidth = width / 2;
  var halfHeight = height / 2;

  var straightLineIntersections;

  // Top segment, left to right
  {
    var topStartX = nodeX - halfWidth - padding;
    var topStartY = nodeY - halfHeight - padding;
    var topEndX = nodeX + halfWidth + padding;
    var topEndY = topStartY;

    straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  }

  // Right segment, top to bottom
  {
    var rightStartX = nodeX + halfWidth + padding;
    var rightStartY = nodeY - halfHeight - padding;
    var rightEndX = rightStartX;
    var rightEndY = nodeY + halfHeight - cornerRadius + padding;

    straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);

    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  }

  // Bottom segment, left to right
  {
    var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
    var bottomStartY = nodeY + halfHeight + padding;
    var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
    var bottomEndY = bottomStartY;

    straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  }

  // Left segment, top to bottom
  {
    var leftStartX = nodeX - halfWidth - padding;
    var leftStartY = nodeY - halfHeight - padding;
    var leftEndX = leftStartX;
    var leftEndY = nodeY + halfHeight - cornerRadius + padding;

    straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);

    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  }

  // Check intersections with arc segments, we have only two arcs for
  //nucleic acid features
  var arcIntersections;

  // Bottom Right
  {
    var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
    var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
    arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);

    // Ensure the intersection is on the desired quarter of the circle
    if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  }

  // Bottom Left
  {
    var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
    var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
    arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);

    // Ensure the intersection is on the desired quarter of the circle
    if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  }
  return []; // if nothing
};

var intersectClosestPoint = function intersectClosestPoint(point, intersections) {
  if (intersections.length <= 0) return [];

  var closestIntersection = [];
  var minDistance = Number.MAX_VALUE;

  for (var i = 0; i < intersections.length; i = i + 2) {
    var checkPoint = [intersections[i], intersections[i + 1]];
    var distance = Math.sqrt(Math.pow(point[0] - checkPoint[0], 2) + Math.pow(point[1] - checkPoint[1], 2));

    if (distance < minDistance) {
      minDistance = distance;
      closestIntersection = checkPoint;
    }
  }

  return closestIntersection;
};

module.exports = {
  intersectLineEllipse: intersectLineEllipse,
  intersectLinePorts: intersectLinePorts,
  intersectLineStateAndInfoBoxes: intersectLineStateAndInfoBoxes,
  intersectNucleicAcidLine: intersectNucleicAcidLine,
  intersectRoundRectangleLine: intersectRoundRectangleLine,
  intersectClosestPoint: intersectClosestPoint
};

},{"./cyMath":123}],127:[function(require,module,exports){
'use strict';

var cyShapes = require('./cyShapes');
var cyMath = require('./cyMath');

//this function is created to have same corner length when
//complex's width or height is changed
var generateComplexShapePoints = function generateComplexShapePoints(cornerLength, width, height) {
  //cp stands for corner proportion
  var cpX = cornerLength / width;
  var cpY = cornerLength / height;

  var complexPoints = [-1 + cpX, -1, -1, -1 + cpY, -1, 1 - cpY, -1 + cpX, 1, 1 - cpX, 1, 1, 1 - cpY, 1, -1 + cpY, 1 - cpX, -1];

  return complexPoints;
};

var checkPointStateAndInfoBoxes = function checkPointStateAndInfoBoxes(x, y, node, threshold) {
  var centerX = node._private.position.x;
  var centerY = node._private.position.y;
  var padding = parseInt(node.css('border-width')) / 2;
  var stateAndInfos = node._private.data.statesandinfos;

  var stateCount = 0,
      infoCount = 0;

  for (var i = 0; i < stateAndInfos.length; i++) {
    var state = stateAndInfos[i];
    var stateWidth = parseFloat(state.bbox.w) + threshold;
    var stateHeight = parseFloat(state.bbox.h) + threshold;
    var stateCenterX = state.bbox.x * node.width() / 100 + centerX;
    var stateCenterY = state.bbox.y * node.height() / 100 + centerY;

    if (state.clazz == 'state variable' && stateCount < 2) {
      //draw ellipse
      var stateCheckPoint = cyShapes['ellipse'].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);

      if (stateCheckPoint == true) return true;

      stateCount++;
    } else if (state.clazz == 'unit of information' && infoCount < 2) {
      //draw rectangle
      var infoCheckPoint = cyShapes['roundrectangle'].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);

      if (infoCheckPoint == true) return true;

      infoCount++;
    }
  }
  return false;
};

var nucleicAcidCheckPoint = function nucleicAcidCheckPoint(x, y, centerX, centerY, node, threshold, points, cornerRadius) {
  var width = node.width();
  var height = node.height();
  var padding = parseInt(node.css('border-width')) / 2;

  //check rectangle at top
  if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY - cornerRadius / 2, width, height - cornerRadius / 3, [0, -1], padding)) {
    return true;
  }

  //check rectangle at bottom
  if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY + height / 2 - cornerRadius / 2, width - 2 * cornerRadius, cornerRadius, [0, -1], padding)) {
    return true;
  }

  //check ellipses
  var checkInEllipse = function checkInEllipse(x, y, centerX, centerY, width, height, padding) {
    x -= centerX;
    y -= centerY;

    x /= width / 2 + padding;
    y /= height / 2 + padding;

    return Math.pow(x, 2) + Math.pow(y, 2) <= 1;
  };

  // Check bottom right quarter circle
  if (checkInEllipse(x, y, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {

    return true;
  }

  // Check bottom left quarter circle
  if (checkInEllipse(x, y, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {

    return true;
  }

  return false;
};

module.exports = {
  generateComplexShapePoints: generateComplexShapePoints,
  checkPointStateAndInfoBoxes: checkPointStateAndInfoBoxes,
  nucleicAcidCheckPoint: nucleicAcidCheckPoint
};

},{"./cyMath":123,"./cyShapes":124}],128:[function(require,module,exports){
'use strict';

var svgb64Str = require('./svgUtil.js');
// QUAD1  |  QUAD2
// (-, -) |  (+, -)
// -------------
// QUAD4  | QUAD3
// (-, +) |  (+, +)
var quad1 = '-1, -0.9, -0.95, -0.95, -0.33, -1';

var quad2 = '0.33, -1, 0.9, -0.93, 1, -0.85';

var quad3 = '1, 0.8, 0.9, 0.89, 0.33, 1';

var quad4 = '-0.33, 1, -0.9, 0.9, -1, 0.8';

var points = function points() {
  return quad1 + ', ' + quad2 + ', ' + quad3 + ', ' + quad4;
};

var svgUri = function svgUri(node) {
  var borderWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3.75;


  var nh = node.height();
  var nw = node.width();

  var compartment = '\n  <g style="stroke: #6A6A6A; fill: none; stroke-width: ' + borderWidth + ';">\n    <path d="M ' + 0 * nw + ' ' + .03 * nh + ' L ' + 0 * nw + ' ' + .97 * nh + ' Q ' + 0.06 * nw + ' ' + nh + ' ' + 0.25 * nw + ' ' + nh + '"/>\n    \n    <path d="M ' + 0.25 * nw + ' ' + nh + ' L ' + 0.75 * nw + ' ' + nh + ' Q ' + 0.93 * nw + ' ' + nh + ' ' + nw + ' ' + .97 * nh + '"/>\n\n    <path d="M ' + nw + ' ' + .97 * nh + ' L ' + nw + ' ' + 0.03 * nh + ' Q ' + 0.97 * nw + ' ' + 0 * nh + ' ' + 0.75 * nw + ' ' + 0 * nh + '"/>\n\n    <path d="M ' + 0.75 * nw + ' ' + 0 * nh + ' L ' + 0.25 * nw + ' ' + 0 * nh + ' Q ' + 0.06 * nw + ' ' + 0 * nh + ' ' + 0 * nw + ' ' + 0.03 * nh + '"/>\n  </g>\n  ';

  return svgb64Str(compartment, nw, nh, 0, 0, nw, nh);
};

module.exports = {
  points: points,
  svgUri: svgUri
};

},{"./svgUtil.js":133}],129:[function(require,module,exports){
'use strict';

var svgb64Str = require('./svgUtil.js');

var svgUri = function svgUri(node) {
  var strokeColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'grey';
  var edgeWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2.3;

  var nodeCenterX = node.width() / 2;
  var nodeCenterY = node.height() / 2;
  var outerCircleRadius = (node.width() - 2) / 2;
  var innerCircleRadius = (node.width() - 2) / 3;
  var dissociation = '\n    <circle cx=\'' + nodeCenterX + '\' cy=\'' + nodeCenterY + '\' r=\'' + outerCircleRadius + '\' fill=\'none\' stroke=\'' + strokeColor + '\' stroke-width=\'' + edgeWidth + '\'  />\n    <circle cx=\'' + nodeCenterX + '\' cy=\'' + nodeCenterY + '\' r=\'' + innerCircleRadius + '\' fill=\'none\' stroke=\'' + strokeColor + '\' stroke-width=\'' + edgeWidth + '\'  />\n\n  ';
  return svgb64Str(dissociation, node.width(), node.height(), 0, 0, node.width(), node.height());
};

module.exports = {
  svgUri: svgUri
};

},{"./svgUtil.js":133}],130:[function(require,module,exports){
'use strict';

var nodeProperties = require('./nodeProperties.js');
var sourceAndSink = require('./sourceAndSink.js');
var compartment = require('./compartment.js');
var dissociation = require('./dissociation.js');

// A function that creates a cytoscape style sheet from a given
// cytoscape instance
var graphStyleSheet = function graphStyleSheet(cytoscape) {

  return cytoscape.stylesheet().selector('node').css({
    'content': function content(cyNode) {
      return nodeProperties.getNodeContent(cyNode);
    },
    'font-size': function fontSize(cyNode) {
      return nodeProperties.getLabelTextSize(cyNode);
    },
    'text-valign': 'center',
    'text-halign': 'center',
    'border-width': 1.5,
    'border-color': '#555',
    'background-color': '#f6f6f6',
    'background-opacity': 0.5,
    'text-opacity': 1,
    'opacity': 1,
    'text-wrap': 'wrap',
    'text-max-width': 100
  }).selector('node[?clonemarker][class="perturbing agent"]').css({
    'background-image': function backgroundImage() {
      return nodeProperties.getcloneMarkerImagePath();
    },
    'background-position-x': '50%',
    'background-position-y': '100%',
    'background-width': '100%',
    'background-height': '25%',
    'background-fit': 'none',
    'background-image-opacity': function backgroundImageOpacity(cyNode) {
      if (!cyNode.data('clonemarker')) {
        return 0;
      }
      return cyNode.css('background-opacity');
    }
  }).selector('node[class]').css({
    'shape': function shape(cyNode) {
      return nodeProperties.getCyShape(cyNode);
    }
  }).selector('node[class="source and sink"]').css({
    'shape-polygon-points': sourceAndSink.points(),
    'background-image': function backgroundImage(node) {
      return 'url(' + sourceAndSink.svgUri(node) + ')';
    },
    'background-fit': 'none',
    'background-width': '100%',
    'background-height': '100%',
    'background-clip': 'none',
    'background-repeat': 'no-repeat',
    'border-width': 0
  }).selector('node[class="compartment"]').css({
    'shape-polygon-points': compartment.points(),
    'background-image': function backgroundImage(node) {
      return 'url(' + compartment.svgUri(node) + ')';
    },
    'background-fit': 'cover',
    'background-width': '100%',
    'background-height': '100%',
    'background-clip': 'none',
    'background-repeat': 'no-repeat',
    'border-width': 0,
    'background-opacity': 0,
    'background-color': '#FFFFFF',
    'text-valign': 'bottom',
    'text-halign': 'center'
  }).selector('node[class="dissociation"]').css({
    'background-image': function backgroundImage(node) {
      return 'url(' + dissociation.svgUri(node) + ')';
    },
    'background-fit': 'cover',
    'background-width': '100%',
    'background-height': '100%',
    'background-clip': 'none',
    'background-repeat': 'no-repeat',
    'border-width': 0,
    'background-opacity': 0
  }).selector('node[class="perturbing agent"]').css({
    'shape-polygon-points': '-1, -1,   -0.5, 0,  -1, 1,   1, 1,   0.5, 0, 1, -1'
  }).selector('node[class="tag"]').css({
    'shape-polygon-points': '-1, -1,   0.25, -1,   1, 0,    0.25, 1,    -1, 1'
  }).selector('node[class="association"]').css({
    'background-color': '#6B6B6B'
  }).selector('node[class="complex"]').css({
    'background-color': '#F4F3EE',
    'text-valign': 'bottom',
    'text-halign': 'center'
  }).selector('node[bbox][class][class!="complex"][class!="compartment"][class!="submap"]').css({
    'width': 'data(bbox.w)',
    'height': 'data(bbox.h)'
  }).selector('node[expanded-collapsed="collapsed"]').css({
    'width': 36,
    'height': 36
  }).selector('node:selected').css({
    'border-color': '#d67614',
    'target-arrow-color': '#000',
    'text-outline-color': '#000'
  }).selector('node:active').css({
    'background-opacity': 0.7, 'overlay-color': '#d67614',
    'overlay-padding': '14'
  }).selector('edge').css({
    'curve-style': 'bezier',
    'line-color': '#555',
    'target-arrow-fill': 'hollow',
    'source-arrow-fill': 'hollow',
    'width': 1.5,
    'target-arrow-color': '#555',
    'source-arrow-color': '#555',
    'text-border-color': function textBorderColor(cyNode) {
      if (cyNode.selected()) {
        return '#d67614';
      }
      return cyNode.css('line-color');
    },
    'color': function color(cyNode) {
      if (cyNode.selected()) {
        return '#d67614';
      }
      return cyNode.css('line-color');
    }
  }).selector('edge:selected').css({
    'line-color': '#d67614',
    'source-arrow-color': '#d67614',
    'target-arrow-color': '#d67614'
  }).selector('edge:active').css({
    'background-opacity': 0.7, 'overlay-color': '#d67614',
    'overlay-padding': '8'
  }).selector('edge[cardinality > 0]').css({
    'text-rotation': 'autorotate',
    'text-background-shape': 'rectangle',
    'text-border-opacity': '1',
    'text-border-width': '1',
    'text-background-color': 'white',
    'text-background-opacity': '1'
  }).selector('edge[class="consumption"][cardinality > 0]').css({
    'source-label': function sourceLabel(cyNode) {
      return '' + cyNode.data('cardinality');
    },
    'source-text-margin-y': '-10',
    'source-text-offset': function sourceTextOffset(cyNode) {
      return nodeProperties.getCardinalityDistance(cyNode);
    }
  }).selector('edge[class="production"][cardinality > 0]').css({
    'target-label': function targetLabel(cyNode) {
      return '' + cyNode.data('cardinality');
    },
    'target-text-margin-y': '-10',
    'target-text-offset': function targetTextOffset(cyNode) {
      return nodeProperties.getCardinalityDistance(cyNode);
    }
  }).selector('edge[class]').css({
    'target-arrow-shape': function targetArrowShape(cyNode) {
      return nodeProperties.getCyArrowShape(cyNode);
    },
    'source-arrow-shape': 'none'
  }).selector('edge[class="inhibition"]').css({
    'target-arrow-fill': 'filled'
  }).selector('edge[class="production"]').css({
    'target-arrow-fill': 'filled'
  }).selector('core').css({
    'selection-box-color': '#d67614',
    'selection-box-opacity': '0.2', 'selection-box-border-color': '#d67614'
  });
};

module.exports = graphStyleSheet;

},{"./compartment.js":128,"./dissociation.js":129,"./nodeProperties.js":131,"./sourceAndSink.js":132}],131:[function(require,module,exports){
'use strict';

// render node properties based on SBGN

var nodeProperties = {};

nodeProperties.getCloneMarkerImgPath = function () {
  return '';
};

nodeProperties.getCyShape = function (cyNode) {
  var _class = cyNode.data('class');
  if (_class.endsWith(' multimer')) {
    _class = _class.replace(' multimer', '');
  }

  if (_class == 'compartment') {
    return 'polygon';
  }

  if (_class == 'phenotype') {
    return 'hexagon';
  }
  if (_class == 'perturbing agent' || _class == 'tag' || _class == 'source and sink') {
    return 'polygon';
  }
  if (_class == 'dissociation') {
    return 'ellipse';
  }
  if (_class == 'nucleic acid feature' || _class == 'macromolecule' || _class == 'simple chemical' || _class == 'complex' || _class == 'unspecified entity' || _class == 'process' || _class == 'omitted process' || _class == 'uncertain process' || _class == 'association') {
    return _class;
  }
  return 'ellipse';
};

nodeProperties.getCyArrowShape = function (cyNode) {
  var _class = cyNode.data('class');
  if (_class == 'necessary stimulation') {
    return 'necessary stimulation';
  }
  if (_class == 'inhibition') {
    return 'tee';
  }
  if (_class == 'catalysis') {
    return 'circle';
  }
  if (_class == 'stimulation' || _class == 'production') {
    return 'triangle';
  }
  if (_class == 'modulation') {
    return 'diamond';
  }
  return 'none';
};

nodeProperties.getNodeContent = function (cyNode) {
  var _class = cyNode.data('class');

  if (_class.endsWith(' multimer')) {
    _class = _class.replace(' multimer', '');
  }

  var content = '';
  if (_class == 'macromolecule' || _class == 'simple chemical' || _class == 'phenotype' || _class == 'unspecified entity' || _class == 'nucleic acid feature' || _class == 'perturbing agent' || _class == 'tag') {
    content = cyNode.data('label') ? cyNode.data('label') : '';
  } else if (_class == 'compartment') {
    content = cyNode.data('label') ? cyNode.data('label') : '';
  } else if (_class == 'complex') {
    if (cyNode.children().length == 0) {
      if (cyNode.data('label')) {
        content = cyNode.data('label');
      } else if (cyNode.data('infoLabel')) {
        content = cyNode.data('infoLabel');
      } else {
        content = '';
      }
    } else {
      content = '';
    }
  } else if (_class == 'and') {
    content = 'AND';
  } else if (_class == 'or') {
    content = 'OR';
  } else if (_class == 'not') {
    content = 'NOT';
  } else if (_class == 'omitted process') {
    content = '\\\\';
  } else if (_class == 'uncertain process') {
    content = '?';
  }

  return content;
};

nodeProperties.getLabelTextSize = function (cyNode) {
  var _class = cyNode.data('class');

  // Dirty legacy hack.  These types of nodes are not supposed to have labels
  // but apparently they need to have a text size
  if (_class === 'association' || _class === 'dissociation') {
    return 20;
  }

  if (_class === 'and' || _class === 'or' || _class === 'not') {
    return nodeProperties.getDynamicLabelTextSize(cyNode, 1);
  }

  if (_class.endsWith('process')) {
    return nodeProperties.getDynamicLabelTextSize(cyNode, 1.5);
  }

  if (_class === 'complex' || _class === 'compartment') {
    return 16;
  }

  return nodeProperties.getDynamicLabelTextSize(cyNode);
};

nodeProperties.getCardinalityDistance = function (cyNode) {
  var srcPos = cyNode.source().position();
  var tgtPos = cyNode.target().position();

  var distance = Math.sqrt(Math.pow(srcPos.x - tgtPos.x, 2) + Math.pow(srcPos.y - tgtPos.y, 2));
  return distance * 0.15;
};

nodeProperties.getDynamicLabelTextSize = function (cyNode, sizeCoefficient) {
  var labelSizeCoefficient = sizeCoefficient || 1;

  var h = cyNode.height();
  var textHeight = parseInt(h / 2.45) * labelSizeCoefficient;

  return textHeight;
};

module.exports = nodeProperties;

},{}],132:[function(require,module,exports){
'use strict';

var svgb64Str = require('./svgUtil.js');

// QUAD1  |  QUAD2
// (-, -) |  (+, -)
// -------------
// QUAD4  | QUAD3
// (-, +) |  (+, +)
var quad1 = '-0.86, 0.5, -0.75, 0.65, -1, 0.95, -0.95, 1, -0.65, 0.75, -0.5, 0.86, 0, 1';

var quad2 = '0.5, 0.86, 0.71, 0.71, 0.86, 0.5, 1, 0';

var quad3 = '0.86, -0.5, 0.75, -0.65, 1, -0.95, 0.95, -1, 0.65, -0.75, 0.5, -0.86, 0, -1';

var quad4 = '-0.5, -0.86, -0.71, -0.71, -0.86, -0.5, -1, 0,';

var points = function points() {
  return quad1 + ', ' + quad2 + ', ' + quad3 + ', ' + quad4;
};

var svgUri = function svgUri(node) {
  var strokeColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'grey';
  var edgeWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

  var cloneMarker = '';
  var clipPath = '';

  var nodeCenterX = node.width() / 2;
  var nodeCenterY = node.height() / 2;
  var circleRadius = (node.width() - 2) / 2;

  if (node.data('clonemarker')) {
    clipPath = '\n    <defs>\n      <clipPath id="cut-off-bottom">\n        <rect x="130" y="300" width="300" height="200" />\n      </clipPath>\n    </defs>\n    ';
    cloneMarker = '\n    <circle cx="' + nodeCenterX + '" cy="' + nodeCenterY + '" r="' + circleRadius + '" fill=\'#D2D2D2\' stroke=\'grey\' clip-path="url(#cut-off-bottom)" />\n    ';
  }

  var sourceAndSink = '\n    ' + clipPath + '\n    <circle cx=\'' + nodeCenterX + '\' cy=\'' + nodeCenterY + '\' r=\'' + circleRadius + '\' fill=\'none\' stroke=\'' + strokeColor + '\' stroke-width=\'' + edgeWidth + '\'  />\n    ' + cloneMarker + '\n    <line x1=\'0\' y1=\'' + node.height() + '\' x2=\'' + node.width() + '\' y2=\'0\' stroke-width=\'' + edgeWidth + '\' stroke=\'' + strokeColor + '\'/>\n  ';
  return svgb64Str(sourceAndSink, node.width(), node.height(), 0, 0, node.width(), node.height());
};

module.exports = {
  svgUri: svgUri,
  points: points
};

},{"./svgUtil.js":133}],133:[function(require,module,exports){
'use strict';

var parser = new DOMParser();

var svg = function svg(svgStr) {
  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
  var vbX = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var vbY = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var vbWidth = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 100;
  var vbHeight = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 100;

  var svgText = '\n    <svg xmlns=\'http://www.w3.org/2000/svg\' version=\'1.1\' width=\'' + width + '\' height=\'' + height + '\' viewBox=\'' + vbX + ' ' + vbY + ' ' + vbWidth + ' ' + vbHeight + '\'>\n    ' + svgStr + '\n    </svg>\n  ';
  return parser.parseFromString(svgText, 'text/xml').documentElement;
};

var svgb64Str = function svgb64Str(svgText, viewPortWidth, viewPortHeight, viewBoxX, viewBoxY, viewBoxWidth, viewBoxHeight) {
  var svgEl = svg(svgText, viewPortWidth, viewPortHeight, viewBoxX, viewBoxY, viewBoxWidth, viewBoxHeight);
  var b64Data = 'data:image/svg+xml;base64,' + btoa(svgEl.outerHTML);

  return b64Data;
};

module.exports = svgb64Str;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJkZW1vL2Jyb3dzZXJpZnktZW50cnkuanMiLCJkZW1vL3Rlc3QtZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyLXJlc29sdmUvZW1wdHkuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy8tcHJlYW1ibGUuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9hbmltYXRpb24uanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb2xsZWN0aW9uL2FsZ29yaXRobXMvYS1zdGFyLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvY29sbGVjdGlvbi9hbGdvcml0aG1zL2JlbGxtYW4tZm9yZC5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2NvbGxlY3Rpb24vYWxnb3JpdGhtcy9iZXR3ZWVubmVzcy1jZW50cmFsaXR5LmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvY29sbGVjdGlvbi9hbGdvcml0aG1zL2Jmcy1kZnMuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb2xsZWN0aW9uL2FsZ29yaXRobXMvY2xvc2VuZXNzLWNlbnRyYWxpdHkuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb2xsZWN0aW9uL2FsZ29yaXRobXMvZGVncmVlLWNlbnRyYWxpdHkuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb2xsZWN0aW9uL2FsZ29yaXRobXMvZGlqa3N0cmEuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb2xsZWN0aW9uL2FsZ29yaXRobXMvZmxveWQtd2Fyc2hhbGwuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb2xsZWN0aW9uL2FsZ29yaXRobXMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb2xsZWN0aW9uL2FsZ29yaXRobXMva2VyZ2VyLXN0ZWluLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvY29sbGVjdGlvbi9hbGdvcml0aG1zL2tydXNrYWwuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb2xsZWN0aW9uL2FsZ29yaXRobXMvcGFnZS1yYW5rLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvY29sbGVjdGlvbi9hbmltYXRpb24uanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb2xsZWN0aW9uL2NsYXNzLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvY29sbGVjdGlvbi9jb21wYXJhdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2NvbGxlY3Rpb24vY29tcG91bmRzLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvY29sbGVjdGlvbi9kYXRhLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvY29sbGVjdGlvbi9kZWdyZWUuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb2xsZWN0aW9uL2RpbWVuc2lvbnMuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb2xsZWN0aW9uL2VsZW1lbnQuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb2xsZWN0aW9uL2V2ZW50cy5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2NvbGxlY3Rpb24vZmlsdGVyLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvY29sbGVjdGlvbi9ncm91cC5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2NvbGxlY3Rpb24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb2xsZWN0aW9uL2l0ZXJhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2NvbGxlY3Rpb24vbGF5b3V0LmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvY29sbGVjdGlvbi9zdHlsZS5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2NvbGxlY3Rpb24vc3dpdGNoLWZ1bmN0aW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2NvbGxlY3Rpb24vdHJhdmVyc2luZy5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2NvbGxlY3Rpb24venNvcnQuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb3JlL2FkZC1yZW1vdmUuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb3JlL2FuaW1hdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2NvcmUvZXZlbnRzLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvY29yZS9leHBvcnQuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb3JlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvY29yZS9sYXlvdXQuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb3JlL25vdGlmaWNhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2NvcmUvcmVuZGVyZXIuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb3JlL3NlYXJjaC5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2NvcmUvc3R5bGUuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9jb3JlL3ZpZXdwb3J0LmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZXZlbnQuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9leHRlbnNpb24uanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9leHRlbnNpb25zL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZXh0ZW5zaW9ucy9sYXlvdXQvYnJlYWR0aGZpcnN0LmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZXh0ZW5zaW9ucy9sYXlvdXQvY2lyY2xlLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZXh0ZW5zaW9ucy9sYXlvdXQvY29uY2VudHJpYy5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2V4dGVuc2lvbnMvbGF5b3V0L2Nvc2UuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9leHRlbnNpb25zL2xheW91dC9ncmlkLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZXh0ZW5zaW9ucy9sYXlvdXQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9leHRlbnNpb25zL2xheW91dC9udWxsLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZXh0ZW5zaW9ucy9sYXlvdXQvcHJlc2V0LmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZXh0ZW5zaW9ucy9sYXlvdXQvcmFuZG9tLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZXh0ZW5zaW9ucy9yZW5kZXJlci9iYXNlL2Fycm93LXNoYXBlcy5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2V4dGVuc2lvbnMvcmVuZGVyZXIvYmFzZS9jb29yZC1lbGUtbWF0aC5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2V4dGVuc2lvbnMvcmVuZGVyZXIvYmFzZS9pbWFnZXMuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9leHRlbnNpb25zL3JlbmRlcmVyL2Jhc2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9leHRlbnNpb25zL3JlbmRlcmVyL2Jhc2UvbG9hZC1saXN0ZW5lcnMuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9leHRlbnNpb25zL3JlbmRlcmVyL2Jhc2Uvbm9kZS1zaGFwZXMuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9leHRlbnNpb25zL3JlbmRlcmVyL2Jhc2UvcmVkcmF3LmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZXh0ZW5zaW9ucy9yZW5kZXJlci9jYW52YXMvYXJyb3ctc2hhcGVzLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZXh0ZW5zaW9ucy9yZW5kZXJlci9jYW52YXMvZHJhd2luZy1lZGdlcy5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2V4dGVuc2lvbnMvcmVuZGVyZXIvY2FudmFzL2RyYXdpbmctZWxlbWVudHMuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9leHRlbnNpb25zL3JlbmRlcmVyL2NhbnZhcy9kcmF3aW5nLWltYWdlcy5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2V4dGVuc2lvbnMvcmVuZGVyZXIvY2FudmFzL2RyYXdpbmctbGFiZWwtdGV4dC5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2V4dGVuc2lvbnMvcmVuZGVyZXIvY2FudmFzL2RyYXdpbmctbm9kZXMuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9leHRlbnNpb25zL3JlbmRlcmVyL2NhbnZhcy9kcmF3aW5nLXJlZHJhdy5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2V4dGVuc2lvbnMvcmVuZGVyZXIvY2FudmFzL2RyYXdpbmctc2hhcGVzLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZXh0ZW5zaW9ucy9yZW5kZXJlci9jYW52YXMvZWxlLXRleHR1cmUtY2FjaGUuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9leHRlbnNpb25zL3JlbmRlcmVyL2NhbnZhcy9leHBvcnQtaW1hZ2UuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9leHRlbnNpb25zL3JlbmRlcmVyL2NhbnZhcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2V4dGVuc2lvbnMvcmVuZGVyZXIvY2FudmFzL2xheWVyZWQtdGV4dHVyZS1jYWNoZS5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2V4dGVuc2lvbnMvcmVuZGVyZXIvY2FudmFzL25vZGUtc2hhcGVzLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZXh0ZW5zaW9ucy9yZW5kZXJlci9jYW52YXMvdGV4dHVyZS1jYWNoZS1kZWZzLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvZXh0ZW5zaW9ucy9yZW5kZXJlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2V4dGVuc2lvbnMvcmVuZGVyZXIvbnVsbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2ZhYnJpYy5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2hlYXAuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL2lzLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvanF1ZXJ5LXBsdWdpbi5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL21hdGguanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvc2Jnbi5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL3NlbGVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvc3R5bGUvYXBwbHkuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9zdHlsZS9ieXBhc3MuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9zdHlsZS9jb250YWluZXIuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy9zdHlsZS9nZXQtZm9yLWVsZS5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL3N0eWxlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvc3R5bGUvanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL3N0eWxlL3BhcnNlLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvc3R5bGUvcHJvcGVydGllcy5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL3N0eWxlL3N0cmluZy1zaGVldC5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL3N0eWxlc2hlZXQuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy90aHJlYWQuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy91dGlsL2NvbG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9jeXRvc2NhcGUtZm9yLXNiZ252aXovc3JjL3V0aWwvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy91dGlsL21hcHMuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy91dGlsL21lbW9pemUuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy91dGlsL3JlZ2V4LmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvdXRpbC9zdHJpbmdzLmpzIiwibm9kZV9tb2R1bGVzL2N5dG9zY2FwZS1mb3Itc2JnbnZpei9zcmMvdXRpbC90aW1pbmcuanMiLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy92ZXJzaW9uLmpzb24iLCJub2RlX21vZHVsZXMvY3l0b3NjYXBlLWZvci1zYmdudml6L3NyYy93aW5kb3cuanMiLCJub2RlX21vZHVsZXMvZXh0ZW5kL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2ZpbGUtc2F2ZXIvRmlsZVNhdmVyLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC5kZWZhdWx0c2RlZXAvaW5kZXguanMiLCJub2RlX21vZHVsZXMvb3MtYnJvd3NlcmlmeS9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3BhdGgtYnJvd3NlcmlmeS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvc2Jnbm1sLXRvLWN5dG9zY2FwZS9zcmMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc2Jnbm1sLXRvLWN5dG9zY2FwZS9zcmMvc2Jnbm1sQ29udmVydGVyLmpzIiwic3JjL2luZGV4LmpzIiwic3JjL3NiZ25SZW5kZXJlci9hdWdtZW50Q3l0b3NjYXBlLmpzIiwic3JjL3NiZ25SZW5kZXJlci9jb25maWcuanMiLCJzcmMvc2JnblJlbmRlcmVyL2N5TWF0aC5qcyIsInNyYy9zYmduUmVuZGVyZXIvY3lTaGFwZXMuanMiLCJzcmMvc2JnblJlbmRlcmVyL2RyYXcuanMiLCJzcmMvc2JnblJlbmRlcmVyL2ludGVyc2VjdC5qcyIsInNyYy9zYmduUmVuZGVyZXIvcG9pbnQuanMiLCJzcmMvc3R5bGUvY29tcGFydG1lbnQuanMiLCJzcmMvc3R5bGUvZGlzc29jaWF0aW9uLmpzIiwic3JjL3N0eWxlL2dyYXBoU3R5bGVTaGVldC5qcyIsInNyYy9zdHlsZS9ub2RlUHJvcGVydGllcy5qcyIsInNyYy9zdHlsZS9zb3VyY2VBbmRTaW5rLmpzIiwic3JjL3N0eWxlL3N2Z1V0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0VBOzs7Ozs7QUFFQSxJQUFJLGdCQUFnQixR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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2o4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzV0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNybEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3h6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2piQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzluRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzE3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3UEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5UkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2WEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25YQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2bUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzllQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNySkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNockJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy8vQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDck5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqNEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDem9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5S0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4YUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoaUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDN0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2xlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDclNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEtBOztBQ0FBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzVMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDOXNFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2hPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7OztBQ3JjQSxJQUFJLFlBQVksUUFBUSx1QkFBUixDQUFoQjtBQUNBLElB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TUFBTSxTQUFOLEdBQU0sQ0FBQyxNQUFELEVBQXdGO0FBQUEsTUFBL0UsS0FBK0UsdUVBQXZFLEdBQXVFO0FBQUEsTUFBbEUsTUFBa0UsdUVBQXpELEdBQXlEO0FBQUEsTUFBcEQsR0FBb0QsdUVBQTlDLENBQThDO0FBQUEsTUFBM0MsR0FBMkMsdUVBQXJDLENBQXFDO0FBQUEsTUFBbEMsT0FBa0MsdUVBQXhCLEdBQXdCO0FBQUEsTUFBbkIsUUFBbUIsdUVBQVIsR0FBUTs7QUFDbEcsTUFBSSx1RkFFNkQsS0FGN0Qsb0JBRStFLE1BRi9FLHFCQUVtRyxHQUZuRyxTQUUwRyxHQUYxRyxTQUVpSCxPQUZqSCxTQUU0SCxRQUY1SCxpQkFHQSxNQUhBLHFCQUFKO0FBTUEsU0FBTyxPQUFPLGVBQVAsQ0FBdUIsT0FBdkIsRUFBZ0MsVUFBaEMsRUFBNEMsZUFBbkQ7QUFDRCxDQVJEOztBQVVBLElBQU0sWUFBWSxTQUFaLFNBQVksQ0FBQyxPQUFELEVBQVUsYUFBVixFQUF5QixjQUF6QixFQUF5QyxRQUF6QyxFQUFtRCxRQUFuRCxFQUE2RCxZQUE3RCxFQUEyRSxhQUEzRSxFQUE2RjtBQUM3RyxNQUFJLFFBQVEsSUFBSSxPQUFKLEVBQWEsYUFBYixFQUE0QixjQUE1QixFQUE0QyxRQUE1QyxFQUFzRCxRQUF0RCxFQUFnRSxZQUFoRSxFQUE4RSxhQUE5RSxDQUFaO0FBQ0EsTUFBSSx5Q0FBdUMsS0FBSyxNQUFNLFNBQVgsQ0FBM0M7O0FBRUEsU0FBTyxPQUFQO0FBQ0QsQ0FMRDs7QUFPQSxPQUFPLE9BQVAsR0FBaUIsU0FBakIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLyogZ2xvYmFsICQgKi9cblxuaW1wb3J0IFNCR05SZW5kZXJlciBmcm9tICcuLi9zcmMvaW5kZXgnO1xuXG52YXIgY29udmVydFNiZ25tbCA9IHJlcXVpcmUoJ3NiZ25tbC10by1jeXRvc2NhcGUnKTtcbnZhciBzYXZlQXMgPSByZXF1aXJlKCdmaWxlLXNhdmVyJykuc2F2ZUFzO1xuXG52YXIgZGVmYXVsdERhdGEgPSByZXF1aXJlKCcuL3Rlc3QtZGF0YScpO1xuXG52YXIgbG9hZEZpbGVUZXh0ID0gZnVuY3Rpb24gKGFic0ZpbGVQYXRoKSB7XG4gIHZhciB4aHR0cDtcbiAgaWYgKHdpbmRvdy5YTUxIdHRwUmVxdWVzdCkge1xuICAgIHhodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgeGh0dHAgPSBuZXcgQWN0aXZlWE9iamVjdCgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcbiAgfVxuICB4aHR0cC5vcGVuKCdHRVQnLCBhYnNGaWxlUGF0aCwgZmFsc2UpO1xuICB4aHR0cC5zZW5kKCk7XG4gIHJldHVybiB4aHR0cC5yZXNwb25zZVRleHQ7XG59O1xuXG52YXIgcmVhZEZpbGUgPSBmdW5jdGlvbiAocmVuZGVyZXIsIGZpbGUpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGdyYXBoID0gY29udmVydFNiZ25tbChlLnRhcmdldC5yZXN1bHQpO1xuICAgIHJlbmRlckdyYXBoKHJlbmRlcmVyLCBncmFwaCk7XG5cbiAgfTtcblxuICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTtcbn07XG5cbnZhciByZW5kZXJHcmFwaCA9IGZ1bmN0aW9uIChjeSwgY3lHcmFwaCkge1xuICBjeS5zdGFydEJhdGNoKCk7XG4gIGN5LnJlbW92ZSgnKicpO1xuICBjeS5hZGQoY3lHcmFwaCk7XG5cbiAgdmFyIG5vZGVQb3NpdGlvbnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjeUdyYXBoLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHhQb3MgPSBjeUdyYXBoLm5vZGVzW2ldLmRhdGEuYmJveC54O1xuICAgIHZhciB5UG9zID0gY3lHcmFwaC5ub2Rlc1tpXS5kYXRhLmJib3gueTtcbiAgICBub2RlUG9zaXRpb25zW2N5R3JhcGgubm9kZXNbaV0uZGF0YS5pZF0gPSB7J3gnOiB4UG9zLCAneSc6IHlQb3N9O1xuICB9XG5cbiAgY3kubGF5b3V0KHtcbiAgICBuYW1lOiAncHJlc2V0JyxcbiAgICBwb3NpdGlvbnM6IG5vZGVQb3NpdGlvbnMsXG4gICAgZml0OiB0cnVlLFxuICAgIHBhZGRpbmc6IDUwXG4gIH0pO1xuXG4gIHZhciBjb21wb3VuZHMgPSBjeS5ub2RlcygpLmZpbHRlcignJG5vZGUgPiBub2RlJyk7XG4gIGNvbXBvdW5kcy5jc3MoJ3BhZGRpbmctbGVmdCcsIDUpO1xuICBjb21wb3VuZHMuY3NzKCdwYWRkaW5nLXJpZ2h0JywgNSk7XG4gIGNvbXBvdW5kcy5jc3MoJ3BhZGRpbmctdG9wJywgNSk7XG4gIGNvbXBvdW5kcy5jc3MoJ3BhZGRpbmctYm90dG9tJywgNSk7XG5cbiAgY3kuZW5kQmF0Y2goKTtcbiAgY3kuc3R5bGUoKS51cGRhdGUoKTtcbn07XG5cbnZhciBiNjR0b0Jsb2IgPSBmdW5jdGlvbiAoYjY0RGF0YSwgY29udGVudFR5cGUsIHNsaWNlU2l6ZSkge1xuICBjb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlIHx8ICcnO1xuICBzbGljZVNpemUgPSBzbGljZVNpemUgfHwgNTEyO1xuXG4gIHZhciBieXRlQ2hhcmFjdGVycyA9IGF0b2IoYjY0RGF0YSk7XG4gIHZhciBieXRlQXJyYXlzID0gW107XG5cbiAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgYnl0ZUNoYXJhY3RlcnMubGVuZ3RoOyBvZmZzZXQgKz0gc2xpY2VTaXplKSB7XG4gICAgdmFyIHNsaWNlID0gYnl0ZUNoYXJhY3RlcnMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBzbGljZVNpemUpO1xuXG4gICAgdmFyIGJ5dGVOdW1iZXJzID0gbmV3IEFycmF5KHNsaWNlLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZS5sZW5ndGg7IGkrKykge1xuICAgICAgYnl0ZU51bWJlcnNbaV0gPSBzbGljZS5jaGFyQ29kZUF0KGkpO1xuICAgIH1cblxuICAgIHZhciBieXRlQXJyYXkgPSBuZXcgVWludDhBcnJheShieXRlTnVtYmVycyk7XG5cbiAgICBieXRlQXJyYXlzLnB1c2goYnl0ZUFycmF5KTtcbiAgfVxuXG4gIHZhciBibG9iID0gbmV3IEJsb2IoYnl0ZUFycmF5cywge3R5cGU6IGNvbnRlbnRUeXBlfSk7XG4gIHJldHVybiBibG9iO1xufTtcblxudmFyIHNhdmUgPSBmdW5jdGlvbiAocmVuZGVyZXIsIGZpbGVuYW1lKSB7XG4gIHZhciBncmFwaEZpbGVTdHJpbmcgPSByZW5kZXJlci5wbmcoe3NjYWxlOiAzLCBmdWxsOiB0cnVlfSk7XG5cbiAgdmFyIGI2NERhdGEgPSBncmFwaEZpbGVTdHJpbmcuc3Vic3RyKGdyYXBoRmlsZVN0cmluZy5pbmRleE9mKCcsJykgKyAxKTtcbiAgc2F2ZUFzKGI2NHRvQmxvYihiNjREYXRhLCAnaW1hZ2UvcG5nJyksIGZpbGVuYW1lKTtcbn07XG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcblxuICB2YXIgY29udGFpbmVyID0gJCgnI3NiZ24tbmV0d29yay1jb250YWluZXInKTtcblxuICB2YXIgcmVuZGVyZXIgPSBuZXcgU0JHTlJlbmRlcmVyKHtcbiAgICBjb250YWluZXI6IGNvbnRhaW5lclxuICB9KTtcblxuICByZW5kZXJHcmFwaChyZW5kZXJlciwgZGVmYXVsdERhdGEpO1xuXG4gICQoJyNncmFwaC1sb2FkJykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICQoJyNncmFwaC1pbnB1dCcpLnRyaWdnZXIoJ2NsaWNrJyk7XG4gIH0pO1xuXG4gICQoJyNncmFwaC1pbnB1dCcpLmNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCQodGhpcykudmFsKCkgIT0gJycpIHtcbiAgICAgIHZhciBmaWxlID0gdGhpcy5maWxlc1swXTtcblxuICAgICAgcmVhZEZpbGUocmVuZGVyZXIsIGZpbGUpO1xuICAgIH1cbiAgfSk7XG5cbiAgJCgnI2dyYXBoLXNhdmUnKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgc2F2ZShyZW5kZXJlciwgJ2dyYXBoJyk7XG4gIH0pO1xuXG4gICQoJy5zYW1wbGUtZmlsZScpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZmlsZVRleHQgPSBsb2FkRmlsZVRleHQoJ3NhbXBsZXMvJyArICQodGhpcylbMF0uaW5uZXJUZXh0ICsgJy54bWwnKTtcbiAgICB2YXIgZ3JhcGhKc29uID0gY29udmVydFNiZ25tbChmaWxlVGV4dCk7XG4gICAgcmVuZGVyR3JhcGgocmVuZGVyZXIsIGdyYXBoSnNvbik7XG4gIH0pO1xuXG59KTtcbiIsInZhciBtYXBrQ2FzY2FkZURhdGEgPSB7XG5cIm5vZGVzXCI6IFtcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImlkXCI6IFwiZ2x5cGg0XCIsXG4gICAgICAgICAgICBcImJib3hcIjoge1xuICAgICAgICAgICAgICAgIFwieFwiOiAzMTguMTU4OTE2NTg4NTA2NyxcbiAgICAgICAgICAgICAgICBcInlcIjogMTYyLjU5ODk4Njc5OTczMzMyLFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjYwLjBcIixcbiAgICAgICAgICAgICAgICBcImhcIjogXCI2MC4wXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImNsYXNzXCI6IFwic2ltcGxlIGNoZW1pY2FsXCIsXG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiQVRQXCIsXG4gICAgICAgICAgICBcInN0YXRlc2FuZGluZm9zXCI6IFtdLFxuICAgICAgICAgICAgXCJwYXJlbnRcIjogXCJcIixcbiAgICAgICAgICAgIFwiY2xvbmVtYXJrZXJcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwicG9ydHNcIjogW11cbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJpZFwiOiBcImdseXBoNVwiLFxuICAgICAgICAgICAgXCJiYm94XCI6IHtcbiAgICAgICAgICAgICAgICBcInhcIjogMzY4LjcxNTA2OTgwMzI3NjUsXG4gICAgICAgICAgICAgICAgXCJ5XCI6IDM1My4zNDI1MzExMzMyMTQ3LFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjYwLjBcIixcbiAgICAgICAgICAgICAgICBcImhcIjogXCI2MC4wXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImNsYXNzXCI6IFwic2ltcGxlIGNoZW1pY2FsXCIsXG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiQURQXCIsXG4gICAgICAgICAgICBcInN0YXRlc2FuZGluZm9zXCI6IFtdLFxuICAgICAgICAgICAgXCJwYXJlbnRcIjogXCJcIixcbiAgICAgICAgICAgIFwiY2xvbmVtYXJrZXJcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwicG9ydHNcIjogW11cbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJpZFwiOiBcImdseXBoN1wiLFxuICAgICAgICAgICAgXCJiYm94XCI6IHtcbiAgICAgICAgICAgICAgICBcInhcIjogNDIzLjQ2MDEyNDcwODY5MjEsXG4gICAgICAgICAgICAgICAgXCJ5XCI6IDEwMy42ODE0NDY5OTczNzA1OSxcbiAgICAgICAgICAgICAgICBcIndcIjogXCI2MC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInNpbXBsZSBjaGVtaWNhbFwiLFxuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkFUUFwiLFxuICAgICAgICAgICAgXCJzdGF0ZXNhbmRpbmZvc1wiOiBbXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcImNsb25lbWFya2VyXCI6IHRydWUsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDZcIixcbiAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IDUxNC44Mjg2NTY0ODA0MTYyLFxuICAgICAgICAgICAgICAgIFwieVwiOiA0MC4xNjE2OTcxODY0Njc1NixcbiAgICAgICAgICAgICAgICBcIndcIjogXCI2MC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInNpbXBsZSBjaGVtaWNhbFwiLFxuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkFEUFwiLFxuICAgICAgICAgICAgXCJzdGF0ZXNhbmRpbmZvc1wiOiBbXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcImNsb25lbWFya2VyXCI6IHRydWUsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDEwXCIsXG4gICAgICAgICAgICBcImJib3hcIjoge1xuICAgICAgICAgICAgICAgIFwieFwiOiA1ODguNzc1NjkzMjczMDM3LFxuICAgICAgICAgICAgICAgIFwieVwiOiA0MTAuNTMxODA4NzkwNjE0NCxcbiAgICAgICAgICAgICAgICBcIndcIjogXCI2MC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInNpbXBsZSBjaGVtaWNhbFwiLFxuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkFUUFwiLFxuICAgICAgICAgICAgXCJzdGF0ZXNhbmRpbmZvc1wiOiBbXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcImNsb25lbWFya2VyXCI6IHRydWUsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDlcIixcbiAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IDQ5Ny42ODU5NDI4MDM3MjM3LFxuICAgICAgICAgICAgICAgIFwieVwiOiAzNTIuMjI0MTY0NjEzNzY5MixcbiAgICAgICAgICAgICAgICBcIndcIjogXCI2MC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInNpbXBsZSBjaGVtaWNhbFwiLFxuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkFEUFwiLFxuICAgICAgICAgICAgXCJzdGF0ZXNhbmRpbmZvc1wiOiBbXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcImNsb25lbWFya2VyXCI6IHRydWUsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDJcIixcbiAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IDQ2Ny4xODMwMjIxMzIwOTI0NSxcbiAgICAgICAgICAgICAgICBcInlcIjogMjQwLjI4NzMwNjQ4NzM5MDMsXG4gICAgICAgICAgICAgICAgXCJ3XCI6IFwiMTAwLjBcIixcbiAgICAgICAgICAgICAgICBcImhcIjogXCI2MC4wXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImNsYXNzXCI6IFwibWFjcm9tb2xlY3VsZVwiLFxuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlJBRlwiLFxuICAgICAgICAgICAgXCJzdGF0ZXNhbmRpbmZvc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiZ2x5cGgyYVwiLFxuICAgICAgICAgICAgICAgICAgICBcImNsYXp6XCI6IFwic3RhdGUgdmFyaWFibGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJzdGF0ZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwiUFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInhcIjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwieVwiOiA1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwid1wiOiBcIjI1LjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaFwiOiBcIjIyLjBcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDE4XCIsXG4gICAgICAgICAgICBcImJib3hcIjoge1xuICAgICAgICAgICAgICAgIFwieFwiOiA5NDQuMDQwOTQ5MTc2MzYxLFxuICAgICAgICAgICAgICAgIFwieVwiOiAyODQuMDY1NzQ0Njg2ODQwNixcbiAgICAgICAgICAgICAgICBcIndcIjogXCI2MC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInNpbXBsZSBjaGVtaWNhbFwiLFxuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkFEUFwiLFxuICAgICAgICAgICAgXCJzdGF0ZXNhbmRpbmZvc1wiOiBbXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcImNsb25lbWFya2VyXCI6IHRydWUsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDE2XCIsXG4gICAgICAgICAgICBcImJib3hcIjoge1xuICAgICAgICAgICAgICAgIFwieFwiOiA2ODkuMTMxNDU4NTMwMzc2NyxcbiAgICAgICAgICAgICAgICBcInlcIjogNDgyLjQ0NDY3MTAwNTg0NzQ1LFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjYwLjBcIixcbiAgICAgICAgICAgICAgICBcImhcIjogXCI2MC4wXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImNsYXNzXCI6IFwic2ltcGxlIGNoZW1pY2FsXCIsXG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiQURQXCIsXG4gICAgICAgICAgICBcInN0YXRlc2FuZGluZm9zXCI6IFtdLFxuICAgICAgICAgICAgXCJwYXJlbnRcIjogXCJcIixcbiAgICAgICAgICAgIFwiY2xvbmVtYXJrZXJcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwicG9ydHNcIjogW11cbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJpZFwiOiBcImdseXBoMTVcIixcbiAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IDg4Mi44NDQzMzI2Mjk0NTQ2LFxuICAgICAgICAgICAgICAgIFwieVwiOiA0ODIuNTI0NjI2ODEyODA0MyxcbiAgICAgICAgICAgICAgICBcIndcIjogXCI2MC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInNpbXBsZSBjaGVtaWNhbFwiLFxuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkFUUFwiLFxuICAgICAgICAgICAgXCJzdGF0ZXNhbmRpbmZvc1wiOiBbXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcImNsb25lbWFya2VyXCI6IHRydWUsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDE3XCIsXG4gICAgICAgICAgICBcImJib3hcIjoge1xuICAgICAgICAgICAgICAgIFwieFwiOiA3NTkuOTgxMDQwODkwMjEyOSxcbiAgICAgICAgICAgICAgICBcInlcIjogMjIwLjU4NTQwNDQxMDE0NTc3LFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjYwLjBcIixcbiAgICAgICAgICAgICAgICBcImhcIjogXCI2MC4wXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImNsYXNzXCI6IFwic2ltcGxlIGNoZW1pY2FsXCIsXG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiQVRQXCIsXG4gICAgICAgICAgICBcInN0YXRlc2FuZGluZm9zXCI6IFtdLFxuICAgICAgICAgICAgXCJwYXJlbnRcIjogXCJcIixcbiAgICAgICAgICAgIFwiY2xvbmVtYXJrZXJcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwicG9ydHNcIjogW11cbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJpZFwiOiBcImdseXBoMTJcIixcbiAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IDcyMi41MjQwMDg4NzYyNzIxLFxuICAgICAgICAgICAgICAgIFwieVwiOiAzNTIuNzcwMDY5MzY1NDc4LFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjEwMC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcIm1hY3JvbW9sZWN1bGVcIixcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJNRUtcIixcbiAgICAgICAgICAgIFwic3RhdGVzYW5kaW5mb3NcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcImdseXBoMTJhXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2xhenpcIjogXCJzdGF0ZSB2YXJpYWJsZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCIyUFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInhcIjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwieVwiOiA1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwid1wiOiBcIjMyLjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaFwiOiBcIjIyLjBcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDE5XCIsXG4gICAgICAgICAgICBcImJib3hcIjoge1xuICAgICAgICAgICAgICAgIFwieFwiOiA4ODcuMDMxMjk1NTkyOTY5OSxcbiAgICAgICAgICAgICAgICBcInlcIjogMTg4LjAxMTA0MzIwODk5OTI0LFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjEwMC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcIm1hY3JvbW9sZWN1bGVcIixcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJFUktcIixcbiAgICAgICAgICAgIFwic3RhdGVzYW5kaW5mb3NcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcImdseXBoMTlhXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2xhenpcIjogXCJzdGF0ZSB2YXJpYWJsZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCIyUFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInhcIjogLTI1LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ5XCI6IDUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ3XCI6IFwiMzIuMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJoXCI6IFwiMjIuMFwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJwYXJlbnRcIjogXCJcIixcbiAgICAgICAgICAgIFwicG9ydHNcIjogW11cbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJpZFwiOiBcImdseXBoMjBcIixcbiAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IDk3MS4wNTY3MTc2NTA3MTkxLFxuICAgICAgICAgICAgICAgIFwieVwiOiA4NC42Njg1MjcyNzM5NzE5LFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjEwMC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInRhZ1wiLFxuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkVSS1wiLFxuICAgICAgICAgICAgXCJzdGF0ZXNhbmRpbmZvc1wiOiBbXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDFcIixcbiAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IDIxMy41NTA1NjEzMjcwNjg2NCxcbiAgICAgICAgICAgICAgICBcInlcIjogMjM2LjE4OTMzMjEzMzA2NjA1LFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjEwMC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcIm1hY3JvbW9sZWN1bGVcIixcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJSQVNcIixcbiAgICAgICAgICAgIFwic3RhdGVzYW5kaW5mb3NcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcImdseXBoMWFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjbGF6elwiOiBcInN0YXRlIHZhcmlhYmxlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwic3RhdGVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcImFjdGl2ZVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInhcIjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwieVwiOiA1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwid1wiOiBcIjUwLjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaFwiOiBcIjI2LjBcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDBcIixcbiAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IDYwLjEzNDM4OTUxMjI4ODYzNSxcbiAgICAgICAgICAgICAgICBcInlcIjogMjAwLjAyNTg3MjI0NTQxNjA1LFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjEwMC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInRhZ1wiLFxuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlJBU1wiLFxuICAgICAgICAgICAgXCJzdGF0ZXNhbmRpbmZvc1wiOiBbXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDI0XCIsXG4gICAgICAgICAgICBcImJib3hcIjoge1xuICAgICAgICAgICAgICAgIFwieFwiOiA2MDcuNTU4NDg2Mjk1Mzc4OCxcbiAgICAgICAgICAgICAgICBcInlcIjogMjE2LjM2NDY2NDg5MTg0NzE2LFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjEwMC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcIm1hY3JvbW9sZWN1bGVcIixcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJNRUtcIixcbiAgICAgICAgICAgIFwic3RhdGVzYW5kaW5mb3NcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcImdseXBoMjRhXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2xhenpcIjogXCJzdGF0ZSB2YXJpYWJsZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInN0YXRlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJQXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJiYm94XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwieFwiOiAtMjUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInlcIjogNTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIndcIjogXCIyNS4wXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImhcIjogXCIyMi4wXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInBhcmVudFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJwb3J0c1wiOiBbXVxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImlkXCI6IFwiZ2x5cGgxMVwiLFxuICAgICAgICAgICAgXCJiYm94XCI6IHtcbiAgICAgICAgICAgICAgICBcInhcIjogNTkyLjYxODUyMzA2NTY2NTIsXG4gICAgICAgICAgICAgICAgXCJ5XCI6IDMxMy40NTAyMDg1MjI1OTI5LFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjIwLjBcIixcbiAgICAgICAgICAgICAgICBcImhcIjogXCIyMC4wXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicHJvY2Vzc1wiLFxuICAgICAgICAgICAgXCJzdGF0ZXNhbmRpbmZvc1wiOiBbXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDI1XCIsXG4gICAgICAgICAgICBcImJib3hcIjoge1xuICAgICAgICAgICAgICAgIFwieFwiOiAyNDcuNDQzMTk2NTMxOTIzNixcbiAgICAgICAgICAgICAgICBcInlcIjogMzM4LjI5NTY1MjM2NTU4NDgzLFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjEwMC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcIm1hY3JvbW9sZWN1bGVcIixcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJSQUZcIixcbiAgICAgICAgICAgIFwic3RhdGVzYW5kaW5mb3NcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcImdseXBoMjVhXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2xhenpcIjogXCJzdGF0ZSB2YXJpYWJsZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInN0YXRlXCI6IHt9LFxuICAgICAgICAgICAgICAgICAgICBcImJib3hcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ4XCI6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInlcIjogNTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIndcIjogXCIyMC4wXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImhcIjogXCIyMi4wXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInBhcmVudFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJwb3J0c1wiOiBbXVxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImlkXCI6IFwiZ2x5cGgzXCIsXG4gICAgICAgICAgICBcImJib3hcIjoge1xuICAgICAgICAgICAgICAgIFwieFwiOiAzMzcuNzc5MTgwMjUxMTI5MzMsXG4gICAgICAgICAgICAgICAgXCJ5XCI6IDI1OS4xMzQ1NDUzMjg0NjkyNCxcbiAgICAgICAgICAgICAgICBcIndcIjogXCIyMC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiMjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2Nlc3NcIixcbiAgICAgICAgICAgIFwic3RhdGVzYW5kaW5mb3NcIjogW10sXG4gICAgICAgICAgICBcInBhcmVudFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJwb3J0c1wiOiBbXVxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImlkXCI6IFwiZ2x5cGgyM1wiLFxuICAgICAgICAgICAgXCJiYm94XCI6IHtcbiAgICAgICAgICAgICAgICBcInhcIjogNjMxLjM2NjU4MTA3OTYyNDcsXG4gICAgICAgICAgICAgICAgXCJ5XCI6IDkzLjYxNDQ1NzUwMzA1MzM2LFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjEwMC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiNjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcIm1hY3JvbW9sZWN1bGVcIixcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJNRUtcIixcbiAgICAgICAgICAgIFwic3RhdGVzYW5kaW5mb3NcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcImdseXBoMjNhXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2xhenpcIjogXCJzdGF0ZSB2YXJpYWJsZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInN0YXRlXCI6IHt9LFxuICAgICAgICAgICAgICAgICAgICBcImJib3hcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ4XCI6IC0yNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwieVwiOiA1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwid1wiOiBcIjIwLjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaFwiOiBcIjIyLjBcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDhcIixcbiAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IDUxNi45MjUyMzE1ODQyMjgyLFxuICAgICAgICAgICAgICAgIFwieVwiOiAxNDIuMDEyOTA4NDA0Mjk2MTMsXG4gICAgICAgICAgICAgICAgXCJ3XCI6IFwiMjAuMFwiLFxuICAgICAgICAgICAgICAgIFwiaFwiOiBcIjIwLjBcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwcm9jZXNzXCIsXG4gICAgICAgICAgICBcInN0YXRlc2FuZGluZm9zXCI6IFtdLFxuICAgICAgICAgICAgXCJwYXJlbnRcIjogXCJcIixcbiAgICAgICAgICAgIFwicG9ydHNcIjogW11cbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJpZFwiOiBcImdseXBoMjJcIixcbiAgICAgICAgICAgIFwiYmJveFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IDc4Ni4xNjAyNzY4NTczNTczLFxuICAgICAgICAgICAgICAgIFwieVwiOiA1NTcuNDUzNDkwNDMyODk5MSxcbiAgICAgICAgICAgICAgICBcIndcIjogXCIxMDAuMFwiLFxuICAgICAgICAgICAgICAgIFwiaFwiOiBcIjYwLjBcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJtYWNyb21vbGVjdWxlXCIsXG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiRVJLXCIsXG4gICAgICAgICAgICBcInN0YXRlc2FuZGluZm9zXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDIyYVwiLFxuICAgICAgICAgICAgICAgICAgICBcImNsYXp6XCI6IFwic3RhdGUgdmFyaWFibGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJzdGF0ZVwiOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgXCJiYm94XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwieFwiOiAtMjUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInlcIjogNTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIndcIjogXCIyMC4wXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImhcIjogXCIyMi4wXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInBhcmVudFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJwb3J0c1wiOiBbXVxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImlkXCI6IFwiZ2x5cGgxM1wiLFxuICAgICAgICAgICAgXCJiYm94XCI6IHtcbiAgICAgICAgICAgICAgICBcInhcIjogODQ0LjQzMDAyODg5MzkwOTYsXG4gICAgICAgICAgICAgICAgXCJ5XCI6IDI4NC44NzE2NTgyMzc1MDM1NCxcbiAgICAgICAgICAgICAgICBcIndcIjogXCIyMC4wXCIsXG4gICAgICAgICAgICAgICAgXCJoXCI6IFwiMjAuMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2Nlc3NcIixcbiAgICAgICAgICAgIFwic3RhdGVzYW5kaW5mb3NcIjogW10sXG4gICAgICAgICAgICBcInBhcmVudFwiOiBcIlwiLFxuICAgICAgICAgICAgXCJwb3J0c1wiOiBbXVxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImlkXCI6IFwiZ2x5cGgxNFwiLFxuICAgICAgICAgICAgXCJiYm94XCI6IHtcbiAgICAgICAgICAgICAgICBcInhcIjogNzgzLjc0MDIwNDY4MDg0NDMsXG4gICAgICAgICAgICAgICAgXCJ5XCI6IDQ1My4xNTAxNTA1NTAxNTkxLFxuICAgICAgICAgICAgICAgIFwid1wiOiBcIjIwLjBcIixcbiAgICAgICAgICAgICAgICBcImhcIjogXCIyMC4wXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicHJvY2Vzc1wiLFxuICAgICAgICAgICAgXCJzdGF0ZXNhbmRpbmZvc1wiOiBbXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJnbHlwaDIxXCIsXG4gICAgICAgICAgICBcImJib3hcIjoge1xuICAgICAgICAgICAgICAgIFwieFwiOiA4NzIuMTUxNzMzNDE2MjUzMSxcbiAgICAgICAgICAgICAgICBcInlcIjogMzc4LjU2ODA5NzI3MzIwMzksXG4gICAgICAgICAgICAgICAgXCJ3XCI6IFwiMTAwLjBcIixcbiAgICAgICAgICAgICAgICBcImhcIjogXCI2MC4wXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImNsYXNzXCI6IFwibWFjcm9tb2xlY3VsZVwiLFxuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkVSS1wiLFxuICAgICAgICAgICAgXCJzdGF0ZXNhbmRpbmZvc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiZ2x5cGgyMWFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjbGF6elwiOiBcInN0YXRlIHZhcmlhYmxlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwic3RhdGVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlBcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImJib3hcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ4XCI6IC0yNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwieVwiOiA1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwid1wiOiBcIjI1LjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaFwiOiBcIjIyLjBcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwicGFyZW50XCI6IFwiXCIsXG4gICAgICAgICAgICBcInBvcnRzXCI6IFtdXG4gICAgICAgIH1cbiAgICB9XG5dLFxuXCJlZGdlc1wiOiBbXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2R1Y3Rpb25cIixcbiAgICAgICAgICAgIFwiYmVuZFBvaW50UG9zaXRpb25zXCI6IFtdLFxuICAgICAgICAgICAgXCJjYXJkaW5hbGl0eVwiOiAwLFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJnbHlwaDNcIixcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiZ2x5cGgyXCIsXG4gICAgICAgICAgICBcInBvcnRzb3VyY2VcIjogXCJnbHlwaDNcIixcbiAgICAgICAgICAgIFwicG9ydHRhcmdldFwiOiBcImdseXBoMlwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJjb25zdW1wdGlvblwiLFxuICAgICAgICAgICAgXCJiZW5kUG9pbnRQb3NpdGlvbnNcIjogW10sXG4gICAgICAgICAgICBcImNhcmRpbmFsaXR5XCI6IDAsXG4gICAgICAgICAgICBcInNvdXJjZVwiOiBcImdseXBoNFwiLFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJnbHlwaDNcIixcbiAgICAgICAgICAgIFwicG9ydHNvdXJjZVwiOiBcImdseXBoNFwiLFxuICAgICAgICAgICAgXCJwb3J0dGFyZ2V0XCI6IFwiZ2x5cGgzXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2R1Y3Rpb25cIixcbiAgICAgICAgICAgIFwiYmVuZFBvaW50UG9zaXRpb25zXCI6IFtdLFxuICAgICAgICAgICAgXCJjYXJkaW5hbGl0eVwiOiAwLFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJnbHlwaDNcIixcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiZ2x5cGg1XCIsXG4gICAgICAgICAgICBcInBvcnRzb3VyY2VcIjogXCJnbHlwaDNcIixcbiAgICAgICAgICAgIFwicG9ydHRhcmdldFwiOiBcImdseXBoNVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJjYXRhbHlzaXNcIixcbiAgICAgICAgICAgIFwiYmVuZFBvaW50UG9zaXRpb25zXCI6IFtdLFxuICAgICAgICAgICAgXCJjYXJkaW5hbGl0eVwiOiAwLFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJnbHlwaDFcIixcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiZ2x5cGgzXCIsXG4gICAgICAgICAgICBcInBvcnRzb3VyY2VcIjogXCJnbHlwaDFcIixcbiAgICAgICAgICAgIFwicG9ydHRhcmdldFwiOiBcImdseXBoM1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJjb25zdW1wdGlvblwiLFxuICAgICAgICAgICAgXCJiZW5kUG9pbnRQb3NpdGlvbnNcIjogW10sXG4gICAgICAgICAgICBcImNhcmRpbmFsaXR5XCI6IDAsXG4gICAgICAgICAgICBcInNvdXJjZVwiOiBcImdseXBoN1wiLFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJnbHlwaDhcIixcbiAgICAgICAgICAgIFwicG9ydHNvdXJjZVwiOiBcImdseXBoN1wiLFxuICAgICAgICAgICAgXCJwb3J0dGFyZ2V0XCI6IFwiZ2x5cGg4XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2R1Y3Rpb25cIixcbiAgICAgICAgICAgIFwiYmVuZFBvaW50UG9zaXRpb25zXCI6IFtdLFxuICAgICAgICAgICAgXCJjYXJkaW5hbGl0eVwiOiAwLFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJnbHlwaDhcIixcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiZ2x5cGg2XCIsXG4gICAgICAgICAgICBcInBvcnRzb3VyY2VcIjogXCJnbHlwaDhcIixcbiAgICAgICAgICAgIFwicG9ydHRhcmdldFwiOiBcImdseXBoNlwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJjb25zdW1wdGlvblwiLFxuICAgICAgICAgICAgXCJiZW5kUG9pbnRQb3NpdGlvbnNcIjogW10sXG4gICAgICAgICAgICBcImNhcmRpbmFsaXR5XCI6IDAsXG4gICAgICAgICAgICBcInNvdXJjZVwiOiBcImdseXBoMTBcIixcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiZ2x5cGgxMVwiLFxuICAgICAgICAgICAgXCJwb3J0c291cmNlXCI6IFwiZ2x5cGgxMFwiLFxuICAgICAgICAgICAgXCJwb3J0dGFyZ2V0XCI6IFwiZ2x5cGgxMVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwcm9kdWN0aW9uXCIsXG4gICAgICAgICAgICBcImJlbmRQb2ludFBvc2l0aW9uc1wiOiBbXSxcbiAgICAgICAgICAgIFwiY2FyZGluYWxpdHlcIjogMCxcbiAgICAgICAgICAgIFwic291cmNlXCI6IFwiZ2x5cGgxMVwiLFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJnbHlwaDEyXCIsXG4gICAgICAgICAgICBcInBvcnRzb3VyY2VcIjogXCJnbHlwaDExXCIsXG4gICAgICAgICAgICBcInBvcnR0YXJnZXRcIjogXCJnbHlwaDEyXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2R1Y3Rpb25cIixcbiAgICAgICAgICAgIFwiYmVuZFBvaW50UG9zaXRpb25zXCI6IFtdLFxuICAgICAgICAgICAgXCJjYXJkaW5hbGl0eVwiOiAwLFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJnbHlwaDExXCIsXG4gICAgICAgICAgICBcInRhcmdldFwiOiBcImdseXBoOVwiLFxuICAgICAgICAgICAgXCJwb3J0c291cmNlXCI6IFwiZ2x5cGgxMVwiLFxuICAgICAgICAgICAgXCJwb3J0dGFyZ2V0XCI6IFwiZ2x5cGg5XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcImNhdGFseXNpc1wiLFxuICAgICAgICAgICAgXCJiZW5kUG9pbnRQb3NpdGlvbnNcIjogW10sXG4gICAgICAgICAgICBcImNhcmRpbmFsaXR5XCI6IDAsXG4gICAgICAgICAgICBcInNvdXJjZVwiOiBcImdseXBoMlwiLFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJnbHlwaDExXCIsXG4gICAgICAgICAgICBcInBvcnRzb3VyY2VcIjogXCJnbHlwaDJcIixcbiAgICAgICAgICAgIFwicG9ydHRhcmdldFwiOiBcImdseXBoMTFcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwiY2F0YWx5c2lzXCIsXG4gICAgICAgICAgICBcImJlbmRQb2ludFBvc2l0aW9uc1wiOiBbXSxcbiAgICAgICAgICAgIFwiY2FyZGluYWxpdHlcIjogMCxcbiAgICAgICAgICAgIFwic291cmNlXCI6IFwiZ2x5cGgyXCIsXG4gICAgICAgICAgICBcInRhcmdldFwiOiBcImdseXBoOFwiLFxuICAgICAgICAgICAgXCJwb3J0c291cmNlXCI6IFwiZ2x5cGgyXCIsXG4gICAgICAgICAgICBcInBvcnR0YXJnZXRcIjogXCJnbHlwaDhcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicHJvZHVjdGlvblwiLFxuICAgICAgICAgICAgXCJiZW5kUG9pbnRQb3NpdGlvbnNcIjogW10sXG4gICAgICAgICAgICBcImNhcmRpbmFsaXR5XCI6IDAsXG4gICAgICAgICAgICBcInNvdXJjZVwiOiBcImdseXBoMTNcIixcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiZ2x5cGgxOVwiLFxuICAgICAgICAgICAgXCJwb3J0c291cmNlXCI6IFwiZ2x5cGgxM1wiLFxuICAgICAgICAgICAgXCJwb3J0dGFyZ2V0XCI6IFwiZ2x5cGgxOVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwcm9kdWN0aW9uXCIsXG4gICAgICAgICAgICBcImJlbmRQb2ludFBvc2l0aW9uc1wiOiBbXSxcbiAgICAgICAgICAgIFwiY2FyZGluYWxpdHlcIjogMCxcbiAgICAgICAgICAgIFwic291cmNlXCI6IFwiZ2x5cGgxM1wiLFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJnbHlwaDE4XCIsXG4gICAgICAgICAgICBcInBvcnRzb3VyY2VcIjogXCJnbHlwaDEzXCIsXG4gICAgICAgICAgICBcInBvcnR0YXJnZXRcIjogXCJnbHlwaDE4XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2R1Y3Rpb25cIixcbiAgICAgICAgICAgIFwiYmVuZFBvaW50UG9zaXRpb25zXCI6IFtdLFxuICAgICAgICAgICAgXCJjYXJkaW5hbGl0eVwiOiAwLFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJnbHlwaDE0XCIsXG4gICAgICAgICAgICBcInRhcmdldFwiOiBcImdseXBoMTZcIixcbiAgICAgICAgICAgIFwicG9ydHNvdXJjZVwiOiBcImdseXBoMTRcIixcbiAgICAgICAgICAgIFwicG9ydHRhcmdldFwiOiBcImdseXBoMTZcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwiY29uc3VtcHRpb25cIixcbiAgICAgICAgICAgIFwiYmVuZFBvaW50UG9zaXRpb25zXCI6IFtdLFxuICAgICAgICAgICAgXCJjYXJkaW5hbGl0eVwiOiAwLFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJnbHlwaDE1XCIsXG4gICAgICAgICAgICBcInRhcmdldFwiOiBcImdseXBoMTRcIixcbiAgICAgICAgICAgIFwicG9ydHNvdXJjZVwiOiBcImdseXBoMTVcIixcbiAgICAgICAgICAgIFwicG9ydHRhcmdldFwiOiBcImdseXBoMTRcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwiY29uc3VtcHRpb25cIixcbiAgICAgICAgICAgIFwiYmVuZFBvaW50UG9zaXRpb25zXCI6IFtdLFxuICAgICAgICAgICAgXCJjYXJkaW5hbGl0eVwiOiAwLFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJnbHlwaDE3XCIsXG4gICAgICAgICAgICBcInRhcmdldFwiOiBcImdseXBoMTNcIixcbiAgICAgICAgICAgIFwicG9ydHNvdXJjZVwiOiBcImdseXBoMTdcIixcbiAgICAgICAgICAgIFwicG9ydHRhcmdldFwiOiBcImdseXBoMTNcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwiY2F0YWx5c2lzXCIsXG4gICAgICAgICAgICBcImJlbmRQb2ludFBvc2l0aW9uc1wiOiBbXSxcbiAgICAgICAgICAgIFwiY2FyZGluYWxpdHlcIjogMCxcbiAgICAgICAgICAgIFwic291cmNlXCI6IFwiZ2x5cGgxMlwiLFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJnbHlwaDEzXCIsXG4gICAgICAgICAgICBcInBvcnRzb3VyY2VcIjogXCJnbHlwaDEyXCIsXG4gICAgICAgICAgICBcInBvcnR0YXJnZXRcIjogXCJnbHlwaDEzXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcImNhdGFseXNpc1wiLFxuICAgICAgICAgICAgXCJiZW5kUG9pbnRQb3NpdGlvbnNcIjogW10sXG4gICAgICAgICAgICBcImNhcmRpbmFsaXR5XCI6IDAsXG4gICAgICAgICAgICBcInNvdXJjZVwiOiBcImdseXBoMTJcIixcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiZ2x5cGgxNFwiLFxuICAgICAgICAgICAgXCJwb3J0c291cmNlXCI6IFwiZ2x5cGgxMlwiLFxuICAgICAgICAgICAgXCJwb3J0dGFyZ2V0XCI6IFwiZ2x5cGgxNFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJlcXVpdmFsZW5jZSBhcmNcIixcbiAgICAgICAgICAgIFwiYmVuZFBvaW50UG9zaXRpb25zXCI6IFtdLFxuICAgICAgICAgICAgXCJjYXJkaW5hbGl0eVwiOiAwLFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJnbHlwaDE5XCIsXG4gICAgICAgICAgICBcInRhcmdldFwiOiBcImdseXBoMjBcIixcbiAgICAgICAgICAgIFwicG9ydHNvdXJjZVwiOiBcImdseXBoMTlcIixcbiAgICAgICAgICAgIFwicG9ydHRhcmdldFwiOiBcImdseXBoMjBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwiZXF1aXZhbGVuY2UgYXJjXCIsXG4gICAgICAgICAgICBcImJlbmRQb2ludFBvc2l0aW9uc1wiOiBbXSxcbiAgICAgICAgICAgIFwiY2FyZGluYWxpdHlcIjogMCxcbiAgICAgICAgICAgIFwic291cmNlXCI6IFwiZ2x5cGgxXCIsXG4gICAgICAgICAgICBcInRhcmdldFwiOiBcImdseXBoMFwiLFxuICAgICAgICAgICAgXCJwb3J0c291cmNlXCI6IFwiZ2x5cGgxXCIsXG4gICAgICAgICAgICBcInBvcnR0YXJnZXRcIjogXCJnbHlwaDBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicHJvZHVjdGlvblwiLFxuICAgICAgICAgICAgXCJiZW5kUG9pbnRQb3NpdGlvbnNcIjogW10sXG4gICAgICAgICAgICBcImNhcmRpbmFsaXR5XCI6IDAsXG4gICAgICAgICAgICBcInNvdXJjZVwiOiBcImdseXBoOFwiLFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJnbHlwaDI0XCIsXG4gICAgICAgICAgICBcInBvcnRzb3VyY2VcIjogXCJnbHlwaDhcIixcbiAgICAgICAgICAgIFwicG9ydHRhcmdldFwiOiBcImdseXBoMjRcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwiY29uc3VtcHRpb25cIixcbiAgICAgICAgICAgIFwiYmVuZFBvaW50UG9zaXRpb25zXCI6IFtdLFxuICAgICAgICAgICAgXCJjYXJkaW5hbGl0eVwiOiAwLFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJnbHlwaDI0XCIsXG4gICAgICAgICAgICBcInRhcmdldFwiOiBcImdseXBoMTFcIixcbiAgICAgICAgICAgIFwicG9ydHNvdXJjZVwiOiBcImdseXBoMjRcIixcbiAgICAgICAgICAgIFwicG9ydHRhcmdldFwiOiBcImdseXBoMTFcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwiY29uc3VtcHRpb25cIixcbiAgICAgICAgICAgIFwiYmVuZFBvaW50UG9zaXRpb25zXCI6IFtdLFxuICAgICAgICAgICAgXCJjYXJkaW5hbGl0eVwiOiAwLFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJnbHlwaDI1XCIsXG4gICAgICAgICAgICBcInRhcmdldFwiOiBcImdseXBoM1wiLFxuICAgICAgICAgICAgXCJwb3J0c291cmNlXCI6IFwiZ2x5cGgyNVwiLFxuICAgICAgICAgICAgXCJwb3J0dGFyZ2V0XCI6IFwiZ2x5cGgzXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcImNvbnN1bXB0aW9uXCIsXG4gICAgICAgICAgICBcImJlbmRQb2ludFBvc2l0aW9uc1wiOiBbXSxcbiAgICAgICAgICAgIFwiY2FyZGluYWxpdHlcIjogMCxcbiAgICAgICAgICAgIFwic291cmNlXCI6IFwiZ2x5cGgyM1wiLFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJnbHlwaDhcIixcbiAgICAgICAgICAgIFwicG9ydHNvdXJjZVwiOiBcImdseXBoMjNcIixcbiAgICAgICAgICAgIFwicG9ydHRhcmdldFwiOiBcImdseXBoOFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJjb25zdW1wdGlvblwiLFxuICAgICAgICAgICAgXCJiZW5kUG9pbnRQb3NpdGlvbnNcIjogW10sXG4gICAgICAgICAgICBcImNhcmRpbmFsaXR5XCI6IDAsXG4gICAgICAgICAgICBcInNvdXJjZVwiOiBcImdseXBoMjJcIixcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiZ2x5cGgxNFwiLFxuICAgICAgICAgICAgXCJwb3J0c291cmNlXCI6IFwiZ2x5cGgyMlwiLFxuICAgICAgICAgICAgXCJwb3J0dGFyZ2V0XCI6IFwiZ2x5cGgxNFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJjb25zdW1wdGlvblwiLFxuICAgICAgICAgICAgXCJiZW5kUG9pbnRQb3NpdGlvbnNcIjogW10sXG4gICAgICAgICAgICBcImNhcmRpbmFsaXR5XCI6IDAsXG4gICAgICAgICAgICBcInNvdXJjZVwiOiBcImdseXBoMjFcIixcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiZ2x5cGgxM1wiLFxuICAgICAgICAgICAgXCJwb3J0c291cmNlXCI6IFwiZ2x5cGgyMVwiLFxuICAgICAgICAgICAgXCJwb3J0dGFyZ2V0XCI6IFwiZ2x5cGgxM1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwcm9kdWN0aW9uXCIsXG4gICAgICAgICAgICBcImJlbmRQb2ludFBvc2l0aW9uc1wiOiBbXSxcbiAgICAgICAgICAgIFwiY2FyZGluYWxpdHlcIjogMCxcbiAgICAgICAgICAgIFwic291cmNlXCI6IFwiZ2x5cGgxNFwiLFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJnbHlwaDIxXCIsXG4gICAgICAgICAgICBcInBvcnRzb3VyY2VcIjogXCJnbHlwaDE0XCIsXG4gICAgICAgICAgICBcInBvcnR0YXJnZXRcIjogXCJnbHlwaDIxXCJcbiAgICAgICAgfVxuICAgIH1cbl1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwa0Nhc2NhZGVEYXRhO1xuIiwiIiwiXG4vKiFcblxuQ3l0b3NjYXBlLmpzIHt7VkVSU0lPTn19IChNSVQgbGljZW5zZWQpXG5cbkNvcHlyaWdodCAoYykgVGhlIEN5dG9zY2FwZSBDb25zb3J0aXVtXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcbnRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIOKAnFNvZnR3YXJl4oCdKSwgdG8gZGVhbCBpblxudGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xudXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXNcbm9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkb1xuc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCDigJxBUyBJU+KAnSwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG5cbiovXG5cbid1c2Ugc3RyaWN0JztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCAnLi91dGlsJyApO1xudmFyIGlzID0gcmVxdWlyZSggJy4vaXMnICk7XG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoICcuL3Byb21pc2UnICk7XG5cbnZhciBBbmltYXRpb24gPSBmdW5jdGlvbiggdGFyZ2V0LCBvcHRzLCBvcHRzMiApe1xuICBpZiggISh0aGlzIGluc3RhbmNlb2YgQW5pbWF0aW9uKSApe1xuICAgIHJldHVybiBuZXcgQW5pbWF0aW9uKCB0YXJnZXQsIG9wdHMsIG9wdHMyICk7XG4gIH1cblxuICB2YXIgX3AgPSB0aGlzLl9wcml2YXRlID0gdXRpbC5leHRlbmQoIHtcbiAgICBkdXJhdGlvbjogMTAwMFxuICB9LCBvcHRzLCBvcHRzMiApO1xuXG4gIF9wLnRhcmdldCA9IHRhcmdldDtcbiAgX3Auc3R5bGUgPSBfcC5zdHlsZSB8fCBfcC5jc3M7XG4gIF9wLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgX3AucGxheWluZyA9IGZhbHNlO1xuICBfcC5ob29rZWQgPSBmYWxzZTtcbiAgX3AuYXBwbHlpbmcgPSBmYWxzZTtcbiAgX3AucHJvZ3Jlc3MgPSAwO1xuICBfcC5jb21wbGV0ZXMgPSBbXTtcbiAgX3AuZnJhbWVzID0gW107XG5cbiAgaWYoIF9wLmNvbXBsZXRlICYmIGlzLmZuKCBfcC5jb21wbGV0ZSApICl7XG4gICAgX3AuY29tcGxldGVzLnB1c2goIF9wLmNvbXBsZXRlICk7XG4gIH1cblxuICAvLyBmb3IgZnV0dXJlIHRpbWVsaW5lL2FuaW1hdGlvbnMgaW1wbFxuICB0aGlzLmxlbmd0aCA9IDE7XG4gIHRoaXNbMF0gPSB0aGlzO1xufTtcblxudmFyIGFuaWZuID0gQW5pbWF0aW9uLnByb3RvdHlwZTtcblxudXRpbC5leHRlbmQoIGFuaWZuLCB7XG5cbiAgaW5zdGFuY2VTdHJpbmc6IGZ1bmN0aW9uKCl7IHJldHVybiAnYW5pbWF0aW9uJzsgfSxcblxuICBob29rOiBmdW5jdGlvbigpe1xuICAgIHZhciBfcCA9IHRoaXMuX3ByaXZhdGU7XG5cbiAgICBpZiggIV9wLmhvb2tlZCApe1xuICAgICAgLy8gYWRkIHRvIHRhcmdldCdzIGFuaW1hdGlvbiBxdWV1ZVxuICAgICAgdmFyIHE7XG4gICAgICB2YXIgdEFuaSA9IF9wLnRhcmdldC5fcHJpdmF0ZS5hbmltYXRpb247XG4gICAgICBpZiggX3AucXVldWUgKXtcbiAgICAgICAgcSA9IHRBbmkucXVldWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxID0gdEFuaS5jdXJyZW50O1xuICAgICAgfVxuICAgICAgcS5wdXNoKCB0aGlzICk7XG5cbiAgICAgIC8vIGFkZCB0byB0aGUgYW5pbWF0aW9uIGxvb3AgcG9vbFxuICAgICAgaWYoIGlzLmVsZW1lbnRPckNvbGxlY3Rpb24oIF9wLnRhcmdldCApICl7XG4gICAgICAgIF9wLnRhcmdldC5jeSgpLmFkZFRvQW5pbWF0aW9uUG9vbCggX3AudGFyZ2V0ICk7XG4gICAgICB9XG5cbiAgICAgIF9wLmhvb2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgcGxheTogZnVuY3Rpb24oKXtcbiAgICB2YXIgX3AgPSB0aGlzLl9wcml2YXRlO1xuXG4gICAgLy8gYXV0b3Jld2luZFxuICAgIGlmKCBfcC5wcm9ncmVzcyA9PT0gMSApe1xuICAgICAgX3AucHJvZ3Jlc3MgPSAwO1xuICAgIH1cblxuICAgIF9wLnBsYXlpbmcgPSB0cnVlO1xuICAgIF9wLnN0YXJ0ZWQgPSBmYWxzZTsgLy8gbmVlZHMgdG8gYmUgc3RhcnRlZCBieSBhbmltYXRpb24gbG9vcFxuICAgIF9wLnN0b3BwZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuaG9vaygpO1xuXG4gICAgLy8gdGhlIGFuaW1hdGlvbiBsb29wIHdpbGwgc3RhcnQgdGhlIGFuaW1hdGlvbi4uLlxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgcGxheWluZzogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZS5wbGF5aW5nO1xuICB9LFxuXG4gIGFwcGx5OiBmdW5jdGlvbigpe1xuICAgIHZhciBfcCA9IHRoaXMuX3ByaXZhdGU7XG5cbiAgICBfcC5hcHBseWluZyA9IHRydWU7XG4gICAgX3Auc3RhcnRlZCA9IGZhbHNlOyAvLyBuZWVkcyB0byBiZSBzdGFydGVkIGJ5IGFuaW1hdGlvbiBsb29wXG4gICAgX3Auc3RvcHBlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5ob29rKCk7XG5cbiAgICAvLyB0aGUgYW5pbWF0aW9uIGxvb3Agd2lsbCBhcHBseSB0aGUgYW5pbWF0aW9uIGF0IHRoaXMgcHJvZ3Jlc3NcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGFwcGx5aW5nOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLl9wcml2YXRlLmFwcGx5aW5nO1xuICB9LFxuXG4gIHBhdXNlOiBmdW5jdGlvbigpe1xuICAgIHZhciBfcCA9IHRoaXMuX3ByaXZhdGU7XG5cbiAgICBfcC5wbGF5aW5nID0gZmFsc2U7XG4gICAgX3Auc3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgc3RvcDogZnVuY3Rpb24oKXtcbiAgICB2YXIgX3AgPSB0aGlzLl9wcml2YXRlO1xuXG4gICAgX3AucGxheWluZyA9IGZhbHNlO1xuICAgIF9wLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICBfcC5zdG9wcGVkID0gdHJ1ZTsgLy8gdG8gYmUgcmVtb3ZlZCBmcm9tIGFuaW1hdGlvbiBxdWV1ZXNcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIHJld2luZDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5wcm9ncmVzcyggMCApO1xuICB9LFxuXG4gIGZhc3Rmb3J3YXJkOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLnByb2dyZXNzKCAxICk7XG4gIH0sXG5cbiAgdGltZTogZnVuY3Rpb24oIHQgKXtcbiAgICB2YXIgX3AgPSB0aGlzLl9wcml2YXRlO1xuXG4gICAgaWYoIHQgPT09IHVuZGVmaW5lZCApe1xuICAgICAgcmV0dXJuIF9wLnByb2dyZXNzICogX3AuZHVyYXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnByb2dyZXNzKCB0IC8gX3AuZHVyYXRpb24gKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJvZ3Jlc3M6IGZ1bmN0aW9uKCBwICl7XG4gICAgdmFyIF9wID0gdGhpcy5fcHJpdmF0ZTtcbiAgICB2YXIgd2FzUGxheWluZyA9IF9wLnBsYXlpbmc7XG5cbiAgICBpZiggcCA9PT0gdW5kZWZpbmVkICl7XG4gICAgICByZXR1cm4gX3AucHJvZ3Jlc3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmKCB3YXNQbGF5aW5nICl7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgIH1cblxuICAgICAgX3AucHJvZ3Jlc3MgPSBwO1xuICAgICAgX3Auc3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgICBpZiggd2FzUGxheWluZyApe1xuICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBjb21wbGV0ZWQ6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUucHJvZ3Jlc3MgPT09IDE7XG4gIH0sXG5cbiAgcmV2ZXJzZTogZnVuY3Rpb24oKXtcbiAgICB2YXIgX3AgPSB0aGlzLl9wcml2YXRlO1xuICAgIHZhciB3YXNQbGF5aW5nID0gX3AucGxheWluZztcblxuICAgIGlmKCB3YXNQbGF5aW5nICl7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuXG4gICAgX3AucHJvZ3Jlc3MgPSAxIC0gX3AucHJvZ3Jlc3M7XG4gICAgX3Auc3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgdmFyIHN3YXAgPSBmdW5jdGlvbiggYSwgYiApe1xuICAgICAgdmFyIF9wYSA9IF9wWyBhIF07XG5cbiAgICAgIF9wWyBhIF0gPSBfcFsgYiBdO1xuICAgICAgX3BbIGIgXSA9IF9wYTtcbiAgICB9O1xuXG4gICAgc3dhcCggJ3pvb20nLCAnc3RhcnRab29tJyApO1xuICAgIHN3YXAoICdwYW4nLCAnc3RhcnRQYW4nICk7XG4gICAgc3dhcCggJ3Bvc2l0aW9uJywgJ3N0YXJ0UG9zaXRpb24nICk7XG5cbiAgICAvLyBzd2FwIHN0eWxlc1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgX3Auc3R5bGUubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBwcm9wID0gX3Auc3R5bGVbIGkgXTtcbiAgICAgIHZhciBuYW1lID0gcHJvcC5uYW1lO1xuICAgICAgdmFyIHN0YXJ0U3R5bGVQcm9wID0gX3Auc3RhcnRTdHlsZVsgbmFtZSBdO1xuXG4gICAgICBfcC5zdGFydFN0eWxlWyBuYW1lIF0gPSBwcm9wO1xuICAgICAgX3Auc3R5bGVbIGkgXSA9IHN0YXJ0U3R5bGVQcm9wO1xuICAgIH1cblxuICAgIGlmKCB3YXNQbGF5aW5nICl7XG4gICAgICB0aGlzLnBsYXkoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBwcm9taXNlOiBmdW5jdGlvbiggdHlwZSApe1xuICAgIHZhciBfcCA9IHRoaXMuX3ByaXZhdGU7XG5cbiAgICB2YXIgYXJyO1xuXG4gICAgc3dpdGNoKCB0eXBlICl7XG4gICAgICBjYXNlICdmcmFtZSc6XG4gICAgICAgIGFyciA9IF9wLmZyYW1lcztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgY2FzZSAnY29tcGxldGUnOlxuICAgICAgY2FzZSAnY29tcGxldGVkJzpcbiAgICAgICAgYXJyID0gX3AuY29tcGxldGVzO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSggZnVuY3Rpb24oIHJlc29sdmUsIHJlamVjdCApe1xuICAgICAgYXJyLnB1c2goIGZ1bmN0aW9uKCl7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0gKTtcbiAgICB9ICk7XG4gIH1cblxufSApO1xuXG5hbmlmbi5jb21wbGV0ZSA9IGFuaWZuLmNvbXBsZXRlZDtcblxubW9kdWxlLmV4cG9ydHMgPSBBbmltYXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpcyA9IHJlcXVpcmUoICcuLi8uLi9pcycgKTtcblxudmFyIGVsZXNmbiA9ICh7XG5cbiAgLy8gSW1wbGVtZW50ZWQgZnJvbSBwc2V1ZG9jb2RlIGZyb20gd2lraXBlZGlhXG4gIGFTdGFyOiBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAgIHZhciBlbGVzID0gdGhpcztcblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgLy8gUmVjb25zdHJ1Y3RzIHRoZSBwYXRoIGZyb20gU3RhcnQgdG8gRW5kLCBhY3VtdWxhdGluZyB0aGUgcmVzdWx0IGluIHBhdGhBY3VtXG4gICAgdmFyIHJlY29uc3RydWN0UGF0aCA9IGZ1bmN0aW9uKCBzdGFydCwgZW5kLCBjYW1lRnJvbU1hcCwgcGF0aEFjdW0gKXtcbiAgICAgIC8vIEJhc2UgY2FzZVxuICAgICAgaWYoIHN0YXJ0ID09IGVuZCApe1xuICAgICAgICBwYXRoQWN1bS5wdXNoKCBjeS5nZXRFbGVtZW50QnlJZCggZW5kICkgKTtcbiAgICAgICAgcmV0dXJuIHBhdGhBY3VtO1xuICAgICAgfVxuXG4gICAgICBpZiggZW5kIGluIGNhbWVGcm9tTWFwICl7XG4gICAgICAgIC8vIFdlIGtub3cgd2hpY2ggbm9kZSBpcyBiZWZvcmUgdGhlIGxhc3Qgb25lXG4gICAgICAgIHZhciBwcmV2aW91cyA9IGNhbWVGcm9tTWFwWyBlbmQgXTtcbiAgICAgICAgdmFyIHByZXZpb3VzRWRnZSA9IGNhbWVGcm9tRWRnZVsgZW5kIF07XG5cbiAgICAgICAgcGF0aEFjdW0ucHVzaCggY3kuZ2V0RWxlbWVudEJ5SWQoIGVuZCApICk7XG4gICAgICAgIHBhdGhBY3VtLnB1c2goIGN5LmdldEVsZW1lbnRCeUlkKCBwcmV2aW91c0VkZ2UgKSApO1xuXG5cbiAgICAgICAgcmV0dXJuIHJlY29uc3RydWN0UGF0aCggc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyxcbiAgICAgICAgICAgICAgICAgICAgIGNhbWVGcm9tTWFwLFxuICAgICAgICAgICAgICAgICAgICAgcGF0aEFjdW0gKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2Ugc2hvdWxkIG5vdCByZWFjaCBoZXJlIVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuXG4gICAgLy8gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgaW4gb3BlblNldCB3aGljaCBoYXMgbWluaW11bSBmU2NvcmVcbiAgICB2YXIgZmluZE1pbiA9IGZ1bmN0aW9uKCBvcGVuU2V0LCBmU2NvcmUgKXtcbiAgICAgIGlmKCBvcGVuU2V0Lmxlbmd0aCA9PT0gMCApe1xuICAgICAgICAvLyBTaG91bGQgbmV2ZXIgYmUgdGhlIGNhc2VcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBtaW5Qb3MgPSAwO1xuICAgICAgdmFyIHRlbXBTY29yZSA9IGZTY29yZVsgb3BlblNldFswXSBdO1xuICAgICAgZm9yKCB2YXIgaSA9IDE7IGkgPCBvcGVuU2V0Lmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBzID0gZlNjb3JlWyBvcGVuU2V0WyBpIF0gXTtcbiAgICAgICAgaWYoIHMgPCB0ZW1wU2NvcmUgKXtcbiAgICAgICAgICB0ZW1wU2NvcmUgPSBzO1xuICAgICAgICAgIG1pblBvcyA9IGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtaW5Qb3M7XG4gICAgfTtcblxuICAgIHZhciBjeSA9IHRoaXMuX3ByaXZhdGUuY3k7XG5cbiAgICAvLyByb290IC0gbWFuZGF0b3J5IVxuICAgIGlmKCBvcHRpb25zICE9IG51bGwgJiYgb3B0aW9ucy5yb290ICE9IG51bGwgKXtcbiAgICAgIHZhciBzb3VyY2UgPSBpcy5zdHJpbmcoIG9wdGlvbnMucm9vdCApID9cbiAgICAgICAgLy8gdXNlIGl0IGFzIGEgc2VsZWN0b3IsIGUuZy4gXCIjcm9vdElEXG4gICAgICAgIHRoaXMuZmlsdGVyKCBvcHRpb25zLnJvb3QgKVswXSA6XG4gICAgICAgIG9wdGlvbnMucm9vdFswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBnb2FsIC0gbWFuZGF0b3J5IVxuICAgIGlmKCBvcHRpb25zLmdvYWwgIT0gbnVsbCApe1xuICAgICAgdmFyIHRhcmdldCA9IGlzLnN0cmluZyggb3B0aW9ucy5nb2FsICkgP1xuICAgICAgICAvLyB1c2UgaXQgYXMgYSBzZWxlY3RvciwgZS5nLiBcIiNnb2FsSURcbiAgICAgICAgdGhpcy5maWx0ZXIoIG9wdGlvbnMuZ29hbCApWzBdIDpcbiAgICAgICAgb3B0aW9ucy5nb2FsWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIEhldXJpc3RpYyBmdW5jdGlvbiAtIG9wdGlvbmFsXG4gICAgaWYoIG9wdGlvbnMuaGV1cmlzdGljICE9IG51bGwgJiYgaXMuZm4oIG9wdGlvbnMuaGV1cmlzdGljICkgKXtcbiAgICAgIHZhciBoZXVyaXN0aWMgPSBvcHRpb25zLmhldXJpc3RpYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGhldXJpc3RpYyA9IGZ1bmN0aW9uKCl7IHJldHVybiAwOyB9OyAvLyB1c2UgY29uc3RhbnQgaWYgdW5zcGVjaWZpZWRcbiAgICB9XG5cbiAgICAvLyBXZWlnaHQgZnVuY3Rpb24gLSBvcHRpb25hbFxuICAgIGlmKCBvcHRpb25zLndlaWdodCAhPSBudWxsICYmIGlzLmZuKCBvcHRpb25zLndlaWdodCApICl7XG4gICAgICB2YXIgd2VpZ2h0Rm4gPSBvcHRpb25zLndlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgbm90IHNwZWNpZmllZCwgYXNzdW1lIGVhY2ggZWRnZSBoYXMgZXF1YWwgd2VpZ2h0ICgxKVxuICAgICAgdmFyIHdlaWdodEZuID0gZnVuY3Rpb24oIGUgKXtyZXR1cm4gMTt9O1xuICAgIH1cblxuICAgIC8vIGRpcmVjdGVkIC0gb3B0aW9uYWxcbiAgICBpZiggb3B0aW9ucy5kaXJlY3RlZCAhPSBudWxsICl7XG4gICAgICB2YXIgZGlyZWN0ZWQgPSBvcHRpb25zLmRpcmVjdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGlyZWN0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgY2xvc2VkU2V0ID0gW107XG4gICAgdmFyIG9wZW5TZXQgPSBbIHNvdXJjZS5pZCgpIF07XG4gICAgdmFyIGNhbWVGcm9tID0ge307XG4gICAgdmFyIGNhbWVGcm9tRWRnZSA9IHt9O1xuICAgIHZhciBnU2NvcmUgPSB7fTtcbiAgICB2YXIgZlNjb3JlID0ge307XG5cbiAgICBnU2NvcmVbIHNvdXJjZS5pZCgpIF0gPSAwO1xuICAgIGZTY29yZVsgc291cmNlLmlkKCkgXSA9IGhldXJpc3RpYyggc291cmNlICk7XG5cbiAgICB2YXIgZWRnZXMgPSB0aGlzLmVkZ2VzKCkuc3RkRmlsdGVyKCBmdW5jdGlvbiggZSApeyByZXR1cm4gIWUuaXNMb29wKCk7IH0gKTtcbiAgICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzKCk7XG5cbiAgICAvLyBDb3VudGVyXG4gICAgdmFyIHN0ZXBzID0gMDtcblxuICAgIC8vIE1haW4gbG9vcFxuICAgIHdoaWxlKCBvcGVuU2V0Lmxlbmd0aCA+IDAgKXtcbiAgICAgIHZhciBtaW5Qb3MgPSBmaW5kTWluKCBvcGVuU2V0LCBmU2NvcmUgKTtcbiAgICAgIHZhciBjTWluID0gY3kuZ2V0RWxlbWVudEJ5SWQoIG9wZW5TZXRbIG1pblBvcyBdICk7XG4gICAgICBzdGVwcysrO1xuXG4gICAgICAvLyBJZiB3ZSd2ZSBmb3VuZCBvdXIgZ29hbCwgdGhlbiB3ZSBhcmUgZG9uZVxuICAgICAgaWYoIGNNaW4uaWQoKSA9PSB0YXJnZXQuaWQoKSApe1xuICAgICAgICB2YXIgclBhdGggPSByZWNvbnN0cnVjdFBhdGgoIHNvdXJjZS5pZCgpLCB0YXJnZXQuaWQoKSwgY2FtZUZyb20sIFtdICk7XG4gICAgICAgIHJQYXRoLnJldmVyc2UoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBmb3VuZDogdHJ1ZSxcbiAgICAgICAgICBkaXN0YW5jZTogZ1Njb3JlWyBjTWluLmlkKCkgXSxcbiAgICAgICAgICBwYXRoOiBlbGVzLnNwYXduKCByUGF0aCApLFxuICAgICAgICAgIHN0ZXBzOiBzdGVwc1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgY01pbiB0byBwcm9jZXNzZWQgbm9kZXNcbiAgICAgIGNsb3NlZFNldC5wdXNoKCBjTWluLmlkKCkgKTtcbiAgICAgIC8vIFJlbW92ZSBjTWluIGZyb20gYm91bmRhcnkgbm9kZXNcbiAgICAgIG9wZW5TZXQuc3BsaWNlKCBtaW5Qb3MsIDEgKTtcblxuICAgICAgLy8gVXBkYXRlIHNjb3JlcyBmb3IgbmVpZ2hib3JzIG9mIGNNaW5cbiAgICAgIC8vIFRha2UgaW50byBhY2NvdW50IGlmIGdyYXBoIGlzIGRpcmVjdGVkIG9yIG5vdFxuICAgICAgdmFyIHZ3RWRnZXMgPSBjTWluLmNvbm5lY3RlZEVkZ2VzKCk7XG4gICAgICBpZiggZGlyZWN0ZWQgKXsgdndFZGdlcyA9IHZ3RWRnZXMuc3RkRmlsdGVyKCBmdW5jdGlvbiggZWxlICl7IHJldHVybiBlbGUuZGF0YSggJ3NvdXJjZScgKSA9PT0gY01pbi5pZCgpOyB9ICk7IH1cbiAgICAgIHZ3RWRnZXMgPSB2d0VkZ2VzLmludGVyc2VjdCggZWRnZXMgKTtcblxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCB2d0VkZ2VzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBlID0gdndFZGdlc1sgaSBdO1xuICAgICAgICB2YXIgdyA9IGUuY29ubmVjdGVkTm9kZXMoKS5zdGRGaWx0ZXIoIGZ1bmN0aW9uKCBuICl7IHJldHVybiBuLmlkKCkgIT09IGNNaW4uaWQoKTsgfSApLmludGVyc2VjdCggbm9kZXMgKTtcblxuICAgICAgICAvLyBpZiBub2RlIGlzIGluIGNsb3NlZFNldCwgaWdub3JlIGl0XG4gICAgICAgIGlmKCBjbG9zZWRTZXQuaW5kZXhPZiggdy5pZCgpICkgIT0gLTEgKXtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5ldyB0ZW50YXRpdmUgc2NvcmUgZm9yIG5vZGUgd1xuICAgICAgICB2YXIgdGVtcFNjb3JlID0gZ1Njb3JlWyBjTWluLmlkKCkgXSArIHdlaWdodEZuLmFwcGx5KCBlLCBbIGUgXSApO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBnU2NvcmUgZm9yIG5vZGUgdyBpZjpcbiAgICAgICAgLy8gICB3IG5vdCBwcmVzZW50IGluIG9wZW5TZXRcbiAgICAgICAgLy8gT1JcbiAgICAgICAgLy8gICB0ZW50YXRpdmUgZ1Njb3JlIGlzIGxlc3MgdGhhbiBwcmV2aW91cyB2YWx1ZVxuXG4gICAgICAgIC8vIHcgbm90IGluIG9wZW5TZXRcbiAgICAgICAgaWYoIG9wZW5TZXQuaW5kZXhPZiggdy5pZCgpICkgPT0gLTEgKXtcbiAgICAgICAgICBnU2NvcmVbIHcuaWQoKSBdID0gdGVtcFNjb3JlO1xuICAgICAgICAgIGZTY29yZVsgdy5pZCgpIF0gPSB0ZW1wU2NvcmUgKyBoZXVyaXN0aWMoIHcgKTtcbiAgICAgICAgICBvcGVuU2V0LnB1c2goIHcuaWQoKSApOyAvLyBBZGQgbm9kZSB0byBvcGVuU2V0XG4gICAgICAgICAgY2FtZUZyb21bIHcuaWQoKSBdID0gY01pbi5pZCgpO1xuICAgICAgICAgIGNhbWVGcm9tRWRnZVsgdy5pZCgpIF0gPSBlLmlkKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdyBhbHJlYWR5IGluIG9wZW5TZXQsIGJ1dCB3aXRoIGdyZWF0ZXIgZ1Njb3JlXG4gICAgICAgIGlmKCB0ZW1wU2NvcmUgPCBnU2NvcmVbIHcuaWQoKSBdICl7XG4gICAgICAgICAgZ1Njb3JlWyB3LmlkKCkgXSA9IHRlbXBTY29yZTtcbiAgICAgICAgICBmU2NvcmVbIHcuaWQoKSBdID0gdGVtcFNjb3JlICsgaGV1cmlzdGljKCB3ICk7XG4gICAgICAgICAgY2FtZUZyb21bIHcuaWQoKSBdID0gY01pbi5pZCgpO1xuICAgICAgICB9XG5cbiAgICAgIH0gLy8gRW5kIG9mIG5laWdoYm9ycyB1cGRhdGVcblxuICAgIH0gLy8gRW5kIG9mIG1haW4gbG9vcFxuXG4gICAgLy8gSWYgd2UndmUgcmVhY2hlZCBoZXJlLCB0aGVuIHdlJ3ZlIG5vdCByZWFjaGVkIG91ciBnb2FsXG4gICAgcmV0dXJuIHtcbiAgICAgIGZvdW5kOiBmYWxzZSxcbiAgICAgIGRpc3RhbmNlOiB1bmRlZmluZWQsXG4gICAgICBwYXRoOiB1bmRlZmluZWQsXG4gICAgICBzdGVwczogc3RlcHNcbiAgICB9O1xuICB9XG5cbn0pOyAvLyBlbGVzZm5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGVsZXNmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzID0gcmVxdWlyZSggJy4uLy4uL2lzJyApO1xudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vLi4vdXRpbCcgKTtcblxudmFyIGVsZXNmbiA9ICh7XG5cbiAgLy8gSW1wbGVtZW50ZWQgZnJvbSBwc2V1ZG9jb2RlIGZyb20gd2lraXBlZGlhXG4gIGJlbGxtYW5Gb3JkOiBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAgIHZhciBlbGVzID0gdGhpcztcblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgLy8gV2VpZ2h0IGZ1bmN0aW9uIC0gb3B0aW9uYWxcbiAgICBpZiggb3B0aW9ucy53ZWlnaHQgIT0gbnVsbCAmJiBpcy5mbiggb3B0aW9ucy53ZWlnaHQgKSApe1xuICAgICAgdmFyIHdlaWdodEZuID0gb3B0aW9ucy53ZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIG5vdCBzcGVjaWZpZWQsIGFzc3VtZSBlYWNoIGVkZ2UgaGFzIGVxdWFsIHdlaWdodCAoMSlcbiAgICAgIHZhciB3ZWlnaHRGbiA9IGZ1bmN0aW9uKCBlICl7cmV0dXJuIDE7fTtcbiAgICB9XG5cbiAgICAvLyBkaXJlY3RlZCAtIG9wdGlvbmFsXG4gICAgaWYoIG9wdGlvbnMuZGlyZWN0ZWQgIT0gbnVsbCApe1xuICAgICAgdmFyIGRpcmVjdGVkID0gb3B0aW9ucy5kaXJlY3RlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGRpcmVjdGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gcm9vdCAtIG1hbmRhdG9yeSFcbiAgICBpZiggb3B0aW9ucy5yb290ICE9IG51bGwgKXtcbiAgICAgIGlmKCBpcy5zdHJpbmcoIG9wdGlvbnMucm9vdCApICl7XG4gICAgICAgIC8vIHVzZSBpdCBhcyBhIHNlbGVjdG9yLCBlLmcuIFwiI3Jvb3RJRFxuICAgICAgICB2YXIgc291cmNlID0gdGhpcy5maWx0ZXIoIG9wdGlvbnMucm9vdCApWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IG9wdGlvbnMucm9vdFswXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgY3kgPSB0aGlzLl9wcml2YXRlLmN5O1xuICAgIHZhciBlZGdlcyA9IHRoaXMuZWRnZXMoKS5zdGRGaWx0ZXIoIGZ1bmN0aW9uKCBlICl7IHJldHVybiAhZS5pc0xvb3AoKTsgfSApO1xuICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXMoKTtcbiAgICB2YXIgbnVtTm9kZXMgPSBub2Rlcy5sZW5ndGg7XG5cbiAgICAvLyBtYXBwaW5nOiBub2RlIGlkIC0+IHBvc2l0aW9uIGluIG5vZGVzIGFycmF5XG4gICAgdmFyIGlkMnBvc2l0aW9uID0ge307XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBudW1Ob2RlczsgaSsrICl7XG4gICAgICBpZDJwb3NpdGlvblsgbm9kZXNbIGkgXS5pZCgpIF0gPSBpO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemF0aW9uc1xuICAgIHZhciBjb3N0ID0gW107XG4gICAgdmFyIHByZWRlY2Vzc29yID0gW107XG4gICAgdmFyIHByZWRFZGdlID0gW107XG5cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IG51bU5vZGVzOyBpKysgKXtcbiAgICAgIGlmKCBub2Rlc1sgaSBdLmlkKCkgPT09IHNvdXJjZS5pZCgpICl7XG4gICAgICAgIGNvc3RbIGkgXSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb3N0WyBpIF0gPSBJbmZpbml0eTtcbiAgICAgIH1cbiAgICAgIHByZWRlY2Vzc29yWyBpIF0gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gRWRnZXMgcmVsYXhhdGlvblxuICAgIHZhciBmbGFnID0gZmFsc2U7XG4gICAgZm9yKCB2YXIgaSA9IDE7IGkgPCBudW1Ob2RlczsgaSsrICl7XG4gICAgICBmbGFnID0gZmFsc2U7XG4gICAgICBmb3IoIHZhciBlID0gMDsgZSA8IGVkZ2VzLmxlbmd0aDsgZSsrICl7XG4gICAgICAgIHZhciBzb3VyY2VJbmRleCA9IGlkMnBvc2l0aW9uWyBlZGdlc1sgZSBdLnNvdXJjZSgpLmlkKCkgXTtcbiAgICAgICAgdmFyIHRhcmdldEluZGV4ID0gaWQycG9zaXRpb25bIGVkZ2VzWyBlIF0udGFyZ2V0KCkuaWQoKSBdO1xuICAgICAgICB2YXIgd2VpZ2h0ID0gd2VpZ2h0Rm4uYXBwbHkoIGVkZ2VzWyBlIF0sIFsgZWRnZXNbIGUgXSBdICk7XG5cbiAgICAgICAgdmFyIHRlbXAgPSBjb3N0WyBzb3VyY2VJbmRleCBdICsgd2VpZ2h0O1xuICAgICAgICBpZiggdGVtcCA8IGNvc3RbIHRhcmdldEluZGV4IF0gKXtcbiAgICAgICAgICBjb3N0WyB0YXJnZXRJbmRleCBdID0gdGVtcDtcbiAgICAgICAgICBwcmVkZWNlc3NvclsgdGFyZ2V0SW5kZXggXSA9IHNvdXJjZUluZGV4O1xuICAgICAgICAgIHByZWRFZGdlWyB0YXJnZXRJbmRleCBdID0gZWRnZXNbIGUgXTtcbiAgICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHVuZGlyZWN0ZWQgZ3JhcGgsIHdlIG5lZWQgdG8gdGFrZSBpbnRvIGFjY291bnQgdGhlICdyZXZlcnNlJyBlZGdlXG4gICAgICAgIGlmKCAhZGlyZWN0ZWQgKXtcbiAgICAgICAgICB2YXIgdGVtcCA9IGNvc3RbIHRhcmdldEluZGV4IF0gKyB3ZWlnaHQ7XG4gICAgICAgICAgaWYoIHRlbXAgPCBjb3N0WyBzb3VyY2VJbmRleCBdICl7XG4gICAgICAgICAgICBjb3N0WyBzb3VyY2VJbmRleCBdID0gdGVtcDtcbiAgICAgICAgICAgIHByZWRlY2Vzc29yWyBzb3VyY2VJbmRleCBdID0gdGFyZ2V0SW5kZXg7XG4gICAgICAgICAgICBwcmVkRWRnZVsgc291cmNlSW5kZXggXSA9IGVkZ2VzWyBlIF07XG4gICAgICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYoICFmbGFnICl7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmKCBmbGFnICl7XG4gICAgICAvLyBDaGVjayBmb3IgbmVnYXRpdmUgd2VpZ2h0IGN5Y2xlc1xuICAgICAgZm9yKCB2YXIgZSA9IDA7IGUgPCBlZGdlcy5sZW5ndGg7IGUrKyApe1xuICAgICAgICB2YXIgc291cmNlSW5kZXggPSBpZDJwb3NpdGlvblsgZWRnZXNbIGUgXS5zb3VyY2UoKS5pZCgpIF07XG4gICAgICAgIHZhciB0YXJnZXRJbmRleCA9IGlkMnBvc2l0aW9uWyBlZGdlc1sgZSBdLnRhcmdldCgpLmlkKCkgXTtcbiAgICAgICAgdmFyIHdlaWdodCA9IHdlaWdodEZuLmFwcGx5KCBlZGdlc1sgZSBdLCBbIGVkZ2VzWyBlIF0gXSApO1xuXG4gICAgICAgIGlmKCBjb3N0WyBzb3VyY2VJbmRleCBdICsgd2VpZ2h0IDwgY29zdFsgdGFyZ2V0SW5kZXggXSApe1xuICAgICAgICAgIHV0aWwuZXJyb3IoICdHcmFwaCBjb250YWlucyBhIG5lZ2F0aXZlIHdlaWdodCBjeWNsZSBmb3IgQmVsbG1hbi1Gb3JkJyApO1xuICAgICAgICAgIHJldHVybiB7IHBhdGhUbzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgZGlzdGFuY2VUbzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgaGFzTmVnYXRpdmVXZWlnaHRDeWNsZTogdHJ1ZX07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBCdWlsZCByZXN1bHQgb2JqZWN0XG4gICAgdmFyIHBvc2l0aW9uMmlkID0gW107XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBudW1Ob2RlczsgaSsrICl7XG4gICAgICBwb3NpdGlvbjJpZC5wdXNoKCBub2Rlc1sgaSBdLmlkKCkgKTtcbiAgICB9XG5cblxuICAgIHZhciByZXMgPSB7XG4gICAgICBkaXN0YW5jZVRvOiBmdW5jdGlvbiggdG8gKXtcbiAgICAgICAgaWYoIGlzLnN0cmluZyggdG8gKSApe1xuICAgICAgICAgIC8vIHRvIGlzIGEgc2VsZWN0b3Igc3RyaW5nXG4gICAgICAgICAgdmFyIHRvSWQgPSAoY3kuZmlsdGVyKCB0byApWzBdKS5pZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHRvIGlzIGEgbm9kZVxuICAgICAgICAgIHZhciB0b0lkID0gdG8uaWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb3N0WyBpZDJwb3NpdGlvblsgdG9JZCBdIF07XG4gICAgICB9LFxuXG4gICAgICBwYXRoVG86IGZ1bmN0aW9uKCB0byApe1xuXG4gICAgICAgIHZhciByZWNvbnN0cnVjdFBhdGhBdXggPSBmdW5jdGlvbiggcHJlZGVjZXNzb3IsIGZyb21Qb3MsIHRvUG9zLCBwb3NpdGlvbjJpZCwgYWN1bVBhdGgsIHByZWRFZGdlICl7XG4gICAgICAgICAgZm9yKCA7OyApe1xuICAgICAgICAgICAgLy8gQWRkIHRvSWQgdG8gcGF0aFxuICAgICAgICAgICAgYWN1bVBhdGgucHVzaCggY3kuZ2V0RWxlbWVudEJ5SWQoIHBvc2l0aW9uMmlkWyB0b1BvcyBdICkgKTtcbiAgICAgICAgICAgIGFjdW1QYXRoLnB1c2goIHByZWRFZGdlWyB0b1BvcyBdICk7XG5cbiAgICAgICAgICAgIGlmKCBmcm9tUG9zID09PSB0b1BvcyApe1xuICAgICAgICAgICAgICAvLyByZWFjaGVkIHN0YXJ0aW5nIG5vZGVcbiAgICAgICAgICAgICAgcmV0dXJuIGFjdW1QYXRoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBubyBwYXRoIGV4aXN0cywgZGlzY2FydCBhY3VtdWxhdGVkIHBhdGggYW5kIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgICAgIHZhciBwcmVkUG9zID0gcHJlZGVjZXNzb3JbIHRvUG9zIF07XG4gICAgICAgICAgICBpZiggdHlwZW9mIHByZWRQb3MgPT09ICd1bmRlZmluZWQnICl7XG4gICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvUG9zID0gcHJlZFBvcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgICAgICBpZiggaXMuc3RyaW5nKCB0byApICl7XG4gICAgICAgICAgLy8gdG8gaXMgYSBzZWxlY3RvciBzdHJpbmdcbiAgICAgICAgICB2YXIgdG9JZCA9IChjeS5maWx0ZXIoIHRvIClbMF0pLmlkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdG8gaXMgYSBub2RlXG4gICAgICAgICAgdmFyIHRvSWQgPSB0by5pZCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXRoID0gW107XG5cbiAgICAgICAgLy8gVGhpcyByZXR1cm5zIGEgcmV2ZXJzZWQgcGF0aFxuICAgICAgICB2YXIgcmVzID0gIHJlY29uc3RydWN0UGF0aEF1eCggcHJlZGVjZXNzb3IsXG4gICAgICAgICAgICAgICAgICAgICAgaWQycG9zaXRpb25bIHNvdXJjZS5pZCgpIF0sXG4gICAgICAgICAgICAgICAgICAgICAgaWQycG9zaXRpb25bIHRvSWQgXSxcbiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjJpZCxcbiAgICAgICAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgICAgICAgIHByZWRFZGdlICk7XG5cbiAgICAgICAgLy8gR2V0IGl0IGluIHRoZSBjb3JyZWN0IG9yZGVyIGFuZCByZXR1cm4gaXRcbiAgICAgICAgaWYoIHJlcyAhPSBudWxsICl7XG4gICAgICAgICAgcmVzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVzLnNwYXduKCByZXMgKTtcbiAgICAgIH0sXG5cbiAgICAgIGhhc05lZ2F0aXZlV2VpZ2h0Q3ljbGU6IGZhbHNlXG4gICAgfTtcblxuICAgIHJldHVybiByZXM7XG5cbiAgfSAvLyBiZWxsbWFuRm9yZFxuXG59KTsgLy8gZWxlc2ZuXG5cbm1vZHVsZS5leHBvcnRzID0gZWxlc2ZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXMgPSByZXF1aXJlKCAnLi4vLi4vaXMnICk7XG52YXIgSGVhcCA9IHJlcXVpcmUoICcuLi8uLi9oZWFwJyApO1xuXG52YXIgZWxlc2ZuID0gKHtcblxuICAvLyBJbXBsZW1lbnRlZCBmcm9tIHRoZSBhbGdvcml0aG0gaW4gdGhlIHBhcGVyIFwiT24gVmFyaWFudHMgb2YgU2hvcnRlc3QtUGF0aCBCZXR3ZWVubmVzcyBDZW50cmFsaXR5IGFuZCB0aGVpciBHZW5lcmljIENvbXB1dGF0aW9uXCIgYnkgVWxyaWsgQnJhbmRlc1xuICBiZXR3ZWVubmVzc0NlbnRyYWxpdHk6IGZ1bmN0aW9uKCBvcHRpb25zICl7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvLyBXZWlnaHQgLSBvcHRpb25hbFxuICAgIHZhciB3ZWlnaHRlZCwgd2VpZ2h0Rm47XG4gICAgaWYoIGlzLmZuKCBvcHRpb25zLndlaWdodCApICl7XG4gICAgICB3ZWlnaHRGbiA9IG9wdGlvbnMud2VpZ2h0O1xuICAgICAgd2VpZ2h0ZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB3ZWlnaHRlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIERpcmVjdGVkIC0gZGVmYXVsdCBmYWxzZVxuICAgIHZhciBkaXJlY3RlZCA9IG9wdGlvbnMuZGlyZWN0ZWQgIT0gbnVsbCA/IG9wdGlvbnMuZGlyZWN0ZWQgOiBmYWxzZTtcblxuICAgIHZhciBjeSA9IHRoaXMuX3ByaXZhdGUuY3k7XG5cbiAgICAvLyBzdGFydGluZ1xuICAgIHZhciBWID0gdGhpcy5ub2RlcygpO1xuICAgIHZhciBBID0ge307XG4gICAgdmFyIF9DID0ge307XG4gICAgdmFyIG1heCA9IDA7XG4gICAgdmFyIEMgPSB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uKCBrZXksIHZhbCApe1xuICAgICAgICBfQ1sga2V5IF0gPSB2YWw7XG5cbiAgICAgICAgaWYoIHZhbCA+IG1heCApeyBtYXggPSB2YWw7IH1cbiAgICAgIH0sXG5cbiAgICAgIGdldDogZnVuY3Rpb24oIGtleSApeyByZXR1cm4gX0NbIGtleSBdOyB9XG4gICAgfTtcblxuICAgIC8vIEEgY29udGFpbnMgdGhlIG5laWdoYm9yaG9vZHMgb2YgZXZlcnkgbm9kZVxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgVi5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIHYgPSBWWyBpIF07XG4gICAgICB2YXIgdmlkID0gdi5pZCgpO1xuXG4gICAgICBpZiggZGlyZWN0ZWQgKXtcbiAgICAgICAgQVsgdmlkIF0gPSB2Lm91dGdvZXJzKCkubm9kZXMoKTsgLy8gZ2V0IG91dGdvZXJzIG9mIGV2ZXJ5IG5vZGVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEFbIHZpZCBdID0gdi5vcGVuTmVpZ2hib3Job29kKCkubm9kZXMoKTsgLy8gZ2V0IG5laWdoYm9ycyBvZiBldmVyeSBub2RlXG4gICAgICB9XG5cbiAgICAgIEMuc2V0KCB2aWQsIDAgKTtcbiAgICB9XG5cbiAgICBmb3IoIHZhciBzID0gMDsgcyA8IFYubGVuZ3RoOyBzKysgKXtcbiAgICAgIHZhciBzaWQgPSBWW3NdLmlkKCk7XG4gICAgICB2YXIgUyA9IFtdOyAvLyBzdGFja1xuICAgICAgdmFyIFAgPSB7fTtcbiAgICAgIHZhciBnID0ge307XG4gICAgICB2YXIgZCA9IHt9O1xuICAgICAgdmFyIFEgPSBuZXcgSGVhcChmdW5jdGlvbiggYSwgYiApe1xuICAgICAgICByZXR1cm4gZFthXSAtIGRbYl07XG4gICAgICB9KTsgLy8gcXVldWVcblxuICAgICAgLy8gaW5pdCBkaWN0aW9uYXJpZXNcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgVi5sZW5ndGg7IGkrKyApe1xuICAgICAgICB2YXIgdmlkID0gVlsgaSBdLmlkKCk7XG5cbiAgICAgICAgUFsgdmlkIF0gPSBbXTtcbiAgICAgICAgZ1sgdmlkIF0gPSAwO1xuICAgICAgICBkWyB2aWQgXSA9IEluZmluaXR5O1xuICAgICAgfVxuXG4gICAgICBnWyBzaWQgXSA9IDE7IC8vIHNpZ21hXG4gICAgICBkWyBzaWQgXSA9IDA7IC8vIGRpc3RhbmNlIHRvIHNcblxuICAgICAgUS5wdXNoKCBzaWQgKTtcblxuICAgICAgd2hpbGUoICFRLmVtcHR5KCkgKXtcbiAgICAgICAgdmFyIHYgPSBRLnBvcCgpO1xuXG4gICAgICAgIFMucHVzaCggdiApO1xuXG4gICAgICAgIGlmKCB3ZWlnaHRlZCApe1xuICAgICAgICAgIGZvciggdmFyIGogPSAwOyBqIDwgQVt2XS5sZW5ndGg7IGorKyApe1xuICAgICAgICAgICAgdmFyIHcgPSBBW3ZdW2pdO1xuICAgICAgICAgICAgdmFyIHZFbGUgPSBjeS5nZXRFbGVtZW50QnlJZCggdiApO1xuXG4gICAgICAgICAgICB2YXIgZWRnZTtcbiAgICAgICAgICAgIGlmKCB2RWxlLmVkZ2VzVG8oIHcgKS5sZW5ndGggPiAwICl7XG4gICAgICAgICAgICAgIGVkZ2UgPSB2RWxlLmVkZ2VzVG8oIHcgKVswXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVkZ2UgPSB3LmVkZ2VzVG8oIHZFbGUgKVswXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGVkZ2VXZWlnaHQgPSB3ZWlnaHRGbi5hcHBseSggZWRnZSwgWyBlZGdlIF0gKTtcblxuICAgICAgICAgICAgdyA9IHcuaWQoKTtcblxuICAgICAgICAgICAgaWYoIGRbd10gPiBkW3ZdICsgZWRnZVdlaWdodCApe1xuICAgICAgICAgICAgICBkW3ddID0gZFt2XSArIGVkZ2VXZWlnaHQ7XG5cbiAgICAgICAgICAgICAgaWYoIFEubm9kZXMuaW5kZXhPZiggdyApIDwgMCApeyAvL2lmIHcgaXMgbm90IGluIFFcbiAgICAgICAgICAgICAgICBRLnB1c2goIHcgKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gdXBkYXRlIHBvc2l0aW9uIGlmIHcgaXMgaW4gUVxuICAgICAgICAgICAgICAgIFEudXBkYXRlSXRlbSggdyApO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZ1t3XSA9IDA7XG4gICAgICAgICAgICAgIFBbd10gPSBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIGRbd10gPT0gZFt2XSArIGVkZ2VXZWlnaHQgKXtcbiAgICAgICAgICAgICAgZ1t3XSA9IGdbd10gKyBnW3ZdO1xuICAgICAgICAgICAgICBQW3ddLnB1c2goIHYgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBBW3ZdLmxlbmd0aDsgaisrICl7XG4gICAgICAgICAgICB2YXIgdyA9IEFbdl1bal0uaWQoKTtcblxuICAgICAgICAgICAgaWYoIGRbd10gPT0gSW5maW5pdHkgKXtcbiAgICAgICAgICAgICAgUS5wdXNoKCB3ICk7XG5cbiAgICAgICAgICAgICAgZFt3XSA9IGRbdl0gKyAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiggZFt3XSA9PSBkW3ZdICsgMSApe1xuICAgICAgICAgICAgICBnW3ddID0gZ1t3XSArIGdbdl07XG4gICAgICAgICAgICAgIFBbd10ucHVzaCggdiApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZSA9IHt9O1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBWLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIGVbIFZbIGkgXS5pZCgpIF0gPSAwO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSggUy5sZW5ndGggPiAwICl7XG4gICAgICAgIHZhciB3ID0gUy5wb3AoKTtcblxuICAgICAgICBmb3IoIHZhciBqID0gMDsgaiA8IFBbd10ubGVuZ3RoOyBqKysgKXtcbiAgICAgICAgICB2YXIgdiA9IFBbd11bal07XG5cbiAgICAgICAgICBlW3ZdID0gZVt2XSArIChnW3ZdIC8gZ1t3XSkgKiAoMSArIGVbd10pO1xuXG4gICAgICAgICAgaWYoIHcgIT0gVltzXS5pZCgpICl7XG4gICAgICAgICAgICBDLnNldCggdywgQy5nZXQoIHcgKSArIGVbd10gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmV0ID0ge1xuICAgICAgYmV0d2Vlbm5lc3M6IGZ1bmN0aW9uKCBub2RlICl7XG4gICAgICAgIGlmKCBpcy5zdHJpbmcoIG5vZGUgKSApe1xuICAgICAgICAgIHZhciBub2RlID0gY3kuZmlsdGVyKCBub2RlICkuaWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbm9kZSA9IG5vZGUuaWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBDLmdldCggbm9kZSApO1xuICAgICAgfSxcblxuICAgICAgYmV0d2Vlbm5lc3NOb3JtYWxpemVkOiBmdW5jdGlvbiggbm9kZSApe1xuICAgICAgICBpZiAoIG1heCA9PSAwIClcbiAgICAgICAgICByZXR1cm4gMDtcblxuICAgICAgICBpZiggaXMuc3RyaW5nKCBub2RlICkgKXtcbiAgICAgICAgICB2YXIgbm9kZSA9IGN5LmZpbHRlciggbm9kZSApLmlkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG5vZGUgPSBub2RlLmlkKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gQy5nZXQoIG5vZGUgKSAvIG1heDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gYWxpYXNcbiAgICByZXQuYmV0d2Vlbm5lc3NOb3JtYWxpc2VkID0gcmV0LmJldHdlZW5uZXNzTm9ybWFsaXplZDtcblxuICAgIHJldHVybiByZXQ7XG4gIH0gLy8gYmV0d2Vlbm5lc3NDZW50cmFsaXR5XG5cbn0pOyAvLyBlbGVzZm5cblxuLy8gbmljZSwgc2hvcnQgbWF0aGVtYXRoaWNhbCBhbGlhc1xuZWxlc2ZuLmJjID0gZWxlc2ZuLmJldHdlZW5uZXNzQ2VudHJhbGl0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbGVzZm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpcyA9IHJlcXVpcmUoICcuLi8uLi9pcycgKTtcblxudmFyIGRlZmluZVNlYXJjaCA9IGZ1bmN0aW9uKCBwYXJhbXMgKXtcbiAgcGFyYW1zID0ge1xuICAgIGJmczogcGFyYW1zLmJmcyB8fCAhcGFyYW1zLmRmcyxcbiAgICBkZnM6IHBhcmFtcy5kZnMgfHwgIXBhcmFtcy5iZnNcbiAgfTtcblxuICAvLyBmcm9tIHBzZXVkb2NvZGUgb24gd2lraXBlZGlhXG4gIHJldHVybiBmdW5jdGlvbiBzZWFyY2hGbiggcm9vdHMsIGZuLCBkaXJlY3RlZCApe1xuICAgIHZhciBvcHRpb25zO1xuICAgIHZhciBzdGQ7XG4gICAgdmFyIHRoaXNBcmc7XG4gICAgaWYoIGlzLnBsYWluT2JqZWN0KCByb290cyApICYmICFpcy5lbGVtZW50T3JDb2xsZWN0aW9uKCByb290cyApICl7XG4gICAgICBvcHRpb25zID0gcm9vdHM7XG4gICAgICByb290cyA9IG9wdGlvbnMucm9vdHMgfHwgb3B0aW9ucy5yb290O1xuICAgICAgZm4gPSBvcHRpb25zLnZpc2l0O1xuICAgICAgZGlyZWN0ZWQgPSBvcHRpb25zLmRpcmVjdGVkO1xuICAgICAgc3RkID0gb3B0aW9ucy5zdGQ7XG4gICAgICB0aGlzQXJnID0gb3B0aW9ucy50aGlzQXJnO1xuICAgIH1cblxuICAgIGRpcmVjdGVkID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiAhaXMuZm4oIGZuICkgPyBmbiA6IGRpcmVjdGVkO1xuICAgIGZuID0gaXMuZm4oIGZuICkgPyBmbiA6IGZ1bmN0aW9uKCl7fTtcblxuICAgIHZhciBjeSA9IHRoaXMuX3ByaXZhdGUuY3k7XG4gICAgdmFyIHYgPSByb290cyA9IGlzLnN0cmluZyggcm9vdHMgKSA/IHRoaXMuZmlsdGVyKCByb290cyApIDogcm9vdHM7XG4gICAgdmFyIFEgPSBbXTtcbiAgICB2YXIgY29ubmVjdGVkTm9kZXMgPSBbXTtcbiAgICB2YXIgY29ubmVjdGVkQnkgPSB7fTtcbiAgICB2YXIgaWQyZGVwdGggPSB7fTtcbiAgICB2YXIgViA9IHt9O1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIgZm91bmQ7XG4gICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcygpO1xuICAgIHZhciBlZGdlcyA9IHRoaXMuZWRnZXMoKTtcblxuICAgIC8vIGVucXVldWUgdlxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdi5sZW5ndGg7IGkrKyApe1xuICAgICAgaWYoIHZbIGkgXS5pc05vZGUoKSApe1xuICAgICAgICBRLnVuc2hpZnQoIHZbIGkgXSApO1xuXG4gICAgICAgIGlmKCBwYXJhbXMuYmZzICl7XG4gICAgICAgICAgVlsgdlsgaSBdLmlkKCkgXSA9IHRydWU7XG5cbiAgICAgICAgICBjb25uZWN0ZWROb2Rlcy5wdXNoKCB2WyBpIF0gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlkMmRlcHRoWyB2WyBpIF0uaWQoKSBdID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aGlsZSggUS5sZW5ndGggIT09IDAgKXtcbiAgICAgIHZhciB2ID0gcGFyYW1zLmJmcyA/IFEuc2hpZnQoKSA6IFEucG9wKCk7XG5cbiAgICAgIGlmKCBwYXJhbXMuZGZzICl7XG4gICAgICAgIGlmKCBWWyB2LmlkKCkgXSApeyBjb250aW51ZTsgfVxuXG4gICAgICAgIFZbIHYuaWQoKSBdID0gdHJ1ZTtcblxuICAgICAgICBjb25uZWN0ZWROb2Rlcy5wdXNoKCB2ICk7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZXB0aCA9IGlkMmRlcHRoWyB2LmlkKCkgXTtcbiAgICAgIHZhciBwcmV2RWRnZSA9IGNvbm5lY3RlZEJ5WyB2LmlkKCkgXTtcbiAgICAgIHZhciBwcmV2Tm9kZSA9IHByZXZFZGdlID09IG51bGwgPyB1bmRlZmluZWQgOiBwcmV2RWRnZS5jb25uZWN0ZWROb2RlcygpLm5vdCggdiApWzBdO1xuICAgICAgdmFyIHJldDtcblxuICAgICAgaWYoIHN0ZCApe1xuICAgICAgICByZXQgPSBmbi5jYWxsKCB0aGlzQXJnLCB2LCBwcmV2RWRnZSwgcHJldk5vZGUsIGorKywgZGVwdGggKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldCA9IGZuLmNhbGwoIHYsIGorKywgZGVwdGgsIHYsIHByZXZFZGdlLCBwcmV2Tm9kZSApO1xuICAgICAgfVxuXG4gICAgICBpZiggcmV0ID09PSB0cnVlICl7XG4gICAgICAgIGZvdW5kID0gdjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmKCByZXQgPT09IGZhbHNlICl7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB2YXIgdndFZGdlcyA9IHYuY29ubmVjdGVkRWRnZXMoIGRpcmVjdGVkID8gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuZGF0YSggJ3NvdXJjZScgKSA9PT0gdi5pZCgpOyB9IDogdW5kZWZpbmVkICkuaW50ZXJzZWN0KCBlZGdlcyApO1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCB2d0VkZ2VzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBlID0gdndFZGdlc1sgaSBdO1xuICAgICAgICB2YXIgdyA9IGUuY29ubmVjdGVkTm9kZXMoIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLmlkKCkgIT09IHYuaWQoKTsgfSApLmludGVyc2VjdCggbm9kZXMgKTtcblxuICAgICAgICBpZiggdy5sZW5ndGggIT09IDAgJiYgIVZbIHcuaWQoKSBdICl7XG4gICAgICAgICAgdyA9IHdbMF07XG5cbiAgICAgICAgICBRLnB1c2goIHcgKTtcblxuICAgICAgICAgIGlmKCBwYXJhbXMuYmZzICl7XG4gICAgICAgICAgICBWWyB3LmlkKCkgXSA9IHRydWU7XG5cbiAgICAgICAgICAgIGNvbm5lY3RlZE5vZGVzLnB1c2goIHcgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25uZWN0ZWRCeVsgdy5pZCgpIF0gPSBlO1xuXG4gICAgICAgICAgaWQyZGVwdGhbIHcuaWQoKSBdID0gaWQyZGVwdGhbIHYuaWQoKSBdICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgdmFyIGNvbm5lY3RlZEVsZXMgPSBbXTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgY29ubmVjdGVkTm9kZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBub2RlID0gY29ubmVjdGVkTm9kZXNbIGkgXTtcbiAgICAgIHZhciBlZGdlID0gY29ubmVjdGVkQnlbIG5vZGUuaWQoKSBdO1xuXG4gICAgICBpZiggZWRnZSApe1xuICAgICAgICBjb25uZWN0ZWRFbGVzLnB1c2goIGVkZ2UgKTtcbiAgICAgIH1cblxuICAgICAgY29ubmVjdGVkRWxlcy5wdXNoKCBub2RlICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IGN5LmNvbGxlY3Rpb24oIGNvbm5lY3RlZEVsZXMsIHsgdW5pcXVlOiB0cnVlIH0gKSxcbiAgICAgIGZvdW5kOiBjeS5jb2xsZWN0aW9uKCBmb3VuZCApXG4gICAgfTtcbiAgfTtcbn07XG5cbi8vIHNlYXJjaCwgc3Bhbm5pbmcgdHJlZXMsIGV0Y1xudmFyIGVsZXNmbiA9ICh7XG4gIGJyZWFkdGhGaXJzdFNlYXJjaDogZGVmaW5lU2VhcmNoKCB7IGJmczogdHJ1ZSB9ICksXG4gIGRlcHRoRmlyc3RTZWFyY2g6IGRlZmluZVNlYXJjaCggeyBkZnM6IHRydWUgfSApXG59KTtcblxuLy8gbmljZSwgc2hvcnQgbWF0aGVtYXRoaWNhbCBhbGlhc1xuZWxlc2ZuLmJmcyA9IGVsZXNmbi5icmVhZHRoRmlyc3RTZWFyY2g7XG5lbGVzZm4uZGZzID0gZWxlc2ZuLmRlcHRoRmlyc3RTZWFyY2g7XG5cbm1vZHVsZS5leHBvcnRzID0gZWxlc2ZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXMgPSByZXF1aXJlKCAnLi4vLi4vaXMnICk7XG5cbnZhciBlbGVzZm4gPSAoe1xuXG4gIGNsb3NlbmVzc0NlbnRyYWxpdHlOb3JtYWxpemVkOiBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgdmFyIGN5ID0gdGhpcy5jeSgpO1xuXG4gICAgdmFyIGhhcm1vbmljID0gb3B0aW9ucy5oYXJtb25pYztcbiAgICBpZiggaGFybW9uaWMgPT09IHVuZGVmaW5lZCApe1xuICAgICAgaGFybW9uaWMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjbG9zZW5lc3NlcyA9IHt9O1xuICAgIHZhciBtYXhDbG9zZW5lc3MgPSAwO1xuICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXMoKTtcbiAgICB2YXIgZncgPSB0aGlzLmZsb3lkV2Fyc2hhbGwoIHsgd2VpZ2h0OiBvcHRpb25zLndlaWdodCwgZGlyZWN0ZWQ6IG9wdGlvbnMuZGlyZWN0ZWQgfSApO1xuXG4gICAgLy8gQ29tcHV0ZSBjbG9zZW5lc3MgZm9yIGV2ZXJ5IG5vZGUgYW5kIGZpbmQgdGhlIG1heGltdW0gY2xvc2VuZXNzXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGN1cnJDbG9zZW5lc3MgPSAwO1xuICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBub2Rlcy5sZW5ndGg7IGorKyApe1xuICAgICAgICBpZiggaSAhPSBqICl7XG4gICAgICAgICAgdmFyIGQgPSBmdy5kaXN0YW5jZSggbm9kZXNbIGkgXSwgbm9kZXNbIGogXSApO1xuXG4gICAgICAgICAgaWYoIGhhcm1vbmljICl7XG4gICAgICAgICAgICBjdXJyQ2xvc2VuZXNzICs9IDEgLyBkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyQ2xvc2VuZXNzICs9IGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmKCAhaGFybW9uaWMgKXtcbiAgICAgICAgY3VyckNsb3NlbmVzcyA9IDEgLyBjdXJyQ2xvc2VuZXNzO1xuICAgICAgfVxuXG4gICAgICBpZiggbWF4Q2xvc2VuZXNzIDwgY3VyckNsb3NlbmVzcyApe1xuICAgICAgICBtYXhDbG9zZW5lc3MgPSBjdXJyQ2xvc2VuZXNzO1xuICAgICAgfVxuXG4gICAgICBjbG9zZW5lc3Nlc1sgbm9kZXNbIGkgXS5pZCgpIF0gPSBjdXJyQ2xvc2VuZXNzO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBjbG9zZW5lc3M6IGZ1bmN0aW9uKCBub2RlICl7XG4gICAgICAgIGlmKCBtYXhDbG9zZW5lc3MgPT0gMCApeyByZXR1cm4gMDsgfVxuXG4gICAgICAgIGlmKCBpcy5zdHJpbmcoIG5vZGUgKSApe1xuICAgICAgICAgIC8vIGZyb20gaXMgYSBzZWxlY3RvciBzdHJpbmdcbiAgICAgICAgICB2YXIgbm9kZSA9IChjeS5maWx0ZXIoIG5vZGUgKVswXSkuaWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBmcm9tIGlzIGEgbm9kZVxuICAgICAgICAgIHZhciBub2RlID0gbm9kZS5pZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsb3NlbmVzc2VzWyBub2RlIF0gLyBtYXhDbG9zZW5lc3M7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcblxuICAvLyBJbXBsZW1lbnRlZCBmcm9tIHBzZXVkb2NvZGUgZnJvbSB3aWtpcGVkaWFcbiAgY2xvc2VuZXNzQ2VudHJhbGl0eTogZnVuY3Rpb24oIG9wdGlvbnMgKXtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIHJvb3QgLSBtYW5kYXRvcnkhXG4gICAgaWYoIG9wdGlvbnMucm9vdCAhPSBudWxsICl7XG4gICAgICBpZiggaXMuc3RyaW5nKCBvcHRpb25zLnJvb3QgKSApe1xuICAgICAgICAvLyB1c2UgaXQgYXMgYSBzZWxlY3RvciwgZS5nLiBcIiNyb290SURcbiAgICAgICAgdmFyIHJvb3QgPSB0aGlzLmZpbHRlciggb3B0aW9ucy5yb290IClbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcm9vdCA9IG9wdGlvbnMucm9vdFswXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyB3ZWlnaHQgLSBvcHRpb25hbFxuICAgIGlmKCBvcHRpb25zLndlaWdodCAhPSBudWxsICYmIGlzLmZuKCBvcHRpb25zLndlaWdodCApICl7XG4gICAgICB2YXIgd2VpZ2h0ID0gb3B0aW9ucy53ZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB3ZWlnaHQgPSBmdW5jdGlvbigpe3JldHVybiAxO307XG4gICAgfVxuXG4gICAgLy8gZGlyZWN0ZWQgLSBvcHRpb25hbFxuICAgIGlmKCBvcHRpb25zLmRpcmVjdGVkICE9IG51bGwgJiYgaXMuYm9vbCggb3B0aW9ucy5kaXJlY3RlZCApICl7XG4gICAgICB2YXIgZGlyZWN0ZWQgPSBvcHRpb25zLmRpcmVjdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGlyZWN0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgaGFybW9uaWMgPSBvcHRpb25zLmhhcm1vbmljO1xuICAgIGlmKCBoYXJtb25pYyA9PT0gdW5kZWZpbmVkICl7XG4gICAgICBoYXJtb25pYyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gd2UgbmVlZCBkaXN0YW5jZSBmcm9tIHRoaXMgbm9kZSB0byBldmVyeSBvdGhlciBub2RlXG4gICAgdmFyIGRpamtzdHJhID0gdGhpcy5kaWprc3RyYSgge1xuICAgICAgcm9vdDogcm9vdCxcbiAgICAgIHdlaWdodDogd2VpZ2h0LFxuICAgICAgZGlyZWN0ZWQ6IGRpcmVjdGVkXG4gICAgfSApO1xuICAgIHZhciB0b3RhbERpc3RhbmNlID0gMDtcblxuICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXMoKTtcbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrICl7XG4gICAgICBpZiggbm9kZXNbIGkgXS5pZCgpICE9IHJvb3QuaWQoKSApe1xuICAgICAgICB2YXIgZCA9IGRpamtzdHJhLmRpc3RhbmNlVG8oIG5vZGVzWyBpIF0gKTtcblxuICAgICAgICBpZiggaGFybW9uaWMgKXtcbiAgICAgICAgICB0b3RhbERpc3RhbmNlICs9IDEgLyBkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvdGFsRGlzdGFuY2UgKz0gZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBoYXJtb25pYyA/IHRvdGFsRGlzdGFuY2UgOiAxIC8gdG90YWxEaXN0YW5jZTtcbiAgfSAvLyBjbG9zZW5lc3NDZW50cmFsaXR5XG5cbn0pOyAvLyBlbGVzZm5cblxuLy8gbmljZSwgc2hvcnQgbWF0aGVtYXRoaWNhbCBhbGlhc1xuZWxlc2ZuLmNjID0gZWxlc2ZuLmNsb3NlbmVzc0NlbnRyYWxpdHk7XG5lbGVzZm4uY2NuID0gZWxlc2ZuLmNsb3NlbmVzc0NlbnRyYWxpdHlOb3JtYWxpc2VkID0gZWxlc2ZuLmNsb3NlbmVzc0NlbnRyYWxpdHlOb3JtYWxpemVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVsZXNmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzID0gcmVxdWlyZSggJy4uLy4uL2lzJyApO1xudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vLi4vdXRpbCcgKTtcblxudmFyIGVsZXNmbiA9ICh7XG5cbiAgZGVncmVlQ2VudHJhbGl0eU5vcm1hbGl6ZWQ6IGZ1bmN0aW9uKCBvcHRpb25zICl7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICB2YXIgY3kgPSB0aGlzLmN5KCk7XG5cbiAgICAvLyBkaXJlY3RlZCAtIG9wdGlvbmFsXG4gICAgaWYoIG9wdGlvbnMuZGlyZWN0ZWQgIT0gbnVsbCApe1xuICAgICAgdmFyIGRpcmVjdGVkID0gb3B0aW9ucy5kaXJlY3RlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGRpcmVjdGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcygpO1xuICAgIHZhciBudW1Ob2RlcyA9IG5vZGVzLmxlbmd0aDtcblxuICAgIGlmKCAhZGlyZWN0ZWQgKXtcbiAgICAgIHZhciBkZWdyZWVzID0ge307XG4gICAgICB2YXIgbWF4RGVncmVlID0gMDtcblxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBudW1Ob2RlczsgaSsrICl7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbIGkgXTtcbiAgICAgICAgLy8gYWRkIGN1cnJlbnQgbm9kZSB0byB0aGUgY3VycmVudCBvcHRpb25zIG9iamVjdCBhbmQgY2FsbCBkZWdyZWVDZW50cmFsaXR5XG4gICAgICAgIHZhciBjdXJyRGVncmVlID0gdGhpcy5kZWdyZWVDZW50cmFsaXR5KCB1dGlsLmV4dGVuZCgge30sIG9wdGlvbnMsIHtyb290OiBub2RlfSApICk7XG4gICAgICAgIGlmKCBtYXhEZWdyZWUgPCBjdXJyRGVncmVlLmRlZ3JlZSApXG4gICAgICAgICAgbWF4RGVncmVlID0gY3VyckRlZ3JlZS5kZWdyZWU7XG5cbiAgICAgICAgZGVncmVlc1sgbm9kZS5pZCgpIF0gPSBjdXJyRGVncmVlLmRlZ3JlZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGVncmVlOiBmdW5jdGlvbiggbm9kZSApe1xuICAgICAgICAgIGlmKCBtYXhEZWdyZWUgPT0gMCApXG4gICAgICAgICAgICByZXR1cm4gMDtcblxuICAgICAgICAgIGlmKCBpcy5zdHJpbmcoIG5vZGUgKSApe1xuICAgICAgICAgICAgLy8gZnJvbSBpcyBhIHNlbGVjdG9yIHN0cmluZ1xuICAgICAgICAgICAgdmFyIG5vZGUgPSAoY3kuZmlsdGVyKCBub2RlIClbMF0pLmlkKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGZyb20gaXMgYSBub2RlXG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5vZGUuaWQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZGVncmVlc1sgbm9kZSBdIC8gbWF4RGVncmVlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaW5kZWdyZWVzID0ge307XG4gICAgICB2YXIgb3V0ZGVncmVlcyA9IHt9O1xuICAgICAgdmFyIG1heEluZGVncmVlID0gMDtcbiAgICAgIHZhciBtYXhPdXRkZWdyZWUgPSAwO1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IG51bU5vZGVzOyBpKysgKXtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1sgaSBdO1xuICAgICAgICAvLyBhZGQgY3VycmVudCBub2RlIHRvIHRoZSBjdXJyZW50IG9wdGlvbnMgb2JqZWN0IGFuZCBjYWxsIGRlZ3JlZUNlbnRyYWxpdHlcbiAgICAgICAgdmFyIGN1cnJEZWdyZWUgPSB0aGlzLmRlZ3JlZUNlbnRyYWxpdHkoIHV0aWwuZXh0ZW5kKCB7fSwgb3B0aW9ucywge3Jvb3Q6IG5vZGV9ICkgKTtcblxuICAgICAgICBpZiggbWF4SW5kZWdyZWUgPCBjdXJyRGVncmVlLmluZGVncmVlIClcbiAgICAgICAgICBtYXhJbmRlZ3JlZSA9IGN1cnJEZWdyZWUuaW5kZWdyZWU7XG5cbiAgICAgICAgaWYoIG1heE91dGRlZ3JlZSA8IGN1cnJEZWdyZWUub3V0ZGVncmVlIClcbiAgICAgICAgICBtYXhPdXRkZWdyZWUgPSBjdXJyRGVncmVlLm91dGRlZ3JlZTtcblxuICAgICAgICBpbmRlZ3JlZXNbIG5vZGUuaWQoKSBdID0gY3VyckRlZ3JlZS5pbmRlZ3JlZTtcbiAgICAgICAgb3V0ZGVncmVlc1sgbm9kZS5pZCgpIF0gPSBjdXJyRGVncmVlLm91dGRlZ3JlZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW5kZWdyZWU6IGZ1bmN0aW9uKCBub2RlICl7XG4gICAgICAgICAgaWYgKCBtYXhJbmRlZ3JlZSA9PSAwIClcbiAgICAgICAgICAgIHJldHVybiAwO1xuXG4gICAgICAgICAgaWYoIGlzLnN0cmluZyggbm9kZSApICl7XG4gICAgICAgICAgICAvLyBmcm9tIGlzIGEgc2VsZWN0b3Igc3RyaW5nXG4gICAgICAgICAgICB2YXIgbm9kZSA9IChjeS5maWx0ZXIoIG5vZGUgKVswXSkuaWQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZnJvbSBpcyBhIG5vZGVcbiAgICAgICAgICAgIHZhciBub2RlID0gbm9kZS5pZCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBpbmRlZ3JlZXNbIG5vZGUgXSAvIG1heEluZGVncmVlO1xuICAgICAgICB9LFxuICAgICAgICBvdXRkZWdyZWU6IGZ1bmN0aW9uKCBub2RlICl7XG4gICAgICAgICAgaWYgKCBtYXhPdXRkZWdyZWUgPT0gMCApXG4gICAgICAgICAgICByZXR1cm4gMDtcblxuICAgICAgICAgIGlmKCBpcy5zdHJpbmcoIG5vZGUgKSApe1xuICAgICAgICAgICAgLy8gZnJvbSBpcyBhIHNlbGVjdG9yIHN0cmluZ1xuICAgICAgICAgICAgdmFyIG5vZGUgPSAoY3kuZmlsdGVyKCBub2RlIClbMF0pLmlkKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGZyb20gaXMgYSBub2RlXG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5vZGUuaWQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gb3V0ZGVncmVlc1sgbm9kZSBdIC8gbWF4T3V0ZGVncmVlO1xuICAgICAgICB9XG5cbiAgICAgIH07XG4gICAgfVxuXG4gIH0sIC8vIGRlZ3JlZUNlbnRyYWxpdHlOb3JtYWxpemVkXG5cbiAgLy8gSW1wbGVtZW50ZWQgZnJvbSB0aGUgYWxnb3JpdGhtIGluIE9wc2FobCdzIHBhcGVyXG4gIC8vIFwiTm9kZSBjZW50cmFsaXR5IGluIHdlaWdodGVkIG5ldHdvcmtzOiBHZW5lcmFsaXppbmcgZGVncmVlIGFuZCBzaG9ydGVzdCBwYXRoc1wiXG4gIC8vIGNoZWNrIHRoZSBoZWFkaW5nIDIgXCJEZWdyZWVcIlxuICBkZWdyZWVDZW50cmFsaXR5OiBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgdmFyIGNhbGxpbmdFbGVzID0gdGhpcztcblxuICAgIC8vIHJvb3QgLSBtYW5kYXRvcnkhXG4gICAgaWYoIG9wdGlvbnMgIT0gbnVsbCAmJiBvcHRpb25zLnJvb3QgIT0gbnVsbCApe1xuICAgICAgdmFyIHJvb3QgPSBpcy5zdHJpbmcoIG9wdGlvbnMucm9vdCApID8gdGhpcy5maWx0ZXIoIG9wdGlvbnMucm9vdCApWzBdIDogb3B0aW9ucy5yb290WzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIHdlaWdodCAtIG9wdGlvbmFsXG4gICAgaWYoIG9wdGlvbnMud2VpZ2h0ICE9IG51bGwgJiYgaXMuZm4oIG9wdGlvbnMud2VpZ2h0ICkgKXtcbiAgICAgIHZhciB3ZWlnaHRGbiA9IG9wdGlvbnMud2VpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBub3Qgc3BlY2lmaWVkLCBhc3N1bWUgZWFjaCBlZGdlIGhhcyBlcXVhbCB3ZWlnaHQgKDEpXG4gICAgICB2YXIgd2VpZ2h0Rm4gPSBmdW5jdGlvbiggZSApe1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gZGlyZWN0ZWQgLSBvcHRpb25hbFxuICAgIGlmKCBvcHRpb25zLmRpcmVjdGVkICE9IG51bGwgKXtcbiAgICAgIHZhciBkaXJlY3RlZCA9IG9wdGlvbnMuZGlyZWN0ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBkaXJlY3RlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGFscGhhIC0gb3B0aW9uYWxcbiAgICBpZiggb3B0aW9ucy5hbHBoYSAhPSBudWxsICYmIGlzLm51bWJlciggb3B0aW9ucy5hbHBoYSApICl7XG4gICAgICB2YXIgYWxwaGEgPSBvcHRpb25zLmFscGhhO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbHBoYSA9IDA7XG4gICAgfVxuXG5cbiAgICBpZiggIWRpcmVjdGVkICl7XG4gICAgICB2YXIgY29ubkVkZ2VzID0gcm9vdC5jb25uZWN0ZWRFZGdlcygpLmludGVyc2VjdGlvbiggY2FsbGluZ0VsZXMgKTtcbiAgICAgIHZhciBrID0gY29ubkVkZ2VzLmxlbmd0aDtcbiAgICAgIHZhciBzID0gMDtcblxuICAgICAgLy8gTm93LCBzdW0gZWRnZSB3ZWlnaHRzXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGNvbm5FZGdlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgICB2YXIgZWRnZSA9IGNvbm5FZGdlc1sgaSBdO1xuICAgICAgICBzICs9IHdlaWdodEZuLmFwcGx5KCBlZGdlLCBbIGVkZ2UgXSApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkZWdyZWU6IE1hdGgucG93KCBrLCAxIC0gYWxwaGEgKSAqIE1hdGgucG93KCBzLCBhbHBoYSApXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaW5jb21pbmcgPSByb290LmNvbm5lY3RlZEVkZ2VzKCAnZWRnZVt0YXJnZXQgPSBcIicgKyByb290LmlkKCkgKyAnXCJdJyApLmludGVyc2VjdGlvbiggY2FsbGluZ0VsZXMgKTtcbiAgICAgIHZhciBvdXRnb2luZyA9IHJvb3QuY29ubmVjdGVkRWRnZXMoICdlZGdlW3NvdXJjZSA9IFwiJyArIHJvb3QuaWQoKSArICdcIl0nICkuaW50ZXJzZWN0aW9uKCBjYWxsaW5nRWxlcyApO1xuICAgICAgdmFyIGtfaW4gPSBpbmNvbWluZy5sZW5ndGg7XG4gICAgICB2YXIga19vdXQgPSBvdXRnb2luZy5sZW5ndGg7XG4gICAgICB2YXIgc19pbiA9IDA7XG4gICAgICB2YXIgc19vdXQgPSAwO1xuXG4gICAgICAvLyBOb3csIHN1bSBpbmNvbWluZyBlZGdlIHdlaWdodHNcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgaW5jb21pbmcubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGVkZ2UgPSBpbmNvbWluZ1sgaSBdO1xuICAgICAgICBzX2luICs9IHdlaWdodEZuLmFwcGx5KCBlZGdlLCBbIGVkZ2UgXSApO1xuICAgICAgfVxuXG4gICAgICAvLyBOb3csIHN1bSBvdXRnb2luZyBlZGdlIHdlaWdodHNcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgb3V0Z29pbmcubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGVkZ2UgPSBvdXRnb2luZ1sgaSBdO1xuICAgICAgICBzX291dCArPSB3ZWlnaHRGbi5hcHBseSggZWRnZSwgWyBlZGdlIF0gKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW5kZWdyZWU6IE1hdGgucG93KCBrX2luLCAxIC0gYWxwaGEgKSAqIE1hdGgucG93KCBzX2luLCBhbHBoYSApLFxuICAgICAgICBvdXRkZWdyZWU6IE1hdGgucG93KCBrX291dCwgMSAtIGFscGhhICkgKiBNYXRoLnBvdyggc19vdXQsIGFscGhhIClcbiAgICAgIH07XG4gICAgfVxuICB9IC8vIGRlZ3JlZUNlbnRyYWxpdHlcblxufSk7IC8vIGVsZXNmblxuXG4vLyBuaWNlLCBzaG9ydCBtYXRoZW1hdGhpY2FsIGFsaWFzXG5lbGVzZm4uZGMgPSBlbGVzZm4uZGVncmVlQ2VudHJhbGl0eTtcbmVsZXNmbi5kY24gPSBlbGVzZm4uZGVncmVlQ2VudHJhbGl0eU5vcm1hbGlzZWQgPSBlbGVzZm4uZGVncmVlQ2VudHJhbGl0eU5vcm1hbGl6ZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZWxlc2ZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXMgPSByZXF1aXJlKCAnLi4vLi4vaXMnICk7XG52YXIgSGVhcCA9IHJlcXVpcmUoICcuLi8uLi9oZWFwJyApO1xuXG52YXIgZWxlc2ZuID0gKHtcblxuICBkaWprc3RyYTogZnVuY3Rpb24oIHJvb3QsIHdlaWdodEZuLCBkaXJlY3RlZCApe1xuICAgIHZhciBvcHRpb25zO1xuICAgIGlmKCBpcy5wbGFpbk9iamVjdCggcm9vdCApICYmICFpcy5lbGVtZW50T3JDb2xsZWN0aW9uKCByb290ICkgKXtcbiAgICAgIG9wdGlvbnMgPSByb290O1xuICAgICAgcm9vdCA9IG9wdGlvbnMucm9vdDtcbiAgICAgIHdlaWdodEZuID0gb3B0aW9ucy53ZWlnaHQ7XG4gICAgICBkaXJlY3RlZCA9IG9wdGlvbnMuZGlyZWN0ZWQ7XG4gICAgfVxuXG4gICAgdmFyIGN5ID0gdGhpcy5fcHJpdmF0ZS5jeTtcbiAgICB3ZWlnaHRGbiA9IGlzLmZuKCB3ZWlnaHRGbiApID8gd2VpZ2h0Rm4gOiBmdW5jdGlvbigpeyByZXR1cm4gMTsgfTsgLy8gaWYgbm90IHNwZWNpZmllZCwgYXNzdW1lIGVhY2ggZWRnZSBoYXMgZXF1YWwgd2VpZ2h0ICgxKVxuXG4gICAgdmFyIHNvdXJjZSA9IGlzLnN0cmluZyggcm9vdCApID8gdGhpcy5maWx0ZXIoIHJvb3QgKVswXSA6IHJvb3RbMF07XG4gICAgdmFyIGRpc3QgPSB7fTtcbiAgICB2YXIgcHJldiA9IHt9O1xuICAgIHZhciBrbm93bkRpc3QgPSB7fTtcblxuICAgIHZhciBlZGdlcyA9IHRoaXMuZWRnZXMoKS5maWx0ZXIoIGZ1bmN0aW9uKCl7IHJldHVybiAhdGhpcy5pc0xvb3AoKTsgfSApO1xuICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXMoKTtcblxuICAgIHZhciBnZXREaXN0ID0gZnVuY3Rpb24oIG5vZGUgKXtcbiAgICAgIHJldHVybiBkaXN0WyBub2RlLmlkKCkgXTtcbiAgICB9O1xuXG4gICAgdmFyIHNldERpc3QgPSBmdW5jdGlvbiggbm9kZSwgZCApe1xuICAgICAgZGlzdFsgbm9kZS5pZCgpIF0gPSBkO1xuXG4gICAgICBRLnVwZGF0ZUl0ZW0oIG5vZGUgKTtcbiAgICB9O1xuXG4gICAgdmFyIFEgPSBuZXcgSGVhcCggZnVuY3Rpb24oIGEsIGIgKXtcbiAgICAgIHJldHVybiBnZXREaXN0KCBhICkgLSBnZXREaXN0KCBiICk7XG4gICAgfSApO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIG5vZGUgPSBub2Rlc1sgaSBdO1xuXG4gICAgICBkaXN0WyBub2RlLmlkKCkgXSA9IG5vZGUuc2FtZSggc291cmNlICkgPyAwIDogSW5maW5pdHk7XG4gICAgICBRLnB1c2goIG5vZGUgKTtcbiAgICB9XG5cbiAgICB2YXIgZGlzdEJldHdlZW4gPSBmdW5jdGlvbiggdSwgdiApe1xuICAgICAgdmFyIHV2cyA9ICggZGlyZWN0ZWQgPyB1LmVkZ2VzVG8oIHYgKSA6IHUuZWRnZXNXaXRoKCB2ICkgKS5pbnRlcnNlY3QoIGVkZ2VzICk7XG4gICAgICB2YXIgc21hbGxlc3REaXN0YW5jZSA9IEluZmluaXR5O1xuICAgICAgdmFyIHNtYWxsZXN0RWRnZTtcblxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCB1dnMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGVkZ2UgPSB1dnNbIGkgXTtcbiAgICAgICAgdmFyIHdlaWdodCA9IHdlaWdodEZuLmFwcGx5KCBlZGdlLCBbIGVkZ2UgXSApO1xuXG4gICAgICAgIGlmKCB3ZWlnaHQgPCBzbWFsbGVzdERpc3RhbmNlIHx8ICFzbWFsbGVzdEVkZ2UgKXtcbiAgICAgICAgICBzbWFsbGVzdERpc3RhbmNlID0gd2VpZ2h0O1xuICAgICAgICAgIHNtYWxsZXN0RWRnZSA9IGVkZ2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWRnZTogc21hbGxlc3RFZGdlLFxuICAgICAgICBkaXN0OiBzbWFsbGVzdERpc3RhbmNlXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB3aGlsZSggUS5zaXplKCkgPiAwICl7XG4gICAgICB2YXIgdSA9IFEucG9wKCk7XG4gICAgICB2YXIgc21hbGxldHNEaXN0ID0gZ2V0RGlzdCggdSApO1xuICAgICAgdmFyIHVpZCA9IHUuaWQoKTtcblxuICAgICAga25vd25EaXN0WyB1aWQgXSA9IHNtYWxsZXRzRGlzdDtcblxuICAgICAgaWYoIHNtYWxsZXRzRGlzdCA9PT0gTWF0aC5JbmZpbml0ZSApe1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdmFyIG5laWdoYm9ycyA9IHUubmVpZ2hib3Job29kKCkuaW50ZXJzZWN0KCBub2RlcyApO1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBuZWlnaGJvcnMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIHYgPSBuZWlnaGJvcnNbIGkgXTtcbiAgICAgICAgdmFyIHZpZCA9IHYuaWQoKTtcbiAgICAgICAgdmFyIHZEaXN0ID0gZGlzdEJldHdlZW4oIHUsIHYgKTtcblxuICAgICAgICB2YXIgYWx0ID0gc21hbGxldHNEaXN0ICsgdkRpc3QuZGlzdDtcblxuICAgICAgICBpZiggYWx0IDwgZ2V0RGlzdCggdiApICl7XG4gICAgICAgICAgc2V0RGlzdCggdiwgYWx0ICk7XG5cbiAgICAgICAgICBwcmV2WyB2aWQgXSA9IHtcbiAgICAgICAgICAgIG5vZGU6IHUsXG4gICAgICAgICAgICBlZGdlOiB2RGlzdC5lZGdlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBmb3JcbiAgICB9IC8vIHdoaWxlXG5cbiAgICByZXR1cm4ge1xuICAgICAgZGlzdGFuY2VUbzogZnVuY3Rpb24oIG5vZGUgKXtcbiAgICAgICAgdmFyIHRhcmdldCA9IGlzLnN0cmluZyggbm9kZSApID8gbm9kZXMuZmlsdGVyKCBub2RlIClbMF0gOiBub2RlWzBdO1xuXG4gICAgICAgIHJldHVybiBrbm93bkRpc3RbIHRhcmdldC5pZCgpIF07XG4gICAgICB9LFxuXG4gICAgICBwYXRoVG86IGZ1bmN0aW9uKCBub2RlICl7XG4gICAgICAgIHZhciB0YXJnZXQgPSBpcy5zdHJpbmcoIG5vZGUgKSA/IG5vZGVzLmZpbHRlciggbm9kZSApWzBdIDogbm9kZVswXTtcbiAgICAgICAgdmFyIFMgPSBbXTtcbiAgICAgICAgdmFyIHUgPSB0YXJnZXQ7XG5cbiAgICAgICAgaWYoIHRhcmdldC5sZW5ndGggPiAwICl7XG4gICAgICAgICAgUy51bnNoaWZ0KCB0YXJnZXQgKTtcblxuICAgICAgICAgIHdoaWxlKCBwcmV2WyB1LmlkKCkgXSApe1xuICAgICAgICAgICAgdmFyIHAgPSBwcmV2WyB1LmlkKCkgXTtcblxuICAgICAgICAgICAgUy51bnNoaWZ0KCBwLmVkZ2UgKTtcbiAgICAgICAgICAgIFMudW5zaGlmdCggcC5ub2RlICk7XG5cbiAgICAgICAgICAgIHUgPSBwLm5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGN5LmNvbGxlY3Rpb24oIFMgKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbGVzZm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpcyA9IHJlcXVpcmUoICcuLi8uLi9pcycgKTtcblxudmFyIGVsZXNmbiA9ICh7XG5cbiAgLy8gSW1wbGVtZW50ZWQgZnJvbSBwc2V1ZG9jb2RlIGZyb20gd2lraXBlZGlhXG4gIGZsb3lkV2Fyc2hhbGw6IGZ1bmN0aW9uKCBvcHRpb25zICl7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICB2YXIgY3kgPSB0aGlzLmN5KCk7XG5cbiAgICAvLyBXZWlnaHQgZnVuY3Rpb24gLSBvcHRpb25hbFxuICAgIGlmKCBvcHRpb25zLndlaWdodCAhPSBudWxsICYmIGlzLmZuKCBvcHRpb25zLndlaWdodCApICl7XG4gICAgICB2YXIgd2VpZ2h0Rm4gPSBvcHRpb25zLndlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgbm90IHNwZWNpZmllZCwgYXNzdW1lIGVhY2ggZWRnZSBoYXMgZXF1YWwgd2VpZ2h0ICgxKVxuICAgICAgdmFyIHdlaWdodEZuID0gZnVuY3Rpb24oIGUgKXtyZXR1cm4gMTt9O1xuICAgIH1cblxuICAgIC8vIGRpcmVjdGVkIC0gb3B0aW9uYWxcbiAgICBpZiggb3B0aW9ucy5kaXJlY3RlZCAhPSBudWxsICl7XG4gICAgICB2YXIgZGlyZWN0ZWQgPSBvcHRpb25zLmRpcmVjdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGlyZWN0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgZWRnZXMgPSB0aGlzLmVkZ2VzKCkuc3RkRmlsdGVyKCBmdW5jdGlvbiggZSApeyByZXR1cm4gIWUuaXNMb29wKCk7IH0gKTtcbiAgICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzKCk7XG4gICAgdmFyIG51bU5vZGVzID0gbm9kZXMubGVuZ3RoO1xuXG4gICAgLy8gbWFwcGluZzogbm9kZSBpZCAtPiBwb3NpdGlvbiBpbiBub2RlcyBhcnJheVxuICAgIHZhciBpZDJwb3NpdGlvbiA9IHt9O1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbnVtTm9kZXM7IGkrKyApe1xuICAgICAgaWQycG9zaXRpb25bIG5vZGVzWyBpIF0uaWQoKSBdID0gaTtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIGRpc3RhbmNlIG1hdHJpeFxuICAgIHZhciBkaXN0ID0gW107XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBudW1Ob2RlczsgaSsrICl7XG4gICAgICB2YXIgbmV3Um93ID0gbmV3IEFycmF5KCBudW1Ob2RlcyApO1xuICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBudW1Ob2RlczsgaisrICl7XG4gICAgICAgIGlmKCBpID09IGogKXtcbiAgICAgICAgICBuZXdSb3dbIGogXSA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3Um93WyBqIF0gPSBJbmZpbml0eTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGlzdC5wdXNoKCBuZXdSb3cgKTtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIG1hdHJpeCB1c2VkIGZvciBwYXRoIHJlY29uc3RydWN0aW9uXG4gICAgLy8gSW5pdGlhbGl6ZSBkaXN0YW5jZSBtYXRyaXhcbiAgICB2YXIgbmV4dCA9IFtdO1xuICAgIHZhciBlZGdlTmV4dCA9IFtdO1xuXG4gICAgdmFyIGluaXRNYXRyaXggPSBmdW5jdGlvbiggbmV4dCApe1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBudW1Ob2RlczsgaSsrICl7XG4gICAgICAgIHZhciBuZXdSb3cgPSBuZXcgQXJyYXkoIG51bU5vZGVzICk7XG4gICAgICAgIGZvciggdmFyIGogPSAwOyBqIDwgbnVtTm9kZXM7IGorKyApe1xuICAgICAgICAgIG5ld1Jvd1sgaiBdID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIG5leHQucHVzaCggbmV3Um93ICk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGluaXRNYXRyaXgoIG5leHQgKTtcbiAgICBpbml0TWF0cml4KCBlZGdlTmV4dCApO1xuXG4gICAgLy8gUHJvY2VzcyBlZGdlc1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZWRnZXMubGVuZ3RoIDsgaSsrICl7XG4gICAgICB2YXIgc291cmNlSW5kZXggPSBpZDJwb3NpdGlvblsgZWRnZXNbIGkgXS5zb3VyY2UoKS5pZCgpIF07XG4gICAgICB2YXIgdGFyZ2V0SW5kZXggPSBpZDJwb3NpdGlvblsgZWRnZXNbIGkgXS50YXJnZXQoKS5pZCgpIF07XG4gICAgICB2YXIgd2VpZ2h0ID0gd2VpZ2h0Rm4uYXBwbHkoIGVkZ2VzWyBpIF0sIFsgZWRnZXNbIGkgXSBdICk7XG5cbiAgICAgIC8vIENoZWNrIGlmIGFscmVhZHkgcHJvY2VzcyBhbm90aGVyIGVkZ2UgYmV0d2VlbiBzYW1lIDIgbm9kZXNcbiAgICAgIGlmKCBkaXN0WyBzb3VyY2VJbmRleCBdWyB0YXJnZXRJbmRleCBdID4gd2VpZ2h0ICl7XG4gICAgICAgIGRpc3RbIHNvdXJjZUluZGV4IF1bIHRhcmdldEluZGV4IF0gPSB3ZWlnaHQ7XG4gICAgICAgIG5leHRbIHNvdXJjZUluZGV4IF1bIHRhcmdldEluZGV4IF0gPSB0YXJnZXRJbmRleDtcbiAgICAgICAgZWRnZU5leHRbIHNvdXJjZUluZGV4IF1bIHRhcmdldEluZGV4IF0gPSBlZGdlc1sgaSBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHVuZGlyZWN0ZWQgZ3JhcGgsIHByb2Nlc3MgJ3JldmVyc2VkJyBlZGdlc1xuICAgIGlmKCAhZGlyZWN0ZWQgKXtcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZWRnZXMubGVuZ3RoIDsgaSsrICl7XG4gICAgICAgIHZhciBzb3VyY2VJbmRleCA9IGlkMnBvc2l0aW9uWyBlZGdlc1sgaSBdLnRhcmdldCgpLmlkKCkgXTtcbiAgICAgICAgdmFyIHRhcmdldEluZGV4ID0gaWQycG9zaXRpb25bIGVkZ2VzWyBpIF0uc291cmNlKCkuaWQoKSBdO1xuICAgICAgICB2YXIgd2VpZ2h0ID0gd2VpZ2h0Rm4uYXBwbHkoIGVkZ2VzWyBpIF0sIFsgZWRnZXNbIGkgXSBdICk7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgYWxyZWFkeSBwcm9jZXNzIGFub3RoZXIgZWRnZSBiZXR3ZWVuIHNhbWUgMiBub2Rlc1xuICAgICAgICBpZiggZGlzdFsgc291cmNlSW5kZXggXVsgdGFyZ2V0SW5kZXggXSA+IHdlaWdodCApe1xuICAgICAgICAgIGRpc3RbIHNvdXJjZUluZGV4IF1bIHRhcmdldEluZGV4IF0gPSB3ZWlnaHQ7XG4gICAgICAgICAgbmV4dFsgc291cmNlSW5kZXggXVsgdGFyZ2V0SW5kZXggXSA9IHRhcmdldEluZGV4O1xuICAgICAgICAgIGVkZ2VOZXh0WyBzb3VyY2VJbmRleCBdWyB0YXJnZXRJbmRleCBdID0gZWRnZXNbIGkgXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1haW4gbG9vcFxuICAgIGZvciggdmFyIGsgPSAwOyBrIDwgbnVtTm9kZXM7IGsrKyApe1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBudW1Ob2RlczsgaSsrICl7XG4gICAgICAgIGZvciggdmFyIGogPSAwOyBqIDwgbnVtTm9kZXM7IGorKyApe1xuICAgICAgICAgIGlmKCBkaXN0WyBpIF1bIGsgXSArIGRpc3RbIGsgXVsgaiBdIDwgZGlzdFsgaSBdWyBqIF0gKXtcbiAgICAgICAgICAgIGRpc3RbIGkgXVsgaiBdID0gZGlzdFsgaSBdWyBrIF0gKyBkaXN0WyBrIF1bIGogXTtcbiAgICAgICAgICAgIG5leHRbIGkgXVsgaiBdID0gbmV4dFsgaSBdWyBrIF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQnVpbGQgcmVzdWx0IG9iamVjdFxuICAgIHZhciBwb3NpdGlvbjJpZCA9IFtdO1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbnVtTm9kZXM7IGkrKyApe1xuICAgICAgcG9zaXRpb24yaWQucHVzaCggbm9kZXNbIGkgXS5pZCgpICk7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHtcbiAgICAgIGRpc3RhbmNlOiBmdW5jdGlvbiggZnJvbSwgdG8gKXtcbiAgICAgICAgaWYoIGlzLnN0cmluZyggZnJvbSApICl7XG4gICAgICAgICAgLy8gZnJvbSBpcyBhIHNlbGVjdG9yIHN0cmluZ1xuICAgICAgICAgIHZhciBmcm9tSWQgPSAoY3kuZmlsdGVyKCBmcm9tIClbMF0pLmlkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZnJvbSBpcyBhIG5vZGVcbiAgICAgICAgICB2YXIgZnJvbUlkID0gZnJvbS5pZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIGlzLnN0cmluZyggdG8gKSApe1xuICAgICAgICAgIC8vIHRvIGlzIGEgc2VsZWN0b3Igc3RyaW5nXG4gICAgICAgICAgdmFyIHRvSWQgPSAoY3kuZmlsdGVyKCB0byApWzBdKS5pZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHRvIGlzIGEgbm9kZVxuICAgICAgICAgIHZhciB0b0lkID0gdG8uaWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkaXN0WyBpZDJwb3NpdGlvblsgZnJvbUlkIF0gXVsgaWQycG9zaXRpb25bIHRvSWQgXSBdO1xuICAgICAgfSxcblxuICAgICAgcGF0aDogZnVuY3Rpb24oIGZyb20sIHRvICl7XG4gICAgICAgIHZhciByZWNvbnN0cnVjdFBhdGhBdXggPSBmdW5jdGlvbiggZnJvbSwgdG8sIG5leHQsIHBvc2l0aW9uMmlkLCBlZGdlTmV4dCApe1xuICAgICAgICAgIGlmKCBmcm9tID09PSB0byApe1xuICAgICAgICAgICAgcmV0dXJuIGN5LmdldEVsZW1lbnRCeUlkKCBwb3NpdGlvbjJpZFsgZnJvbSBdICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKCBuZXh0WyBmcm9tIF1bIHRvIF0gPT09IHVuZGVmaW5lZCApe1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcGF0aCA9IFsgY3kuZ2V0RWxlbWVudEJ5SWQoIHBvc2l0aW9uMmlkWyBmcm9tIF0gKSBdO1xuICAgICAgICAgIHZhciBwcmV2ID0gZnJvbTtcbiAgICAgICAgICB3aGlsZSggZnJvbSAhPT0gdG8gKXtcbiAgICAgICAgICAgIHByZXYgPSBmcm9tO1xuICAgICAgICAgICAgZnJvbSA9IG5leHRbIGZyb20gXVsgdG8gXTtcblxuICAgICAgICAgICAgdmFyIGVkZ2UgPSBlZGdlTmV4dFsgcHJldiBdWyBmcm9tIF07XG4gICAgICAgICAgICBwYXRoLnB1c2goIGVkZ2UgKTtcblxuICAgICAgICAgICAgcGF0aC5wdXNoKCBjeS5nZXRFbGVtZW50QnlJZCggcG9zaXRpb24yaWRbIGZyb20gXSApICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmKCBpcy5zdHJpbmcoIGZyb20gKSApe1xuICAgICAgICAgIC8vIGZyb20gaXMgYSBzZWxlY3RvciBzdHJpbmdcbiAgICAgICAgICB2YXIgZnJvbUlkID0gKGN5LmZpbHRlciggZnJvbSApWzBdKS5pZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGZyb20gaXMgYSBub2RlXG4gICAgICAgICAgdmFyIGZyb21JZCA9IGZyb20uaWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCBpcy5zdHJpbmcoIHRvICkgKXtcbiAgICAgICAgICAvLyB0byBpcyBhIHNlbGVjdG9yIHN0cmluZ1xuICAgICAgICAgIHZhciB0b0lkID0gKGN5LmZpbHRlciggdG8gKVswXSkuaWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB0byBpcyBhIG5vZGVcbiAgICAgICAgICB2YXIgdG9JZCA9IHRvLmlkKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGF0aEFyciA9IHJlY29uc3RydWN0UGF0aEF1eCggaWQycG9zaXRpb25bIGZyb21JZCBdLFxuICAgICAgICAgICAgICAgICAgICAgIGlkMnBvc2l0aW9uWyB0b0lkIF0sXG4gICAgICAgICAgICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjJpZCxcbiAgICAgICAgICAgICAgICAgICAgICBlZGdlTmV4dCApO1xuXG4gICAgICAgIHJldHVybiBjeS5jb2xsZWN0aW9uKCBwYXRoQXJyICk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiByZXM7XG5cbiAgfSAvLyBmbG95ZFdhcnNoYWxsXG5cbn0pOyAvLyBlbGVzZm5cblxubW9kdWxlLmV4cG9ydHMgPSBlbGVzZm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSggJy4uLy4uL3V0aWwnICk7XG5cbnZhciBlbGVzZm4gPSB7fTtcblxuW1xuICByZXF1aXJlKCAnLi9iZnMtZGZzJyApLFxuICByZXF1aXJlKCAnLi9kaWprc3RyYScgKSxcbiAgcmVxdWlyZSggJy4va3J1c2thbCcgKSxcbiAgcmVxdWlyZSggJy4vYS1zdGFyJyApLFxuICByZXF1aXJlKCAnLi9mbG95ZC13YXJzaGFsbCcgKSxcbiAgcmVxdWlyZSggJy4vYmVsbG1hbi1mb3JkJyApLFxuICByZXF1aXJlKCAnLi9rZXJnZXItc3RlaW4nICksXG4gIHJlcXVpcmUoICcuL3BhZ2UtcmFuaycgKSxcbiAgcmVxdWlyZSggJy4vZGVncmVlLWNlbnRyYWxpdHknICksXG4gIHJlcXVpcmUoICcuL2Nsb3NlbmVzcy1jZW50cmFsaXR5JyApLFxuICByZXF1aXJlKCAnLi9iZXR3ZWVubmVzcy1jZW50cmFsaXR5JyApXG5dLmZvckVhY2goIGZ1bmN0aW9uKCBwcm9wcyApe1xuICB1dGlsLmV4dGVuZCggZWxlc2ZuLCBwcm9wcyApO1xufSApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVsZXNmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vLi4vdXRpbCcgKTtcblxudmFyIGVsZXNmbiA9ICh7XG5cbiAgLy8gQ29tcHV0ZXMgdGhlIG1pbmltdW0gY3V0IG9mIGFuIHVuZGlyZWN0ZWQgZ3JhcGhcbiAgLy8gUmV0dXJucyB0aGUgY29ycmVjdCBhbnN3ZXIgd2l0aCBoaWdoIHByb2JhYmlsaXR5XG4gIGthcmdlclN0ZWluOiBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAgIHZhciBlbGVzID0gdGhpcztcblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgLy8gRnVuY3Rpb24gd2hpY2ggY29sYXBzZXMgMiAobWV0YSkgbm9kZXMgaW50byBvbmVcbiAgICAvLyBVcGRhdGVzIHRoZSByZW1haW5pbmcgZWRnZSBsaXN0c1xuICAgIC8vIFJlY2VpdmVzIGFzIGEgcGFyYW1hdGVyIHRoZSBlZGdlIHdoaWNoIGNhdXNlcyB0aGUgY29sbGFwc2VcbiAgICB2YXIgY29sYXBzZSA9IGZ1bmN0aW9uKCBlZGdlSW5kZXgsIG5vZGVNYXAsIHJlbWFpbmluZ0VkZ2VzICl7XG4gICAgICB2YXIgZWRnZUluZm8gPSByZW1haW5pbmdFZGdlc1sgZWRnZUluZGV4IF07XG4gICAgICB2YXIgc291cmNlSW4gPSBlZGdlSW5mb1sxXTtcbiAgICAgIHZhciB0YXJnZXRJbiA9IGVkZ2VJbmZvWzJdO1xuICAgICAgdmFyIHBhcnRpdGlvbjEgPSBub2RlTWFwWyBzb3VyY2VJbiBdO1xuICAgICAgdmFyIHBhcnRpdGlvbjIgPSBub2RlTWFwWyB0YXJnZXRJbiBdO1xuXG4gICAgICAvLyBEZWxldGUgYWxsIGVkZ2VzIGJldHdlZW4gcGFydGl0aW9uMSBhbmQgcGFydGl0aW9uMlxuICAgICAgdmFyIG5ld0VkZ2VzID0gcmVtYWluaW5nRWRnZXMuZmlsdGVyKCBmdW5jdGlvbiggZWRnZSApe1xuICAgICAgICBpZiggbm9kZU1hcFsgZWRnZVsxXSBdID09PSBwYXJ0aXRpb24xICYmIG5vZGVNYXBbIGVkZ2VbMl0gXSA9PT0gcGFydGl0aW9uMiApe1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiggbm9kZU1hcFsgZWRnZVsxXSBdID09PSBwYXJ0aXRpb24yICYmIG5vZGVNYXBbIGVkZ2VbMl0gXSA9PT0gcGFydGl0aW9uMSApe1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gKTtcblxuICAgICAgLy8gQWxsIGVkZ2VzIHBvaW50aW5nIHRvIHBhcnRpdGlvbjIgc2hvdWxkIG5vdyBwb2ludCB0byBwYXJ0aXRpb24xXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IG5ld0VkZ2VzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBlZGdlID0gbmV3RWRnZXNbIGkgXTtcbiAgICAgICAgaWYoIGVkZ2VbMV0gPT09IHBhcnRpdGlvbjIgKXsgLy8gQ2hlY2sgc291cmNlXG4gICAgICAgICAgbmV3RWRnZXNbIGkgXSA9IGVkZ2Uuc2xpY2UoIDAgKTtcbiAgICAgICAgICBuZXdFZGdlc1sgaSBdWzFdID0gcGFydGl0aW9uMTtcbiAgICAgICAgfSBlbHNlIGlmKCBlZGdlWzJdID09PSBwYXJ0aXRpb24yICl7IC8vIENoZWNrIHRhcmdldFxuICAgICAgICAgIG5ld0VkZ2VzWyBpIF0gPSBlZGdlLnNsaWNlKCAwICk7XG4gICAgICAgICAgbmV3RWRnZXNbIGkgXVsyXSA9IHBhcnRpdGlvbjE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gTW92ZSBhbGwgbm9kZXMgZnJvbSBwYXJ0aXRpb24yIHRvIHBhcnRpdGlvbjFcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbm9kZU1hcC5sZW5ndGg7IGkrKyApe1xuICAgICAgICBpZiggbm9kZU1hcFsgaSBdID09PSBwYXJ0aXRpb24yICl7XG4gICAgICAgICAgbm9kZU1hcFsgaSBdID0gcGFydGl0aW9uMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3RWRnZXM7XG4gICAgfTtcblxuXG4gICAgLy8gQ29udHJhY3RzIGEgZ3JhcGggdW50aWwgd2UgcmVhY2ggYSBjZXJ0YWluIG51bWJlciBvZiBtZXRhIG5vZGVzXG4gICAgdmFyIGNvbnRyYWN0VW50aWwgPSBmdW5jdGlvbiggbWV0YU5vZGVNYXAsXG4gICAgICAgICAgICAgICAgICAgcmVtYWluaW5nRWRnZXMsXG4gICAgICAgICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgICAgICAgICBzaXplTGltaXQgKXtcbiAgICAgIC8vIFN0b3AgY29uZGl0aW9uXG4gICAgICBpZiggc2l6ZSA8PSBzaXplTGltaXQgKXtcbiAgICAgICAgcmV0dXJuIHJlbWFpbmluZ0VkZ2VzO1xuICAgICAgfVxuXG4gICAgICAvLyBDaG9vc2UgYW4gZWRnZSByYW5kb21seVxuICAgICAgdmFyIGVkZ2VJbmRleCA9IE1hdGguZmxvb3IoIChNYXRoLnJhbmRvbSgpICogcmVtYWluaW5nRWRnZXMubGVuZ3RoKSApO1xuXG4gICAgICAvLyBDb2xhcHNlIGdyYXBoIGJhc2VkIG9uIGVkZ2VcbiAgICAgIHZhciBuZXdFZGdlcyA9IGNvbGFwc2UoIGVkZ2VJbmRleCwgbWV0YU5vZGVNYXAsIHJlbWFpbmluZ0VkZ2VzICk7XG5cbiAgICAgIHJldHVybiBjb250cmFjdFVudGlsKCBtZXRhTm9kZU1hcCxcbiAgICAgICAgICAgICAgICAgbmV3RWRnZXMsXG4gICAgICAgICAgICAgICAgIHNpemUgLSAxLFxuICAgICAgICAgICAgICAgICBzaXplTGltaXQgKTtcbiAgICB9O1xuXG4gICAgdmFyIGN5ID0gdGhpcy5fcHJpdmF0ZS5jeTtcbiAgICB2YXIgZWRnZXMgPSB0aGlzLmVkZ2VzKCkuc3RkRmlsdGVyKCBmdW5jdGlvbiggZSApeyByZXR1cm4gIWUuaXNMb29wKCk7IH0gKTtcbiAgICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzKCk7XG4gICAgdmFyIG51bU5vZGVzID0gbm9kZXMubGVuZ3RoO1xuICAgIHZhciBudW1FZGdlcyA9IGVkZ2VzLmxlbmd0aDtcbiAgICB2YXIgbnVtSXRlciA9IE1hdGguY2VpbCggTWF0aC5wb3coIE1hdGgubG9nKCBudW1Ob2RlcyApIC8gTWF0aC5MTjIsIDIgKSApO1xuICAgIHZhciBzdG9wU2l6ZSA9IE1hdGguZmxvb3IoIG51bU5vZGVzIC8gTWF0aC5zcXJ0KCAyICkgKTtcblxuICAgIGlmKCBudW1Ob2RlcyA8IDIgKXtcbiAgICAgIHV0aWwuZXJyb3IoICdBdCBsZWFzdCAyIG5vZGVzIGFyZSByZXF1aXJlZCBmb3IgS2FyZ2VyLVN0ZWluIGFsZ29yaXRobScgKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIG51bWVyaWNhbCBpZGVudGlmaWVycyBmb3IgZWFjaCBub2RlXG4gICAgLy8gbWFwcGluZzogbm9kZSBpZCAtPiBwb3NpdGlvbiBpbiBub2RlcyBhcnJheVxuICAgIC8vIGZvciByZXZlcnNlIG1hcHBpbmcsIHNpbXBseSB1c2Ugbm9kZXMgYXJyYXlcbiAgICB2YXIgaWQycG9zaXRpb24gPSB7fTtcbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IG51bU5vZGVzOyBpKysgKXtcbiAgICAgIGlkMnBvc2l0aW9uWyBub2Rlc1sgaSBdLmlkKCkgXSA9IGk7XG4gICAgfVxuXG4gICAgLy8gTm93IHN0b3JlIGVkZ2UgZGVzdGluYXRpb24gYXMgaW5kZXhlc1xuICAgIC8vIEZvcm1hdCBmb3IgZWFjaCBlZGdlIChlZGdlIGluZGV4LCBzb3VyY2Ugbm9kZSBpbmRleCwgdGFyZ2V0IG5vZGUgaW5kZXgpXG4gICAgdmFyIGVkZ2VJbmRleGVzID0gW107XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBudW1FZGdlczsgaSsrICl7XG4gICAgICB2YXIgZSA9IGVkZ2VzWyBpIF07XG4gICAgICBlZGdlSW5kZXhlcy5wdXNoKCBbIGksIGlkMnBvc2l0aW9uWyBlLnNvdXJjZSgpLmlkKCkgXSwgaWQycG9zaXRpb25bIGUudGFyZ2V0KCkuaWQoKSBdIF0gKTtcbiAgICB9XG5cbiAgICAvLyBXZSB3aWxsIHN0b3JlIHRoZSBiZXN0IGN1dCBmb3VuZCBoZXJlXG4gICAgdmFyIG1pbkN1dFNpemUgPSBJbmZpbml0eTtcbiAgICB2YXIgbWluQ3V0O1xuXG4gICAgLy8gSW5pdGlhbCBtZXRhIG5vZGUgcGFydGl0aW9uXG4gICAgdmFyIG9yaWdpbmFsTWV0YU5vZGUgPSBbXTtcbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IG51bU5vZGVzOyBpKysgKXtcbiAgICAgIG9yaWdpbmFsTWV0YU5vZGUucHVzaCggaSApO1xuICAgIH1cblxuICAgIC8vIE1haW4gbG9vcFxuICAgIGZvciggdmFyIGl0ZXIgPSAwOyBpdGVyIDw9IG51bUl0ZXI7IGl0ZXIrKyApe1xuICAgICAgLy8gQ3JlYXRlIG5ldyBtZXRhIG5vZGUgcGFydGl0aW9uXG4gICAgICB2YXIgbWV0YU5vZGVNYXAgPSBvcmlnaW5hbE1ldGFOb2RlLnNsaWNlKCAwICk7XG5cbiAgICAgIC8vIENvbnRyYWN0IHVudGlsIHN0b3AgcG9pbnQgKHN0b3BTaXplIG5vZGVzKVxuICAgICAgdmFyIGVkZ2VzU3RhdGUgPSBjb250cmFjdFVudGlsKCBtZXRhTm9kZU1hcCwgZWRnZUluZGV4ZXMsIG51bU5vZGVzLCBzdG9wU2l6ZSApO1xuXG4gICAgICAvLyBDcmVhdGUgYSBjb3B5IG9mIHRoZSBjb2xhcHNlZCBub2RlcyBzdGF0ZVxuICAgICAgdmFyIG1ldGFOb2RlTWFwMiA9IG1ldGFOb2RlTWFwLnNsaWNlKCAwICk7XG5cbiAgICAgIC8vIFJ1biAyIGl0ZXJhdGlvbnMgc3RhcnRpbmcgaW4gdGhlIHN0b3Agc3RhdGVcbiAgICAgIHZhciByZXMxID0gY29udHJhY3RVbnRpbCggbWV0YU5vZGVNYXAsIGVkZ2VzU3RhdGUsIHN0b3BTaXplLCAyICk7XG4gICAgICB2YXIgcmVzMiA9IGNvbnRyYWN0VW50aWwoIG1ldGFOb2RlTWFwMiwgZWRnZXNTdGF0ZSwgc3RvcFNpemUsIDIgKTtcblxuICAgICAgLy8gSXMgYW55IG9mIHRoZSAyIHJlc3VsdHMgdGhlIGJlc3QgY3V0IHNvIGZhcj9cbiAgICAgIGlmKCByZXMxLmxlbmd0aCA8PSByZXMyLmxlbmd0aCAmJiByZXMxLmxlbmd0aCA8IG1pbkN1dFNpemUgKXtcbiAgICAgICAgbWluQ3V0U2l6ZSA9IHJlczEubGVuZ3RoO1xuICAgICAgICBtaW5DdXQgPSBbIHJlczEsIG1ldGFOb2RlTWFwIF07XG4gICAgICB9IGVsc2UgaWYoIHJlczIubGVuZ3RoIDw9IHJlczEubGVuZ3RoICYmIHJlczIubGVuZ3RoIDwgbWluQ3V0U2l6ZSApe1xuICAgICAgICBtaW5DdXRTaXplID0gcmVzMi5sZW5ndGg7XG4gICAgICAgIG1pbkN1dCA9IFsgcmVzMiwgbWV0YU5vZGVNYXAyIF07XG4gICAgICB9XG4gICAgfSAvLyBlbmQgb2YgbWFpbiBsb29wXG5cblxuICAgIC8vIENvbnN0cnVjdCByZXN1bHRcbiAgICB2YXIgcmVzRWRnZXMgPSAobWluQ3V0WzBdKS5tYXAoIGZ1bmN0aW9uKCBlICl7IHJldHVybiBlZGdlc1sgZVswXSBdOyB9ICk7XG4gICAgdmFyIHBhcnRpdGlvbjEgPSBbXTtcbiAgICB2YXIgcGFydGl0aW9uMiA9IFtdO1xuXG4gICAgLy8gdHJhdmVyc2UgbWV0YU5vZGVNYXAgZm9yIGJlc3QgY3V0XG4gICAgdmFyIHdpdG5lc3NOb2RlUGFydGl0aW9uID0gbWluQ3V0WzFdWzBdO1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbWluQ3V0WzFdLmxlbmd0aDsgaSsrICl7XG4gICAgICB2YXIgcGFydGl0aW9uSWQgPSBtaW5DdXRbMV1bIGkgXTtcbiAgICAgIGlmKCBwYXJ0aXRpb25JZCA9PT0gd2l0bmVzc05vZGVQYXJ0aXRpb24gKXtcbiAgICAgICAgcGFydGl0aW9uMS5wdXNoKCBub2Rlc1sgaSBdICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0aXRpb24yLnB1c2goIG5vZGVzWyBpIF0gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmV0ID0ge1xuICAgICAgY3V0OiBlbGVzLnNwYXduKCBjeSwgcmVzRWRnZXMgKSxcbiAgICAgIHBhcnRpdGlvbjE6IGVsZXMuc3Bhd24oIHBhcnRpdGlvbjEgKSxcbiAgICAgIHBhcnRpdGlvbjI6IGVsZXMuc3Bhd24oIHBhcnRpdGlvbjIgKVxuICAgIH07XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG59KTsgLy8gZWxlc2ZuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBlbGVzZm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpcyA9IHJlcXVpcmUoICcuLi8uLi9pcycgKTtcblxuLy8gc2VhcmNoLCBzcGFubmluZyB0cmVlcywgZXRjXG52YXIgZWxlc2ZuID0gKHtcblxuICAvLyBrcnVza2FsJ3MgYWxnb3JpdGhtIChmaW5kcyBtaW4gc3Bhbm5pbmcgdHJlZSwgYXNzdW1pbmcgdW5kaXJlY3RlZCBncmFwaClcbiAgLy8gaW1wbGVtZW50ZWQgZnJvbSBwc2V1ZG9jb2RlIGZyb20gd2lraXBlZGlhXG4gIGtydXNrYWw6IGZ1bmN0aW9uKCB3ZWlnaHRGbiApe1xuICAgIHZhciBjeSA9IHRoaXMuY3koKTtcblxuICAgIHdlaWdodEZuID0gaXMuZm4oIHdlaWdodEZuICkgPyB3ZWlnaHRGbiA6IGZ1bmN0aW9uKCl7IHJldHVybiAxOyB9OyAvLyBpZiBub3Qgc3BlY2lmaWVkLCBhc3N1bWUgZWFjaCBlZGdlIGhhcyBlcXVhbCB3ZWlnaHQgKDEpXG5cbiAgICBmdW5jdGlvbiBmaW5kU2V0KCBlbGUgKXtcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZm9yZXN0Lmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBlbGVzID0gZm9yZXN0WyBpIF07XG5cbiAgICAgICAgaWYoIGVsZXMuYW55U2FtZSggZWxlICkgKXtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZWxlczogZWxlcyxcbiAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBBID0gY3kuY29sbGVjdGlvbiggY3ksIFtdICk7XG4gICAgdmFyIGZvcmVzdCA9IFtdO1xuICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXMoKTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIGZvcmVzdC5wdXNoKCBub2Rlc1sgaSBdLmNvbGxlY3Rpb24oKSApO1xuICAgIH1cblxuICAgIHZhciBlZGdlcyA9IHRoaXMuZWRnZXMoKTtcbiAgICB2YXIgUyA9IGVkZ2VzLnRvQXJyYXkoKS5zb3J0KCBmdW5jdGlvbiggYSwgYiApe1xuICAgICAgdmFyIHdlaWdodEEgPSB3ZWlnaHRGbi5jYWxsKCBhLCBhICk7XG4gICAgICB2YXIgd2VpZ2h0QiA9IHdlaWdodEZuLmNhbGwoIGIsIGIgKTtcblxuICAgICAgcmV0dXJuIHdlaWdodEEgLSB3ZWlnaHRCO1xuICAgIH0gKTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgUy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGVkZ2UgPSBTWyBpIF07XG4gICAgICB2YXIgdSA9IGVkZ2Uuc291cmNlKClbMF07XG4gICAgICB2YXIgdiA9IGVkZ2UudGFyZ2V0KClbMF07XG4gICAgICB2YXIgc2V0VSA9IGZpbmRTZXQoIHUgKTtcbiAgICAgIHZhciBzZXRWID0gZmluZFNldCggdiApO1xuXG4gICAgICBpZiggc2V0VS5pbmRleCAhPT0gc2V0Vi5pbmRleCApe1xuICAgICAgICBBID0gQS5hZGQoIGVkZ2UgKTtcblxuICAgICAgICAvLyBjb21iaW5lIGZvcmVzdHMgZm9yIHUgYW5kIHZcbiAgICAgICAgZm9yZXN0WyBzZXRVLmluZGV4IF0gPSBzZXRVLmVsZXMuYWRkKCBzZXRWLmVsZXMgKTtcbiAgICAgICAgZm9yZXN0LnNwbGljZSggc2V0Vi5pbmRleCwgMSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBub2Rlcy5hZGQoIEEgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZWxlc2ZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXMgPSByZXF1aXJlKCAnLi4vLi4vaXMnICk7XG5cbnZhciBlbGVzZm4gPSAoe1xuXG4gIHBhZ2VSYW5rOiBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgdmFyIG5vcm1hbGl6ZVZlY3RvciA9IGZ1bmN0aW9uKCB2ZWN0b3IgKXtcbiAgICAgIHZhciBsZW5ndGggPSB2ZWN0b3IubGVuZ3RoO1xuXG4gICAgICAvLyBGaXJzdCwgZ2V0IHN1bSBvZiBhbGwgZWxlbWVudHNcbiAgICAgIHZhciB0b3RhbCA9IDA7XG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrICl7XG4gICAgICAgIHRvdGFsICs9IHZlY3RvclsgaSBdO1xuICAgICAgfVxuXG4gICAgICAvLyBOb3csIGRpdmlkZSBlYWNoIGJ5IHRoZSBzdW0gb2YgYWxsIGVsZW1lbnRzXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZlY3RvclsgaSBdID0gdmVjdG9yWyBpIF0gLyB0b3RhbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gZGFtcGluZ0ZhY3RvciAtIG9wdGlvbmFsXG4gICAgaWYoIG9wdGlvbnMgIT0gbnVsbCAmJlxuICAgICAgb3B0aW9ucy5kYW1waW5nRmFjdG9yICE9IG51bGwgKXtcbiAgICAgIHZhciBkYW1waW5nRmFjdG9yID0gb3B0aW9ucy5kYW1waW5nRmFjdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGFtcGluZ0ZhY3RvciA9IDAuODsgLy8gRGVmYXVsdCBkYW1waW5nIGZhY3RvclxuICAgIH1cblxuICAgIC8vIGRlc2lyZWQgcHJlY2lzaW9uIC0gb3B0aW9uYWxcbiAgICBpZiggb3B0aW9ucyAhPSBudWxsICYmXG4gICAgICBvcHRpb25zLnByZWNpc2lvbiAhPSBudWxsICl7XG4gICAgICB2YXIgZXBzaWxvbiA9IG9wdGlvbnMucHJlY2lzaW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXBzaWxvbiA9IDAuMDAwMDAxOyAvLyBEZWZhdWx0IHByZWNpc2lvblxuICAgIH1cblxuICAgIC8vIE1heCBudW1iZXIgb2YgaXRlcmF0aW9ucyAtIG9wdGlvbmFsXG4gICAgaWYoIG9wdGlvbnMgIT0gbnVsbCAmJlxuICAgICAgb3B0aW9ucy5pdGVyYXRpb25zICE9IG51bGwgKXtcbiAgICAgIHZhciBudW1JdGVyID0gb3B0aW9ucy5pdGVyYXRpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbnVtSXRlciA9IDIwMDsgLy8gRGVmYXVsdCBudW1iZXIgb2YgaXRlcmF0aW9uc1xuICAgIH1cblxuICAgIC8vIFdlaWdodCBmdW5jdGlvbiAtIG9wdGlvbmFsXG4gICAgaWYoIG9wdGlvbnMgIT0gbnVsbCAmJlxuICAgICAgb3B0aW9ucy53ZWlnaHQgIT0gbnVsbCAmJlxuICAgICAgaXMuZm4oIG9wdGlvbnMud2VpZ2h0ICkgKXtcbiAgICAgIHZhciB3ZWlnaHRGbiA9IG9wdGlvbnMud2VpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBub3Qgc3BlY2lmaWVkLCBhc3N1bWUgZWFjaCBlZGdlIGhhcyBlcXVhbCB3ZWlnaHQgKDEpXG4gICAgICB2YXIgd2VpZ2h0Rm4gPSBmdW5jdGlvbiggZSApe3JldHVybiAxO307XG4gICAgfVxuXG4gICAgdmFyIGN5ID0gdGhpcy5fcHJpdmF0ZS5jeTtcbiAgICB2YXIgZWRnZXMgPSB0aGlzLmVkZ2VzKCkuc3RkRmlsdGVyKCBmdW5jdGlvbiggZSApeyByZXR1cm4gIWUuaXNMb29wKCk7IH0gKTtcbiAgICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzKCk7XG4gICAgdmFyIG51bU5vZGVzID0gbm9kZXMubGVuZ3RoO1xuICAgIHZhciBudW1FZGdlcyA9IGVkZ2VzLmxlbmd0aDtcblxuICAgIC8vIENyZWF0ZSBudW1lcmljYWwgaWRlbnRpZmllcnMgZm9yIGVhY2ggbm9kZVxuICAgIC8vIG1hcHBpbmc6IG5vZGUgaWQgLT4gcG9zaXRpb24gaW4gbm9kZXMgYXJyYXlcbiAgICAvLyBmb3IgcmV2ZXJzZSBtYXBwaW5nLCBzaW1wbHkgdXNlIG5vZGVzIGFycmF5XG4gICAgdmFyIGlkMnBvc2l0aW9uID0ge307XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBudW1Ob2RlczsgaSsrICl7XG4gICAgICBpZDJwb3NpdGlvblsgbm9kZXNbIGkgXS5pZCgpIF0gPSBpO1xuICAgIH1cblxuICAgIC8vIENvbnN0cnVjdCB0cmFuc3Bvc2VkIGFkamFjZW5jeSBtYXRyaXhcbiAgICAvLyBGaXJzdCBsZXRzIGhhdmUgYSB6ZXJvZWQgbWF0cml4IG9mIHRoZSByaWdodCBzaXplXG4gICAgLy8gV2UnbGwgYWxzbyBrZWVwIHRyYWNrIG9mIHRoZSBzdW0gb2YgZWFjaCBjb2x1bW5cbiAgICB2YXIgbWF0cml4ID0gW107XG4gICAgdmFyIGNvbHVtblN1bSA9IFtdO1xuICAgIHZhciBhZGRpdGlvbmFsUHJvYiA9ICgxIC0gZGFtcGluZ0ZhY3RvcikgLyBudW1Ob2RlcztcblxuICAgIC8vIENyZWF0ZSBudWxsIG1hdHJpY1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbnVtTm9kZXM7IGkrKyApe1xuICAgICAgdmFyIG5ld1JvdyA9IFtdO1xuICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBudW1Ob2RlczsgaisrICl7XG4gICAgICAgIG5ld1Jvdy5wdXNoKCAwLjAgKTtcbiAgICAgIH1cbiAgICAgIG1hdHJpeC5wdXNoKCBuZXdSb3cgKTtcbiAgICAgIGNvbHVtblN1bS5wdXNoKCAwLjAgKTtcbiAgICB9XG5cbiAgICAvLyBOb3csIHByb2Nlc3MgZWRnZXNcbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IG51bUVkZ2VzOyBpKysgKXtcbiAgICAgIHZhciBlZGdlID0gZWRnZXNbIGkgXTtcbiAgICAgIHZhciBzID0gaWQycG9zaXRpb25bIGVkZ2Uuc291cmNlKCkuaWQoKSBdO1xuICAgICAgdmFyIHQgPSBpZDJwb3NpdGlvblsgZWRnZS50YXJnZXQoKS5pZCgpIF07XG4gICAgICB2YXIgdyA9IHdlaWdodEZuLmFwcGx5KCBlZGdlLCBbIGVkZ2UgXSApO1xuXG4gICAgICAvLyBVcGRhdGUgbWF0cml4XG4gICAgICBtYXRyaXhbIHQgXVsgcyBdICs9IHc7XG5cbiAgICAgIC8vIFVwZGF0ZSBjb2x1bW4gc3VtXG4gICAgICBjb2x1bW5TdW1bIHMgXSArPSB3O1xuICAgIH1cblxuICAgIC8vIEFkZCBhZGRpdGlvbmFsIHByb2JhYmlsaXR5IGJhc2VkIG9uIGRhbXBpbmcgZmFjdG9yXG4gICAgLy8gQWxzbywgdGFrZSBpbnRvIGFjY291bnQgY29sdW1ucyB0aGF0IGhhdmUgc3VtID0gMFxuICAgIHZhciBwID0gMS4wIC8gbnVtTm9kZXMgKyBhZGRpdGlvbmFsUHJvYjsgLy8gU2hvcnRoYW5kXG4gICAgLy8gVHJhdmVyc2UgbWF0cml4LCBjb2x1bW4gYnkgY29sdW1uXG4gICAgZm9yKCB2YXIgaiA9IDA7IGogPCBudW1Ob2RlczsgaisrICl7XG4gICAgICBpZiggY29sdW1uU3VtWyBqIF0gPT09IDAgKXtcbiAgICAgICAgLy8gTm8gJ2xpbmtzJyBvdXQgZnJvbSBub2RlIGp0aCwgYXNzdW1lIGVxdWFsIHByb2JhYmlsaXR5IGZvciBlYWNoIHBvc3NpYmxlIG5vZGVcbiAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBudW1Ob2RlczsgaSsrICl7XG4gICAgICAgICAgbWF0cml4WyBpIF1bIGogXSA9IHA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vZGUganRoIGhhcyBvdXRnb2luZyBsaW5rLCBjb21wdXRlIG5vcm1hbGl6ZWQgcHJvYmFiaWxpdGllc1xuICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8IG51bU5vZGVzOyBpKysgKXtcbiAgICAgICAgICBtYXRyaXhbIGkgXVsgaiBdID0gbWF0cml4WyBpIF1bIGogXSAvIGNvbHVtblN1bVsgaiBdICsgYWRkaXRpb25hbFByb2I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb21wdXRlIGRvbWluYW50IGVpZ2VudmVjdG9yIHVzaW5nIHBvd2VyIG1ldGhvZFxuICAgIHZhciBlaWdlbnZlY3RvciA9IFtdO1xuICAgIHZhciBudWxsVmVjdG9yID0gW107XG4gICAgdmFyIHByZXZpb3VzO1xuXG4gICAgLy8gU3RhcnQgd2l0aCBhIHZlY3RvciBvZiBhbGwgMSdzXG4gICAgLy8gQWxzbywgaW5pdGlhbGl6ZSBhIG51bGwgdmVjdG9yIHdoaWNoIHdpbGwgYmUgdXNlZCBhcyBzaG9ydGhhbmRcbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IG51bU5vZGVzOyBpKysgKXtcbiAgICAgIGVpZ2VudmVjdG9yLnB1c2goIDEuMCApO1xuICAgICAgbnVsbFZlY3Rvci5wdXNoKCAwLjAgKTtcbiAgICB9XG5cbiAgICBmb3IoIHZhciBpdGVyID0gMDsgaXRlciA8IG51bUl0ZXI7IGl0ZXIrKyApe1xuICAgICAgLy8gTmV3IGFycmF5IHdpdGggYWxsIDAnc1xuICAgICAgdmFyIHRlbXAgPSBudWxsVmVjdG9yLnNsaWNlKCAwICk7XG5cbiAgICAgIC8vIE11bHRpcGx5IG1hdHJpeCB3aXRoIHByZXZpb3VzIHJlc3VsdFxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBudW1Ob2RlczsgaSsrICl7XG4gICAgICAgIGZvciggdmFyIGogPSAwOyBqIDwgbnVtTm9kZXM7IGorKyApe1xuICAgICAgICAgIHRlbXBbIGkgXSArPSBtYXRyaXhbIGkgXVsgaiBdICogZWlnZW52ZWN0b3JbIGogXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBub3JtYWxpemVWZWN0b3IoIHRlbXAgKTtcbiAgICAgIHByZXZpb3VzID0gZWlnZW52ZWN0b3I7XG4gICAgICBlaWdlbnZlY3RvciA9IHRlbXA7XG5cbiAgICAgIHZhciBkaWZmID0gMDtcbiAgICAgIC8vIENvbXB1dGUgZGlmZmVyZW5jZSAoc3F1YXJlZCBtb2R1bGUpIG9mIGJvdGggdmVjdG9yc1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBudW1Ob2RlczsgaSsrICl7XG4gICAgICAgIGRpZmYgKz0gTWF0aC5wb3coIHByZXZpb3VzWyBpIF0gLSBlaWdlbnZlY3RvclsgaSBdLCAyICk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGRpZmZlcmVuY2UgaXMgbGVzcyB0aGFuIHRoZSBkZXNpcmVkIHRocmVzaG9sZCwgc3RvcCBpdGVyYXRpbmdcbiAgICAgIGlmKCBkaWZmIDwgZXBzaWxvbiApe1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb25zdHJ1Y3QgcmVzdWx0XG4gICAgdmFyIHJlcyA9IHtcbiAgICAgIHJhbms6IGZ1bmN0aW9uKCBub2RlICl7XG4gICAgICAgIGlmKCBpcy5zdHJpbmcoIG5vZGUgKSApe1xuICAgICAgICAgIC8vIGlzIGEgc2VsZWN0b3Igc3RyaW5nXG4gICAgICAgICAgdmFyIG5vZGVJZCA9IChjeS5maWx0ZXIoIG5vZGUgKVswXSkuaWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBpcyBhIG5vZGUgb2JqZWN0XG4gICAgICAgICAgdmFyIG5vZGVJZCA9IG5vZGUuaWQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWlnZW52ZWN0b3JbIGlkMnBvc2l0aW9uWyBub2RlSWQgXSBdO1xuICAgICAgfVxuICAgIH07XG5cblxuICAgIHJldHVybiByZXM7XG4gIH0gLy8gcGFnZVJhbmtcblxufSk7IC8vIGVsZXNmblxuXG5tb2R1bGUuZXhwb3J0cyA9IGVsZXNmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoICcuLi9kZWZpbmUnICk7XG5cbnZhciBlbGVzZm4gPSAoe1xuICBhbmltYXRlOiBkZWZpbmUuYW5pbWF0ZSgpLFxuICBhbmltYXRpb246IGRlZmluZS5hbmltYXRpb24oKSxcbiAgYW5pbWF0ZWQ6IGRlZmluZS5hbmltYXRlZCgpLFxuICBjbGVhclF1ZXVlOiBkZWZpbmUuY2xlYXJRdWV1ZSgpLFxuICBkZWxheTogZGVmaW5lLmRlbGF5KCksXG4gIGRlbGF5QW5pbWF0aW9uOiBkZWZpbmUuZGVsYXlBbmltYXRpb24oKSxcbiAgc3RvcDogZGVmaW5lLnN0b3AoKVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZWxlc2ZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoICcuLi91dGlsJyApO1xuXG52YXIgZWxlc2ZuID0gKHtcbiAgY2xhc3NlczogZnVuY3Rpb24oIGNsYXNzZXMgKXtcbiAgICBjbGFzc2VzID0gY2xhc3Nlcy5tYXRjaCggL1xcUysvZyApIHx8IFtdO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY2hhbmdlZCA9IFtdO1xuICAgIHZhciBjbGFzc2VzTWFwID0ge307XG5cbiAgICAvLyBmaWxsIGluIGNsYXNzZXMgbWFwXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrICl7XG4gICAgICB2YXIgY2xzID0gY2xhc3Nlc1sgaSBdO1xuXG4gICAgICBjbGFzc2VzTWFwWyBjbHMgXSA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgYW5kIHVwZGF0ZSBlYWNoIGVsZVxuICAgIGZvciggdmFyIGogPSAwOyBqIDwgc2VsZi5sZW5ndGg7IGorKyApe1xuICAgICAgdmFyIGVsZSA9IHNlbGZbIGogXTtcbiAgICAgIHZhciBfcCA9IGVsZS5fcHJpdmF0ZTtcbiAgICAgIHZhciBlbGVDbGFzc2VzID0gX3AuY2xhc3NlcztcbiAgICAgIHZhciBjaGFuZ2VkRWxlID0gZmFsc2U7XG5cbiAgICAgIC8vIGNoZWNrIGlmIGVsZSBoYXMgYWxsIG9mIHRoZSBwYXNzZWQgY2xhc3Nlc1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBjbHMgPSBjbGFzc2VzWyBpIF07XG4gICAgICAgIHZhciBlbGVIYXNDbGFzcyA9IGVsZUNsYXNzZXNbIGNscyBdO1xuXG4gICAgICAgIGlmKCAhZWxlSGFzQ2xhc3MgKXtcbiAgICAgICAgICBjaGFuZ2VkRWxlID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBpZiBlbGUgaGFzIGNsYXNzZXMgb3V0c2lkZSBvZiB0aG9zZSBwYXNzZWRcbiAgICAgIGlmKCAhY2hhbmdlZEVsZSApe1xuICAgICAgICB2YXIgY2xhc3NlcyA9IE9iamVjdC5rZXlzKCBlbGVDbGFzc2VzICk7XG5cbiAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgICAgdmFyIGVsZUNscyA9IGNsYXNzZXNbaV07XG4gICAgICAgICAgdmFyIGVsZUhhc0NsYXNzID0gZWxlQ2xhc3Nlc1sgZWxlQ2xzIF07XG4gICAgICAgICAgdmFyIHNwZWNkQ2xhc3MgPSBjbGFzc2VzTWFwWyBlbGVDbHMgXTsgLy8gaS5lLiB0aGlzIGNsYXNzIGlzIHBhc3NlZCB0byB0aGUgZnVuY3Rpb25cblxuICAgICAgICAgIGlmKCBlbGVIYXNDbGFzcyAmJiAhc3BlY2RDbGFzcyApe1xuICAgICAgICAgICAgY2hhbmdlZEVsZSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYoIGNoYW5nZWRFbGUgKXtcbiAgICAgICAgX3AuY2xhc3NlcyA9IHV0aWwuY29weSggY2xhc3Nlc01hcCApO1xuXG4gICAgICAgIGNoYW5nZWQucHVzaCggZWxlICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdHJpZ2dlciB1cGRhdGUgc3R5bGUgb24gdGhvc2UgZWxlcyB0aGF0IGhhZCBjbGFzcyBjaGFuZ2VzXG4gICAgaWYoIGNoYW5nZWQubGVuZ3RoID4gMCApe1xuICAgICAgdGhpcy5zcGF3biggY2hhbmdlZCApXG4gICAgICAgIC51cGRhdGVTdHlsZSgpXG4gICAgICAgIC50cmlnZ2VyKCAnY2xhc3MnIClcbiAgICAgIDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcblxuICBhZGRDbGFzczogZnVuY3Rpb24oIGNsYXNzZXMgKXtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVDbGFzcyggY2xhc3NlcywgdHJ1ZSApO1xuICB9LFxuXG4gIGhhc0NsYXNzOiBmdW5jdGlvbiggY2xhc3NOYW1lICl7XG4gICAgdmFyIGVsZSA9IHRoaXNbMF07XG4gICAgcmV0dXJuICggZWxlICE9IG51bGwgJiYgZWxlLl9wcml2YXRlLmNsYXNzZXNbIGNsYXNzTmFtZSBdICkgPyB0cnVlIDogZmFsc2U7XG4gIH0sXG5cbiAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCBjbGFzc2VzU3RyLCB0b2dnbGUgKXtcbiAgICB2YXIgY2xhc3NlcyA9IGNsYXNzZXNTdHIubWF0Y2goIC9cXFMrL2cgKSB8fCBbXTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGNoYW5nZWQgPSBbXTsgLy8gZWxlcyB3aG8gaGFkIGNsYXNzZXMgY2hhbmdlZFxuXG4gICAgZm9yKCB2YXIgaSA9IDAsIGlsID0gc2VsZi5sZW5ndGg7IGkgPCBpbDsgaSsrICl7XG4gICAgICB2YXIgZWxlID0gc2VsZlsgaSBdO1xuICAgICAgdmFyIGNoYW5nZWRFbGUgPSBmYWxzZTtcblxuICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBjbGFzc2VzLmxlbmd0aDsgaisrICl7XG4gICAgICAgIHZhciBjbHMgPSBjbGFzc2VzWyBqIF07XG4gICAgICAgIHZhciBlbGVDbGFzc2VzID0gZWxlLl9wcml2YXRlLmNsYXNzZXM7XG4gICAgICAgIHZhciBoYXNDbGFzcyA9IGVsZUNsYXNzZXNbIGNscyBdO1xuICAgICAgICB2YXIgc2hvdWxkQWRkID0gdG9nZ2xlIHx8ICh0b2dnbGUgPT09IHVuZGVmaW5lZCAmJiAhaGFzQ2xhc3MpO1xuXG4gICAgICAgIGlmKCBzaG91bGRBZGQgKXtcbiAgICAgICAgICBlbGVDbGFzc2VzWyBjbHMgXSA9IHRydWU7XG5cbiAgICAgICAgICBpZiggIWhhc0NsYXNzICYmICFjaGFuZ2VkRWxlICl7XG4gICAgICAgICAgICBjaGFuZ2VkLnB1c2goIGVsZSApO1xuICAgICAgICAgICAgY2hhbmdlZEVsZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgeyAvLyB0aGVuIHJlbW92ZVxuICAgICAgICAgIGVsZUNsYXNzZXNbIGNscyBdID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiggaGFzQ2xhc3MgJiYgIWNoYW5nZWRFbGUgKXtcbiAgICAgICAgICAgIGNoYW5nZWQucHVzaCggZWxlICk7XG4gICAgICAgICAgICBjaGFuZ2VkRWxlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfSAvLyBmb3IgaiBjbGFzc2VzXG4gICAgfSAvLyBmb3IgaSBlbGVzXG5cbiAgICAvLyB0cmlnZ2VyIHVwZGF0ZSBzdHlsZSBvbiB0aG9zZSBlbGVzIHRoYXQgaGFkIGNsYXNzIGNoYW5nZXNcbiAgICBpZiggY2hhbmdlZC5sZW5ndGggPiAwICl7XG4gICAgICB0aGlzLnNwYXduKCBjaGFuZ2VkIClcbiAgICAgICAgLnVwZGF0ZVN0eWxlKClcbiAgICAgICAgLnRyaWdnZXIoICdjbGFzcycgKVxuICAgICAgO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuXG4gIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggY2xhc3NlcyApe1xuICAgIHJldHVybiB0aGlzLnRvZ2dsZUNsYXNzKCBjbGFzc2VzLCBmYWxzZSApO1xuICB9LFxuXG4gIGZsYXNoQ2xhc3M6IGZ1bmN0aW9uKCBjbGFzc2VzLCBkdXJhdGlvbiApe1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGlmKCBkdXJhdGlvbiA9PSBudWxsICl7XG4gICAgICBkdXJhdGlvbiA9IDI1MDtcbiAgICB9IGVsc2UgaWYoIGR1cmF0aW9uID09PSAwICl7XG4gICAgICByZXR1cm4gc2VsZjsgLy8gbm90aGluZyB0byBkbyByZWFsbHlcbiAgICB9XG5cbiAgICBzZWxmLmFkZENsYXNzKCBjbGFzc2VzICk7XG4gICAgc2V0VGltZW91dCggZnVuY3Rpb24oKXtcbiAgICAgIHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzZXMgKTtcbiAgICB9LCBkdXJhdGlvbiApO1xuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVsZXNmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVsZXNmbiA9ICh7XG4gIGFsbEFyZTogZnVuY3Rpb24oIHNlbGVjdG9yICl7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyKCBzZWxlY3RvciApLmxlbmd0aCA9PT0gdGhpcy5sZW5ndGg7XG4gIH0sXG5cbiAgaXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApe1xuICAgIHJldHVybiB0aGlzLmZpbHRlciggc2VsZWN0b3IgKS5sZW5ndGggPiAwO1xuICB9LFxuXG4gIHNvbWU6IGZ1bmN0aW9uKCBmbiwgdGhpc0FyZyApe1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIHJldCA9ICF0aGlzQXJnID8gZm4oIHRoaXNbIGkgXSwgaSwgdGhpcyApIDogZm4uYXBwbHkoIHRoaXNBcmcsIFsgdGhpc1sgaSBdLCBpLCB0aGlzIF0gKTtcblxuICAgICAgaWYoIHJldCApe1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgZXZlcnk6IGZ1bmN0aW9uKCBmbiwgdGhpc0FyZyApe1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIHJldCA9ICF0aGlzQXJnID8gZm4oIHRoaXNbIGkgXSwgaSwgdGhpcyApIDogZm4uYXBwbHkoIHRoaXNBcmcsIFsgdGhpc1sgaSBdLCBpLCB0aGlzIF0gKTtcblxuICAgICAgaWYoICFyZXQgKXtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIHNhbWU6IGZ1bmN0aW9uKCBjb2xsZWN0aW9uICl7XG4gICAgY29sbGVjdGlvbiA9IHRoaXMuY3koKS5jb2xsZWN0aW9uKCBjb2xsZWN0aW9uICk7XG5cbiAgICAvLyBjaGVhcCBleHRyYSBjaGVja1xuICAgIGlmKCB0aGlzLmxlbmd0aCAhPT0gY29sbGVjdGlvbi5sZW5ndGggKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3QoIGNvbGxlY3Rpb24gKS5sZW5ndGggPT09IHRoaXMubGVuZ3RoO1xuICB9LFxuXG4gIGFueVNhbWU6IGZ1bmN0aW9uKCBjb2xsZWN0aW9uICl7XG4gICAgY29sbGVjdGlvbiA9IHRoaXMuY3koKS5jb2xsZWN0aW9uKCBjb2xsZWN0aW9uICk7XG5cbiAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3QoIGNvbGxlY3Rpb24gKS5sZW5ndGggPiAwO1xuICB9LFxuXG4gIGFsbEFyZU5laWdoYm9yczogZnVuY3Rpb24oIGNvbGxlY3Rpb24gKXtcbiAgICBjb2xsZWN0aW9uID0gdGhpcy5jeSgpLmNvbGxlY3Rpb24oIGNvbGxlY3Rpb24gKTtcblxuICAgIHJldHVybiB0aGlzLm5laWdoYm9yaG9vZCgpLmludGVyc2VjdCggY29sbGVjdGlvbiApLmxlbmd0aCA9PT0gY29sbGVjdGlvbi5sZW5ndGg7XG4gIH0sXG5cbiAgY29udGFpbnM6IGZ1bmN0aW9uKCBjb2xsZWN0aW9uICl7XG4gICAgY29sbGVjdGlvbiA9IHRoaXMuY3koKS5jb2xsZWN0aW9uKCBjb2xsZWN0aW9uICk7XG5cbiAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3QoIGNvbGxlY3Rpb24gKS5sZW5ndGggPT09IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICB9XG59KTtcblxuZWxlc2ZuLmFsbEFyZU5laWdoYm91cnMgPSBlbGVzZm4uYWxsQXJlTmVpZ2hib3JzO1xuZWxlc2ZuLmhhcyA9IGVsZXNmbi5jb250YWlucztcblxubW9kdWxlLmV4cG9ydHMgPSBlbGVzZm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbGVzZm4gPSAoe1xuICBwYXJlbnQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApe1xuICAgIHZhciBwYXJlbnRzID0gW107XG4gICAgdmFyIGN5ID0gdGhpcy5fcHJpdmF0ZS5jeTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGVsZSA9IHRoaXNbIGkgXTtcbiAgICAgIHZhciBwYXJlbnQgPSBjeS5nZXRFbGVtZW50QnlJZCggZWxlLl9wcml2YXRlLmRhdGEucGFyZW50ICk7XG5cbiAgICAgIGlmKCBwYXJlbnQuc2l6ZSgpID4gMCApe1xuICAgICAgICBwYXJlbnRzLnB1c2goIHBhcmVudCApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNwYXduKCBwYXJlbnRzLCB7IHVuaXF1ZTogdHJ1ZSB9ICkuZmlsdGVyKCBzZWxlY3RvciApO1xuICB9LFxuXG4gIHBhcmVudHM6IGZ1bmN0aW9uKCBzZWxlY3RvciApe1xuICAgIHZhciBwYXJlbnRzID0gW107XG5cbiAgICB2YXIgZWxlcyA9IHRoaXMucGFyZW50KCk7XG4gICAgd2hpbGUoIGVsZXMubm9uZW1wdHkoKSApe1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBlbGUgPSBlbGVzWyBpIF07XG4gICAgICAgIHBhcmVudHMucHVzaCggZWxlICk7XG4gICAgICB9XG5cbiAgICAgIGVsZXMgPSBlbGVzLnBhcmVudCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNwYXduKCBwYXJlbnRzLCB7IHVuaXF1ZTogdHJ1ZSB9ICkuZmlsdGVyKCBzZWxlY3RvciApO1xuICB9LFxuXG4gIGNvbW1vbkFuY2VzdG9yczogZnVuY3Rpb24oIHNlbGVjdG9yICl7XG4gICAgdmFyIGFuY2VzdG9ycztcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGVsZSA9IHRoaXNbIGkgXTtcbiAgICAgIHZhciBwYXJlbnRzID0gZWxlLnBhcmVudHMoKTtcblxuICAgICAgYW5jZXN0b3JzID0gYW5jZXN0b3JzIHx8IHBhcmVudHM7XG5cbiAgICAgIGFuY2VzdG9ycyA9IGFuY2VzdG9ycy5pbnRlcnNlY3QoIHBhcmVudHMgKTsgLy8gY3VycmVudCBsaXN0IG11c3QgYmUgY29tbW9uIHdpdGggY3VycmVudCBlbGUgcGFyZW50cyBzZXRcbiAgICB9XG5cbiAgICByZXR1cm4gYW5jZXN0b3JzLmZpbHRlciggc2VsZWN0b3IgKTtcbiAgfSxcblxuICBvcnBoYW5zOiBmdW5jdGlvbiggc2VsZWN0b3IgKXtcbiAgICByZXR1cm4gdGhpcy5zdGRGaWx0ZXIoIGZ1bmN0aW9uKCBlbGUgKXtcbiAgICAgIHJldHVybiBlbGUuaXNOb2RlKCkgJiYgZWxlLnBhcmVudCgpLmVtcHR5KCk7XG4gICAgfSApLmZpbHRlciggc2VsZWN0b3IgKTtcbiAgfSxcblxuICBub25vcnBoYW5zOiBmdW5jdGlvbiggc2VsZWN0b3IgKXtcbiAgICByZXR1cm4gdGhpcy5zdGRGaWx0ZXIoIGZ1bmN0aW9uKCBlbGUgKXtcbiAgICAgIHJldHVybiBlbGUuaXNOb2RlKCkgJiYgZWxlLnBhcmVudCgpLm5vbmVtcHR5KCk7XG4gICAgfSApLmZpbHRlciggc2VsZWN0b3IgKTtcbiAgfSxcblxuICBjaGlsZHJlbjogZnVuY3Rpb24oIHNlbGVjdG9yICl7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG5cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBlbGUgPSB0aGlzWyBpIF07XG4gICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmNvbmNhdCggZWxlLl9wcml2YXRlLmNoaWxkcmVuICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3Bhd24oIGNoaWxkcmVuLCB7IHVuaXF1ZTogdHJ1ZSB9ICkuZmlsdGVyKCBzZWxlY3RvciApO1xuICB9LFxuXG4gIHNpYmxpbmdzOiBmdW5jdGlvbiggc2VsZWN0b3IgKXtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQoKS5jaGlsZHJlbigpLm5vdCggdGhpcyApLmZpbHRlciggc2VsZWN0b3IgKTtcbiAgfSxcblxuICBpc1BhcmVudDogZnVuY3Rpb24oKXtcbiAgICB2YXIgZWxlID0gdGhpc1swXTtcblxuICAgIGlmKCBlbGUgKXtcbiAgICAgIHJldHVybiBlbGUuX3ByaXZhdGUuY2hpbGRyZW4ubGVuZ3RoICE9PSAwO1xuICAgIH1cbiAgfSxcblxuICBpc0NoaWxkOiBmdW5jdGlvbigpe1xuICAgIHZhciBlbGUgPSB0aGlzWzBdO1xuXG4gICAgaWYoIGVsZSApe1xuICAgICAgcmV0dXJuIGVsZS5fcHJpdmF0ZS5kYXRhLnBhcmVudCAhPT0gdW5kZWZpbmVkICYmIGVsZS5wYXJlbnQoKS5sZW5ndGggIT09IDA7XG4gICAgfVxuICB9LFxuXG4gIGRlc2NlbmRhbnRzOiBmdW5jdGlvbiggc2VsZWN0b3IgKXtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGFkZCggZWxlcyApe1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBlbGUgPSBlbGVzWyBpIF07XG5cbiAgICAgICAgZWxlbWVudHMucHVzaCggZWxlICk7XG5cbiAgICAgICAgaWYoIGVsZS5jaGlsZHJlbigpLm5vbmVtcHR5KCkgKXtcbiAgICAgICAgICBhZGQoIGVsZS5jaGlsZHJlbigpICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhZGQoIHRoaXMuY2hpbGRyZW4oKSApO1xuXG4gICAgcmV0dXJuIHRoaXMuc3Bhd24oIGVsZW1lbnRzLCB7IHVuaXF1ZTogdHJ1ZSB9ICkuZmlsdGVyKCBzZWxlY3RvciApO1xuICB9XG59KTtcblxuLy8gYWxpYXNlc1xuZWxlc2ZuLmFuY2VzdG9ycyA9IGVsZXNmbi5wYXJlbnRzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVsZXNmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoICcuLi9kZWZpbmUnICk7XG52YXIgZm4sIGVsZXNmbjtcblxuZm4gPSBlbGVzZm4gPSAoe1xuXG4gIGRhdGE6IGRlZmluZS5kYXRhKCB7XG4gICAgZmllbGQ6ICdkYXRhJyxcbiAgICBiaW5kaW5nRXZlbnQ6ICdkYXRhJyxcbiAgICBhbGxvd0JpbmRpbmc6IHRydWUsXG4gICAgYWxsb3dTZXR0aW5nOiB0cnVlLFxuICAgIHNldHRpbmdFdmVudDogJ2RhdGEnLFxuICAgIHNldHRpbmdUcmlnZ2Vyc0V2ZW50OiB0cnVlLFxuICAgIHRyaWdnZXJGbk5hbWU6ICd0cmlnZ2VyJyxcbiAgICBhbGxvd0dldHRpbmc6IHRydWUsXG4gICAgaW1tdXRhYmxlS2V5czoge1xuICAgICAgJ2lkJzogdHJ1ZSxcbiAgICAgICdzb3VyY2UnOiB0cnVlLFxuICAgICAgJ3RhcmdldCc6IHRydWUsXG4gICAgICAncGFyZW50JzogdHJ1ZVxuICAgIH0sXG4gICAgdXBkYXRlU3R5bGU6IHRydWVcbiAgfSApLFxuXG4gIHJlbW92ZURhdGE6IGRlZmluZS5yZW1vdmVEYXRhKCB7XG4gICAgZmllbGQ6ICdkYXRhJyxcbiAgICBldmVudDogJ2RhdGEnLFxuICAgIHRyaWdnZXJGbk5hbWU6ICd0cmlnZ2VyJyxcbiAgICB0cmlnZ2VyRXZlbnQ6IHRydWUsXG4gICAgaW1tdXRhYmxlS2V5czoge1xuICAgICAgJ2lkJzogdHJ1ZSxcbiAgICAgICdzb3VyY2UnOiB0cnVlLFxuICAgICAgJ3RhcmdldCc6IHRydWUsXG4gICAgICAncGFyZW50JzogdHJ1ZVxuICAgIH0sXG4gICAgdXBkYXRlU3R5bGU6IHRydWVcbiAgfSApLFxuXG4gIHNjcmF0Y2g6IGRlZmluZS5kYXRhKCB7XG4gICAgZmllbGQ6ICdzY3JhdGNoJyxcbiAgICBiaW5kaW5nRXZlbnQ6ICdzY3JhdGNoJyxcbiAgICBhbGxvd0JpbmRpbmc6IHRydWUsXG4gICAgYWxsb3dTZXR0aW5nOiB0cnVlLFxuICAgIHNldHRpbmdFdmVudDogJ3NjcmF0Y2gnLFxuICAgIHNldHRpbmdUcmlnZ2Vyc0V2ZW50OiB0cnVlLFxuICAgIHRyaWdnZXJGbk5hbWU6ICd0cmlnZ2VyJyxcbiAgICBhbGxvd0dldHRpbmc6IHRydWUsXG4gICAgdXBkYXRlU3R5bGU6IHRydWVcbiAgfSApLFxuXG4gIHJlbW92ZVNjcmF0Y2g6IGRlZmluZS5yZW1vdmVEYXRhKCB7XG4gICAgZmllbGQ6ICdzY3JhdGNoJyxcbiAgICBldmVudDogJ3NjcmF0Y2gnLFxuICAgIHRyaWdnZXJGbk5hbWU6ICd0cmlnZ2VyJyxcbiAgICB0cmlnZ2VyRXZlbnQ6IHRydWUsXG4gICAgdXBkYXRlU3R5bGU6IHRydWVcbiAgfSApLFxuXG4gIHJzY3JhdGNoOiBkZWZpbmUuZGF0YSgge1xuICAgIGZpZWxkOiAncnNjcmF0Y2gnLFxuICAgIGFsbG93QmluZGluZzogZmFsc2UsXG4gICAgYWxsb3dTZXR0aW5nOiB0cnVlLFxuICAgIHNldHRpbmdUcmlnZ2Vyc0V2ZW50OiBmYWxzZSxcbiAgICBhbGxvd0dldHRpbmc6IHRydWVcbiAgfSApLFxuXG4gIHJlbW92ZVJzY3JhdGNoOiBkZWZpbmUucmVtb3ZlRGF0YSgge1xuICAgIGZpZWxkOiAncnNjcmF0Y2gnLFxuICAgIHRyaWdnZXJFdmVudDogZmFsc2VcbiAgfSApLFxuXG4gIGlkOiBmdW5jdGlvbigpe1xuICAgIHZhciBlbGUgPSB0aGlzWzBdO1xuXG4gICAgaWYoIGVsZSApe1xuICAgICAgcmV0dXJuIGVsZS5fcHJpdmF0ZS5kYXRhLmlkO1xuICAgIH1cbiAgfVxuXG59KTtcblxuLy8gYWxpYXNlc1xuZm4uYXR0ciA9IGZuLmRhdGE7XG5mbi5yZW1vdmVBdHRyID0gZm4ucmVtb3ZlRGF0YTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbGVzZm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSggJy4uL3V0aWwnICk7XG5cbnZhciBlbGVzZm4gPSB7fTtcblxuZnVuY3Rpb24gZGVmaW5lRGVncmVlRnVuY3Rpb24oIGNhbGxiYWNrICl7XG4gIHJldHVybiBmdW5jdGlvbiggaW5jbHVkZUxvb3BzICl7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYoIGluY2x1ZGVMb29wcyA9PT0gdW5kZWZpbmVkICl7XG4gICAgICBpbmNsdWRlTG9vcHMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmKCBzZWxmLmxlbmd0aCA9PT0gMCApeyByZXR1cm47IH1cblxuICAgIGlmKCBzZWxmLmlzTm9kZSgpICYmICFzZWxmLnJlbW92ZWQoKSApe1xuICAgICAgdmFyIGRlZ3JlZSA9IDA7XG4gICAgICB2YXIgbm9kZSA9IHNlbGZbMF07XG4gICAgICB2YXIgY29ubmVjdGVkRWRnZXMgPSBub2RlLl9wcml2YXRlLmVkZ2VzO1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGNvbm5lY3RlZEVkZ2VzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBlZGdlID0gY29ubmVjdGVkRWRnZXNbIGkgXTtcblxuICAgICAgICBpZiggIWluY2x1ZGVMb29wcyAmJiBlZGdlLmlzTG9vcCgpICl7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBkZWdyZWUgKz0gY2FsbGJhY2soIG5vZGUsIGVkZ2UgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlZ3JlZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfTtcbn1cblxudXRpbC5leHRlbmQoIGVsZXNmbiwge1xuICBkZWdyZWU6IGRlZmluZURlZ3JlZUZ1bmN0aW9uKCBmdW5jdGlvbiggbm9kZSwgZWRnZSApe1xuICAgIGlmKCBlZGdlLnNvdXJjZSgpLnNhbWUoIGVkZ2UudGFyZ2V0KCkgKSApe1xuICAgICAgcmV0dXJuIDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfSApLFxuXG4gIGluZGVncmVlOiBkZWZpbmVEZWdyZWVGdW5jdGlvbiggZnVuY3Rpb24oIG5vZGUsIGVkZ2UgKXtcbiAgICBpZiggZWRnZS50YXJnZXQoKS5zYW1lKCBub2RlICkgKXtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH0gKSxcblxuICBvdXRkZWdyZWU6IGRlZmluZURlZ3JlZUZ1bmN0aW9uKCBmdW5jdGlvbiggbm9kZSwgZWRnZSApe1xuICAgIGlmKCBlZGdlLnNvdXJjZSgpLnNhbWUoIG5vZGUgKSApe1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfSApXG59ICk7XG5cbmZ1bmN0aW9uIGRlZmluZURlZ3JlZUJvdW5kc0Z1bmN0aW9uKCBkZWdyZWVGbiwgY2FsbGJhY2sgKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKCBpbmNsdWRlTG9vcHMgKXtcbiAgICB2YXIgcmV0O1xuICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXMoKTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBlbGUgPSBub2Rlc1sgaSBdO1xuICAgICAgdmFyIGRlZ3JlZSA9IGVsZVsgZGVncmVlRm4gXSggaW5jbHVkZUxvb3BzICk7XG4gICAgICBpZiggZGVncmVlICE9PSB1bmRlZmluZWQgJiYgKHJldCA9PT0gdW5kZWZpbmVkIHx8IGNhbGxiYWNrKCBkZWdyZWUsIHJldCApKSApe1xuICAgICAgICByZXQgPSBkZWdyZWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfTtcbn1cblxudXRpbC5leHRlbmQoIGVsZXNmbiwge1xuICBtaW5EZWdyZWU6IGRlZmluZURlZ3JlZUJvdW5kc0Z1bmN0aW9uKCAnZGVncmVlJywgZnVuY3Rpb24oIGRlZ3JlZSwgbWluICl7XG4gICAgcmV0dXJuIGRlZ3JlZSA8IG1pbjtcbiAgfSApLFxuXG4gIG1heERlZ3JlZTogZGVmaW5lRGVncmVlQm91bmRzRnVuY3Rpb24oICdkZWdyZWUnLCBmdW5jdGlvbiggZGVncmVlLCBtYXggKXtcbiAgICByZXR1cm4gZGVncmVlID4gbWF4O1xuICB9ICksXG5cbiAgbWluSW5kZWdyZWU6IGRlZmluZURlZ3JlZUJvdW5kc0Z1bmN0aW9uKCAnaW5kZWdyZWUnLCBmdW5jdGlvbiggZGVncmVlLCBtaW4gKXtcbiAgICByZXR1cm4gZGVncmVlIDwgbWluO1xuICB9ICksXG5cbiAgbWF4SW5kZWdyZWU6IGRlZmluZURlZ3JlZUJvdW5kc0Z1bmN0aW9uKCAnaW5kZWdyZWUnLCBmdW5jdGlvbiggZGVncmVlLCBtYXggKXtcbiAgICByZXR1cm4gZGVncmVlID4gbWF4O1xuICB9ICksXG5cbiAgbWluT3V0ZGVncmVlOiBkZWZpbmVEZWdyZWVCb3VuZHNGdW5jdGlvbiggJ291dGRlZ3JlZScsIGZ1bmN0aW9uKCBkZWdyZWUsIG1pbiApe1xuICAgIHJldHVybiBkZWdyZWUgPCBtaW47XG4gIH0gKSxcblxuICBtYXhPdXRkZWdyZWU6IGRlZmluZURlZ3JlZUJvdW5kc0Z1bmN0aW9uKCAnb3V0ZGVncmVlJywgZnVuY3Rpb24oIGRlZ3JlZSwgbWF4ICl7XG4gICAgcmV0dXJuIGRlZ3JlZSA+IG1heDtcbiAgfSApXG59ICk7XG5cbnV0aWwuZXh0ZW5kKCBlbGVzZm4sIHtcbiAgdG90YWxEZWdyZWU6IGZ1bmN0aW9uKCBpbmNsdWRlTG9vcHMgKXtcbiAgICB2YXIgdG90YWwgPSAwO1xuICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXMoKTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHRvdGFsICs9IG5vZGVzWyBpIF0uZGVncmVlKCBpbmNsdWRlTG9vcHMgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdG90YWw7XG4gIH1cbn0gKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbGVzZm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCAnLi4vZGVmaW5lJyApO1xudmFyIGlzID0gcmVxdWlyZSggJy4uL2lzJyApO1xudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vdXRpbCcgKTtcbnZhciBtYXRoID0gcmVxdWlyZSggJy4uL21hdGgnICk7XG52YXIgYmFzZU5vZGVTaGFwZXMgPSByZXF1aXJlKCcuLi9leHRlbnNpb25zL3JlbmRlcmVyL2Jhc2Uvbm9kZS1zaGFwZXMnKS5ub2RlU2hhcGVzO1xudmFyIHNiZ24gPSByZXF1aXJlKCAnLi4vc2JnbicgKTtcbnZhciBmbiwgZWxlc2ZuO1xuXG5mbiA9IGVsZXNmbiA9ICh7XG5cbiAgcG9zaXRpb246IGRlZmluZS5kYXRhKCB7XG4gICAgZmllbGQ6ICdwb3NpdGlvbicsXG4gICAgYmluZGluZ0V2ZW50OiAncG9zaXRpb24nLFxuICAgIGFsbG93QmluZGluZzogdHJ1ZSxcbiAgICBhbGxvd1NldHRpbmc6IHRydWUsXG4gICAgc2V0dGluZ0V2ZW50OiAncG9zaXRpb24nLFxuICAgIHNldHRpbmdUcmlnZ2Vyc0V2ZW50OiB0cnVlLFxuICAgIHRyaWdnZXJGbk5hbWU6ICdydHJpZ2dlcicsXG4gICAgYWxsb3dHZXR0aW5nOiB0cnVlLFxuICAgIHZhbGlkS2V5czogWyAneCcsICd5JyBdLFxuICAgIG9uU2V0OiBmdW5jdGlvbiggZWxlcyApe1xuICAgICAgdmFyIHVwZGF0ZWRFbGVzID0gZWxlcy51cGRhdGVDb21wb3VuZEJvdW5kcygpO1xuICAgICAgdXBkYXRlZEVsZXMucnRyaWdnZXIoICdwb3NpdGlvbicgKTtcbiAgICB9LFxuICAgIGNhblNldDogZnVuY3Rpb24oIGVsZSApe1xuICAgICAgcmV0dXJuICFlbGUubG9ja2VkKCkgJiYgIWVsZS5pc1BhcmVudCgpO1xuICAgIH1cbiAgfSApLFxuXG4gIC8vIHBvc2l0aW9uIGJ1dCBubyBub3RpZmljYXRpb24gdG8gcmVuZGVyZXJcbiAgc2lsZW50UG9zaXRpb246IGRlZmluZS5kYXRhKCB7XG4gICAgZmllbGQ6ICdwb3NpdGlvbicsXG4gICAgYmluZGluZ0V2ZW50OiAncG9zaXRpb24nLFxuICAgIGFsbG93QmluZGluZzogZmFsc2UsXG4gICAgYWxsb3dTZXR0aW5nOiB0cnVlLFxuICAgIHNldHRpbmdFdmVudDogJ3Bvc2l0aW9uJyxcbiAgICBzZXR0aW5nVHJpZ2dlcnNFdmVudDogZmFsc2UsXG4gICAgdHJpZ2dlckZuTmFtZTogJ3RyaWdnZXInLFxuICAgIGFsbG93R2V0dGluZzogdHJ1ZSxcbiAgICB2YWxpZEtleXM6IFsgJ3gnLCAneScgXSxcbiAgICBvblNldDogZnVuY3Rpb24oIGVsZXMgKXtcbiAgICAgIGVsZXMudXBkYXRlQ29tcG91bmRCb3VuZHMoKTtcbiAgICB9LFxuICAgIGNhblNldDogZnVuY3Rpb24oIGVsZSApe1xuICAgICAgcmV0dXJuICFlbGUubG9ja2VkKCkgJiYgIWVsZS5pc1BhcmVudCgpO1xuICAgIH1cbiAgfSApLFxuXG4gIHBvc2l0aW9uczogZnVuY3Rpb24oIHBvcywgc2lsZW50ICl7XG4gICAgaWYoIGlzLnBsYWluT2JqZWN0KCBwb3MgKSApe1xuICAgICAgdGhpcy5wb3NpdGlvbiggcG9zICk7XG5cbiAgICB9IGVsc2UgaWYoIGlzLmZuKCBwb3MgKSApe1xuICAgICAgdmFyIGZuID0gcG9zO1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGVsZSA9IHRoaXNbIGkgXTtcblxuICAgICAgICB2YXIgcG9zID0gZm4uYXBwbHkoIGVsZSwgWyBpLCBlbGUgXSApO1xuXG4gICAgICAgIGlmKCBwb3MgJiYgIWVsZS5sb2NrZWQoKSAmJiAhZWxlLmlzUGFyZW50KCkgKXtcbiAgICAgICAgICB2YXIgZWxlUG9zID0gZWxlLl9wcml2YXRlLnBvc2l0aW9uO1xuICAgICAgICAgIGVsZVBvcy54ID0gcG9zLng7XG4gICAgICAgICAgZWxlUG9zLnkgPSBwb3MueTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgdXBkYXRlZEVsZXMgPSB0aGlzLnVwZGF0ZUNvbXBvdW5kQm91bmRzKCk7XG4gICAgICB2YXIgdG9UcmlnZ2VyID0gdXBkYXRlZEVsZXMubGVuZ3RoID4gMCA/IHRoaXMuYWRkKCB1cGRhdGVkRWxlcyApIDogdGhpcztcblxuICAgICAgaWYoIHNpbGVudCApe1xuICAgICAgICB0b1RyaWdnZXIudHJpZ2dlciggJ3Bvc2l0aW9uJyApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9UcmlnZ2VyLnJ0cmlnZ2VyKCAncG9zaXRpb24nICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG4gIH0sXG5cbiAgc2lsZW50UG9zaXRpb25zOiBmdW5jdGlvbiggcG9zICl7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb25zKCBwb3MsIHRydWUgKTtcbiAgfSxcblxuICAvLyBnZXQvc2V0IHRoZSByZW5kZXJlZCAoaS5lLiBvbiBzY3JlZW4pIHBvc2l0b24gb2YgdGhlIGVsZW1lbnRcbiAgcmVuZGVyZWRQb3NpdGlvbjogZnVuY3Rpb24oIGRpbSwgdmFsICl7XG4gICAgdmFyIGVsZSA9IHRoaXNbMF07XG4gICAgdmFyIGN5ID0gdGhpcy5jeSgpO1xuICAgIHZhciB6b29tID0gY3kuem9vbSgpO1xuICAgIHZhciBwYW4gPSBjeS5wYW4oKTtcbiAgICB2YXIgcnBvcyA9IGlzLnBsYWluT2JqZWN0KCBkaW0gKSA/IGRpbSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgc2V0dGluZyA9IHJwb3MgIT09IHVuZGVmaW5lZCB8fCAoIHZhbCAhPT0gdW5kZWZpbmVkICYmIGlzLnN0cmluZyggZGltICkgKTtcblxuICAgIGlmKCBlbGUgJiYgZWxlLmlzTm9kZSgpICl7IC8vIG11c3QgaGF2ZSBhbiBlbGVtZW50IGFuZCBtdXN0IGJlIGEgbm9kZSB0byByZXR1cm4gcG9zaXRpb25cbiAgICAgIGlmKCBzZXR0aW5nICl7XG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyApe1xuICAgICAgICAgIHZhciBlbGUgPSB0aGlzWyBpIF07XG5cbiAgICAgICAgICBpZiggdmFsICE9PSB1bmRlZmluZWQgKXsgLy8gc2V0IG9uZSBkaW1lbnNpb25cbiAgICAgICAgICAgIGVsZS5fcHJpdmF0ZS5wb3NpdGlvblsgZGltIF0gPSAoIHZhbCAtIHBhblsgZGltIF0gKSAvIHpvb207XG4gICAgICAgICAgfSBlbHNlIGlmKCBycG9zICE9PSB1bmRlZmluZWQgKXsgLy8gc2V0IHdob2xlIHBvc2l0aW9uXG4gICAgICAgICAgICBlbGUuX3ByaXZhdGUucG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgIHg6ICggcnBvcy54IC0gcGFuLnggKSAvIHpvb20sXG4gICAgICAgICAgICAgIHk6ICggcnBvcy55IC0gcGFuLnkgKSAvIHpvb21cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ydHJpZ2dlciggJ3Bvc2l0aW9uJyApO1xuICAgICAgfSBlbHNlIHsgLy8gZ2V0dGluZ1xuICAgICAgICB2YXIgcG9zID0gZWxlLl9wcml2YXRlLnBvc2l0aW9uO1xuICAgICAgICBycG9zID0ge1xuICAgICAgICAgIHg6IHBvcy54ICogem9vbSArIHBhbi54LFxuICAgICAgICAgIHk6IHBvcy55ICogem9vbSArIHBhbi55XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYoIGRpbSA9PT0gdW5kZWZpbmVkICl7IC8vIHRoZW4gcmV0dXJuIHRoZSB3aG9sZSByZW5kZXJlZCBwb3NpdGlvblxuICAgICAgICAgIHJldHVybiBycG9zO1xuICAgICAgICB9IGVsc2UgeyAvLyB0aGVuIHJldHVybiB0aGUgc3BlY2lmaWVkIGRpbWVuc2lvblxuICAgICAgICAgIHJldHVybiBycG9zWyBkaW0gXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiggIXNldHRpbmcgKXtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7IC8vIGZvciBlbXB0eSBjb2xsZWN0aW9uIGNhc2VcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbiAgfSxcblxuICAvLyBnZXQvc2V0IHRoZSBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgcGFyZW50XG4gIHJlbGF0aXZlUG9zaXRpb246IGZ1bmN0aW9uKCBkaW0sIHZhbCApe1xuICAgIHZhciBlbGUgPSB0aGlzWzBdO1xuICAgIHZhciBjeSA9IHRoaXMuY3koKTtcbiAgICB2YXIgcHBvcyA9IGlzLnBsYWluT2JqZWN0KCBkaW0gKSA/IGRpbSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgc2V0dGluZyA9IHBwb3MgIT09IHVuZGVmaW5lZCB8fCAoIHZhbCAhPT0gdW5kZWZpbmVkICYmIGlzLnN0cmluZyggZGltICkgKTtcbiAgICB2YXIgaGFzQ29tcG91bmROb2RlcyA9IGN5Lmhhc0NvbXBvdW5kTm9kZXMoKTtcblxuICAgIGlmKCBlbGUgJiYgZWxlLmlzTm9kZSgpICl7IC8vIG11c3QgaGF2ZSBhbiBlbGVtZW50IGFuZCBtdXN0IGJlIGEgbm9kZSB0byByZXR1cm4gcG9zaXRpb25cbiAgICAgIGlmKCBzZXR0aW5nICl7XG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyApe1xuICAgICAgICAgIHZhciBlbGUgPSB0aGlzWyBpIF07XG4gICAgICAgICAgdmFyIHBhcmVudCA9IGhhc0NvbXBvdW5kTm9kZXMgPyBlbGUucGFyZW50KCkgOiBudWxsO1xuICAgICAgICAgIHZhciBoYXNQYXJlbnQgPSBwYXJlbnQgJiYgcGFyZW50Lmxlbmd0aCA+IDA7XG4gICAgICAgICAgdmFyIHJlbGF0aXZlVG9QYXJlbnQgPSBoYXNQYXJlbnQ7XG5cbiAgICAgICAgICBpZiggaGFzUGFyZW50ICl7XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnRbMF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG9yaWdpbiA9IHJlbGF0aXZlVG9QYXJlbnQgPyBwYXJlbnQuX3ByaXZhdGUucG9zaXRpb24gOiB7IHg6IDAsIHk6IDAgfTtcblxuICAgICAgICAgIGlmKCB2YWwgIT09IHVuZGVmaW5lZCApeyAvLyBzZXQgb25lIGRpbWVuc2lvblxuICAgICAgICAgICAgZWxlLl9wcml2YXRlLnBvc2l0aW9uWyBkaW0gXSA9IHZhbCArIG9yaWdpblsgZGltIF07XG4gICAgICAgICAgfSBlbHNlIGlmKCBwcG9zICE9PSB1bmRlZmluZWQgKXsgLy8gc2V0IHdob2xlIHBvc2l0aW9uXG4gICAgICAgICAgICBlbGUuX3ByaXZhdGUucG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgIHg6IHBwb3MueCArIG9yaWdpbi54LFxuICAgICAgICAgICAgICB5OiBwcG9zLnkgKyBvcmlnaW4ueVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJ0cmlnZ2VyKCAncG9zaXRpb24nICk7XG5cbiAgICAgIH0gZWxzZSB7IC8vIGdldHRpbmdcbiAgICAgICAgdmFyIHBvcyA9IGVsZS5fcHJpdmF0ZS5wb3NpdGlvbjtcbiAgICAgICAgdmFyIHBhcmVudCA9IGhhc0NvbXBvdW5kTm9kZXMgPyBlbGUucGFyZW50KCkgOiBudWxsO1xuICAgICAgICB2YXIgaGFzUGFyZW50ID0gcGFyZW50ICYmIHBhcmVudC5sZW5ndGggPiAwO1xuICAgICAgICB2YXIgcmVsYXRpdmVUb1BhcmVudCA9IGhhc1BhcmVudDtcblxuICAgICAgICBpZiggaGFzUGFyZW50ICl7XG4gICAgICAgICAgcGFyZW50ID0gcGFyZW50WzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9yaWdpbiA9IHJlbGF0aXZlVG9QYXJlbnQgPyBwYXJlbnQuX3ByaXZhdGUucG9zaXRpb24gOiB7IHg6IDAsIHk6IDAgfTtcblxuICAgICAgICBwcG9zID0ge1xuICAgICAgICAgIHg6IHBvcy54IC0gb3JpZ2luLngsXG4gICAgICAgICAgeTogcG9zLnkgLSBvcmlnaW4ueVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmKCBkaW0gPT09IHVuZGVmaW5lZCApeyAvLyB0aGVuIHJldHVybiB0aGUgd2hvbGUgcmVuZGVyZWQgcG9zaXRpb25cbiAgICAgICAgICByZXR1cm4gcHBvcztcbiAgICAgICAgfSBlbHNlIHsgLy8gdGhlbiByZXR1cm4gdGhlIHNwZWNpZmllZCBkaW1lbnNpb25cbiAgICAgICAgICByZXR1cm4gcHBvc1sgZGltIF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYoICFzZXR0aW5nICl7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBmb3IgZW1wdHkgY29sbGVjdGlvbiBjYXNlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG4gIH0sXG5cbiAgcmVuZGVyZWRCb3VuZGluZ0JveDogZnVuY3Rpb24oIG9wdGlvbnMgKXtcbiAgICB2YXIgYmIgPSB0aGlzLmJvdW5kaW5nQm94KCBvcHRpb25zICk7XG4gICAgdmFyIGN5ID0gdGhpcy5jeSgpO1xuICAgIHZhciB6b29tID0gY3kuem9vbSgpO1xuICAgIHZhciBwYW4gPSBjeS5wYW4oKTtcblxuICAgIHZhciB4MSA9IGJiLngxICogem9vbSArIHBhbi54O1xuICAgIHZhciB4MiA9IGJiLngyICogem9vbSArIHBhbi54O1xuICAgIHZhciB5MSA9IGJiLnkxICogem9vbSArIHBhbi55O1xuICAgIHZhciB5MiA9IGJiLnkyICogem9vbSArIHBhbi55O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHgxOiB4MSxcbiAgICAgIHgyOiB4MixcbiAgICAgIHkxOiB5MSxcbiAgICAgIHkyOiB5MixcbiAgICAgIHc6IHgyIC0geDEsXG4gICAgICBoOiB5MiAtIHkxXG4gICAgfTtcbiAgfSxcblxuICB1cGRhdGVDb21wb3VuZEJvdW5kczogZnVuY3Rpb24oKXtcbiAgICB2YXIgY3kgPSB0aGlzLmN5KCk7XG5cbiAgICAvLyBzYXZlIGN5Y2xlcyBmb3Igbm9uIGNvbXBvdW5kIGdyYXBocyBvciB3aGVuIHN0eWxlIGRpc2FibGVkXG4gICAgaWYoICFjeS5zdHlsZUVuYWJsZWQoKSB8fCAhY3kuaGFzQ29tcG91bmROb2RlcygpICl7IHJldHVybiBjeS5jb2xsZWN0aW9uKCk7IH1cblxuICAgIHZhciB1cGRhdGVkID0gW107XG5cbiAgICBmdW5jdGlvbiB1cGRhdGUoIHBhcmVudCApe1xuICAgICAgaWYoICFwYXJlbnQuaXNQYXJlbnQoKSApeyByZXR1cm47IH1cblxuICAgICAgdmFyIF9wID0gcGFyZW50Ll9wcml2YXRlO1xuICAgICAgdmFyIGNoaWxkcmVuID0gcGFyZW50LmNoaWxkcmVuKCk7XG4gICAgICB2YXIgaW5jbHVkZUxhYmVscyA9IHBhcmVudC5wc3R5bGUoICdjb21wb3VuZC1zaXppbmctd3J0LWxhYmVscycgKS52YWx1ZSA9PT0gJ2luY2x1ZGUnO1xuICAgICAgdmFyIGJiID0gY2hpbGRyZW4uYm91bmRpbmdCb3goIHtcbiAgICAgICAgaW5jbHVkZUxhYmVsczogaW5jbHVkZUxhYmVscyxcbiAgICAgICAgaW5jbHVkZVNoYWRvd3M6IGZhbHNlLFxuICAgICAgICBpbmNsdWRlT3ZlcmxheXM6IGZhbHNlLFxuXG4gICAgICAgIC8vIHVwZGF0aW5nIHRoZSBjb21wb3VuZCBib3VuZHMgaGFwcGVucyBvdXRzaWRlIG9mIHRoZSByZWd1bGFyXG4gICAgICAgIC8vIGNhY2hlIGN5Y2xlIChpLmUuIGJlZm9yZSBmaXJlZCBldmVudHMpXG4gICAgICAgIHVzZUNhY2hlOiBmYWxzZVxuICAgICAgfSApO1xuICAgICAgdmFyIHBhZGRpbmcgPSB7XG4gICAgICAgIHRvcDogcGFyZW50LnBzdHlsZSggJ3BhZGRpbmctdG9wJyApLnBmVmFsdWUsXG4gICAgICAgIGJvdHRvbTogcGFyZW50LnBzdHlsZSggJ3BhZGRpbmctYm90dG9tJyApLnBmVmFsdWUsXG4gICAgICAgIGxlZnQ6IHBhcmVudC5wc3R5bGUoICdwYWRkaW5nLWxlZnQnICkucGZWYWx1ZSxcbiAgICAgICAgcmlnaHQ6IHBhcmVudC5wc3R5bGUoICdwYWRkaW5nLXJpZ2h0JyApLnBmVmFsdWVcbiAgICAgIH07XG4gICAgICB2YXIgcG9zID0gX3AucG9zaXRpb247XG5cbiAgICAgIF9wLmF1dG9XaWR0aCA9IGJiLnc7XG4gICAgICBwb3MueCA9IChiYi54MSArIGJiLngyIC0gcGFkZGluZy5sZWZ0ICsgcGFkZGluZy5yaWdodCkgLyAyO1xuXG4gICAgICBfcC5hdXRvSGVpZ2h0ID0gYmIuaDtcbiAgICAgIHBvcy55ID0gKGJiLnkxICsgYmIueTIgLSBwYWRkaW5nLnRvcCArIHBhZGRpbmcuYm90dG9tKSAvIDI7XG5cbiAgICAgIHVwZGF0ZWQucHVzaCggcGFyZW50ICk7XG4gICAgfVxuXG4gICAgLy8gZ28gdXAsIGxldmVsIGJ5IGxldmVsXG4gICAgdmFyIGVsZXMgPSB0aGlzO1xuICAgIHdoaWxlKCBlbGVzLm5vbmVtcHR5KCkgKXtcblxuICAgICAgLy8gdXBkYXRlIGVhY2ggcGFyZW50IG5vZGUgaW4gdGhpcyBsZXZlbFxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBlbGUgPSBlbGVzWyBpIF07XG5cbiAgICAgICAgdXBkYXRlKCBlbGUgKTtcbiAgICAgIH1cblxuICAgICAgLy8gbmV4dCBsZXZlbFxuICAgICAgZWxlcyA9IGVsZXMucGFyZW50KCk7XG4gICAgfVxuXG4gICAgLy8gcmV0dXJuIGNoYW5nZWRcbiAgICByZXR1cm4gdGhpcy5zcGF3biggdXBkYXRlZCApO1xuICB9XG59KTtcblxudmFyIG5vbmluZiA9IGZ1bmN0aW9uKCB4ICl7XG4gIGlmKCB4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkgKXtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiB4O1xufTtcblxudmFyIHVwZGF0ZUJvdW5kcyA9IGZ1bmN0aW9uKCBiLCB4MSwgeTEsIHgyLCB5MiApe1xuICAvLyBkb24ndCB1cGRhdGUgd2l0aCB6ZXJvIGFyZWEgYm94ZXNcbiAgaWYoIHgyIC0geDEgPT09IDAgfHwgeTIgLSB5MSA9PT0gMCApeyByZXR1cm47IH1cblxuICBiLngxID0geDEgPCBiLngxID8geDEgOiBiLngxO1xuICBiLngyID0geDIgPiBiLngyID8geDIgOiBiLngyO1xuICBiLnkxID0geTEgPCBiLnkxID8geTEgOiBiLnkxO1xuICBiLnkyID0geTIgPiBiLnkyID8geTIgOiBiLnkyO1xufTtcblxudmFyIHVwZGF0ZUJvdW5kc0Zyb21Cb3ggPSBmdW5jdGlvbiggYiwgYjIgKXtcbiAgcmV0dXJuIHVwZGF0ZUJvdW5kcyggYiwgYjIueDEsIGIyLnkxLCBiMi54MiwgYjIueTIgKTtcbn07XG5cbnZhciBwcmVmaXhlZFByb3BlcnR5ID0gZnVuY3Rpb24oIG9iaiwgZmllbGQsIHByZWZpeCApe1xuICByZXR1cm4gdXRpbC5nZXRQcmVmaXhlZFByb3BlcnR5KCBvYmosIGZpZWxkLCBwcmVmaXggKTtcbn07XG5cbnZhciB1cGRhdGVCb3VuZHNGcm9tQXJyb3cgPSBmdW5jdGlvbiggYm91bmRzLCBlbGUsIHByZWZpeCwgb3B0aW9ucyApe1xuICB2YXIgX3AgPSBlbGUuX3ByaXZhdGU7XG4gIHZhciByc3R5bGUgPSBfcC5yc3R5bGU7XG4gIHZhciBoYWxmQXJXID0gcnN0eWxlLmFycm93V2lkdGggLyAyO1xuICB2YXIgYXJyb3dUeXBlID0gZWxlLnBzdHlsZSggcHJlZml4ICsgJy1hcnJvdy1zaGFwZScgKS52YWx1ZTtcbiAgdmFyIHg7XG4gIHZhciB5O1xuXG4gIGlmKCBhcnJvd1R5cGUgIT09ICdub25lJyApe1xuICAgIGlmKCBwcmVmaXggPT09ICdzb3VyY2UnICl7XG4gICAgICB4ID0gcnN0eWxlLnNyY1g7XG4gICAgICB5ID0gcnN0eWxlLnNyY1k7XG4gICAgfSBlbHNlIGlmKCBwcmVmaXggPT09ICd0YXJnZXQnICl7XG4gICAgICB4ID0gcnN0eWxlLnRndFg7XG4gICAgICB5ID0gcnN0eWxlLnRndFk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSByc3R5bGUubWlkWDtcbiAgICAgIHkgPSByc3R5bGUubWlkWTtcbiAgICB9XG5cbiAgICB1cGRhdGVCb3VuZHMoIGJvdW5kcywgeCAtIGhhbGZBclcsIHkgLSBoYWxmQXJXLCB4ICsgaGFsZkFyVywgeSArIGhhbGZBclcgKTtcbiAgfVxufTtcblxudmFyIHVwZGF0ZUJvdW5kc0Zyb21MYWJlbCA9IGZ1bmN0aW9uKCBib3VuZHMsIGVsZSwgcHJlZml4LCBvcHRpb25zICl7XG4gIHZhciBwcmVmaXhEYXNoO1xuXG4gIGlmKCBwcmVmaXggKXtcbiAgICBwcmVmaXhEYXNoID0gcHJlZml4ICsgJy0nO1xuICB9IGVsc2Uge1xuICAgIHByZWZpeERhc2ggPSAnJztcbiAgfVxuXG4gIHZhciBfcCA9IGVsZS5fcHJpdmF0ZTtcbiAgdmFyIHJzdHlsZSA9IF9wLnJzdHlsZTtcbiAgdmFyIGxhYmVsID0gZWxlLnBzdHlsZSggcHJlZml4RGFzaCArICdsYWJlbCcgKS5zdHJWYWx1ZTtcblxuICBpZiggbGFiZWwgKXtcbiAgICB2YXIgaGFsaWduID0gZWxlLnBzdHlsZSggJ3RleHQtaGFsaWduJyApO1xuICAgIHZhciB2YWxpZ24gPSBlbGUucHN0eWxlKCAndGV4dC12YWxpZ24nICk7XG4gICAgdmFyIGxhYmVsV2lkdGggPSBwcmVmaXhlZFByb3BlcnR5KCByc3R5bGUsICdsYWJlbFdpZHRoJywgcHJlZml4ICk7XG4gICAgdmFyIGxhYmVsSGVpZ2h0ID0gcHJlZml4ZWRQcm9wZXJ0eSggcnN0eWxlLCAnbGFiZWxIZWlnaHQnLCBwcmVmaXggKTtcbiAgICB2YXIgbGFiZWxYID0gcHJlZml4ZWRQcm9wZXJ0eSggcnN0eWxlLCAnbGFiZWxYJywgcHJlZml4ICk7XG4gICAgdmFyIGxhYmVsWSA9IHByZWZpeGVkUHJvcGVydHkoIHJzdHlsZSwgJ2xhYmVsWScsIHByZWZpeCApO1xuICAgIHZhciBtYXJnaW5YID0gZWxlLnBzdHlsZSggcHJlZml4RGFzaCArICd0ZXh0LW1hcmdpbi14JyApLnBmVmFsdWU7XG4gICAgdmFyIG1hcmdpblkgPSBlbGUucHN0eWxlKCBwcmVmaXhEYXNoICsgJ3RleHQtbWFyZ2luLXknICkucGZWYWx1ZTtcbiAgICB2YXIgaXNFZGdlID0gZWxlLmlzRWRnZSgpO1xuICAgIHZhciByb3RhdGlvbiA9IGVsZS5wc3R5bGUoIHByZWZpeERhc2ggKyAndGV4dC1yb3RhdGlvbicgKTtcbiAgICB2YXIgc2hhZG93UiA9IGVsZS5wc3R5bGUoICd0ZXh0LXNoYWRvdy1ibHVyJyApLnBmVmFsdWUgLyAyO1xuICAgIHZhciBzaGFkb3dYID0gZWxlLnBzdHlsZSggJ3RleHQtc2hhZG93LW9mZnNldC14JyApLnBmVmFsdWU7XG4gICAgdmFyIHNoYWRvd1kgPSBlbGUucHN0eWxlKCAndGV4dC1zaGFkb3ctb2Zmc2V0LXknICkucGZWYWx1ZTtcbiAgICB2YXIgc2hhZG93T3BhY2l0eSA9IGVsZS5wc3R5bGUoICd0ZXh0LXNoYWRvdy1vcGFjaXR5JyApLnZhbHVlO1xuICAgIHZhciBvdXRsaW5lV2lkdGggPSBlbGUucHN0eWxlKCAndGV4dC1vdXRsaW5lLXdpZHRoJyApLnBmVmFsdWU7XG4gICAgdmFyIGJvcmRlcldpZHRoID0gZWxlLnBzdHlsZSggJ3RleHQtYm9yZGVyLXdpZHRoJyApLnBmVmFsdWU7XG4gICAgdmFyIGhhbGZCb3JkZXJXaWR0aCA9IGJvcmRlcldpZHRoIC8gMjtcbiAgICB2YXIgcGFkZGluZyA9IGVsZS5wc3R5bGUoICd0ZXh0LWJhY2tncm91bmQtcGFkZGluZycgKS5wZlZhbHVlO1xuXG4gICAgdmFyIGxoID0gbGFiZWxIZWlnaHQgKyAyICogcGFkZGluZztcbiAgICB2YXIgbHcgPSBsYWJlbFdpZHRoICsgMiAqIHBhZGRpbmc7XG4gICAgdmFyIGx3XzIgPSBsdyAvIDI7XG4gICAgdmFyIGxoXzIgPSBsaCAvIDI7XG4gICAgdmFyIGx4MSwgbHgyLCBseTEsIGx5MjtcblxuICAgIGlmKCBpc0VkZ2UgKXtcbiAgICAgIGx4MSA9IGxhYmVsWCAtIGx3XzI7XG4gICAgICBseDIgPSBsYWJlbFggKyBsd18yO1xuICAgICAgbHkxID0gbGFiZWxZIC0gbGhfMjtcbiAgICAgIGx5MiA9IGxhYmVsWSArIGxoXzI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXRjaCggaGFsaWduLnZhbHVlICl7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgIGx4MSA9IGxhYmVsWCAtIGx3O1xuICAgICAgICAgIGx4MiA9IGxhYmVsWDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgIGx4MSA9IGxhYmVsWCAtIGx3XzI7XG4gICAgICAgICAgbHgyID0gbGFiZWxYICsgbHdfMjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgbHgxID0gbGFiZWxYO1xuICAgICAgICAgIGx4MiA9IGxhYmVsWCArIGx3O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2goIHZhbGlnbi52YWx1ZSApe1xuICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgIGx5MSA9IGxhYmVsWSAtIGxoO1xuICAgICAgICAgIGx5MiA9IGxhYmVsWTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgIGx5MSA9IGxhYmVsWSAtIGxoXzI7XG4gICAgICAgICAgbHkyID0gbGFiZWxZICsgbGhfMjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgIGx5MSA9IGxhYmVsWTtcbiAgICAgICAgICBseTIgPSBsYWJlbFkgKyBsaDtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaXNBdXRvcm90YXRlID0gKCBpc0VkZ2UgJiYgcm90YXRpb24uc3RyVmFsdWUgPT09ICdhdXRvcm90YXRlJyApO1xuICAgIHZhciBpc1BmVmFsdWUgPSAoIHJvdGF0aW9uLnBmVmFsdWUgIT0gbnVsbCAmJiByb3RhdGlvbi5wZlZhbHVlICE9PSAwICk7XG5cbiAgICBpZiggaXNBdXRvcm90YXRlIHx8IGlzUGZWYWx1ZSApe1xuICAgICAgdmFyIHRoZXRhID0gaXNBdXRvcm90YXRlID8gcHJlZml4ZWRQcm9wZXJ0eSggX3AucnN0eWxlLCAnbGFiZWxBbmdsZScsIHByZWZpeCApIDogcm90YXRpb24ucGZWYWx1ZTtcbiAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyggdGhldGEgKTtcbiAgICAgIHZhciBzaW4gPSBNYXRoLnNpbiggdGhldGEgKTtcblxuICAgICAgdmFyIHJvdGF0ZSA9IGZ1bmN0aW9uKCB4LCB5ICl7XG4gICAgICAgIHggPSB4IC0gbGFiZWxYO1xuICAgICAgICB5ID0geSAtIGxhYmVsWTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IHggKiBjb3MgLSB5ICogc2luICsgbGFiZWxYLFxuICAgICAgICAgIHk6IHggKiBzaW4gKyB5ICogY29zICsgbGFiZWxZXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICB2YXIgcHgxeTEgPSByb3RhdGUoIGx4MSwgbHkxICk7XG4gICAgICB2YXIgcHgxeTIgPSByb3RhdGUoIGx4MSwgbHkyICk7XG4gICAgICB2YXIgcHgyeTEgPSByb3RhdGUoIGx4MiwgbHkxICk7XG4gICAgICB2YXIgcHgyeTIgPSByb3RhdGUoIGx4MiwgbHkyICk7XG5cbiAgICAgIGx4MSA9IE1hdGgubWluKCBweDF5MS54LCBweDF5Mi54LCBweDJ5MS54LCBweDJ5Mi54ICk7XG4gICAgICBseDIgPSBNYXRoLm1heCggcHgxeTEueCwgcHgxeTIueCwgcHgyeTEueCwgcHgyeTIueCApO1xuICAgICAgbHkxID0gTWF0aC5taW4oIHB4MXkxLnksIHB4MXkyLnksIHB4MnkxLnksIHB4MnkyLnkgKTtcbiAgICAgIGx5MiA9IE1hdGgubWF4KCBweDF5MS55LCBweDF5Mi55LCBweDJ5MS55LCBweDJ5Mi55ICk7XG4gICAgfVxuXG4gICAgbHgxICs9IG1hcmdpblggLSBNYXRoLm1heCggb3V0bGluZVdpZHRoLCBoYWxmQm9yZGVyV2lkdGggKTtcbiAgICBseDIgKz0gbWFyZ2luWCArIE1hdGgubWF4KCBvdXRsaW5lV2lkdGgsIGhhbGZCb3JkZXJXaWR0aCApO1xuICAgIGx5MSArPSBtYXJnaW5ZIC0gTWF0aC5tYXgoIG91dGxpbmVXaWR0aCwgaGFsZkJvcmRlcldpZHRoICk7XG4gICAgbHkyICs9IG1hcmdpblkgKyBNYXRoLm1heCggb3V0bGluZVdpZHRoLCBoYWxmQm9yZGVyV2lkdGggKTtcblxuICAgIHVwZGF0ZUJvdW5kcyggYm91bmRzLCBseDEsIGx5MSwgbHgyLCBseTIgKTtcblxuICAgIGlmKCBvcHRpb25zLmluY2x1ZGVTaGFkb3dzICYmIHNoYWRvd09wYWNpdHkgPiAwICl7XG4gICAgICBseDEgKz0gLSBzaGFkb3dSICsgc2hhZG93WDtcbiAgICAgIGx4MiArPSArIHNoYWRvd1IgKyBzaGFkb3dYO1xuICAgICAgbHkxICs9IC0gc2hhZG93UiArIHNoYWRvd1k7XG4gICAgICBseTIgKz0gKyBzaGFkb3dSICsgc2hhZG93WTtcblxuICAgICAgdXBkYXRlQm91bmRzKCBib3VuZHMsIGx4MSwgbHkxLCBseDIsIGx5MiApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZHM7XG59O1xuXG4vLyBnZXQgdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgZWxlbWVudHMgKGluIHJhdyBtb2RlbCBwb3NpdGlvbilcbnZhciBib3VuZGluZ0JveEltcGwgPSBmdW5jdGlvbiggZWxlLCBvcHRpb25zICl7XG4gIHZhciBjeSA9IGVsZS5fcHJpdmF0ZS5jeTtcbiAgdmFyIGN5X3AgPSBjeS5fcHJpdmF0ZTtcbiAgdmFyIHN0eWxlRW5hYmxlZCA9IGN5X3Auc3R5bGVFbmFibGVkO1xuXG4gIHZhciBib3VuZHMgPSB7XG4gICAgeDE6IEluZmluaXR5LFxuICAgIHkxOiBJbmZpbml0eSxcbiAgICB4MjogLUluZmluaXR5LFxuICAgIHkyOiAtSW5maW5pdHlcbiAgfTtcblxuICB2YXIgX3AgPSBlbGUuX3ByaXZhdGU7XG4gIHZhciBkaXNwbGF5ID0gc3R5bGVFbmFibGVkID8gZWxlLnBzdHlsZSggJ2Rpc3BsYXknICkudmFsdWUgOiAnZWxlbWVudCc7XG4gIHZhciBpc05vZGUgPSBlbGUuaXNOb2RlKCk7XG4gIHZhciBpc0VkZ2UgPSBlbGUuaXNFZGdlKCk7XG4gIHZhciBleDEsIGV4MiwgZXkxLCBleTIsIHgsIHk7XG4gIHZhciBkaXNwbGF5ZWQgPSBkaXNwbGF5ICE9PSAnbm9uZSc7XG5cbiAgaWYoIGRpc3BsYXllZCApe1xuICAgIHZhciBvdmVybGF5T3BhY2l0eSA9IDA7XG4gICAgdmFyIG92ZXJsYXlQYWRkaW5nID0gMDtcblxuICAgIGlmKCBzdHlsZUVuYWJsZWQgJiYgb3B0aW9ucy5pbmNsdWRlT3ZlcmxheXMgKXtcbiAgICAgIG92ZXJsYXlPcGFjaXR5ID0gZWxlLnBzdHlsZSggJ292ZXJsYXktb3BhY2l0eScgKS52YWx1ZTtcblxuICAgICAgaWYoIG92ZXJsYXlPcGFjaXR5ICE9PSAwICl7XG4gICAgICAgIG92ZXJsYXlQYWRkaW5nID0gZWxlLnBzdHlsZSggJ292ZXJsYXktcGFkZGluZycgKS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdyA9IDA7XG4gICAgdmFyIHdIYWxmID0gMDtcblxuICAgIGlmKCBzdHlsZUVuYWJsZWQgKXtcbiAgICAgIHcgPSBlbGUucHN0eWxlKCAnd2lkdGgnICkucGZWYWx1ZTtcbiAgICAgIHdIYWxmID0gdyAvIDI7XG4gICAgfVxuXG4gICAgaWYoIGlzTm9kZSAmJiBvcHRpb25zLmluY2x1ZGVOb2RlcyApe1xuICAgICAgdmFyIHBvcyA9IF9wLnBvc2l0aW9uO1xuICAgICAgeCA9IHBvcy54O1xuICAgICAgeSA9IHBvcy55O1xuICAgICAgdmFyIHcgPSBlbGUub3V0ZXJXaWR0aCgpO1xuICAgICAgdmFyIGhhbGZXID0gdyAvIDI7XG4gICAgICB2YXIgaCA9IGVsZS5vdXRlckhlaWdodCgpO1xuICAgICAgdmFyIGhhbGZIID0gaCAvIDI7XG5cbiAgICAgIC8vIGhhbmRsZSBub2RlIGRpbWVuc2lvbnNcbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgIFxuICAgICAgdmFyIHN0YXRlQW5kSW5mb3MgPSBlbGUuX3ByaXZhdGUuZGF0YS5zdGF0ZXNhbmRpbmZvcztcbiAgICAgIHZhciBwb3J0cyA9IGVsZS5fcHJpdmF0ZS5kYXRhLnBvcnRzO1xuICAgICAgdmFyIG1pblksIG1heFksIG1pblgsIG1heFg7XG4gICAgICBcbiAgICAgIGZvciAodmFyIGkgPSAwOyBzdGF0ZUFuZEluZm9zICYmIGkgPCBzdGF0ZUFuZEluZm9zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHN0YXRlQW5kSW5mb3NbaV07XG4gICAgICAgIHZhciBzdGF0ZVdpZHRoID0gc3RhdGUuYmJveC53O1xuICAgICAgICB2YXIgc3RhdGVIZWlnaHQgPSBzdGF0ZS5iYm94Lmg7XG4gICAgICAgIFxuICAgICAgICB2YXIgc3RhdGVNaW5ZID0gc3RhdGUuYmJveC55ICogZWxlLmhlaWdodCgpIC8gMTAwICsgeSAtIHN0YXRlSGVpZ2h0IC8gMjtcbiAgICAgICAgdmFyIHN0YXRlTWF4WSA9IHN0YXRlLmJib3gueSAqIGVsZS5oZWlnaHQoKSAvIDEwMCArIHkgKyBzdGF0ZUhlaWdodCAvIDI7XG4gICAgICAgIFxuICAgICAgICB2YXIgc3RhdGVNaW5YID0gc3RhdGUuYmJveC54ICogZWxlLndpZHRoKCkgLyAxMDAgKyB4IC0gc3RhdGVXaWR0aCAvIDI7XG4gICAgICAgIHZhciBzdGF0ZU1heFggPSBzdGF0ZS5iYm94LnggKiBlbGUud2lkdGgoKSAvIDEwMCArIHggKyBzdGF0ZVdpZHRoIC8gMjtcbiAgICAgICAgXG4gICAgICAgIGlmKCFtaW5ZIHx8IHN0YXRlTWluWSA8IG1pblkpIHtcbiAgICAgICAgICBtaW5ZID0gc3RhdGVNaW5ZO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZighbWF4WSB8fCBzdGF0ZU1heFkgPiBtYXhZKSB7XG4gICAgICAgICAgbWF4WSA9IHN0YXRlTWF4WTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYoIW1pblggfHwgc3RhdGVNaW5YIDwgbWluWCkge1xuICAgICAgICAgIG1pblggPSBzdGF0ZU1pblg7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmKCFtYXhYIHx8IHN0YXRlTWF4WCA+IG1heFgpIHtcbiAgICAgICAgICBtYXhYID0gc3RhdGVNYXhYO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIGZvciggdmFyIGkgPSAwOyBwb3J0cyAmJiBpIDwgcG9ydHMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgIHZhciBwb3J0ID0gcG9ydHNbaV07XG4gICAgICAgIHZhciBwb3J0WCA9IHggKyBwb3J0LnggKiBlbGUud2lkdGgoKSAvIDEwMDtcbiAgICAgICAgdmFyIHBvcnRZID0geSArIHBvcnQueSAqIGVsZS5oZWlnaHQoKSAvIDEwMDtcbiAgICAgICAgXG4gICAgICAgIGlmKCFtaW5ZIHx8IHBvcnRZIDwgbWluWSkge1xuICAgICAgICAgIG1pblkgPSBwb3J0WTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYoIW1heFkgfHwgcG9ydFkgPiBtYXhZKSB7XG4gICAgICAgICAgbWF4WSA9IHBvcnRZO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZighbWluWCB8fCBwb3J0WCA8IG1pblgpIHtcbiAgICAgICAgICBtaW5YID0gcG9ydFg7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmKCFtYXhYIHx8IHBvcnRYID4gbWF4WCkge1xuICAgICAgICAgIG1heFggPSBwb3J0WDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBleDEgPSB4IC0gaGFsZlcgLSBvdmVybGF5UGFkZGluZztcbiAgICAgIGV4MiA9IHggKyBoYWxmVyArIG92ZXJsYXlQYWRkaW5nO1xuICAgICAgZXkxID0geSAtIGhhbGZIIC0gb3ZlcmxheVBhZGRpbmc7XG4gICAgICBleTIgPSB5ICsgaGFsZkggKyBvdmVybGF5UGFkZGluZztcblxuICAgICAgaWYoc2Jnbi5pc011bHRpbWVyKGVsZSkpIHtcbiAgICAgICAgdmFyIHNoYXBlID0gZWxlLmNzcygnc2hhcGUnKTtcbiAgICAgICAgdmFyIG11bHRpbWVyUGFkZGluZyA9ICBiYXNlTm9kZVNoYXBlc1tzaGFwZV0ubXVsdGltZXJQYWRkaW5nO1xuICAgICAgICBleDIgKz0gbXVsdGltZXJQYWRkaW5nO1xuICAgICAgICBleTIgKz0gbXVsdGltZXJQYWRkaW5nO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZihtaW5ZIDwgZXkxKXtcbiAgICAgICAgZXkxID0gbWluWTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYobWF4WSA+IGV5Mil7XG4gICAgICAgIGV5MiA9IG1heFk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmKG1pblggPCBleDEpe1xuICAgICAgICBleDEgPSBtaW5YO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZihtYXhYID4gZXgyKXtcbiAgICAgICAgZXgyID0gbWF4WDtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlQm91bmRzKCBib3VuZHMsIGV4MSwgZXkxLCBleDIsIGV5MiApO1xuXG4gICAgfSBlbHNlIGlmKCBpc0VkZ2UgJiYgb3B0aW9ucy5pbmNsdWRlRWRnZXMgKXtcbiAgICAgIHZhciByc3R5bGUgPSBfcC5yc3R5bGUgfHwge307XG5cbiAgICAgIC8vIGhhbmRsZSBlZGdlIGRpbWVuc2lvbnMgKHJvdWdoIGJveCBlc3RpbWF0ZSlcbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgIGlmKCBzdHlsZUVuYWJsZWQgKXtcbiAgICAgICAgZXgxID0gTWF0aC5taW4oIHJzdHlsZS5zcmNYLCByc3R5bGUubWlkWCwgcnN0eWxlLnRndFggKTtcbiAgICAgICAgZXgyID0gTWF0aC5tYXgoIHJzdHlsZS5zcmNYLCByc3R5bGUubWlkWCwgcnN0eWxlLnRndFggKTtcbiAgICAgICAgZXkxID0gTWF0aC5taW4oIHJzdHlsZS5zcmNZLCByc3R5bGUubWlkWSwgcnN0eWxlLnRndFkgKTtcbiAgICAgICAgZXkyID0gTWF0aC5tYXgoIHJzdHlsZS5zcmNZLCByc3R5bGUubWlkWSwgcnN0eWxlLnRndFkgKTtcblxuICAgICAgICAvLyB0YWtlIGludG8gYWNjb3VudCBlZGdlIHdpZHRoXG4gICAgICAgIGV4MSAtPSB3SGFsZjtcbiAgICAgICAgZXgyICs9IHdIYWxmO1xuICAgICAgICBleTEgLT0gd0hhbGY7XG4gICAgICAgIGV5MiArPSB3SGFsZjtcblxuICAgICAgICB1cGRhdGVCb3VuZHMoIGJvdW5kcywgZXgxLCBleTEsIGV4MiwgZXkyICk7XG4gICAgICB9XG5cbiAgICAgIC8vIHByZWNpc2UgaGF5c3RhY2tzXG4gICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgaWYoIHN0eWxlRW5hYmxlZCAmJiBlbGUucHN0eWxlKCAnY3VydmUtc3R5bGUnICkuc3RyVmFsdWUgPT09ICdoYXlzdGFjaycgKXtcbiAgICAgICAgdmFyIGhwdHMgPSByc3R5bGUuaGF5c3RhY2tQdHM7XG5cbiAgICAgICAgZXgxID0gaHB0c1swXS54O1xuICAgICAgICBleTEgPSBocHRzWzBdLnk7XG4gICAgICAgIGV4MiA9IGhwdHNbMV0ueDtcbiAgICAgICAgZXkyID0gaHB0c1sxXS55O1xuXG4gICAgICAgIGlmKCBleDEgPiBleDIgKXtcbiAgICAgICAgICB2YXIgdGVtcCA9IGV4MTtcbiAgICAgICAgICBleDEgPSBleDI7XG4gICAgICAgICAgZXgyID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCBleTEgPiBleTIgKXtcbiAgICAgICAgICB2YXIgdGVtcCA9IGV5MTtcbiAgICAgICAgICBleTEgPSBleTI7XG4gICAgICAgICAgZXkyID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZUJvdW5kcyggYm91bmRzLCBleDEgLSB3SGFsZiwgZXkxIC0gd0hhbGYsIGV4MiArIHdIYWxmLCBleTIgKyB3SGFsZiApO1xuXG4gICAgICAvLyBoYW5kbGUgcG9pbnRzIGFsb25nIGVkZ2VcbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHB0cyA9IHJzdHlsZS5iZXppZXJQdHMgfHwgcnN0eWxlLmxpbmVQdHMgfHwgW107XG5cbiAgICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBwdHMubGVuZ3RoOyBqKysgKXtcbiAgICAgICAgICB2YXIgcHQgPSBwdHNbIGogXTtcblxuICAgICAgICAgIGV4MSA9IHB0LnggLSB3SGFsZjtcbiAgICAgICAgICBleDIgPSBwdC54ICsgd0hhbGY7XG4gICAgICAgICAgZXkxID0gcHQueSAtIHdIYWxmO1xuICAgICAgICAgIGV5MiA9IHB0LnkgKyB3SGFsZjtcblxuICAgICAgICAgIHVwZGF0ZUJvdW5kcyggYm91bmRzLCBleDEsIGV5MSwgZXgyLCBleTIgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZhbGxiYWNrIG9uIHNvdXJjZSBhbmQgdGFyZ2V0IHBvc2l0aW9uc1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgaWYoIHB0cy5sZW5ndGggPT09IDAgKXtcbiAgICAgICAgICB2YXIgbjEgPSBfcC5zb3VyY2U7XG4gICAgICAgICAgdmFyIG4xX3AgPSBuMS5fcHJpdmF0ZTtcbiAgICAgICAgICB2YXIgbjFwb3MgPSBuMV9wLnBvc2l0aW9uO1xuXG4gICAgICAgICAgdmFyIG4yID0gX3AudGFyZ2V0O1xuICAgICAgICAgIHZhciBuMl9wID0gbjIuX3ByaXZhdGU7XG4gICAgICAgICAgdmFyIG4ycG9zID0gbjJfcC5wb3NpdGlvbjtcblxuICAgICAgICAgIGV4MSA9IG4xcG9zLng7XG4gICAgICAgICAgZXgyID0gbjJwb3MueDtcbiAgICAgICAgICBleTEgPSBuMXBvcy55O1xuICAgICAgICAgIGV5MiA9IG4ycG9zLnk7XG5cbiAgICAgICAgICBpZiggZXgxID4gZXgyICl7XG4gICAgICAgICAgICB2YXIgdGVtcCA9IGV4MTtcbiAgICAgICAgICAgIGV4MSA9IGV4MjtcbiAgICAgICAgICAgIGV4MiA9IHRlbXA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoIGV5MSA+IGV5MiApe1xuICAgICAgICAgICAgdmFyIHRlbXAgPSBleTE7XG4gICAgICAgICAgICBleTEgPSBleTI7XG4gICAgICAgICAgICBleTIgPSB0ZW1wO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHRha2UgaW50byBhY2NvdW50IGVkZ2Ugd2lkdGhcbiAgICAgICAgICBleDEgLT0gd0hhbGY7XG4gICAgICAgICAgZXgyICs9IHdIYWxmO1xuICAgICAgICAgIGV5MSAtPSB3SGFsZjtcbiAgICAgICAgICBleTIgKz0gd0hhbGY7XG5cbiAgICAgICAgICB1cGRhdGVCb3VuZHMoIGJvdW5kcywgZXgxLCBleTEsIGV4MiwgZXkyICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH0gLy8gZWRnZXNcblxuICAgIC8vIHNoYWRvdyBhbmQgb3ZlcmxheVxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgaWYoIHN0eWxlRW5hYmxlZCApe1xuXG4gICAgICBleDEgPSBib3VuZHMueDE7XG4gICAgICBleDIgPSBib3VuZHMueDI7XG4gICAgICBleTEgPSBib3VuZHMueTE7XG4gICAgICBleTIgPSBib3VuZHMueTI7XG5cbiAgICAgIGlmKCBvcHRpb25zLmluY2x1ZGVTaGFkb3dzICYmIGVsZS5wc3R5bGUoJ3NoYWRvdy1vcGFjaXR5JykudmFsdWUgPiAwICl7XG4gICAgICAgIHZhciByID0gZWxlLnBzdHlsZSgnc2hhZG93LWJsdXInKS5wZlZhbHVlIC8gMjtcbiAgICAgICAgdmFyIG94ID0gZWxlLnBzdHlsZSgnc2hhZG93LW9mZnNldC14JykucGZWYWx1ZTtcbiAgICAgICAgdmFyIG95ID0gZWxlLnBzdHlsZSgnc2hhZG93LW9mZnNldC15JykucGZWYWx1ZTtcblxuICAgICAgICB1cGRhdGVCb3VuZHMoIGJvdW5kcywgZXgxIC0gciArIG94LCBleTEgLSByICsgb3ksIGV4MiArIHIgKyBveCwgZXkyICsgciArIG95ICk7XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZUJvdW5kcyggYm91bmRzLCBleDEgLSBvdmVybGF5UGFkZGluZywgZXkxIC0gb3ZlcmxheVBhZGRpbmcsIGV4MiArIG92ZXJsYXlQYWRkaW5nLCBleTIgKyBvdmVybGF5UGFkZGluZyApO1xuICAgIH1cblxuICAgIC8vIGhhbmRsZSBlZGdlIGFycm93IHNpemVcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICBpZiggc3R5bGVFbmFibGVkICYmIG9wdGlvbnMuaW5jbHVkZUVkZ2VzICYmIGlzRWRnZSApe1xuICAgICAgdXBkYXRlQm91bmRzRnJvbUFycm93KCBib3VuZHMsIGVsZSwgJ21pZC1zb3VyY2UnLCBvcHRpb25zICk7XG4gICAgICB1cGRhdGVCb3VuZHNGcm9tQXJyb3coIGJvdW5kcywgZWxlLCAnbWlkLXRhcmdldCcsIG9wdGlvbnMgKTtcbiAgICAgIHVwZGF0ZUJvdW5kc0Zyb21BcnJvdyggYm91bmRzLCBlbGUsICdzb3VyY2UnLCBvcHRpb25zICk7XG4gICAgICB1cGRhdGVCb3VuZHNGcm9tQXJyb3coIGJvdW5kcywgZWxlLCAndGFyZ2V0Jywgb3B0aW9ucyApO1xuICAgIH1cblxuICAgIC8vIGhhbmRsZSBsYWJlbCBkaW1lbnNpb25zXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIGlmKCBzdHlsZUVuYWJsZWQgJiYgb3B0aW9ucy5pbmNsdWRlTGFiZWxzICl7XG4gICAgICB1cGRhdGVCb3VuZHNGcm9tTGFiZWwoIGJvdW5kcywgZWxlLCBudWxsLCBvcHRpb25zICk7XG5cbiAgICAgIGlmKCBpc0VkZ2UgKXtcbiAgICAgICAgdXBkYXRlQm91bmRzRnJvbUxhYmVsKCBib3VuZHMsIGVsZSwgJ3NvdXJjZScsIG9wdGlvbnMgKTtcbiAgICAgICAgdXBkYXRlQm91bmRzRnJvbUxhYmVsKCBib3VuZHMsIGVsZSwgJ3RhcmdldCcsIG9wdGlvbnMgKTtcbiAgICAgIH1cbiAgICB9IC8vIHN0eWxlIGVuYWJsZWQgZm9yIGxhYmVsc1xuICB9IC8vIGlmIGRpc3BsYXllZFxuXG4gIGJvdW5kcy54MSA9IG5vbmluZiggYm91bmRzLngxICk7XG4gIGJvdW5kcy55MSA9IG5vbmluZiggYm91bmRzLnkxICk7XG4gIGJvdW5kcy54MiA9IG5vbmluZiggYm91bmRzLngyICk7XG4gIGJvdW5kcy55MiA9IG5vbmluZiggYm91bmRzLnkyICk7XG4gIGJvdW5kcy53ID0gbm9uaW5mKCBib3VuZHMueDIgLSBib3VuZHMueDEgKTtcbiAgYm91bmRzLmggPSBub25pbmYoIGJvdW5kcy55MiAtIGJvdW5kcy55MSApO1xuXG4gIC8vIGV4cGFuZCBib3VuZHMgYnkgMSBiZWNhdXNlIGFudGlhbGlhc2luZyBjYW4gaW5jcmVhc2UgdGhlIHZpc3VhbC9lZmZlY3RpdmUgc2l6ZSBieSAxIG9uIGFsbCBzaWRlc1xuICBpZiggYm91bmRzLncgPiAwICYmIGJvdW5kcy5oID4gMCAmJiBkaXNwbGF5ZWQgKXtcbiAgICBtYXRoLmV4cGFuZEJvdW5kaW5nQm94KCBib3VuZHMsIDEgKTtcbiAgfVxuXG4gIHJldHVybiBib3VuZHM7XG59O1xuXG52YXIgdGYgPSBmdW5jdGlvbiggdmFsICl7XG4gIGlmKCB2YWwgKXtcbiAgICByZXR1cm4gJ3QnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAnZic7XG4gIH1cbn07XG5cbnZhciBnZXRLZXkgPSBmdW5jdGlvbiggb3B0cyApe1xuICB2YXIga2V5ID0gJyc7XG5cbiAga2V5ICs9IHRmKCBvcHRzLmluY3VkZU5vZGVzICk7XG4gIGtleSArPSB0Ziggb3B0cy5pbmNsdWRlRWRnZXMgKTtcbiAga2V5ICs9IHRmKCBvcHRzLmluY2x1ZGVMYWJlbHMgKTtcbiAga2V5ICs9IHRmKCBvcHRzLmluY2x1ZGVTaGFkb3dzICk7XG4gIGtleSArPSB0Ziggb3B0cy5pbmNsdWRlT3ZlcmxheXMgKTtcblxuICByZXR1cm4ga2V5O1xufTtcblxudmFyIGNhY2hlZEJvdW5kaW5nQm94SW1wbCA9IGZ1bmN0aW9uKCBlbGUsIG9wdHMgKXtcbiAgdmFyIF9wID0gZWxlLl9wcml2YXRlO1xuICB2YXIgYmI7XG4gIHZhciBoZWFkbGVzcyA9IGVsZS5jeSgpLmhlYWRsZXNzKCk7XG4gIHZhciBrZXkgPSBvcHRzID09PSBkZWZCYk9wdHMgPyBkZWZCYk9wdHNLZXkgOiBnZXRLZXkoIG9wdHMgKTtcblxuICBpZiggIW9wdHMudXNlQ2FjaGUgfHwgaGVhZGxlc3MgfHwgIV9wLmJiQ2FjaGUgfHwgIV9wLmJiQ2FjaGVba2V5XSApe1xuICAgIGJiID0gYm91bmRpbmdCb3hJbXBsKCBlbGUsIG9wdHMgKTtcblxuICAgIGlmKCAhaGVhZGxlc3MgKXtcbiAgICAgIF9wLmJiQ2FjaGUgPSBfcC5iYkNhY2hlIHx8IHt9O1xuICAgICAgX3AuYmJDYWNoZVtrZXldID0gYmI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJiID0gX3AuYmJDYWNoZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIGJiO1xufTtcblxudmFyIGRlZkJiT3B0cyA9IHtcbiAgaW5jbHVkZU5vZGVzOiB0cnVlLFxuICBpbmNsdWRlRWRnZXM6IHRydWUsXG4gIGluY2x1ZGVMYWJlbHM6IHRydWUsXG4gIGluY2x1ZGVTaGFkb3dzOiB0cnVlLFxuICBpbmNsdWRlT3ZlcmxheXM6IHRydWUsXG4gIHVzZUNhY2hlOiB0cnVlXG59O1xuXG52YXIgZGVmQmJPcHRzS2V5ID0gZ2V0S2V5KCBkZWZCYk9wdHMgKTtcblxuZWxlc2ZuLnJlY2FsY3VsYXRlUmVuZGVyZWRTdHlsZSA9IGZ1bmN0aW9uKCB1c2VDYWNoZSApe1xuICB2YXIgY3kgPSB0aGlzLmN5KCk7XG4gIHZhciByZW5kZXJlciA9IGN5LnJlbmRlcmVyKCk7XG4gIHZhciBzdHlsZUVuYWJsZWQgPSBjeS5zdHlsZUVuYWJsZWQoKTtcblxuICBpZiggcmVuZGVyZXIgJiYgc3R5bGVFbmFibGVkICl7XG4gICAgcmVuZGVyZXIucmVjYWxjdWxhdGVSZW5kZXJlZFN0eWxlKCB0aGlzLCB1c2VDYWNoZSApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5lbGVzZm4uYm91bmRpbmdCb3ggPSBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAvLyB0aGUgbWFpbiB1c2VjYXNlIGlzIGVsZS5ib3VuZGluZ0JveCgpIGZvciBhIHNpbmdsZSBlbGVtZW50IHdpdGggbm8vZGVmIG9wdGlvbnNcbiAgLy8gc3BlY2lmaWVkIHMudC4gdGhlIGNhY2hlIGlzIHVzZWQsIHNvIGNoZWNrIGZvciB0aGlzIGNhc2UgdG8gbWFrZSBpdCBmYXN0ZXIgYnlcbiAgLy8gYXZvaWRpbmcgdGhlIG92ZXJoZWFkIG9mIHRoZSByZXN0IG9mIHRoZSBmdW5jdGlvblxuICBpZiggdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpc1swXS5fcHJpdmF0ZS5iYkNhY2hlICYmIChvcHRpb25zID09PSB1bmRlZmluZWQgfHwgb3B0aW9ucy51c2VDYWNoZSA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMudXNlQ2FjaGUgPT09IHRydWUpICl7XG4gICAgaWYoIG9wdGlvbnMgPT09IHVuZGVmaW5lZCApe1xuICAgICAgb3B0aW9ucyA9IGRlZkJiT3B0cztcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGVkQm91bmRpbmdCb3hJbXBsKCB0aGlzWzBdLCBvcHRpb25zICk7XG4gIH1cblxuICB2YXIgYm91bmRzID0ge1xuICAgIHgxOiBJbmZpbml0eSxcbiAgICB5MTogSW5maW5pdHksXG4gICAgeDI6IC1JbmZpbml0eSxcbiAgICB5MjogLUluZmluaXR5XG4gIH07XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgdXRpbC5zdGF0aWNFbXB0eU9iamVjdCgpO1xuXG4gIHZhciBvcHRzID0ge1xuICAgIGluY2x1ZGVOb2RlczogdXRpbC5kZWZhdWx0KCBvcHRpb25zLmluY2x1ZGVOb2RlcywgZGVmQmJPcHRzLmluY2x1ZGVOb2RlcyApLFxuICAgIGluY2x1ZGVFZGdlczogdXRpbC5kZWZhdWx0KCBvcHRpb25zLmluY2x1ZGVFZGdlcywgZGVmQmJPcHRzLmluY2x1ZGVFZGdlcyApLFxuICAgIGluY2x1ZGVMYWJlbHM6IHV0aWwuZGVmYXVsdCggb3B0aW9ucy5pbmNsdWRlTGFiZWxzLCBkZWZCYk9wdHMuaW5jbHVkZUxhYmVscyApLFxuICAgIGluY2x1ZGVTaGFkb3dzOiB1dGlsLmRlZmF1bHQoIG9wdGlvbnMuaW5jbHVkZVNoYWRvd3MsIGRlZkJiT3B0cy5pbmNsdWRlU2hhZG93cyApLFxuICAgIGluY2x1ZGVPdmVybGF5czogdXRpbC5kZWZhdWx0KCBvcHRpb25zLmluY2x1ZGVPdmVybGF5cywgZGVmQmJPcHRzLmluY2x1ZGVPdmVybGF5cyApLFxuICAgIHVzZUNhY2hlOiB1dGlsLmRlZmF1bHQoIG9wdGlvbnMudXNlQ2FjaGUsIGRlZkJiT3B0cy51c2VDYWNoZSApXG4gIH07XG5cbiAgdmFyIGVsZXMgPSB0aGlzO1xuICB2YXIgY3kgPSBlbGVzLmN5KCk7XG4gIHZhciBzdHlsZUVuYWJsZWQgPSBjeS5zdHlsZUVuYWJsZWQoKTtcblxuICBpZiggc3R5bGVFbmFibGVkICl7XG4gICAgdGhpcy5yZWNhbGN1bGF0ZVJlbmRlcmVkU3R5bGUoIG9wdHMudXNlQ2FjaGUgKTtcbiAgfVxuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKyApe1xuICAgIHZhciBlbGUgPSBlbGVzW2ldO1xuXG4gICAgaWYoIHN0eWxlRW5hYmxlZCAmJiBlbGUuaXNFZGdlKCkgJiYgZWxlLnBzdHlsZSgnY3VydmUtc3R5bGUnKS5zdHJWYWx1ZSA9PT0gJ2JlemllcicgKXtcbiAgICAgIGVsZS5wYXJhbGxlbEVkZ2VzKCkucmVjYWxjdWxhdGVSZW5kZXJlZFN0eWxlKCBvcHRzLnVzZUNhY2hlICk7IC8vIG4uYi4gZWxlLnBhcmFsbGVsRWRnZXMoKSBzaW5nbGUgaXMgY2FjaGVkXG4gICAgfVxuXG4gICAgdXBkYXRlQm91bmRzRnJvbUJveCggYm91bmRzLCBjYWNoZWRCb3VuZGluZ0JveEltcGwoIGVsZSwgb3B0cyApICk7XG4gIH1cblxuICBib3VuZHMueDEgPSBub25pbmYoIGJvdW5kcy54MSApO1xuICBib3VuZHMueTEgPSBub25pbmYoIGJvdW5kcy55MSApO1xuICBib3VuZHMueDIgPSBub25pbmYoIGJvdW5kcy54MiApO1xuICBib3VuZHMueTIgPSBub25pbmYoIGJvdW5kcy55MiApO1xuICBib3VuZHMudyA9IG5vbmluZiggYm91bmRzLngyIC0gYm91bmRzLngxICk7XG4gIGJvdW5kcy5oID0gbm9uaW5mKCBib3VuZHMueTIgLSBib3VuZHMueTEgKTtcblxuICByZXR1cm4gYm91bmRzO1xufTtcblxudmFyIGRlZmluZURpbUZucyA9IGZ1bmN0aW9uKCBvcHRzICl7XG4gIG9wdHMudXBwZXJjYXNlTmFtZSA9IHV0aWwuY2FwaXRhbGl6ZSggb3B0cy5uYW1lICk7XG4gIG9wdHMuYXV0b05hbWUgPSAnYXV0bycgKyBvcHRzLnVwcGVyY2FzZU5hbWU7XG4gIG9wdHMubGFiZWxOYW1lID0gJ2xhYmVsJyArIG9wdHMudXBwZXJjYXNlTmFtZTtcbiAgb3B0cy5vdXRlck5hbWUgPSAnb3V0ZXInICsgb3B0cy51cHBlcmNhc2VOYW1lO1xuICBvcHRzLnVwcGVyY2FzZU91dGVyTmFtZSA9IHV0aWwuY2FwaXRhbGl6ZSggb3B0cy5vdXRlck5hbWUgKTtcblxuICBmblsgb3B0cy5uYW1lIF0gPSBmdW5jdGlvbiBkaW1JbXBsKCl7XG4gICAgdmFyIGVsZSA9IHRoaXNbMF07XG4gICAgdmFyIF9wID0gZWxlLl9wcml2YXRlO1xuICAgIHZhciBjeSA9IF9wLmN5O1xuICAgIHZhciBzdHlsZUVuYWJsZWQgPSBjeS5fcHJpdmF0ZS5zdHlsZUVuYWJsZWQ7XG5cbiAgICBpZiggZWxlICl7XG4gICAgICBpZiggc3R5bGVFbmFibGVkICl7XG4gICAgICAgIGlmKCBlbGUuaXNQYXJlbnQoKSApe1xuICAgICAgICAgIHJldHVybiBfcFsgb3B0cy5hdXRvTmFtZSBdIHx8IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZCA9IGVsZS5wc3R5bGUoIG9wdHMubmFtZSApO1xuXG4gICAgICAgIHN3aXRjaCggZC5zdHJWYWx1ZSApe1xuICAgICAgICAgIGNhc2UgJ2xhYmVsJzpcbiAgICAgICAgICAgIHJldHVybiBfcC5yc3R5bGVbIG9wdHMubGFiZWxOYW1lIF0gfHwgMDtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGQucGZWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZuWyAnb3V0ZXInICsgb3B0cy51cHBlcmNhc2VOYW1lIF0gPSBmdW5jdGlvbiBvdXRlckRpbUltcGwoKXtcbiAgICB2YXIgZWxlID0gdGhpc1swXTtcbiAgICB2YXIgX3AgPSBlbGUuX3ByaXZhdGU7XG4gICAgdmFyIGN5ID0gX3AuY3k7XG4gICAgdmFyIHN0eWxlRW5hYmxlZCA9IGN5Ll9wcml2YXRlLnN0eWxlRW5hYmxlZDtcblxuICAgIGlmKCBlbGUgKXtcbiAgICAgIGlmKCBzdHlsZUVuYWJsZWQgKXtcbiAgICAgICAgdmFyIGRpbSA9IGVsZVsgb3B0cy5uYW1lIF0oKTtcbiAgICAgICAgdmFyIGJvcmRlciA9IGVsZS5wc3R5bGUoICdib3JkZXItd2lkdGgnICkucGZWYWx1ZTtcbiAgICAgICAgdmFyIHBhZGRpbmcgPSBlbGUucHN0eWxlKCBvcHRzLnBhZGRpbmdzWzBdICkucGZWYWx1ZSArIGVsZS5wc3R5bGUoIG9wdHMucGFkZGluZ3NbMV0gKS5wZlZhbHVlO1xuXG4gICAgICAgIHJldHVybiBkaW0gKyBib3JkZXIgKyBwYWRkaW5nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZuWyAncmVuZGVyZWQnICsgb3B0cy51cHBlcmNhc2VOYW1lIF0gPSBmdW5jdGlvbiByZW5kZXJlZERpbUltcGwoKXtcbiAgICB2YXIgZWxlID0gdGhpc1swXTtcblxuICAgIGlmKCBlbGUgKXtcbiAgICAgIHZhciBkID0gZWxlWyBvcHRzLm5hbWUgXSgpO1xuICAgICAgcmV0dXJuIGQgKiB0aGlzLmN5KCkuem9vbSgpO1xuICAgIH1cbiAgfTtcblxuICBmblsgJ3JlbmRlcmVkJyArIG9wdHMudXBwZXJjYXNlT3V0ZXJOYW1lIF0gPSBmdW5jdGlvbiByZW5kZXJlZE91dGVyRGltSW1wbCgpe1xuICAgIHZhciBlbGUgPSB0aGlzWzBdO1xuXG4gICAgaWYoIGVsZSApe1xuICAgICAgdmFyIG9kID0gZWxlWyBvcHRzLm91dGVyTmFtZSBdKCk7XG4gICAgICByZXR1cm4gb2QgKiB0aGlzLmN5KCkuem9vbSgpO1xuICAgIH1cbiAgfTtcbn07XG5cbmRlZmluZURpbUZucygge1xuICBuYW1lOiAnd2lkdGgnLFxuICBwYWRkaW5nczogWyAncGFkZGluZy1sZWZ0JywgJ3BhZGRpbmctcmlnaHQnIF1cbn0gKTtcblxuZGVmaW5lRGltRm5zKCB7XG4gIG5hbWU6ICdoZWlnaHQnLFxuICBwYWRkaW5nczogWyAncGFkZGluZy10b3AnLCAncGFkZGluZy1ib3R0b20nIF1cbn0gKTtcblxuLy8gYWxpYXNlc1xuZm4ubW9kZWxQb3NpdGlvbiA9IGZuLnBvaW50ID0gZm4ucG9zaXRpb247XG5mbi5tb2RlbFBvc2l0aW9ucyA9IGZuLnBvaW50cyA9IGZuLnBvc2l0aW9ucztcbmZuLnJlbmRlcmVkUG9pbnQgPSBmbi5yZW5kZXJlZFBvc2l0aW9uO1xuZm4ucmVsYXRpdmVQb2ludCA9IGZuLnJlbGF0aXZlUG9zaXRpb247XG5mbi5ib3VuZGluZ2JveCA9IGZuLmJvdW5kaW5nQm94O1xuZm4ucmVuZGVyZWRCb3VuZGluZ2JveCA9IGZuLnJlbmRlcmVkQm91bmRpbmdCb3g7XG5cbm1vZHVsZS5leHBvcnRzID0gZWxlc2ZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoICcuLi91dGlsJyApO1xudmFyIGlzID0gcmVxdWlyZSggJy4uL2lzJyApO1xuXG4vLyByZXByZXNlbnRzIGEgbm9kZSBvciBhbiBlZGdlXG52YXIgRWxlbWVudCA9IGZ1bmN0aW9uKCBjeSwgcGFyYW1zLCByZXN0b3JlICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmVzdG9yZSA9IChyZXN0b3JlID09PSB1bmRlZmluZWQgfHwgcmVzdG9yZSA/IHRydWUgOiBmYWxzZSk7XG5cbiAgaWYoIGN5ID09PSB1bmRlZmluZWQgfHwgcGFyYW1zID09PSB1bmRlZmluZWQgfHwgIWlzLmNvcmUoIGN5ICkgKXtcbiAgICB1dGlsLmVycm9yKCAnQW4gZWxlbWVudCBtdXN0IGhhdmUgYSBjb3JlIHJlZmVyZW5jZSBhbmQgcGFyYW1ldGVycyBzZXQnICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGdyb3VwID0gcGFyYW1zLmdyb3VwO1xuXG4gIC8vIHRyeSB0byBhdXRvbWF0aWNhbGx5IGluZmVyIHRoZSBncm91cCBpZiB1bnNwZWNpZmllZFxuICBpZiggZ3JvdXAgPT0gbnVsbCApe1xuICAgIGlmKCBwYXJhbXMuZGF0YSAmJiBwYXJhbXMuZGF0YS5zb3VyY2UgIT0gbnVsbCAmJiBwYXJhbXMuZGF0YS50YXJnZXQgIT0gbnVsbCApe1xuICAgICAgZ3JvdXAgPSAnZWRnZXMnO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cCA9ICdub2Rlcyc7XG4gICAgfVxuICB9XG5cbiAgLy8gdmFsaWRhdGUgZ3JvdXBcbiAgaWYoIGdyb3VwICE9PSAnbm9kZXMnICYmIGdyb3VwICE9PSAnZWRnZXMnICl7XG4gICAgdXRpbC5lcnJvciggJ0FuIGVsZW1lbnQgbXVzdCBiZSBvZiB0eXBlIGBub2Rlc2Agb3IgYGVkZ2VzYDsgeW91IHNwZWNpZmllZCBgJyArIGdyb3VwICsgJ2AnICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gbWFrZSB0aGUgZWxlbWVudCBhcnJheS1saWtlLCBqdXN0IGxpa2UgYSBjb2xsZWN0aW9uXG4gIHRoaXMubGVuZ3RoID0gMTtcbiAgdGhpc1swXSA9IHRoaXM7XG5cbiAgLy8gTk9URTogd2hlbiBzb21ldGhpbmcgaXMgYWRkZWQgaGVyZSwgYWRkIGFsc28gdG8gZWxlLmpzb24oKVxuICB0aGlzLl9wcml2YXRlID0ge1xuICAgIGN5OiBjeSxcbiAgICBzaW5nbGU6IHRydWUsIC8vIGluZGljYXRlcyB0aGlzIGlzIGFuIGVsZW1lbnRcbiAgICBkYXRhOiBwYXJhbXMuZGF0YSB8fCB7fSwgLy8gZGF0YSBvYmplY3RcbiAgICBwb3NpdGlvbjogcGFyYW1zLnBvc2l0aW9uIHx8IHt9LCAvLyAoeCwgeSkgcG9zaXRpb24gcGFpclxuICAgIGF1dG9XaWR0aDogdW5kZWZpbmVkLCAvLyB3aWR0aCBhbmQgaGVpZ2h0IG9mIG5vZGVzIGNhbGN1bGF0ZWQgYnkgdGhlIHJlbmRlcmVyIHdoZW4gc2V0IHRvIHNwZWNpYWwgJ2F1dG8nIHZhbHVlXG4gICAgYXV0b0hlaWdodDogdW5kZWZpbmVkLFxuICAgIGxpc3RlbmVyczogW10sIC8vIGFycmF5IG9mIGJvdW5kIGxpc3RlbmVyc1xuICAgIGdyb3VwOiBncm91cCwgLy8gc3RyaW5nOyAnbm9kZXMnIG9yICdlZGdlcydcbiAgICBzdHlsZToge30sIC8vIHByb3BlcnRpZXMgYXMgc2V0IGJ5IHRoZSBzdHlsZVxuICAgIHJzdHlsZToge30sIC8vIHByb3BlcnRpZXMgZm9yIHN0eWxlIHNlbnQgZnJvbSB0aGUgcmVuZGVyZXIgdG8gdGhlIGNvcmVcbiAgICBzdHlsZUN4dHM6IFtdLCAvLyBhcHBsaWVkIHN0eWxlIGNvbnRleHRzIGZyb20gdGhlIHN0eWxlclxuICAgIHJlbW92ZWQ6IHRydWUsIC8vIHdoZXRoZXIgaXQncyBpbnNpZGUgdGhlIHZpczsgdHJ1ZSBpZiByZW1vdmVkIChzZXQgdHJ1ZSBoZXJlIHNpbmNlIHdlIGNhbGwgcmVzdG9yZSlcbiAgICBzZWxlY3RlZDogcGFyYW1zLnNlbGVjdGVkID8gdHJ1ZSA6IGZhbHNlLCAvLyB3aGV0aGVyIGl0J3Mgc2VsZWN0ZWRcbiAgICBzZWxlY3RhYmxlOiBwYXJhbXMuc2VsZWN0YWJsZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICggcGFyYW1zLnNlbGVjdGFibGUgPyB0cnVlIDogZmFsc2UgKSwgLy8gd2hldGhlciBpdCdzIHNlbGVjdGFibGVcbiAgICBsb2NrZWQ6IHBhcmFtcy5sb2NrZWQgPyB0cnVlIDogZmFsc2UsIC8vIHdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgbG9ja2VkIChjYW5ub3QgYmUgbW92ZWQpXG4gICAgZ3JhYmJlZDogZmFsc2UsIC8vIHdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgZ3JhYmJlZCBieSB0aGUgbW91c2U7IHJlbmRlcmVyIHNldHMgdGhpcyBwcml2YXRlbHlcbiAgICBncmFiYmFibGU6IHBhcmFtcy5ncmFiYmFibGUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAoIHBhcmFtcy5ncmFiYmFibGUgPyB0cnVlIDogZmFsc2UgKSwgLy8gd2hldGhlciB0aGUgZWxlbWVudCBjYW4gYmUgZ3JhYmJlZFxuICAgIGFjdGl2ZTogZmFsc2UsIC8vIHdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgYWN0aXZlIGZyb20gdXNlciBpbnRlcmFjdGlvblxuICAgIGNsYXNzZXM6IHt9LCAvLyBtYXAgKCBjbGFzc05hbWUgPT4gdHJ1ZSApXG4gICAgYW5pbWF0aW9uOiB7IC8vIG9iamVjdCBmb3IgY3VycmVudGx5LXJ1bm5pbmcgYW5pbWF0aW9uc1xuICAgICAgY3VycmVudDogW10sXG4gICAgICBxdWV1ZTogW11cbiAgICB9LFxuICAgIHJzY3JhdGNoOiB7fSwgLy8gb2JqZWN0IGluIHdoaWNoIHRoZSByZW5kZXJlciBjYW4gc3RvcmUgaW5mb3JtYXRpb25cbiAgICBzY3JhdGNoOiBwYXJhbXMuc2NyYXRjaCB8fCB7fSwgLy8gc2NyYXRjaCBvYmplY3RzXG4gICAgZWRnZXM6IFtdLCAvLyBhcnJheSBvZiBjb25uZWN0ZWQgZWRnZXNcbiAgICBjaGlsZHJlbjogW10sIC8vIGFycmF5IG9mIGNoaWxkcmVuXG4gICAgdHJhdmVyc2FsQ2FjaGU6IHt9IC8vIGNhY2hlIG9mIG91dHB1dCBvZiB0cmF2ZXJzYWwgZnVuY3Rpb25zXG4gIH07XG5cbiAgLy8gcmVuZGVyZWRQb3NpdGlvbiBvdmVycmlkZXMgaWYgc3BlY2lmaWVkXG4gIGlmKCBwYXJhbXMucmVuZGVyZWRQb3NpdGlvbiApe1xuICAgIHZhciBycG9zID0gcGFyYW1zLnJlbmRlcmVkUG9zaXRpb247XG4gICAgdmFyIHBhbiA9IGN5LnBhbigpO1xuICAgIHZhciB6b29tID0gY3kuem9vbSgpO1xuXG4gICAgdGhpcy5fcHJpdmF0ZS5wb3NpdGlvbiA9IHtcbiAgICAgIHg6IChycG9zLnggLSBwYW4ueCkgLyB6b29tLFxuICAgICAgeTogKHJwb3MueSAtIHBhbi55KSAvIHpvb21cbiAgICB9O1xuICB9XG5cbiAgaWYoIGlzLnN0cmluZyggcGFyYW1zLmNsYXNzZXMgKSApe1xuICAgIHZhciBjbGFzc2VzID0gcGFyYW1zLmNsYXNzZXMuc3BsaXQoIC9cXHMrLyApO1xuICAgIGZvciggdmFyIGkgPSAwLCBsID0gY2xhc3Nlcy5sZW5ndGg7IGkgPCBsOyBpKysgKXtcbiAgICAgIHZhciBjbHMgPSBjbGFzc2VzWyBpIF07XG4gICAgICBpZiggIWNscyB8fCBjbHMgPT09ICcnICl7IGNvbnRpbnVlOyB9XG5cbiAgICAgIHNlbGYuX3ByaXZhdGUuY2xhc3Nlc1sgY2xzIF0gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmKCBwYXJhbXMuc3R5bGUgfHwgcGFyYW1zLmNzcyApe1xuICAgIGN5LnN0eWxlKCkuYXBwbHlCeXBhc3MoIHRoaXMsIHBhcmFtcy5zdHlsZSB8fCBwYXJhbXMuY3NzICk7XG4gIH1cblxuICBpZiggcmVzdG9yZSA9PT0gdW5kZWZpbmVkIHx8IHJlc3RvcmUgKXtcbiAgICB0aGlzLnJlc3RvcmUoKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVsZW1lbnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCAnLi4vZGVmaW5lJyApO1xuXG52YXIgZWxlc2ZuID0gKHtcbiAgb246IGRlZmluZS5vbigpLCAvLyAub24oIGV2ZW50cyBbLCBzZWxlY3Rvcl0gWywgZGF0YV0sIGhhbmRsZXIpXG4gIG9uZTogZGVmaW5lLm9uKCB7IHVuYmluZFNlbGZPblRyaWdnZXI6IHRydWUgfSApLFxuICBvbmNlOiBkZWZpbmUub24oIHsgdW5iaW5kQWxsQmluZGVyc09uVHJpZ2dlcjogdHJ1ZSB9ICksXG4gIG9mZjogZGVmaW5lLm9mZigpLCAvLyAub2ZmKCBldmVudHMgWywgc2VsZWN0b3JdIFssIGhhbmRsZXJdIClcbiAgdHJpZ2dlcjogZGVmaW5lLnRyaWdnZXIoKSwgLy8gLnRyaWdnZXIoIGV2ZW50cyBbLCBleHRyYVBhcmFtc10gKVxuXG4gIHJ0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGV4dHJhUGFyYW1zICl7IC8vIGZvciBpbnRlcm5hbCB1c2Ugb25seVxuICAgIGlmKCB0aGlzLmxlbmd0aCA9PT0gMCApeyByZXR1cm47IH0gLy8gZW1wdHkgY29sbGVjdGlvbnMgZG9uJ3QgbmVlZCB0byBub3RpZnkgYW55dGhpbmdcblxuICAgIC8vIG5vdGlmeSByZW5kZXJlclxuICAgIHRoaXMuY3koKS5ub3RpZnkoIHtcbiAgICAgIHR5cGU6IGV2ZW50LFxuICAgICAgZWxlczogdGhpc1xuICAgIH0gKTtcblxuICAgIHRoaXMudHJpZ2dlciggZXZlbnQsIGV4dHJhUGFyYW1zICk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn0pO1xuXG4vLyBhbGlhc2VzOlxuZGVmaW5lLmV2ZW50QWxpYXNlc09uKCBlbGVzZm4gKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbGVzZm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpcyA9IHJlcXVpcmUoICcuLi9pcycgKTtcbnZhciBTZWxlY3RvciA9IHJlcXVpcmUoICcuLi9zZWxlY3RvcicgKTtcblxudmFyIGVsZXNmbiA9ICh7XG4gIG5vZGVzOiBmdW5jdGlvbiggc2VsZWN0b3IgKXtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCBpLCBlbGVtZW50ICl7XG4gICAgICByZXR1cm4gZWxlbWVudC5pc05vZGUoKTtcbiAgICB9ICkuZmlsdGVyKCBzZWxlY3RvciApO1xuICB9LFxuXG4gIGVkZ2VzOiBmdW5jdGlvbiggc2VsZWN0b3IgKXtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCBpLCBlbGVtZW50ICl7XG4gICAgICByZXR1cm4gZWxlbWVudC5pc0VkZ2UoKTtcbiAgICB9ICkuZmlsdGVyKCBzZWxlY3RvciApO1xuICB9LFxuXG4gIGZpbHRlcjogZnVuY3Rpb24oIGZpbHRlciApe1xuICAgIGlmKCBmaWx0ZXIgPT09IHVuZGVmaW5lZCApeyAvLyBjaGVjayB0aGlzIGZpcnN0IGIvYyBpdCdzIHRoZSBtb3N0IGNvbW1vbi9wZXJmb3JtYW50IGNhc2VcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSBpZiggaXMuc3RyaW5nKCBmaWx0ZXIgKSB8fCBpcy5lbGVtZW50T3JDb2xsZWN0aW9uKCBmaWx0ZXIgKSApe1xuICAgICAgcmV0dXJuIFNlbGVjdG9yKCBmaWx0ZXIgKS5maWx0ZXIoIHRoaXMgKTtcbiAgICB9IGVsc2UgaWYoIGlzLmZuKCBmaWx0ZXIgKSApe1xuICAgICAgdmFyIGVsZW1lbnRzID0gW107XG5cbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyApe1xuICAgICAgICB2YXIgZWxlID0gdGhpc1sgaSBdO1xuXG4gICAgICAgIGlmKCBmaWx0ZXIuYXBwbHkoIGVsZSwgWyBpLCBlbGUgXSApICl7XG4gICAgICAgICAgZWxlbWVudHMucHVzaCggZWxlICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuc3Bhd24oIGVsZW1lbnRzICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3Bhd24oKTsgLy8gaWYgbm90IGhhbmRsZWQgYnkgYWJvdmUsIGdpdmUgJ2VtIGFuIGVtcHR5IGNvbGxlY3Rpb25cbiAgfSxcblxuICBub3Q6IGZ1bmN0aW9uKCB0b1JlbW92ZSApe1xuICAgIGlmKCAhdG9SZW1vdmUgKXtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIGlmKCBpcy5zdHJpbmcoIHRvUmVtb3ZlICkgKXtcbiAgICAgICAgdG9SZW1vdmUgPSB0aGlzLmZpbHRlciggdG9SZW1vdmUgKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZW1lbnRzID0gW107XG5cbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyApe1xuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXNbIGkgXTtcblxuICAgICAgICB2YXIgcmVtb3ZlID0gdG9SZW1vdmUuX3ByaXZhdGUuaWRzWyBlbGVtZW50LmlkKCkgXTtcbiAgICAgICAgaWYoICFyZW1vdmUgKXtcbiAgICAgICAgICBlbGVtZW50cy5wdXNoKCBlbGVtZW50ICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuc3Bhd24oIGVsZW1lbnRzICk7XG4gICAgfVxuXG4gIH0sXG5cbiAgYWJzb2x1dGVDb21wbGVtZW50OiBmdW5jdGlvbigpe1xuICAgIHZhciBjeSA9IHRoaXMuX3ByaXZhdGUuY3k7XG5cbiAgICByZXR1cm4gY3kubXV0YWJsZUVsZW1lbnRzKCkubm90KCB0aGlzICk7XG4gIH0sXG5cbiAgaW50ZXJzZWN0OiBmdW5jdGlvbiggb3RoZXIgKXtcbiAgICAvLyBpZiBhIHNlbGVjdG9yIGlzIHNwZWNpZmllZCwgdGhlbiBmaWx0ZXIgYnkgaXQgaW5zdGVhZFxuICAgIGlmKCBpcy5zdHJpbmcoIG90aGVyICkgKXtcbiAgICAgIHZhciBzZWxlY3RvciA9IG90aGVyO1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKCBzZWxlY3RvciApO1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgIHZhciBjb2wxID0gdGhpcztcbiAgICB2YXIgY29sMiA9IG90aGVyO1xuICAgIHZhciBjb2wxU21hbGxlciA9IHRoaXMubGVuZ3RoIDwgb3RoZXIubGVuZ3RoO1xuICAgIC8vIHZhciBpZHMxID0gY29sMVNtYWxsZXIgPyBjb2wxLl9wcml2YXRlLmlkcyA6IGNvbDIuX3ByaXZhdGUuaWRzO1xuICAgIHZhciBpZHMyID0gY29sMVNtYWxsZXIgPyBjb2wyLl9wcml2YXRlLmlkcyA6IGNvbDEuX3ByaXZhdGUuaWRzO1xuICAgIHZhciBjb2wgPSBjb2wxU21hbGxlciA/IGNvbDEgOiBjb2wyO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBjb2wubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBpZCA9IGNvbFsgaSBdLl9wcml2YXRlLmRhdGEuaWQ7XG4gICAgICB2YXIgZWxlID0gaWRzMlsgaWQgXTtcblxuICAgICAgaWYoIGVsZSApe1xuICAgICAgICBlbGVtZW50cy5wdXNoKCBlbGUgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zcGF3biggZWxlbWVudHMgKTtcbiAgfSxcblxuICB4b3I6IGZ1bmN0aW9uKCBvdGhlciApe1xuICAgIHZhciBjeSA9IHRoaXMuX3ByaXZhdGUuY3k7XG5cbiAgICBpZiggaXMuc3RyaW5nKCBvdGhlciApICl7XG4gICAgICBvdGhlciA9IGN5LiQoIG90aGVyICk7XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIGNvbDEgPSB0aGlzO1xuICAgIHZhciBjb2wyID0gb3RoZXI7XG5cbiAgICB2YXIgYWRkID0gZnVuY3Rpb24oIGNvbCwgb3RoZXIgKXtcblxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBjb2wubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGVsZSA9IGNvbFsgaSBdO1xuICAgICAgICB2YXIgaWQgPSBlbGUuX3ByaXZhdGUuZGF0YS5pZDtcbiAgICAgICAgdmFyIGluT3RoZXIgPSBvdGhlci5fcHJpdmF0ZS5pZHNbIGlkIF07XG5cbiAgICAgICAgaWYoICFpbk90aGVyICl7XG4gICAgICAgICAgZWxlbWVudHMucHVzaCggZWxlICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH07XG5cbiAgICBhZGQoIGNvbDEsIGNvbDIgKTtcbiAgICBhZGQoIGNvbDIsIGNvbDEgKTtcblxuICAgIHJldHVybiB0aGlzLnNwYXduKCBlbGVtZW50cyApO1xuICB9LFxuXG4gIGRpZmY6IGZ1bmN0aW9uKCBvdGhlciApe1xuICAgIHZhciBjeSA9IHRoaXMuX3ByaXZhdGUuY3k7XG5cbiAgICBpZiggaXMuc3RyaW5nKCBvdGhlciApICl7XG4gICAgICBvdGhlciA9IGN5LiQoIG90aGVyICk7XG4gICAgfVxuXG4gICAgdmFyIGxlZnQgPSBbXTtcbiAgICB2YXIgcmlnaHQgPSBbXTtcbiAgICB2YXIgYm90aCA9IFtdO1xuICAgIHZhciBjb2wxID0gdGhpcztcbiAgICB2YXIgY29sMiA9IG90aGVyO1xuXG4gICAgdmFyIGFkZCA9IGZ1bmN0aW9uKCBjb2wsIG90aGVyLCByZXRFbGVzICl7XG5cbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgY29sLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBlbGUgPSBjb2xbIGkgXTtcbiAgICAgICAgdmFyIGlkID0gZWxlLl9wcml2YXRlLmRhdGEuaWQ7XG4gICAgICAgIHZhciBpbk90aGVyID0gb3RoZXIuX3ByaXZhdGUuaWRzWyBpZCBdO1xuXG4gICAgICAgIGlmKCBpbk90aGVyICl7XG4gICAgICAgICAgYm90aC5wdXNoKCBlbGUgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXRFbGVzLnB1c2goIGVsZSApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgYWRkKCBjb2wxLCBjb2wyLCBsZWZ0ICk7XG4gICAgYWRkKCBjb2wyLCBjb2wxLCByaWdodCApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IHRoaXMuc3Bhd24oIGxlZnQsIHsgdW5pcXVlOiB0cnVlIH0gKSxcbiAgICAgIHJpZ2h0OiB0aGlzLnNwYXduKCByaWdodCwgeyB1bmlxdWU6IHRydWUgfSApLFxuICAgICAgYm90aDogdGhpcy5zcGF3biggYm90aCwgeyB1bmlxdWU6IHRydWUgfSApXG4gICAgfTtcbiAgfSxcblxuICBhZGQ6IGZ1bmN0aW9uKCB0b0FkZCApe1xuICAgIHZhciBjeSA9IHRoaXMuX3ByaXZhdGUuY3k7XG5cbiAgICBpZiggIXRvQWRkICl7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiggaXMuc3RyaW5nKCB0b0FkZCApICl7XG4gICAgICB2YXIgc2VsZWN0b3IgPSB0b0FkZDtcbiAgICAgIHRvQWRkID0gY3kubXV0YWJsZUVsZW1lbnRzKCkuZmlsdGVyKCBzZWxlY3RvciApO1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrICl7XG4gICAgICBlbGVtZW50cy5wdXNoKCB0aGlzWyBpIF0gKTtcbiAgICB9XG5cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IHRvQWRkLmxlbmd0aDsgaSsrICl7XG5cbiAgICAgIHZhciBhZGQgPSAhdGhpcy5fcHJpdmF0ZS5pZHNbIHRvQWRkWyBpIF0uaWQoKSBdO1xuICAgICAgaWYoIGFkZCApe1xuICAgICAgICBlbGVtZW50cy5wdXNoKCB0b0FkZFsgaSBdICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3Bhd24oIGVsZW1lbnRzICk7XG4gIH0sXG5cbiAgLy8gaW4gcGxhY2UgbWVyZ2Ugb24gY2FsbGluZyBjb2xsZWN0aW9uXG4gIG1lcmdlOiBmdW5jdGlvbiggdG9BZGQgKXtcbiAgICB2YXIgX3AgPSB0aGlzLl9wcml2YXRlO1xuICAgIHZhciBjeSA9IF9wLmN5O1xuXG4gICAgaWYoICF0b0FkZCApe1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYoIHRvQWRkICYmIGlzLnN0cmluZyggdG9BZGQgKSApe1xuICAgICAgdmFyIHNlbGVjdG9yID0gdG9BZGQ7XG4gICAgICB0b0FkZCA9IGN5Lm11dGFibGVFbGVtZW50cygpLmZpbHRlciggc2VsZWN0b3IgKTtcbiAgICB9XG5cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IHRvQWRkLmxlbmd0aDsgaSsrICl7XG4gICAgICB2YXIgdG9BZGRFbGUgPSB0b0FkZFsgaSBdO1xuICAgICAgdmFyIGlkID0gdG9BZGRFbGUuX3ByaXZhdGUuZGF0YS5pZDtcbiAgICAgIHZhciBhZGQgPSAhX3AuaWRzWyBpZCBdO1xuXG4gICAgICBpZiggYWRkICl7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMubGVuZ3RoKys7XG5cbiAgICAgICAgdGhpc1sgaW5kZXggXSA9IHRvQWRkRWxlO1xuICAgICAgICBfcC5pZHNbIGlkIF0gPSB0b0FkZEVsZTtcbiAgICAgICAgX3AuaW5kZXhlc1sgaWQgXSA9IGluZGV4O1xuICAgICAgfSBlbHNlIHsgLy8gcmVwbGFjZVxuICAgICAgICB2YXIgaW5kZXggPSBfcC5pbmRleGVzWyBpZCBdO1xuXG4gICAgICAgIHRoaXNbIGluZGV4IF0gPSB0b0FkZEVsZTtcbiAgICAgICAgX3AuaWRzWyBpZCBdID0gdG9BZGRFbGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG4gIH0sXG5cbiAgLy8gcmVtb3ZlIHNpbmdsZSBlbGUgaW4gcGxhY2UgaW4gY2FsbGluZyBjb2xsZWN0aW9uXG4gIHVubWVyZ2VPbmU6IGZ1bmN0aW9uKCBlbGUgKXtcbiAgICBlbGUgPSBlbGVbMF07XG5cbiAgICB2YXIgX3AgPSB0aGlzLl9wcml2YXRlO1xuICAgIHZhciBpZCA9IGVsZS5fcHJpdmF0ZS5kYXRhLmlkO1xuICAgIHZhciBpID0gX3AuaW5kZXhlc1sgaWQgXTtcblxuICAgIGlmKCBpID09IG51bGwgKXtcbiAgICAgIHJldHVybiB0aGlzOyAvLyBubyBuZWVkIHRvIHJlbW92ZVxuICAgIH1cblxuICAgIC8vIHJlbW92ZSBlbGVcbiAgICB0aGlzWyBpIF0gPSB1bmRlZmluZWQ7XG4gICAgX3AuaWRzWyBpZCBdID0gdW5kZWZpbmVkO1xuICAgIF9wLmluZGV4ZXNbIGlkIF0gPSB1bmRlZmluZWQ7XG5cbiAgICB2YXIgdW5tZXJnZWRMYXN0RWxlID0gaSA9PT0gdGhpcy5sZW5ndGggLSAxO1xuXG4gICAgLy8gcmVwbGFjZSBlbXB0eSBzcG90IHdpdGggbGFzdCBlbGUgaW4gY29sbGVjdGlvblxuICAgIGlmKCB0aGlzLmxlbmd0aCA+IDEgJiYgIXVubWVyZ2VkTGFzdEVsZSApe1xuICAgICAgdmFyIGxhc3RFbGVJID0gdGhpcy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGxhc3RFbGUgPSB0aGlzWyBsYXN0RWxlSSBdO1xuICAgICAgdmFyIGxhc3RFbGVJZCA9IGxhc3RFbGUuX3ByaXZhdGUuZGF0YS5pZDtcblxuICAgICAgdGhpc1sgbGFzdEVsZUkgXSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXNbIGkgXSA9IGxhc3RFbGU7XG4gICAgICBfcC5pbmRleGVzWyBsYXN0RWxlSWQgXSA9IGk7XG4gICAgfVxuXG4gICAgLy8gdGhlIGNvbGxlY3Rpb24gaXMgbm93IDEgZWxlIHNtYWxsZXJcbiAgICB0aGlzLmxlbmd0aC0tO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLy8gcmVtb3ZlIGVsZXMgaW4gcGxhY2Ugb24gY2FsbGluZyBjb2xsZWN0aW9uXG4gIHVubWVyZ2U6IGZ1bmN0aW9uKCB0b1JlbW92ZSApe1xuICAgIHZhciBjeSA9IHRoaXMuX3ByaXZhdGUuY3k7XG5cbiAgICBpZiggIXRvUmVtb3ZlICl7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiggdG9SZW1vdmUgJiYgaXMuc3RyaW5nKCB0b1JlbW92ZSApICl7XG4gICAgICB2YXIgc2VsZWN0b3IgPSB0b1JlbW92ZTtcbiAgICAgIHRvUmVtb3ZlID0gY3kubXV0YWJsZUVsZW1lbnRzKCkuZmlsdGVyKCBzZWxlY3RvciApO1xuICAgIH1cblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdG9SZW1vdmUubGVuZ3RoOyBpKysgKXtcbiAgICAgIHRoaXMudW5tZXJnZU9uZSggdG9SZW1vdmVbIGkgXSApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9LFxuXG4gIG1hcDogZnVuY3Rpb24oIG1hcEZuLCB0aGlzQXJnICl7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIHZhciBlbGVzID0gdGhpcztcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGVsZSA9IGVsZXNbIGkgXTtcbiAgICAgIHZhciByZXQgPSB0aGlzQXJnID8gbWFwRm4uYXBwbHkoIHRoaXNBcmcsIFsgZWxlLCBpLCBlbGVzIF0gKSA6IG1hcEZuKCBlbGUsIGksIGVsZXMgKTtcblxuICAgICAgYXJyLnB1c2goIHJldCApO1xuICAgIH1cblxuICAgIHJldHVybiBhcnI7XG4gIH0sXG5cbiAgcmVkdWNlOiBmdW5jdGlvbiggZm4sIGluaXRpYWxWYWx1ZSApe1xuICAgIHZhciB2YWwgPSBpbml0aWFsVmFsdWU7XG4gICAgdmFyIGVsZXMgPSB0aGlzO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrICl7XG4gICAgICB2YWwgPSBmbiggdmFsLCBlbGVzW2ldLCBpLCBlbGVzICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbDtcbiAgfSxcblxuICBzdGRGaWx0ZXI6IGZ1bmN0aW9uKCBmbiwgdGhpc0FyZyApe1xuICAgIHZhciBmaWx0ZXJFbGVzID0gW107XG4gICAgdmFyIGVsZXMgPSB0aGlzO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrICl7XG4gICAgICB2YXIgZWxlID0gZWxlc1sgaSBdO1xuICAgICAgdmFyIGluY2x1ZGUgPSB0aGlzQXJnID8gZm4uYXBwbHkoIHRoaXNBcmcsIFsgZWxlLCBpLCBlbGVzIF0gKSA6IGZuKCBlbGUsIGksIGVsZXMgKTtcblxuICAgICAgaWYoIGluY2x1ZGUgKXtcbiAgICAgICAgZmlsdGVyRWxlcy5wdXNoKCBlbGUgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zcGF3biggZmlsdGVyRWxlcyApO1xuICB9LFxuXG4gIG1heDogZnVuY3Rpb24oIHZhbEZuLCB0aGlzQXJnICl7XG4gICAgdmFyIG1heCA9IC1JbmZpbml0eTtcbiAgICB2YXIgbWF4RWxlO1xuICAgIHZhciBlbGVzID0gdGhpcztcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGVsZSA9IGVsZXNbIGkgXTtcbiAgICAgIHZhciB2YWwgPSB0aGlzQXJnID8gdmFsRm4uYXBwbHkoIHRoaXNBcmcsIFsgZWxlLCBpLCBlbGVzIF0gKSA6IHZhbEZuKCBlbGUsIGksIGVsZXMgKTtcblxuICAgICAgaWYoIHZhbCA+IG1heCApe1xuICAgICAgICBtYXggPSB2YWw7XG4gICAgICAgIG1heEVsZSA9IGVsZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IG1heCxcbiAgICAgIGVsZTogbWF4RWxlXG4gICAgfTtcbiAgfSxcblxuICBtaW46IGZ1bmN0aW9uKCB2YWxGbiwgdGhpc0FyZyApe1xuICAgIHZhciBtaW4gPSBJbmZpbml0eTtcbiAgICB2YXIgbWluRWxlO1xuICAgIHZhciBlbGVzID0gdGhpcztcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGVsZSA9IGVsZXNbIGkgXTtcbiAgICAgIHZhciB2YWwgPSB0aGlzQXJnID8gdmFsRm4uYXBwbHkoIHRoaXNBcmcsIFsgZWxlLCBpLCBlbGVzIF0gKSA6IHZhbEZuKCBlbGUsIGksIGVsZXMgKTtcblxuICAgICAgaWYoIHZhbCA8IG1pbiApe1xuICAgICAgICBtaW4gPSB2YWw7XG4gICAgICAgIG1pbkVsZSA9IGVsZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IG1pbixcbiAgICAgIGVsZTogbWluRWxlXG4gICAgfTtcbiAgfVxufSk7XG5cbi8vIGFsaWFzZXNcbnZhciBmbiA9IGVsZXNmbjtcbmZuWyAndScgXSA9IGZuWyAnfCcgXSA9IGZuWyAnKycgXSA9IGZuLnVuaW9uID0gZm4ub3IgPSBmbi5hZGQ7XG5mblsgJ1xcXFwnIF0gPSBmblsgJyEnIF0gPSBmblsgJy0nIF0gPSBmbi5kaWZmZXJlbmNlID0gZm4ucmVsYXRpdmVDb21wbGVtZW50ID0gZm4uc3VidHJhY3QgPSBmbi5ub3Q7XG5mblsgJ24nIF0gPSBmblsgJyYnIF0gPSBmblsgJy4nIF0gPSBmbi5hbmQgPSBmbi5pbnRlcnNlY3Rpb24gPSBmbi5pbnRlcnNlY3Q7XG5mblsgJ14nIF0gPSBmblsgJygrKScgXSA9IGZuWyAnKC0pJyBdID0gZm4uc3ltbWV0cmljRGlmZmVyZW5jZSA9IGZuLnN5bWRpZmYgPSBmbi54b3I7XG5mbi5mbkZpbHRlciA9IGZuLmZpbHRlckZuID0gZm4uc3RkRmlsdGVyO1xuZm4uY29tcGxlbWVudCA9IGZuLmFic2NvbXAgPSBmbi5hYnNvbHV0ZUNvbXBsZW1lbnQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZWxlc2ZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxlc2ZuID0gKHtcbiAgaXNOb2RlOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmdyb3VwKCkgPT09ICdub2Rlcyc7XG4gIH0sXG5cbiAgaXNFZGdlOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmdyb3VwKCkgPT09ICdlZGdlcyc7XG4gIH0sXG5cbiAgaXNMb29wOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmlzRWRnZSgpICYmIHRoaXMuc291cmNlKCkuaWQoKSA9PT0gdGhpcy50YXJnZXQoKS5pZCgpO1xuICB9LFxuXG4gIGlzU2ltcGxlOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmlzRWRnZSgpICYmIHRoaXMuc291cmNlKCkuaWQoKSAhPT0gdGhpcy50YXJnZXQoKS5pZCgpO1xuICB9LFxuXG4gIGdyb3VwOiBmdW5jdGlvbigpe1xuICAgIHZhciBlbGUgPSB0aGlzWzBdO1xuXG4gICAgaWYoIGVsZSApe1xuICAgICAgcmV0dXJuIGVsZS5fcHJpdmF0ZS5ncm91cDtcbiAgICB9XG4gIH1cbn0pO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZWxlc2ZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoICcuLi91dGlsJyApO1xudmFyIGlzID0gcmVxdWlyZSggJy4uL2lzJyApO1xuXG52YXIgRWxlbWVudCA9IHJlcXVpcmUoICcuL2VsZW1lbnQnICk7XG5cbi8vIGZhY3RvcnkgZm9yIGdlbmVyYXRpbmcgZWRnZSBpZHMgd2hlbiBubyBpZCBpcyBzcGVjaWZpZWQgZm9yIGEgbmV3IGVsZW1lbnRcbnZhciBpZEZhY3RvcnkgPSB7XG4gIGdlbmVyYXRlOiBmdW5jdGlvbiggY3ksIGVsZW1lbnQsIHRyeVRoaXNJZCApe1xuICAgIHZhciBpZCA9IHRyeVRoaXNJZCAhPSBudWxsID8gdHJ5VGhpc0lkIDogdXRpbC51dWlkKCk7XG5cbiAgICB3aGlsZSggY3kuaGFzRWxlbWVudFdpdGhJZCggaWQgKSApe1xuICAgICAgaWQgPSB1dGlsLnV1aWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaWQ7XG4gIH1cbn07XG5cbi8vIHJlcHJlc2VudHMgYSBzZXQgb2Ygbm9kZXMsIGVkZ2VzLCBvciBib3RoIHRvZ2V0aGVyXG52YXIgQ29sbGVjdGlvbiA9IGZ1bmN0aW9uKCBjeSwgZWxlbWVudHMsIG9wdGlvbnMgKXtcbiAgaWYoIGN5ID09PSB1bmRlZmluZWQgfHwgIWlzLmNvcmUoIGN5ICkgKXtcbiAgICB1dGlsLmVycm9yKCAnQSBjb2xsZWN0aW9uIG11c3QgaGF2ZSBhIHJlZmVyZW5jZSB0byB0aGUgY29yZScgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaWRzID0ge307XG4gIHZhciBpbmRleGVzID0ge307XG4gIHZhciBjcmVhdGVkRWxlbWVudHMgPSBmYWxzZTtcblxuICBpZiggIWVsZW1lbnRzICl7XG4gICAgZWxlbWVudHMgPSBbXTtcbiAgfSBlbHNlIGlmKCBlbGVtZW50cy5sZW5ndGggPiAwICYmIGlzLnBsYWluT2JqZWN0KCBlbGVtZW50c1swXSApICYmICFpcy5lbGVtZW50KCBlbGVtZW50c1swXSApICl7XG4gICAgY3JlYXRlZEVsZW1lbnRzID0gdHJ1ZTtcblxuICAgIC8vIG1ha2UgZWxlbWVudHMgZnJvbSBqc29uIGFuZCByZXN0b3JlIGFsbCBhdCBvbmNlIGxhdGVyXG4gICAgdmFyIGVsZXMgPSBbXTtcbiAgICB2YXIgZWxlc0lkcyA9IHt9O1xuXG4gICAgZm9yKCB2YXIgaSA9IDAsIGwgPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKXtcbiAgICAgIHZhciBqc29uID0gZWxlbWVudHNbIGkgXTtcblxuICAgICAgaWYoIGpzb24uZGF0YSA9PSBudWxsICl7XG4gICAgICAgIGpzb24uZGF0YSA9IHt9O1xuICAgICAgfVxuXG4gICAgICB2YXIgZGF0YSA9IGpzb24uZGF0YTtcblxuICAgICAgLy8gbWFrZSBzdXJlIG5ld2x5IGNyZWF0ZWQgZWxlbWVudHMgaGF2ZSB2YWxpZCBpZHNcbiAgICAgIGlmKCBkYXRhLmlkID09IG51bGwgKXtcbiAgICAgICAgZGF0YS5pZCA9IGlkRmFjdG9yeS5nZW5lcmF0ZSggY3ksIGpzb24gKTtcbiAgICAgIH0gZWxzZSBpZiggY3kuaGFzRWxlbWVudFdpdGhJZCggZGF0YS5pZCApIHx8IGVsZXNJZHNbIGRhdGEuaWQgXSApe1xuICAgICAgICBjb250aW51ZTsgLy8gY2FuJ3QgY3JlYXRlIGVsZW1lbnQgaWYgcHJpb3IgaWQgYWxyZWFkeSBleGlzdHNcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZSA9IG5ldyBFbGVtZW50KCBjeSwganNvbiwgZmFsc2UgKTtcbiAgICAgIGVsZXMucHVzaCggZWxlICk7XG4gICAgICBlbGVzSWRzWyBkYXRhLmlkIF0gPSB0cnVlO1xuICAgIH1cblxuICAgIGVsZW1lbnRzID0gZWxlcztcbiAgfVxuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICBmb3IoIHZhciBpID0gMCwgbCA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApe1xuICAgIHZhciBlbGVtZW50ID0gZWxlbWVudHNbIGkgXTtcbiAgICBpZiggIWVsZW1lbnQgKXsgIGNvbnRpbnVlOyB9XG5cbiAgICB2YXIgaWQgPSBlbGVtZW50Ll9wcml2YXRlLmRhdGEuaWQ7XG5cbiAgICBpZiggIW9wdGlvbnMgfHwgKG9wdGlvbnMudW5pcXVlICYmICFpZHNbIGlkIF0gKSApe1xuICAgICAgaWRzWyBpZCBdID0gZWxlbWVudDtcbiAgICAgIGluZGV4ZXNbIGlkIF0gPSB0aGlzLmxlbmd0aDtcblxuICAgICAgdGhpc1sgdGhpcy5sZW5ndGggXSA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuX3ByaXZhdGUgPSB7XG4gICAgY3k6IGN5LFxuICAgIGlkczogaWRzLFxuICAgIGluZGV4ZXM6IGluZGV4ZXNcbiAgfTtcblxuICAvLyByZXN0b3JlIHRoZSBlbGVtZW50cyBpZiB3ZSBjcmVhdGVkIHRoZW0gZnJvbSBqc29uXG4gIGlmKCBjcmVhdGVkRWxlbWVudHMgKXtcbiAgICB0aGlzLnJlc3RvcmUoKTtcbiAgfVxufTtcblxuLy8gRnVuY3Rpb25zXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8vIGtlZXAgdGhlIHByb3RvdHlwZXMgaW4gc3luYyAoYW4gZWxlbWVudCBoYXMgdGhlIHNhbWUgZnVuY3Rpb25zIGFzIGEgY29sbGVjdGlvbilcbi8vIGFuZCB1c2UgZWxlZm4gYW5kIGVsZXNmbiBhcyBzaG9ydGhhbmRzIHRvIHRoZSBwcm90b3R5cGVzXG52YXIgZWxlc2ZuID0gRWxlbWVudC5wcm90b3R5cGUgPSBDb2xsZWN0aW9uLnByb3RvdHlwZTtcblxuZWxlc2ZuLmluc3RhbmNlU3RyaW5nID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuICdjb2xsZWN0aW9uJztcbn07XG5cbmVsZXNmbi5zcGF3biA9IGZ1bmN0aW9uKCBjeSwgZWxlcywgb3B0cyApe1xuICBpZiggIWlzLmNvcmUoIGN5ICkgKXsgLy8gY3kgaXMgb3B0aW9uYWxcbiAgICBvcHRzID0gZWxlcztcbiAgICBlbGVzID0gY3k7XG4gICAgY3kgPSB0aGlzLmN5KCk7XG4gIH1cblxuICByZXR1cm4gbmV3IENvbGxlY3Rpb24oIGN5LCBlbGVzLCBvcHRzICk7XG59O1xuXG5lbGVzZm4uc3Bhd25TZWxmID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMuc3Bhd24oIHRoaXMgKTtcbn07XG5cbmVsZXNmbi5jeSA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLl9wcml2YXRlLmN5O1xufTtcblxuZWxlc2ZuLmVsZW1lbnQgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpc1swXTtcbn07XG5cbmVsZXNmbi5jb2xsZWN0aW9uID0gZnVuY3Rpb24oKXtcbiAgaWYoIGlzLmNvbGxlY3Rpb24oIHRoaXMgKSApe1xuICAgIHJldHVybiB0aGlzO1xuICB9IGVsc2UgeyAvLyBhbiBlbGVtZW50XG4gICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKCB0aGlzLl9wcml2YXRlLmN5LCBbIHRoaXMgXSApO1xuICB9XG59O1xuXG5lbGVzZm4udW5pcXVlID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKCB0aGlzLl9wcml2YXRlLmN5LCB0aGlzLCB7IHVuaXF1ZTogdHJ1ZSB9ICk7XG59O1xuXG5lbGVzZm4uaGFzRWxlbWVudFdpdGhJZCA9IGZ1bmN0aW9uKCBpZCApe1xuICByZXR1cm4gISF0aGlzLl9wcml2YXRlLmlkc1sgaWQgXTtcbn07XG5cbmVsZXNmbi5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uKCBpZCApe1xuICB2YXIgY3kgPSB0aGlzLl9wcml2YXRlLmN5O1xuICB2YXIgZWxlID0gdGhpcy5fcHJpdmF0ZS5pZHNbIGlkIF07XG5cbiAgcmV0dXJuIGVsZSA/IGVsZSA6IG5ldyBDb2xsZWN0aW9uKCBjeSApOyAvLyBnZXQgZWxlIG9yIGVtcHR5IGNvbGxlY3Rpb25cbn07XG5cbmVsZXNmbi5wb29sSW5kZXggPSBmdW5jdGlvbigpe1xuICB2YXIgY3kgPSB0aGlzLl9wcml2YXRlLmN5O1xuICB2YXIgZWxlcyA9IGN5Ll9wcml2YXRlLmVsZW1lbnRzO1xuICB2YXIgaWQgPSB0aGlzLl9wcml2YXRlLmRhdGEuaWQ7XG5cbiAgcmV0dXJuIGVsZXMuX3ByaXZhdGUuaW5kZXhlc1sgaWQgXTtcbn07XG5cbmVsZXNmbi5qc29uID0gZnVuY3Rpb24oIG9iaiApe1xuICB2YXIgZWxlID0gdGhpcy5lbGVtZW50KCk7XG4gIHZhciBjeSA9IHRoaXMuY3koKTtcblxuICBpZiggZWxlID09IG51bGwgJiYgb2JqICl7IHJldHVybiB0aGlzOyB9IC8vIGNhbid0IHNldCB0byBubyBlbGVzXG5cbiAgaWYoIGVsZSA9PSBudWxsICl7IHJldHVybiB1bmRlZmluZWQ7IH0gLy8gY2FuJ3QgZ2V0IGZyb20gbm8gZWxlc1xuXG4gIHZhciBwID0gZWxlLl9wcml2YXRlO1xuXG4gIGlmKCBpcy5wbGFpbk9iamVjdCggb2JqICkgKXsgLy8gc2V0XG5cbiAgICBjeS5zdGFydEJhdGNoKCk7XG5cbiAgICBpZiggb2JqLmRhdGEgKXtcbiAgICAgIGVsZS5kYXRhKCBvYmouZGF0YSApO1xuICAgIH1cblxuICAgIGlmKCBvYmoucG9zaXRpb24gKXtcbiAgICAgIGVsZS5wb3NpdGlvbiggb2JqLnBvc2l0aW9uICk7XG4gICAgfVxuXG4gICAgLy8gaWdub3JlIGdyb3VwIC0tIGltbXV0YWJsZVxuXG4gICAgdmFyIGNoZWNrU3dpdGNoID0gZnVuY3Rpb24oIGssIHRydWVGbk5hbWUsIGZhbHNlRm5OYW1lICl7XG4gICAgICB2YXIgb2JqX2sgPSBvYmpbIGsgXTtcblxuICAgICAgaWYoIG9ial9rICE9IG51bGwgJiYgb2JqX2sgIT09IHBbIGsgXSApe1xuICAgICAgICBpZiggb2JqX2sgKXtcbiAgICAgICAgICBlbGVbIHRydWVGbk5hbWUgXSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZVsgZmFsc2VGbk5hbWUgXSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNoZWNrU3dpdGNoKCAncmVtb3ZlZCcsICdyZW1vdmUnLCAncmVzdG9yZScgKTtcblxuICAgIGNoZWNrU3dpdGNoKCAnc2VsZWN0ZWQnLCAnc2VsZWN0JywgJ3Vuc2VsZWN0JyApO1xuXG4gICAgY2hlY2tTd2l0Y2goICdzZWxlY3RhYmxlJywgJ3NlbGVjdGlmeScsICd1bnNlbGVjdGlmeScgKTtcblxuICAgIGNoZWNrU3dpdGNoKCAnbG9ja2VkJywgJ2xvY2snLCAndW5sb2NrJyApO1xuXG4gICAgY2hlY2tTd2l0Y2goICdncmFiYmFibGUnLCAnZ3JhYmlmeScsICd1bmdyYWJpZnknICk7XG5cbiAgICBpZiggb2JqLmNsYXNzZXMgIT0gbnVsbCApe1xuICAgICAgZWxlLmNsYXNzZXMoIG9iai5jbGFzc2VzICk7XG4gICAgfVxuXG4gICAgY3kuZW5kQmF0Y2goKTtcblxuICAgIHJldHVybiB0aGlzO1xuXG4gIH0gZWxzZSBpZiggb2JqID09PSB1bmRlZmluZWQgKXsgLy8gZ2V0XG5cbiAgICB2YXIganNvbiA9IHtcbiAgICAgIGRhdGE6IHV0aWwuY29weSggcC5kYXRhICksXG4gICAgICBwb3NpdGlvbjogdXRpbC5jb3B5KCBwLnBvc2l0aW9uICksXG4gICAgICBncm91cDogcC5ncm91cCxcbiAgICAgIHJlbW92ZWQ6IHAucmVtb3ZlZCxcbiAgICAgIHNlbGVjdGVkOiBwLnNlbGVjdGVkLFxuICAgICAgc2VsZWN0YWJsZTogcC5zZWxlY3RhYmxlLFxuICAgICAgbG9ja2VkOiBwLmxvY2tlZCxcbiAgICAgIGdyYWJiYWJsZTogcC5ncmFiYmFibGUsXG4gICAgICBjbGFzc2VzOiBudWxsXG4gICAgfTtcblxuICAgIGpzb24uY2xhc3NlcyA9IE9iamVjdC5rZXlzKCBwLmNsYXNzZXMgKS5maWx0ZXIoZnVuY3Rpb24oIGNscyApe1xuICAgICAgcmV0dXJuIHAuY2xhc3Nlc1tjbHNdO1xuICAgIH0pLmpvaW4oJyAnKTtcblxuICAgIHJldHVybiBqc29uO1xuICB9XG59O1xuXG5lbGVzZm4uanNvbnMgPSBmdW5jdGlvbigpe1xuICB2YXIganNvbnMgPSBbXTtcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgZWxlID0gdGhpc1sgaSBdO1xuICAgIHZhciBqc29uID0gZWxlLmpzb24oKTtcblxuICAgIGpzb25zLnB1c2goIGpzb24gKTtcbiAgfVxuXG4gIHJldHVybiBqc29ucztcbn07XG5cbmVsZXNmbi5jbG9uZSA9IGZ1bmN0aW9uKCl7XG4gIHZhciBjeSA9IHRoaXMuY3koKTtcbiAgdmFyIGVsZXNBcnIgPSBbXTtcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgZWxlID0gdGhpc1sgaSBdO1xuICAgIHZhciBqc29uID0gZWxlLmpzb24oKTtcbiAgICB2YXIgY2xvbmUgPSBuZXcgRWxlbWVudCggY3ksIGpzb24sIGZhbHNlICk7IC8vIE5CIG5vIHJlc3RvcmVcblxuICAgIGVsZXNBcnIucHVzaCggY2xvbmUgKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgQ29sbGVjdGlvbiggY3ksIGVsZXNBcnIgKTtcbn07XG5lbGVzZm4uY29weSA9IGVsZXNmbi5jbG9uZTtcblxuZWxlc2ZuLnJlc3RvcmUgPSBmdW5jdGlvbiggbm90aWZ5UmVuZGVyZXIgKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY3kgPSBzZWxmLmN5KCk7XG4gIHZhciBjeV9wID0gY3kuX3ByaXZhdGU7XG5cbiAgaWYoIG5vdGlmeVJlbmRlcmVyID09PSB1bmRlZmluZWQgKXtcbiAgICBub3RpZnlSZW5kZXJlciA9IHRydWU7XG4gIH1cblxuICAvLyBjcmVhdGUgYXJyYXlzIG9mIG5vZGVzIGFuZCBlZGdlcywgc2luY2Ugd2UgbmVlZCB0b1xuICAvLyByZXN0b3JlIHRoZSBub2RlcyBmaXJzdFxuICB2YXIgbm9kZXMgPSBbXTtcbiAgdmFyIGVkZ2VzID0gW107XG4gIHZhciBlbGVtZW50cztcbiAgZm9yKCB2YXIgaSA9IDAsIGwgPSBzZWxmLmxlbmd0aDsgaSA8IGw7IGkrKyApe1xuICAgIHZhciBlbGUgPSBzZWxmWyBpIF07XG5cbiAgICBpZiggIWVsZS5yZW1vdmVkKCkgKXtcbiAgICAgIC8vIGRvbid0IG5lZWQgdG8gaGFuZGxlIHRoaXMgZWxlXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBrZWVwIG5vZGVzIGZpcnN0IGluIHRoZSBhcnJheSBhbmQgZWRnZXMgYWZ0ZXJcbiAgICBpZiggZWxlLmlzTm9kZSgpICl7IC8vIHB1dCB0byBmcm9udCBvZiBhcnJheSBpZiBub2RlXG4gICAgICBub2Rlcy5wdXNoKCBlbGUgKTtcbiAgICB9IGVsc2UgeyAvLyBwdXQgdG8gZW5kIG9mIGFycmF5IGlmIGVkZ2VcbiAgICAgIGVkZ2VzLnB1c2goIGVsZSApO1xuICAgIH1cbiAgfVxuXG4gIGVsZW1lbnRzID0gbm9kZXMuY29uY2F0KCBlZGdlcyApO1xuXG4gIHZhciBpO1xuICB2YXIgcmVtb3ZlRnJvbUVsZW1lbnRzID0gZnVuY3Rpb24oKXtcbiAgICBlbGVtZW50cy5zcGxpY2UoIGksIDEgKTtcbiAgICBpLS07XG4gIH07XG5cbiAgLy8gbm93LCByZXN0b3JlIGVhY2ggZWxlbWVudFxuICBmb3IoIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgZWxlID0gZWxlbWVudHNbIGkgXTtcblxuICAgIHZhciBfcHJpdmF0ZSA9IGVsZS5fcHJpdmF0ZTtcbiAgICB2YXIgZGF0YSA9IF9wcml2YXRlLmRhdGE7XG5cbiAgICAvLyB0aGUgdHJhdmVyc2FsIGNhY2hlIHNob3VsZCBzdGFydCBmcmVzaCB3aGVuIGVsZSBpcyBhZGRlZFxuICAgIF9wcml2YXRlLnRyYXZlcnNhbENhY2hlID0gbnVsbDtcblxuICAgIC8vIHNldCBpZCBhbmQgdmFsaWRhdGVcbiAgICBpZiggZGF0YS5pZCA9PT0gdW5kZWZpbmVkICl7XG4gICAgICBkYXRhLmlkID0gaWRGYWN0b3J5LmdlbmVyYXRlKCBjeSwgZWxlICk7XG5cbiAgICB9IGVsc2UgaWYoIGlzLm51bWJlciggZGF0YS5pZCApICl7XG4gICAgICBkYXRhLmlkID0gJycgKyBkYXRhLmlkOyAvLyBub3cgaXQncyBhIHN0cmluZ1xuXG4gICAgfSBlbHNlIGlmKCBpcy5lbXB0eVN0cmluZyggZGF0YS5pZCApIHx8ICFpcy5zdHJpbmcoIGRhdGEuaWQgKSApe1xuICAgICAgdXRpbC5lcnJvciggJ0NhbiBub3QgY3JlYXRlIGVsZW1lbnQgd2l0aCBpbnZhbGlkIHN0cmluZyBJRCBgJyArIGRhdGEuaWQgKyAnYCcgKTtcblxuICAgICAgLy8gY2FuJ3QgY3JlYXRlIGVsZW1lbnQgaWYgaXQgaGFzIGVtcHR5IHN0cmluZyBhcyBpZCBvciBub24tc3RyaW5nIGlkXG4gICAgICByZW1vdmVGcm9tRWxlbWVudHMoKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiggY3kuaGFzRWxlbWVudFdpdGhJZCggZGF0YS5pZCApICl7XG4gICAgICB1dGlsLmVycm9yKCAnQ2FuIG5vdCBjcmVhdGUgc2Vjb25kIGVsZW1lbnQgd2l0aCBJRCBgJyArIGRhdGEuaWQgKyAnYCcgKTtcblxuICAgICAgLy8gY2FuJ3QgY3JlYXRlIGVsZW1lbnQgaWYgb25lIGFscmVhZHkgaGFzIHRoYXQgaWRcbiAgICAgIHJlbW92ZUZyb21FbGVtZW50cygpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGlkID0gZGF0YS5pZDsgLy8gaWQgaXMgZmluYWxpc2VkLCBub3cgbGV0J3Mga2VlcCBhIHJlZlxuXG4gICAgaWYoIGVsZS5pc05vZGUoKSApeyAvLyBleHRyYSBjaGVja3MgZm9yIG5vZGVzXG4gICAgICB2YXIgbm9kZSA9IGVsZTtcbiAgICAgIHZhciBwb3MgPSBfcHJpdmF0ZS5wb3NpdGlvbjtcblxuICAgICAgLy8gbWFrZSBzdXJlIHRoZSBub2RlcyBoYXZlIGEgZGVmaW5lZCBwb3NpdGlvblxuXG4gICAgICBpZiggcG9zLnggPT0gbnVsbCApe1xuICAgICAgICBwb3MueCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmKCBwb3MueSA9PSBudWxsICl7XG4gICAgICAgIHBvcy55ID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiggZWxlLmlzRWRnZSgpICl7IC8vIGV4dHJhIGNoZWNrcyBmb3IgZWRnZXNcblxuICAgICAgdmFyIGVkZ2UgPSBlbGU7XG4gICAgICB2YXIgZmllbGRzID0gWyAnc291cmNlJywgJ3RhcmdldCcgXTtcbiAgICAgIHZhciBmaWVsZHNMZW5ndGggPSBmaWVsZHMubGVuZ3RoO1xuICAgICAgdmFyIGJhZFNvdXJjZU9yVGFyZ2V0ID0gZmFsc2U7XG4gICAgICBmb3IoIHZhciBqID0gMDsgaiA8IGZpZWxkc0xlbmd0aDsgaisrICl7XG5cbiAgICAgICAgdmFyIGZpZWxkID0gZmllbGRzWyBqIF07XG4gICAgICAgIHZhciB2YWwgPSBkYXRhWyBmaWVsZCBdO1xuXG4gICAgICAgIGlmKCBpcy5udW1iZXIoIHZhbCApICl7XG4gICAgICAgICAgdmFsID0gZGF0YVsgZmllbGQgXSA9ICcnICsgZGF0YVsgZmllbGQgXTsgLy8gbm93IHN0cmluZ1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gJycgKXtcbiAgICAgICAgICAvLyBjYW4ndCBjcmVhdGUgaWYgc291cmNlIG9yIHRhcmdldCBpcyBub3QgZGVmaW5lZCBwcm9wZXJseVxuICAgICAgICAgIHV0aWwuZXJyb3IoICdDYW4gbm90IGNyZWF0ZSBlZGdlIGAnICsgaWQgKyAnYCB3aXRoIHVuc3BlY2lmaWVkICcgKyBmaWVsZCApO1xuICAgICAgICAgIGJhZFNvdXJjZU9yVGFyZ2V0ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmKCAhY3kuaGFzRWxlbWVudFdpdGhJZCggdmFsICkgKXtcbiAgICAgICAgICAvLyBjYW4ndCBjcmVhdGUgZWRnZSBpZiBvbmUgb2YgaXRzIG5vZGVzIGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICB1dGlsLmVycm9yKCAnQ2FuIG5vdCBjcmVhdGUgZWRnZSBgJyArIGlkICsgJ2Agd2l0aCBub25leGlzdGFudCAnICsgZmllbGQgKyAnIGAnICsgdmFsICsgJ2AnICk7XG4gICAgICAgICAgYmFkU291cmNlT3JUYXJnZXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmKCBiYWRTb3VyY2VPclRhcmdldCApeyByZW1vdmVGcm9tRWxlbWVudHMoKTsgY29udGludWU7IH0gLy8gY2FuJ3QgY3JlYXRlIHRoaXNcblxuICAgICAgdmFyIHNyYyA9IGN5LmdldEVsZW1lbnRCeUlkKCBkYXRhLnNvdXJjZSApO1xuICAgICAgdmFyIHRndCA9IGN5LmdldEVsZW1lbnRCeUlkKCBkYXRhLnRhcmdldCApO1xuXG4gICAgICBzcmMuX3ByaXZhdGUuZWRnZXMucHVzaCggZWRnZSApO1xuICAgICAgdGd0Ll9wcml2YXRlLmVkZ2VzLnB1c2goIGVkZ2UgKTtcblxuICAgICAgZWRnZS5fcHJpdmF0ZS5zb3VyY2UgPSBzcmM7XG4gICAgICBlZGdlLl9wcml2YXRlLnRhcmdldCA9IHRndDtcbiAgICB9IC8vIGlmIGlzIGVkZ2VcblxuICAgIC8vIGNyZWF0ZSBtb2NrIGlkcyAvIGluZGV4ZXMgbWFwcyBmb3IgZWxlbWVudCBzbyBpdCBjYW4gYmUgdXNlZCBsaWtlIGNvbGxlY3Rpb25zXG4gICAgX3ByaXZhdGUuaWRzID0ge307XG4gICAgX3ByaXZhdGUuaWRzWyBpZCBdID0gZWxlO1xuICAgIF9wcml2YXRlLmluZGV4ZXMgPSB7fTtcbiAgICBfcHJpdmF0ZS5pbmRleGVzWyBpZCBdID0gZWxlO1xuXG4gICAgX3ByaXZhdGUucmVtb3ZlZCA9IGZhbHNlO1xuICAgIGN5LmFkZFRvUG9vbCggZWxlICk7XG4gIH0gLy8gZm9yIGVhY2ggZWxlbWVudFxuXG4gIC8vIGRvIGNvbXBvdW5kIG5vZGUgc2FuaXR5IGNoZWNrc1xuICBmb3IoIHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrICl7IC8vIGVhY2ggbm9kZVxuICAgIHZhciBub2RlID0gbm9kZXNbIGkgXTtcbiAgICB2YXIgZGF0YSA9IG5vZGUuX3ByaXZhdGUuZGF0YTtcblxuICAgIGlmKCBpcy5udW1iZXIoIGRhdGEucGFyZW50ICkgKXsgLy8gdGhlbiBhdXRvbWFrZSBzdHJpbmdcbiAgICAgIGRhdGEucGFyZW50ID0gJycgKyBkYXRhLnBhcmVudDtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50SWQgPSBkYXRhLnBhcmVudDtcblxuICAgIHZhciBzcGVjaWZpZWRQYXJlbnQgPSBwYXJlbnRJZCAhPSBudWxsO1xuXG4gICAgaWYoIHNwZWNpZmllZFBhcmVudCApe1xuICAgICAgdmFyIHBhcmVudCA9IGN5LmdldEVsZW1lbnRCeUlkKCBwYXJlbnRJZCApO1xuXG4gICAgICBpZiggcGFyZW50LmVtcHR5KCkgKXtcbiAgICAgICAgLy8gbm9uLWV4aXN0YW50IHBhcmVudDsganVzdCByZW1vdmUgaXRcbiAgICAgICAgZGF0YS5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc2VsZkFzUGFyZW50ID0gZmFsc2U7XG4gICAgICAgIHZhciBhbmNlc3RvciA9IHBhcmVudDtcbiAgICAgICAgd2hpbGUoICFhbmNlc3Rvci5lbXB0eSgpICl7XG4gICAgICAgICAgaWYoIG5vZGUuc2FtZSggYW5jZXN0b3IgKSApe1xuICAgICAgICAgICAgLy8gbWFyayBzZWxmIGFzIHBhcmVudCBhbmQgcmVtb3ZlIGZyb20gZGF0YVxuICAgICAgICAgICAgc2VsZkFzUGFyZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIGRhdGEucGFyZW50ID0gdW5kZWZpbmVkOyAvLyByZW1vdmUgcGFyZW50IHJlZmVyZW5jZVxuXG4gICAgICAgICAgICAvLyBleGl0IG9yIHdlIGxvb3AgZm9yZXZlclxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCAhc2VsZkFzUGFyZW50ICl7XG4gICAgICAgICAgLy8gY29ubmVjdCB3aXRoIGNoaWxkcmVuXG4gICAgICAgICAgcGFyZW50WzBdLl9wcml2YXRlLmNoaWxkcmVuLnB1c2goIG5vZGUgKTtcbiAgICAgICAgICBub2RlLl9wcml2YXRlLnBhcmVudCA9IHBhcmVudFswXTtcblxuICAgICAgICAgIC8vIGxldCB0aGUgY29yZSBrbm93IHdlIGhhdmUgYSBjb21wb3VuZCBncmFwaFxuICAgICAgICAgIGN5X3AuaGFzQ29tcG91bmROb2RlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gZWxzZVxuICAgIH0gLy8gaWYgc3BlY2lmaWVkIHBhcmVudFxuICB9IC8vIGZvciBlYWNoIG5vZGVcblxuICBpZiggZWxlbWVudHMubGVuZ3RoID4gMCApe1xuICAgIHZhciByZXN0b3JlZCA9IG5ldyBDb2xsZWN0aW9uKCBjeSwgZWxlbWVudHMgKTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgcmVzdG9yZWQubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBlbGUgPSByZXN0b3JlZFtpXTtcblxuICAgICAgaWYoIGVsZS5pc05vZGUoKSApeyBjb250aW51ZTsgfVxuXG4gICAgICAvLyBhZGRpbmcgYW4gZWRnZSBpbnZhbGlkYXRlcyB0aGUgdHJhdmVyc2FsIGNhY2hlcyBmb3IgdGhlIHBhcmFsbGVsIGVkZ2VzXG4gICAgICB2YXIgcGVkZ2VzID0gZWxlLnBhcmFsbGVsRWRnZXMoKTtcbiAgICAgIGZvciggdmFyIGogPSAwOyBqIDwgcGVkZ2VzLmxlbmd0aDsgaisrICl7XG4gICAgICAgIHBlZGdlc1tqXS5fcHJpdmF0ZS50cmF2ZXJzYWxDYWNoZSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIGFkZGluZyBhbiBlZGdlIGludmFsaWRhdGVzIHRoZSB0cmF2ZXJzYWwgY2FjaGUgZm9yIHRoZSBjb25uZWN0ZWQgbm9kZXNcbiAgICAgIGVsZS5zb3VyY2UoKVswXS5fcHJpdmF0ZS50cmF2ZXJzYWxDYWNoZSA9IG51bGw7XG4gICAgICBlbGUudGFyZ2V0KClbMF0uX3ByaXZhdGUudHJhdmVyc2FsQ2FjaGUgPSBudWxsO1xuICAgIH1cblxuICAgIHZhciB0b1VwZGF0ZVN0eWxlO1xuXG4gICAgaWYoIGN5X3AuaGFzQ29tcG91bmROb2RlcyApe1xuICAgICAgdG9VcGRhdGVTdHlsZSA9IHJlc3RvcmVkLmFkZCggcmVzdG9yZWQuY29ubmVjdGVkTm9kZXMoKSApLmFkZCggcmVzdG9yZWQucGFyZW50KCkgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9VcGRhdGVTdHlsZSA9IHJlc3RvcmVkO1xuICAgIH1cblxuICAgIHRvVXBkYXRlU3R5bGUudXBkYXRlU3R5bGUoIG5vdGlmeVJlbmRlcmVyICk7XG5cbiAgICBpZiggbm90aWZ5UmVuZGVyZXIgKXtcbiAgICAgIHJlc3RvcmVkLnJ0cmlnZ2VyKCAnYWRkJyApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN0b3JlZC50cmlnZ2VyKCAnYWRkJyApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzZWxmOyAvLyBjaGFpbmFiaWxpdHlcbn07XG5cbmVsZXNmbi5yZW1vdmVkID0gZnVuY3Rpb24oKXtcbiAgdmFyIGVsZSA9IHRoaXNbMF07XG4gIHJldHVybiBlbGUgJiYgZWxlLl9wcml2YXRlLnJlbW92ZWQ7XG59O1xuXG5lbGVzZm4uaW5zaWRlID0gZnVuY3Rpb24oKXtcbiAgdmFyIGVsZSA9IHRoaXNbMF07XG4gIHJldHVybiBlbGUgJiYgIWVsZS5fcHJpdmF0ZS5yZW1vdmVkO1xufTtcblxuZWxlc2ZuLnJlbW92ZSA9IGZ1bmN0aW9uKCBub3RpZnlSZW5kZXJlciApe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciByZW1vdmVkID0gW107XG4gIHZhciBlbGVzVG9SZW1vdmUgPSBbXTtcbiAgdmFyIGVsZXNUb1JlbW92ZUlkcyA9IHt9O1xuICB2YXIgY3kgPSBzZWxmLl9wcml2YXRlLmN5O1xuXG4gIGlmKCBub3RpZnlSZW5kZXJlciA9PT0gdW5kZWZpbmVkICl7XG4gICAgbm90aWZ5UmVuZGVyZXIgPSB0cnVlO1xuICB9XG5cbiAgLy8gYWRkIGNvbm5lY3RlZCBlZGdlc1xuICBmdW5jdGlvbiBhZGRDb25uZWN0ZWRFZGdlcyggbm9kZSApe1xuICAgIHZhciBlZGdlcyA9IG5vZGUuX3ByaXZhdGUuZWRnZXM7XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlZGdlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgYWRkKCBlZGdlc1sgaSBdICk7XG4gICAgfVxuICB9XG5cblxuICAvLyBhZGQgZGVzY2VuZGFudCBub2Rlc1xuICBmdW5jdGlvbiBhZGRDaGlsZHJlbiggbm9kZSApe1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuX3ByaXZhdGUuY2hpbGRyZW47XG5cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrICl7XG4gICAgICBhZGQoIGNoaWxkcmVuWyBpIF0gKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGQoIGVsZSApe1xuICAgIHZhciBhbHJlYWR5QWRkZWQgPSAgZWxlc1RvUmVtb3ZlSWRzWyBlbGUuaWQoKSBdO1xuICAgIGlmKCBhbHJlYWR5QWRkZWQgKXtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlc1RvUmVtb3ZlSWRzWyBlbGUuaWQoKSBdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiggZWxlLmlzTm9kZSgpICl7XG4gICAgICBlbGVzVG9SZW1vdmUucHVzaCggZWxlICk7IC8vIG5vZGVzIGFyZSByZW1vdmVkIGxhc3RcblxuICAgICAgYWRkQ29ubmVjdGVkRWRnZXMoIGVsZSApO1xuICAgICAgYWRkQ2hpbGRyZW4oIGVsZSApO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVzVG9SZW1vdmUudW5zaGlmdCggZWxlICk7IC8vIGVkZ2VzIGFyZSByZW1vdmVkIGZpcnN0XG4gICAgfVxuICB9XG5cbiAgLy8gbWFrZSB0aGUgbGlzdCBvZiBlbGVtZW50cyB0byByZW1vdmVcbiAgLy8gKG1heSBiZSByZW1vdmluZyBtb3JlIHRoYW4gc3BlY2lmaWVkIGR1ZSB0byBjb25uZWN0ZWQgZWRnZXMgZXRjKVxuXG4gIGZvciggdmFyIGkgPSAwLCBsID0gc2VsZi5sZW5ndGg7IGkgPCBsOyBpKysgKXtcbiAgICB2YXIgZWxlID0gc2VsZlsgaSBdO1xuXG4gICAgYWRkKCBlbGUgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUVkZ2VSZWYoIG5vZGUsIGVkZ2UgKXtcbiAgICB2YXIgY29ubmVjdGVkRWRnZXMgPSBub2RlLl9wcml2YXRlLmVkZ2VzO1xuXG4gICAgdXRpbC5yZW1vdmVGcm9tQXJyYXkoIGNvbm5lY3RlZEVkZ2VzLCBlZGdlICk7XG5cbiAgICAvLyByZW1vdmluZyBhbiBlZGdlcyBpbnZhbGlkYXRlcyB0aGUgdHJhdmVyc2FsIGNhY2hlIGZvciBpdHMgbm9kZXNcbiAgICBub2RlLl9wcml2YXRlLnRyYXZlcnNhbENhY2hlID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVBhcmFsbGVsUmVmcyggZWRnZSApe1xuICAgIC8vIHJlbW92aW5nIGFuIGVkZ2UgaW52YWxpZGF0ZXMgdGhlIHRyYXZlcnNhbCBjYWNoZXMgZm9yIHRoZSBwYXJhbGxlbCBlZGdlc1xuICAgIHZhciBwZWRnZXMgPSBlZGdlLnBhcmFsbGVsRWRnZXMoKTtcbiAgICBmb3IoIHZhciBqID0gMDsgaiA8IHBlZGdlcy5sZW5ndGg7IGorKyApe1xuICAgICAgcGVkZ2VzW2pdLl9wcml2YXRlLnRyYXZlcnNhbENhY2hlID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICB2YXIgYWx0ZXJlZFBhcmVudHMgPSBbXTtcbiAgYWx0ZXJlZFBhcmVudHMuaWRzID0ge307XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQ2hpbGRSZWYoIHBhcmVudCwgZWxlICl7XG4gICAgZWxlID0gZWxlWzBdO1xuICAgIHBhcmVudCA9IHBhcmVudFswXTtcblxuICAgIHZhciBjaGlsZHJlbiA9IHBhcmVudC5fcHJpdmF0ZS5jaGlsZHJlbjtcbiAgICB2YXIgcGlkID0gcGFyZW50LmlkKCk7XG5cbiAgICB1dGlsLnJlbW92ZUZyb21BcnJheSggY2hpbGRyZW4sIGVsZSApO1xuXG4gICAgaWYoICFhbHRlcmVkUGFyZW50cy5pZHNbIHBpZCBdICl7XG4gICAgICBhbHRlcmVkUGFyZW50cy5pZHNbIHBpZCBdID0gdHJ1ZTtcbiAgICAgIGFsdGVyZWRQYXJlbnRzLnB1c2goIHBhcmVudCApO1xuICAgIH1cbiAgfVxuXG4gIC8vIHJlbW92ZSBmcm9tIGNvcmUgcG9vbFxuICBjeS5yZW1vdmVGcm9tUG9vbCggZWxlc1RvUmVtb3ZlICk7XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzVG9SZW1vdmUubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgZWxlID0gZWxlc1RvUmVtb3ZlWyBpIF07XG5cbiAgICAvLyBtYXJrIGFzIHJlbW92ZWRcbiAgICBlbGUuX3ByaXZhdGUucmVtb3ZlZCA9IHRydWU7XG5cbiAgICAvLyBhZGQgdG8gbGlzdCBvZiByZW1vdmVkIGVsZW1lbnRzXG4gICAgcmVtb3ZlZC5wdXNoKCBlbGUgKTtcblxuICAgIGlmKCBlbGUuaXNFZGdlKCkgKXsgLy8gcmVtb3ZlIHJlZmVyZW5jZXMgdG8gdGhpcyBlZGdlIGluIGl0cyBjb25uZWN0ZWQgbm9kZXNcbiAgICAgIHZhciBzcmMgPSBlbGUuc291cmNlKClbMF07XG4gICAgICB2YXIgdGd0ID0gZWxlLnRhcmdldCgpWzBdO1xuXG4gICAgICByZW1vdmVFZGdlUmVmKCBzcmMsIGVsZSApO1xuICAgICAgcmVtb3ZlRWRnZVJlZiggdGd0LCBlbGUgKTtcbiAgICAgIHJlbW92ZVBhcmFsbGVsUmVmcyggZWxlICk7XG5cbiAgICB9IGVsc2UgeyAvLyByZW1vdmUgcmVmZXJlbmNlIHRvIHBhcmVudFxuICAgICAgdmFyIHBhcmVudCA9IGVsZS5wYXJlbnQoKTtcblxuICAgICAgaWYoIHBhcmVudC5sZW5ndGggIT09IDAgKXtcbiAgICAgICAgcmVtb3ZlQ2hpbGRSZWYoIHBhcmVudCwgZWxlICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gY2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSBjb21wb3VuZCBncmFwaCBvciBub3RcbiAgdmFyIGVsZXNTdGlsbEluc2lkZSA9IGN5Ll9wcml2YXRlLmVsZW1lbnRzO1xuICBjeS5fcHJpdmF0ZS5oYXNDb21wb3VuZE5vZGVzID0gZmFsc2U7XG4gIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlc1N0aWxsSW5zaWRlLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGVsZSA9IGVsZXNTdGlsbEluc2lkZVsgaSBdO1xuXG4gICAgaWYoIGVsZS5pc1BhcmVudCgpICl7XG4gICAgICBjeS5fcHJpdmF0ZS5oYXNDb21wb3VuZE5vZGVzID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZW1vdmVkRWxlbWVudHMgPSBuZXcgQ29sbGVjdGlvbiggdGhpcy5jeSgpLCByZW1vdmVkICk7XG4gIGlmKCByZW1vdmVkRWxlbWVudHMuc2l6ZSgpID4gMCApe1xuICAgIC8vIG11c3QgbWFudWFsbHkgbm90aWZ5IHNpbmNlIHRyaWdnZXIgd29uJ3QgZG8gdGhpcyBhdXRvbWF0aWNhbGx5IG9uY2UgcmVtb3ZlZFxuXG4gICAgaWYoIG5vdGlmeVJlbmRlcmVyICl7XG4gICAgICB0aGlzLmN5KCkubm90aWZ5KCB7XG4gICAgICAgIHR5cGU6ICdyZW1vdmUnLFxuICAgICAgICBlbGVzOiByZW1vdmVkRWxlbWVudHNcbiAgICAgIH0gKTtcbiAgICB9XG5cbiAgICByZW1vdmVkRWxlbWVudHMudHJpZ2dlciggJ3JlbW92ZScgKTtcbiAgfVxuXG4gIC8vIHRoZSBwYXJlbnRzIHdobyB3ZXJlIG1vZGlmaWVkIGJ5IHRoZSByZW1vdmFsIG5lZWQgdGhlaXIgc3R5bGUgdXBkYXRlZFxuICBmb3IoIHZhciBpID0gMDsgaSA8IGFsdGVyZWRQYXJlbnRzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGVsZSA9IGFsdGVyZWRQYXJlbnRzWyBpIF07XG5cbiAgICBpZiggIWVsZS5yZW1vdmVkKCkgKXtcbiAgICAgIGVsZS51cGRhdGVTdHlsZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgQ29sbGVjdGlvbiggY3ksIHJlbW92ZWQgKTtcbn07XG5cbmVsZXNmbi5tb3ZlID0gZnVuY3Rpb24oIHN0cnVjdCApe1xuICB2YXIgY3kgPSB0aGlzLl9wcml2YXRlLmN5O1xuXG4gIGlmKCBzdHJ1Y3Quc291cmNlICE9PSB1bmRlZmluZWQgfHwgc3RydWN0LnRhcmdldCAhPT0gdW5kZWZpbmVkICl7XG4gICAgdmFyIHNyY0lkID0gc3RydWN0LnNvdXJjZTtcbiAgICB2YXIgdGd0SWQgPSBzdHJ1Y3QudGFyZ2V0O1xuICAgIHZhciBzcmNFeGlzdHMgPSBjeS5oYXNFbGVtZW50V2l0aElkKCBzcmNJZCApO1xuICAgIHZhciB0Z3RFeGlzdHMgPSBjeS5oYXNFbGVtZW50V2l0aElkKCB0Z3RJZCApO1xuXG4gICAgaWYoIHNyY0V4aXN0cyB8fCB0Z3RFeGlzdHMgKXtcbiAgICAgIHZhciBqc29ucyA9IHRoaXMuanNvbnMoKTtcblxuICAgICAgdGhpcy5yZW1vdmUoKTtcblxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBqc29ucy5sZW5ndGg7IGkrKyApe1xuICAgICAgICB2YXIganNvbiA9IGpzb25zW2ldO1xuICAgICAgICB2YXIgZWxlID0gdGhpc1tpXTtcblxuICAgICAgICBpZigganNvbi5ncm91cCA9PT0gJ2VkZ2VzJyApe1xuICAgICAgICAgIGlmKCBzcmNFeGlzdHMgKXsganNvbi5kYXRhLnNvdXJjZSA9IHNyY0lkOyB9XG5cbiAgICAgICAgICBpZiggdGd0RXhpc3RzICl7IGpzb24uZGF0YS50YXJnZXQgPSB0Z3RJZDsgfVxuXG4gICAgICAgICAganNvbi5zY3JhdGNoID0gZWxlLl9wcml2YXRlLnNjcmF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN5LmFkZCgganNvbnMgKTtcbiAgICB9XG5cbiAgfSBlbHNlIGlmKCBzdHJ1Y3QucGFyZW50ICE9PSB1bmRlZmluZWQgKXsgLy8gbW92ZSBub2RlIHRvIG5ldyBwYXJlbnRcbiAgICB2YXIgcGFyZW50SWQgPSBzdHJ1Y3QucGFyZW50O1xuICAgIHZhciBwYXJlbnRFeGlzdHMgPSBwYXJlbnRJZCA9PT0gbnVsbCB8fCBjeS5oYXNFbGVtZW50V2l0aElkKCBwYXJlbnRJZCApO1xuXG4gICAgaWYoIHBhcmVudEV4aXN0cyApe1xuICAgICAgdmFyIGpzb25zID0gdGhpcy5qc29ucygpO1xuICAgICAgdmFyIGRlc2NzID0gdGhpcy5kZXNjZW5kYW50cygpO1xuICAgICAgdmFyIGRlc2NzRXRjSnNvbnMgPSBkZXNjcy51bmlvbiggZGVzY3MudW5pb24oIHRoaXMgKS5jb25uZWN0ZWRFZGdlcygpICkuanNvbnMoKTtcblxuICAgICAgdGhpcy5yZW1vdmUoKTsgLy8gTkI6IGFsc28gcmVtb3ZlcyBkZXNjZW5kYW50cyBhbmQgdGhlaXIgY29ubmVjdGVkIGVkZ2VzXG5cbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwganNvbnMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGpzb24gPSBqc29uc1tpXTtcbiAgICAgICAgdmFyIGVsZSA9IHRoaXNbaV07XG5cbiAgICAgICAgaWYoIGpzb24uZ3JvdXAgPT09ICdub2RlcycgKXtcbiAgICAgICAgICBqc29uLmRhdGEucGFyZW50ID0gcGFyZW50SWQgPT09IG51bGwgPyB1bmRlZmluZWQgOiBwYXJlbnRJZDtcblxuICAgICAgICAgIGpzb24uc2NyYXRjaCA9IGVsZS5fcHJpdmF0ZS5zY3JhdGNoO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjeS5hZGQoIGpzb25zLmNvbmNhdCggZGVzY3NFdGNKc29ucyApICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7IC8vIGlmIG5vdGhpbmcgZG9uZVxufTtcblxuW1xuICByZXF1aXJlKCAnLi9hbGdvcml0aG1zJyApLFxuICByZXF1aXJlKCAnLi9hbmltYXRpb24nICksXG4gIHJlcXVpcmUoICcuL2NsYXNzJyApLFxuICByZXF1aXJlKCAnLi9jb21wYXJhdG9ycycgKSxcbiAgcmVxdWlyZSggJy4vY29tcG91bmRzJyApLFxuICByZXF1aXJlKCAnLi9kYXRhJyApLFxuICByZXF1aXJlKCAnLi9kZWdyZWUnICksXG4gIHJlcXVpcmUoICcuL2RpbWVuc2lvbnMnICksXG4gIHJlcXVpcmUoICcuL2V2ZW50cycgKSxcbiAgcmVxdWlyZSggJy4vZmlsdGVyJyApLFxuICByZXF1aXJlKCAnLi9ncm91cCcgKSxcbiAgcmVxdWlyZSggJy4vaW5kZXgnICksXG4gIHJlcXVpcmUoICcuL2l0ZXJhdGlvbicgKSxcbiAgcmVxdWlyZSggJy4vbGF5b3V0JyApLFxuICByZXF1aXJlKCAnLi9zdHlsZScgKSxcbiAgcmVxdWlyZSggJy4vc3dpdGNoLWZ1bmN0aW9ucycgKSxcbiAgcmVxdWlyZSggJy4vdHJhdmVyc2luZycgKVxuXS5mb3JFYWNoKCBmdW5jdGlvbiggcHJvcHMgKXtcbiAgdXRpbC5leHRlbmQoIGVsZXNmbiwgcHJvcHMgKTtcbn0gKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb2xsZWN0aW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXMgPSByZXF1aXJlKCAnLi4vaXMnICk7XG52YXIgekluZGV4U29ydCA9IHJlcXVpcmUoICcuL3pzb3J0JyApO1xuXG52YXIgZWxlc2ZuID0gKHtcbiAgZWFjaDogZnVuY3Rpb24oIGZuICl7XG4gICAgaWYoIGlzLmZuKCBmbiApICl7XG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGVsZSA9IHRoaXNbIGkgXTtcbiAgICAgICAgdmFyIHJldCA9IGZuLmFwcGx5KCBlbGUsIFsgaSwgZWxlIF0gKTtcblxuICAgICAgICBpZiggcmV0ID09PSBmYWxzZSApeyBicmVhazsgfSAvLyBleGl0IGVhY2ggZWFybHkgb24gcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGZvckVhY2g6IGZ1bmN0aW9uKCBmbiwgdGhpc0FyZyApe1xuICAgIGlmKCBpcy5mbiggZm4gKSApe1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGVsZSA9IHRoaXNbIGkgXTtcbiAgICAgICAgdmFyIHJldCA9IHRoaXNBcmcgPyBmbi5hcHBseSggdGhpc0FyZywgWyBlbGUsIGksIHRoaXMgXSApIDogZm4oIGVsZSwgaSwgdGhpcyApO1xuXG4gICAgICAgIGlmKCByZXQgPT09IGZhbHNlICl7IGJyZWFrOyB9IC8vIGV4aXQgZWFjaCBlYXJseSBvbiByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICB0b0FycmF5OiBmdW5jdGlvbigpe1xuICAgIHZhciBhcnJheSA9IFtdO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrICl7XG4gICAgICBhcnJheS5wdXNoKCB0aGlzWyBpIF0gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG4gIH0sXG5cbiAgc2xpY2U6IGZ1bmN0aW9uKCBzdGFydCwgZW5kICl7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIHRoaXNTaXplID0gdGhpcy5sZW5ndGg7XG5cbiAgICBpZiggZW5kID09IG51bGwgKXtcbiAgICAgIGVuZCA9IHRoaXNTaXplO1xuICAgIH1cblxuICAgIGlmKCBzdGFydCA9PSBudWxsICl7XG4gICAgICBzdGFydCA9IDA7XG4gICAgfVxuXG4gICAgaWYoIHN0YXJ0IDwgMCApe1xuICAgICAgc3RhcnQgPSB0aGlzU2l6ZSArIHN0YXJ0O1xuICAgIH1cblxuICAgIGlmKCBlbmQgPCAwICl7XG4gICAgICBlbmQgPSB0aGlzU2l6ZSArIGVuZDtcbiAgICB9XG5cbiAgICBmb3IoIHZhciBpID0gc3RhcnQ7IGkgPj0gMCAmJiBpIDwgZW5kICYmIGkgPCB0aGlzU2l6ZTsgaSsrICl7XG4gICAgICBhcnJheS5wdXNoKCB0aGlzWyBpIF0gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zcGF3biggYXJyYXkgKTtcbiAgfSxcblxuICBzaXplOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgfSxcblxuICBlcTogZnVuY3Rpb24oIGkgKXtcbiAgICByZXR1cm4gdGhpc1sgaSBdIHx8IHRoaXMuc3Bhd24oKTtcbiAgfSxcblxuICBmaXJzdDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpc1swXSB8fCB0aGlzLnNwYXduKCk7XG4gIH0sXG5cbiAgbGFzdDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpc1sgdGhpcy5sZW5ndGggLSAxIF0gfHwgdGhpcy5zcGF3bigpO1xuICB9LFxuXG4gIGVtcHR5OiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMDtcbiAgfSxcblxuICBub25lbXB0eTogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gIXRoaXMuZW1wdHkoKTtcbiAgfSxcblxuICBzb3J0OiBmdW5jdGlvbiggc29ydEZuICl7XG4gICAgaWYoICFpcy5mbiggc29ydEZuICkgKXtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBzb3J0ZWQgPSB0aGlzLnRvQXJyYXkoKS5zb3J0KCBzb3J0Rm4gKTtcblxuICAgIHJldHVybiB0aGlzLnNwYXduKCBzb3J0ZWQgKTtcbiAgfSxcblxuICBzb3J0QnlaSW5kZXg6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuc29ydCggekluZGV4U29ydCApO1xuICB9LFxuXG4gIHpEZXB0aDogZnVuY3Rpb24oKXtcbiAgICB2YXIgZWxlID0gdGhpc1swXTtcbiAgICBpZiggIWVsZSApeyByZXR1cm4gdW5kZWZpbmVkOyB9XG5cbiAgICAvLyB2YXIgY3kgPSBlbGUuY3koKTtcbiAgICB2YXIgX3AgPSBlbGUuX3ByaXZhdGU7XG4gICAgdmFyIGdyb3VwID0gX3AuZ3JvdXA7XG5cbiAgICBpZiggZ3JvdXAgPT09ICdub2RlcycgKXtcbiAgICAgIHZhciBkZXB0aCA9IF9wLmRhdGEucGFyZW50ID8gZWxlLnBhcmVudHMoKS5zaXplKCkgOiAwO1xuXG4gICAgICBpZiggIWVsZS5pc1BhcmVudCgpICl7XG4gICAgICAgIHJldHVybiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiAtIDE7IC8vIGNoaWxkbGVzcyBub2RlcyBhbHdheXMgb24gdG9wXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZXB0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNyYyA9IF9wLnNvdXJjZTtcbiAgICAgIHZhciB0Z3QgPSBfcC50YXJnZXQ7XG4gICAgICB2YXIgc3JjRGVwdGggPSBzcmMuekRlcHRoKCk7XG4gICAgICB2YXIgdGd0RGVwdGggPSB0Z3QuekRlcHRoKCk7XG5cbiAgICAgIHJldHVybiBNYXRoLm1heCggc3JjRGVwdGgsIHRndERlcHRoLCAwICk7IC8vIGRlcHRoIG9mIGRlZXBlc3QgcGFyZW50XG4gICAgfVxuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbGVzZm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpcyA9IHJlcXVpcmUoICcuLi9pcycgKTtcbnZhciB1dGlsID0gcmVxdWlyZSggJy4uL3V0aWwnICk7XG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJy4uL3Byb21pc2UnKTtcblxudmFyIGVsZXNmbiA9ICh7XG5cbiAgLy8gdXNpbmcgc3RhbmRhcmQgbGF5b3V0IG9wdGlvbnMsIGFwcGx5IHBvc2l0aW9uIGZ1bmN0aW9uICh3LyBvciB3L28gYW5pbWF0aW9uKVxuICBsYXlvdXRQb3NpdGlvbnM6IGZ1bmN0aW9uKCBsYXlvdXQsIG9wdGlvbnMsIGZuICl7XG4gICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcygpO1xuICAgIHZhciBjeSA9IHRoaXMuY3koKTtcblxuICAgIGxheW91dC50cmlnZ2VyKCB7IHR5cGU6ICdsYXlvdXRzdGFydCcsIGxheW91dDogbGF5b3V0IH0gKTtcblxuICAgIGxheW91dC5hbmltYXRpb25zID0gW107XG5cbiAgICBpZiggb3B0aW9ucy5hbmltYXRlICl7XG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbIGkgXTtcblxuICAgICAgICB2YXIgbmV3UG9zID0gZm4uY2FsbCggbm9kZSwgaSwgbm9kZSApO1xuICAgICAgICB2YXIgcG9zID0gbm9kZS5wb3NpdGlvbigpO1xuXG4gICAgICAgIGlmKCAhaXMubnVtYmVyKCBwb3MueCApIHx8ICFpcy5udW1iZXIoIHBvcy55ICkgKXtcbiAgICAgICAgICBub2RlLnNpbGVudFBvc2l0aW9uKCB7IHg6IDAsIHk6IDAgfSApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFuaSA9IG5vZGUuYW5pbWF0aW9uKCB7XG4gICAgICAgICAgcG9zaXRpb246IG5ld1BvcyxcbiAgICAgICAgICBkdXJhdGlvbjogb3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgICBlYXNpbmc6IG9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nXG4gICAgICAgIH0gKTtcblxuICAgICAgICBsYXlvdXQuYW5pbWF0aW9ucy5wdXNoKCBhbmkgKTtcblxuICAgICAgICBhbmkucGxheSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb25TdGVwO1xuICAgICAgY3kub24oICdzdGVwLionLCAoIG9uU3RlcCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKCBvcHRpb25zLmZpdCApe1xuICAgICAgICAgIGN5LmZpdCggb3B0aW9ucy5lbGVzLCBvcHRpb25zLnBhZGRpbmcgKTtcbiAgICAgICAgfVxuICAgICAgfSkgKTtcblxuICAgICAgbGF5b3V0Lm9uZSgnbGF5b3V0c3RvcCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgIGN5Lm9mZignc3RlcC4qJywgb25TdGVwKTtcbiAgICAgIH0pO1xuXG4gICAgICBsYXlvdXQub25lKCAnbGF5b3V0cmVhZHknLCBvcHRpb25zLnJlYWR5ICk7XG4gICAgICBsYXlvdXQudHJpZ2dlciggeyB0eXBlOiAnbGF5b3V0cmVhZHknLCBsYXlvdXQ6IGxheW91dCB9ICk7XG5cbiAgICAgIFByb21pc2UuYWxsKCBsYXlvdXQuYW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24oIGFuaSApe1xuICAgICAgICByZXR1cm4gYW5pLnByb21pc2UoKTtcbiAgICAgIH0pICkudGhlbihmdW5jdGlvbigpe1xuICAgICAgICBjeS5vZmYoJ3N0ZXAuKicsIG9uU3RlcCk7XG5cbiAgICAgICAgaWYoIG9wdGlvbnMuem9vbSAhPSBudWxsICl7XG4gICAgICAgICAgY3kuem9vbSggb3B0aW9ucy56b29tICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiggb3B0aW9ucy5wYW4gKXtcbiAgICAgICAgICBjeS5wYW4oIG9wdGlvbnMucGFuICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiggb3B0aW9ucy5maXQgKXtcbiAgICAgICAgICBjeS5maXQoIG9wdGlvbnMuZWxlcywgb3B0aW9ucy5wYWRkaW5nICk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXlvdXQub25lKCAnbGF5b3V0c3RvcCcsIG9wdGlvbnMuc3RvcCApO1xuICAgICAgICBsYXlvdXQudHJpZ2dlciggeyB0eXBlOiAnbGF5b3V0c3RvcCcsIGxheW91dDogbGF5b3V0IH0gKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2Rlcy5wb3NpdGlvbnMoIGZuICk7XG5cbiAgICAgIGlmKCBvcHRpb25zLmZpdCApe1xuICAgICAgICBjeS5maXQoIG9wdGlvbnMuZWxlcywgb3B0aW9ucy5wYWRkaW5nICk7XG4gICAgICB9XG5cbiAgICAgIGlmKCBvcHRpb25zLnpvb20gIT0gbnVsbCApe1xuICAgICAgICBjeS56b29tKCBvcHRpb25zLnpvb20gKTtcbiAgICAgIH1cblxuICAgICAgaWYoIG9wdGlvbnMucGFuICl7XG4gICAgICAgIGN5LnBhbiggb3B0aW9ucy5wYW4gKTtcbiAgICAgIH1cblxuICAgICAgbGF5b3V0Lm9uZSggJ2xheW91dHJlYWR5Jywgb3B0aW9ucy5yZWFkeSApO1xuICAgICAgbGF5b3V0LnRyaWdnZXIoIHsgdHlwZTogJ2xheW91dHJlYWR5JywgbGF5b3V0OiBsYXlvdXQgfSApO1xuXG4gICAgICBsYXlvdXQub25lKCAnbGF5b3V0c3RvcCcsIG9wdGlvbnMuc3RvcCApO1xuICAgICAgbGF5b3V0LnRyaWdnZXIoIHsgdHlwZTogJ2xheW91dHN0b3AnLCBsYXlvdXQ6IGxheW91dCB9ICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG4gIH0sXG5cbiAgbGF5b3V0OiBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAgIHZhciBjeSA9IHRoaXMuY3koKTtcblxuICAgIGN5LmxheW91dCggdXRpbC5leHRlbmQoIHt9LCBvcHRpb25zLCB7XG4gICAgICBlbGVzOiB0aGlzXG4gICAgfSApICk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBtYWtlTGF5b3V0OiBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAgIHZhciBjeSA9IHRoaXMuY3koKTtcblxuICAgIHJldHVybiBjeS5tYWtlTGF5b3V0KCB1dGlsLmV4dGVuZCgge30sIG9wdGlvbnMsIHtcbiAgICAgIGVsZXM6IHRoaXNcbiAgICB9ICkgKTtcbiAgfVxuXG59KTtcblxuLy8gYWxpYXNlczpcbmVsZXNmbi5jcmVhdGVMYXlvdXQgPSBlbGVzZm4ubWFrZUxheW91dDtcblxubW9kdWxlLmV4cG9ydHMgPSBlbGVzZm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpcyA9IHJlcXVpcmUoICcuLi9pcycgKTtcblxudmFyIGVsZXNmbiA9ICh7XG5cbiAgLy8gZnVsbHkgdXBkYXRlcyAocmVjYWxjdWxhdGVzKSB0aGUgc3R5bGUgZm9yIHRoZSBlbGVtZW50c1xuICB1cGRhdGVTdHlsZTogZnVuY3Rpb24oIG5vdGlmeVJlbmRlcmVyICl7XG4gICAgdmFyIGN5ID0gdGhpcy5fcHJpdmF0ZS5jeTtcblxuICAgIGlmKCAhY3kuc3R5bGVFbmFibGVkKCkgKXsgcmV0dXJuIHRoaXM7IH1cblxuICAgIGlmKCBjeS5fcHJpdmF0ZS5iYXRjaGluZ1N0eWxlICl7XG4gICAgICB2YXIgYkVsZXMgPSBjeS5fcHJpdmF0ZS5iYXRjaFN0eWxlRWxlcztcblxuICAgICAgYkVsZXMubWVyZ2UoIHRoaXMgKTtcblxuICAgICAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nIGFuZCBleGl0IGVhcmx5IHdoZW4gYmF0Y2hpbmdcbiAgICB9XG5cbiAgICB2YXIgc3R5bGUgPSBjeS5zdHlsZSgpO1xuICAgIG5vdGlmeVJlbmRlcmVyID0gbm90aWZ5UmVuZGVyZXIgfHwgbm90aWZ5UmVuZGVyZXIgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBmYWxzZTtcblxuICAgIHN0eWxlLmFwcGx5KCB0aGlzICk7XG5cbiAgICB2YXIgdXBkYXRlZENvbXBvdW5kcyA9IHRoaXMudXBkYXRlQ29tcG91bmRCb3VuZHMoKTtcbiAgICB2YXIgdG9Ob3RpZnkgPSB1cGRhdGVkQ29tcG91bmRzLmxlbmd0aCA+IDAgPyB0aGlzLmFkZCggdXBkYXRlZENvbXBvdW5kcyApIDogdGhpcztcblxuICAgIGlmKCBub3RpZnlSZW5kZXJlciApe1xuICAgICAgdG9Ob3RpZnkucnRyaWdnZXIoICdzdHlsZScgKTsgLy8gbGV0IHJlbmRlcmVyIGtub3cgd2UgY2hhbmdlZCBzdHlsZVxuICAgIH0gZWxzZSB7XG4gICAgICB0b05vdGlmeS50cmlnZ2VyKCAnc3R5bGUnICk7IC8vIGp1c3QgZmlyZSB0aGUgZXZlbnRcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG4gIH0sXG5cbiAgLy8ganVzdCB1cGRhdGUgdGhlIG1hcHBlcnMgaW4gdGhlIGVsZW1lbnRzJyBzdHlsZXM7IGNoZWFwZXIgdGhhbiBlbGVzLnVwZGF0ZVN0eWxlKClcbiAgdXBkYXRlTWFwcGVyczogZnVuY3Rpb24oIG5vdGlmeVJlbmRlcmVyICl7XG4gICAgdmFyIGN5ID0gdGhpcy5fcHJpdmF0ZS5jeTtcbiAgICB2YXIgc3R5bGUgPSBjeS5zdHlsZSgpO1xuICAgIG5vdGlmeVJlbmRlcmVyID0gbm90aWZ5UmVuZGVyZXIgfHwgbm90aWZ5UmVuZGVyZXIgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBmYWxzZTtcblxuICAgIGlmKCAhY3kuc3R5bGVFbmFibGVkKCkgKXsgcmV0dXJuIHRoaXM7IH1cblxuICAgIHN0eWxlLnVwZGF0ZU1hcHBlcnMoIHRoaXMgKTtcblxuICAgIHZhciB1cGRhdGVkQ29tcG91bmRzID0gdGhpcy51cGRhdGVDb21wb3VuZEJvdW5kcygpO1xuICAgIHZhciB0b05vdGlmeSA9IHVwZGF0ZWRDb21wb3VuZHMubGVuZ3RoID4gMCA/IHRoaXMuYWRkKCB1cGRhdGVkQ29tcG91bmRzICkgOiB0aGlzO1xuXG4gICAgaWYoIG5vdGlmeVJlbmRlcmVyICl7XG4gICAgICB0b05vdGlmeS5ydHJpZ2dlciggJ3N0eWxlJyApOyAvLyBsZXQgcmVuZGVyZXIga25vdyB3ZSBjaGFuZ2VkIHN0eWxlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRvTm90aWZ5LnRyaWdnZXIoICdzdHlsZScgKTsgLy8ganVzdCBmaXJlIHRoZSBldmVudFxuICAgIH1cbiAgICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbiAgfSxcblxuICAvLyBnZXQgdGhlIGludGVybmFsIHBhcnNlZCBzdHlsZSBvYmplY3QgZm9yIHRoZSBzcGVjaWZpZWQgcHJvcGVydHlcbiAgcGFyc2VkU3R5bGU6IGZ1bmN0aW9uKCBwcm9wZXJ0eSApe1xuICAgIHZhciBlbGUgPSB0aGlzWzBdO1xuICAgIHZhciBjeSA9IGVsZS5jeSgpO1xuXG4gICAgaWYoICFjeS5zdHlsZUVuYWJsZWQoKSApeyByZXR1cm47IH1cblxuICAgIGlmKCBlbGUgKXtcbiAgICAgIHJldHVybiBlbGUuX3ByaXZhdGUuc3R5bGVbIHByb3BlcnR5IF0gfHwgY3kuc3R5bGUoKS5nZXREZWZhdWx0UHJvcGVydHkoIHByb3BlcnR5ICk7XG4gICAgfVxuICB9LFxuXG4gIG51bWVyaWNTdHlsZTogZnVuY3Rpb24oIHByb3BlcnR5ICl7XG4gICAgdmFyIGVsZSA9IHRoaXNbMF07XG5cbiAgICBpZiggIWVsZS5jeSgpLnN0eWxlRW5hYmxlZCgpICl7IHJldHVybjsgfVxuXG4gICAgaWYoIGVsZSApe1xuICAgICAgdmFyIHBzdHlsZSA9IGVsZS5wc3R5bGUoIHByb3BlcnR5ICk7XG5cbiAgICAgIHJldHVybiBwc3R5bGUucGZWYWx1ZSAhPT0gdW5kZWZpbmVkID8gcHN0eWxlLnBmVmFsdWUgOiBwc3R5bGUudmFsdWU7XG4gICAgfVxuICB9LFxuXG4gIG51bWVyaWNTdHlsZVVuaXRzOiBmdW5jdGlvbiggcHJvcGVydHkgKXtcbiAgICB2YXIgZWxlID0gdGhpc1swXTtcblxuICAgIGlmKCAhZWxlLmN5KCkuc3R5bGVFbmFibGVkKCkgKXsgcmV0dXJuOyB9XG5cbiAgICBpZiggZWxlICl7XG4gICAgICByZXR1cm4gZWxlLnBzdHlsZSggcHJvcGVydHkgKS51bml0cztcbiAgICB9XG4gIH0sXG5cbiAgLy8gZ2V0IHRoZSBzcGVjaWZpZWQgY3NzIHByb3BlcnR5IGFzIGEgcmVuZGVyZWQgdmFsdWUgKGkuZS4gb24tc2NyZWVuIHZhbHVlKVxuICAvLyBvciBnZXQgdGhlIHdob2xlIHJlbmRlcmVkIHN0eWxlIGlmIG5vIHByb3BlcnR5IHNwZWNpZmllZCAoTkIgZG9lc24ndCBhbGxvdyBzZXR0aW5nKVxuICByZW5kZXJlZFN0eWxlOiBmdW5jdGlvbiggcHJvcGVydHkgKXtcbiAgICB2YXIgY3kgPSB0aGlzLmN5KCk7XG4gICAgaWYoICFjeS5zdHlsZUVuYWJsZWQoKSApeyByZXR1cm4gdGhpczsgfVxuXG4gICAgdmFyIGVsZSA9IHRoaXNbMF07XG5cbiAgICBpZiggZWxlICl7XG4gICAgICByZXR1cm4gY3kuc3R5bGUoKS5nZXRSZW5kZXJlZFN0eWxlKCBlbGUsIHByb3BlcnR5ICk7XG4gICAgfVxuICB9LFxuXG4gIC8vIHJlYWQgdGhlIGNhbGN1bGF0ZWQgY3NzIHN0eWxlIG9mIHRoZSBlbGVtZW50IG9yIG92ZXJyaWRlIHRoZSBzdHlsZSAodmlhIGEgYnlwYXNzKVxuICBzdHlsZTogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICl7XG4gICAgdmFyIGN5ID0gdGhpcy5jeSgpO1xuXG4gICAgaWYoICFjeS5zdHlsZUVuYWJsZWQoKSApeyByZXR1cm4gdGhpczsgfVxuXG4gICAgdmFyIHVwZGF0ZVRyYW5zaXRpb25zID0gZmFsc2U7XG4gICAgdmFyIHN0eWxlID0gY3kuc3R5bGUoKTtcblxuICAgIGlmKCBpcy5wbGFpbk9iamVjdCggbmFtZSApICl7IC8vIHRoZW4gZXh0ZW5kIHRoZSBieXBhc3NcbiAgICAgIHZhciBwcm9wcyA9IG5hbWU7XG4gICAgICBzdHlsZS5hcHBseUJ5cGFzcyggdGhpcywgcHJvcHMsIHVwZGF0ZVRyYW5zaXRpb25zICk7XG5cbiAgICAgIHZhciB1cGRhdGVkQ29tcG91bmRzID0gdGhpcy51cGRhdGVDb21wb3VuZEJvdW5kcygpO1xuICAgICAgdmFyIHRvTm90aWZ5ID0gdXBkYXRlZENvbXBvdW5kcy5sZW5ndGggPiAwID8gdGhpcy5hZGQoIHVwZGF0ZWRDb21wb3VuZHMgKSA6IHRoaXM7XG4gICAgICB0b05vdGlmeS5ydHJpZ2dlciggJ3N0eWxlJyApOyAvLyBsZXQgdGhlIHJlbmRlcmVyIGtub3cgd2UndmUgdXBkYXRlZCBzdHlsZVxuXG4gICAgfSBlbHNlIGlmKCBpcy5zdHJpbmcoIG5hbWUgKSApe1xuXG4gICAgICBpZiggdmFsdWUgPT09IHVuZGVmaW5lZCApeyAvLyB0aGVuIGdldCB0aGUgcHJvcGVydHkgZnJvbSB0aGUgc3R5bGVcbiAgICAgICAgdmFyIGVsZSA9IHRoaXNbMF07XG5cbiAgICAgICAgaWYoIGVsZSApe1xuICAgICAgICAgIHJldHVybiBzdHlsZS5nZXRTdHlsZVByb3BlcnR5VmFsdWUoIGVsZSwgbmFtZSApO1xuICAgICAgICB9IGVsc2UgeyAvLyBlbXB0eSBjb2xsZWN0aW9uID0+IGNhbid0IGdldCBhbnkgdmFsdWVcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHsgLy8gdGhlbiBzZXQgdGhlIGJ5cGFzcyB3aXRoIHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICBzdHlsZS5hcHBseUJ5cGFzcyggdGhpcywgbmFtZSwgdmFsdWUsIHVwZGF0ZVRyYW5zaXRpb25zICk7XG5cbiAgICAgICAgdmFyIHVwZGF0ZWRDb21wb3VuZHMgPSB0aGlzLnVwZGF0ZUNvbXBvdW5kQm91bmRzKCk7XG4gICAgICAgIHZhciB0b05vdGlmeSA9IHVwZGF0ZWRDb21wb3VuZHMubGVuZ3RoID4gMCA/IHRoaXMuYWRkKCB1cGRhdGVkQ29tcG91bmRzICkgOiB0aGlzO1xuICAgICAgICB0b05vdGlmeS5ydHJpZ2dlciggJ3N0eWxlJyApOyAvLyBsZXQgdGhlIHJlbmRlcmVyIGtub3cgd2UndmUgdXBkYXRlZCBzdHlsZVxuICAgICAgfVxuXG4gICAgfSBlbHNlIGlmKCBuYW1lID09PSB1bmRlZmluZWQgKXtcbiAgICAgIHZhciBlbGUgPSB0aGlzWzBdO1xuXG4gICAgICBpZiggZWxlICl7XG4gICAgICAgIHJldHVybiBzdHlsZS5nZXRSYXdTdHlsZSggZWxlICk7XG4gICAgICB9IGVsc2UgeyAvLyBlbXB0eSBjb2xsZWN0aW9uID0+IGNhbid0IGdldCBhbnkgdmFsdWVcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9LFxuXG4gIHJlbW92ZVN0eWxlOiBmdW5jdGlvbiggbmFtZXMgKXtcbiAgICB2YXIgY3kgPSB0aGlzLmN5KCk7XG5cbiAgICBpZiggIWN5LnN0eWxlRW5hYmxlZCgpICl7IHJldHVybiB0aGlzOyB9XG5cbiAgICB2YXIgdXBkYXRlVHJhbnNpdGlvbnMgPSBmYWxzZTtcbiAgICB2YXIgc3R5bGUgPSBjeS5zdHlsZSgpO1xuICAgIHZhciBlbGVzID0gdGhpcztcblxuICAgIGlmKCBuYW1lcyA9PT0gdW5kZWZpbmVkICl7XG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGVsZSA9IGVsZXNbIGkgXTtcblxuICAgICAgICBzdHlsZS5yZW1vdmVBbGxCeXBhc3NlcyggZWxlLCB1cGRhdGVUcmFuc2l0aW9ucyApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lcyA9IG5hbWVzLnNwbGl0KCAvXFxzKy8gKTtcblxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBlbGUgPSBlbGVzWyBpIF07XG5cbiAgICAgICAgc3R5bGUucmVtb3ZlQnlwYXNzZXMoIGVsZSwgbmFtZXMsIHVwZGF0ZVRyYW5zaXRpb25zICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVwZGF0ZWRDb21wb3VuZHMgPSB0aGlzLnVwZGF0ZUNvbXBvdW5kQm91bmRzKCk7XG4gICAgdmFyIHRvTm90aWZ5ID0gdXBkYXRlZENvbXBvdW5kcy5sZW5ndGggPiAwID8gdGhpcy5hZGQoIHVwZGF0ZWRDb21wb3VuZHMgKSA6IHRoaXM7XG4gICAgdG9Ob3RpZnkucnRyaWdnZXIoICdzdHlsZScgKTsgLy8gbGV0IHRoZSByZW5kZXJlciBrbm93IHdlJ3ZlIHVwZGF0ZWQgc3R5bGVcblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9LFxuXG4gIHNob3c6IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5jc3MoICdkaXNwbGF5JywgJ2VsZW1lbnQnICk7XG4gICAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG4gIH0sXG5cbiAgaGlkZTogZnVuY3Rpb24oKXtcbiAgICB0aGlzLmNzcyggJ2Rpc3BsYXknLCAnbm9uZScgKTtcbiAgICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbiAgfSxcblxuICB2aXNpYmxlOiBmdW5jdGlvbigpe1xuICAgIHZhciBjeSA9IHRoaXMuY3koKTtcbiAgICBpZiggIWN5LnN0eWxlRW5hYmxlZCgpICl7IHJldHVybiB0cnVlOyB9XG5cbiAgICB2YXIgZWxlID0gdGhpc1swXTtcbiAgICB2YXIgaGFzQ29tcG91bmROb2RlcyA9IGN5Lmhhc0NvbXBvdW5kTm9kZXMoKTtcblxuICAgIGlmKCBlbGUgKXtcbiAgICAgIGlmKFxuICAgICAgICBlbGUucHN0eWxlKCAndmlzaWJpbGl0eScgKS52YWx1ZSAhPT0gJ3Zpc2libGUnXG4gICAgICAgIHx8IGVsZS5wc3R5bGUoICdkaXNwbGF5JyApLnZhbHVlICE9PSAnZWxlbWVudCdcbiAgICAgICAgfHwgZWxlLnBzdHlsZSgnd2lkdGgnKS5wZlZhbHVlID09PSAwXG4gICAgICApe1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmKCBlbGUuX3ByaXZhdGUuZ3JvdXAgPT09ICdub2RlcycgKXtcbiAgICAgICAgaWYoIGVsZS5wc3R5bGUoJ2hlaWdodCcpLnBmVmFsdWUgPT09IDAgKXsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICAgICAgaWYoICFoYXNDb21wb3VuZE5vZGVzICl7IHJldHVybiB0cnVlOyB9XG5cbiAgICAgICAgdmFyIHBhcmVudHMgPSBlbGUuX3ByaXZhdGUuZGF0YS5wYXJlbnQgPyBlbGUucGFyZW50cygpIDogbnVsbDtcblxuICAgICAgICBpZiggcGFyZW50cyApe1xuICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgcGFyZW50cy5sZW5ndGg7IGkrKyApe1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IHBhcmVudHNbIGkgXTtcbiAgICAgICAgICAgIHZhciBwVmlzID0gcGFyZW50LnBzdHlsZSggJ3Zpc2liaWxpdHknICkudmFsdWU7XG4gICAgICAgICAgICB2YXIgcERpcyA9IHBhcmVudC5wc3R5bGUoICdkaXNwbGF5JyApLnZhbHVlO1xuXG4gICAgICAgICAgICBpZiggcFZpcyAhPT0gJ3Zpc2libGUnIHx8IHBEaXMgIT09ICdlbGVtZW50JyApe1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc3JjID0gZWxlLl9wcml2YXRlLnNvdXJjZTtcbiAgICAgICAgdmFyIHRndCA9IGVsZS5fcHJpdmF0ZS50YXJnZXQ7XG5cbiAgICAgICAgcmV0dXJuIHNyYy52aXNpYmxlKCkgJiYgdGd0LnZpc2libGUoKTtcbiAgICAgIH1cblxuICAgIH1cbiAgfSxcblxuICBoaWRkZW46IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGVsZSA9IHRoaXNbMF07XG5cbiAgICBpZiggZWxlICl7XG4gICAgICByZXR1cm4gIWVsZS52aXNpYmxlKCk7XG4gICAgfVxuICB9LFxuXG4gIGVmZmVjdGl2ZU9wYWNpdHk6IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGN5ID0gdGhpcy5jeSgpO1xuICAgIGlmKCAhY3kuc3R5bGVFbmFibGVkKCkgKXsgcmV0dXJuIDE7IH1cblxuICAgIHZhciBoYXNDb21wb3VuZE5vZGVzID0gY3kuaGFzQ29tcG91bmROb2RlcygpO1xuICAgIHZhciBlbGUgPSB0aGlzWzBdO1xuXG4gICAgaWYoIGVsZSApe1xuICAgICAgdmFyIF9wID0gZWxlLl9wcml2YXRlO1xuICAgICAgdmFyIHBhcmVudE9wYWNpdHkgPSBlbGUucHN0eWxlKCAnb3BhY2l0eScgKS52YWx1ZTtcblxuICAgICAgaWYoICFoYXNDb21wb3VuZE5vZGVzICl7IHJldHVybiBwYXJlbnRPcGFjaXR5OyB9XG5cbiAgICAgIHZhciBwYXJlbnRzID0gIV9wLmRhdGEucGFyZW50ID8gbnVsbCA6IGVsZS5wYXJlbnRzKCk7XG5cbiAgICAgIGlmKCBwYXJlbnRzICl7XG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgcGFyZW50cy5sZW5ndGg7IGkrKyApe1xuICAgICAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRzWyBpIF07XG4gICAgICAgICAgdmFyIG9wYWNpdHkgPSBwYXJlbnQucHN0eWxlKCAnb3BhY2l0eScgKS52YWx1ZTtcblxuICAgICAgICAgIHBhcmVudE9wYWNpdHkgPSBvcGFjaXR5ICogcGFyZW50T3BhY2l0eTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyZW50T3BhY2l0eTtcbiAgICB9XG4gIH0sXG5cbiAgdHJhbnNwYXJlbnQ6IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGN5ID0gdGhpcy5jeSgpO1xuICAgIGlmKCAhY3kuc3R5bGVFbmFibGVkKCkgKXsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICB2YXIgZWxlID0gdGhpc1swXTtcbiAgICB2YXIgaGFzQ29tcG91bmROb2RlcyA9IGVsZS5jeSgpLmhhc0NvbXBvdW5kTm9kZXMoKTtcblxuICAgIGlmKCBlbGUgKXtcbiAgICAgIGlmKCAhaGFzQ29tcG91bmROb2RlcyApe1xuICAgICAgICByZXR1cm4gZWxlLnBzdHlsZSggJ29wYWNpdHknICkudmFsdWUgPT09IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZWxlLmVmZmVjdGl2ZU9wYWNpdHkoKSA9PT0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgYmFja2dyb3VuZGluZzogZnVuY3Rpb24oKXtcbiAgICB2YXIgY3kgPSB0aGlzLmN5KCk7XG4gICAgaWYoICFjeS5zdHlsZUVuYWJsZWQoKSApeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIHZhciBlbGUgPSB0aGlzWzBdO1xuXG4gICAgcmV0dXJuIGVsZS5fcHJpdmF0ZS5iYWNrZ3JvdW5kaW5nID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG5cbn0pO1xuXG5cbmVsZXNmbi5ieXBhc3MgPSBlbGVzZm4uY3NzID0gZWxlc2ZuLnN0eWxlO1xuZWxlc2ZuLnJlbmRlcmVkQ3NzID0gZWxlc2ZuLnJlbmRlcmVkU3R5bGU7XG5lbGVzZm4ucmVtb3ZlQnlwYXNzID0gZWxlc2ZuLnJlbW92ZUNzcyA9IGVsZXNmbi5yZW1vdmVTdHlsZTtcbmVsZXNmbi5wc3R5bGUgPSBlbGVzZm4ucGFyc2VkU3R5bGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZWxlc2ZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxlc2ZuID0ge307XG5cbmZ1bmN0aW9uIGRlZmluZVN3aXRjaEZ1bmN0aW9uKCBwYXJhbXMgKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIGNoYW5nZWRFbGVzID0gW107XG5cbiAgICAvLyBlLmcuIGN5Lm5vZGVzKCkuc2VsZWN0KCBkYXRhLCBoYW5kbGVyIClcbiAgICBpZiggYXJncy5sZW5ndGggPT09IDIgKXtcbiAgICAgIHZhciBkYXRhID0gYXJnc1swXTtcbiAgICAgIHZhciBoYW5kbGVyID0gYXJnc1sxXTtcbiAgICAgIHRoaXMub24oIHBhcmFtcy5ldmVudCwgZGF0YSwgaGFuZGxlciApO1xuICAgIH1cblxuICAgIC8vIGUuZy4gY3kubm9kZXMoKS5zZWxlY3QoIGhhbmRsZXIgKVxuICAgIGVsc2UgaWYoIGFyZ3MubGVuZ3RoID09PSAxICl7XG4gICAgICB2YXIgaGFuZGxlciA9IGFyZ3NbMF07XG4gICAgICB0aGlzLm9uKCBwYXJhbXMuZXZlbnQsIGhhbmRsZXIgKTtcbiAgICB9XG5cbiAgICAvLyBlLmcuIGN5Lm5vZGVzKCkuc2VsZWN0KClcbiAgICBlbHNlIGlmKCBhcmdzLmxlbmd0aCA9PT0gMCApe1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBlbGUgPSB0aGlzWyBpIF07XG4gICAgICAgIHZhciBhYmxlID0gIXBhcmFtcy5hYmxlRmllbGQgfHwgZWxlLl9wcml2YXRlWyBwYXJhbXMuYWJsZUZpZWxkIF07XG4gICAgICAgIHZhciBjaGFuZ2VkID0gZWxlLl9wcml2YXRlWyBwYXJhbXMuZmllbGQgXSAhPSBwYXJhbXMudmFsdWU7XG5cbiAgICAgICAgaWYoIHBhcmFtcy5vdmVycmlkZUFibGUgKXtcbiAgICAgICAgICB2YXIgb3ZlcnJpZGVBYmxlID0gcGFyYW1zLm92ZXJyaWRlQWJsZSggZWxlICk7XG5cbiAgICAgICAgICBpZiggb3ZlcnJpZGVBYmxlICE9PSB1bmRlZmluZWQgKXtcbiAgICAgICAgICAgIGFibGUgPSBvdmVycmlkZUFibGU7XG5cbiAgICAgICAgICAgIGlmKCAhb3ZlcnJpZGVBYmxlICl7IHJldHVybiB0aGlzOyB9IC8vIHRvIHNhdmUgY3ljbGVzIGFzc3VtZSBub3QgYWJsZSBmb3IgYWxsIG9uIG92ZXJyaWRlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIGFibGUgKXtcbiAgICAgICAgICBlbGUuX3ByaXZhdGVbIHBhcmFtcy5maWVsZCBdID0gcGFyYW1zLnZhbHVlO1xuXG4gICAgICAgICAgaWYoIGNoYW5nZWQgKXtcbiAgICAgICAgICAgIGNoYW5nZWRFbGVzLnB1c2goIGVsZSApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY2hhbmdlZENvbGwgPSB0aGlzLnNwYXduKCBjaGFuZ2VkRWxlcyApO1xuICAgICAgY2hhbmdlZENvbGwudXBkYXRlU3R5bGUoKTsgLy8gY2hhbmdlIG9mIHN0YXRlID0+IHBvc3NpYmxlIGNoYW5nZSBvZiBzdHlsZVxuICAgICAgY2hhbmdlZENvbGwudHJpZ2dlciggcGFyYW1zLmV2ZW50ICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlZmluZVN3aXRjaFNldCggcGFyYW1zICl7XG4gIGVsZXNmblsgcGFyYW1zLmZpZWxkIF0gPSBmdW5jdGlvbigpe1xuICAgIHZhciBlbGUgPSB0aGlzWzBdO1xuXG4gICAgaWYoIGVsZSApe1xuICAgICAgaWYoIHBhcmFtcy5vdmVycmlkZUZpZWxkICl7XG4gICAgICAgIHZhciB2YWwgPSBwYXJhbXMub3ZlcnJpZGVGaWVsZCggZWxlICk7XG5cbiAgICAgICAgaWYoIHZhbCAhPT0gdW5kZWZpbmVkICl7XG4gICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWxlLl9wcml2YXRlWyBwYXJhbXMuZmllbGQgXTtcbiAgICB9XG4gIH07XG5cbiAgZWxlc2ZuWyBwYXJhbXMub24gXSA9IGRlZmluZVN3aXRjaEZ1bmN0aW9uKCB7XG4gICAgZXZlbnQ6IHBhcmFtcy5vbixcbiAgICBmaWVsZDogcGFyYW1zLmZpZWxkLFxuICAgIGFibGVGaWVsZDogcGFyYW1zLmFibGVGaWVsZCxcbiAgICBvdmVycmlkZUFibGU6IHBhcmFtcy5vdmVycmlkZUFibGUsXG4gICAgdmFsdWU6IHRydWVcbiAgfSApO1xuXG4gIGVsZXNmblsgcGFyYW1zLm9mZiBdID0gZGVmaW5lU3dpdGNoRnVuY3Rpb24oIHtcbiAgICBldmVudDogcGFyYW1zLm9mZixcbiAgICBmaWVsZDogcGFyYW1zLmZpZWxkLFxuICAgIGFibGVGaWVsZDogcGFyYW1zLmFibGVGaWVsZCxcbiAgICBvdmVycmlkZUFibGU6IHBhcmFtcy5vdmVycmlkZUFibGUsXG4gICAgdmFsdWU6IGZhbHNlXG4gIH0gKTtcbn1cblxuZGVmaW5lU3dpdGNoU2V0KCB7XG4gIGZpZWxkOiAnbG9ja2VkJyxcbiAgb3ZlcnJpZGVGaWVsZDogZnVuY3Rpb24oIGVsZSApe1xuICAgIHJldHVybiBlbGUuY3koKS5hdXRvbG9jaygpID8gdHJ1ZSA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgb246ICdsb2NrJyxcbiAgb2ZmOiAndW5sb2NrJ1xufSApO1xuXG5kZWZpbmVTd2l0Y2hTZXQoIHtcbiAgZmllbGQ6ICdncmFiYmFibGUnLFxuICBvdmVycmlkZUZpZWxkOiBmdW5jdGlvbiggZWxlICl7XG4gICAgcmV0dXJuIGVsZS5jeSgpLmF1dG91bmdyYWJpZnkoKSA/IGZhbHNlIDogdW5kZWZpbmVkO1xuICB9LFxuICBvbjogJ2dyYWJpZnknLFxuICBvZmY6ICd1bmdyYWJpZnknXG59ICk7XG5cbmRlZmluZVN3aXRjaFNldCgge1xuICBmaWVsZDogJ3NlbGVjdGVkJyxcbiAgYWJsZUZpZWxkOiAnc2VsZWN0YWJsZScsXG4gIG92ZXJyaWRlQWJsZTogZnVuY3Rpb24oIGVsZSApe1xuICAgIHJldHVybiBlbGUuY3koKS5hdXRvdW5zZWxlY3RpZnkoKSA/IGZhbHNlIDogdW5kZWZpbmVkO1xuICB9LFxuICBvbjogJ3NlbGVjdCcsXG4gIG9mZjogJ3Vuc2VsZWN0J1xufSApO1xuXG5kZWZpbmVTd2l0Y2hTZXQoIHtcbiAgZmllbGQ6ICdzZWxlY3RhYmxlJyxcbiAgb3ZlcnJpZGVGaWVsZDogZnVuY3Rpb24oIGVsZSApe1xuICAgIHJldHVybiBlbGUuY3koKS5hdXRvdW5zZWxlY3RpZnkoKSA/IGZhbHNlIDogdW5kZWZpbmVkO1xuICB9LFxuICBvbjogJ3NlbGVjdGlmeScsXG4gIG9mZjogJ3Vuc2VsZWN0aWZ5J1xufSApO1xuXG5lbGVzZm4uZGVzZWxlY3QgPSBlbGVzZm4udW5zZWxlY3Q7XG5cbmVsZXNmbi5ncmFiYmVkID0gZnVuY3Rpb24oKXtcbiAgdmFyIGVsZSA9IHRoaXNbMF07XG4gIGlmKCBlbGUgKXtcbiAgICByZXR1cm4gZWxlLl9wcml2YXRlLmdyYWJiZWQ7XG4gIH1cbn07XG5cbmRlZmluZVN3aXRjaFNldCgge1xuICBmaWVsZDogJ2FjdGl2ZScsXG4gIG9uOiAnYWN0aXZhdGUnLFxuICBvZmY6ICd1bmFjdGl2YXRlJ1xufSApO1xuXG5lbGVzZm4uaW5hY3RpdmUgPSBmdW5jdGlvbigpe1xuICB2YXIgZWxlID0gdGhpc1swXTtcbiAgaWYoIGVsZSApe1xuICAgIHJldHVybiAhZWxlLl9wcml2YXRlLmFjdGl2ZTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbGVzZm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSggJy4uL3V0aWwnICk7XG52YXIgaXMgPSByZXF1aXJlKCAnLi4vaXMnICk7XG5cbnZhciBlbGVzZm4gPSB7fTtcblxudmFyIGNhY2hlID0gZnVuY3Rpb24oIGZuLCBuYW1lICl7XG4gIHJldHVybiBmdW5jdGlvbiB0cmF2ZXJzYWxDYWNoZSggYXJnMSwgYXJnMiwgYXJnMywgYXJnNCApe1xuICAgIHZhciBzZWxlY3Rvck9yRWxlcyA9IGFyZzE7XG4gICAgdmFyIGVsZXMgPSB0aGlzO1xuICAgIHZhciBrZXk7XG5cbiAgICBpZiggc2VsZWN0b3JPckVsZXMgPT0gbnVsbCApe1xuICAgICAga2V5ID0gJ251bGwnO1xuICAgIH0gZWxzZSBpZiggaXMuZWxlbWVudE9yQ29sbGVjdGlvbiggc2VsZWN0b3JPckVsZXMgKSAmJiBzZWxlY3Rvck9yRWxlcy5sZW5ndGggPT09IDEgKXtcbiAgICAgIGtleSA9ICcjJyArIHNlbGVjdG9yT3JFbGVzLmlkKCk7XG4gICAgfVxuXG4gICAgaWYoIGVsZXMubGVuZ3RoID09PSAxICYmIGtleSApe1xuICAgICAgdmFyIF9wID0gZWxlc1swXS5fcHJpdmF0ZTtcbiAgICAgIHZhciB0Y2ggPSBfcC50cmF2ZXJzYWxDYWNoZSA9IF9wLnRyYXZlcnNhbENhY2hlIHx8IHt9O1xuICAgICAgdmFyIGNoID0gdGNoWyBuYW1lIF0gPSB0Y2hbIG5hbWUgXSB8fCB7fTtcbiAgICAgIHZhciBjYWNoZUhpdCA9IGNoWyBrZXkgXTtcblxuICAgICAgaWYoIGNhY2hlSGl0ICl7XG4gICAgICAgIHJldHVybiBjYWNoZUhpdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoIGNoWyBrZXkgXSA9IGZuLmNhbGwoIGVsZXMsIGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQgKSApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCggZWxlcywgYXJnMSwgYXJnMiwgYXJnMywgYXJnNCApO1xuICAgIH1cbiAgfTtcbn07XG5cbi8vIERBRyBmdW5jdGlvbnNcbi8vLy8vLy8vLy8vLy8vLy9cblxudmFyIGRlZmluZURhZ0V4dHJlbWl0eSA9IGZ1bmN0aW9uKCBwYXJhbXMgKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRhZ0V4dHJlbWl0eUltcGwoIHNlbGVjdG9yICl7XG4gICAgdmFyIGVsZXMgPSB0aGlzO1xuICAgIHZhciByZXQgPSBbXTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGVsZSA9IGVsZXNbIGkgXTtcbiAgICAgIGlmKCAhZWxlLmlzTm9kZSgpICl7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlzcXVhbGlmaWVkID0gZmFsc2U7XG4gICAgICB2YXIgZWRnZXMgPSBlbGUuY29ubmVjdGVkRWRnZXMoKTtcblxuICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBlZGdlcy5sZW5ndGg7IGorKyApe1xuICAgICAgICB2YXIgZWRnZSA9IGVkZ2VzW2pdO1xuICAgICAgICB2YXIgc3JjID0gZWRnZS5zb3VyY2UoKTtcbiAgICAgICAgdmFyIHRndCA9IGVkZ2UudGFyZ2V0KCk7XG5cbiAgICAgICAgaWYoXG4gICAgICAgICAgICAgKCBwYXJhbXMubm9JbmNvbWluZ0VkZ2VzICYmIHRndCA9PT0gZWxlICYmIHNyYyAhPT0gZWxlIClcbiAgICAgICAgICB8fCAoIHBhcmFtcy5ub091dGdvaW5nRWRnZXMgJiYgc3JjID09PSBlbGUgJiYgdGd0ICE9PSBlbGUgKVxuICAgICAgICApe1xuICAgICAgICAgIGRpc3F1YWxpZmllZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYoICFkaXNxdWFsaWZpZWQgKXtcbiAgICAgICAgcmV0LnB1c2goIGVsZSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNwYXduKCByZXQsIHsgdW5pcXVlOiB0cnVlIH0gKS5maWx0ZXIoIHNlbGVjdG9yICk7XG4gIH07XG59O1xuXG52YXIgZGVmaW5lRGFnT25lSG9wID0gZnVuY3Rpb24oIHBhcmFtcyApe1xuICByZXR1cm4gZnVuY3Rpb24oIHNlbGVjdG9yICl7XG4gICAgdmFyIGVsZXMgPSB0aGlzO1xuICAgIHZhciBvRWxlcyA9IFtdO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrICl7XG4gICAgICB2YXIgZWxlID0gZWxlc1sgaSBdO1xuXG4gICAgICBpZiggIWVsZS5pc05vZGUoKSApeyBjb250aW51ZTsgfVxuXG4gICAgICB2YXIgZWRnZXMgPSBlbGUuY29ubmVjdGVkRWRnZXMoKTtcbiAgICAgIGZvciggdmFyIGogPSAwOyBqIDwgZWRnZXMubGVuZ3RoOyBqKysgKXtcbiAgICAgICAgdmFyIGVkZ2UgPSBlZGdlc1sgaiBdO1xuICAgICAgICB2YXIgc3JjID0gZWRnZS5zb3VyY2UoKTtcbiAgICAgICAgdmFyIHRndCA9IGVkZ2UudGFyZ2V0KCk7XG5cbiAgICAgICAgaWYoIHBhcmFtcy5vdXRnb2luZyAmJiBzcmMgPT09IGVsZSApe1xuICAgICAgICAgIG9FbGVzLnB1c2goIGVkZ2UgKTtcbiAgICAgICAgICBvRWxlcy5wdXNoKCB0Z3QgKTtcbiAgICAgICAgfSBlbHNlIGlmKCBwYXJhbXMuaW5jb21pbmcgJiYgdGd0ID09PSBlbGUgKXtcbiAgICAgICAgICBvRWxlcy5wdXNoKCBlZGdlICk7XG4gICAgICAgICAgb0VsZXMucHVzaCggc3JjICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zcGF3biggb0VsZXMsIHsgdW5pcXVlOiB0cnVlIH0gKS5maWx0ZXIoIHNlbGVjdG9yICk7XG4gIH07XG59O1xuXG52YXIgZGVmaW5lRGFnQWxsSG9wcyA9IGZ1bmN0aW9uKCBwYXJhbXMgKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKCBzZWxlY3RvciApe1xuICAgIHZhciBlbGVzID0gdGhpcztcbiAgICB2YXIgc0VsZXMgPSBbXTtcbiAgICB2YXIgc0VsZXNJZHMgPSB7fTtcblxuICAgIGZvciggOzsgKXtcbiAgICAgIHZhciBuZXh0ID0gcGFyYW1zLm91dGdvaW5nID8gZWxlcy5vdXRnb2VycygpIDogZWxlcy5pbmNvbWVycygpO1xuXG4gICAgICBpZiggbmV4dC5sZW5ndGggPT09IDAgKXsgYnJlYWs7IH0gLy8gZG9uZSBpZiBub25lIGxlZnRcblxuICAgICAgdmFyIG5ld05leHQgPSBmYWxzZTtcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbmV4dC5sZW5ndGg7IGkrKyApe1xuICAgICAgICB2YXIgbiA9IG5leHRbIGkgXTtcbiAgICAgICAgdmFyIG5pZCA9IG4uaWQoKTtcblxuICAgICAgICBpZiggIXNFbGVzSWRzWyBuaWQgXSApe1xuICAgICAgICAgIHNFbGVzSWRzWyBuaWQgXSA9IHRydWU7XG4gICAgICAgICAgc0VsZXMucHVzaCggbiApO1xuICAgICAgICAgIG5ld05leHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmKCAhbmV3TmV4dCApeyBicmVhazsgfSAvLyBkb25lIGlmIHRvdWNoZWQgYWxsIG91dGdvZXJzIGFscmVhZHlcblxuICAgICAgZWxlcyA9IG5leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3Bhd24oIHNFbGVzLCB7IHVuaXF1ZTogdHJ1ZSB9ICkuZmlsdGVyKCBzZWxlY3RvciApO1xuICB9O1xufTtcblxudXRpbC5leHRlbmQoIGVsZXNmbiwge1xuICAvLyBnZXQgdGhlIHJvb3Qgbm9kZXMgaW4gdGhlIERBR1xuICByb290czogZGVmaW5lRGFnRXh0cmVtaXR5KHsgbm9JbmNvbWluZ0VkZ2VzOiB0cnVlIH0pLFxuXG4gIC8vIGdldCB0aGUgbGVhZiBub2RlcyBpbiB0aGUgREFHXG4gIGxlYXZlczogZGVmaW5lRGFnRXh0cmVtaXR5KHsgbm9PdXRnb2luZ0VkZ2VzOiB0cnVlIH0pLFxuXG4gIC8vIG5vcm1hbGx5IGNhbGxlZCBjaGlsZHJlbiBpbiBncmFwaCB0aGVvcnlcbiAgLy8gdGhlc2Ugbm9kZXMgPWVkZ2VzPT4gb3V0Z29pbmcgbm9kZXNcbiAgb3V0Z29lcnM6IGNhY2hlKCBkZWZpbmVEYWdPbmVIb3AoeyBvdXRnb2luZzogdHJ1ZSB9KSAsICdvdXRnb2VycycgKSxcblxuICAvLyBha2EgREFHIGRlc2NlbmRhbnRzXG4gIHN1Y2Nlc3NvcnM6IGRlZmluZURhZ0FsbEhvcHMoeyBvdXRnb2luZzogdHJ1ZSB9KSxcblxuICAvLyBub3JtYWxseSBjYWxsZWQgcGFyZW50cyBpbiBncmFwaCB0aGVvcnlcbiAgLy8gdGhlc2Ugbm9kZXMgPD1lZGdlcz0gaW5jb21pbmcgbm9kZXNcbiAgaW5jb21lcnM6IGNhY2hlKCBkZWZpbmVEYWdPbmVIb3AoeyBpbmNvbWluZzogdHJ1ZSB9KSwgJ2luY29tZXJzJyApLFxuXG4gIC8vIGFrYSBEQUcgYW5jZXN0b3JzXG4gIHByZWRlY2Vzc29yczogZGVmaW5lRGFnQWxsSG9wcyh7IGluY29taW5nOiB0cnVlIH0pXG59ICk7XG5cblxuLy8gTmVpZ2hib3VyaG9vZCBmdW5jdGlvbnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbnV0aWwuZXh0ZW5kKCBlbGVzZm4sIHtcbiAgbmVpZ2hib3Job29kOiBjYWNoZShmdW5jdGlvbiggc2VsZWN0b3IgKXtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzKCk7XG5cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrICl7IC8vIGZvciBhbGwgbm9kZXNcbiAgICAgIHZhciBub2RlID0gbm9kZXNbIGkgXTtcbiAgICAgIHZhciBjb25uZWN0ZWRFZGdlcyA9IG5vZGUuY29ubmVjdGVkRWRnZXMoKTtcblxuICAgICAgLy8gZm9yIGVhY2ggY29ubmVjdGVkIGVkZ2UsIGFkZCB0aGUgZWRnZSBhbmQgdGhlIG90aGVyIG5vZGVcbiAgICAgIGZvciggdmFyIGogPSAwOyBqIDwgY29ubmVjdGVkRWRnZXMubGVuZ3RoOyBqKysgKXtcbiAgICAgICAgdmFyIGVkZ2UgPSBjb25uZWN0ZWRFZGdlc1sgaiBdO1xuICAgICAgICB2YXIgc3JjID0gZWRnZS5zb3VyY2UoKTtcbiAgICAgICAgdmFyIHRndCA9IGVkZ2UudGFyZ2V0KCk7XG4gICAgICAgIHZhciBvdGhlck5vZGUgPSBub2RlID09PSBzcmMgPyB0Z3QgOiBzcmM7XG5cbiAgICAgICAgLy8gbmVlZCBjaGVjayBpbiBjYXNlIG9mIGxvb3BcbiAgICAgICAgaWYoIG90aGVyTm9kZS5sZW5ndGggPiAwICl7XG4gICAgICAgICAgZWxlbWVudHMucHVzaCggb3RoZXJOb2RlWzBdICk7IC8vIGFkZCBub2RlIDEgaG9wIGF3YXlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCBjb25uZWN0ZWQgZWRnZVxuICAgICAgICBlbGVtZW50cy5wdXNoKCBlZGdlWzBdICk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gKCB0aGlzLnNwYXduKCBlbGVtZW50cywgeyB1bmlxdWU6IHRydWUgfSApICkuZmlsdGVyKCBzZWxlY3RvciApO1xuICB9LCAnbmVpZ2hib3Job29kJyksXG5cbiAgY2xvc2VkTmVpZ2hib3Job29kOiBmdW5jdGlvbiggc2VsZWN0b3IgKXtcbiAgICByZXR1cm4gdGhpcy5uZWlnaGJvcmhvb2QoKS5hZGQoIHRoaXMgKS5maWx0ZXIoIHNlbGVjdG9yICk7XG4gIH0sXG5cbiAgb3Blbk5laWdoYm9yaG9vZDogZnVuY3Rpb24oIHNlbGVjdG9yICl7XG4gICAgcmV0dXJuIHRoaXMubmVpZ2hib3Job29kKCBzZWxlY3RvciApO1xuICB9XG59ICk7XG5cbi8vIGFsaWFzZXNcbmVsZXNmbi5uZWlnaGJvdXJob29kID0gZWxlc2ZuLm5laWdoYm9yaG9vZDtcbmVsZXNmbi5jbG9zZWROZWlnaGJvdXJob29kID0gZWxlc2ZuLmNsb3NlZE5laWdoYm9yaG9vZDtcbmVsZXNmbi5vcGVuTmVpZ2hib3VyaG9vZCA9IGVsZXNmbi5vcGVuTmVpZ2hib3Job29kO1xuXG4vLyBFZGdlIGZ1bmN0aW9uc1xuLy8vLy8vLy8vLy8vLy8vLy9cblxudXRpbC5leHRlbmQoIGVsZXNmbiwge1xuICBzb3VyY2U6IGNhY2hlKGZ1bmN0aW9uIHNvdXJjZUltcGwoIHNlbGVjdG9yICl7XG4gICAgdmFyIGVsZSA9IHRoaXNbMF07XG4gICAgdmFyIHNyYztcblxuICAgIGlmKCBlbGUgKXtcbiAgICAgIHNyYyA9IGVsZS5fcHJpdmF0ZS5zb3VyY2UgfHwgZWxlLmN5KCkuY29sbGVjdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiBzcmMgJiYgc2VsZWN0b3IgPyBzcmMuZmlsdGVyKCBzZWxlY3RvciApIDogc3JjO1xuICB9LCAnc291cmNlJyksXG5cbiAgdGFyZ2V0OiBjYWNoZShmdW5jdGlvbiB0YXJnZXRJbXBsKCBzZWxlY3RvciApe1xuICAgIHZhciBlbGUgPSB0aGlzWzBdO1xuICAgIHZhciB0Z3Q7XG5cbiAgICBpZiggZWxlICl7XG4gICAgICB0Z3QgPSBlbGUuX3ByaXZhdGUudGFyZ2V0IHx8IGVsZS5jeSgpLmNvbGxlY3Rpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGd0ICYmIHNlbGVjdG9yID8gdGd0LmZpbHRlciggc2VsZWN0b3IgKSA6IHRndDtcbiAgfSwgJ3RhcmdldCcpLFxuXG4gIHNvdXJjZXM6IGRlZmluZVNvdXJjZUZ1bmN0aW9uKCB7XG4gICAgYXR0cjogJ3NvdXJjZSdcbiAgfSApLFxuXG4gIHRhcmdldHM6IGRlZmluZVNvdXJjZUZ1bmN0aW9uKCB7XG4gICAgYXR0cjogJ3RhcmdldCdcbiAgfSApXG59ICk7XG5cbmZ1bmN0aW9uIGRlZmluZVNvdXJjZUZ1bmN0aW9uKCBwYXJhbXMgKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNvdXJjZUltcGwoIHNlbGVjdG9yICl7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGVsZSA9IHRoaXNbIGkgXTtcbiAgICAgIHZhciBzcmMgPSBlbGUuX3ByaXZhdGVbIHBhcmFtcy5hdHRyIF07XG5cbiAgICAgIGlmKCBzcmMgKXtcbiAgICAgICAgc291cmNlcy5wdXNoKCBzcmMgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zcGF3biggc291cmNlcywgeyB1bmlxdWU6IHRydWUgfSApLmZpbHRlciggc2VsZWN0b3IgKTtcbiAgfTtcbn1cblxudXRpbC5leHRlbmQoIGVsZXNmbiwge1xuICBlZGdlc1dpdGg6IGNhY2hlKCBkZWZpbmVFZGdlc1dpdGhGdW5jdGlvbigpLCAnZWRnZXNXaXRoJywgdHJ1ZSApLFxuXG4gIGVkZ2VzVG86IGNhY2hlKCBkZWZpbmVFZGdlc1dpdGhGdW5jdGlvbigge1xuICAgIHRoaXNJc1NyYzogdHJ1ZVxuICB9ICksICdlZGdlc1RvJywgdHJ1ZSApXG59ICk7XG5cbmZ1bmN0aW9uIGRlZmluZUVkZ2VzV2l0aEZ1bmN0aW9uKCBwYXJhbXMgKXtcblxuICByZXR1cm4gZnVuY3Rpb24gZWRnZXNXaXRoSW1wbCggb3RoZXJOb2RlcyApe1xuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgIHZhciBjeSA9IHRoaXMuX3ByaXZhdGUuY3k7XG4gICAgdmFyIHAgPSBwYXJhbXMgfHwge307XG5cbiAgICAvLyBnZXQgZWxlbWVudHMgaWYgYSBzZWxlY3RvciBpcyBzcGVjaWZpZWRcbiAgICBpZiggaXMuc3RyaW5nKCBvdGhlck5vZGVzICkgKXtcbiAgICAgIG90aGVyTm9kZXMgPSBjeS4kKCBvdGhlck5vZGVzICk7XG4gICAgfVxuXG4gICAgdmFyIHRoaXNJZHMgPSB0aGlzLl9wcml2YXRlLmlkcztcbiAgICB2YXIgb3RoZXJJZHMgPSBvdGhlck5vZGVzLl9wcml2YXRlLmlkcztcblxuICAgIGZvciggdmFyIGggPSAwOyBoIDwgb3RoZXJOb2Rlcy5sZW5ndGg7IGgrKyApe1xuICAgICAgdmFyIGVkZ2VzID0gb3RoZXJOb2Rlc1sgaCBdLl9wcml2YXRlLmVkZ2VzO1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGVkZ2VzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBlZGdlID0gZWRnZXNbIGkgXTtcbiAgICAgICAgdmFyIGVkZ2VEYXRhID0gZWRnZS5fcHJpdmF0ZS5kYXRhO1xuICAgICAgICB2YXIgdGhpc1RvT3RoZXIgPSB0aGlzSWRzWyBlZGdlRGF0YS5zb3VyY2UgXSAmJiBvdGhlcklkc1sgZWRnZURhdGEudGFyZ2V0IF07XG4gICAgICAgIHZhciBvdGhlclRvVGhpcyA9IG90aGVySWRzWyBlZGdlRGF0YS5zb3VyY2UgXSAmJiB0aGlzSWRzWyBlZGdlRGF0YS50YXJnZXQgXTtcbiAgICAgICAgdmFyIGVkZ2VDb25uZWN0c1RoaXNBbmRPdGhlciA9IHRoaXNUb090aGVyIHx8IG90aGVyVG9UaGlzO1xuXG4gICAgICAgIGlmKCAhZWRnZUNvbm5lY3RzVGhpc0FuZE90aGVyICl7IGNvbnRpbnVlOyB9XG5cbiAgICAgICAgaWYoIHAudGhpc0lzU3JjIHx8IHAudGhpc0lzVGd0ICl7XG4gICAgICAgICAgaWYoIHAudGhpc0lzU3JjICYmICF0aGlzVG9PdGhlciApeyBjb250aW51ZTsgfVxuXG4gICAgICAgICAgaWYoIHAudGhpc0lzVGd0ICYmICFvdGhlclRvVGhpcyApeyBjb250aW51ZTsgfVxuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudHMucHVzaCggZWRnZSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNwYXduKCBlbGVtZW50cywgeyB1bmlxdWU6IHRydWUgfSApO1xuICB9O1xufVxuXG51dGlsLmV4dGVuZCggZWxlc2ZuLCB7XG4gIGNvbm5lY3RlZEVkZ2VzOiBjYWNoZShmdW5jdGlvbiggc2VsZWN0b3IgKXtcbiAgICB2YXIgcmV0RWxlcyA9IFtdO1xuXG4gICAgdmFyIGVsZXMgPSB0aGlzO1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIG5vZGUgPSBlbGVzWyBpIF07XG4gICAgICBpZiggIW5vZGUuaXNOb2RlKCkgKXsgY29udGludWU7IH1cblxuICAgICAgdmFyIGVkZ2VzID0gbm9kZS5fcHJpdmF0ZS5lZGdlcztcblxuICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBlZGdlcy5sZW5ndGg7IGorKyApe1xuICAgICAgICB2YXIgZWRnZSA9IGVkZ2VzWyBqIF07XG4gICAgICAgIHJldEVsZXMucHVzaCggZWRnZSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNwYXduKCByZXRFbGVzLCB7IHVuaXF1ZTogdHJ1ZSB9ICkuZmlsdGVyKCBzZWxlY3RvciApO1xuICB9LCAnY29ubmVjdGVkRWRnZXMnKSxcblxuICBjb25uZWN0ZWROb2RlczogY2FjaGUoZnVuY3Rpb24oIHNlbGVjdG9yICl7XG4gICAgdmFyIHJldEVsZXMgPSBbXTtcblxuICAgIHZhciBlbGVzID0gdGhpcztcbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBlZGdlID0gZWxlc1sgaSBdO1xuICAgICAgaWYoICFlZGdlLmlzRWRnZSgpICl7IGNvbnRpbnVlOyB9XG5cbiAgICAgIHJldEVsZXMucHVzaCggZWRnZS5zb3VyY2UoKVswXSApO1xuICAgICAgcmV0RWxlcy5wdXNoKCBlZGdlLnRhcmdldCgpWzBdICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3Bhd24oIHJldEVsZXMsIHsgdW5pcXVlOiB0cnVlIH0gKS5maWx0ZXIoIHNlbGVjdG9yICk7XG4gIH0sICdjb25uZWN0ZWROb2RlcycpLFxuXG4gIHBhcmFsbGVsRWRnZXM6IGNhY2hlKCBkZWZpbmVQYXJhbGxlbEVkZ2VzRnVuY3Rpb24oKSwgJ3BhcmFsbGVsRWRnZXMnICksXG5cbiAgY29kaXJlY3RlZEVkZ2VzOiBjYWNoZSggZGVmaW5lUGFyYWxsZWxFZGdlc0Z1bmN0aW9uKCB7XG4gICAgY29kaXJlY3RlZDogdHJ1ZVxuICB9ICksICdjb2RpcmVjdGVkRWRnZXMnIClcbn0gKTtcblxuZnVuY3Rpb24gZGVmaW5lUGFyYWxsZWxFZGdlc0Z1bmN0aW9uKCBwYXJhbXMgKXtcbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIGNvZGlyZWN0ZWQ6IGZhbHNlXG4gIH07XG4gIHBhcmFtcyA9IHV0aWwuZXh0ZW5kKCB7fSwgZGVmYXVsdHMsIHBhcmFtcyApO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwYXJhbGxlbEVkZ2VzSW1wbCggc2VsZWN0b3IgKXsgLy8gbWljcm8tb3B0aW1pc2VkIGZvciByZW5kZXJlclxuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgIHZhciBlZGdlcyA9IHRoaXMuZWRnZXMoKTtcbiAgICB2YXIgcCA9IHBhcmFtcztcblxuICAgIC8vIGxvb2sgYXQgYWxsIHRoZSBlZGdlcyBpbiB0aGUgY29sbGVjdGlvblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZWRnZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBlZGdlMSA9IGVkZ2VzWyBpIF07XG4gICAgICB2YXIgZWRnZTFfcCA9IGVkZ2UxLl9wcml2YXRlO1xuICAgICAgdmFyIHNyYzEgPSBlZGdlMV9wLnNvdXJjZTtcbiAgICAgIHZhciBzcmNpZDEgPSBzcmMxLl9wcml2YXRlLmRhdGEuaWQ7XG4gICAgICB2YXIgdGd0aWQxID0gZWRnZTFfcC5kYXRhLnRhcmdldDtcbiAgICAgIHZhciBzcmNFZGdlczEgPSBzcmMxLl9wcml2YXRlLmVkZ2VzO1xuXG4gICAgICAvLyBsb29rIGF0IGVkZ2VzIGNvbm5lY3RlZCB0byB0aGUgc3JjIG5vZGUgb2YgdGhpcyBlZGdlXG4gICAgICBmb3IoIHZhciBqID0gMDsgaiA8IHNyY0VkZ2VzMS5sZW5ndGg7IGorKyApe1xuICAgICAgICB2YXIgZWRnZTIgPSBzcmNFZGdlczFbIGogXTtcbiAgICAgICAgdmFyIGVkZ2UyZGF0YSA9IGVkZ2UyLl9wcml2YXRlLmRhdGE7XG4gICAgICAgIHZhciB0Z3RpZDIgPSBlZGdlMmRhdGEudGFyZ2V0O1xuICAgICAgICB2YXIgc3JjaWQyID0gZWRnZTJkYXRhLnNvdXJjZTtcblxuICAgICAgICB2YXIgY29kaXJlY3RlZCA9IHRndGlkMiA9PT0gdGd0aWQxICYmIHNyY2lkMiA9PT0gc3JjaWQxO1xuICAgICAgICB2YXIgb3BwZGlyZWN0ZWQgPSBzcmNpZDEgPT09IHRndGlkMiAmJiB0Z3RpZDEgPT09IHNyY2lkMjtcblxuICAgICAgICBpZiggKHAuY29kaXJlY3RlZCAmJiBjb2RpcmVjdGVkKSB8fCAoIXAuY29kaXJlY3RlZCAmJiAoY29kaXJlY3RlZCB8fCBvcHBkaXJlY3RlZCkpICl7XG4gICAgICAgICAgZWxlbWVudHMucHVzaCggZWRnZTIgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNwYXduKCBlbGVtZW50cywgeyB1bmlxdWU6IHRydWUgfSApLmZpbHRlciggc2VsZWN0b3IgKTtcbiAgfTtcblxufVxuXG4vLyBNaXNjIGZ1bmN0aW9uc1xuLy8vLy8vLy8vLy8vLy8vLy9cblxudXRpbC5leHRlbmQoIGVsZXNmbiwge1xuICBjb21wb25lbnRzOiBmdW5jdGlvbigpe1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY3kgPSBzZWxmLmN5KCk7XG4gICAgdmFyIHZpc2l0ZWQgPSBzZWxmLnNwYXduKCk7XG4gICAgdmFyIHVudmlzaXRlZCA9IHNlbGYubm9kZXMoKS5zcGF3blNlbGYoKTtcbiAgICB2YXIgY29tcG9uZW50cyA9IFtdO1xuXG4gICAgdmFyIHZpc2l0SW5Db21wb25lbnQgPSBmdW5jdGlvbiggbm9kZSwgY29tcG9uZW50ICl7XG4gICAgICB2aXNpdGVkLm1lcmdlKCBub2RlICk7XG4gICAgICB1bnZpc2l0ZWQudW5tZXJnZSggbm9kZSApO1xuICAgICAgY29tcG9uZW50Lm1lcmdlKCBub2RlICk7XG4gICAgfTtcblxuICAgIGlmKCB1bnZpc2l0ZWQuZW1wdHkoKSApeyByZXR1cm4gc2VsZi5zcGF3bigpOyB9XG5cbiAgICBkbyB7XG4gICAgICB2YXIgY29tcG9uZW50ID0gY3kuY29sbGVjdGlvbigpO1xuICAgICAgY29tcG9uZW50cy5wdXNoKCBjb21wb25lbnQgKTtcblxuICAgICAgdmFyIHJvb3QgPSB1bnZpc2l0ZWRbMF07XG4gICAgICB2aXNpdEluQ29tcG9uZW50KCByb290LCBjb21wb25lbnQgKTtcblxuICAgICAgc2VsZi5iZnMoe1xuICAgICAgICBkaXJlY3RlZDogZmFsc2UsXG4gICAgICAgIHJvb3RzOiByb290LFxuICAgICAgICB2aXNpdDogZnVuY3Rpb24oIGksIGRlcHRoLCB2LCBlLCB1ICl7XG4gICAgICAgICAgdmlzaXRJbkNvbXBvbmVudCggdiwgY29tcG9uZW50ICk7XG4gICAgICAgIH1cbiAgICAgIH0gKTtcblxuICAgIH0gd2hpbGUoIHVudmlzaXRlZC5sZW5ndGggPiAwICk7XG5cbiAgICByZXR1cm4gY29tcG9uZW50cy5tYXAoZnVuY3Rpb24oIGNvbXBvbmVudCApe1xuICAgICAgdmFyIGNvbm5lY3RlZEVkZ2VzID0gY29tcG9uZW50LmNvbm5lY3RlZEVkZ2VzKCkuc3RkRmlsdGVyKGZ1bmN0aW9uKCBlZGdlICl7XG4gICAgICAgIHJldHVybiBjb21wb25lbnQuYW55U2FtZSggZWRnZS5zb3VyY2UoKSApICYmIGNvbXBvbmVudC5hbnlTYW1lKCBlZGdlLnRhcmdldCgpICk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGNvbXBvbmVudC51bmlvbiggY29ubmVjdGVkRWRnZXMgKTtcbiAgICB9KTtcbiAgfVxufSApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVsZXNmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiAgRWxlbWVudHMgYXJlIGRyYXduIGluIGEgc3BlY2lmaWMgb3JkZXIgYmFzZWQgb24gY29tcG91bmQgZGVwdGggKGxvdyB0byBoaWdoKSwgdGhlIGVsZW1lbnQgdHlwZSAobm9kZXMgYWJvdmUgZWRnZXMpLFxuICogIGFuZCB6LWluZGV4IChsb3cgdG8gaGlnaCkuICBUaGVzZSBzdHlsZXMgYWZmZWN0IGhvdyB0aGlzIGFwcGxpZXM6XG4gKlxuICogIHotY29tcG91bmQtZGVwdGg6IE1heSBiZSBgYm90dG9tIHwgb3JwaGFuIHwgYXV0byB8IHRvcGAuICBUaGUgZmlyc3QgZHJhd24gaXMgYGJvdHRvbWAsIHRoZW4gYG9ycGhhbmAgd2hpY2ggaXMgdGhlXG4gKiAgICAgIHNhbWUgZGVwdGggYXMgdGhlIHJvb3Qgb2YgdGhlIGNvbXBvdW5kIGdyYXBoLCBmb2xsb3dlZCBieSB0aGUgZGVmYXVsdCB2YWx1ZSBgYXV0b2Agd2hpY2ggZHJhd3MgaW4gb3JkZXIgZnJvbVxuICogICAgICByb290IHRvIGxlYXZlcyBvZiB0aGUgY29tcG91bmQgZ3JhcGguICBUaGUgbGFzdCBkcmF3biBpcyBgdG9wYC5cbiAqICB6LWluZGV4LWNvbXBhcmU6IE1heSBiZSBgYXV0byB8IG1hbnVhbGAuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgYXV0b2Agd2hpY2ggYWx3YXlzIGRyYXdzIGVkZ2VzIHVuZGVyIG5vZGVzLlxuICogICAgICBgbWFudWFsYCBpZ25vcmVzIHRoaXMgY29udmVudGlvbiBhbmQgZHJhd3MgYmFzZWQgb24gdGhlIGB6LWluZGV4YCB2YWx1ZSBzZXR0aW5nLlxuICogIHotaW5kZXg6IEFuIGludGVnZXIgdmFsdWUgdGhhdCBhZmZlY3RzIHRoZSByZWxhdGl2ZSBkcmF3IG9yZGVyIG9mIGVsZW1lbnRzLiAgSW4gZ2VuZXJhbCwgYW4gZWxlbWVudCB3aXRoIGEgaGlnaGVyXG4gKiAgICAgIGB6LWluZGV4YCB3aWxsIGJlIGRyYXduIG9uIHRvcCBvZiBhbiBlbGVtZW50IHdpdGggYSBsb3dlciBgei1pbmRleGAuXG4gKi9cbnZhciB6SW5kZXhTb3J0ID0gZnVuY3Rpb24oIGEsIGIgKXtcbiAgdmFyIGN5ID0gYS5jeSgpO1xuICB2YXIgaGFzQ29tcG91bmROb2RlcyA9IGN5Lmhhc0NvbXBvdW5kTm9kZXMoKTtcblxuICBmdW5jdGlvbiBnZXREZXB0aChlbGUpe1xuICAgIHZhciBzdHlsZSA9IGVsZS5wc3R5bGUoICd6LWNvbXBvdW5kLWRlcHRoJyApO1xuICAgIGlmICggc3R5bGUudmFsdWUgPT09ICdhdXRvJyApe1xuICAgICAgcmV0dXJuIGhhc0NvbXBvdW5kTm9kZXMgPyBlbGUuekRlcHRoKCkgOiAwXG4gICAgfSBlbHNlIGlmICggc3R5bGUudmFsdWUgPT09ICdib3R0b20nICl7XG4gICAgICByZXR1cm4gLTFcbiAgICB9IGVsc2UgaWYgKCBzdHlsZS52YWx1ZSA9PT0gJ3RvcCcgKXtcbiAgICAgIHJldHVybiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuICAgIH1cbiAgICAvLyAnb3JwaGFuJ1xuICAgIHJldHVybiAwXG4gIH1cbiAgdmFyIGRlcHRoRGlmZiA9IGdldERlcHRoKGEpIC0gZ2V0RGVwdGgoYik7XG4gIGlmICggZGVwdGhEaWZmICE9PSAwICl7XG4gICAgcmV0dXJuIGRlcHRoRGlmZlxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RWxlRGVwdGgoZWxlKXtcbiAgICB2YXIgc3R5bGUgPSBlbGUucHN0eWxlKCAnei1pbmRleC1jb21wYXJlJyApO1xuICAgIGlmICggc3R5bGUudmFsdWUgPT09ICdhdXRvJyApe1xuICAgICAgcmV0dXJuIGVsZS5pc05vZGUoKSA/IDEgOiAwXG4gICAgfVxuICAgIC8vICdtYW51YWwnXG4gICAgcmV0dXJuIDBcbiAgfVxuICB2YXIgZWxlRGlmZiA9IGdldEVsZURlcHRoKGEpIC0gZ2V0RWxlRGVwdGgoYik7XG4gIGlmICggZWxlRGlmZiAhPT0gMCApe1xuICAgIHJldHVybiBlbGVEaWZmXG4gIH1cblxuICB2YXIgekRpZmYgPSBhLnBzdHlsZSggJ3otaW5kZXgnICkudmFsdWUgLSBiLnBzdHlsZSggJ3otaW5kZXgnICkudmFsdWU7XG4gIGlmICggekRpZmYgIT09IDAgKXtcbiAgICByZXR1cm4gekRpZmZcbiAgfVxuICAvLyBjb21wYXJlIGluZGljZXMgaW4gdGhlIGNvcmUgKG9yZGVyIGFkZGVkIHRvIGdyYXBoIHcvIGxhc3Qgb24gdG9wKVxuICByZXR1cm4gYS5wb29sSW5kZXgoKSAtIGIucG9vbEluZGV4KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHpJbmRleFNvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpcyA9IHJlcXVpcmUoICcuLi9pcycgKTtcbnZhciB1dGlsID0gcmVxdWlyZSggJy4uL3V0aWwnICk7XG52YXIgQ29sbGVjdGlvbiA9IHJlcXVpcmUoICcuLi9jb2xsZWN0aW9uJyApO1xudmFyIEVsZW1lbnQgPSByZXF1aXJlKCAnLi4vY29sbGVjdGlvbi9lbGVtZW50JyApO1xuXG52YXIgY29yZWZuID0ge1xuICBhZGQ6IGZ1bmN0aW9uKCBvcHRzICl7XG5cbiAgICB2YXIgZWxlbWVudHM7XG4gICAgdmFyIGN5ID0gdGhpcztcblxuICAgIC8vIGFkZCB0aGUgZWxlbWVudHNcbiAgICBpZiggaXMuZWxlbWVudE9yQ29sbGVjdGlvbiggb3B0cyApICl7XG4gICAgICB2YXIgZWxlcyA9IG9wdHM7XG5cbiAgICAgIGlmKCBlbGVzLl9wcml2YXRlLmN5ID09PSBjeSApeyAvLyBzYW1lIGluc3RhbmNlID0+IGp1c3QgcmVzdG9yZVxuICAgICAgICBlbGVtZW50cyA9IGVsZXMucmVzdG9yZSgpO1xuXG4gICAgICB9IGVsc2UgeyAvLyBvdGhlcndpc2UsIGNvcHkgZnJvbSBqc29uXG4gICAgICAgIHZhciBqc29ucyA9IFtdO1xuXG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgICAgIHZhciBlbGUgPSBlbGVzWyBpIF07XG4gICAgICAgICAganNvbnMucHVzaCggZWxlLmpzb24oKSApO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudHMgPSBuZXcgQ29sbGVjdGlvbiggY3ksIGpzb25zICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc3BlY2lmeSBhbiBhcnJheSBvZiBvcHRpb25zXG4gICAgZWxzZSBpZiggaXMuYXJyYXkoIG9wdHMgKSApe1xuICAgICAgdmFyIGpzb25zID0gb3B0cztcblxuICAgICAgZWxlbWVudHMgPSBuZXcgQ29sbGVjdGlvbiggY3ksIGpzb25zICk7XG4gICAgfVxuXG4gICAgLy8gc3BlY2lmeSB2aWEgb3B0cy5ub2RlcyBhbmQgb3B0cy5lZGdlc1xuICAgIGVsc2UgaWYoIGlzLnBsYWluT2JqZWN0KCBvcHRzICkgJiYgKGlzLmFycmF5KCBvcHRzLm5vZGVzICkgfHwgaXMuYXJyYXkoIG9wdHMuZWRnZXMgKSkgKXtcbiAgICAgIHZhciBlbGVzQnlHcm91cCA9IG9wdHM7XG4gICAgICB2YXIganNvbnMgPSBbXTtcblxuICAgICAgdmFyIGdycyA9IFsgJ25vZGVzJywgJ2VkZ2VzJyBdO1xuICAgICAgZm9yKCB2YXIgaSA9IDAsIGlsID0gZ3JzLmxlbmd0aDsgaSA8IGlsOyBpKysgKXtcbiAgICAgICAgdmFyIGdyb3VwID0gZ3JzWyBpIF07XG4gICAgICAgIHZhciBlbGVzQXJyYXkgPSBlbGVzQnlHcm91cFsgZ3JvdXAgXTtcblxuICAgICAgICBpZiggaXMuYXJyYXkoIGVsZXNBcnJheSApICl7XG5cbiAgICAgICAgICBmb3IoIHZhciBqID0gMCwgamwgPSBlbGVzQXJyYXkubGVuZ3RoOyBqIDwgamw7IGorKyApe1xuICAgICAgICAgICAgdmFyIGpzb24gPSB1dGlsLmV4dGVuZCggeyBncm91cDogZ3JvdXAgfSwgZWxlc0FycmF5WyBqIF0gKTtcblxuICAgICAgICAgICAganNvbnMucHVzaCgganNvbiApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlbGVtZW50cyA9IG5ldyBDb2xsZWN0aW9uKCBjeSwganNvbnMgKTtcbiAgICB9XG5cbiAgICAvLyBzcGVjaWZ5IG9wdGlvbnMgZm9yIG9uZSBlbGVtZW50XG4gICAgZWxzZSB7XG4gICAgICB2YXIganNvbiA9IG9wdHM7XG4gICAgICBlbGVtZW50cyA9IChuZXcgRWxlbWVudCggY3ksIGpzb24gKSkuY29sbGVjdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50cztcbiAgfSxcblxuICByZW1vdmU6IGZ1bmN0aW9uKCBjb2xsZWN0aW9uICl7XG4gICAgaWYoIGlzLmVsZW1lbnRPckNvbGxlY3Rpb24oIGNvbGxlY3Rpb24gKSApe1xuICAgICAgLy8gYWxyZWFkeSBoYXZlIHJpZ2h0IHJlZlxuICAgIH0gZWxzZSBpZiggaXMuc3RyaW5nKCBjb2xsZWN0aW9uICkgKXtcbiAgICAgIHZhciBzZWxlY3RvciA9IGNvbGxlY3Rpb247XG4gICAgICBjb2xsZWN0aW9uID0gdGhpcy4kKCBzZWxlY3RvciApO1xuICAgIH1cblxuICAgIHJldHVybiBjb2xsZWN0aW9uLnJlbW92ZSgpO1xuICB9LFxuXG4gIGxvYWQ6IGZ1bmN0aW9uKCBlbGVtZW50cywgb25sb2FkLCBvbmRvbmUgKXtcbiAgICB2YXIgY3kgPSB0aGlzO1xuXG4gICAgY3kubm90aWZpY2F0aW9ucyggZmFsc2UgKTtcblxuICAgIC8vIHJlbW92ZSBvbGQgZWxlbWVudHNcbiAgICB2YXIgb2xkRWxlcyA9IGN5Lm11dGFibGVFbGVtZW50cygpO1xuICAgIGlmKCBvbGRFbGVzLmxlbmd0aCA+IDAgKXtcbiAgICAgIG9sZEVsZXMucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgaWYoIGVsZW1lbnRzICE9IG51bGwgKXtcbiAgICAgIGlmKCBpcy5wbGFpbk9iamVjdCggZWxlbWVudHMgKSB8fCBpcy5hcnJheSggZWxlbWVudHMgKSApe1xuICAgICAgICBjeS5hZGQoIGVsZW1lbnRzICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY3kub25lKCAnbGF5b3V0cmVhZHknLCBmdW5jdGlvbiggZSApe1xuICAgICAgY3kubm90aWZpY2F0aW9ucyggdHJ1ZSApO1xuICAgICAgY3kudHJpZ2dlciggZSApOyAvLyB3ZSBtaXNzZWQgdGhpcyBldmVudCBieSB0dXJuaW5nIG5vdGlmaWNhdGlvbnMgb2ZmLCBzbyBwYXNzIGl0IG9uXG5cbiAgICAgIGN5Lm5vdGlmeSgge1xuICAgICAgICB0eXBlOiAnbG9hZCcsXG4gICAgICAgIGVsZXM6IGN5Lm11dGFibGVFbGVtZW50cygpXG4gICAgICB9ICk7XG5cbiAgICAgIGN5Lm9uZSggJ2xvYWQnLCBvbmxvYWQgKTtcbiAgICAgIGN5LnRyaWdnZXIoICdsb2FkJyApO1xuICAgIH0gKS5vbmUoICdsYXlvdXRzdG9wJywgZnVuY3Rpb24oKXtcbiAgICAgIGN5Lm9uZSggJ2RvbmUnLCBvbmRvbmUgKTtcbiAgICAgIGN5LnRyaWdnZXIoICdkb25lJyApO1xuICAgIH0gKTtcblxuICAgIHZhciBsYXlvdXRPcHRzID0gdXRpbC5leHRlbmQoIHt9LCBjeS5fcHJpdmF0ZS5vcHRpb25zLmxheW91dCApO1xuICAgIGxheW91dE9wdHMuZWxlcyA9IGN5LmVsZW1lbnRzKCk7XG5cbiAgICBjeS5sYXlvdXQoIGxheW91dE9wdHMgKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoICcuLi9kZWZpbmUnICk7XG52YXIgdXRpbCA9IHJlcXVpcmUoICcuLi91dGlsJyApO1xudmFyIGlzID0gcmVxdWlyZSggJy4uL2lzJyApO1xuXG52YXIgY29yZWZuID0gKHtcblxuICAvLyBwdWxsIGluIGFuaW1hdGlvbiBmdW5jdGlvbnNcbiAgYW5pbWF0ZTogZGVmaW5lLmFuaW1hdGUoKSxcbiAgYW5pbWF0aW9uOiBkZWZpbmUuYW5pbWF0aW9uKCksXG4gIGFuaW1hdGVkOiBkZWZpbmUuYW5pbWF0ZWQoKSxcbiAgY2xlYXJRdWV1ZTogZGVmaW5lLmNsZWFyUXVldWUoKSxcbiAgZGVsYXk6IGRlZmluZS5kZWxheSgpLFxuICBkZWxheUFuaW1hdGlvbjogZGVmaW5lLmRlbGF5QW5pbWF0aW9uKCksXG4gIHN0b3A6IGRlZmluZS5zdG9wKCksXG5cbiAgYWRkVG9BbmltYXRpb25Qb29sOiBmdW5jdGlvbiggZWxlcyApe1xuICAgIHZhciBjeSA9IHRoaXM7XG5cbiAgICBpZiggIWN5LnN0eWxlRW5hYmxlZCgpICl7IHJldHVybjsgfSAvLyBzYXZlIGN5Y2xlcyB3aGVuIG5vIHN0eWxlIHVzZWRcblxuICAgIGN5Ll9wcml2YXRlLmFuaUVsZXMubWVyZ2UoIGVsZXMgKTtcbiAgfSxcblxuICBzdG9wQW5pbWF0aW9uTG9vcDogZnVuY3Rpb24oKXtcbiAgICB0aGlzLl9wcml2YXRlLmFuaW1hdGlvbnNSdW5uaW5nID0gZmFsc2U7XG4gIH0sXG5cbiAgc3RhcnRBbmltYXRpb25Mb29wOiBmdW5jdGlvbigpe1xuICAgIHZhciBjeSA9IHRoaXM7XG5cbiAgICBjeS5fcHJpdmF0ZS5hbmltYXRpb25zUnVubmluZyA9IHRydWU7XG5cbiAgICBpZiggIWN5LnN0eWxlRW5hYmxlZCgpICl7IHJldHVybjsgfSAvLyBzYXZlIGN5Y2xlcyB3aGVuIG5vIHN0eWxlIHVzZWRcblxuICAgIC8vIE5CIHRoZSBhbmltYXRpb24gbG9vcCB3aWxsIGV4ZWMgaW4gaGVhZGxlc3MgZW52aXJvbm1lbnRzIGlmIHN0eWxlIGVuYWJsZWRcbiAgICAvLyBhbmQgZXhwbGljaXQgY3kuZGVzdHJveSgpIGlzIG5lY2Vzc2FyeSB0byBzdG9wIHRoZSBsb29wXG5cbiAgICBmdW5jdGlvbiBnbG9iYWxBbmltYXRpb25TdGVwKCl7XG4gICAgICBpZiggIWN5Ll9wcml2YXRlLmFuaW1hdGlvbnNSdW5uaW5nICl7IHJldHVybjsgfVxuXG4gICAgICB1dGlsLnJlcXVlc3RBbmltYXRpb25GcmFtZSggZnVuY3Rpb24gYW5pbWF0aW9uU3RlcCggbm93ICl7XG4gICAgICAgIGhhbmRsZUVsZW1lbnRzKCBub3cgKTtcbiAgICAgICAgZ2xvYmFsQW5pbWF0aW9uU3RlcCgpO1xuICAgICAgfSApO1xuICAgIH1cblxuICAgIHZhciByZW5kZXJlciA9IGN5LnJlbmRlcmVyKCk7XG5cbiAgICBpZiggcmVuZGVyZXIgJiYgcmVuZGVyZXIuYmVmb3JlUmVuZGVyICl7IC8vIGxldCB0aGUgcmVuZGVyZXIgc2NoZWR1bGUgYW5pbWF0aW9uc1xuICAgICAgcmVuZGVyZXIuYmVmb3JlUmVuZGVyKCBmdW5jdGlvbiByZW5kZXJlckFuaW1hdGlvblN0ZXAoIHdpbGxEcmF3LCBub3cgKXtcbiAgICAgICAgaGFuZGxlRWxlbWVudHMoIG5vdyApO1xuICAgICAgfSwgcmVuZGVyZXIuYmVmb3JlUmVuZGVyUHJpb3JpdGllcy5hbmltYXRpb25zICk7XG4gICAgfSBlbHNlIHsgLy8gbWFuYWdlIHRoZSBhbmltYXRpb24gbG9vcCBvdXJzZWx2ZXNcbiAgICAgIGdsb2JhbEFuaW1hdGlvblN0ZXAoKTsgLy8gZmlyc3QgY2FsbFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZUVsZW1lbnRzKCBub3cgKXtcbiAgICAgIHZhciBlbGVzID0gY3kuX3ByaXZhdGUuYW5pRWxlcztcbiAgICAgIHZhciBkb25lRWxlcyA9IFtdO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVFbGVtZW50KCBlbGUsIGlzQ29yZSApe1xuICAgICAgICB2YXIgX3AgPSBlbGUuX3ByaXZhdGU7XG4gICAgICAgIHZhciBjdXJyZW50ID0gX3AuYW5pbWF0aW9uLmN1cnJlbnQ7XG4gICAgICAgIHZhciBxdWV1ZSA9IF9wLmFuaW1hdGlvbi5xdWV1ZTtcbiAgICAgICAgdmFyIHJhbkFuaXMgPSBmYWxzZTtcblxuICAgICAgICAvLyBjYW5jZWwgYWxsIGFuaW1hdGlvbnMgb24gZGlzcGxheTpub25lIGVsZVxuICAgICAgICBpZiggIWlzQ29yZSAmJiBlbGUucHN0eWxlKCdkaXNwbGF5JykudmFsdWUgPT09ICdub25lJyApe1xuICAgICAgICAgIC8vIHB1dCBhbGwgY3VycmVudCBhbmQgcXVldWUgYW5pbWF0aW9ucyBpbiB0aGlzIHRpY2sncyBjdXJyZW50IGxpc3RcbiAgICAgICAgICAvLyBhbmQgZW1wdHkgdGhlIGxpc3RzIGZvciB0aGUgZWxlbWVudFxuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnNwbGljZSggMCwgY3VycmVudC5sZW5ndGggKS5jb25jYXQoIHF1ZXVlLnNwbGljZSggMCwgcXVldWUubGVuZ3RoICkgKTtcblxuICAgICAgICAgIC8vIHN0b3AgYWxsIGFuaW1hdGlvbnNcbiAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGN1cnJlbnQubGVuZ3RoOyBpKysgKXsgY3VycmVudFtpXS5zdG9wKCk7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vdGhpbmcgY3VycmVudGx5IGFuaW1hdGluZywgZ2V0IHNvbWV0aGluZyBmcm9tIHRoZSBxdWV1ZVxuICAgICAgICBpZiggY3VycmVudC5sZW5ndGggPT09IDAgKXtcbiAgICAgICAgICB2YXIgbmV4dCA9IHF1ZXVlLnNoaWZ0KCk7XG5cbiAgICAgICAgICBpZiggbmV4dCApe1xuICAgICAgICAgICAgY3VycmVudC5wdXNoKCBuZXh0ICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBjYWxsYmFja3MgKXtcbiAgICAgICAgICBmb3IoIHZhciBqID0gY2FsbGJhY2tzLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tICl7XG4gICAgICAgICAgICB2YXIgY2IgPSBjYWxsYmFja3NbIGogXTtcblxuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKCAwLCBjYWxsYmFja3MubGVuZ3RoICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3RlcCBhbmQgcmVtb3ZlIGlmIGRvbmVcbiAgICAgICAgZm9yKCB2YXIgaSA9IGN1cnJlbnQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKXtcbiAgICAgICAgICB2YXIgYW5pID0gY3VycmVudFsgaSBdO1xuICAgICAgICAgIHZhciBhbmlfcCA9IGFuaS5fcHJpdmF0ZTtcblxuICAgICAgICAgIGlmKCBhbmlfcC5zdG9wcGVkICl7XG4gICAgICAgICAgICBjdXJyZW50LnNwbGljZSggaSwgMSApO1xuXG4gICAgICAgICAgICBhbmlfcC5ob29rZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGFuaV9wLnBsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGFuaV9wLnN0YXJ0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgY2FsbGJhY2tzKCBhbmlfcC5mcmFtZXMgKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoICFhbmlfcC5wbGF5aW5nICYmICFhbmlfcC5hcHBseWluZyApeyBjb250aW51ZTsgfVxuXG4gICAgICAgICAgLy8gYW4gYXBwbHkoKSB3aGlsZSBwbGF5aW5nIHNob3VsZG4ndCBkbyBhbnl0aGluZ1xuICAgICAgICAgIGlmKCBhbmlfcC5wbGF5aW5nICYmIGFuaV9wLmFwcGx5aW5nICl7XG4gICAgICAgICAgICBhbmlfcC5hcHBseWluZyA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKCAhYW5pX3Auc3RhcnRlZCApe1xuICAgICAgICAgICAgc3RhcnRBbmltYXRpb24oIGVsZSwgYW5pLCBub3cgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdGVwKCBlbGUsIGFuaSwgbm93LCBpc0NvcmUgKTtcblxuICAgICAgICAgIGlmKCBpcy5mbiggYW5pX3Auc3RlcCApICl7XG4gICAgICAgICAgICBhbmlfcC5zdGVwLmNhbGwoIGVsZSwgbm93ICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoIGFuaV9wLmFwcGx5aW5nICl7XG4gICAgICAgICAgICBhbmlfcC5hcHBseWluZyA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhbGxiYWNrcyggYW5pX3AuZnJhbWVzICk7XG5cbiAgICAgICAgICBpZiggYW5pLmNvbXBsZXRlZCgpICl7XG4gICAgICAgICAgICBjdXJyZW50LnNwbGljZSggaSwgMSApO1xuXG4gICAgICAgICAgICBhbmlfcC5ob29rZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGFuaV9wLnBsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGFuaV9wLnN0YXJ0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgY2FsbGJhY2tzKCBhbmlfcC5jb21wbGV0ZXMgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByYW5BbmlzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCAhaXNDb3JlICYmIGN1cnJlbnQubGVuZ3RoID09PSAwICYmIHF1ZXVlLmxlbmd0aCA9PT0gMCApe1xuICAgICAgICAgIGRvbmVFbGVzLnB1c2goIGVsZSApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJhbkFuaXM7XG4gICAgICB9IC8vIGhhbmRsZUVsZW1lbnRcblxuICAgICAgLy8gaGFuZGxlIGFsbCBlbGVzXG4gICAgICB2YXIgcmFuRWxlQW5pID0gZmFsc2U7XG4gICAgICBmb3IoIHZhciBlID0gMDsgZSA8IGVsZXMubGVuZ3RoOyBlKysgKXtcbiAgICAgICAgdmFyIGVsZSA9IGVsZXNbIGUgXTtcbiAgICAgICAgdmFyIGhhbmRsZWRUaGlzRWxlID0gaGFuZGxlRWxlbWVudCggZWxlICk7XG5cbiAgICAgICAgcmFuRWxlQW5pID0gcmFuRWxlQW5pIHx8IGhhbmRsZWRUaGlzRWxlO1xuICAgICAgfSAvLyBlYWNoIGVsZW1lbnRcblxuICAgICAgdmFyIHJhbkNvcmVBbmkgPSBoYW5kbGVFbGVtZW50KCBjeSwgdHJ1ZSApO1xuXG4gICAgICAvLyBub3RpZnkgcmVuZGVyZXJcbiAgICAgIGlmKCByYW5FbGVBbmkgfHwgcmFuQ29yZUFuaSApe1xuICAgICAgICBpZiggZWxlcy5sZW5ndGggPiAwICl7XG4gICAgICAgICAgdmFyIHVwZGF0ZWRFbGVzID0gZWxlcy51cGRhdGVDb21wb3VuZEJvdW5kcygpLnNwYXduU2VsZigpLm1lcmdlKCBlbGVzICk7XG5cbiAgICAgICAgICBjeS5ub3RpZnkoe1xuICAgICAgICAgICAgdHlwZTogJ2RyYXcnLFxuICAgICAgICAgICAgZWxlczogdXBkYXRlZEVsZXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjeS5ub3RpZnkoe1xuICAgICAgICAgICAgdHlwZTogJ2RyYXcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gcmVtb3ZlIGVsZW1lbnRzIGZyb20gbGlzdCBvZiBjdXJyZW50bHkgYW5pbWF0aW5nIGlmIGl0cyBxdWV1ZXMgYXJlIGVtcHR5XG4gICAgICBlbGVzLnVubWVyZ2UoIGRvbmVFbGVzICk7XG5cbiAgICAgIGN5LnRyaWdnZXIoJ3N0ZXAnKTtcblxuICAgIH0gLy8gaGFuZGxlRWxlbWVudHNcblxuICAgIGZ1bmN0aW9uIHN0YXJ0QW5pbWF0aW9uKCBzZWxmLCBhbmksIG5vdyApe1xuICAgICAgdmFyIGlzQ29yZSA9IGlzLmNvcmUoIHNlbGYgKTtcbiAgICAgIHZhciBpc0VsZXMgPSAhaXNDb3JlO1xuICAgICAgdmFyIGVsZSA9IHNlbGY7XG4gICAgICB2YXIgc3R5bGUgPSBjeS5fcHJpdmF0ZS5zdHlsZTtcbiAgICAgIHZhciBhbmlfcCA9IGFuaS5fcHJpdmF0ZTtcblxuICAgICAgaWYoIGlzRWxlcyApe1xuICAgICAgICB2YXIgcG9zID0gZWxlLl9wcml2YXRlLnBvc2l0aW9uO1xuXG4gICAgICAgIGFuaV9wLnN0YXJ0UG9zaXRpb24gPSBhbmlfcC5zdGFydFBvc2l0aW9uIHx8IHtcbiAgICAgICAgICB4OiBwb3MueCxcbiAgICAgICAgICB5OiBwb3MueVxuICAgICAgICB9O1xuXG4gICAgICAgIGFuaV9wLnN0YXJ0U3R5bGUgPSBhbmlfcC5zdGFydFN0eWxlIHx8IHN0eWxlLmdldEFuaW1hdGlvblN0YXJ0U3R5bGUoIGVsZSwgYW5pX3Auc3R5bGUgKTtcbiAgICAgIH1cblxuICAgICAgaWYoIGlzQ29yZSApe1xuICAgICAgICB2YXIgcGFuID0gY3kuX3ByaXZhdGUucGFuO1xuXG4gICAgICAgIGFuaV9wLnN0YXJ0UGFuID0gYW5pX3Auc3RhcnRQYW4gfHwge1xuICAgICAgICAgIHg6IHBhbi54LFxuICAgICAgICAgIHk6IHBhbi55XG4gICAgICAgIH07XG5cbiAgICAgICAgYW5pX3Auc3RhcnRab29tID0gYW5pX3Auc3RhcnRab29tICE9IG51bGwgPyBhbmlfcC5zdGFydFpvb20gOiBjeS5fcHJpdmF0ZS56b29tO1xuICAgICAgfVxuXG4gICAgICBhbmlfcC5zdGFydGVkID0gdHJ1ZTtcbiAgICAgIGFuaV9wLnN0YXJ0VGltZSA9IG5vdyAtIGFuaV9wLnByb2dyZXNzICogYW5pX3AuZHVyYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RlcCggc2VsZiwgYW5pLCBub3csIGlzQ29yZSApe1xuICAgICAgdmFyIHN0eWxlID0gY3kuX3ByaXZhdGUuc3R5bGU7XG4gICAgICB2YXIgaXNFbGVzID0gIWlzQ29yZTtcbiAgICAgIHZhciBfcCA9IHNlbGYuX3ByaXZhdGU7XG4gICAgICB2YXIgYW5pX3AgPSBhbmkuX3ByaXZhdGU7XG4gICAgICB2YXIgcEVhc2luZyA9IGFuaV9wLmVhc2luZztcbiAgICAgIHZhciBzdGFydFRpbWUgPSBhbmlfcC5zdGFydFRpbWU7XG5cbiAgICAgIGlmKCAhYW5pX3AuZWFzaW5nSW1wbCApe1xuXG4gICAgICAgIGlmKCBwRWFzaW5nID09IG51bGwgKXsgLy8gdXNlIGRlZmF1bHRcbiAgICAgICAgICBhbmlfcC5lYXNpbmdJbXBsID0gZWFzaW5nc1sgJ2xpbmVhcicgXTtcblxuICAgICAgICB9IGVsc2UgeyAvLyB0aGVuIGRlZmluZSB3LyBuYW1lXG4gICAgICAgICAgdmFyIGVhc2luZ1ZhbHM7XG5cbiAgICAgICAgICBpZiggaXMuc3RyaW5nKCBwRWFzaW5nICkgKXtcbiAgICAgICAgICAgIHZhciBlYXNpbmdQcm9wID0gc3R5bGUucGFyc2UoICd0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbicsIHBFYXNpbmcgKTtcblxuICAgICAgICAgICAgZWFzaW5nVmFscyA9IGVhc2luZ1Byb3AudmFsdWU7XG5cbiAgICAgICAgICB9IGVsc2UgeyAvLyB0aGVuIGFzc3VtZSBwcmVwYXJzZWQgYXJyYXlcbiAgICAgICAgICAgIGVhc2luZ1ZhbHMgPSBwRWFzaW5nO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBuYW1lLCBhcmdzO1xuXG4gICAgICAgICAgaWYoIGlzLnN0cmluZyggZWFzaW5nVmFscyApICl7XG4gICAgICAgICAgICBuYW1lID0gZWFzaW5nVmFscztcbiAgICAgICAgICAgIGFyZ3MgPSBbXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmFtZSA9IGVhc2luZ1ZhbHNbMV07XG4gICAgICAgICAgICBhcmdzID0gZWFzaW5nVmFscy5zbGljZSggMiApLm1hcCggZnVuY3Rpb24oIG4gKXsgcmV0dXJuICtuOyB9ICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoIGFyZ3MubGVuZ3RoID4gMCApeyAvLyBjcmVhdGUgd2l0aCBhcmdzXG4gICAgICAgICAgICBpZiggbmFtZSA9PT0gJ3NwcmluZycgKXtcbiAgICAgICAgICAgICAgYXJncy5wdXNoKCBhbmlfcC5kdXJhdGlvbiApOyAvLyBuZWVkIGR1cmF0aW9uIHRvIGdlbmVyYXRlIHNwcmluZ1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhbmlfcC5lYXNpbmdJbXBsID0gZWFzaW5nc1sgbmFtZSBdLmFwcGx5KCBudWxsLCBhcmdzICk7XG4gICAgICAgICAgfSBlbHNlIHsgLy8gc3RhdGljIGltcGwgYnkgbmFtZVxuICAgICAgICAgICAgYW5pX3AuZWFzaW5nSW1wbCA9IGVhc2luZ3NbIG5hbWUgXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICB2YXIgZWFzaW5nID0gYW5pX3AuZWFzaW5nSW1wbDtcbiAgICAgIHZhciBwZXJjZW50O1xuXG4gICAgICBpZiggYW5pX3AuZHVyYXRpb24gPT09IDAgKXtcbiAgICAgICAgcGVyY2VudCA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZXJjZW50ID0gKG5vdyAtIHN0YXJ0VGltZSkgLyBhbmlfcC5kdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYoIGFuaV9wLmFwcGx5aW5nICl7XG4gICAgICAgIHBlcmNlbnQgPSBhbmlfcC5wcm9ncmVzcztcbiAgICAgIH1cblxuICAgICAgaWYoIHBlcmNlbnQgPCAwICl7XG4gICAgICAgIHBlcmNlbnQgPSAwO1xuICAgICAgfSBlbHNlIGlmKCBwZXJjZW50ID4gMSApe1xuICAgICAgICBwZXJjZW50ID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYoIGFuaV9wLmRlbGF5ID09IG51bGwgKXsgLy8gdGhlbiB1cGRhdGVcblxuICAgICAgICB2YXIgc3RhcnRQb3MgPSBhbmlfcC5zdGFydFBvc2l0aW9uO1xuICAgICAgICB2YXIgZW5kUG9zID0gYW5pX3AucG9zaXRpb247XG4gICAgICAgIHZhciBwb3MgPSBfcC5wb3NpdGlvbjtcbiAgICAgICAgaWYoIGVuZFBvcyAmJiBpc0VsZXMgKXtcbiAgICAgICAgICBpZiggdmFsaWQoIHN0YXJ0UG9zLngsIGVuZFBvcy54ICkgKXtcbiAgICAgICAgICAgIHBvcy54ID0gZWFzZSggc3RhcnRQb3MueCwgZW5kUG9zLngsIHBlcmNlbnQsIGVhc2luZyApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKCB2YWxpZCggc3RhcnRQb3MueSwgZW5kUG9zLnkgKSApe1xuICAgICAgICAgICAgcG9zLnkgPSBlYXNlKCBzdGFydFBvcy55LCBlbmRQb3MueSwgcGVyY2VudCwgZWFzaW5nICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdwb3NpdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0UGFuID0gYW5pX3Auc3RhcnRQYW47XG4gICAgICAgIHZhciBlbmRQYW4gPSBhbmlfcC5wYW47XG4gICAgICAgIHZhciBwYW4gPSBfcC5wYW47XG4gICAgICAgIHZhciBhbmltYXRpbmdQYW4gPSBlbmRQYW4gIT0gbnVsbCAmJiBpc0NvcmU7XG4gICAgICAgIGlmKCBhbmltYXRpbmdQYW4gKXtcbiAgICAgICAgICBpZiggdmFsaWQoIHN0YXJ0UGFuLngsIGVuZFBhbi54ICkgKXtcbiAgICAgICAgICAgIHBhbi54ID0gZWFzZSggc3RhcnRQYW4ueCwgZW5kUGFuLngsIHBlcmNlbnQsIGVhc2luZyApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKCB2YWxpZCggc3RhcnRQYW4ueSwgZW5kUGFuLnkgKSApe1xuICAgICAgICAgICAgcGFuLnkgPSBlYXNlKCBzdGFydFBhbi55LCBlbmRQYW4ueSwgcGVyY2VudCwgZWFzaW5nICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCAncGFuJyApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0Wm9vbSA9IGFuaV9wLnN0YXJ0Wm9vbTtcbiAgICAgICAgdmFyIGVuZFpvb20gPSBhbmlfcC56b29tO1xuICAgICAgICB2YXIgYW5pbWF0aW5nWm9vbSA9IGVuZFpvb20gIT0gbnVsbCAmJiBpc0NvcmU7XG4gICAgICAgIGlmKCBhbmltYXRpbmdab29tICl7XG4gICAgICAgICAgaWYoIHZhbGlkKCBzdGFydFpvb20sIGVuZFpvb20gKSApe1xuICAgICAgICAgICAgX3Auem9vbSA9IGVhc2UoIHN0YXJ0Wm9vbSwgZW5kWm9vbSwgcGVyY2VudCwgZWFzaW5nICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCAnem9vbScgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCBhbmltYXRpbmdQYW4gfHwgYW5pbWF0aW5nWm9vbSApe1xuICAgICAgICAgIHNlbGYudHJpZ2dlciggJ3ZpZXdwb3J0JyApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb3BzID0gYW5pX3Auc3R5bGU7XG4gICAgICAgIGlmKCBwcm9wcyAmJiBwcm9wcy5sZW5ndGggPiAwICYmIGlzRWxlcyApe1xuICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgICAgIHZhciBwcm9wID0gcHJvcHNbIGkgXTtcbiAgICAgICAgICAgIHZhciBuYW1lID0gcHJvcC5uYW1lO1xuICAgICAgICAgICAgdmFyIGVuZCA9IHByb3A7XG5cbiAgICAgICAgICAgIHZhciBzdGFydCA9IGFuaV9wLnN0YXJ0U3R5bGVbIG5hbWUgXTtcbiAgICAgICAgICAgIHZhciBlYXNlZFZhbCA9IGVhc2UoIHN0YXJ0LCBlbmQsIHBlcmNlbnQsIGVhc2luZyApO1xuXG4gICAgICAgICAgICBzdHlsZS5vdmVycmlkZUJ5cGFzcyggc2VsZiwgbmFtZSwgZWFzZWRWYWwgKTtcbiAgICAgICAgICB9IC8vIGZvciBwcm9wc1xuXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdzdHlsZScpO1xuXG4gICAgICAgIH0gLy8gaWZcblxuICAgICAgfVxuXG4gICAgICBhbmlfcC5wcm9ncmVzcyA9IHBlcmNlbnQ7XG5cbiAgICAgIHJldHVybiBwZXJjZW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkKCBzdGFydCwgZW5kICl7XG4gICAgICBpZiggc3RhcnQgPT0gbnVsbCB8fCBlbmQgPT0gbnVsbCApe1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmKCBpcy5udW1iZXIoIHN0YXJ0ICkgJiYgaXMubnVtYmVyKCBlbmQgKSApe1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiggKHN0YXJ0KSAmJiAoZW5kKSApe1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGFzc3VtZXMgcDAgPSAwLCBwMyA9IDFcbiAgICBmdW5jdGlvbiBldmFsQ3ViaWNCZXppZXIoIHAxLCBwMiwgdCApe1xuICAgICAgdmFyIG9uZV90ID0gMSAtIHQ7XG4gICAgICB2YXIgdHNxID0gdCAqIHQ7XG5cbiAgICAgIHJldHVybiAoIDMgKiBvbmVfdCAqIG9uZV90ICogdCAqIHAxICkgKyAoIDMgKiBvbmVfdCAqIHRzcSAqIHAyICkgKyB0c3EgKiB0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGN1YmljQmV6aWVyKCBwMSwgcDIgKXtcbiAgICAgIHJldHVybiBmdW5jdGlvbiggc3RhcnQsIGVuZCwgcGVyY2VudCApe1xuICAgICAgICByZXR1cm4gc3RhcnQgKyAoZW5kIC0gc3RhcnQpICogZXZhbEN1YmljQmV6aWVyKCBwMSwgcDIsIHBlcmNlbnQgKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyohIFJ1bmdlLUt1dHRhIHNwcmluZyBwaHlzaWNzIGZ1bmN0aW9uIGdlbmVyYXRvci4gQWRhcHRlZCBmcm9tIEZyYW1lci5qcywgY29weXJpZ2h0IEtvZW4gQm9rLiBNSVQgTGljZW5zZTogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NSVRfTGljZW5zZSAqL1xuICAgIC8qIEdpdmVuIGEgdGVuc2lvbiwgZnJpY3Rpb24sIGFuZCBkdXJhdGlvbiwgYSBzaW11bGF0aW9uIGF0IDYwRlBTIHdpbGwgZmlyc3QgcnVuIHdpdGhvdXQgYSBkZWZpbmVkIGR1cmF0aW9uIGluIG9yZGVyIHRvIGNhbGN1bGF0ZSB0aGUgZnVsbCBwYXRoLiBBIHNlY29uZCBwYXNzXG4gICAgICAgdGhlbiBhZGp1c3RzIHRoZSB0aW1lIGRlbHRhIC0tIHVzaW5nIHRoZSByZWxhdGlvbiBiZXR3ZWVuIGFjdHVhbCB0aW1lIGFuZCBkdXJhdGlvbiAtLSB0byBjYWxjdWxhdGUgdGhlIHBhdGggZm9yIHRoZSBkdXJhdGlvbi1jb25zdHJhaW5lZCBhbmltYXRpb24uICovXG4gICAgdmFyIGdlbmVyYXRlU3ByaW5nUks0ID0gKGZ1bmN0aW9uKCl7XG4gICAgICBmdW5jdGlvbiBzcHJpbmdBY2NlbGVyYXRpb25Gb3JTdGF0ZSggc3RhdGUgKXtcbiAgICAgICAgcmV0dXJuICgtc3RhdGUudGVuc2lvbiAqIHN0YXRlLngpIC0gKHN0YXRlLmZyaWN0aW9uICogc3RhdGUudik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNwcmluZ0V2YWx1YXRlU3RhdGVXaXRoRGVyaXZhdGl2ZSggaW5pdGlhbFN0YXRlLCBkdCwgZGVyaXZhdGl2ZSApe1xuICAgICAgICB2YXIgc3RhdGUgPSB7XG4gICAgICAgICAgeDogaW5pdGlhbFN0YXRlLnggKyBkZXJpdmF0aXZlLmR4ICogZHQsXG4gICAgICAgICAgdjogaW5pdGlhbFN0YXRlLnYgKyBkZXJpdmF0aXZlLmR2ICogZHQsXG4gICAgICAgICAgdGVuc2lvbjogaW5pdGlhbFN0YXRlLnRlbnNpb24sXG4gICAgICAgICAgZnJpY3Rpb246IGluaXRpYWxTdGF0ZS5mcmljdGlvblxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7IGR4OiBzdGF0ZS52LCBkdjogc3ByaW5nQWNjZWxlcmF0aW9uRm9yU3RhdGUoIHN0YXRlICkgfTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc3ByaW5nSW50ZWdyYXRlU3RhdGUoIHN0YXRlLCBkdCApe1xuICAgICAgICB2YXIgYSA9IHtcbiAgICAgICAgICBkeDogc3RhdGUudixcbiAgICAgICAgICBkdjogc3ByaW5nQWNjZWxlcmF0aW9uRm9yU3RhdGUoIHN0YXRlIClcbiAgICAgICAgfSxcbiAgICAgICAgYiA9IHNwcmluZ0V2YWx1YXRlU3RhdGVXaXRoRGVyaXZhdGl2ZSggc3RhdGUsIGR0ICogMC41LCBhICksXG4gICAgICAgIGMgPSBzcHJpbmdFdmFsdWF0ZVN0YXRlV2l0aERlcml2YXRpdmUoIHN0YXRlLCBkdCAqIDAuNSwgYiApLFxuICAgICAgICBkID0gc3ByaW5nRXZhbHVhdGVTdGF0ZVdpdGhEZXJpdmF0aXZlKCBzdGF0ZSwgZHQsIGMgKSxcbiAgICAgICAgZHhkdCA9IDEuMCAvIDYuMCAqIChhLmR4ICsgMi4wICogKGIuZHggKyBjLmR4KSArIGQuZHgpLFxuICAgICAgICBkdmR0ID0gMS4wIC8gNi4wICogKGEuZHYgKyAyLjAgKiAoYi5kdiArIGMuZHYpICsgZC5kdik7XG5cbiAgICAgICAgc3RhdGUueCA9IHN0YXRlLnggKyBkeGR0ICogZHQ7XG4gICAgICAgIHN0YXRlLnYgPSBzdGF0ZS52ICsgZHZkdCAqIGR0O1xuXG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNwcmluZ1JLNEZhY3RvcnkoIHRlbnNpb24sIGZyaWN0aW9uLCBkdXJhdGlvbiApe1xuXG4gICAgICAgIHZhciBpbml0U3RhdGUgPSB7XG4gICAgICAgICAgeDogLTEsXG4gICAgICAgICAgdjogMCxcbiAgICAgICAgICB0ZW5zaW9uOiBudWxsLFxuICAgICAgICAgIGZyaWN0aW9uOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIHBhdGggPSBbMF0sXG4gICAgICAgIHRpbWVfbGFwc2VkID0gMCxcbiAgICAgICAgdG9sZXJhbmNlID0gMSAvIDEwMDAwLFxuICAgICAgICBEVCA9IDE2IC8gMTAwMCxcbiAgICAgICAgaGF2ZV9kdXJhdGlvbiwgZHQsIGxhc3Rfc3RhdGU7XG5cbiAgICAgICAgdGVuc2lvbiA9IHBhcnNlRmxvYXQoIHRlbnNpb24gKSB8fCA1MDA7XG4gICAgICAgIGZyaWN0aW9uID0gcGFyc2VGbG9hdCggZnJpY3Rpb24gKSB8fCAyMDtcbiAgICAgICAgZHVyYXRpb24gPSBkdXJhdGlvbiB8fCBudWxsO1xuXG4gICAgICAgIGluaXRTdGF0ZS50ZW5zaW9uID0gdGVuc2lvbjtcbiAgICAgICAgaW5pdFN0YXRlLmZyaWN0aW9uID0gZnJpY3Rpb247XG5cbiAgICAgICAgaGF2ZV9kdXJhdGlvbiA9IGR1cmF0aW9uICE9PSBudWxsO1xuXG4gICAgICAgIC8qIENhbGN1bGF0ZSB0aGUgYWN0dWFsIHRpbWUgaXQgdGFrZXMgZm9yIHRoaXMgYW5pbWF0aW9uIHRvIGNvbXBsZXRlIHdpdGggdGhlIHByb3ZpZGVkIGNvbmRpdGlvbnMuICovXG4gICAgICAgIGlmKCBoYXZlX2R1cmF0aW9uICl7XG4gICAgICAgICAgLyogUnVuIHRoZSBzaW11bGF0aW9uIHdpdGhvdXQgYSBkdXJhdGlvbi4gKi9cbiAgICAgICAgICB0aW1lX2xhcHNlZCA9IHNwcmluZ1JLNEZhY3RvcnkoIHRlbnNpb24sIGZyaWN0aW9uICk7XG4gICAgICAgICAgLyogQ29tcHV0ZSB0aGUgYWRqdXN0ZWQgdGltZSBkZWx0YS4gKi9cbiAgICAgICAgICBkdCA9IHRpbWVfbGFwc2VkIC8gZHVyYXRpb24gKiBEVDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkdCA9IERUO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUoIHRydWUgKXtcbiAgICAgICAgICAvKiBOZXh0L3N0ZXAgZnVuY3Rpb24gLiovXG4gICAgICAgICAgbGFzdF9zdGF0ZSA9IHNwcmluZ0ludGVncmF0ZVN0YXRlKCBsYXN0X3N0YXRlIHx8IGluaXRTdGF0ZSwgZHQgKTtcbiAgICAgICAgICAvKiBTdG9yZSB0aGUgcG9zaXRpb24uICovXG4gICAgICAgICAgcGF0aC5wdXNoKCAxICsgbGFzdF9zdGF0ZS54ICk7XG4gICAgICAgICAgdGltZV9sYXBzZWQgKz0gMTY7XG4gICAgICAgICAgLyogSWYgdGhlIGNoYW5nZSB0aHJlc2hvbGQgaXMgcmVhY2hlZCwgYnJlYWsuICovXG4gICAgICAgICAgaWYoICEoTWF0aC5hYnMoIGxhc3Rfc3RhdGUueCApID4gdG9sZXJhbmNlICYmIE1hdGguYWJzKCBsYXN0X3N0YXRlLnYgKSA+IHRvbGVyYW5jZSkgKXtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIElmIGR1cmF0aW9uIGlzIG5vdCBkZWZpbmVkLCByZXR1cm4gdGhlIGFjdHVhbCB0aW1lIHJlcXVpcmVkIGZvciBjb21wbGV0aW5nIHRoaXMgYW5pbWF0aW9uLiBPdGhlcndpc2UsIHJldHVybiBhIGNsb3N1cmUgdGhhdCBob2xkcyB0aGVcbiAgICAgICAgICAgY29tcHV0ZWQgcGF0aCBhbmQgcmV0dXJucyBhIHNuYXBzaG90IG9mIHRoZSBwb3NpdGlvbiBhY2NvcmRpbmcgdG8gYSBnaXZlbiBwZXJjZW50Q29tcGxldGUuICovXG4gICAgICAgIHJldHVybiAhaGF2ZV9kdXJhdGlvbiA/IHRpbWVfbGFwc2VkIDogZnVuY3Rpb24oIHBlcmNlbnRDb21wbGV0ZSApeyByZXR1cm4gcGF0aFsgKHBlcmNlbnRDb21wbGV0ZSAqIChwYXRoLmxlbmd0aCAtIDEpKSB8IDAgXTsgfTtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIHZhciBlYXNpbmdzID0ge1xuICAgICAgJ2xpbmVhcic6IGZ1bmN0aW9uKCBzdGFydCwgZW5kLCBwZXJjZW50ICl7XG4gICAgICAgIHJldHVybiBzdGFydCArIChlbmQgLSBzdGFydCkgKiBwZXJjZW50O1xuICAgICAgfSxcblxuICAgICAgLy8gZGVmYXVsdCBlYXNpbmdzXG4gICAgICAnZWFzZSc6IGN1YmljQmV6aWVyKCAwLjI1LCAwLjEsIDAuMjUsIDEgKSxcbiAgICAgICdlYXNlLWluJzogY3ViaWNCZXppZXIoIDAuNDIsIDAsIDEsIDEgKSxcbiAgICAgICdlYXNlLW91dCc6IGN1YmljQmV6aWVyKCAwLCAwLCAwLjU4LCAxICksXG4gICAgICAnZWFzZS1pbi1vdXQnOiBjdWJpY0JlemllciggMC40MiwgMCwgMC41OCwgMSApLFxuXG4gICAgICAvLyBzaW5lXG4gICAgICAnZWFzZS1pbi1zaW5lJzogY3ViaWNCZXppZXIoIDAuNDcsIDAsIDAuNzQ1LCAwLjcxNSApLFxuICAgICAgJ2Vhc2Utb3V0LXNpbmUnOiBjdWJpY0JlemllciggMC4zOSwgMC41NzUsIDAuNTY1LCAxICksXG4gICAgICAnZWFzZS1pbi1vdXQtc2luZSc6IGN1YmljQmV6aWVyKCAwLjQ0NSwgMC4wNSwgMC41NSwgMC45NSApLFxuXG4gICAgICAvLyBxdWFkXG4gICAgICAnZWFzZS1pbi1xdWFkJzogY3ViaWNCZXppZXIoIDAuNTUsIDAuMDg1LCAwLjY4LCAwLjUzICksXG4gICAgICAnZWFzZS1vdXQtcXVhZCc6IGN1YmljQmV6aWVyKCAwLjI1LCAwLjQ2LCAwLjQ1LCAwLjk0ICksXG4gICAgICAnZWFzZS1pbi1vdXQtcXVhZCc6IGN1YmljQmV6aWVyKCAwLjQ1NSwgMC4wMywgMC41MTUsIDAuOTU1ICksXG5cbiAgICAgIC8vIGN1YmljXG4gICAgICAnZWFzZS1pbi1jdWJpYyc6IGN1YmljQmV6aWVyKCAwLjU1LCAwLjA1NSwgMC42NzUsIDAuMTkgKSxcbiAgICAgICdlYXNlLW91dC1jdWJpYyc6IGN1YmljQmV6aWVyKCAwLjIxNSwgMC42MSwgMC4zNTUsIDEgKSxcbiAgICAgICdlYXNlLWluLW91dC1jdWJpYyc6IGN1YmljQmV6aWVyKCAwLjY0NSwgMC4wNDUsIDAuMzU1LCAxICksXG5cbiAgICAgIC8vIHF1YXJ0XG4gICAgICAnZWFzZS1pbi1xdWFydCc6IGN1YmljQmV6aWVyKCAwLjg5NSwgMC4wMywgMC42ODUsIDAuMjIgKSxcbiAgICAgICdlYXNlLW91dC1xdWFydCc6IGN1YmljQmV6aWVyKCAwLjE2NSwgMC44NCwgMC40NCwgMSApLFxuICAgICAgJ2Vhc2UtaW4tb3V0LXF1YXJ0JzogY3ViaWNCZXppZXIoIDAuNzcsIDAsIDAuMTc1LCAxICksXG5cbiAgICAgIC8vIHF1aW50XG4gICAgICAnZWFzZS1pbi1xdWludCc6IGN1YmljQmV6aWVyKCAwLjc1NSwgMC4wNSwgMC44NTUsIDAuMDYgKSxcbiAgICAgICdlYXNlLW91dC1xdWludCc6IGN1YmljQmV6aWVyKCAwLjIzLCAxLCAwLjMyLCAxICksXG4gICAgICAnZWFzZS1pbi1vdXQtcXVpbnQnOiBjdWJpY0JlemllciggMC44NiwgMCwgMC4wNywgMSApLFxuXG4gICAgICAvLyBleHBvXG4gICAgICAnZWFzZS1pbi1leHBvJzogY3ViaWNCZXppZXIoIDAuOTUsIDAuMDUsIDAuNzk1LCAwLjAzNSApLFxuICAgICAgJ2Vhc2Utb3V0LWV4cG8nOiBjdWJpY0JlemllciggMC4xOSwgMSwgMC4yMiwgMSApLFxuICAgICAgJ2Vhc2UtaW4tb3V0LWV4cG8nOiBjdWJpY0JlemllciggMSwgMCwgMCwgMSApLFxuXG4gICAgICAvLyBjaXJjXG4gICAgICAnZWFzZS1pbi1jaXJjJzogY3ViaWNCZXppZXIoIDAuNiwgMC4wNCwgMC45OCwgMC4zMzUgKSxcbiAgICAgICdlYXNlLW91dC1jaXJjJzogY3ViaWNCZXppZXIoIDAuMDc1LCAwLjgyLCAwLjE2NSwgMSApLFxuICAgICAgJ2Vhc2UtaW4tb3V0LWNpcmMnOiBjdWJpY0JlemllciggMC43ODUsIDAuMTM1LCAwLjE1LCAwLjg2ICksXG5cblxuICAgICAgLy8gdXNlciBwYXJhbSBlYXNpbmdzLi4uXG5cbiAgICAgICdzcHJpbmcnOiBmdW5jdGlvbiggdGVuc2lvbiwgZnJpY3Rpb24sIGR1cmF0aW9uICl7XG4gICAgICAgIGlmKCBkdXJhdGlvbiA9PT0gMCApeyAvLyBjYW4ndCBnZXQgYSBzcHJpbmcgdy8gZHVyYXRpb24gMFxuICAgICAgICAgIHJldHVybiBlYXNpbmdzLmxpbmVhcjsgLy8gZHVyYXRpb24gMCA9PiBqdW1wIHRvIGVuZCBzbyBpbXBsIGRvZXNuJ3QgbWF0dGVyXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3ByaW5nID0gZ2VuZXJhdGVTcHJpbmdSSzQoIHRlbnNpb24sIGZyaWN0aW9uLCBkdXJhdGlvbiApO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiggc3RhcnQsIGVuZCwgcGVyY2VudCApe1xuICAgICAgICAgIHJldHVybiBzdGFydCArIChlbmQgLSBzdGFydCkgKiBzcHJpbmcoIHBlcmNlbnQgKTtcbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgICdjdWJpYy1iZXppZXInOiBmdW5jdGlvbiggeDEsIHkxLCB4MiwgeTIgKXtcbiAgICAgICAgcmV0dXJuIGN1YmljQmV6aWVyKCB4MSwgeTEsIHgyLCB5MiApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBlYXNlKCBzdGFydFByb3AsIGVuZFByb3AsIHBlcmNlbnQsIGVhc2luZ0ZuICl7XG4gICAgICBpZiggcGVyY2VudCA8IDAgKXtcbiAgICAgICAgcGVyY2VudCA9IDA7XG4gICAgICB9IGVsc2UgaWYoIHBlcmNlbnQgPiAxICl7XG4gICAgICAgIHBlcmNlbnQgPSAxO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnQsIGVuZDtcblxuICAgICAgaWYoIHN0YXJ0UHJvcC5wZlZhbHVlICE9IG51bGwgfHwgc3RhcnRQcm9wLnZhbHVlICE9IG51bGwgKXtcbiAgICAgICAgc3RhcnQgPSBzdGFydFByb3AucGZWYWx1ZSAhPSBudWxsID8gc3RhcnRQcm9wLnBmVmFsdWUgOiBzdGFydFByb3AudmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydCA9IHN0YXJ0UHJvcDtcbiAgICAgIH1cblxuICAgICAgaWYoIGVuZFByb3AucGZWYWx1ZSAhPSBudWxsIHx8IGVuZFByb3AudmFsdWUgIT0gbnVsbCApe1xuICAgICAgICBlbmQgPSBlbmRQcm9wLnBmVmFsdWUgIT0gbnVsbCA/IGVuZFByb3AucGZWYWx1ZSA6IGVuZFByb3AudmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSBlbmRQcm9wO1xuICAgICAgfVxuXG4gICAgICBpZiggaXMubnVtYmVyKCBzdGFydCApICYmIGlzLm51bWJlciggZW5kICkgKXtcbiAgICAgICAgcmV0dXJuIGVhc2luZ0ZuKCBzdGFydCwgZW5kLCBwZXJjZW50ICk7XG5cbiAgICAgIH0gZWxzZSBpZiggaXMuYXJyYXkoIHN0YXJ0ICkgJiYgaXMuYXJyYXkoIGVuZCApICl7XG4gICAgICAgIHZhciBlYXNlZEFyciA9IFtdO1xuXG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZW5kLmxlbmd0aDsgaSsrICl7XG4gICAgICAgICAgdmFyIHNpID0gc3RhcnRbIGkgXTtcbiAgICAgICAgICB2YXIgZWkgPSBlbmRbIGkgXTtcblxuICAgICAgICAgIGlmKCBzaSAhPSBudWxsICYmIGVpICE9IG51bGwgKXtcbiAgICAgICAgICAgIHZhciB2YWwgPSBlYXNpbmdGbiggc2ksIGVpLCBwZXJjZW50ICk7XG5cbiAgICAgICAgICAgIGlmKCBzdGFydFByb3Aucm91bmRWYWx1ZSApeyB2YWwgPSBNYXRoLnJvdW5kKCB2YWwgKTsgfVxuXG4gICAgICAgICAgICBlYXNlZEFyci5wdXNoKCB2YWwgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWFzZWRBcnIucHVzaCggZWkgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWFzZWRBcnI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZWZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSggJy4uL2RlZmluZScgKTtcblxudmFyIGNvcmVmbiA9ICh7XG4gIG9uOiBkZWZpbmUub24oKSwgLy8gLm9uKCBldmVudHMgWywgc2VsZWN0b3JdIFssIGRhdGFdLCBoYW5kbGVyKVxuICBvbmU6IGRlZmluZS5vbiggeyB1bmJpbmRTZWxmT25UcmlnZ2VyOiB0cnVlIH0gKSxcbiAgb25jZTogZGVmaW5lLm9uKCB7IHVuYmluZEFsbEJpbmRlcnNPblRyaWdnZXI6IHRydWUgfSApLFxuICBvZmY6IGRlZmluZS5vZmYoKSwgLy8gLm9mZiggZXZlbnRzIFssIHNlbGVjdG9yXSBbLCBoYW5kbGVyXSApXG4gIHRyaWdnZXI6IGRlZmluZS50cmlnZ2VyKCkgLy8gLnRyaWdnZXIoIGV2ZW50cyBbLCBleHRyYVBhcmFtc10gKVxufSk7XG5cbmRlZmluZS5ldmVudEFsaWFzZXNPbiggY29yZWZuICk7XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZWZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29yZWZuID0gKHtcblxuICBwbmc6IGZ1bmN0aW9uKCBvcHRpb25zICl7XG4gICAgdmFyIHJlbmRlcmVyID0gdGhpcy5fcHJpdmF0ZS5yZW5kZXJlcjtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIHJldHVybiByZW5kZXJlci5wbmcoIG9wdGlvbnMgKTtcbiAgfSxcblxuICBqcGc6IGZ1bmN0aW9uKCBvcHRpb25zICl7XG4gICAgdmFyIHJlbmRlcmVyID0gdGhpcy5fcHJpdmF0ZS5yZW5kZXJlcjtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIG9wdGlvbnMuYmcgPSBvcHRpb25zLmJnIHx8ICcjZmZmJztcblxuICAgIHJldHVybiByZW5kZXJlci5qcGcoIG9wdGlvbnMgKTtcbiAgfVxuXG59KTtcblxuY29yZWZuLmpwZWcgPSBjb3JlZm4uanBnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdpbmRvdyA9IHJlcXVpcmUoICcuLi93aW5kb3cnICk7XG52YXIgdXRpbCA9IHJlcXVpcmUoICcuLi91dGlsJyApO1xudmFyIENvbGxlY3Rpb24gPSByZXF1aXJlKCAnLi4vY29sbGVjdGlvbicgKTtcbnZhciBpcyA9IHJlcXVpcmUoICcuLi9pcycgKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSggJy4uL3Byb21pc2UnICk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSggJy4uL2RlZmluZScgKTtcblxudmFyIENvcmUgPSBmdW5jdGlvbiggb3B0cyApe1xuICB2YXIgY3kgPSB0aGlzO1xuXG4gIG9wdHMgPSB1dGlsLmV4dGVuZCgge30sIG9wdHMgKTtcblxuICB2YXIgY29udGFpbmVyID0gb3B0cy5jb250YWluZXI7XG5cbiAgLy8gYWxsb3cgZm9yIHBhc3NpbmcgYSB3cmFwcGVkIGpxdWVyeSBvYmplY3RcbiAgLy8gZS5nLiBjeXRvc2NhcGUoeyBjb250YWluZXI6ICQoJyNjeScpIH0pXG4gIGlmKCBjb250YWluZXIgJiYgIWlzLmh0bWxFbGVtZW50KCBjb250YWluZXIgKSAmJiBpcy5odG1sRWxlbWVudCggY29udGFpbmVyWzBdICkgKXtcbiAgICBjb250YWluZXIgPSBjb250YWluZXJbMF07XG4gIH1cblxuICB2YXIgcmVnID0gY29udGFpbmVyID8gY29udGFpbmVyLl9jeXJlZyA6IG51bGw7IC8vIGUuZy4gYWxyZWFkeSByZWdpc3RlcmVkIHNvbWUgaW5mbyAoZS5nLiByZWFkaWVzKSB2aWEganF1ZXJ5XG4gIHJlZyA9IHJlZyB8fCB7fTtcblxuICBpZiggcmVnICYmIHJlZy5jeSApe1xuICAgIHJlZy5jeS5kZXN0cm95KCk7XG5cbiAgICByZWcgPSB7fTsgLy8gb2xkIGluc3RhbmNlID0+IHJlcGxhY2UgcmVnIGNvbXBsZXRlbHlcbiAgfVxuXG4gIHZhciByZWFkaWVzID0gcmVnLnJlYWRpZXMgPSByZWcucmVhZGllcyB8fCBbXTtcblxuICBpZiggY29udGFpbmVyICl7IGNvbnRhaW5lci5fY3lyZWcgPSByZWc7IH0gLy8gbWFrZSBzdXJlIGNvbnRhaW5lciBhc3NvYydkIHJlZyBwb2ludHMgdG8gdGhpcyBjeVxuICByZWcuY3kgPSBjeTtcblxuICB2YXIgaGVhZCA9IHdpbmRvdyAhPT0gdW5kZWZpbmVkICYmIGNvbnRhaW5lciAhPT0gdW5kZWZpbmVkICYmICFvcHRzLmhlYWRsZXNzO1xuICB2YXIgb3B0aW9ucyA9IG9wdHM7XG4gIG9wdGlvbnMubGF5b3V0ID0gdXRpbC5leHRlbmQoIHsgbmFtZTogaGVhZCA/ICdncmlkJyA6ICdudWxsJyB9LCBvcHRpb25zLmxheW91dCApO1xuICBvcHRpb25zLnJlbmRlcmVyID0gdXRpbC5leHRlbmQoIHsgbmFtZTogaGVhZCA/ICdjYW52YXMnIDogJ251bGwnIH0sIG9wdGlvbnMucmVuZGVyZXIgKTtcblxuICB2YXIgZGVmVmFsID0gZnVuY3Rpb24oIGRlZiwgdmFsLCBhbHRWYWwgKXtcbiAgICBpZiggdmFsICE9PSB1bmRlZmluZWQgKXtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSBlbHNlIGlmKCBhbHRWYWwgIT09IHVuZGVmaW5lZCApe1xuICAgICAgcmV0dXJuIGFsdFZhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRlZjtcbiAgICB9XG4gIH07XG5cbiAgdmFyIF9wID0gdGhpcy5fcHJpdmF0ZSA9IHtcbiAgICBjb250YWluZXI6IGNvbnRhaW5lciwgLy8gaHRtbCBkb20gZWxlIGNvbnRhaW5lclxuICAgIHJlYWR5OiBmYWxzZSwgLy8gd2hldGhlciByZWFkeSBoYXMgYmVlbiB0cmlnZ2VyZWRcbiAgICBpbml0cmVuZGVyOiBmYWxzZSwgLy8gaGFzIGluaXRyZW5kZXIgaGFzIGJlZW4gdHJpZ2dlcmVkXG4gICAgb3B0aW9uczogb3B0aW9ucywgLy8gY2FjaGVkIG9wdGlvbnNcbiAgICBlbGVtZW50czogbmV3IENvbGxlY3Rpb24oIHRoaXMgKSwgLy8gZWxlbWVudHMgaW4gdGhlIGdyYXBoXG4gICAgbGlzdGVuZXJzOiBbXSwgLy8gbGlzdCBvZiBsaXN0ZW5lcnNcbiAgICBhbmlFbGVzOiBuZXcgQ29sbGVjdGlvbiggdGhpcyApLCAvLyBlbGVtZW50cyBiZWluZyBhbmltYXRlZFxuICAgIHNjcmF0Y2g6IHt9LCAvLyBzY3JhdGNoIG9iamVjdCBmb3IgY29yZVxuICAgIGxheW91dDogbnVsbCxcbiAgICByZW5kZXJlcjogbnVsbCxcbiAgICBkZXN0cm95ZWQ6IGZhbHNlLCAvLyB3aGV0aGVyIGRlc3Ryb3kgd2FzIGNhbGxlZFxuICAgIG5vdGlmaWNhdGlvbnNFbmFibGVkOiB0cnVlLCAvLyB3aGV0aGVyIG5vdGlmaWNhdGlvbnMgYXJlIHNlbnQgdG8gdGhlIHJlbmRlcmVyXG4gICAgbWluWm9vbTogMWUtNTAsXG4gICAgbWF4Wm9vbTogMWU1MCxcbiAgICB6b29taW5nRW5hYmxlZDogZGVmVmFsKCB0cnVlLCBvcHRpb25zLnpvb21pbmdFbmFibGVkICksXG4gICAgdXNlclpvb21pbmdFbmFibGVkOiBkZWZWYWwoIHRydWUsIG9wdGlvbnMudXNlclpvb21pbmdFbmFibGVkICksXG4gICAgcGFubmluZ0VuYWJsZWQ6IGRlZlZhbCggdHJ1ZSwgb3B0aW9ucy5wYW5uaW5nRW5hYmxlZCApLFxuICAgIHVzZXJQYW5uaW5nRW5hYmxlZDogZGVmVmFsKCB0cnVlLCBvcHRpb25zLnVzZXJQYW5uaW5nRW5hYmxlZCApLFxuICAgIGJveFNlbGVjdGlvbkVuYWJsZWQ6IGRlZlZhbCggdHJ1ZSwgb3B0aW9ucy5ib3hTZWxlY3Rpb25FbmFibGVkICksXG4gICAgYXV0b2xvY2s6IGRlZlZhbCggZmFsc2UsIG9wdGlvbnMuYXV0b2xvY2ssIG9wdGlvbnMuYXV0b2xvY2tOb2RlcyApLFxuICAgIGF1dG91bmdyYWJpZnk6IGRlZlZhbCggZmFsc2UsIG9wdGlvbnMuYXV0b3VuZ3JhYmlmeSwgb3B0aW9ucy5hdXRvdW5ncmFiaWZ5Tm9kZXMgKSxcbiAgICBhdXRvdW5zZWxlY3RpZnk6IGRlZlZhbCggZmFsc2UsIG9wdGlvbnMuYXV0b3Vuc2VsZWN0aWZ5ICksXG4gICAgc3R5bGVFbmFibGVkOiBvcHRpb25zLnN0eWxlRW5hYmxlZCA9PT0gdW5kZWZpbmVkID8gaGVhZCA6IG9wdGlvbnMuc3R5bGVFbmFibGVkLFxuICAgIHpvb206IGlzLm51bWJlciggb3B0aW9ucy56b29tICkgPyBvcHRpb25zLnpvb20gOiAxLFxuICAgIHBhbjoge1xuICAgICAgeDogaXMucGxhaW5PYmplY3QoIG9wdGlvbnMucGFuICkgJiYgaXMubnVtYmVyKCBvcHRpb25zLnBhbi54ICkgPyBvcHRpb25zLnBhbi54IDogMCxcbiAgICAgIHk6IGlzLnBsYWluT2JqZWN0KCBvcHRpb25zLnBhbiApICYmIGlzLm51bWJlciggb3B0aW9ucy5wYW4ueSApID8gb3B0aW9ucy5wYW4ueSA6IDBcbiAgICB9LFxuICAgIGFuaW1hdGlvbjogeyAvLyBvYmplY3QgZm9yIGN1cnJlbnRseS1ydW5uaW5nIGFuaW1hdGlvbnNcbiAgICAgIGN1cnJlbnQ6IFtdLFxuICAgICAgcXVldWU6IFtdXG4gICAgfSxcbiAgICBoYXNDb21wb3VuZE5vZGVzOiBmYWxzZVxuICB9O1xuXG4gIC8vIHNldCBzZWxlY3Rpb24gdHlwZVxuICB2YXIgc2VsVHlwZSA9IG9wdGlvbnMuc2VsZWN0aW9uVHlwZTtcbiAgaWYoIHNlbFR5cGUgPT09IHVuZGVmaW5lZCB8fCAoc2VsVHlwZSAhPT0gJ2FkZGl0aXZlJyAmJiBzZWxUeXBlICE9PSAnc2luZ2xlJykgKXtcbiAgICAvLyB0aGVuIHNldCBkZWZhdWx0XG5cbiAgICBfcC5zZWxlY3Rpb25UeXBlID0gJ3NpbmdsZSc7XG4gIH0gZWxzZSB7XG4gICAgX3Auc2VsZWN0aW9uVHlwZSA9IHNlbFR5cGU7XG4gIH1cblxuICAvLyBpbml0IHpvb20gYm91bmRzXG4gIGlmKCBpcy5udW1iZXIoIG9wdGlvbnMubWluWm9vbSApICYmIGlzLm51bWJlciggb3B0aW9ucy5tYXhab29tICkgJiYgb3B0aW9ucy5taW5ab29tIDwgb3B0aW9ucy5tYXhab29tICl7XG4gICAgX3AubWluWm9vbSA9IG9wdGlvbnMubWluWm9vbTtcbiAgICBfcC5tYXhab29tID0gb3B0aW9ucy5tYXhab29tO1xuICB9IGVsc2UgaWYoIGlzLm51bWJlciggb3B0aW9ucy5taW5ab29tICkgJiYgb3B0aW9ucy5tYXhab29tID09PSB1bmRlZmluZWQgKXtcbiAgICBfcC5taW5ab29tID0gb3B0aW9ucy5taW5ab29tO1xuICB9IGVsc2UgaWYoIGlzLm51bWJlciggb3B0aW9ucy5tYXhab29tICkgJiYgb3B0aW9ucy5taW5ab29tID09PSB1bmRlZmluZWQgKXtcbiAgICBfcC5tYXhab29tID0gb3B0aW9ucy5tYXhab29tO1xuICB9XG5cbiAgdmFyIGxvYWRFeHREYXRhID0gZnVuY3Rpb24oIGV4dERhdGEsIG5leHQgKXtcbiAgICB2YXIgYW55SXNQcm9taXNlID0gZXh0RGF0YS5zb21lKCBpcy5wcm9taXNlICk7XG5cbiAgICBpZiggYW55SXNQcm9taXNlICl7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoIGV4dERhdGEgKS50aGVuKCBuZXh0ICk7IC8vIGxvYWQgYWxsIGRhdGEgYXN5bmNocm9ub3VzbHksIHRoZW4gZXhlYyByZXN0IG9mIGluaXRcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dCggZXh0RGF0YSApOyAvLyBleGVjIHN5bmNocm9ub3VzbHkgZm9yIGNvbnZlbmllbmNlXG4gICAgfVxuICB9O1xuXG4gIC8vIGNyZWF0ZSB0aGUgcmVuZGVyZXJcbiAgY3kuaW5pdFJlbmRlcmVyKCB1dGlsLmV4dGVuZCgge1xuICAgIGhpZGVFZGdlc09uVmlld3BvcnQ6IG9wdGlvbnMuaGlkZUVkZ2VzT25WaWV3cG9ydCxcbiAgICB0ZXh0dXJlT25WaWV3cG9ydDogb3B0aW9ucy50ZXh0dXJlT25WaWV3cG9ydCxcbiAgICB3aGVlbFNlbnNpdGl2aXR5OiBpcy5udW1iZXIoIG9wdGlvbnMud2hlZWxTZW5zaXRpdml0eSApICYmIG9wdGlvbnMud2hlZWxTZW5zaXRpdml0eSA+IDAgPyBvcHRpb25zLndoZWVsU2Vuc2l0aXZpdHkgOiAxLFxuICAgIG1vdGlvbkJsdXI6IG9wdGlvbnMubW90aW9uQmx1ciA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBvcHRpb25zLm1vdGlvbkJsdXIsIC8vIG9mZiBieSBkZWZhdWx0XG4gICAgbW90aW9uQmx1ck9wYWNpdHk6IG9wdGlvbnMubW90aW9uQmx1ck9wYWNpdHkgPT09IHVuZGVmaW5lZCA/IDAuMDUgOiBvcHRpb25zLm1vdGlvbkJsdXJPcGFjaXR5LFxuICAgIHBpeGVsUmF0aW86IGlzLm51bWJlciggb3B0aW9ucy5waXhlbFJhdGlvICkgJiYgb3B0aW9ucy5waXhlbFJhdGlvID4gMCA/IG9wdGlvbnMucGl4ZWxSYXRpbyA6IHVuZGVmaW5lZCxcbiAgICBkZXNrdG9wVGFwVGhyZXNob2xkOiBvcHRpb25zLmRlc2t0b3BUYXBUaHJlc2hvbGQgPT09IHVuZGVmaW5lZCA/IDQgOiBvcHRpb25zLmRlc2t0b3BUYXBUaHJlc2hvbGQsXG4gICAgdG91Y2hUYXBUaHJlc2hvbGQ6IG9wdGlvbnMudG91Y2hUYXBUaHJlc2hvbGQgPT09IHVuZGVmaW5lZCA/IDggOiBvcHRpb25zLnRvdWNoVGFwVGhyZXNob2xkXG4gIH0sIG9wdGlvbnMucmVuZGVyZXIgKSApO1xuXG4gIGxvYWRFeHREYXRhKFsgb3B0aW9ucy5zdHlsZSwgb3B0aW9ucy5lbGVtZW50cyBdLCBmdW5jdGlvbiggdGhlbnMgKXtcbiAgICB2YXIgaW5pdFN0eWxlID0gdGhlbnNbMF07XG4gICAgdmFyIGluaXRFbGVzID0gdGhlbnNbMV07XG5cbiAgICAvLyBpbml0IHN0eWxlXG4gICAgaWYoIF9wLnN0eWxlRW5hYmxlZCApe1xuICAgICAgY3kuc2V0U3R5bGUoIGluaXRTdHlsZSApO1xuICAgIH1cblxuICAgIC8vIHRyaWdnZXIgdGhlIHBhc3NlZCBmdW5jdGlvbiBmb3IgdGhlIGBpbml0cmVuZGVyYCBldmVudFxuICAgIGlmKCBvcHRpb25zLmluaXRyZW5kZXIgKXtcbiAgICAgIGN5Lm9uKCAnaW5pdHJlbmRlcicsIG9wdGlvbnMuaW5pdHJlbmRlciApO1xuICAgICAgY3kub24oICdpbml0cmVuZGVyJywgZnVuY3Rpb24oKXtcbiAgICAgICAgX3AuaW5pdHJlbmRlciA9IHRydWU7XG4gICAgICB9ICk7XG4gICAgfVxuXG4gICAgLy8gaW5pdGlhbCBsb2FkXG4gICAgY3kubG9hZCggaW5pdEVsZXMsIGZ1bmN0aW9uKCl7IC8vIG9ucmVhZHlcbiAgICAgIGN5LnN0YXJ0QW5pbWF0aW9uTG9vcCgpO1xuICAgICAgX3AucmVhZHkgPSB0cnVlO1xuXG4gICAgICAvLyBpZiBhIHJlYWR5IGNhbGxiYWNrIGlzIHNwZWNpZmllZCBhcyBhbiBvcHRpb24sIHRoZSBiaW5kIGl0XG4gICAgICBpZiggaXMuZm4oIG9wdGlvbnMucmVhZHkgKSApe1xuICAgICAgICBjeS5vbiggJ3JlYWR5Jywgb3B0aW9ucy5yZWFkeSApO1xuICAgICAgfVxuXG4gICAgICAvLyBiaW5kIGFsbCB0aGUgcmVhZHkgaGFuZGxlcnMgcmVnaXN0ZXJlZCBiZWZvcmUgY3JlYXRpbmcgdGhpcyBpbnN0YW5jZVxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCByZWFkaWVzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBmbiA9IHJlYWRpZXNbIGkgXTtcbiAgICAgICAgY3kub24oICdyZWFkeScsIGZuICk7XG4gICAgICB9XG4gICAgICBpZiggcmVnICl7IHJlZy5yZWFkaWVzID0gW107IH0gLy8gY2xlYXIgYi9jIHdlJ3ZlIGJvdW5kIHRoZW0gYWxsIGFuZCBkb24ndCB3YW50IHRvIGtlZXAgaXQgYXJvdW5kIGluIGNhc2UgYSBuZXcgY29yZSB1c2VzIHRoZSBzYW1lIGRpdiBldGNcblxuICAgICAgY3kudHJpZ2dlciggJ3JlYWR5JyApO1xuICAgIH0sIG9wdGlvbnMuZG9uZSApO1xuXG4gIH0gKTtcbn07XG5cbnZhciBjb3JlZm4gPSBDb3JlLnByb3RvdHlwZTsgLy8gc2hvcnQgYWxpYXNcblxudXRpbC5leHRlbmQoIGNvcmVmbiwge1xuICBpbnN0YW5jZVN0cmluZzogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gJ2NvcmUnO1xuICB9LFxuXG4gIGlzUmVhZHk6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUucmVhZHk7XG4gIH0sXG5cbiAgaXNEZXN0cm95ZWQ6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUuZGVzdHJveWVkO1xuICB9LFxuXG4gIHJlYWR5OiBmdW5jdGlvbiggZm4gKXtcbiAgICBpZiggdGhpcy5pc1JlYWR5KCkgKXtcbiAgICAgIHRoaXMudHJpZ2dlciggJ3JlYWR5JywgW10sIGZuICk7IC8vIGp1c3QgY2FsbHMgZm4gYXMgdGhvdWdoIHRyaWdnZXJlZCB2aWEgcmVhZHkgZXZlbnRcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbiggJ3JlYWR5JywgZm4gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBpbml0cmVuZGVyOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLl9wcml2YXRlLmluaXRyZW5kZXI7XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24oKXtcbiAgICB2YXIgY3kgPSB0aGlzO1xuICAgIGlmKCBjeS5pc0Rlc3Ryb3llZCgpICkgcmV0dXJuO1xuXG4gICAgY3kuc3RvcEFuaW1hdGlvbkxvb3AoKTtcblxuICAgIGN5LmRlc3Ryb3lSZW5kZXJlcigpO1xuXG4gICAgdGhpcy50cmlnZ2VyKCAnZGVzdHJveScgKTtcblxuICAgIGN5Ll9wcml2YXRlLmRlc3Ryb3llZCA9IHRydWU7XG5cbiAgICByZXR1cm4gY3k7XG4gIH0sXG5cbiAgaGFzRWxlbWVudFdpdGhJZDogZnVuY3Rpb24oIGlkICl7XG4gICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUuZWxlbWVudHMuaGFzRWxlbWVudFdpdGhJZCggaWQgKTtcbiAgfSxcblxuICBnZXRFbGVtZW50QnlJZDogZnVuY3Rpb24oIGlkICl7XG4gICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUuZWxlbWVudHMuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG4gIH0sXG5cbiAgc2VsZWN0aW9uVHlwZTogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZS5zZWxlY3Rpb25UeXBlO1xuICB9LFxuXG4gIGhhc0NvbXBvdW5kTm9kZXM6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUuaGFzQ29tcG91bmROb2RlcztcbiAgfSxcblxuICBoZWFkbGVzczogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZS5vcHRpb25zLnJlbmRlcmVyLm5hbWUgPT09ICdudWxsJztcbiAgfSxcblxuICBzdHlsZUVuYWJsZWQ6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUuc3R5bGVFbmFibGVkO1xuICB9LFxuXG4gIGFkZFRvUG9vbDogZnVuY3Rpb24oIGVsZXMgKXtcbiAgICB0aGlzLl9wcml2YXRlLmVsZW1lbnRzLm1lcmdlKCBlbGVzICk7XG5cbiAgICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbiAgfSxcblxuICByZW1vdmVGcm9tUG9vbDogZnVuY3Rpb24oIGVsZXMgKXtcbiAgICB0aGlzLl9wcml2YXRlLmVsZW1lbnRzLnVubWVyZ2UoIGVsZXMgKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGNvbnRhaW5lcjogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZS5jb250YWluZXI7XG4gIH0sXG5cbiAgb3B0aW9uczogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdXRpbC5jb3B5KCB0aGlzLl9wcml2YXRlLm9wdGlvbnMgKTtcbiAgfSxcblxuICBqc29uOiBmdW5jdGlvbiggb2JqICl7XG4gICAgdmFyIGN5ID0gdGhpcztcbiAgICB2YXIgX3AgPSBjeS5fcHJpdmF0ZTtcbiAgICB2YXIgZWxlcyA9IGN5Lm11dGFibGVFbGVtZW50cygpO1xuXG4gICAgaWYoIGlzLnBsYWluT2JqZWN0KCBvYmogKSApeyAvLyBzZXRcblxuICAgICAgY3kuc3RhcnRCYXRjaCgpO1xuXG4gICAgICBpZiggb2JqLmVsZW1lbnRzICl7XG4gICAgICAgIHZhciBpZEluSnNvbiA9IHt9O1xuXG4gICAgICAgIHZhciB1cGRhdGVFbGVzID0gZnVuY3Rpb24oIGpzb25zLCBnciApe1xuICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwganNvbnMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgICAgIHZhciBqc29uID0ganNvbnNbIGkgXTtcbiAgICAgICAgICAgIHZhciBpZCA9IGpzb24uZGF0YS5pZDtcbiAgICAgICAgICAgIHZhciBlbGUgPSBjeS5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuICAgICAgICAgICAgaWRJbkpzb25bIGlkIF0gPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiggZWxlLmxlbmd0aCAhPT0gMCApeyAvLyBleGlzdGluZyBlbGVtZW50IHNob3VsZCBiZSB1cGRhdGVkXG4gICAgICAgICAgICAgIGVsZS5qc29uKCBqc29uICk7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBvdGhlcndpc2Ugc2hvdWxkIGJlIGFkZGVkXG4gICAgICAgICAgICAgIGlmKCBnciApe1xuICAgICAgICAgICAgICAgIGN5LmFkZCggdXRpbC5leHRlbmQoIHsgZ3JvdXA6IGdyIH0sIGpzb24gKSApO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN5LmFkZCgganNvbiApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmKCBpcy5hcnJheSggb2JqLmVsZW1lbnRzICkgKXsgLy8gZWxlbWVudHM6IFtdXG4gICAgICAgICAgdXBkYXRlRWxlcyggb2JqLmVsZW1lbnRzICk7XG5cbiAgICAgICAgfSBlbHNlIHsgLy8gZWxlbWVudHM6IHsgbm9kZXM6IFtdLCBlZGdlczogW10gfVxuICAgICAgICAgIHZhciBncnMgPSBbICdub2RlcycsICdlZGdlcycgXTtcbiAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGdycy5sZW5ndGg7IGkrKyApe1xuICAgICAgICAgICAgdmFyIGdyID0gZ3JzWyBpIF07XG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBvYmouZWxlbWVudHNbIGdyIF07XG5cbiAgICAgICAgICAgIGlmKCBpcy5hcnJheSggZWxlbWVudHMgKSApe1xuICAgICAgICAgICAgICB1cGRhdGVFbGVzKCBlbGVtZW50cywgZ3IgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBlbGVtZW50cyBub3Qgc3BlY2lmaWVkIGluIGpzb24gc2hvdWxkIGJlIHJlbW92ZWRcbiAgICAgICAgZWxlcy5zdGRGaWx0ZXIoIGZ1bmN0aW9uKCBlbGUgKXtcbiAgICAgICAgICByZXR1cm4gIWlkSW5Kc29uWyBlbGUuaWQoKSBdO1xuICAgICAgICB9ICkucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmKCBvYmouc3R5bGUgKXtcbiAgICAgICAgY3kuc3R5bGUoIG9iai5zdHlsZSApO1xuICAgICAgfVxuXG4gICAgICBpZiggb2JqLnpvb20gIT0gbnVsbCAmJiBvYmouem9vbSAhPT0gX3Auem9vbSApe1xuICAgICAgICBjeS56b29tKCBvYmouem9vbSApO1xuICAgICAgfVxuXG4gICAgICBpZiggb2JqLnBhbiApe1xuICAgICAgICBpZiggb2JqLnBhbi54ICE9PSBfcC5wYW4ueCB8fCBvYmoucGFuLnkgIT09IF9wLnBhbi55ICl7XG4gICAgICAgICAgY3kucGFuKCBvYmoucGFuICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGZpZWxkcyA9IFtcbiAgICAgICAgJ21pblpvb20nLCAnbWF4Wm9vbScsICd6b29taW5nRW5hYmxlZCcsICd1c2VyWm9vbWluZ0VuYWJsZWQnLFxuICAgICAgICAncGFubmluZ0VuYWJsZWQnLCAndXNlclBhbm5pbmdFbmFibGVkJyxcbiAgICAgICAgJ2JveFNlbGVjdGlvbkVuYWJsZWQnLFxuICAgICAgICAnYXV0b2xvY2snLCAnYXV0b3VuZ3JhYmlmeScsICdhdXRvdW5zZWxlY3RpZnknXG4gICAgICBdO1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKyApe1xuICAgICAgICB2YXIgZiA9IGZpZWxkc1sgaSBdO1xuXG4gICAgICAgIGlmKCBvYmpbIGYgXSAhPSBudWxsICl7XG4gICAgICAgICAgY3lbIGYgXSggb2JqWyBmIF0gKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjeS5lbmRCYXRjaCgpO1xuXG4gICAgICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbiAgICB9IGVsc2UgaWYoIG9iaiA9PT0gdW5kZWZpbmVkICl7IC8vIGdldFxuICAgICAgdmFyIGpzb24gPSB7fTtcblxuICAgICAganNvbi5lbGVtZW50cyA9IHt9O1xuICAgICAgZWxlcy5mb3JFYWNoKCBmdW5jdGlvbiggZWxlICl7XG4gICAgICAgIHZhciBncm91cCA9IGVsZS5ncm91cCgpO1xuXG4gICAgICAgIGlmKCAhanNvbi5lbGVtZW50c1sgZ3JvdXAgXSApe1xuICAgICAgICAgIGpzb24uZWxlbWVudHNbIGdyb3VwIF0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGpzb24uZWxlbWVudHNbIGdyb3VwIF0ucHVzaCggZWxlLmpzb24oKSApO1xuICAgICAgfSApO1xuXG4gICAgICBpZiggdGhpcy5fcHJpdmF0ZS5zdHlsZUVuYWJsZWQgKXtcbiAgICAgICAganNvbi5zdHlsZSA9IGN5LnN0eWxlKCkuanNvbigpO1xuICAgICAgfVxuXG4gICAgICBqc29uLnpvb21pbmdFbmFibGVkID0gY3kuX3ByaXZhdGUuem9vbWluZ0VuYWJsZWQ7XG4gICAgICBqc29uLnVzZXJab29taW5nRW5hYmxlZCA9IGN5Ll9wcml2YXRlLnVzZXJab29taW5nRW5hYmxlZDtcbiAgICAgIGpzb24uem9vbSA9IGN5Ll9wcml2YXRlLnpvb207XG4gICAgICBqc29uLm1pblpvb20gPSBjeS5fcHJpdmF0ZS5taW5ab29tO1xuICAgICAganNvbi5tYXhab29tID0gY3kuX3ByaXZhdGUubWF4Wm9vbTtcbiAgICAgIGpzb24ucGFubmluZ0VuYWJsZWQgPSBjeS5fcHJpdmF0ZS5wYW5uaW5nRW5hYmxlZDtcbiAgICAgIGpzb24udXNlclBhbm5pbmdFbmFibGVkID0gY3kuX3ByaXZhdGUudXNlclBhbm5pbmdFbmFibGVkO1xuICAgICAganNvbi5wYW4gPSB1dGlsLmNvcHkoIGN5Ll9wcml2YXRlLnBhbiApO1xuICAgICAganNvbi5ib3hTZWxlY3Rpb25FbmFibGVkID0gY3kuX3ByaXZhdGUuYm94U2VsZWN0aW9uRW5hYmxlZDtcbiAgICAgIGpzb24ucmVuZGVyZXIgPSB1dGlsLmNvcHkoIGN5Ll9wcml2YXRlLm9wdGlvbnMucmVuZGVyZXIgKTtcbiAgICAgIGpzb24uaGlkZUVkZ2VzT25WaWV3cG9ydCA9IGN5Ll9wcml2YXRlLm9wdGlvbnMuaGlkZUVkZ2VzT25WaWV3cG9ydDtcbiAgICAgIGpzb24udGV4dHVyZU9uVmlld3BvcnQgPSBjeS5fcHJpdmF0ZS5vcHRpb25zLnRleHR1cmVPblZpZXdwb3J0O1xuICAgICAganNvbi53aGVlbFNlbnNpdGl2aXR5ID0gY3kuX3ByaXZhdGUub3B0aW9ucy53aGVlbFNlbnNpdGl2aXR5O1xuICAgICAganNvbi5tb3Rpb25CbHVyID0gY3kuX3ByaXZhdGUub3B0aW9ucy5tb3Rpb25CbHVyO1xuXG4gICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gIH0sXG5cbiAgc2NyYXRjaDogZGVmaW5lLmRhdGEoIHtcbiAgICBmaWVsZDogJ3NjcmF0Y2gnLFxuICAgIGJpbmRpbmdFdmVudDogJ3NjcmF0Y2gnLFxuICAgIGFsbG93QmluZGluZzogdHJ1ZSxcbiAgICBhbGxvd1NldHRpbmc6IHRydWUsXG4gICAgc2V0dGluZ0V2ZW50OiAnc2NyYXRjaCcsXG4gICAgc2V0dGluZ1RyaWdnZXJzRXZlbnQ6IHRydWUsXG4gICAgdHJpZ2dlckZuTmFtZTogJ3RyaWdnZXInLFxuICAgIGFsbG93R2V0dGluZzogdHJ1ZVxuICB9ICksXG5cbiAgcmVtb3ZlU2NyYXRjaDogZGVmaW5lLnJlbW92ZURhdGEoIHtcbiAgICBmaWVsZDogJ3NjcmF0Y2gnLFxuICAgIGV2ZW50OiAnc2NyYXRjaCcsXG4gICAgdHJpZ2dlckZuTmFtZTogJ3RyaWdnZXInLFxuICAgIHRyaWdnZXJFdmVudDogdHJ1ZVxuICB9IClcblxufSApO1xuXG5bXG4gIHJlcXVpcmUoICcuL2FkZC1yZW1vdmUnICksXG4gIHJlcXVpcmUoICcuL2FuaW1hdGlvbicgKSxcbiAgcmVxdWlyZSggJy4vZXZlbnRzJyApLFxuICByZXF1aXJlKCAnLi9leHBvcnQnICksXG4gIHJlcXVpcmUoICcuL2xheW91dCcgKSxcbiAgcmVxdWlyZSggJy4vbm90aWZpY2F0aW9uJyApLFxuICByZXF1aXJlKCAnLi9yZW5kZXJlcicgKSxcbiAgcmVxdWlyZSggJy4vc2VhcmNoJyApLFxuICByZXF1aXJlKCAnLi9zdHlsZScgKSxcbiAgcmVxdWlyZSggJy4vdmlld3BvcnQnIClcbl0uZm9yRWFjaCggZnVuY3Rpb24oIHByb3BzICl7XG4gIHV0aWwuZXh0ZW5kKCBjb3JlZm4sIHByb3BzICk7XG59ICk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29yZTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vdXRpbCcgKTtcbnZhciBpcyA9IHJlcXVpcmUoICcuLi9pcycgKTtcblxudmFyIGNvcmVmbiA9ICh7XG5cbiAgbGF5b3V0OiBmdW5jdGlvbiggcGFyYW1zICl7XG4gICAgdmFyIGxheW91dCA9IHRoaXMuX3ByaXZhdGUucHJldkxheW91dCA9ICggcGFyYW1zID09IG51bGwgPyB0aGlzLl9wcml2YXRlLnByZXZMYXlvdXQgOiB0aGlzLm1ha2VMYXlvdXQoIHBhcmFtcyApICk7XG5cbiAgICBsYXlvdXQucnVuKCk7XG5cbiAgICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbiAgfSxcblxuICBtYWtlTGF5b3V0OiBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAgIHZhciBjeSA9IHRoaXM7XG5cbiAgICBpZiggb3B0aW9ucyA9PSBudWxsICl7XG4gICAgICB1dGlsLmVycm9yKCAnTGF5b3V0IG9wdGlvbnMgbXVzdCBiZSBzcGVjaWZpZWQgdG8gbWFrZSBhIGxheW91dCcgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiggb3B0aW9ucy5uYW1lID09IG51bGwgKXtcbiAgICAgIHV0aWwuZXJyb3IoICdBIGBuYW1lYCBtdXN0IGJlIHNwZWNpZmllZCB0byBtYWtlIGEgbGF5b3V0JyApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lO1xuICAgIHZhciBMYXlvdXQgPSBjeS5leHRlbnNpb24oICdsYXlvdXQnLCBuYW1lICk7XG5cbiAgICBpZiggTGF5b3V0ID09IG51bGwgKXtcbiAgICAgIHV0aWwuZXJyb3IoICdDYW4gbm90IGFwcGx5IGxheW91dDogTm8gc3VjaCBsYXlvdXQgYCcgKyBuYW1lICsgJ2AgZm91bmQ7IGRpZCB5b3UgaW5jbHVkZSBpdHMgSlMgZmlsZT8nICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGVsZXM7XG4gICAgaWYoIGlzLnN0cmluZyggb3B0aW9ucy5lbGVzICkgKXtcbiAgICAgIGVsZXMgPSBjeS4kKCBvcHRpb25zLmVsZXMgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlcyA9IG9wdGlvbnMuZWxlcyAhPSBudWxsID8gb3B0aW9ucy5lbGVzIDogY3kuJCgpO1xuICAgIH1cblxuICAgIHZhciBsYXlvdXQgPSBuZXcgTGF5b3V0KCB1dGlsLmV4dGVuZCgge30sIG9wdGlvbnMsIHtcbiAgICAgIGN5OiBjeSxcbiAgICAgIGVsZXM6IGVsZXNcbiAgICB9ICkgKTtcblxuICAgIHJldHVybiBsYXlvdXQ7XG4gIH1cblxufSk7XG5cbmNvcmVmbi5jcmVhdGVMYXlvdXQgPSBjb3JlZm4ubWFrZUxheW91dDtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlZm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb3JlZm4gPSAoe1xuICBub3RpZnk6IGZ1bmN0aW9uKCBwYXJhbXMgKXtcbiAgICB2YXIgX3AgPSB0aGlzLl9wcml2YXRlO1xuXG4gICAgaWYoIF9wLmJhdGNoaW5nTm90aWZ5ICl7XG4gICAgICB2YXIgYkVsZXMgPSBfcC5iYXRjaE5vdGlmeUVsZXM7XG4gICAgICB2YXIgYlR5cGVzID0gX3AuYmF0Y2hOb3RpZnlUeXBlcztcblxuICAgICAgaWYoIHBhcmFtcy5lbGVzICl7XG4gICAgICAgIGJFbGVzLm1lcmdlKCBwYXJhbXMuZWxlcyApO1xuICAgICAgfVxuXG4gICAgICBpZiggIWJUeXBlcy5pZHNbIHBhcmFtcy50eXBlIF0gKXtcbiAgICAgICAgYlR5cGVzLnB1c2goIHBhcmFtcy50eXBlICk7XG4gICAgICAgIGJUeXBlcy5pZHNbIHBhcmFtcy50eXBlIF0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47IC8vIG5vdGlmaWNhdGlvbnMgYXJlIGRpc2FibGVkIGR1cmluZyBiYXRjaGluZ1xuICAgIH1cblxuICAgIGlmKCAhX3Aubm90aWZpY2F0aW9uc0VuYWJsZWQgKXsgcmV0dXJuOyB9IC8vIGV4aXQgb24gZGlzYWJsZWRcblxuICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIoKTtcblxuICAgIC8vIGV4aXQgaWYgZGVzdHJveSgpIGNhbGxlZCBvbiBjb3JlIG9yIHJlbmRlcmVyIGluIGJldHdlZW4gZnJhbWVzICMxNDk5ICMxNTI4XG4gICAgaWYoIHRoaXMuaXNEZXN0cm95ZWQoKSB8fCAhcmVuZGVyZXIgKXsgcmV0dXJuOyB9XG5cbiAgICByZW5kZXJlci5ub3RpZnkoIHBhcmFtcyApO1xuICB9LFxuXG4gIG5vdGlmaWNhdGlvbnM6IGZ1bmN0aW9uKCBib29sICl7XG4gICAgdmFyIHAgPSB0aGlzLl9wcml2YXRlO1xuXG4gICAgaWYoIGJvb2wgPT09IHVuZGVmaW5lZCApe1xuICAgICAgcmV0dXJuIHAubm90aWZpY2F0aW9uc0VuYWJsZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHAubm90aWZpY2F0aW9uc0VuYWJsZWQgPSBib29sID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cbiAgfSxcblxuICBub05vdGlmaWNhdGlvbnM6IGZ1bmN0aW9uKCBjYWxsYmFjayApe1xuICAgIHRoaXMubm90aWZpY2F0aW9ucyggZmFsc2UgKTtcbiAgICBjYWxsYmFjaygpO1xuICAgIHRoaXMubm90aWZpY2F0aW9ucyggdHJ1ZSApO1xuICB9LFxuXG4gIHN0YXJ0QmF0Y2g6IGZ1bmN0aW9uKCl7XG4gICAgdmFyIF9wID0gdGhpcy5fcHJpdmF0ZTtcblxuICAgIGlmKCBfcC5iYXRjaENvdW50ID09IG51bGwgKXtcbiAgICAgIF9wLmJhdGNoQ291bnQgPSAwO1xuICAgIH1cblxuICAgIGlmKCBfcC5iYXRjaENvdW50ID09PSAwICl7XG4gICAgICBfcC5iYXRjaGluZ1N0eWxlID0gX3AuYmF0Y2hpbmdOb3RpZnkgPSB0cnVlO1xuICAgICAgX3AuYmF0Y2hTdHlsZUVsZXMgPSB0aGlzLmNvbGxlY3Rpb24oKTtcbiAgICAgIF9wLmJhdGNoTm90aWZ5RWxlcyA9IHRoaXMuY29sbGVjdGlvbigpO1xuICAgICAgX3AuYmF0Y2hOb3RpZnlUeXBlcyA9IFtdO1xuICAgICAgX3AuYmF0Y2hOb3RpZnlUeXBlcy5pZHMgPSB7fTtcbiAgICB9XG5cbiAgICBfcC5iYXRjaENvdW50Kys7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBlbmRCYXRjaDogZnVuY3Rpb24oKXtcbiAgICB2YXIgX3AgPSB0aGlzLl9wcml2YXRlO1xuXG4gICAgX3AuYmF0Y2hDb3VudC0tO1xuXG4gICAgaWYoIF9wLmJhdGNoQ291bnQgPT09IDAgKXtcbiAgICAgIC8vIHVwZGF0ZSBzdHlsZSBmb3IgZGlydHkgZWxlc1xuICAgICAgX3AuYmF0Y2hpbmdTdHlsZSA9IGZhbHNlO1xuICAgICAgX3AuYmF0Y2hTdHlsZUVsZXMudXBkYXRlU3R5bGUoKTtcblxuICAgICAgLy8gbm90aWZ5IHRoZSByZW5kZXJlciBvZiBxdWV1ZWQgZWxlcyBhbmQgZXZlbnQgdHlwZXNcbiAgICAgIF9wLmJhdGNoaW5nTm90aWZ5ID0gZmFsc2U7XG4gICAgICB0aGlzLm5vdGlmeSgge1xuICAgICAgICB0eXBlOiBfcC5iYXRjaE5vdGlmeVR5cGVzLFxuICAgICAgICBlbGVzOiBfcC5iYXRjaE5vdGlmeUVsZXNcbiAgICAgIH0gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBiYXRjaDogZnVuY3Rpb24oIGNhbGxiYWNrICl7XG4gICAgdGhpcy5zdGFydEJhdGNoKCk7XG4gICAgY2FsbGJhY2soKTtcbiAgICB0aGlzLmVuZEJhdGNoKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgYmF0Y2hEYXRhOiBmdW5jdGlvbiggbWFwICl7XG4gICAgdmFyIGN5ID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLmJhdGNoKCBmdW5jdGlvbigpe1xuICAgICAgdmFyIGlkcyA9IE9iamVjdC5rZXlzKCBtYXAgKTtcblxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGlkID0gaWRzW2ldO1xuICAgICAgICB2YXIgZGF0YSA9IG1hcFsgaWQgXTtcbiAgICAgICAgdmFyIGVsZSA9IGN5LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG4gICAgICAgIGVsZS5kYXRhKCBkYXRhICk7XG4gICAgICB9XG4gICAgfSApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlZm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSggJy4uL3V0aWwnICk7XG5cbnZhciBjb3JlZm4gPSAoe1xuXG4gIHJlbmRlclRvOiBmdW5jdGlvbiggY29udGV4dCwgem9vbSwgcGFuLCBweFJhdGlvICl7XG4gICAgdmFyIHIgPSB0aGlzLl9wcml2YXRlLnJlbmRlcmVyO1xuXG4gICAgci5yZW5kZXJUbyggY29udGV4dCwgem9vbSwgcGFuLCBweFJhdGlvICk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgcmVuZGVyZXI6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUucmVuZGVyZXI7XG4gIH0sXG5cbiAgZm9yY2VSZW5kZXI6IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5ub3RpZnkoIHtcbiAgICAgIHR5cGU6ICdkcmF3J1xuICAgIH0gKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIHJlc2l6ZTogZnVuY3Rpb24oKXtcbiAgICB0aGlzLmludmFsaWRhdGVTaXplKCk7XG5cbiAgICB0aGlzLm5vdGlmeSgge1xuICAgICAgdHlwZTogJ3Jlc2l6ZSdcbiAgICB9ICk7XG5cbiAgICB0aGlzLnRyaWdnZXIoICdyZXNpemUnICk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBpbml0UmVuZGVyZXI6IGZ1bmN0aW9uKCBvcHRpb25zICl7XG4gICAgdmFyIGN5ID0gdGhpcztcblxuICAgIHZhciBSZW5kZXJlclByb3RvID0gY3kuZXh0ZW5zaW9uKCAncmVuZGVyZXInLCBvcHRpb25zLm5hbWUgKTtcbiAgICBpZiggUmVuZGVyZXJQcm90byA9PSBudWxsICl7XG4gICAgICB1dGlsLmVycm9yKCAnQ2FuIG5vdCBpbml0aWFsaXNlOiBObyBzdWNoIHJlbmRlcmVyIGAlc2AgZm91bmQ7IGRpZCB5b3UgaW5jbHVkZSBpdHMgSlMgZmlsZT8nLCBvcHRpb25zLm5hbWUgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgck9wdHMgPSB1dGlsLmV4dGVuZCgge30sIG9wdGlvbnMsIHtcbiAgICAgIGN5OiBjeVxuICAgIH0gKTtcblxuICAgIGN5Ll9wcml2YXRlLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyUHJvdG8oIHJPcHRzICk7XG4gIH0sXG5cbiAgZGVzdHJveVJlbmRlcmVyOiBmdW5jdGlvbigpe1xuICAgIHZhciBjeSA9IHRoaXM7XG5cbiAgICBjeS5ub3RpZnkoIHsgdHlwZTogJ2Rlc3Ryb3knIH0gKTsgLy8gZGVzdHJveSB0aGUgcmVuZGVyZXJcblxuICAgIHZhciBkb21FbGUgPSBjeS5jb250YWluZXIoKTtcbiAgICBpZiggZG9tRWxlICl7XG4gICAgICBkb21FbGUuX2N5cmVnID0gbnVsbDtcblxuICAgICAgd2hpbGUoIGRvbUVsZS5jaGlsZE5vZGVzLmxlbmd0aCA+IDAgKXtcbiAgICAgICAgZG9tRWxlLnJlbW92ZUNoaWxkKCBkb21FbGUuY2hpbGROb2Rlc1swXSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGN5Ll9wcml2YXRlLnJlbmRlcmVyID0gbnVsbDsgLy8gdG8gYmUgZXh0cmEgc2FmZSwgcmVtb3ZlIHRoZSByZWZcbiAgfSxcblxuICBvblJlbmRlcjogZnVuY3Rpb24oIGZuICl7XG4gICAgcmV0dXJuIHRoaXMub24oJ3JlbmRlcicsIGZuKTtcbiAgfSxcblxuICBvZmZSZW5kZXI6IGZ1bmN0aW9uKCBmbiApe1xuICAgIHJldHVybiB0aGlzLm9mZigncmVuZGVyJywgZm4pO1xuICB9XG5cbn0pO1xuXG5jb3JlZm4uaW52YWxpZGF0ZURpbWVuc2lvbnMgPSBjb3JlZm4ucmVzaXplO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzID0gcmVxdWlyZSggJy4uL2lzJyApO1xudmFyIENvbGxlY3Rpb24gPSByZXF1aXJlKCAnLi4vY29sbGVjdGlvbicgKTtcblxudmFyIGNvcmVmbiA9ICh7XG5cbiAgLy8gZ2V0IGEgY29sbGVjdGlvblxuICAvLyAtIGVtcHR5IGNvbGxlY3Rpb24gb24gbm8gYXJnc1xuICAvLyAtIGNvbGxlY3Rpb24gb2YgZWxlbWVudHMgaW4gdGhlIGdyYXBoIG9uIHNlbGVjdG9yIGFyZ1xuICAvLyAtIGd1YXJhbnRlZSBhIHJldHVybmVkIGNvbGxlY3Rpb24gd2hlbiBlbGVtZW50cyBvciBjb2xsZWN0aW9uIHNwZWNpZmllZFxuICBjb2xsZWN0aW9uOiBmdW5jdGlvbiggZWxlcywgb3B0cyApe1xuXG4gICAgaWYoIGlzLnN0cmluZyggZWxlcyApICl7XG4gICAgICByZXR1cm4gdGhpcy4kKCBlbGVzICk7XG5cbiAgICB9IGVsc2UgaWYoIGlzLmVsZW1lbnRPckNvbGxlY3Rpb24oIGVsZXMgKSApe1xuICAgICAgcmV0dXJuIGVsZXMuY29sbGVjdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmKCBpcy5hcnJheSggZWxlcyApICl7XG4gICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oIHRoaXMsIGVsZXMsIG9wdHMgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oIHRoaXMgKTtcbiAgfSxcblxuICBub2RlczogZnVuY3Rpb24oIHNlbGVjdG9yICl7XG4gICAgdmFyIG5vZGVzID0gdGhpcy4kKCBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMuaXNOb2RlKCk7XG4gICAgfSApO1xuXG4gICAgaWYoIHNlbGVjdG9yICl7XG4gICAgICByZXR1cm4gbm9kZXMuZmlsdGVyKCBzZWxlY3RvciApO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlcztcbiAgfSxcblxuICBlZGdlczogZnVuY3Rpb24oIHNlbGVjdG9yICl7XG4gICAgdmFyIGVkZ2VzID0gdGhpcy4kKCBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMuaXNFZGdlKCk7XG4gICAgfSApO1xuXG4gICAgaWYoIHNlbGVjdG9yICl7XG4gICAgICByZXR1cm4gZWRnZXMuZmlsdGVyKCBzZWxlY3RvciApO1xuICAgIH1cblxuICAgIHJldHVybiBlZGdlcztcbiAgfSxcblxuICAvLyBzZWFyY2ggdGhlIGdyYXBoIGxpa2UgalF1ZXJ5XG4gICQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApe1xuICAgIHZhciBlbGVzID0gdGhpcy5fcHJpdmF0ZS5lbGVtZW50cztcblxuICAgIGlmKCBzZWxlY3RvciApe1xuICAgICAgcmV0dXJuIGVsZXMuZmlsdGVyKCBzZWxlY3RvciApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlcy5zcGF3blNlbGYoKTtcbiAgICB9XG4gIH0sXG5cbiAgbXV0YWJsZUVsZW1lbnRzOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLl9wcml2YXRlLmVsZW1lbnRzO1xuICB9XG5cbn0pO1xuXG4vLyBhbGlhc2VzXG5jb3JlZm4uZWxlbWVudHMgPSBjb3JlZm4uZmlsdGVyID0gY29yZWZuLiQ7XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZWZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXMgPSByZXF1aXJlKCAnLi4vaXMnICk7XG52YXIgU3R5bGUgPSByZXF1aXJlKCAnLi4vc3R5bGUnICk7XG5cbnZhciBjb3JlZm4gPSAoe1xuXG4gIHN0eWxlOiBmdW5jdGlvbiggbmV3U3R5bGUgKXtcbiAgICBpZiggbmV3U3R5bGUgKXtcbiAgICAgIHZhciBzID0gdGhpcy5zZXRTdHlsZSggbmV3U3R5bGUgKTtcblxuICAgICAgcy51cGRhdGUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZS5zdHlsZTtcbiAgfSxcblxuICBzZXRTdHlsZTogZnVuY3Rpb24oIHN0eWxlICl7XG4gICAgdmFyIF9wID0gdGhpcy5fcHJpdmF0ZTtcblxuICAgIGlmKCBpcy5zdHlsZXNoZWV0KCBzdHlsZSApICl7XG4gICAgICBfcC5zdHlsZSA9IHN0eWxlLmdlbmVyYXRlU3R5bGUoIHRoaXMgKTtcblxuICAgIH0gZWxzZSBpZiggaXMuYXJyYXkoIHN0eWxlICkgKXtcbiAgICAgIF9wLnN0eWxlID0gU3R5bGUuZnJvbUpzb24oIHRoaXMsIHN0eWxlICk7XG5cbiAgICB9IGVsc2UgaWYoIGlzLnN0cmluZyggc3R5bGUgKSApe1xuICAgICAgX3Auc3R5bGUgPSBTdHlsZS5mcm9tU3RyaW5nKCB0aGlzLCBzdHlsZSApO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIF9wLnN0eWxlID0gU3R5bGUoIHRoaXMgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3Auc3R5bGU7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzID0gcmVxdWlyZSggJy4uL2lzJyApO1xuXG52YXIgY29yZWZuID0gKHtcblxuICBhdXRvbG9jazogZnVuY3Rpb24oIGJvb2wgKXtcbiAgICBpZiggYm9vbCAhPT0gdW5kZWZpbmVkICl7XG4gICAgICB0aGlzLl9wcml2YXRlLmF1dG9sb2NrID0gYm9vbCA/IHRydWUgOiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUuYXV0b2xvY2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG4gIH0sXG5cbiAgYXV0b3VuZ3JhYmlmeTogZnVuY3Rpb24oIGJvb2wgKXtcbiAgICBpZiggYm9vbCAhPT0gdW5kZWZpbmVkICl7XG4gICAgICB0aGlzLl9wcml2YXRlLmF1dG91bmdyYWJpZnkgPSBib29sID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZS5hdXRvdW5ncmFiaWZ5O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9LFxuXG4gIGF1dG91bnNlbGVjdGlmeTogZnVuY3Rpb24oIGJvb2wgKXtcbiAgICBpZiggYm9vbCAhPT0gdW5kZWZpbmVkICl7XG4gICAgICB0aGlzLl9wcml2YXRlLmF1dG91bnNlbGVjdGlmeSA9IGJvb2wgPyB0cnVlIDogZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlLmF1dG91bnNlbGVjdGlmeTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbiAgfSxcblxuICBwYW5uaW5nRW5hYmxlZDogZnVuY3Rpb24oIGJvb2wgKXtcbiAgICBpZiggYm9vbCAhPT0gdW5kZWZpbmVkICl7XG4gICAgICB0aGlzLl9wcml2YXRlLnBhbm5pbmdFbmFibGVkID0gYm9vbCA/IHRydWUgOiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUucGFubmluZ0VuYWJsZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG4gIH0sXG5cbiAgdXNlclBhbm5pbmdFbmFibGVkOiBmdW5jdGlvbiggYm9vbCApe1xuICAgIGlmKCBib29sICE9PSB1bmRlZmluZWQgKXtcbiAgICAgIHRoaXMuX3ByaXZhdGUudXNlclBhbm5pbmdFbmFibGVkID0gYm9vbCA/IHRydWUgOiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUudXNlclBhbm5pbmdFbmFibGVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9LFxuXG4gIHpvb21pbmdFbmFibGVkOiBmdW5jdGlvbiggYm9vbCApe1xuICAgIGlmKCBib29sICE9PSB1bmRlZmluZWQgKXtcbiAgICAgIHRoaXMuX3ByaXZhdGUuem9vbWluZ0VuYWJsZWQgPSBib29sID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZS56b29taW5nRW5hYmxlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbiAgfSxcblxuICB1c2VyWm9vbWluZ0VuYWJsZWQ6IGZ1bmN0aW9uKCBib29sICl7XG4gICAgaWYoIGJvb2wgIT09IHVuZGVmaW5lZCApe1xuICAgICAgdGhpcy5fcHJpdmF0ZS51c2VyWm9vbWluZ0VuYWJsZWQgPSBib29sID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZS51c2VyWm9vbWluZ0VuYWJsZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG4gIH0sXG5cbiAgYm94U2VsZWN0aW9uRW5hYmxlZDogZnVuY3Rpb24oIGJvb2wgKXtcbiAgICBpZiggYm9vbCAhPT0gdW5kZWZpbmVkICl7XG4gICAgICB0aGlzLl9wcml2YXRlLmJveFNlbGVjdGlvbkVuYWJsZWQgPSBib29sID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZS5ib3hTZWxlY3Rpb25FbmFibGVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9LFxuXG4gIHBhbjogZnVuY3Rpb24oKXtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgcGFuID0gdGhpcy5fcHJpdmF0ZS5wYW47XG4gICAgdmFyIGRpbSwgdmFsLCBkaW1zLCB4LCB5O1xuXG4gICAgc3dpdGNoKCBhcmdzLmxlbmd0aCApe1xuICAgIGNhc2UgMDogLy8gLnBhbigpXG4gICAgICByZXR1cm4gcGFuO1xuXG4gICAgY2FzZSAxOlxuXG4gICAgICBpZiggaXMuc3RyaW5nKCBhcmdzWzBdICkgKXsgLy8gLnBhbigneCcpXG4gICAgICAgIGRpbSA9IGFyZ3NbMF07XG4gICAgICAgIHJldHVybiBwYW5bIGRpbSBdO1xuXG4gICAgICB9IGVsc2UgaWYoIGlzLnBsYWluT2JqZWN0KCBhcmdzWzBdICkgKXsgLy8gLnBhbih7IHg6IDAsIHk6IDEwMCB9KVxuICAgICAgICBpZiggIXRoaXMuX3ByaXZhdGUucGFubmluZ0VuYWJsZWQgKXtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGRpbXMgPSBhcmdzWzBdO1xuICAgICAgICB4ID0gZGltcy54O1xuICAgICAgICB5ID0gZGltcy55O1xuXG4gICAgICAgIGlmKCBpcy5udW1iZXIoIHggKSApe1xuICAgICAgICAgIHBhbi54ID0geDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCBpcy5udW1iZXIoIHkgKSApe1xuICAgICAgICAgIHBhbi55ID0geTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJpZ2dlciggJ3BhbiB2aWV3cG9ydCcgKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAyOiAvLyAucGFuKCd4JywgMTAwKVxuICAgICAgaWYoICF0aGlzLl9wcml2YXRlLnBhbm5pbmdFbmFibGVkICl7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBkaW0gPSBhcmdzWzBdO1xuICAgICAgdmFsID0gYXJnc1sxXTtcblxuICAgICAgaWYoIChkaW0gPT09ICd4JyB8fCBkaW0gPT09ICd5JykgJiYgaXMubnVtYmVyKCB2YWwgKSApe1xuICAgICAgICBwYW5bIGRpbSBdID0gdmFsO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRyaWdnZXIoICdwYW4gdmlld3BvcnQnICk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhazsgLy8gaW52YWxpZFxuICAgIH1cblxuICAgIHRoaXMubm90aWZ5KCB7IC8vIG5vdGlmeSB0aGUgcmVuZGVyZXIgdGhhdCB0aGUgdmlld3BvcnQgY2hhbmdlZFxuICAgICAgdHlwZTogJ3ZpZXdwb3J0J1xuICAgIH0gKTtcblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9LFxuXG4gIHBhbkJ5OiBmdW5jdGlvbiggcGFyYW1zICl7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIHBhbiA9IHRoaXMuX3ByaXZhdGUucGFuO1xuICAgIHZhciBkaW0sIHZhbCwgZGltcywgeCwgeTtcblxuICAgIGlmKCAhdGhpcy5fcHJpdmF0ZS5wYW5uaW5nRW5hYmxlZCApe1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3dpdGNoKCBhcmdzLmxlbmd0aCApe1xuICAgIGNhc2UgMTpcblxuICAgICAgaWYoIGlzLnBsYWluT2JqZWN0KCBhcmdzWzBdICkgKXsgLy8gLnBhbkJ5KHsgeDogMCwgeTogMTAwIH0pXG4gICAgICAgIGRpbXMgPSBhcmdzWzBdO1xuICAgICAgICB4ID0gZGltcy54O1xuICAgICAgICB5ID0gZGltcy55O1xuXG4gICAgICAgIGlmKCBpcy5udW1iZXIoIHggKSApe1xuICAgICAgICAgIHBhbi54ICs9IHg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiggaXMubnVtYmVyKCB5ICkgKXtcbiAgICAgICAgICBwYW4ueSArPSB5O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKCAncGFuIHZpZXdwb3J0JyApO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDI6IC8vIC5wYW5CeSgneCcsIDEwMClcbiAgICAgIGRpbSA9IGFyZ3NbMF07XG4gICAgICB2YWwgPSBhcmdzWzFdO1xuXG4gICAgICBpZiggKGRpbSA9PT0gJ3gnIHx8IGRpbSA9PT0gJ3knKSAmJiBpcy5udW1iZXIoIHZhbCApICl7XG4gICAgICAgIHBhblsgZGltIF0gKz0gdmFsO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRyaWdnZXIoICdwYW4gdmlld3BvcnQnICk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhazsgLy8gaW52YWxpZFxuICAgIH1cblxuICAgIHRoaXMubm90aWZ5KCB7IC8vIG5vdGlmeSB0aGUgcmVuZGVyZXIgdGhhdCB0aGUgdmlld3BvcnQgY2hhbmdlZFxuICAgICAgdHlwZTogJ3ZpZXdwb3J0J1xuICAgIH0gKTtcblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9LFxuXG4gIGZpdDogZnVuY3Rpb24oIGVsZW1lbnRzLCBwYWRkaW5nICl7XG4gICAgdmFyIHZpZXdwb3J0U3RhdGUgPSB0aGlzLmdldEZpdFZpZXdwb3J0KCBlbGVtZW50cywgcGFkZGluZyApO1xuXG4gICAgaWYoIHZpZXdwb3J0U3RhdGUgKXtcbiAgICAgIHZhciBfcCA9IHRoaXMuX3ByaXZhdGU7XG4gICAgICBfcC56b29tID0gdmlld3BvcnRTdGF0ZS56b29tO1xuICAgICAgX3AucGFuID0gdmlld3BvcnRTdGF0ZS5wYW47XG5cbiAgICAgIHRoaXMudHJpZ2dlciggJ3BhbiB6b29tIHZpZXdwb3J0JyApO1xuXG4gICAgICB0aGlzLm5vdGlmeSggeyAvLyBub3RpZnkgdGhlIHJlbmRlcmVyIHRoYXQgdGhlIHZpZXdwb3J0IGNoYW5nZWRcbiAgICAgICAgdHlwZTogJ3ZpZXdwb3J0J1xuICAgICAgfSApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9LFxuXG4gIGdldEZpdFZpZXdwb3J0OiBmdW5jdGlvbiggZWxlbWVudHMsIHBhZGRpbmcgKXtcbiAgICBpZiggaXMubnVtYmVyKCBlbGVtZW50cyApICYmIHBhZGRpbmcgPT09IHVuZGVmaW5lZCApeyAvLyBlbGVtZW50cyBpcyBvcHRpb25hbFxuICAgICAgcGFkZGluZyA9IGVsZW1lbnRzO1xuICAgICAgZWxlbWVudHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYoICF0aGlzLl9wcml2YXRlLnBhbm5pbmdFbmFibGVkIHx8ICF0aGlzLl9wcml2YXRlLnpvb21pbmdFbmFibGVkICl7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGJiO1xuXG4gICAgaWYoIGlzLnN0cmluZyggZWxlbWVudHMgKSApe1xuICAgICAgdmFyIHNlbCA9IGVsZW1lbnRzO1xuICAgICAgZWxlbWVudHMgPSB0aGlzLiQoIHNlbCApO1xuXG4gICAgfSBlbHNlIGlmKCBpcy5ib3VuZGluZ0JveCggZWxlbWVudHMgKSApeyAvLyBhc3N1bWUgYmJcbiAgICAgIHZhciBiYmUgPSBlbGVtZW50cztcbiAgICAgIGJiID0ge1xuICAgICAgICB4MTogYmJlLngxLFxuICAgICAgICB5MTogYmJlLnkxLFxuICAgICAgICB4MjogYmJlLngyLFxuICAgICAgICB5MjogYmJlLnkyXG4gICAgICB9O1xuXG4gICAgICBiYi53ID0gYmIueDIgLSBiYi54MTtcbiAgICAgIGJiLmggPSBiYi55MiAtIGJiLnkxO1xuXG4gICAgfSBlbHNlIGlmKCAhaXMuZWxlbWVudE9yQ29sbGVjdGlvbiggZWxlbWVudHMgKSApe1xuICAgICAgZWxlbWVudHMgPSB0aGlzLm11dGFibGVFbGVtZW50cygpO1xuICAgIH1cblxuICAgIGJiID0gYmIgfHwgZWxlbWVudHMuYm91bmRpbmdCb3goKTtcblxuICAgIHZhciB3ID0gdGhpcy53aWR0aCgpO1xuICAgIHZhciBoID0gdGhpcy5oZWlnaHQoKTtcbiAgICB2YXIgem9vbTtcbiAgICBwYWRkaW5nID0gaXMubnVtYmVyKCBwYWRkaW5nICkgPyBwYWRkaW5nIDogMDtcblxuICAgIGlmKCAhaXNOYU4oIHcgKSAmJiAhaXNOYU4oIGggKSAmJiB3ID4gMCAmJiBoID4gMCAmJiAhaXNOYU4oIGJiLncgKSAmJiAhaXNOYU4oIGJiLmggKSAmJiAgYmIudyA+IDAgJiYgYmIuaCA+IDAgKXtcbiAgICAgIHpvb20gPSBNYXRoLm1pbiggKHcgLSAyICogcGFkZGluZykgLyBiYi53LCAoaCAtIDIgKiBwYWRkaW5nKSAvIGJiLmggKTtcblxuICAgICAgLy8gY3JvcCB6b29tXG4gICAgICB6b29tID0gem9vbSA+IHRoaXMuX3ByaXZhdGUubWF4Wm9vbSA/IHRoaXMuX3ByaXZhdGUubWF4Wm9vbSA6IHpvb207XG4gICAgICB6b29tID0gem9vbSA8IHRoaXMuX3ByaXZhdGUubWluWm9vbSA/IHRoaXMuX3ByaXZhdGUubWluWm9vbSA6IHpvb207XG5cbiAgICAgIHZhciBwYW4gPSB7IC8vIG5vdyBwYW4gdG8gbWlkZGxlXG4gICAgICAgIHg6ICh3IC0gem9vbSAqICggYmIueDEgKyBiYi54MiApKSAvIDIsXG4gICAgICAgIHk6IChoIC0gem9vbSAqICggYmIueTEgKyBiYi55MiApKSAvIDJcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHpvb206IHpvb20sXG4gICAgICAgIHBhbjogcGFuXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfSxcblxuICBtaW5ab29tOiBmdW5jdGlvbiggem9vbSApe1xuICAgIGlmKCB6b29tID09PSB1bmRlZmluZWQgKXtcbiAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlLm1pblpvb207XG4gICAgfSBlbHNlIGlmKCBpcy5udW1iZXIoIHpvb20gKSApe1xuICAgICAgdGhpcy5fcHJpdmF0ZS5taW5ab29tID0gem9vbTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBtYXhab29tOiBmdW5jdGlvbiggem9vbSApe1xuICAgIGlmKCB6b29tID09PSB1bmRlZmluZWQgKXtcbiAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlLm1heFpvb207XG4gICAgfSBlbHNlIGlmKCBpcy5udW1iZXIoIHpvb20gKSApe1xuICAgICAgdGhpcy5fcHJpdmF0ZS5tYXhab29tID0gem9vbTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICB6b29tOiBmdW5jdGlvbiggcGFyYW1zICl7XG4gICAgdmFyIHBvczsgLy8gaW4gcmVuZGVyZWQgcHhcbiAgICB2YXIgem9vbTtcblxuICAgIGlmKCBwYXJhbXMgPT09IHVuZGVmaW5lZCApeyAvLyB0aGVuIGdldCB0aGUgem9vbVxuICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUuem9vbTtcblxuICAgIH0gZWxzZSBpZiggaXMubnVtYmVyKCBwYXJhbXMgKSApeyAvLyB0aGVuIHNldCB0aGUgem9vbVxuICAgICAgem9vbSA9IHBhcmFtcztcblxuICAgIH0gZWxzZSBpZiggaXMucGxhaW5PYmplY3QoIHBhcmFtcyApICl7IC8vIHRoZW4gem9vbSBhYm91dCBhIHBvaW50XG4gICAgICB6b29tID0gcGFyYW1zLmxldmVsO1xuXG4gICAgICBpZiggcGFyYW1zLnBvc2l0aW9uICl7XG4gICAgICAgIHZhciBwID0gcGFyYW1zLnBvc2l0aW9uO1xuICAgICAgICB2YXIgcGFuID0gdGhpcy5fcHJpdmF0ZS5wYW47XG4gICAgICAgIHZhciB6ID0gdGhpcy5fcHJpdmF0ZS56b29tO1xuXG4gICAgICAgIHBvcyA9IHsgLy8gY29udmVydCB0byByZW5kZXJlZCBweFxuICAgICAgICAgIHg6IHAueCAqIHogKyBwYW4ueCxcbiAgICAgICAgICB5OiBwLnkgKiB6ICsgcGFuLnlcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiggcGFyYW1zLnJlbmRlcmVkUG9zaXRpb24gKXtcbiAgICAgICAgcG9zID0gcGFyYW1zLnJlbmRlcmVkUG9zaXRpb247XG4gICAgICB9XG5cbiAgICAgIGlmKCBwb3MgJiYgIXRoaXMuX3ByaXZhdGUucGFubmluZ0VuYWJsZWQgKXtcbiAgICAgICAgcmV0dXJuIHRoaXM7IC8vIHBhbm5pbmcgZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiggIXRoaXMuX3ByaXZhdGUuem9vbWluZ0VuYWJsZWQgKXtcbiAgICAgIHJldHVybiB0aGlzOyAvLyB6b29taW5nIGRpc2FibGVkXG4gICAgfVxuXG4gICAgaWYoICFpcy5udW1iZXIoIHpvb20gKSB8fCAoIHBvcyAmJiAoIWlzLm51bWJlciggcG9zLnggKSB8fCAhaXMubnVtYmVyKCBwb3MueSApKSApICl7XG4gICAgICByZXR1cm4gdGhpczsgLy8gY2FuJ3Qgem9vbSB3aXRoIGludmFsaWQgcGFyYW1zXG4gICAgfVxuXG4gICAgLy8gY3JvcCB6b29tXG4gICAgem9vbSA9IHpvb20gPiB0aGlzLl9wcml2YXRlLm1heFpvb20gPyB0aGlzLl9wcml2YXRlLm1heFpvb20gOiB6b29tO1xuICAgIHpvb20gPSB6b29tIDwgdGhpcy5fcHJpdmF0ZS5taW5ab29tID8gdGhpcy5fcHJpdmF0ZS5taW5ab29tIDogem9vbTtcblxuICAgIGlmKCBwb3MgKXsgLy8gc2V0IHpvb20gYWJvdXQgcG9zaXRpb25cbiAgICAgIHZhciBwYW4xID0gdGhpcy5fcHJpdmF0ZS5wYW47XG4gICAgICB2YXIgem9vbTEgPSB0aGlzLl9wcml2YXRlLnpvb207XG4gICAgICB2YXIgem9vbTIgPSB6b29tO1xuXG4gICAgICB2YXIgcGFuMiA9IHtcbiAgICAgICAgeDogLXpvb20yIC8gem9vbTEgKiAocG9zLnggLSBwYW4xLngpICsgcG9zLngsXG4gICAgICAgIHk6IC16b29tMiAvIHpvb20xICogKHBvcy55IC0gcGFuMS55KSArIHBvcy55XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9wcml2YXRlLnpvb20gPSB6b29tO1xuICAgICAgdGhpcy5fcHJpdmF0ZS5wYW4gPSBwYW4yO1xuXG4gICAgICB2YXIgcG9zQ2hhbmdlZCA9IHBhbjEueCAhPT0gcGFuMi54IHx8IHBhbjEueSAhPT0gcGFuMi55O1xuICAgICAgdGhpcy50cmlnZ2VyKCAnIHpvb20gJyArIChwb3NDaGFuZ2VkID8gJyBwYW4gJyA6ICcnKSArICcgdmlld3BvcnQgJyApO1xuXG4gICAgfSBlbHNlIHsgLy8ganVzdCBzZXQgdGhlIHpvb21cbiAgICAgIHRoaXMuX3ByaXZhdGUuem9vbSA9IHpvb207XG4gICAgICB0aGlzLnRyaWdnZXIoICd6b29tIHZpZXdwb3J0JyApO1xuICAgIH1cblxuICAgIHRoaXMubm90aWZ5KCB7IC8vIG5vdGlmeSB0aGUgcmVuZGVyZXIgdGhhdCB0aGUgdmlld3BvcnQgY2hhbmdlZFxuICAgICAgdHlwZTogJ3ZpZXdwb3J0J1xuICAgIH0gKTtcblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9LFxuXG4gIHZpZXdwb3J0OiBmdW5jdGlvbiggb3B0cyApe1xuICAgIHZhciBfcCA9IHRoaXMuX3ByaXZhdGU7XG4gICAgdmFyIHpvb21EZWZkID0gdHJ1ZTtcbiAgICB2YXIgcGFuRGVmZCA9IHRydWU7XG4gICAgdmFyIGV2ZW50cyA9IFtdOyAvLyB0byB0cmlnZ2VyXG4gICAgdmFyIHpvb21GYWlsZWQgPSBmYWxzZTtcbiAgICB2YXIgcGFuRmFpbGVkID0gZmFsc2U7XG5cbiAgICBpZiggIW9wdHMgKXsgcmV0dXJuIHRoaXM7IH1cbiAgICBpZiggIWlzLm51bWJlciggb3B0cy56b29tICkgKXsgem9vbURlZmQgPSBmYWxzZTsgfVxuICAgIGlmKCAhaXMucGxhaW5PYmplY3QoIG9wdHMucGFuICkgKXsgcGFuRGVmZCA9IGZhbHNlOyB9XG4gICAgaWYoICF6b29tRGVmZCAmJiAhcGFuRGVmZCApeyByZXR1cm4gdGhpczsgfVxuXG4gICAgaWYoIHpvb21EZWZkICl7XG4gICAgICB2YXIgeiA9IG9wdHMuem9vbTtcblxuICAgICAgaWYoIHogPCBfcC5taW5ab29tIHx8IHogPiBfcC5tYXhab29tIHx8ICFfcC56b29taW5nRW5hYmxlZCApe1xuICAgICAgICB6b29tRmFpbGVkID0gdHJ1ZTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3Auem9vbSA9IHo7XG5cbiAgICAgICAgZXZlbnRzLnB1c2goICd6b29tJyApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmKCBwYW5EZWZkICYmICghem9vbUZhaWxlZCB8fCAhb3B0cy5jYW5jZWxPbkZhaWxlZFpvb20pICYmIF9wLnBhbm5pbmdFbmFibGVkICl7XG4gICAgICB2YXIgcCA9IG9wdHMucGFuO1xuXG4gICAgICBpZiggaXMubnVtYmVyKCBwLnggKSApe1xuICAgICAgICBfcC5wYW4ueCA9IHAueDtcbiAgICAgICAgcGFuRmFpbGVkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmKCBpcy5udW1iZXIoIHAueSApICl7XG4gICAgICAgIF9wLnBhbi55ID0gcC55O1xuICAgICAgICBwYW5GYWlsZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYoICFwYW5GYWlsZWQgKXtcbiAgICAgICAgZXZlbnRzLnB1c2goICdwYW4nICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYoIGV2ZW50cy5sZW5ndGggPiAwICl7XG4gICAgICBldmVudHMucHVzaCggJ3ZpZXdwb3J0JyApO1xuICAgICAgdGhpcy50cmlnZ2VyKCBldmVudHMuam9pbiggJyAnICkgKTtcblxuICAgICAgdGhpcy5ub3RpZnkoIHtcbiAgICAgICAgdHlwZTogJ3ZpZXdwb3J0J1xuICAgICAgfSApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9LFxuXG4gIGNlbnRlcjogZnVuY3Rpb24oIGVsZW1lbnRzICl7XG4gICAgdmFyIHBhbiA9IHRoaXMuZ2V0Q2VudGVyUGFuKCBlbGVtZW50cyApO1xuXG4gICAgaWYoIHBhbiApe1xuICAgICAgdGhpcy5fcHJpdmF0ZS5wYW4gPSBwYW47XG5cbiAgICAgIHRoaXMudHJpZ2dlciggJ3BhbiB2aWV3cG9ydCcgKTtcblxuICAgICAgdGhpcy5ub3RpZnkoIHsgLy8gbm90aWZ5IHRoZSByZW5kZXJlciB0aGF0IHRoZSB2aWV3cG9ydCBjaGFuZ2VkXG4gICAgICAgIHR5cGU6ICd2aWV3cG9ydCdcbiAgICAgIH0gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbiAgfSxcblxuICBnZXRDZW50ZXJQYW46IGZ1bmN0aW9uKCBlbGVtZW50cywgem9vbSApe1xuICAgIGlmKCAhdGhpcy5fcHJpdmF0ZS5wYW5uaW5nRW5hYmxlZCApe1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmKCBpcy5zdHJpbmcoIGVsZW1lbnRzICkgKXtcbiAgICAgIHZhciBzZWxlY3RvciA9IGVsZW1lbnRzO1xuICAgICAgZWxlbWVudHMgPSB0aGlzLm11dGFibGVFbGVtZW50cygpLmZpbHRlciggc2VsZWN0b3IgKTtcbiAgICB9IGVsc2UgaWYoICFpcy5lbGVtZW50T3JDb2xsZWN0aW9uKCBlbGVtZW50cyApICl7XG4gICAgICBlbGVtZW50cyA9IHRoaXMubXV0YWJsZUVsZW1lbnRzKCk7XG4gICAgfVxuXG4gICAgdmFyIGJiID0gZWxlbWVudHMuYm91bmRpbmdCb3goKTtcbiAgICB2YXIgdyA9IHRoaXMud2lkdGgoKTtcbiAgICB2YXIgaCA9IHRoaXMuaGVpZ2h0KCk7XG4gICAgem9vbSA9IHpvb20gPT09IHVuZGVmaW5lZCA/IHRoaXMuX3ByaXZhdGUuem9vbSA6IHpvb207XG5cbiAgICB2YXIgcGFuID0geyAvLyBtaWRkbGVcbiAgICAgIHg6ICh3IC0gem9vbSAqICggYmIueDEgKyBiYi54MiApKSAvIDIsXG4gICAgICB5OiAoaCAtIHpvb20gKiAoIGJiLnkxICsgYmIueTIgKSkgLyAyXG4gICAgfTtcblxuICAgIHJldHVybiBwYW47XG4gIH0sXG5cbiAgcmVzZXQ6IGZ1bmN0aW9uKCl7XG4gICAgaWYoICF0aGlzLl9wcml2YXRlLnBhbm5pbmdFbmFibGVkIHx8ICF0aGlzLl9wcml2YXRlLnpvb21pbmdFbmFibGVkICl7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLnZpZXdwb3J0KCB7XG4gICAgICBwYW46IHsgeDogMCwgeTogMCB9LFxuICAgICAgem9vbTogMVxuICAgIH0gKTtcblxuICAgIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xuICB9LFxuXG4gIGludmFsaWRhdGVTaXplOiBmdW5jdGlvbigpe1xuICAgIHRoaXMuX3ByaXZhdGUuc2l6ZUNhY2hlID0gbnVsbDtcbiAgfSxcblxuICBzaXplOiBmdW5jdGlvbigpe1xuICAgIHZhciBfcCA9IHRoaXMuX3ByaXZhdGU7XG4gICAgdmFyIGNvbnRhaW5lciA9IF9wLmNvbnRhaW5lcjtcblxuICAgIHJldHVybiAoIF9wLnNpemVDYWNoZSA9IF9wLnNpemVDYWNoZSB8fCAoIGNvbnRhaW5lciA/IHtcbiAgICAgIHdpZHRoOiBjb250YWluZXIuY2xpZW50V2lkdGgsXG4gICAgICBoZWlnaHQ6IGNvbnRhaW5lci5jbGllbnRIZWlnaHRcbiAgICB9IDogeyAvLyBmYWxsYmFjayBpZiBubyBjb250YWluZXIgKG5vdCAwIGIvYyBjYW4gYmUgdXNlZCBmb3IgZGl2aWRpbmcgZXRjKVxuICAgICAgd2lkdGg6IDEsXG4gICAgICBoZWlnaHQ6IDFcbiAgICB9ICkgKTtcbiAgfSxcblxuICB3aWR0aDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5zaXplKCkud2lkdGg7XG4gIH0sXG5cbiAgaGVpZ2h0OiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLnNpemUoKS5oZWlnaHQ7XG4gIH0sXG5cbiAgZXh0ZW50OiBmdW5jdGlvbigpe1xuICAgIHZhciBwYW4gPSB0aGlzLl9wcml2YXRlLnBhbjtcbiAgICB2YXIgem9vbSA9IHRoaXMuX3ByaXZhdGUuem9vbTtcbiAgICB2YXIgcmIgPSB0aGlzLnJlbmRlcmVkRXh0ZW50KCk7XG5cbiAgICB2YXIgYiA9IHtcbiAgICAgIHgxOiAoIHJiLngxIC0gcGFuLnggKSAvIHpvb20sXG4gICAgICB4MjogKCByYi54MiAtIHBhbi54ICkgLyB6b29tLFxuICAgICAgeTE6ICggcmIueTEgLSBwYW4ueSApIC8gem9vbSxcbiAgICAgIHkyOiAoIHJiLnkyIC0gcGFuLnkgKSAvIHpvb21cbiAgICB9O1xuXG4gICAgYi53ID0gYi54MiAtIGIueDE7XG4gICAgYi5oID0gYi55MiAtIGIueTE7XG5cbiAgICByZXR1cm4gYjtcbiAgfSxcblxuICByZW5kZXJlZEV4dGVudDogZnVuY3Rpb24oKXtcbiAgICB2YXIgd2lkdGggPSB0aGlzLndpZHRoKCk7XG4gICAgdmFyIGhlaWdodCA9IHRoaXMuaGVpZ2h0KCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgeDE6IDAsXG4gICAgICB5MTogMCxcbiAgICAgIHgyOiB3aWR0aCxcbiAgICAgIHkyOiBoZWlnaHQsXG4gICAgICB3OiB3aWR0aCxcbiAgICAgIGg6IGhlaWdodFxuICAgIH07XG4gIH1cbn0pO1xuXG4vLyBhbGlhc2VzXG5jb3JlZm4uY2VudHJlID0gY29yZWZuLmNlbnRlcjtcblxuLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbmNvcmVmbi5hdXRvbG9ja05vZGVzID0gY29yZWZuLmF1dG9sb2NrO1xuY29yZWZuLmF1dG91bmdyYWJpZnlOb2RlcyA9IGNvcmVmbi5hdXRvdW5ncmFiaWZ5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gdXNlIHRoaXMgbW9kdWxlIHRvIGNoZXJyeSBwaWNrIGZ1bmN0aW9ucyBpbnRvIHlvdXIgcHJvdG90eXBlXG4vLyAodXNlZnVsIGZvciBmdW5jdGlvbnMgc2hhcmVkIGJldHdlZW4gdGhlIGNvcmUgYW5kIGNvbGxlY3Rpb25zLCBmb3IgZXhhbXBsZSlcblxuLy8gZS5nLlxuLy8gdmFyIGZvbyA9IGRlZmluZS5mb28oeyAvKiBwYXJhbXMuLi4gKi8gfSlcblxudmFyIHV0aWwgPSByZXF1aXJlKCAnLi91dGlsJyApO1xudmFyIGlzID0gcmVxdWlyZSggJy4vaXMnICk7XG52YXIgU2VsZWN0b3IgPSByZXF1aXJlKCAnLi9zZWxlY3RvcicgKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSggJy4vcHJvbWlzZScgKTtcbnZhciBFdmVudCA9IHJlcXVpcmUoICcuL2V2ZW50JyApO1xudmFyIEFuaW1hdGlvbiA9IHJlcXVpcmUoICcuL2FuaW1hdGlvbicgKTtcblxudmFyIGRlZmluZSA9IHtcblxuICAvLyBhY2Nlc3MgZGF0YSBmaWVsZFxuICBkYXRhOiBmdW5jdGlvbiggcGFyYW1zICl7XG4gICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgZmllbGQ6ICdkYXRhJyxcbiAgICAgIGJpbmRpbmdFdmVudDogJ2RhdGEnLFxuICAgICAgYWxsb3dCaW5kaW5nOiBmYWxzZSxcbiAgICAgIGFsbG93U2V0dGluZzogZmFsc2UsXG4gICAgICBhbGxvd0dldHRpbmc6IGZhbHNlLFxuICAgICAgc2V0dGluZ0V2ZW50OiAnZGF0YScsXG4gICAgICBzZXR0aW5nVHJpZ2dlcnNFdmVudDogZmFsc2UsXG4gICAgICB0cmlnZ2VyRm5OYW1lOiAndHJpZ2dlcicsXG4gICAgICBpbW11dGFibGVLZXlzOiB7fSwgLy8ga2V5ID0+IHRydWUgaWYgaW1tdXRhYmxlXG4gICAgICB1cGRhdGVTdHlsZTogZmFsc2UsXG4gICAgICBvblNldDogZnVuY3Rpb24oIHNlbGYgKXt9LFxuICAgICAgY2FuU2V0OiBmdW5jdGlvbiggc2VsZiApeyByZXR1cm4gdHJ1ZTsgfVxuICAgIH07XG4gICAgcGFyYW1zID0gdXRpbC5leHRlbmQoIHt9LCBkZWZhdWx0cywgcGFyYW1zICk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gZGF0YUltcGwoIG5hbWUsIHZhbHVlICl7XG4gICAgICB2YXIgcCA9IHBhcmFtcztcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBzZWxmSXNBcnJheUxpa2UgPSBzZWxmLmxlbmd0aCAhPT0gdW5kZWZpbmVkO1xuICAgICAgdmFyIGFsbCA9IHNlbGZJc0FycmF5TGlrZSA/IHNlbGYgOiBbIHNlbGYgXTsgLy8gcHV0IGluIGFycmF5IGlmIG5vdCBhcnJheS1saWtlXG4gICAgICB2YXIgc2luZ2xlID0gc2VsZklzQXJyYXlMaWtlID8gc2VsZlswXSA6IHNlbGY7XG5cbiAgICAgIC8vIC5kYXRhKCdmb28nLCAuLi4pXG4gICAgICBpZiggaXMuc3RyaW5nKCBuYW1lICkgKXsgLy8gc2V0IG9yIGdldCBwcm9wZXJ0eVxuXG4gICAgICAgIC8vIC5kYXRhKCdmb28nKVxuICAgICAgICBpZiggcC5hbGxvd0dldHRpbmcgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApeyAvLyBnZXRcblxuICAgICAgICAgIHZhciByZXQ7XG4gICAgICAgICAgaWYoIHNpbmdsZSApe1xuICAgICAgICAgICAgcmV0ID0gc2luZ2xlLl9wcml2YXRlWyBwLmZpZWxkIF1bIG5hbWUgXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJldDtcblxuICAgICAgICAvLyAuZGF0YSgnZm9vJywgJ2JhcicpXG4gICAgICAgIH0gZWxzZSBpZiggcC5hbGxvd1NldHRpbmcgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCApeyAvLyBzZXRcbiAgICAgICAgICB2YXIgdmFsaWQgPSAhcC5pbW11dGFibGVLZXlzWyBuYW1lIF07XG4gICAgICAgICAgaWYoIHZhbGlkICl7XG4gICAgICAgICAgICBmb3IoIHZhciBpID0gMCwgbCA9IGFsbC5sZW5ndGg7IGkgPCBsOyBpKysgKXtcbiAgICAgICAgICAgICAgaWYoIHAuY2FuU2V0KCBhbGxbIGkgXSApICl7XG4gICAgICAgICAgICAgICAgYWxsWyBpIF0uX3ByaXZhdGVbIHAuZmllbGQgXVsgbmFtZSBdID0gdmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdXBkYXRlIG1hcHBlcnMgaWYgYXNrZWRcbiAgICAgICAgICAgIGlmKCBwLnVwZGF0ZVN0eWxlICl7IHNlbGYudXBkYXRlU3R5bGUoKTsgfVxuXG4gICAgICAgICAgICAvLyBjYWxsIG9uU2V0IGNhbGxiYWNrXG4gICAgICAgICAgICBwLm9uU2V0KCBzZWxmICk7XG5cbiAgICAgICAgICAgIGlmKCBwLnNldHRpbmdUcmlnZ2Vyc0V2ZW50ICl7XG4gICAgICAgICAgICAgIHNlbGZbIHAudHJpZ2dlckZuTmFtZSBdKCBwLnNldHRpbmdFdmVudCApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAvLyAuZGF0YSh7ICdmb28nOiAnYmFyJyB9KVxuICAgICAgfSBlbHNlIGlmKCBwLmFsbG93U2V0dGluZyAmJiBpcy5wbGFpbk9iamVjdCggbmFtZSApICl7IC8vIGV4dGVuZFxuICAgICAgICB2YXIgb2JqID0gbmFtZTtcbiAgICAgICAgdmFyIGssIHY7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoIG9iaiApO1xuXG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKyApe1xuICAgICAgICAgIGsgPSBrZXlzWyBpIF07XG4gICAgICAgICAgdiA9IG9ialsgayBdO1xuXG4gICAgICAgICAgdmFyIHZhbGlkID0gIXAuaW1tdXRhYmxlS2V5c1sgayBdO1xuICAgICAgICAgIGlmKCB2YWxpZCApe1xuICAgICAgICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBhbGwubGVuZ3RoOyBqKysgKXtcbiAgICAgICAgICAgICAgdmFyIGVsZSA9IGFsbFtqXTtcblxuICAgICAgICAgICAgICBpZiggcC5jYW5TZXQoIGVsZSApICl7XG4gICAgICAgICAgICAgICAgZWxlLl9wcml2YXRlWyBwLmZpZWxkIF1bIGsgXSA9IHY7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgbWFwcGVycyBpZiBhc2tlZFxuICAgICAgICBpZiggcC51cGRhdGVTdHlsZSApeyBzZWxmLnVwZGF0ZVN0eWxlKCk7IH1cblxuICAgICAgICAvLyBjYWxsIG9uU2V0IGNhbGxiYWNrXG4gICAgICAgIHAub25TZXQoIHNlbGYgKTtcblxuICAgICAgICBpZiggcC5zZXR0aW5nVHJpZ2dlcnNFdmVudCApe1xuICAgICAgICAgIHNlbGZbIHAudHJpZ2dlckZuTmFtZSBdKCBwLnNldHRpbmdFdmVudCApO1xuICAgICAgICB9XG5cbiAgICAgIC8vIC5kYXRhKGZ1bmN0aW9uKCl7IC4uLiB9KVxuICAgICAgfSBlbHNlIGlmKCBwLmFsbG93QmluZGluZyAmJiBpcy5mbiggbmFtZSApICl7IC8vIGJpbmQgdG8gZXZlbnRcbiAgICAgICAgdmFyIGZuID0gbmFtZTtcbiAgICAgICAgc2VsZi5vbiggcC5iaW5kaW5nRXZlbnQsIGZuICk7XG5cbiAgICAgIC8vIC5kYXRhKClcbiAgICAgIH0gZWxzZSBpZiggcC5hbGxvd0dldHRpbmcgJiYgbmFtZSA9PT0gdW5kZWZpbmVkICl7IC8vIGdldCB3aG9sZSBvYmplY3RcbiAgICAgICAgdmFyIHJldDtcbiAgICAgICAgaWYoIHNpbmdsZSApe1xuICAgICAgICAgIHJldCA9IHNpbmdsZS5fcHJpdmF0ZVsgcC5maWVsZCBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmOyAvLyBtYWludGFpbiBjaGFpbmFiaWxpdHlcbiAgICB9OyAvLyBmdW5jdGlvblxuICB9LCAvLyBkYXRhXG5cbiAgLy8gcmVtb3ZlIGRhdGEgZmllbGRcbiAgcmVtb3ZlRGF0YTogZnVuY3Rpb24oIHBhcmFtcyApe1xuICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgIGZpZWxkOiAnZGF0YScsXG4gICAgICBldmVudDogJ2RhdGEnLFxuICAgICAgdHJpZ2dlckZuTmFtZTogJ3RyaWdnZXInLFxuICAgICAgdHJpZ2dlckV2ZW50OiBmYWxzZSxcbiAgICAgIGltbXV0YWJsZUtleXM6IHt9IC8vIGtleSA9PiB0cnVlIGlmIGltbXV0YWJsZVxuICAgIH07XG4gICAgcGFyYW1zID0gdXRpbC5leHRlbmQoIHt9LCBkZWZhdWx0cywgcGFyYW1zICk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gcmVtb3ZlRGF0YUltcGwoIG5hbWVzICl7XG4gICAgICB2YXIgcCA9IHBhcmFtcztcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBzZWxmSXNBcnJheUxpa2UgPSBzZWxmLmxlbmd0aCAhPT0gdW5kZWZpbmVkO1xuICAgICAgdmFyIGFsbCA9IHNlbGZJc0FycmF5TGlrZSA/IHNlbGYgOiBbIHNlbGYgXTsgLy8gcHV0IGluIGFycmF5IGlmIG5vdCBhcnJheS1saWtlXG5cbiAgICAgIC8vIC5yZW1vdmVEYXRhKCdmb28gYmFyJylcbiAgICAgIGlmKCBpcy5zdHJpbmcoIG5hbWVzICkgKXsgLy8gdGhlbiBnZXQgdGhlIGxpc3Qgb2Yga2V5cywgYW5kIGRlbGV0ZSB0aGVtXG4gICAgICAgIHZhciBrZXlzID0gbmFtZXMuc3BsaXQoIC9cXHMrLyApO1xuICAgICAgICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuXG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbDsgaSsrICl7IC8vIGRlbGV0ZSBlYWNoIG5vbi1lbXB0eSBrZXlcbiAgICAgICAgICB2YXIga2V5ID0ga2V5c1sgaSBdO1xuICAgICAgICAgIGlmKCBpcy5lbXB0eVN0cmluZygga2V5ICkgKXsgY29udGludWU7IH1cblxuICAgICAgICAgIHZhciB2YWxpZCA9ICFwLmltbXV0YWJsZUtleXNbIGtleSBdOyAvLyBub3QgdmFsaWQgaWYgaW1tdXRhYmxlXG4gICAgICAgICAgaWYoIHZhbGlkICl7XG4gICAgICAgICAgICBmb3IoIHZhciBpX2EgPSAwLCBsX2EgPSBhbGwubGVuZ3RoOyBpX2EgPCBsX2E7IGlfYSsrICl7XG4gICAgICAgICAgICAgIGFsbFsgaV9hIF0uX3ByaXZhdGVbIHAuZmllbGQgXVsga2V5IF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIHAudHJpZ2dlckV2ZW50ICl7XG4gICAgICAgICAgc2VsZlsgcC50cmlnZ2VyRm5OYW1lIF0oIHAuZXZlbnQgKTtcbiAgICAgICAgfVxuXG4gICAgICAvLyAucmVtb3ZlRGF0YSgpXG4gICAgICB9IGVsc2UgaWYoIG5hbWVzID09PSB1bmRlZmluZWQgKXsgLy8gdGhlbiBkZWxldGUgYWxsIGtleXNcblxuICAgICAgICBmb3IoIHZhciBpX2EgPSAwLCBsX2EgPSBhbGwubGVuZ3RoOyBpX2EgPCBsX2E7IGlfYSsrICl7XG4gICAgICAgICAgdmFyIF9wcml2YXRlRmllbGRzID0gYWxsWyBpX2EgXS5fcHJpdmF0ZVsgcC5maWVsZCBdO1xuICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoIF9wcml2YXRlRmllbGRzICk7XG5cbiAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgdmFyIHZhbGlkS2V5VG9EZWxldGUgPSAhcC5pbW11dGFibGVLZXlzWyBrZXkgXTtcblxuICAgICAgICAgICAgaWYoIHZhbGlkS2V5VG9EZWxldGUgKXtcbiAgICAgICAgICAgICAgX3ByaXZhdGVGaWVsZHNbIGtleSBdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCBwLnRyaWdnZXJFdmVudCApe1xuICAgICAgICAgIHNlbGZbIHAudHJpZ2dlckZuTmFtZSBdKCBwLmV2ZW50ICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7IC8vIG1haW50YWluIGNoYWluaW5nXG4gICAgfTsgLy8gZnVuY3Rpb25cbiAgfSwgLy8gcmVtb3ZlRGF0YVxuXG4gIC8vIGV2ZW50IGZ1bmN0aW9uIHJldXNhYmxlIHN0dWZmXG4gIGV2ZW50OiB7XG4gICAgcmVnZXg6IC8oXFx3KykoXFwuKD86XFx3K3xcXCopKT8vLCAvLyByZWdleCBmb3IgbWF0Y2hpbmcgZXZlbnQgc3RyaW5ncyAoZS5nLiBcImNsaWNrLm5hbWVzcGFjZVwiKVxuICAgIHVuaXZlcnNhbE5hbWVzcGFjZTogJy4qJywgLy8gbWF0Y2hlcyBhcyBpZiBubyBuYW1lc3BhY2Ugc3BlY2lmaWVkIGFuZCBwcmV2ZW50cyB1c2VycyBmcm9tIHVuYmluZGluZyBhY2NpZGVudGFsbHlcbiAgICBvcHRpb25hbFR5cGVSZWdleDogLyhcXHcrKT8oXFwuKD86XFx3K3xcXCopKT8vLFxuICAgIGZhbHNlQ2FsbGJhY2s6IGZ1bmN0aW9uKCl7IHJldHVybiBmYWxzZTsgfVxuICB9LFxuXG4gIC8vIGV2ZW50IGJpbmRpbmdcbiAgb246IGZ1bmN0aW9uKCBwYXJhbXMgKXtcbiAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICB1bmJpbmRTZWxmT25UcmlnZ2VyOiBmYWxzZSxcbiAgICAgIHVuYmluZEFsbEJpbmRlcnNPblRyaWdnZXI6IGZhbHNlXG4gICAgfTtcbiAgICBwYXJhbXMgPSB1dGlsLmV4dGVuZCgge30sIGRlZmF1bHRzLCBwYXJhbXMgKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiBvbkltcGwoIGV2ZW50cywgc2VsZWN0b3IsIGRhdGEsIGNhbGxiYWNrICl7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgc2VsZklzQXJyYXlMaWtlID0gc2VsZi5sZW5ndGggIT09IHVuZGVmaW5lZDtcbiAgICAgIHZhciBhbGwgPSBzZWxmSXNBcnJheUxpa2UgPyBzZWxmIDogWyBzZWxmIF07IC8vIHB1dCBpbiBhcnJheSBpZiBub3QgYXJyYXktbGlrZVxuICAgICAgdmFyIGV2ZW50c0lzU3RyaW5nID0gaXMuc3RyaW5nKCBldmVudHMgKTtcbiAgICAgIHZhciBwID0gcGFyYW1zO1xuXG4gICAgICBpZiggaXMucGxhaW5PYmplY3QoIHNlbGVjdG9yICkgKXsgLy8gc2VsZWN0b3IgaXMgYWN0dWFsbHkgZGF0YVxuICAgICAgICBjYWxsYmFjayA9IGRhdGE7XG4gICAgICAgIGRhdGEgPSBzZWxlY3RvcjtcbiAgICAgICAgc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYoIGlzLmZuKCBzZWxlY3RvciApIHx8IHNlbGVjdG9yID09PSBmYWxzZSApeyAvLyBzZWxlY3RvciBpcyBhY3R1YWxseSBjYWxsYmFja1xuICAgICAgICBjYWxsYmFjayA9IHNlbGVjdG9yO1xuICAgICAgICBkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICBzZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYoIGlzLmZuKCBkYXRhICkgfHwgZGF0YSA9PT0gZmFsc2UgKXsgLy8gZGF0YSBpcyBhY3R1YWxseSBjYWxsYmFja1xuICAgICAgICBjYWxsYmFjayA9IGRhdGE7XG4gICAgICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIHRoZXJlIGlzbid0IGEgY2FsbGJhY2ssIHdlIGNhbid0IHJlYWxseSBkbyBhbnl0aGluZ1xuICAgICAgLy8gKGNhbid0IHNwZWFrIGZvciBtYXBwZWQgZXZlbnRzIGFyZyB2ZXJzaW9uKVxuICAgICAgaWYoICEoaXMuZm4oIGNhbGxiYWNrICkgfHwgY2FsbGJhY2sgPT09IGZhbHNlKSAmJiBldmVudHNJc1N0cmluZyApe1xuICAgICAgICByZXR1cm4gc2VsZjsgLy8gbWFpbnRhaW4gY2hhaW5pbmdcbiAgICAgIH1cblxuICAgICAgaWYoIGV2ZW50c0lzU3RyaW5nICl7IC8vIHRoZW4gY29udmVydCB0byBtYXBcbiAgICAgICAgdmFyIG1hcCA9IHt9O1xuICAgICAgICBtYXBbIGV2ZW50cyBdID0gY2FsbGJhY2s7XG4gICAgICAgIGV2ZW50cyA9IG1hcDtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyggZXZlbnRzICk7XG5cbiAgICAgIGZvciggdmFyIGsgPSAwOyBrIDwga2V5cy5sZW5ndGg7IGsrKyApe1xuICAgICAgICB2YXIgZXZ0cyA9IGtleXNba107XG5cbiAgICAgICAgY2FsbGJhY2sgPSBldmVudHNbIGV2dHMgXTtcbiAgICAgICAgaWYoIGNhbGxiYWNrID09PSBmYWxzZSApe1xuICAgICAgICAgIGNhbGxiYWNrID0gZGVmaW5lLmV2ZW50LmZhbHNlQ2FsbGJhY2s7XG4gICAgICAgIH1cblxuICAgICAgICBpZiggIWlzLmZuKCBjYWxsYmFjayApICl7IGNvbnRpbnVlOyB9XG5cbiAgICAgICAgZXZ0cyA9IGV2dHMuc3BsaXQoIC9cXHMrLyApO1xuICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGV2dHMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgICB2YXIgZXZ0ID0gZXZ0c1sgaSBdO1xuICAgICAgICAgIGlmKCBpcy5lbXB0eVN0cmluZyggZXZ0ICkgKXsgY29udGludWU7IH1cblxuICAgICAgICAgIHZhciBtYXRjaCA9IGV2dC5tYXRjaCggZGVmaW5lLmV2ZW50LnJlZ2V4ICk7IC8vIHR5cGVbLm5hbWVzcGFjZV1cblxuICAgICAgICAgIGlmKCBtYXRjaCApe1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSBtYXRjaFsyXSA/IG1hdGNoWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjaywgLy8gY2FsbGJhY2sgdG8gcnVuXG4gICAgICAgICAgICAgIGRhdGE6IGRhdGEsIC8vIGV4dHJhIGRhdGEgaW4gZXZlbnRPYmouZGF0YVxuICAgICAgICAgICAgICBkZWxlZ2F0ZWQ6IHNlbGVjdG9yID8gdHJ1ZSA6IGZhbHNlLCAvLyB3aGV0aGVyIHRoZSBldnQgaXMgZGVsZWdhdGVkXG4gICAgICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvciwgLy8gdGhlIHNlbGVjdG9yIHRvIG1hdGNoIGZvciBkZWxlZ2F0ZWQgZXZlbnRzXG4gICAgICAgICAgICAgIHNlbE9iajogbmV3IFNlbGVjdG9yKCBzZWxlY3RvciApLCAvLyBjYWNoZWQgc2VsZWN0b3Igb2JqZWN0IHRvIHNhdmUgcmVidWlsZGluZ1xuICAgICAgICAgICAgICB0eXBlOiB0eXBlLCAvLyB0aGUgZXZlbnQgdHlwZSAoZS5nLiAnY2xpY2snKVxuICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZSwgLy8gdGhlIGV2ZW50IG5hbWVzcGFjZSAoZS5nLiBcIi5mb29cIilcbiAgICAgICAgICAgICAgdW5iaW5kU2VsZk9uVHJpZ2dlcjogcC51bmJpbmRTZWxmT25UcmlnZ2VyLFxuICAgICAgICAgICAgICB1bmJpbmRBbGxCaW5kZXJzT25UcmlnZ2VyOiBwLnVuYmluZEFsbEJpbmRlcnNPblRyaWdnZXIsXG4gICAgICAgICAgICAgIGJpbmRlcnM6IGFsbCAvLyB3aG8gYm91bmQgdG9nZXRoZXJcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZvciggdmFyIGogPSAwOyBqIDwgYWxsLmxlbmd0aDsgaisrICl7XG4gICAgICAgICAgICAgIHZhciBfcCA9IGFsbFsgaiBdLl9wcml2YXRlID0gYWxsWyBqIF0uX3ByaXZhdGUgfHwge307XG5cbiAgICAgICAgICAgICAgX3AubGlzdGVuZXJzID0gX3AubGlzdGVuZXJzIHx8IFtdO1xuICAgICAgICAgICAgICBfcC5saXN0ZW5lcnMucHVzaCggbGlzdGVuZXIgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gZm9yIGV2ZW50cyBhcnJheVxuICAgICAgfSAvLyBmb3IgZXZlbnRzIG1hcFxuXG4gICAgICByZXR1cm4gc2VsZjsgLy8gbWFpbnRhaW4gY2hhaW5pbmdcbiAgICB9OyAvLyBmdW5jdGlvblxuICB9LCAvLyBvblxuXG4gIGV2ZW50QWxpYXNlc09uOiBmdW5jdGlvbiggcHJvdG8gKXtcbiAgICB2YXIgcCA9IHByb3RvO1xuXG4gICAgcC5hZGRMaXN0ZW5lciA9IHAubGlzdGVuID0gcC5iaW5kID0gcC5vbjtcbiAgICBwLnJlbW92ZUxpc3RlbmVyID0gcC51bmxpc3RlbiA9IHAudW5iaW5kID0gcC5vZmY7XG4gICAgcC5lbWl0ID0gcC50cmlnZ2VyO1xuXG4gICAgLy8gdGhpcyBpcyBqdXN0IGEgd3JhcHBlciBhbGlhcyBvZiAub24oKVxuICAgIHAucG9uID0gcC5wcm9taXNlT24gPSBmdW5jdGlvbiggZXZlbnRzLCBzZWxlY3RvciApe1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggYXJndW1lbnRzLCAwICk7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSggZnVuY3Rpb24oIHJlc29sdmUsIHJlamVjdCApe1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiggZSApe1xuICAgICAgICAgIHNlbGYub2ZmLmFwcGx5KCBzZWxmLCBvZmZBcmdzICk7XG5cbiAgICAgICAgICByZXNvbHZlKCBlICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG9uQXJncyA9IGFyZ3MuY29uY2F0KCBbIGNhbGxiYWNrIF0gKTtcbiAgICAgICAgdmFyIG9mZkFyZ3MgPSBvbkFyZ3MuY29uY2F0KCBbXSApO1xuXG4gICAgICAgIHNlbGYub24uYXBwbHkoIHNlbGYsIG9uQXJncyApO1xuICAgICAgfSApO1xuICAgIH07XG4gIH0sXG5cbiAgb2ZmOiBmdW5jdGlvbiBvZmZJbXBsKCBwYXJhbXMgKXtcbiAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgfTtcbiAgICBwYXJhbXMgPSB1dGlsLmV4dGVuZCgge30sIGRlZmF1bHRzLCBwYXJhbXMgKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiggZXZlbnRzLCBzZWxlY3RvciwgY2FsbGJhY2sgKXtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBzZWxmSXNBcnJheUxpa2UgPSBzZWxmLmxlbmd0aCAhPT0gdW5kZWZpbmVkO1xuICAgICAgdmFyIGFsbCA9IHNlbGZJc0FycmF5TGlrZSA/IHNlbGYgOiBbIHNlbGYgXTsgLy8gcHV0IGluIGFycmF5IGlmIG5vdCBhcnJheS1saWtlXG4gICAgICB2YXIgZXZlbnRzSXNTdHJpbmcgPSBpcy5zdHJpbmcoIGV2ZW50cyApO1xuXG4gICAgICBpZiggYXJndW1lbnRzLmxlbmd0aCA9PT0gMCApeyAvLyB0aGVuIHVuYmluZCBhbGxcblxuICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGFsbC5sZW5ndGg7IGkrKyApe1xuICAgICAgICAgIGFsbFsgaSBdLl9wcml2YXRlID0gYWxsWyBpIF0uX3ByaXZhdGUgfHwge307XG5cbiAgICAgICAgICBfcC5saXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWxmOyAvLyBtYWludGFpbiBjaGFpbmluZ1xuICAgICAgfVxuXG4gICAgICBpZiggaXMuZm4oIHNlbGVjdG9yICkgfHwgc2VsZWN0b3IgPT09IGZhbHNlICl7IC8vIHNlbGVjdG9yIGlzIGFjdHVhbGx5IGNhbGxiYWNrXG4gICAgICAgIGNhbGxiYWNrID0gc2VsZWN0b3I7XG4gICAgICAgIHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiggZXZlbnRzSXNTdHJpbmcgKXsgLy8gdGhlbiBjb252ZXJ0IHRvIG1hcFxuICAgICAgICB2YXIgbWFwID0ge307XG4gICAgICAgIG1hcFsgZXZlbnRzIF0gPSBjYWxsYmFjaztcbiAgICAgICAgZXZlbnRzID0gbWFwO1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKCBldmVudHMgKTtcblxuICAgICAgZm9yKCB2YXIgayA9IDA7IGsgPCBrZXlzLmxlbmd0aDsgaysrICl7XG4gICAgICAgIHZhciBldnRzID0ga2V5c1trXTtcblxuICAgICAgICBjYWxsYmFjayA9IGV2ZW50c1sgZXZ0cyBdO1xuXG4gICAgICAgIGlmKCBjYWxsYmFjayA9PT0gZmFsc2UgKXtcbiAgICAgICAgICBjYWxsYmFjayA9IGRlZmluZS5ldmVudC5mYWxzZUNhbGxiYWNrO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZ0cyA9IGV2dHMuc3BsaXQoIC9cXHMrLyApO1xuICAgICAgICBmb3IoIHZhciBoID0gMDsgaCA8IGV2dHMubGVuZ3RoOyBoKysgKXtcbiAgICAgICAgICB2YXIgZXZ0ID0gZXZ0c1sgaCBdO1xuICAgICAgICAgIGlmKCBpcy5lbXB0eVN0cmluZyggZXZ0ICkgKXsgY29udGludWU7IH1cblxuICAgICAgICAgIHZhciBtYXRjaCA9IGV2dC5tYXRjaCggZGVmaW5lLmV2ZW50Lm9wdGlvbmFsVHlwZVJlZ2V4ICk7IC8vIFt0eXBlXVsubmFtZXNwYWNlXVxuICAgICAgICAgIGlmKCBtYXRjaCApe1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBtYXRjaFsxXSA/IG1hdGNoWzFdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IG1hdGNoWzJdID8gbWF0Y2hbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgYWxsLmxlbmd0aDsgaSsrICl7IC8vXG4gICAgICAgICAgICAgIHZhciBfcCA9IGFsbFsgaSBdLl9wcml2YXRlID0gYWxsWyBpIF0uX3ByaXZhdGUgfHwge307XG4gICAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBfcC5saXN0ZW5lcnMgPSBfcC5saXN0ZW5lcnMgfHwgW107XG5cbiAgICAgICAgICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBsaXN0ZW5lcnMubGVuZ3RoOyBqKysgKXtcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbIGogXTtcbiAgICAgICAgICAgICAgICB2YXIgbnNNYXRjaGVzID0gIW5hbWVzcGFjZSB8fCBuYW1lc3BhY2UgPT09IGxpc3RlbmVyLm5hbWVzcGFjZTtcbiAgICAgICAgICAgICAgICB2YXIgdHlwZU1hdGNoZXMgPSAhdHlwZSB8fCBsaXN0ZW5lci50eXBlID09PSB0eXBlO1xuICAgICAgICAgICAgICAgIHZhciBjYk1hdGNoZXMgPSAhY2FsbGJhY2sgfHwgY2FsbGJhY2sgPT09IGxpc3RlbmVyLmNhbGxiYWNrO1xuICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lck1hdGNoZXMgPSBuc01hdGNoZXMgJiYgdHlwZU1hdGNoZXMgJiYgY2JNYXRjaGVzO1xuXG4gICAgICAgICAgICAgICAgLy8gZGVsZXRlIGxpc3RlbmVyIGlmIGl0IG1hdGNoZXNcbiAgICAgICAgICAgICAgICBpZiggbGlzdGVuZXJNYXRjaGVzICl7XG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKCBqLCAxICk7XG4gICAgICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IC8vIGZvciBsaXN0ZW5lcnNcbiAgICAgICAgICAgIH0gLy8gZm9yIGFsbFxuICAgICAgICAgIH0gLy8gaWYgbWF0Y2hcbiAgICAgICAgfSAvLyBmb3IgZXZlbnRzIGFycmF5XG5cbiAgICAgIH0gLy8gZm9yIGV2ZW50cyBtYXBcblxuICAgICAgcmV0dXJuIHNlbGY7IC8vIG1haW50YWluIGNoYWluaW5nXG4gICAgfTsgLy8gZnVuY3Rpb25cbiAgfSwgLy8gb2ZmXG5cbiAgdHJpZ2dlcjogZnVuY3Rpb24oIHBhcmFtcyApe1xuICAgIHZhciBkZWZhdWx0cyA9IHt9O1xuICAgIHBhcmFtcyA9IHV0aWwuZXh0ZW5kKCB7fSwgZGVmYXVsdHMsIHBhcmFtcyApO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHRyaWdnZXJJbXBsKCBldmVudHMsIGV4dHJhUGFyYW1zLCBmblRvVHJpZ2dlciApe1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHNlbGZJc0FycmF5TGlrZSA9IHNlbGYubGVuZ3RoICE9PSB1bmRlZmluZWQ7XG4gICAgICB2YXIgYWxsID0gc2VsZklzQXJyYXlMaWtlID8gc2VsZiA6IFsgc2VsZiBdOyAvLyBwdXQgaW4gYXJyYXkgaWYgbm90IGFycmF5LWxpa2VcbiAgICAgIHZhciBldmVudHNJc1N0cmluZyA9IGlzLnN0cmluZyggZXZlbnRzICk7XG4gICAgICB2YXIgZXZlbnRzSXNPYmplY3QgPSBpcy5wbGFpbk9iamVjdCggZXZlbnRzICk7XG4gICAgICB2YXIgZXZlbnRzSXNFdmVudCA9IGlzLmV2ZW50KCBldmVudHMgKTtcbiAgICAgIHZhciBfcCA9IHRoaXMuX3ByaXZhdGUgPSB0aGlzLl9wcml2YXRlIHx8IHt9O1xuICAgICAgdmFyIGN5ID0gX3AuY3kgfHwgKCBpcy5jb3JlKCB0aGlzICkgPyB0aGlzIDogbnVsbCApO1xuICAgICAgdmFyIGhhc0NvbXBvdW5kcyA9IGN5ID8gY3kuaGFzQ29tcG91bmROb2RlcygpIDogZmFsc2U7XG5cbiAgICAgIGlmKCBldmVudHNJc1N0cmluZyApeyAvLyB0aGVuIG1ha2UgYSBwbGFpbiBldmVudCBvYmplY3QgZm9yIGVhY2ggZXZlbnQgbmFtZVxuICAgICAgICB2YXIgZXZ0cyA9IGV2ZW50cy5zcGxpdCggL1xccysvICk7XG4gICAgICAgIGV2ZW50cyA9IFtdO1xuXG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZXZ0cy5sZW5ndGg7IGkrKyApe1xuICAgICAgICAgIHZhciBldnQgPSBldnRzWyBpIF07XG4gICAgICAgICAgaWYoIGlzLmVtcHR5U3RyaW5nKCBldnQgKSApeyBjb250aW51ZTsgfVxuXG4gICAgICAgICAgdmFyIG1hdGNoID0gZXZ0Lm1hdGNoKCBkZWZpbmUuZXZlbnQucmVnZXggKTsgLy8gdHlwZVsubmFtZXNwYWNlXVxuICAgICAgICAgIHZhciB0eXBlID0gbWF0Y2hbMV07XG4gICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IG1hdGNoWzJdID8gbWF0Y2hbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBldmVudHMucHVzaCgge1xuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZTogbmFtZXNwYWNlXG4gICAgICAgICAgfSApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYoIGV2ZW50c0lzT2JqZWN0ICl7IC8vIHB1dCBpbiBsZW5ndGggMSBhcnJheVxuICAgICAgICB2YXIgZXZlbnRBcmdPYmogPSBldmVudHM7XG5cbiAgICAgICAgZXZlbnRzID0gWyBldmVudEFyZ09iaiBdO1xuICAgICAgfVxuXG4gICAgICBpZiggZXh0cmFQYXJhbXMgKXtcbiAgICAgICAgaWYoICFpcy5hcnJheSggZXh0cmFQYXJhbXMgKSApeyAvLyBtYWtlIHN1cmUgZXh0cmEgcGFyYW1zIGFyZSBpbiBhbiBhcnJheSBpZiBzcGVjaWZpZWRcbiAgICAgICAgICBleHRyYVBhcmFtcyA9IFsgZXh0cmFQYXJhbXMgXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHsgLy8gb3RoZXJ3aXNlLCB3ZSd2ZSBnb3Qgbm90aGluZ1xuICAgICAgICBleHRyYVBhcmFtcyA9IFtdO1xuICAgICAgfVxuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKyApeyAvLyB0cmlnZ2VyIGVhY2ggZXZlbnQgaW4gb3JkZXJcbiAgICAgICAgdmFyIGV2dE9iaiA9IGV2ZW50c1sgaSBdO1xuXG4gICAgICAgIGZvciggdmFyIGogPSAwOyBqIDwgYWxsLmxlbmd0aDsgaisrICl7IC8vIGZvciBlYWNoXG4gICAgICAgICAgdmFyIHRyaWdnZXJlciA9IGFsbFsgaiBdO1xuICAgICAgICAgIHZhciBfcCA9IHRyaWdnZXJlci5fcHJpdmF0ZSA9IHRyaWdnZXJlci5fcHJpdmF0ZSB8fCB7fTtcbiAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gX3AubGlzdGVuZXJzID0gX3AubGlzdGVuZXJzIHx8IFtdO1xuICAgICAgICAgIHZhciB0cmlnZ2VyZXJJc0VsZW1lbnQgPSBpcy5lbGVtZW50KCB0cmlnZ2VyZXIgKTtcbiAgICAgICAgICB2YXIgYnViYmxlVXAgPSB0cmlnZ2VyZXJJc0VsZW1lbnQgfHwgcGFyYW1zLmxheW91dDtcblxuICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgZXZlbnQgZm9yIHRoaXMgZWxlbWVudCBmcm9tIHRoZSBldmVudCBvYmplY3RcbiAgICAgICAgICB2YXIgZXZ0O1xuXG4gICAgICAgICAgaWYoIGV2ZW50c0lzRXZlbnQgKXsgLy8gdGhlbiBqdXN0IGdldCB0aGUgb2JqZWN0XG4gICAgICAgICAgICBldnQgPSBldnRPYmo7XG5cbiAgICAgICAgICAgIGV2dC5jeVRhcmdldCA9IGV2dC5jeVRhcmdldCB8fCB0cmlnZ2VyZXI7XG4gICAgICAgICAgICBldnQuY3kgPSBldnQuY3kgfHwgY3k7XG5cbiAgICAgICAgICB9IGVsc2UgeyAvLyB0aGVuIHdlIGhhdmUgdG8gbWFrZSBvbmVcbiAgICAgICAgICAgIGV2dCA9IG5ldyBFdmVudCggZXZ0T2JqLCB7XG4gICAgICAgICAgICAgIGN5VGFyZ2V0OiB0cmlnZ2VyZXIsXG4gICAgICAgICAgICAgIGN5OiBjeSxcbiAgICAgICAgICAgICAgbmFtZXNwYWNlOiBldnRPYmoubmFtZXNwYWNlXG4gICAgICAgICAgICB9ICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gaWYgYSBsYXlvdXQgd2FzIHNwZWNpZmllZCwgdGhlbiBwdXQgaXQgaW4gdGhlIHR5cGVkIGV2ZW50XG4gICAgICAgICAgaWYoIGV2dE9iai5sYXlvdXQgKXtcbiAgICAgICAgICAgIGV2dC5sYXlvdXQgPSBldnRPYmoubGF5b3V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGlmIHRyaWdnZXJlZCBieSBsYXlvdXQsIHB1dCBpbiBldmVudFxuICAgICAgICAgIGlmKCBwYXJhbXMubGF5b3V0ICl7XG4gICAgICAgICAgICBldnQubGF5b3V0ID0gdHJpZ2dlcmVyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGNyZWF0ZSBhIHJlbmRlcmVkIHBvc2l0aW9uIGJhc2VkIG9uIHRoZSBwYXNzZWQgcG9zaXRpb25cbiAgICAgICAgICBpZiggZXZ0LmN5UG9zaXRpb24gKXtcbiAgICAgICAgICAgIHZhciBwb3MgPSBldnQuY3lQb3NpdGlvbjtcbiAgICAgICAgICAgIHZhciB6b29tID0gY3kuem9vbSgpO1xuICAgICAgICAgICAgdmFyIHBhbiA9IGN5LnBhbigpO1xuXG4gICAgICAgICAgICBldnQuY3lSZW5kZXJlZFBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICB4OiBwb3MueCAqIHpvb20gKyBwYW4ueCxcbiAgICAgICAgICAgICAgeTogcG9zLnkgKiB6b29tICsgcGFuLnlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoIGZuVG9UcmlnZ2VyICl7IC8vIHRoZW4gb3ZlcnJpZGUgdGhlIGxpc3RlbmVycyBsaXN0IHdpdGgganVzdCB0aGUgb25lIHdlIHNwZWNpZmllZFxuICAgICAgICAgICAgbGlzdGVuZXJzID0gWyB7XG4gICAgICAgICAgICAgIG5hbWVzcGFjZTogZXZ0Lm5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgdHlwZTogZXZ0LnR5cGUsXG4gICAgICAgICAgICAgIGNhbGxiYWNrOiBmblRvVHJpZ2dlclxuICAgICAgICAgICAgfSBdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciggdmFyIGsgPSAwOyBrIDwgbGlzdGVuZXJzLmxlbmd0aDsgaysrICl7IC8vIGNoZWNrIGVhY2ggbGlzdGVuZXJcbiAgICAgICAgICAgIHZhciBsaXMgPSBsaXN0ZW5lcnNbIGsgXTtcbiAgICAgICAgICAgIHZhciBuc01hdGNoZXMgPSAhbGlzLm5hbWVzcGFjZSB8fCBsaXMubmFtZXNwYWNlID09PSBldnQubmFtZXNwYWNlIHx8IGxpcy5uYW1lc3BhY2UgPT09IGRlZmluZS5ldmVudC51bml2ZXJzYWxOYW1lc3BhY2U7XG4gICAgICAgICAgICB2YXIgdHlwZU1hdGNoZXMgPSBsaXMudHlwZSA9PT0gZXZ0LnR5cGU7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0TWF0Y2hlcyA9IGxpcy5kZWxlZ2F0ZWQgPyAoIHRyaWdnZXJlciAhPT0gZXZ0LmN5VGFyZ2V0ICYmIGlzLmVsZW1lbnQoIGV2dC5jeVRhcmdldCApICYmIGxpcy5zZWxPYmoubWF0Y2hlcyggZXZ0LmN5VGFyZ2V0ICkgKSA6ICh0cnVlKTsgLy8gd2UncmUgbm90IGdvaW5nIHRvIHZhbGlkYXRlIHRoZSBoaWVyYXJjaHk7IHRoYXQncyB0b28gZXhwZW5zaXZlXG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJNYXRjaGVzID0gbnNNYXRjaGVzICYmIHR5cGVNYXRjaGVzICYmIHRhcmdldE1hdGNoZXM7XG5cbiAgICAgICAgICAgIGlmKCBsaXN0ZW5lck1hdGNoZXMgKXsgLy8gdGhlbiB0cmlnZ2VyIGl0XG4gICAgICAgICAgICAgIHZhciBhcmdzID0gWyBldnQgXTtcbiAgICAgICAgICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KCBleHRyYVBhcmFtcyApOyAvLyBhZGQgZXh0cmEgcGFyYW1zIHRvIGFyZ3MgbGlzdFxuXG4gICAgICAgICAgICAgIGlmKCBsaXMuZGF0YSApeyAvLyBhZGQgb24gZGF0YSBwbHVnZ2VkIGludG8gYmluZGluZ1xuICAgICAgICAgICAgICAgIGV2dC5kYXRhID0gbGlzLmRhdGE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7IC8vIG9yIGNsZWFyIGl0IGluIGNhc2UgdGhlIGV2ZW50IG9iaiBpcyByZXVzZWRcbiAgICAgICAgICAgICAgICBldnQuZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmKCBsaXMudW5iaW5kU2VsZk9uVHJpZ2dlciB8fCBsaXMudW5iaW5kQWxsQmluZGVyc09uVHJpZ2dlciApeyAvLyB0aGVuIHJlbW92ZSBsaXN0ZW5lclxuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoIGssIDEgKTtcbiAgICAgICAgICAgICAgICBrLS07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiggbGlzLnVuYmluZEFsbEJpbmRlcnNPblRyaWdnZXIgKXsgLy8gdGhlbiBkZWxldGUgdGhlIGxpc3RlbmVyIGZvciBhbGwgYmluZGVyc1xuICAgICAgICAgICAgICAgIHZhciBiaW5kZXJzID0gbGlzLmJpbmRlcnM7XG4gICAgICAgICAgICAgICAgZm9yKCB2YXIgbCA9IDA7IGwgPCBiaW5kZXJzLmxlbmd0aDsgbCsrICl7XG4gICAgICAgICAgICAgICAgICB2YXIgYmluZGVyID0gYmluZGVyc1sgbCBdO1xuICAgICAgICAgICAgICAgICAgaWYoICFiaW5kZXIgfHwgYmluZGVyID09PSB0cmlnZ2VyZXIgKXsgY29udGludWU7IH0gLy8gYWxyZWFkeSBoYW5kbGVkIHRyaWdnZXJlciBvciB3ZSBjYW4ndCBoYW5kbGUgaXRcblxuICAgICAgICAgICAgICAgICAgdmFyIGJpbmRlckxpc3RlbmVycyA9IGJpbmRlci5fcHJpdmF0ZS5saXN0ZW5lcnM7XG4gICAgICAgICAgICAgICAgICBmb3IoIHZhciBtID0gMDsgbSA8IGJpbmRlckxpc3RlbmVycy5sZW5ndGg7IG0rKyApe1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmluZGVyTGlzdGVuZXIgPSBiaW5kZXJMaXN0ZW5lcnNbIG0gXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiggYmluZGVyTGlzdGVuZXIgPT09IGxpcyApeyAvLyBkZWxldGUgbGlzdGVuZXIgZnJvbSBsaXN0XG4gICAgICAgICAgICAgICAgICAgICAgYmluZGVyTGlzdGVuZXJzLnNwbGljZSggbSwgMSApO1xuICAgICAgICAgICAgICAgICAgICAgIG0tLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIHJ1biB0aGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBsaXMuZGVsZWdhdGVkID8gZXZ0LmN5VGFyZ2V0IDogdHJpZ2dlcmVyO1xuICAgICAgICAgICAgICB2YXIgcmV0ID0gbGlzLmNhbGxiYWNrLmFwcGx5KCBjb250ZXh0LCBhcmdzICk7XG5cbiAgICAgICAgICAgICAgaWYoIHJldCA9PT0gZmFsc2UgfHwgZXZ0LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKXtcbiAgICAgICAgICAgICAgICAvLyB0aGVuIGRvbid0IGJ1YmJsZVxuICAgICAgICAgICAgICAgIGJ1YmJsZVVwID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiggcmV0ID09PSBmYWxzZSApe1xuICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuaW5nIGZhbHNlIGlzIGEgc2hvcnRoYW5kIGZvciBzdG9wcGluZyBwcm9wYWdhdGlvbiBhbmQgcHJldmVudGluZyB0aGUgZGVmLiBhY3Rpb25cbiAgICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAvLyBpZiBsaXN0ZW5lciBtYXRjaGVzXG4gICAgICAgICAgfSAvLyBmb3IgZWFjaCBsaXN0ZW5lclxuXG4gICAgICAgICAgLy8gYnViYmxlIHVwIGV2ZW50IGZvciBlbGVtZW50c1xuICAgICAgICAgIGlmKCBidWJibGVVcCApe1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IGhhc0NvbXBvdW5kcyA/IHRyaWdnZXJlci5fcHJpdmF0ZS5wYXJlbnQgOiBudWxsO1xuICAgICAgICAgICAgdmFyIGhhc1BhcmVudCA9IHBhcmVudCAhPSBudWxsICYmIHBhcmVudC5sZW5ndGggIT09IDA7XG5cbiAgICAgICAgICAgIGlmKCBoYXNQYXJlbnQgKXsgLy8gdGhlbiBidWJibGUgdXAgdG8gcGFyZW50XG4gICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudFswXTtcbiAgICAgICAgICAgICAgcGFyZW50LnRyaWdnZXIoIGV2dCApO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gb3RoZXJ3aXNlLCBidWJibGUgdXAgdG8gdGhlIGNvcmVcbiAgICAgICAgICAgICAgY3kudHJpZ2dlciggZXZ0ICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gLy8gZm9yIGVhY2ggb2YgYWxsXG4gICAgICB9IC8vIGZvciBlYWNoIGV2ZW50XG5cbiAgICAgIHJldHVybiBzZWxmOyAvLyBtYWludGFpbiBjaGFpbmluZ1xuICAgIH07IC8vIGZ1bmN0aW9uXG4gIH0sIC8vIHRyaWdnZXJcblxuICBhbmltYXRlZDogZnVuY3Rpb24oIGZuUGFyYW1zICl7XG4gICAgdmFyIGRlZmF1bHRzID0ge307XG4gICAgZm5QYXJhbXMgPSB1dGlsLmV4dGVuZCgge30sIGRlZmF1bHRzLCBmblBhcmFtcyApO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGFuaW1hdGVkSW1wbCgpe1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHNlbGZJc0FycmF5TGlrZSA9IHNlbGYubGVuZ3RoICE9PSB1bmRlZmluZWQ7XG4gICAgICB2YXIgYWxsID0gc2VsZklzQXJyYXlMaWtlID8gc2VsZiA6IFsgc2VsZiBdOyAvLyBwdXQgaW4gYXJyYXkgaWYgbm90IGFycmF5LWxpa2VcbiAgICAgIHZhciBjeSA9IHRoaXMuX3ByaXZhdGUuY3kgfHwgdGhpcztcblxuICAgICAgaWYoICFjeS5zdHlsZUVuYWJsZWQoKSApeyByZXR1cm4gZmFsc2U7IH1cblxuICAgICAgdmFyIGVsZSA9IGFsbFswXTtcblxuICAgICAgaWYoIGVsZSApe1xuICAgICAgICByZXR1cm4gZWxlLl9wcml2YXRlLmFuaW1hdGlvbi5jdXJyZW50Lmxlbmd0aCA+IDA7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgLy8gYW5pbWF0ZWRcblxuICBjbGVhclF1ZXVlOiBmdW5jdGlvbiggZm5QYXJhbXMgKXtcbiAgICB2YXIgZGVmYXVsdHMgPSB7fTtcbiAgICBmblBhcmFtcyA9IHV0aWwuZXh0ZW5kKCB7fSwgZGVmYXVsdHMsIGZuUGFyYW1zICk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gY2xlYXJRdWV1ZUltcGwoKXtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBzZWxmSXNBcnJheUxpa2UgPSBzZWxmLmxlbmd0aCAhPT0gdW5kZWZpbmVkO1xuICAgICAgdmFyIGFsbCA9IHNlbGZJc0FycmF5TGlrZSA/IHNlbGYgOiBbIHNlbGYgXTsgLy8gcHV0IGluIGFycmF5IGlmIG5vdCBhcnJheS1saWtlXG4gICAgICB2YXIgY3kgPSB0aGlzLl9wcml2YXRlLmN5IHx8IHRoaXM7XG5cbiAgICAgIGlmKCAhY3kuc3R5bGVFbmFibGVkKCkgKXsgcmV0dXJuIHRoaXM7IH1cblxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBhbGwubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGVsZSA9IGFsbFsgaSBdO1xuICAgICAgICBlbGUuX3ByaXZhdGUuYW5pbWF0aW9uLnF1ZXVlID0gW107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gIH0sIC8vIGNsZWFyUXVldWVcblxuICBkZWxheTogZnVuY3Rpb24oIGZuUGFyYW1zICl7XG4gICAgdmFyIGRlZmF1bHRzID0ge307XG4gICAgZm5QYXJhbXMgPSB1dGlsLmV4dGVuZCgge30sIGRlZmF1bHRzLCBmblBhcmFtcyApO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGF5SW1wbCggdGltZSwgY29tcGxldGUgKXtcbiAgICAgIHZhciBjeSA9IHRoaXMuX3ByaXZhdGUuY3kgfHwgdGhpcztcblxuICAgICAgaWYoICFjeS5zdHlsZUVuYWJsZWQoKSApeyByZXR1cm4gdGhpczsgfVxuXG4gICAgICByZXR1cm4gdGhpcy5hbmltYXRlKCB7XG4gICAgICAgIGRlbGF5OiB0aW1lLFxuICAgICAgICBkdXJhdGlvbjogdGltZSxcbiAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlXG4gICAgICB9ICk7XG4gICAgfTtcbiAgfSwgLy8gZGVsYXlcblxuICBkZWxheUFuaW1hdGlvbjogZnVuY3Rpb24oIGZuUGFyYW1zICl7XG4gICAgdmFyIGRlZmF1bHRzID0ge307XG4gICAgZm5QYXJhbXMgPSB1dGlsLmV4dGVuZCgge30sIGRlZmF1bHRzLCBmblBhcmFtcyApO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGF5QW5pbWF0aW9uSW1wbCggdGltZSwgY29tcGxldGUgKXtcbiAgICAgIHZhciBjeSA9IHRoaXMuX3ByaXZhdGUuY3kgfHwgdGhpcztcblxuICAgICAgaWYoICFjeS5zdHlsZUVuYWJsZWQoKSApeyByZXR1cm4gdGhpczsgfVxuXG4gICAgICByZXR1cm4gdGhpcy5hbmltYXRpb24oIHtcbiAgICAgICAgZGVsYXk6IHRpbWUsXG4gICAgICAgIGR1cmF0aW9uOiB0aW1lLFxuICAgICAgICBjb21wbGV0ZTogY29tcGxldGVcbiAgICAgIH0gKTtcbiAgICB9O1xuICB9LCAvLyBkZWxheVxuXG4gIGFuaW1hdGlvbjogZnVuY3Rpb24oIGZuUGFyYW1zICl7XG4gICAgdmFyIGRlZmF1bHRzID0ge307XG4gICAgZm5QYXJhbXMgPSB1dGlsLmV4dGVuZCgge30sIGRlZmF1bHRzLCBmblBhcmFtcyApO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGFuaW1hdGlvbkltcGwoIHByb3BlcnRpZXMsIHBhcmFtcyApe1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHNlbGZJc0FycmF5TGlrZSA9IHNlbGYubGVuZ3RoICE9PSB1bmRlZmluZWQ7XG4gICAgICB2YXIgYWxsID0gc2VsZklzQXJyYXlMaWtlID8gc2VsZiA6IFsgc2VsZiBdOyAvLyBwdXQgaW4gYXJyYXkgaWYgbm90IGFycmF5LWxpa2VcbiAgICAgIHZhciBjeSA9IHRoaXMuX3ByaXZhdGUuY3kgfHwgdGhpcztcbiAgICAgIHZhciBpc0NvcmUgPSAhc2VsZklzQXJyYXlMaWtlO1xuICAgICAgdmFyIGlzRWxlcyA9ICFpc0NvcmU7XG5cbiAgICAgIGlmKCAhY3kuc3R5bGVFbmFibGVkKCkgKXsgcmV0dXJuIHRoaXM7IH1cblxuICAgICAgdmFyIHN0eWxlID0gY3kuc3R5bGUoKTtcblxuICAgICAgcHJvcGVydGllcyA9IHV0aWwuZXh0ZW5kKCB7fSwgcHJvcGVydGllcywgcGFyYW1zICk7XG5cbiAgICAgIGlmKCBwcm9wZXJ0aWVzLmR1cmF0aW9uID09PSB1bmRlZmluZWQgKXtcbiAgICAgICAgcHJvcGVydGllcy5kdXJhdGlvbiA9IDQwMDtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoKCBwcm9wZXJ0aWVzLmR1cmF0aW9uICl7XG4gICAgICBjYXNlICdzbG93JzpcbiAgICAgICAgcHJvcGVydGllcy5kdXJhdGlvbiA9IDYwMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdmYXN0JzpcbiAgICAgICAgcHJvcGVydGllcy5kdXJhdGlvbiA9IDIwMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9wZXJ0aWVzRW1wdHkgPSBPYmplY3Qua2V5cyggcHJvcGVydGllcyApLmxlbmd0aCA9PT0gMDtcblxuICAgICAgaWYoIHByb3BlcnRpZXNFbXB0eSApe1xuICAgICAgICByZXR1cm4gbmV3IEFuaW1hdGlvbiggYWxsWzBdLCBwcm9wZXJ0aWVzICk7IC8vIG5vdGhpbmcgdG8gYW5pbWF0ZVxuICAgICAgfVxuXG4gICAgICBpZiggaXNFbGVzICl7XG4gICAgICAgIHByb3BlcnRpZXMuc3R5bGUgPSBzdHlsZS5nZXRQcm9wc0xpc3QoIHByb3BlcnRpZXMuc3R5bGUgfHwgcHJvcGVydGllcy5jc3MgKTtcblxuICAgICAgICBwcm9wZXJ0aWVzLmNzcyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYoIHByb3BlcnRpZXMucmVuZGVyZWRQb3NpdGlvbiAmJiBpc0VsZXMgKXtcbiAgICAgICAgdmFyIHJwb3MgPSBwcm9wZXJ0aWVzLnJlbmRlcmVkUG9zaXRpb247XG4gICAgICAgIHZhciBwYW4gPSBjeS5wYW4oKTtcbiAgICAgICAgdmFyIHpvb20gPSBjeS56b29tKCk7XG5cbiAgICAgICAgcHJvcGVydGllcy5wb3NpdGlvbiA9IHtcbiAgICAgICAgICB4OiAoIHJwb3MueCAtIHBhbi54ICkgLyB6b29tLFxuICAgICAgICAgIHk6ICggcnBvcy55IC0gcGFuLnkgKSAvIHpvb21cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gb3ZlcnJpZGUgcGFuIHcvIHBhbkJ5IGlmIHNldFxuICAgICAgaWYoIHByb3BlcnRpZXMucGFuQnkgJiYgaXNDb3JlICl7XG4gICAgICAgIHZhciBwYW5CeSA9IHByb3BlcnRpZXMucGFuQnk7XG4gICAgICAgIHZhciBjeVBhbiA9IGN5LnBhbigpO1xuXG4gICAgICAgIHByb3BlcnRpZXMucGFuID0ge1xuICAgICAgICAgIHg6IGN5UGFuLnggKyBwYW5CeS54LFxuICAgICAgICAgIHk6IGN5UGFuLnkgKyBwYW5CeS55XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIG92ZXJyaWRlIHBhbiB3LyBjZW50ZXIgaWYgc2V0XG4gICAgICB2YXIgY2VudGVyID0gcHJvcGVydGllcy5jZW50ZXIgfHwgcHJvcGVydGllcy5jZW50cmU7XG4gICAgICBpZiggY2VudGVyICYmIGlzQ29yZSApe1xuICAgICAgICB2YXIgY2VudGVyUGFuID0gY3kuZ2V0Q2VudGVyUGFuKCBjZW50ZXIuZWxlcywgcHJvcGVydGllcy56b29tICk7XG5cbiAgICAgICAgaWYoIGNlbnRlclBhbiApe1xuICAgICAgICAgIHByb3BlcnRpZXMucGFuID0gY2VudGVyUGFuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIG92ZXJyaWRlIHBhbiAmIHpvb20gdy8gZml0IGlmIHNldFxuICAgICAgaWYoIHByb3BlcnRpZXMuZml0ICYmIGlzQ29yZSApe1xuICAgICAgICB2YXIgZml0ID0gcHJvcGVydGllcy5maXQ7XG4gICAgICAgIHZhciBmaXRWcCA9IGN5LmdldEZpdFZpZXdwb3J0KCBmaXQuZWxlcyB8fCBmaXQuYm91bmRpbmdCb3gsIGZpdC5wYWRkaW5nICk7XG5cbiAgICAgICAgaWYoIGZpdFZwICl7XG4gICAgICAgICAgcHJvcGVydGllcy5wYW4gPSBmaXRWcC5wYW47XG4gICAgICAgICAgcHJvcGVydGllcy56b29tID0gZml0VnAuem9vbTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEFuaW1hdGlvbiggYWxsWzBdLCBwcm9wZXJ0aWVzICk7XG4gICAgfTtcbiAgfSwgLy8gYW5pbWF0ZVxuXG4gIGFuaW1hdGU6IGZ1bmN0aW9uKCBmblBhcmFtcyApe1xuICAgIHZhciBkZWZhdWx0cyA9IHt9O1xuICAgIGZuUGFyYW1zID0gdXRpbC5leHRlbmQoIHt9LCBkZWZhdWx0cywgZm5QYXJhbXMgKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiBhbmltYXRlSW1wbCggcHJvcGVydGllcywgcGFyYW1zICl7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgc2VsZklzQXJyYXlMaWtlID0gc2VsZi5sZW5ndGggIT09IHVuZGVmaW5lZDtcbiAgICAgIHZhciBhbGwgPSBzZWxmSXNBcnJheUxpa2UgPyBzZWxmIDogWyBzZWxmIF07IC8vIHB1dCBpbiBhcnJheSBpZiBub3QgYXJyYXktbGlrZVxuICAgICAgdmFyIGN5ID0gdGhpcy5fcHJpdmF0ZS5jeSB8fCB0aGlzO1xuXG4gICAgICBpZiggIWN5LnN0eWxlRW5hYmxlZCgpICl7IHJldHVybiB0aGlzOyB9XG5cbiAgICAgIGlmKCBwYXJhbXMgKXtcbiAgICAgICAgcHJvcGVydGllcyA9IHV0aWwuZXh0ZW5kKCB7fSwgcHJvcGVydGllcywgcGFyYW1zICk7XG4gICAgICB9XG5cbiAgICAgIC8vIG1hbnVhbGx5IGhvb2sgYW5kIHJ1biB0aGUgYW5pbWF0aW9uXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGFsbC5sZW5ndGg7IGkrKyApe1xuICAgICAgICB2YXIgZWxlID0gYWxsWyBpIF07XG4gICAgICAgIHZhciBxdWV1ZSA9IGVsZS5hbmltYXRlZCgpICYmIChwcm9wZXJ0aWVzLnF1ZXVlID09PSB1bmRlZmluZWQgfHwgcHJvcGVydGllcy5xdWV1ZSk7XG5cbiAgICAgICAgdmFyIGFuaSA9IGVsZS5hbmltYXRpb24oIHByb3BlcnRpZXMsIChxdWV1ZSA/IHsgcXVldWU6IHRydWUgfSA6IHVuZGVmaW5lZCkgKTtcblxuICAgICAgICBhbmkucGxheSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbiAgICB9O1xuICB9LCAvLyBhbmltYXRlXG5cbiAgc3RvcDogZnVuY3Rpb24oIGZuUGFyYW1zICl7XG4gICAgdmFyIGRlZmF1bHRzID0ge307XG4gICAgZm5QYXJhbXMgPSB1dGlsLmV4dGVuZCgge30sIGRlZmF1bHRzLCBmblBhcmFtcyApO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHN0b3BJbXBsKCBjbGVhclF1ZXVlLCBqdW1wVG9FbmQgKXtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBzZWxmSXNBcnJheUxpa2UgPSBzZWxmLmxlbmd0aCAhPT0gdW5kZWZpbmVkO1xuICAgICAgdmFyIGFsbCA9IHNlbGZJc0FycmF5TGlrZSA/IHNlbGYgOiBbIHNlbGYgXTsgLy8gcHV0IGluIGFycmF5IGlmIG5vdCBhcnJheS1saWtlXG4gICAgICB2YXIgY3kgPSB0aGlzLl9wcml2YXRlLmN5IHx8IHRoaXM7XG5cbiAgICAgIGlmKCAhY3kuc3R5bGVFbmFibGVkKCkgKXsgcmV0dXJuIHRoaXM7IH1cblxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBhbGwubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGVsZSA9IGFsbFsgaSBdO1xuICAgICAgICB2YXIgX3AgPSBlbGUuX3ByaXZhdGU7XG4gICAgICAgIHZhciBhbmlzID0gX3AuYW5pbWF0aW9uLmN1cnJlbnQ7XG5cbiAgICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBhbmlzLmxlbmd0aDsgaisrICl7XG4gICAgICAgICAgdmFyIGFuaSA9IGFuaXNbIGogXTtcbiAgICAgICAgICB2YXIgYW5pX3AgPSBhbmkuX3ByaXZhdGU7XG5cbiAgICAgICAgICBpZigganVtcFRvRW5kICl7XG4gICAgICAgICAgICAvLyBuZXh0IGl0ZXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uIGxvb3AsIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgIC8vIHdpbGwgZ28gc3RyYWlnaHQgdG8gdGhlIGVuZCBhbmQgYmUgcmVtb3ZlZFxuICAgICAgICAgICAgYW5pX3AuZHVyYXRpb24gPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIHRoZSBxdWV1ZSBvZiBmdXR1cmUgYW5pbWF0aW9uc1xuICAgICAgICBpZiggY2xlYXJRdWV1ZSApe1xuICAgICAgICAgIF9wLmFuaW1hdGlvbi5xdWV1ZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoICFqdW1wVG9FbmQgKXtcbiAgICAgICAgICBfcC5hbmltYXRpb24uY3VycmVudCA9IFtdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHdlIGhhdmUgdG8gbm90aWZ5ICh0aGUgYW5pbWF0aW9uIGxvb3AgZG9lc24ndCBkbyBpdCBmb3IgdXMgb24gYHN0b3BgKVxuICAgICAgY3kubm90aWZ5KCB7XG4gICAgICAgIGVsZXM6IHRoaXMsXG4gICAgICAgIHR5cGU6ICdkcmF3J1xuICAgICAgfSApO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICB9IC8vIHN0b3BcblxufTsgLy8gZGVmaW5lXG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiFcbkV2ZW50IG9iamVjdCBiYXNlZCBvbiBqUXVlcnkgZXZlbnRzLCBNSVQgbGljZW5zZVxuXG5odHRwczovL2pxdWVyeS5vcmcvbGljZW5zZS9cbmh0dHBzOi8vdGxkcmxlZ2FsLmNvbS9saWNlbnNlL21pdC1saWNlbnNlXG5odHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9ibG9iL21hc3Rlci9zcmMvZXZlbnQuanNcbiovXG5cbnZhciBFdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICl7XG4gIC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuICBpZiggISh0aGlzIGluc3RhbmNlb2YgRXZlbnQpICl7XG4gICAgcmV0dXJuIG5ldyBFdmVudCggc3JjLCBwcm9wcyApO1xuICB9XG5cbiAgLy8gRXZlbnQgb2JqZWN0XG4gIGlmKCBzcmMgJiYgc3JjLnR5cGUgKXtcbiAgICB0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG4gICAgdGhpcy50eXBlID0gc3JjLnR5cGU7XG5cbiAgICAvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuICAgIC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gKCBzcmMuZGVmYXVsdFByZXZlbnRlZCApID8gcmV0dXJuVHJ1ZSA6IHJldHVybkZhbHNlO1xuXG4gIC8vIEV2ZW50IHR5cGVcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnR5cGUgPSBzcmM7XG4gIH1cblxuICAvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuICBpZiggcHJvcHMgKXtcbiAgICAvLyB1dGlsLmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblxuICAgIC8vIG1vcmUgZWZmaWNpZW50IHRvIG1hbnVhbGx5IGNvcHkgZmllbGRzIHdlIHVzZVxuICAgIHRoaXMudHlwZSA9IHByb3BzLnR5cGUgIT09IHVuZGVmaW5lZCA/IHByb3BzLnR5cGUgOiB0aGlzLnR5cGU7XG4gICAgdGhpcy5jeSA9IHByb3BzLmN5O1xuICAgIHRoaXMuY3lUYXJnZXQgPSBwcm9wcy5jeVRhcmdldDtcbiAgICB0aGlzLmN5UG9zaXRpb24gPSBwcm9wcy5jeVBvc2l0aW9uO1xuICAgIHRoaXMuY3lSZW5kZXJlZFBvc2l0aW9uID0gcHJvcHMuY3lSZW5kZXJlZFBvc2l0aW9uO1xuICAgIHRoaXMubmFtZXNwYWNlID0gcHJvcHMubmFtZXNwYWNlO1xuICAgIHRoaXMubGF5b3V0ID0gcHJvcHMubGF5b3V0O1xuICAgIHRoaXMuZGF0YSA9IHByb3BzLmRhdGE7XG4gICAgdGhpcy5tZXNzYWdlID0gcHJvcHMubWVzc2FnZTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG4gIHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcbn07XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCl7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpe1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5FdmVudC5wcm90b3R5cGUgPSB7XG4gIGluc3RhbmNlU3RyaW5nOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiAnZXZlbnQnO1xuICB9LFxuXG4gIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpe1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuICAgIHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuICAgIGlmKCAhZSApe1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGlmIHByZXZlbnREZWZhdWx0IGV4aXN0cyBydW4gaXQgb24gdGhlIG9yaWdpbmFsIGV2ZW50XG4gICAgaWYoIGUucHJldmVudERlZmF1bHQgKXtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sXG5cbiAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpe1xuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG4gICAgdmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG4gICAgaWYoICFlICl7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gaWYgc3RvcFByb3BhZ2F0aW9uIGV4aXN0cyBydW4gaXQgb24gdGhlIG9yaWdpbmFsIGV2ZW50XG4gICAgaWYoIGUuc3RvcFByb3BhZ2F0aW9uICl7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfSxcblxuICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG4gICAgdGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSxcblxuICBpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuICBpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG4gIGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCAnLi91dGlsJyApO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoICcuL2RlZmluZScgKTtcbnZhciBDb2xsZWN0aW9uID0gcmVxdWlyZSggJy4vY29sbGVjdGlvbicgKTtcbnZhciBDb3JlID0gcmVxdWlyZSggJy4vY29yZScgKTtcbnZhciBpbmNFeHRzID0gcmVxdWlyZSggJy4vZXh0ZW5zaW9ucycgKTtcbnZhciBpcyA9IHJlcXVpcmUoICcuL2lzJyApO1xuXG4vLyByZWdpc3RlcmVkIGV4dGVuc2lvbnMgdG8gY3l0b3NjYXBlLCBpbmRleGVkIGJ5IG5hbWVcbnZhciBleHRlbnNpb25zID0ge307XG5cbi8vIHJlZ2lzdGVyZWQgbW9kdWxlcyBmb3IgZXh0ZW5zaW9ucywgaW5kZXhlZCBieSBuYW1lXG52YXIgbW9kdWxlcyA9IHt9O1xuXG5mdW5jdGlvbiBzZXRFeHRlbnNpb24oIHR5cGUsIG5hbWUsIHJlZ2lzdHJhbnQgKXtcblxuICB2YXIgZXh0ID0gcmVnaXN0cmFudDtcblxuICB2YXIgb3ZlcnJpZGVFcnIgPSBmdW5jdGlvbiggZmllbGQgKXtcbiAgICB1dGlsLmVycm9yKCAnQ2FuIG5vdCByZWdpc3RlciBgJyArIG5hbWUgKyAnYCBmb3IgYCcgKyB0eXBlICsgJ2Agc2luY2UgYCcgKyBmaWVsZCArICdgIGFscmVhZHkgZXhpc3RzIGluIHRoZSBwcm90b3R5cGUgYW5kIGNhbiBub3QgYmUgb3ZlcnJpZGRlbicgKTtcbiAgfTtcblxuICBpZiggdHlwZSA9PT0gJ2NvcmUnICl7XG4gICAgaWYoIENvcmUucHJvdG90eXBlWyBuYW1lIF0gKXtcbiAgICAgIHJldHVybiBvdmVycmlkZUVyciggbmFtZSApO1xuICAgIH0gZWxzZSB7XG4gICAgICBDb3JlLnByb3RvdHlwZVsgbmFtZSBdID0gcmVnaXN0cmFudDtcbiAgICB9XG5cbiAgfSBlbHNlIGlmKCB0eXBlID09PSAnY29sbGVjdGlvbicgKXtcbiAgICBpZiggQ29sbGVjdGlvbi5wcm90b3R5cGVbIG5hbWUgXSApe1xuICAgICAgcmV0dXJuIG92ZXJyaWRlRXJyKCBuYW1lICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIENvbGxlY3Rpb24ucHJvdG90eXBlWyBuYW1lIF0gPSByZWdpc3RyYW50O1xuICAgIH1cblxuICB9IGVsc2UgaWYoIHR5cGUgPT09ICdsYXlvdXQnICl7XG4gICAgLy8gZmlsbCBpbiBtaXNzaW5nIGxheW91dCBmdW5jdGlvbnMgaW4gdGhlIHByb3RvdHlwZVxuXG4gICAgdmFyIExheW91dCA9IGZ1bmN0aW9uKCBvcHRpb25zICl7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICByZWdpc3RyYW50LmNhbGwoIHRoaXMsIG9wdGlvbnMgKTtcblxuICAgICAgLy8gbWFrZSBzdXJlIGxheW91dCBoYXMgX3ByaXZhdGUgZm9yIHVzZSB3LyBzdGQgYXBpcyBsaWtlIC5vbigpXG4gICAgICBpZiggIWlzLnBsYWluT2JqZWN0KCB0aGlzLl9wcml2YXRlICkgKXtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZSA9IHt9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wcml2YXRlLmN5ID0gb3B0aW9ucy5jeTtcbiAgICAgIHRoaXMuX3ByaXZhdGUubGlzdGVuZXJzID0gW107XG4gICAgfTtcblxuICAgIHZhciBsYXlvdXRQcm90byA9IExheW91dC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCByZWdpc3RyYW50LnByb3RvdHlwZSApO1xuXG4gICAgdmFyIG9wdExheW91dEZucyA9IFtdO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBvcHRMYXlvdXRGbnMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBmbk5hbWUgPSBvcHRMYXlvdXRGbnNbIGkgXTtcblxuICAgICAgbGF5b3V0UHJvdG9bIGZuTmFtZSBdID0gbGF5b3V0UHJvdG9bIGZuTmFtZSBdIHx8IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9O1xuICAgIH1cblxuICAgIC8vIGVpdGhlciAuc3RhcnQoKSBvciAucnVuKCkgaXMgZGVmaW5lZCwgc28gYXV0b2dlbiB0aGUgb3RoZXJcbiAgICBpZiggbGF5b3V0UHJvdG8uc3RhcnQgJiYgIWxheW91dFByb3RvLnJ1biApe1xuICAgICAgbGF5b3V0UHJvdG8ucnVuID0gZnVuY3Rpb24oKXsgdGhpcy5zdGFydCgpOyByZXR1cm4gdGhpczsgfTtcbiAgICB9IGVsc2UgaWYoICFsYXlvdXRQcm90by5zdGFydCAmJiBsYXlvdXRQcm90by5ydW4gKXtcbiAgICAgIGxheW91dFByb3RvLnN0YXJ0ID0gZnVuY3Rpb24oKXsgdGhpcy5ydW4oKTsgcmV0dXJuIHRoaXM7IH07XG4gICAgfVxuXG4gICAgaWYoICFsYXlvdXRQcm90by5zdG9wICl7XG4gICAgICBsYXlvdXRQcm90by5zdG9wID0gZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIG9wdHMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgaWYoIG9wdHMgJiYgb3B0cy5hbmltYXRlICl7XG4gICAgICAgICAgdmFyIGFuaXMgPSB0aGlzLmFuaW1hdGlvbnM7XG4gICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBhbmlzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgICAgICBhbmlzWyBpIF0uc3RvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJpZ2dlciggJ2xheW91dHN0b3AnICk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmKCAhbGF5b3V0UHJvdG8uZGVzdHJveSApe1xuICAgICAgbGF5b3V0UHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBsYXlvdXRQcm90by5vbiA9IGRlZmluZS5vbiggeyBsYXlvdXQ6IHRydWUgfSApO1xuICAgIGxheW91dFByb3RvLm9uZSA9IGRlZmluZS5vbiggeyBsYXlvdXQ6IHRydWUsIHVuYmluZFNlbGZPblRyaWdnZXI6IHRydWUgfSApO1xuICAgIGxheW91dFByb3RvLm9uY2UgPSBkZWZpbmUub24oIHsgbGF5b3V0OiB0cnVlLCB1bmJpbmRBbGxCaW5kZXJzT25UcmlnZ2VyOiB0cnVlIH0gKTtcbiAgICBsYXlvdXRQcm90by5vZmYgPSBkZWZpbmUub2ZmKCB7IGxheW91dDogdHJ1ZSB9ICk7XG4gICAgbGF5b3V0UHJvdG8udHJpZ2dlciA9IGRlZmluZS50cmlnZ2VyKCB7IGxheW91dDogdHJ1ZSB9ICk7XG5cbiAgICBkZWZpbmUuZXZlbnRBbGlhc2VzT24oIGxheW91dFByb3RvICk7XG5cbiAgICBleHQgPSBMYXlvdXQ7IC8vIHJlcGxhY2Ugd2l0aCBvdXIgd3JhcHBlZCBsYXlvdXRcblxuICB9IGVsc2UgaWYoIHR5cGUgPT09ICdyZW5kZXJlcicgJiYgbmFtZSAhPT0gJ251bGwnICYmIG5hbWUgIT09ICdiYXNlJyApe1xuICAgIC8vIHVzZXIgcmVnaXN0ZXJlZCByZW5kZXJlcnMgaW5oZXJpdCBmcm9tIGJhc2VcblxuICAgIHZhciBCYXNlUmVuZGVyZXIgPSBnZXRFeHRlbnNpb24oICdyZW5kZXJlcicsICdiYXNlJyApO1xuICAgIHZhciBiUHJvdG8gPSBCYXNlUmVuZGVyZXIucHJvdG90eXBlO1xuICAgIHZhciBSZWdpc3RyYW50UmVuZGVyZXIgPSByZWdpc3RyYW50O1xuICAgIHZhciByUHJvdG8gPSByZWdpc3RyYW50LnByb3RvdHlwZTtcblxuICAgIHZhciBSZW5kZXJlciA9IGZ1bmN0aW9uKCl7XG4gICAgICBCYXNlUmVuZGVyZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuICAgICAgUmVnaXN0cmFudFJlbmRlcmVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICB9O1xuXG4gICAgdmFyIHByb3RvID0gUmVuZGVyZXIucHJvdG90eXBlO1xuXG4gICAgZm9yKCB2YXIgcE5hbWUgaW4gYlByb3RvICl7XG4gICAgICB2YXIgcFZhbCA9IGJQcm90b1sgcE5hbWUgXTtcbiAgICAgIHZhciBleGlzdHNJblIgPSByUHJvdG9bIHBOYW1lIF0gIT0gbnVsbDtcblxuICAgICAgaWYoIGV4aXN0c0luUiApe1xuICAgICAgICByZXR1cm4gb3ZlcnJpZGVFcnIoIHBOYW1lICk7XG4gICAgICB9XG5cbiAgICAgIHByb3RvWyBwTmFtZSBdID0gcFZhbDsgLy8gdGFrZSBpbXBsIGZyb20gYmFzZVxuICAgIH1cblxuICAgIGZvciggdmFyIHBOYW1lIGluIHJQcm90byApe1xuICAgICAgcHJvdG9bIHBOYW1lIF0gPSByUHJvdG9bIHBOYW1lIF07IC8vIHRha2UgaW1wbCBmcm9tIHJlZ2lzdHJhbnRcbiAgICB9XG5cbiAgICBiUHJvdG8uY2xpZW50RnVuY3Rpb25zLmZvckVhY2goIGZ1bmN0aW9uKCBuYW1lICl7XG4gICAgICBwcm90b1sgbmFtZSBdID0gcHJvdG9bIG5hbWUgXSB8fCBmdW5jdGlvbigpe1xuICAgICAgICB1dGlsLmVycm9yKCAnUmVuZGVyZXIgZG9lcyBub3QgaW1wbGVtZW50IGByZW5kZXJlci4nICsgbmFtZSArICcoKWAgb24gaXRzIHByb3RvdHlwZScgKTtcbiAgICAgIH07XG4gICAgfSApO1xuXG4gICAgZXh0ID0gUmVuZGVyZXI7XG5cbiAgfVxuXG4gIHJldHVybiB1dGlsLnNldE1hcCgge1xuICAgIG1hcDogZXh0ZW5zaW9ucyxcbiAgICBrZXlzOiBbIHR5cGUsIG5hbWUgXSxcbiAgICB2YWx1ZTogZXh0XG4gIH0gKTtcbn1cblxuZnVuY3Rpb24gZ2V0RXh0ZW5zaW9uKCB0eXBlLCBuYW1lICl7XG4gIHJldHVybiB1dGlsLmdldE1hcCgge1xuICAgIG1hcDogZXh0ZW5zaW9ucyxcbiAgICBrZXlzOiBbIHR5cGUsIG5hbWUgXVxuICB9ICk7XG59XG5cbmZ1bmN0aW9uIHNldE1vZHVsZSggdHlwZSwgbmFtZSwgbW9kdWxlVHlwZSwgbW9kdWxlTmFtZSwgcmVnaXN0cmFudCApe1xuICByZXR1cm4gdXRpbC5zZXRNYXAoIHtcbiAgICBtYXA6IG1vZHVsZXMsXG4gICAga2V5czogWyB0eXBlLCBuYW1lLCBtb2R1bGVUeXBlLCBtb2R1bGVOYW1lIF0sXG4gICAgdmFsdWU6IHJlZ2lzdHJhbnRcbiAgfSApO1xufVxuXG5mdW5jdGlvbiBnZXRNb2R1bGUoIHR5cGUsIG5hbWUsIG1vZHVsZVR5cGUsIG1vZHVsZU5hbWUgKXtcbiAgcmV0dXJuIHV0aWwuZ2V0TWFwKCB7XG4gICAgbWFwOiBtb2R1bGVzLFxuICAgIGtleXM6IFsgdHlwZSwgbmFtZSwgbW9kdWxlVHlwZSwgbW9kdWxlTmFtZSBdXG4gIH0gKTtcbn1cblxudmFyIGV4dGVuc2lvbiA9IGZ1bmN0aW9uKCl7XG4gIC8vIGUuZy4gZXh0ZW5zaW9uKCdyZW5kZXJlcicsICdzdmcnKVxuICBpZiggYXJndW1lbnRzLmxlbmd0aCA9PT0gMiApe1xuICAgIHJldHVybiBnZXRFeHRlbnNpb24uYXBwbHkoIG51bGwsIGFyZ3VtZW50cyApO1xuICB9XG5cbiAgLy8gZS5nLiBleHRlbnNpb24oJ3JlbmRlcmVyJywgJ3N2ZycsIHsgLi4uIH0pXG4gIGVsc2UgaWYoIGFyZ3VtZW50cy5sZW5ndGggPT09IDMgKXtcbiAgICByZXR1cm4gc2V0RXh0ZW5zaW9uLmFwcGx5KCBudWxsLCBhcmd1bWVudHMgKTtcbiAgfVxuXG4gIC8vIGUuZy4gZXh0ZW5zaW9uKCdyZW5kZXJlcicsICdzdmcnLCAnbm9kZVNoYXBlJywgJ2VsbGlwc2UnKVxuICBlbHNlIGlmKCBhcmd1bWVudHMubGVuZ3RoID09PSA0ICl7XG4gICAgcmV0dXJuIGdldE1vZHVsZS5hcHBseSggbnVsbCwgYXJndW1lbnRzICk7XG4gIH1cblxuICAvLyBlLmcuIGV4dGVuc2lvbigncmVuZGVyZXInLCAnc3ZnJywgJ25vZGVTaGFwZScsICdlbGxpcHNlJywgeyAuLi4gfSlcbiAgZWxzZSBpZiggYXJndW1lbnRzLmxlbmd0aCA9PT0gNSApe1xuICAgIHJldHVybiBzZXRNb2R1bGUuYXBwbHkoIG51bGwsIGFyZ3VtZW50cyApO1xuICB9XG5cbiAgZWxzZSB7XG4gICAgdXRpbC5lcnJvciggJ0ludmFsaWQgZXh0ZW5zaW9uIGFjY2VzcyBzeW50YXgnICk7XG4gIH1cblxufTtcblxuLy8gYWxsb3dzIGEgY29yZSBpbnN0YW5jZSB0byBhY2Nlc3MgZXh0ZW5zaW9ucyBpbnRlcm5hbGx5XG5Db3JlLnByb3RvdHlwZS5leHRlbnNpb24gPSBleHRlbnNpb247XG5cbi8vIGluY2x1ZGVkIGV4dGVuc2lvbnNcbmluY0V4dHMuZm9yRWFjaCggZnVuY3Rpb24oIGdyb3VwICl7XG4gIGdyb3VwLmV4dGVuc2lvbnMuZm9yRWFjaCggZnVuY3Rpb24oIGV4dCApe1xuICAgIHNldEV4dGVuc2lvbiggZ3JvdXAudHlwZSwgZXh0Lm5hbWUsIGV4dC5pbXBsICk7XG4gIH0gKTtcbn0gKTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHRlbnNpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gW1xuICB7XG4gICAgdHlwZTogJ2xheW91dCcsXG4gICAgZXh0ZW5zaW9uczogcmVxdWlyZSggJy4vbGF5b3V0JyApXG4gIH0sXG5cbiAge1xuICAgIHR5cGU6ICdyZW5kZXJlcicsXG4gICAgZXh0ZW5zaW9uczogcmVxdWlyZSggJy4vcmVuZGVyZXInIClcbiAgfVxuXTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vLi4vdXRpbCcgKTtcbnZhciBtYXRoID0gcmVxdWlyZSggJy4uLy4uL21hdGgnICk7XG52YXIgaXMgPSByZXF1aXJlKCAnLi4vLi4vaXMnICk7XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgZml0OiB0cnVlLCAvLyB3aGV0aGVyIHRvIGZpdCB0aGUgdmlld3BvcnQgdG8gdGhlIGdyYXBoXG4gIGRpcmVjdGVkOiBmYWxzZSwgLy8gd2hldGhlciB0aGUgdHJlZSBpcyBkaXJlY3RlZCBkb3dud2FyZHMgKG9yIGVkZ2VzIGNhbiBwb2ludCBpbiBhbnkgZGlyZWN0aW9uIGlmIGZhbHNlKVxuICBwYWRkaW5nOiAzMCwgLy8gcGFkZGluZyBvbiBmaXRcbiAgY2lyY2xlOiBmYWxzZSwgLy8gcHV0IGRlcHRocyBpbiBjb25jZW50cmljIGNpcmNsZXMgaWYgdHJ1ZSwgcHV0IGRlcHRocyB0b3AgZG93biBpZiBmYWxzZVxuICBzcGFjaW5nRmFjdG9yOiAxLjc1LCAvLyBwb3NpdGl2ZSBzcGFjaW5nIGZhY3RvciwgbGFyZ2VyID0+IG1vcmUgc3BhY2UgYmV0d2VlbiBub2RlcyAoTi5CLiBuL2EgaWYgY2F1c2VzIG92ZXJsYXApXG4gIGJvdW5kaW5nQm94OiB1bmRlZmluZWQsIC8vIGNvbnN0cmFpbiBsYXlvdXQgYm91bmRzOyB7IHgxLCB5MSwgeDIsIHkyIH0gb3IgeyB4MSwgeTEsIHcsIGggfVxuICBhdm9pZE92ZXJsYXA6IHRydWUsIC8vIHByZXZlbnRzIG5vZGUgb3ZlcmxhcCwgbWF5IG92ZXJmbG93IGJvdW5kaW5nQm94IGlmIG5vdCBlbm91Z2ggc3BhY2VcbiAgcm9vdHM6IHVuZGVmaW5lZCwgLy8gdGhlIHJvb3RzIG9mIHRoZSB0cmVlc1xuICBtYXhpbWFsQWRqdXN0bWVudHM6IDAsIC8vIGhvdyBtYW55IHRpbWVzIHRvIHRyeSB0byBwb3NpdGlvbiB0aGUgbm9kZXMgaW4gYSBtYXhpbWFsIHdheSAoaS5lLiBubyBiYWNrdHJhY2tpbmcpXG4gIGFuaW1hdGU6IGZhbHNlLCAvLyB3aGV0aGVyIHRvIHRyYW5zaXRpb24gdGhlIG5vZGUgcG9zaXRpb25zXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiA1MDAsIC8vIGR1cmF0aW9uIG9mIGFuaW1hdGlvbiBpbiBtcyBpZiBlbmFibGVkXG4gIGFuaW1hdGlvbkVhc2luZzogdW5kZWZpbmVkLCAvLyBlYXNpbmcgb2YgYW5pbWF0aW9uIGlmIGVuYWJsZWRcbiAgcmVhZHk6IHVuZGVmaW5lZCwgLy8gY2FsbGJhY2sgb24gbGF5b3V0cmVhZHlcbiAgc3RvcDogdW5kZWZpbmVkIC8vIGNhbGxiYWNrIG9uIGxheW91dHN0b3Bcbn07XG5cbmZ1bmN0aW9uIEJyZWFkdGhGaXJzdExheW91dCggb3B0aW9ucyApe1xuICB0aGlzLm9wdGlvbnMgPSB1dGlsLmV4dGVuZCgge30sIGRlZmF1bHRzLCBvcHRpb25zICk7XG59XG5cbkJyZWFkdGhGaXJzdExheW91dC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKXtcbiAgdmFyIHBhcmFtcyA9IHRoaXMub3B0aW9ucztcbiAgdmFyIG9wdGlvbnMgPSBwYXJhbXM7XG5cbiAgdmFyIGN5ID0gcGFyYW1zLmN5O1xuICB2YXIgZWxlcyA9IG9wdGlvbnMuZWxlcztcbiAgdmFyIG5vZGVzID0gZWxlcy5ub2RlcygpLm5vdCggJzpwYXJlbnQnICk7XG4gIHZhciBncmFwaCA9IGVsZXM7XG5cbiAgdmFyIGJiID0gbWF0aC5tYWtlQm91bmRpbmdCb3goIG9wdGlvbnMuYm91bmRpbmdCb3ggPyBvcHRpb25zLmJvdW5kaW5nQm94IDoge1xuICAgIHgxOiAwLCB5MTogMCwgdzogY3kud2lkdGgoKSwgaDogY3kuaGVpZ2h0KClcbiAgfSApO1xuXG4gIHZhciByb290cztcbiAgaWYoIGlzLmVsZW1lbnRPckNvbGxlY3Rpb24oIG9wdGlvbnMucm9vdHMgKSApe1xuICAgIHJvb3RzID0gb3B0aW9ucy5yb290cztcbiAgfSBlbHNlIGlmKCBpcy5hcnJheSggb3B0aW9ucy5yb290cyApICl7XG4gICAgdmFyIHJvb3RzQXJyYXkgPSBbXTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5yb290cy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGlkID0gb3B0aW9ucy5yb290c1sgaSBdO1xuICAgICAgdmFyIGVsZSA9IGN5LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuICAgICAgcm9vdHNBcnJheS5wdXNoKCBlbGUgKTtcbiAgICB9XG5cbiAgICByb290cyA9IGN5LmNvbGxlY3Rpb24oIHJvb3RzQXJyYXkgKTtcbiAgfSBlbHNlIGlmKCBpcy5zdHJpbmcoIG9wdGlvbnMucm9vdHMgKSApe1xuICAgIHJvb3RzID0gY3kuJCggb3B0aW9ucy5yb290cyApO1xuXG4gIH0gZWxzZSB7XG4gICAgaWYoIG9wdGlvbnMuZGlyZWN0ZWQgKXtcbiAgICAgIHJvb3RzID0gbm9kZXMucm9vdHMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNvbXBvbmVudHMgPSBbXTtcbiAgICAgIHZhciB1bmhhbmRsZWROb2RlcyA9IG5vZGVzO1xuXG4gICAgICB3aGlsZSggdW5oYW5kbGVkTm9kZXMubGVuZ3RoID4gMCApe1xuICAgICAgICB2YXIgY3VyckNvbXAgPSBjeS5jb2xsZWN0aW9uKCk7XG5cbiAgICAgICAgZWxlcy5iZnMoIHtcbiAgICAgICAgICByb290czogdW5oYW5kbGVkTm9kZXNbMF0sXG4gICAgICAgICAgdmlzaXQ6IGZ1bmN0aW9uKCBpLCBkZXB0aCwgbm9kZSwgZWRnZSwgcE5vZGUgKXtcbiAgICAgICAgICAgIGN1cnJDb21wID0gY3VyckNvbXAuYWRkKCBub2RlICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkaXJlY3RlZDogZmFsc2VcbiAgICAgICAgfSApO1xuXG4gICAgICAgIHVuaGFuZGxlZE5vZGVzID0gdW5oYW5kbGVkTm9kZXMubm90KCBjdXJyQ29tcCApO1xuICAgICAgICBjb21wb25lbnRzLnB1c2goIGN1cnJDb21wICk7XG4gICAgICB9XG5cbiAgICAgIHJvb3RzID0gY3kuY29sbGVjdGlvbigpO1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBjb21wb25lbnRzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBjb21wID0gY29tcG9uZW50c1sgaSBdO1xuICAgICAgICB2YXIgbWF4RGVncmVlID0gY29tcC5tYXhEZWdyZWUoIGZhbHNlICk7XG4gICAgICAgIHZhciBjb21wUm9vdHMgPSBjb21wLmZpbHRlciggZnVuY3Rpb24oKXtcbiAgICAgICAgICByZXR1cm4gdGhpcy5kZWdyZWUoIGZhbHNlICkgPT09IG1heERlZ3JlZTtcbiAgICAgICAgfSApO1xuXG4gICAgICAgIHJvb3RzID0gcm9vdHMuYWRkKCBjb21wUm9vdHMgKTtcbiAgICAgIH1cblxuICAgIH1cbiAgfVxuXG5cbiAgdmFyIGRlcHRocyA9IFtdO1xuICB2YXIgZm91bmRCeUJmcyA9IHt9O1xuICB2YXIgaWQyZGVwdGggPSB7fTtcbiAgdmFyIHByZXZOb2RlID0ge307XG4gIHZhciBwcmV2RWRnZSA9IHt9O1xuICB2YXIgc3VjY2Vzc29ycyA9IHt9O1xuXG4gIC8vIGZpbmQgdGhlIGRlcHRocyBvZiB0aGUgbm9kZXNcbiAgZ3JhcGguYmZzKCB7XG4gICAgcm9vdHM6IHJvb3RzLFxuICAgIGRpcmVjdGVkOiBvcHRpb25zLmRpcmVjdGVkLFxuICAgIHZpc2l0OiBmdW5jdGlvbiggaSwgZGVwdGgsIG5vZGUsIGVkZ2UsIHBOb2RlICl7XG4gICAgICB2YXIgZWxlID0gdGhpc1swXTtcbiAgICAgIHZhciBpZCA9IGVsZS5pZCgpO1xuXG4gICAgICBpZiggIWRlcHRoc1sgZGVwdGggXSApe1xuICAgICAgICBkZXB0aHNbIGRlcHRoIF0gPSBbXTtcbiAgICAgIH1cblxuICAgICAgZGVwdGhzWyBkZXB0aCBdLnB1c2goIGVsZSApO1xuICAgICAgZm91bmRCeUJmc1sgaWQgXSA9IHRydWU7XG4gICAgICBpZDJkZXB0aFsgaWQgXSA9IGRlcHRoO1xuICAgICAgcHJldk5vZGVbIGlkIF0gPSBwTm9kZTtcbiAgICAgIHByZXZFZGdlWyBpZCBdID0gZWRnZTtcblxuICAgICAgaWYoIHBOb2RlICl7XG4gICAgICAgIHZhciBwcmV2SWQgPSBwTm9kZS5pZCgpO1xuICAgICAgICB2YXIgc3VjYyA9IHN1Y2Nlc3NvcnNbIHByZXZJZCBdID0gc3VjY2Vzc29yc1sgcHJldklkIF0gfHwgW107XG5cbiAgICAgICAgc3VjYy5wdXNoKCBub2RlICk7XG4gICAgICB9XG4gICAgfVxuICB9ICk7XG5cbiAgLy8gY2hlY2sgZm9yIG5vZGVzIG5vdCBmb3VuZCBieSBiZnNcbiAgdmFyIG9ycGhhbk5vZGVzID0gW107XG4gIGZvciggdmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgZWxlID0gbm9kZXNbIGkgXTtcblxuICAgIGlmKCBmb3VuZEJ5QmZzWyBlbGUuaWQoKSBdICl7XG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3JwaGFuTm9kZXMucHVzaCggZWxlICk7XG4gICAgfVxuICB9XG5cbiAgLy8gYXNzaWduIG9ycGhhbiBub2RlcyBhIGRlcHRoIGZyb20gdGhlaXIgbmVpZ2hib3Job29kXG4gIHZhciBtYXhDaGVja3MgPSBvcnBoYW5Ob2Rlcy5sZW5ndGggKiAzO1xuICB2YXIgY2hlY2tzID0gMDtcbiAgd2hpbGUoIG9ycGhhbk5vZGVzLmxlbmd0aCAhPT0gMCAmJiBjaGVja3MgPCBtYXhDaGVja3MgKXtcbiAgICB2YXIgbm9kZSA9IG9ycGhhbk5vZGVzLnNoaWZ0KCk7XG4gICAgdmFyIG5laWdoYm9ycyA9IG5vZGUubmVpZ2hib3Job29kKCkubm9kZXMoKTtcbiAgICB2YXIgYXNzaWduZWREZXB0aCA9IGZhbHNlO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBuZWlnaGJvcnMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBkZXB0aCA9IGlkMmRlcHRoWyBuZWlnaGJvcnNbIGkgXS5pZCgpIF07XG5cbiAgICAgIGlmKCBkZXB0aCAhPT0gdW5kZWZpbmVkICl7XG4gICAgICAgIGRlcHRoc1sgZGVwdGggXS5wdXNoKCBub2RlICk7XG4gICAgICAgIGFzc2lnbmVkRGVwdGggPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiggIWFzc2lnbmVkRGVwdGggKXtcbiAgICAgIG9ycGhhbk5vZGVzLnB1c2goIG5vZGUgKTtcbiAgICB9XG5cbiAgICBjaGVja3MrKztcbiAgfVxuXG4gIC8vIGFzc2lnbiBvcnBoYW4gbm9kZXMgdGhhdCBhcmUgc3RpbGwgbGVmdCB0byB0aGUgZGVwdGggb2YgdGhlaXIgc3ViZ3JhcGhcbiAgd2hpbGUoIG9ycGhhbk5vZGVzLmxlbmd0aCAhPT0gMCApe1xuICAgIHZhciBub2RlID0gb3JwaGFuTm9kZXMuc2hpZnQoKTtcbiAgICAvL3ZhciBzdWJncmFwaCA9IGdyYXBoLmJmcyggbm9kZSApLnBhdGg7XG4gICAgdmFyIGFzc2lnbmVkRGVwdGggPSBmYWxzZTtcblxuICAgIC8vIGZvciggdmFyIGkgPSAwOyBpIDwgc3ViZ3JhcGgubGVuZ3RoOyBpKysgKXtcbiAgICAvLyAgIHZhciBkZXB0aCA9IGlkMmRlcHRoWyBzdWJncmFwaFtpXS5pZCgpIF07XG5cbiAgICAvLyAgIGlmKCBkZXB0aCAhPT0gdW5kZWZpbmVkICl7XG4gICAgLy8gICAgIGRlcHRoc1tkZXB0aF0ucHVzaCggbm9kZSApO1xuICAgIC8vICAgICBhc3NpZ25lZERlcHRoID0gdHJ1ZTtcbiAgICAvLyAgICAgYnJlYWs7XG4gICAgLy8gICB9XG4gICAgLy8gfVxuXG4gICAgaWYoICFhc3NpZ25lZERlcHRoICl7IC8vIHdvcnN0IGNhc2UgaWYgdGhlIGdyYXBoIHJlYWxseSBpc24ndCB0cmVlIGZyaWVuZGx5LCB0aGVuIGp1c3QgZHVtcCBpdCBpbiAwXG4gICAgICBpZiggZGVwdGhzLmxlbmd0aCA9PT0gMCApe1xuICAgICAgICBkZXB0aHMucHVzaCggW10gKTtcbiAgICAgIH1cblxuICAgICAgZGVwdGhzWzBdLnB1c2goIG5vZGUgKTtcbiAgICB9XG4gIH1cblxuICAvLyBhc3NpZ24gdGhlIG5vZGVzIGEgZGVwdGggYW5kIGluZGV4XG4gIHZhciBhc3NpZ25EZXB0aHNUb0VsZXMgPSBmdW5jdGlvbigpe1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZGVwdGhzLmxlbmd0aDsgaSsrICl7XG4gICAgICB2YXIgZWxlcyA9IGRlcHRoc1sgaSBdO1xuXG4gICAgICBmb3IoIHZhciBqID0gMDsgaiA8IGVsZXMubGVuZ3RoOyBqKysgKXtcbiAgICAgICAgdmFyIGVsZSA9IGVsZXNbIGogXTtcblxuICAgICAgICBlbGUuX3ByaXZhdGUuc2NyYXRjaC5icmVhZHRoZmlyc3QgPSB7XG4gICAgICAgICAgZGVwdGg6IGksXG4gICAgICAgICAgaW5kZXg6IGpcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGFzc2lnbkRlcHRoc1RvRWxlcygpO1xuXG5cbiAgdmFyIGludGVyc2VjdHNEZXB0aCA9IGZ1bmN0aW9uKCBub2RlICl7IC8vIHJldHVybnMgdHJ1ZSBpZiBoYXMgZWRnZXMgcG9pbnRpbmcgaW4gZnJvbSBhIGhpZ2hlciBkZXB0aFxuICAgIHZhciBlZGdlcyA9IG5vZGUuY29ubmVjdGVkRWRnZXMoIGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy5kYXRhKCAndGFyZ2V0JyApID09PSBub2RlLmlkKCk7XG4gICAgfSApO1xuICAgIHZhciB0aGlzSW5mbyA9IG5vZGUuX3ByaXZhdGUuc2NyYXRjaC5icmVhZHRoZmlyc3Q7XG4gICAgdmFyIGhpZ2hlc3REZXB0aE9mT3RoZXIgPSAwO1xuICAgIHZhciBoaWdoZXN0T3RoZXI7XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlZGdlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGVkZ2UgPSBlZGdlc1sgaSBdO1xuICAgICAgdmFyIG90aGVyTm9kZSA9IGVkZ2Uuc291cmNlKClbMF07XG4gICAgICB2YXIgb3RoZXJJbmZvID0gb3RoZXJOb2RlLl9wcml2YXRlLnNjcmF0Y2guYnJlYWR0aGZpcnN0O1xuXG4gICAgICBpZiggdGhpc0luZm8uZGVwdGggPD0gb3RoZXJJbmZvLmRlcHRoICYmIGhpZ2hlc3REZXB0aE9mT3RoZXIgPCBvdGhlckluZm8uZGVwdGggKXtcbiAgICAgICAgaGlnaGVzdERlcHRoT2ZPdGhlciA9IG90aGVySW5mby5kZXB0aDtcbiAgICAgICAgaGlnaGVzdE90aGVyID0gb3RoZXJOb2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBoaWdoZXN0T3RoZXI7XG4gIH07XG5cbiAgLy8gbWFrZSBtYXhpbWFsIGlmIHNvIHNldCBieSBhZGp1c3RpbmcgZGVwdGhzXG4gIGZvciggdmFyIGFkaiA9IDA7IGFkaiA8IG9wdGlvbnMubWF4aW1hbEFkanVzdG1lbnRzOyBhZGorKyApe1xuXG4gICAgdmFyIG5EZXB0aHMgPSBkZXB0aHMubGVuZ3RoO1xuICAgIHZhciBlbGVzVG9Nb3ZlID0gW107XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBuRGVwdGhzOyBpKysgKXtcbiAgICAgIHZhciBkZXB0aCA9IGRlcHRoc1sgaSBdO1xuXG4gICAgICB2YXIgbkRlcHRoID0gZGVwdGgubGVuZ3RoO1xuICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBuRGVwdGg7IGorKyApe1xuICAgICAgICB2YXIgZWxlID0gZGVwdGhbIGogXTtcbiAgICAgICAgdmFyIGluZm8gPSBlbGUuX3ByaXZhdGUuc2NyYXRjaC5icmVhZHRoZmlyc3Q7XG4gICAgICAgIHZhciBpbnRFbGUgPSBpbnRlcnNlY3RzRGVwdGgoIGVsZSApO1xuXG4gICAgICAgIGlmKCBpbnRFbGUgKXtcbiAgICAgICAgICBpbmZvLmludEVsZSA9IGludEVsZTtcbiAgICAgICAgICBlbGVzVG9Nb3ZlLnB1c2goIGVsZSApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzVG9Nb3ZlLmxlbmd0aDsgaSsrICl7XG4gICAgICB2YXIgZWxlID0gZWxlc1RvTW92ZVsgaSBdO1xuICAgICAgdmFyIGluZm8gPSBlbGUuX3ByaXZhdGUuc2NyYXRjaC5icmVhZHRoZmlyc3Q7XG4gICAgICB2YXIgaW50RWxlID0gaW5mby5pbnRFbGU7XG4gICAgICB2YXIgaW50SW5mbyA9IGludEVsZS5fcHJpdmF0ZS5zY3JhdGNoLmJyZWFkdGhmaXJzdDtcblxuICAgICAgZGVwdGhzWyBpbmZvLmRlcHRoIF0uc3BsaWNlKCBpbmZvLmluZGV4LCAxICk7IC8vIHJlbW92ZSBmcm9tIG9sZCBkZXB0aCAmIGluZGV4XG5cbiAgICAgIC8vIGFkZCB0byBlbmQgb2YgbmV3IGRlcHRoXG4gICAgICB2YXIgbmV3RGVwdGggPSBpbnRJbmZvLmRlcHRoICsgMTtcbiAgICAgIHdoaWxlKCBuZXdEZXB0aCA+IGRlcHRocy5sZW5ndGggLSAxICl7XG4gICAgICAgIGRlcHRocy5wdXNoKCBbXSApO1xuICAgICAgfVxuICAgICAgZGVwdGhzWyBuZXdEZXB0aCBdLnB1c2goIGVsZSApO1xuXG4gICAgICBpbmZvLmRlcHRoID0gbmV3RGVwdGg7XG4gICAgICBpbmZvLmluZGV4ID0gZGVwdGhzWyBuZXdEZXB0aCBdLmxlbmd0aCAtIDE7XG4gICAgfVxuXG4gICAgYXNzaWduRGVwdGhzVG9FbGVzKCk7XG4gIH1cblxuICAvLyBmaW5kIG1pbiBkaXN0YW5jZSB3ZSBuZWVkIHRvIGxlYXZlIGJldHdlZW4gbm9kZXNcbiAgdmFyIG1pbkRpc3RhbmNlID0gMDtcbiAgaWYoIG9wdGlvbnMuYXZvaWRPdmVybGFwICl7XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIG4gPSBub2Rlc1sgaSBdO1xuICAgICAgdmFyIG5iYiA9IG4uYm91bmRpbmdCb3goKTtcbiAgICAgIHZhciB3ID0gbmJiLnc7XG4gICAgICB2YXIgaCA9IG5iYi5oO1xuXG4gICAgICBtaW5EaXN0YW5jZSA9IE1hdGgubWF4KCBtaW5EaXN0YW5jZSwgdywgaCApO1xuICAgIH1cbiAgICBtaW5EaXN0YW5jZSAqPSBvcHRpb25zLnNwYWNpbmdGYWN0b3I7IC8vIGp1c3QgdG8gaGF2ZSBzb21lIG5pY2Ugc3BhY2luZ1xuICB9XG5cbiAgLy8gZ2V0IHRoZSB3ZWlnaHRlZCBwZXJjZW50IGZvciBhbiBlbGVtZW50IGJhc2VkIG9uIGl0cyBjb25uZWN0aXZpdHkgdG8gb3RoZXIgbGV2ZWxzXG4gIHZhciBjYWNoZWRXZWlnaHRlZFBlcmNlbnQgPSB7fTtcbiAgdmFyIGdldFdlaWdodGVkUGVyY2VudCA9IGZ1bmN0aW9uKCBlbGUgKXtcbiAgICBpZiggY2FjaGVkV2VpZ2h0ZWRQZXJjZW50WyBlbGUuaWQoKSBdICl7XG4gICAgICByZXR1cm4gY2FjaGVkV2VpZ2h0ZWRQZXJjZW50WyBlbGUuaWQoKSBdO1xuICAgIH1cblxuICAgIHZhciBlbGVEZXB0aCA9IGVsZS5fcHJpdmF0ZS5zY3JhdGNoLmJyZWFkdGhmaXJzdC5kZXB0aDtcbiAgICB2YXIgbmVpZ2hib3JzID0gZWxlLm5laWdoYm9yaG9vZCgpLm5vZGVzKCkubm90KCAnOnBhcmVudCcgKTtcbiAgICB2YXIgcGVyY2VudCA9IDA7XG4gICAgdmFyIHNhbXBsZXMgPSAwO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBuZWlnaGJvcnMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBuZWlnaGJvciA9IG5laWdoYm9yc1sgaSBdO1xuICAgICAgdmFyIGJmID0gbmVpZ2hib3IuX3ByaXZhdGUuc2NyYXRjaC5icmVhZHRoZmlyc3Q7XG4gICAgICB2YXIgaW5kZXggPSBiZi5pbmRleDtcbiAgICAgIHZhciBkZXB0aCA9IGJmLmRlcHRoO1xuICAgICAgdmFyIG5EZXB0aCA9IGRlcHRoc1sgZGVwdGggXS5sZW5ndGg7XG5cbiAgICAgIGlmKCBlbGVEZXB0aCA+IGRlcHRoIHx8IGVsZURlcHRoID09PSAwICl7IC8vIG9ubHkgZ2V0IGluZmx1ZW5jZWQgYnkgZWxlbWVudHMgYWJvdmVcbiAgICAgICAgcGVyY2VudCArPSBpbmRleCAvIG5EZXB0aDtcbiAgICAgICAgc2FtcGxlcysrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNhbXBsZXMgPSBNYXRoLm1heCggMSwgc2FtcGxlcyApO1xuICAgIHBlcmNlbnQgPSBwZXJjZW50IC8gc2FtcGxlcztcblxuICAgIGlmKCBzYW1wbGVzID09PSAwICl7IC8vIHNvIGxvbmUgbm9kZXMgaGF2ZSBhIFwiZG9uJ3QgY2FyZVwiIHN0YXRlIGluIHNvcnRpbmdcbiAgICAgIHBlcmNlbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY2FjaGVkV2VpZ2h0ZWRQZXJjZW50WyBlbGUuaWQoKSBdID0gcGVyY2VudDtcbiAgICByZXR1cm4gcGVyY2VudDtcbiAgfTtcblxuXG4gIC8vIHJlYXJyYW5nZSB0aGUgaW5kaWNlcyBpbiBlYWNoIGRlcHRoIGxldmVsIGJhc2VkIG9uIGNvbm5lY3Rpdml0eVxuXG4gIHZhciBzb3J0Rm4gPSBmdW5jdGlvbiggYSwgYiApe1xuICAgIHZhciBhcGN0ID0gZ2V0V2VpZ2h0ZWRQZXJjZW50KCBhICk7XG4gICAgdmFyIGJwY3QgPSBnZXRXZWlnaHRlZFBlcmNlbnQoIGIgKTtcblxuICAgIHJldHVybiBhcGN0IC0gYnBjdDtcbiAgfTtcblxuICBmb3IoIHZhciB0aW1lcyA9IDA7IHRpbWVzIDwgMzsgdGltZXMrKyApeyAvLyBkbyBpdCBhIGZldyB0aW1lcyBiL2MgdGhlIGRlcHRocyBhcmUgZHluYW1pYyBhbmQgd2Ugd2FudCBhIG1vcmUgc3RhYmxlIHJlc3VsdFxuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBkZXB0aHMubGVuZ3RoOyBpKysgKXtcbiAgICAgIGRlcHRoc1sgaSBdID0gZGVwdGhzWyBpIF0uc29ydCggc29ydEZuICk7XG4gICAgfVxuICAgIGFzc2lnbkRlcHRoc1RvRWxlcygpOyAvLyBhbmQgdXBkYXRlXG5cbiAgfVxuXG4gIHZhciBiaWdnZXN0RGVwdGhTaXplID0gMDtcbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBkZXB0aHMubGVuZ3RoOyBpKysgKXtcbiAgICBiaWdnZXN0RGVwdGhTaXplID0gTWF0aC5tYXgoIGRlcHRoc1sgaSBdLmxlbmd0aCwgYmlnZ2VzdERlcHRoU2l6ZSApO1xuICB9XG5cbiAgdmFyIGNlbnRlciA9IHtcbiAgICB4OiBiYi54MSArIGJiLncgLyAyLFxuICAgIHk6IGJiLngxICsgYmIuaCAvIDJcbiAgfTtcblxuICB2YXIgZ2V0UG9zaXRpb24gPSBmdW5jdGlvbiggZWxlLCBpc0JvdHRvbURlcHRoICl7XG4gICAgdmFyIGluZm8gPSBlbGUuX3ByaXZhdGUuc2NyYXRjaC5icmVhZHRoZmlyc3Q7XG4gICAgdmFyIGRlcHRoID0gaW5mby5kZXB0aDtcbiAgICB2YXIgaW5kZXggPSBpbmZvLmluZGV4O1xuICAgIHZhciBkZXB0aFNpemUgPSBkZXB0aHNbIGRlcHRoIF0ubGVuZ3RoO1xuXG4gICAgdmFyIGRpc3RhbmNlWCA9IE1hdGgubWF4KCBiYi53IC8gKGRlcHRoU2l6ZSArIDEpLCBtaW5EaXN0YW5jZSApO1xuICAgIHZhciBkaXN0YW5jZVkgPSBNYXRoLm1heCggYmIuaCAvIChkZXB0aHMubGVuZ3RoICsgMSksIG1pbkRpc3RhbmNlICk7XG4gICAgdmFyIHJhZGl1c1N0ZXBTaXplID0gTWF0aC5taW4oIGJiLncgLyAyIC8gZGVwdGhzLmxlbmd0aCwgYmIuaCAvIDIgLyBkZXB0aHMubGVuZ3RoICk7XG4gICAgcmFkaXVzU3RlcFNpemUgPSBNYXRoLm1heCggcmFkaXVzU3RlcFNpemUsIG1pbkRpc3RhbmNlICk7XG5cbiAgICBpZiggIW9wdGlvbnMuY2lyY2xlICl7XG5cbiAgICAgIHZhciBlcG9zID0ge1xuICAgICAgICB4OiBjZW50ZXIueCArIChpbmRleCArIDEgLSAoZGVwdGhTaXplICsgMSkgLyAyKSAqIGRpc3RhbmNlWCxcbiAgICAgICAgeTogKGRlcHRoICsgMSkgKiBkaXN0YW5jZVlcbiAgICAgIH07XG5cbiAgICAgIGlmKCBpc0JvdHRvbURlcHRoICl7XG4gICAgICAgIHJldHVybiBlcG9zO1xuICAgICAgfVxuXG4gICAgICAvLyB2YXIgc3VjY3MgPSBzdWNjZXNzb3JzWyBlbGUuaWQoKSBdO1xuICAgICAgLy8gaWYoIHN1Y2NzICl7XG4gICAgICAvLyAgIGVwb3MueCA9IDA7XG4gICAgICAvL1xuICAgICAgLy8gICBmb3IoIHZhciBpID0gMCA7IGkgPCBzdWNjcy5sZW5ndGg7IGkrKyApe1xuICAgICAgLy8gICAgIHZhciBzcG9zID0gcG9zWyBzdWNjc1tpXS5pZCgpIF07XG4gICAgICAvL1xuICAgICAgLy8gICAgIGVwb3MueCArPSBzcG9zLng7XG4gICAgICAvLyAgIH1cbiAgICAgIC8vXG4gICAgICAvLyAgIGVwb3MueCAvPSBzdWNjcy5sZW5ndGg7XG4gICAgICAvLyB9IGVsc2Uge1xuICAgICAgLy8gICAvL2RlYnVnZ2VyO1xuICAgICAgLy8gfVxuXG4gICAgICByZXR1cm4gZXBvcztcblxuICAgIH0gZWxzZSB7XG4gICAgICBpZiggb3B0aW9ucy5jaXJjbGUgKXtcbiAgICAgICAgdmFyIHJhZGl1cyA9IHJhZGl1c1N0ZXBTaXplICogZGVwdGggKyByYWRpdXNTdGVwU2l6ZSAtIChkZXB0aHMubGVuZ3RoID4gMCAmJiBkZXB0aHNbMF0ubGVuZ3RoIDw9IDMgPyByYWRpdXNTdGVwU2l6ZSAvIDIgOiAwKTtcbiAgICAgICAgdmFyIHRoZXRhID0gMiAqIE1hdGguUEkgLyBkZXB0aHNbIGRlcHRoIF0ubGVuZ3RoICogaW5kZXg7XG5cbiAgICAgICAgaWYoIGRlcHRoID09PSAwICYmIGRlcHRoc1swXS5sZW5ndGggPT09IDEgKXtcbiAgICAgICAgICByYWRpdXMgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiBjZW50ZXIueCArIHJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApLFxuICAgICAgICAgIHk6IGNlbnRlci55ICsgcmFkaXVzICogTWF0aC5zaW4oIHRoZXRhIClcbiAgICAgICAgfTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiBjZW50ZXIueCArIChpbmRleCArIDEgLSAoZGVwdGhTaXplICsgMSkgLyAyKSAqIGRpc3RhbmNlWCxcbiAgICAgICAgICB5OiAoZGVwdGggKyAxKSAqIGRpc3RhbmNlWVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICB9O1xuXG4gIC8vIGdldCBwb3NpdGlvbnMgaW4gcmV2ZXJzZSBkZXB0aCBvcmRlclxuICB2YXIgcG9zID0ge307XG4gIGZvciggdmFyIGkgPSBkZXB0aHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKXtcbiAgICB2YXIgZGVwdGggPSBkZXB0aHNbIGkgXTtcblxuICAgIGZvciggdmFyIGogPSAwOyBqIDwgZGVwdGgubGVuZ3RoOyBqKysgKXtcbiAgICAgIHZhciBub2RlID0gZGVwdGhbIGogXTtcblxuICAgICAgcG9zWyBub2RlLmlkKCkgXSA9IGdldFBvc2l0aW9uKCBub2RlLCBpID09PSBkZXB0aHMubGVuZ3RoIC0gMSApO1xuICAgIH1cbiAgfVxuXG4gIG5vZGVzLmxheW91dFBvc2l0aW9ucyggdGhpcywgb3B0aW9ucywgZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gcG9zWyB0aGlzLmlkKCkgXTtcbiAgfSApO1xuXG4gIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCcmVhZHRoRmlyc3RMYXlvdXQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSggJy4uLy4uL3V0aWwnICk7XG52YXIgbWF0aCA9IHJlcXVpcmUoICcuLi8uLi9tYXRoJyApO1xudmFyIGlzID0gcmVxdWlyZSggJy4uLy4uL2lzJyApO1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGZpdDogdHJ1ZSwgLy8gd2hldGhlciB0byBmaXQgdGhlIHZpZXdwb3J0IHRvIHRoZSBncmFwaFxuICBwYWRkaW5nOiAzMCwgLy8gdGhlIHBhZGRpbmcgb24gZml0XG4gIGJvdW5kaW5nQm94OiB1bmRlZmluZWQsIC8vIGNvbnN0cmFpbiBsYXlvdXQgYm91bmRzOyB7IHgxLCB5MSwgeDIsIHkyIH0gb3IgeyB4MSwgeTEsIHcsIGggfVxuICBhdm9pZE92ZXJsYXA6IHRydWUsIC8vIHByZXZlbnRzIG5vZGUgb3ZlcmxhcCwgbWF5IG92ZXJmbG93IGJvdW5kaW5nQm94IGFuZCByYWRpdXMgaWYgbm90IGVub3VnaCBzcGFjZVxuICByYWRpdXM6IHVuZGVmaW5lZCwgLy8gdGhlIHJhZGl1cyBvZiB0aGUgY2lyY2xlXG4gIHN0YXJ0QW5nbGU6IDMgLyAyICogTWF0aC5QSSwgLy8gd2hlcmUgbm9kZXMgc3RhcnQgaW4gcmFkaWFuc1xuICBzd2VlcDogdW5kZWZpbmVkLCAvLyBob3cgbWFueSByYWRpYW5zIHNob3VsZCBiZSBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBub2RlIChkZWZhdWx0cyB0byBmdWxsIGNpcmNsZSlcbiAgY2xvY2t3aXNlOiB0cnVlLCAvLyB3aGV0aGVyIHRoZSBsYXlvdXQgc2hvdWxkIGdvIGNsb2Nrd2lzZSAodHJ1ZSkgb3IgY291bnRlcmNsb2Nrd2lzZS9hbnRpY2xvY2t3aXNlIChmYWxzZSlcbiAgc29ydDogdW5kZWZpbmVkLCAvLyBhIHNvcnRpbmcgZnVuY3Rpb24gdG8gb3JkZXIgdGhlIG5vZGVzOyBlLmcuIGZ1bmN0aW9uKGEsIGIpeyByZXR1cm4gYS5kYXRhKCd3ZWlnaHQnKSAtIGIuZGF0YSgnd2VpZ2h0JykgfVxuICBhbmltYXRlOiBmYWxzZSwgLy8gd2hldGhlciB0byB0cmFuc2l0aW9uIHRoZSBub2RlIHBvc2l0aW9uc1xuICBhbmltYXRpb25EdXJhdGlvbjogNTAwLCAvLyBkdXJhdGlvbiBvZiBhbmltYXRpb24gaW4gbXMgaWYgZW5hYmxlZFxuICBhbmltYXRpb25FYXNpbmc6IHVuZGVmaW5lZCwgLy8gZWFzaW5nIG9mIGFuaW1hdGlvbiBpZiBlbmFibGVkXG4gIHJlYWR5OiB1bmRlZmluZWQsIC8vIGNhbGxiYWNrIG9uIGxheW91dHJlYWR5XG4gIHN0b3A6IHVuZGVmaW5lZCAvLyBjYWxsYmFjayBvbiBsYXlvdXRzdG9wXG59O1xuXG5mdW5jdGlvbiBDaXJjbGVMYXlvdXQoIG9wdGlvbnMgKXtcbiAgdGhpcy5vcHRpb25zID0gdXRpbC5leHRlbmQoIHt9LCBkZWZhdWx0cywgb3B0aW9ucyApO1xufVxuXG5DaXJjbGVMYXlvdXQucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uKCl7XG4gIHZhciBwYXJhbXMgPSB0aGlzLm9wdGlvbnM7XG4gIHZhciBvcHRpb25zID0gcGFyYW1zO1xuXG4gIHZhciBjeSA9IHBhcmFtcy5jeTtcbiAgdmFyIGVsZXMgPSBvcHRpb25zLmVsZXM7XG5cbiAgdmFyIGNsb2Nrd2lzZSA9IG9wdGlvbnMuY291bnRlcmNsb2Nrd2lzZSAhPT0gdW5kZWZpbmVkID8gIW9wdGlvbnMuY291bnRlcmNsb2Nrd2lzZSA6IG9wdGlvbnMuY2xvY2t3aXNlO1xuXG4gIHZhciBub2RlcyA9IGVsZXMubm9kZXMoKS5ub3QoICc6cGFyZW50JyApO1xuXG4gIGlmKCBvcHRpb25zLnNvcnQgKXtcbiAgICBub2RlcyA9IG5vZGVzLnNvcnQoIG9wdGlvbnMuc29ydCApO1xuICB9XG5cbiAgdmFyIGJiID0gbWF0aC5tYWtlQm91bmRpbmdCb3goIG9wdGlvbnMuYm91bmRpbmdCb3ggPyBvcHRpb25zLmJvdW5kaW5nQm94IDoge1xuICAgIHgxOiAwLCB5MTogMCwgdzogY3kud2lkdGgoKSwgaDogY3kuaGVpZ2h0KClcbiAgfSApO1xuXG4gIHZhciBjZW50ZXIgPSB7XG4gICAgeDogYmIueDEgKyBiYi53IC8gMixcbiAgICB5OiBiYi55MSArIGJiLmggLyAyXG4gIH07XG5cbiAgdmFyIHN3ZWVwID0gb3B0aW9ucy5zd2VlcCA9PT0gdW5kZWZpbmVkID8gMiAqIE1hdGguUEkgLSAyICogTWF0aC5QSSAvIG5vZGVzLmxlbmd0aCA6IG9wdGlvbnMuc3dlZXA7XG5cbiAgdmFyIGRUaGV0YSA9IHN3ZWVwIC8gKCBNYXRoLm1heCggMSwgbm9kZXMubGVuZ3RoIC0gMSApICk7XG4gIHZhciByO1xuXG4gIHZhciBtaW5EaXN0YW5jZSA9IDA7XG4gIGZvciggdmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgbiA9IG5vZGVzWyBpIF07XG4gICAgdmFyIG5iYiA9IG4uYm91bmRpbmdCb3goKTtcbiAgICB2YXIgdyA9IG5iYi53O1xuICAgIHZhciBoID0gbmJiLmg7XG5cbiAgICBtaW5EaXN0YW5jZSA9IE1hdGgubWF4KCBtaW5EaXN0YW5jZSwgdywgaCApO1xuICB9XG5cbiAgaWYoIGlzLm51bWJlciggb3B0aW9ucy5yYWRpdXMgKSApe1xuICAgIHIgPSBvcHRpb25zLnJhZGl1cztcbiAgfSBlbHNlIGlmKCBub2Rlcy5sZW5ndGggPD0gMSApe1xuICAgIHIgPSAwO1xuICB9IGVsc2Uge1xuICAgIHIgPSBNYXRoLm1pbiggYmIuaCwgYmIudyApIC8gMiAtIG1pbkRpc3RhbmNlO1xuICB9XG5cbiAgLy8gY2FsY3VsYXRlIHRoZSByYWRpdXNcbiAgaWYoIG5vZGVzLmxlbmd0aCA+IDEgJiYgb3B0aW9ucy5hdm9pZE92ZXJsYXAgKXsgLy8gYnV0IG9ubHkgaWYgbW9yZSB0aGFuIG9uZSBub2RlIChjYW4ndCBvdmVybGFwKVxuICAgIG1pbkRpc3RhbmNlICo9IDEuNzU7IC8vIGp1c3QgdG8gaGF2ZSBzb21lIG5pY2Ugc3BhY2luZ1xuXG4gICAgdmFyIGRjb3MgPSBNYXRoLmNvcyggZFRoZXRhICkgLSBNYXRoLmNvcyggMCApO1xuICAgIHZhciBkc2luID0gTWF0aC5zaW4oIGRUaGV0YSApIC0gTWF0aC5zaW4oIDAgKTtcbiAgICB2YXIgck1pbiA9IE1hdGguc3FydCggbWluRGlzdGFuY2UgKiBtaW5EaXN0YW5jZSAvICggZGNvcyAqIGRjb3MgKyBkc2luICogZHNpbiApICk7IC8vIHMudC4gbm8gbm9kZXMgb3ZlcmxhcHBpbmdcbiAgICByID0gTWF0aC5tYXgoIHJNaW4sIHIgKTtcbiAgfVxuXG4gIHZhciBnZXRQb3MgPSBmdW5jdGlvbiggaSwgZWxlICl7XG4gICAgdmFyIHRoZXRhID0gb3B0aW9ucy5zdGFydEFuZ2xlICsgaSAqIGRUaGV0YSAqICggY2xvY2t3aXNlID8gMSA6IC0xICk7XG5cbiAgICB2YXIgcnggPSByICogTWF0aC5jb3MoIHRoZXRhICk7XG4gICAgdmFyIHJ5ID0gciAqIE1hdGguc2luKCB0aGV0YSApO1xuICAgIHZhciBwb3MgPSB7XG4gICAgICB4OiBjZW50ZXIueCArIHJ4LFxuICAgICAgeTogY2VudGVyLnkgKyByeVxuICAgIH07XG5cbiAgICByZXR1cm4gcG9zO1xuICB9O1xuXG4gIG5vZGVzLmxheW91dFBvc2l0aW9ucyggdGhpcywgb3B0aW9ucywgZ2V0UG9zICk7XG5cbiAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENpcmNsZUxheW91dDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vLi4vdXRpbCcgKTtcbnZhciBtYXRoID0gcmVxdWlyZSggJy4uLy4uL21hdGgnICk7XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgZml0OiB0cnVlLCAvLyB3aGV0aGVyIHRvIGZpdCB0aGUgdmlld3BvcnQgdG8gdGhlIGdyYXBoXG4gIHBhZGRpbmc6IDMwLCAvLyB0aGUgcGFkZGluZyBvbiBmaXRcbiAgc3RhcnRBbmdsZTogMyAvIDIgKiBNYXRoLlBJLCAvLyB3aGVyZSBub2RlcyBzdGFydCBpbiByYWRpYW5zXG4gIHN3ZWVwOiB1bmRlZmluZWQsIC8vIGhvdyBtYW55IHJhZGlhbnMgc2hvdWxkIGJlIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBsYXN0IG5vZGUgKGRlZmF1bHRzIHRvIGZ1bGwgY2lyY2xlKVxuICBjbG9ja3dpc2U6IHRydWUsIC8vIHdoZXRoZXIgdGhlIGxheW91dCBzaG91bGQgZ28gY2xvY2t3aXNlICh0cnVlKSBvciBjb3VudGVyY2xvY2t3aXNlL2FudGljbG9ja3dpc2UgKGZhbHNlKVxuICBlcXVpZGlzdGFudDogZmFsc2UsIC8vIHdoZXRoZXIgbGV2ZWxzIGhhdmUgYW4gZXF1YWwgcmFkaWFsIGRpc3RhbmNlIGJldHdlbiB0aGVtLCBtYXkgY2F1c2UgYm91bmRpbmcgYm94IG92ZXJmbG93XG4gIG1pbk5vZGVTcGFjaW5nOiAxMCwgLy8gbWluIHNwYWNpbmcgYmV0d2VlbiBvdXRzaWRlIG9mIG5vZGVzICh1c2VkIGZvciByYWRpdXMgYWRqdXN0bWVudClcbiAgYm91bmRpbmdCb3g6IHVuZGVmaW5lZCwgLy8gY29uc3RyYWluIGxheW91dCBib3VuZHM7IHsgeDEsIHkxLCB4MiwgeTIgfSBvciB7IHgxLCB5MSwgdywgaCB9XG4gIGF2b2lkT3ZlcmxhcDogdHJ1ZSwgLy8gcHJldmVudHMgbm9kZSBvdmVybGFwLCBtYXkgb3ZlcmZsb3cgYm91bmRpbmdCb3ggaWYgbm90IGVub3VnaCBzcGFjZVxuICBoZWlnaHQ6IHVuZGVmaW5lZCwgLy8gaGVpZ2h0IG9mIGxheW91dCBhcmVhIChvdmVycmlkZXMgY29udGFpbmVyIGhlaWdodClcbiAgd2lkdGg6IHVuZGVmaW5lZCwgLy8gd2lkdGggb2YgbGF5b3V0IGFyZWEgKG92ZXJyaWRlcyBjb250YWluZXIgd2lkdGgpXG4gIGNvbmNlbnRyaWM6IGZ1bmN0aW9uKCBub2RlICl7IC8vIHJldHVybnMgbnVtZXJpYyB2YWx1ZSBmb3IgZWFjaCBub2RlLCBwbGFjaW5nIGhpZ2hlciBub2RlcyBpbiBsZXZlbHMgdG93YXJkcyB0aGUgY2VudHJlXG4gICAgcmV0dXJuIG5vZGUuZGVncmVlKCk7XG4gIH0sXG4gIGxldmVsV2lkdGg6IGZ1bmN0aW9uKCBub2RlcyApeyAvLyB0aGUgdmFyaWF0aW9uIG9mIGNvbmNlbnRyaWMgdmFsdWVzIGluIGVhY2ggbGV2ZWxcbiAgICByZXR1cm4gbm9kZXMubWF4RGVncmVlKCkgLyA0O1xuICB9LFxuICBhbmltYXRlOiBmYWxzZSwgLy8gd2hldGhlciB0byB0cmFuc2l0aW9uIHRoZSBub2RlIHBvc2l0aW9uc1xuICBhbmltYXRpb25EdXJhdGlvbjogNTAwLCAvLyBkdXJhdGlvbiBvZiBhbmltYXRpb24gaW4gbXMgaWYgZW5hYmxlZFxuICBhbmltYXRpb25FYXNpbmc6IHVuZGVmaW5lZCwgLy8gZWFzaW5nIG9mIGFuaW1hdGlvbiBpZiBlbmFibGVkXG4gIHJlYWR5OiB1bmRlZmluZWQsIC8vIGNhbGxiYWNrIG9uIGxheW91dHJlYWR5XG4gIHN0b3A6IHVuZGVmaW5lZCAvLyBjYWxsYmFjayBvbiBsYXlvdXRzdG9wXG59O1xuXG5mdW5jdGlvbiBDb25jZW50cmljTGF5b3V0KCBvcHRpb25zICl7XG4gIHRoaXMub3B0aW9ucyA9IHV0aWwuZXh0ZW5kKCB7fSwgZGVmYXVsdHMsIG9wdGlvbnMgKTtcbn1cblxuQ29uY2VudHJpY0xheW91dC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKXtcbiAgdmFyIHBhcmFtcyA9IHRoaXMub3B0aW9ucztcbiAgdmFyIG9wdGlvbnMgPSBwYXJhbXM7XG5cbiAgdmFyIGNsb2Nrd2lzZSA9IG9wdGlvbnMuY291bnRlcmNsb2Nrd2lzZSAhPT0gdW5kZWZpbmVkID8gIW9wdGlvbnMuY291bnRlcmNsb2Nrd2lzZSA6IG9wdGlvbnMuY2xvY2t3aXNlO1xuXG4gIHZhciBjeSA9IHBhcmFtcy5jeTtcblxuICB2YXIgZWxlcyA9IG9wdGlvbnMuZWxlcztcbiAgdmFyIG5vZGVzID0gZWxlcy5ub2RlcygpLm5vdCggJzpwYXJlbnQnICk7XG5cbiAgdmFyIGJiID0gbWF0aC5tYWtlQm91bmRpbmdCb3goIG9wdGlvbnMuYm91bmRpbmdCb3ggPyBvcHRpb25zLmJvdW5kaW5nQm94IDoge1xuICAgIHgxOiAwLCB5MTogMCwgdzogY3kud2lkdGgoKSwgaDogY3kuaGVpZ2h0KClcbiAgfSApO1xuXG4gIHZhciBjZW50ZXIgPSB7XG4gICAgeDogYmIueDEgKyBiYi53IC8gMixcbiAgICB5OiBiYi55MSArIGJiLmggLyAyXG4gIH07XG5cbiAgdmFyIG5vZGVWYWx1ZXMgPSBbXTsgLy8geyBub2RlLCB2YWx1ZSB9XG4gIHZhciB0aGV0YSA9IG9wdGlvbnMuc3RhcnRBbmdsZTtcbiAgdmFyIG1heE5vZGVTaXplID0gMDtcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIG5vZGUgPSBub2Rlc1sgaSBdO1xuICAgIHZhciB2YWx1ZTtcblxuICAgIC8vIGNhbGN1bGF0ZSB0aGUgbm9kZSB2YWx1ZVxuICAgIHZhbHVlID0gb3B0aW9ucy5jb25jZW50cmljLmFwcGx5KCBub2RlLCBbIG5vZGUgXSApO1xuICAgIG5vZGVWYWx1ZXMucHVzaCgge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgbm9kZTogbm9kZVxuICAgIH0gKTtcblxuICAgIC8vIGZvciBzdHlsZSBtYXBwaW5nXG4gICAgbm9kZS5fcHJpdmF0ZS5zY3JhdGNoLmNvbmNlbnRyaWMgPSB2YWx1ZTtcbiAgfVxuXG4gIC8vIGluIGNhc2Ugd2UgdXNlZCB0aGUgYGNvbmNlbnRyaWNgIGluIHN0eWxlXG4gIG5vZGVzLnVwZGF0ZVN0eWxlKCk7XG5cbiAgLy8gY2FsY3VsYXRlIG1heCBzaXplIG5vdyBiYXNlZCBvbiBwb3RlbnRpYWxseSB1cGRhdGVkIG1hcHBlcnNcbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKyApe1xuICAgIHZhciBub2RlID0gbm9kZXNbIGkgXTtcbiAgICB2YXIgbmJiID0gbm9kZS5ib3VuZGluZ0JveCgpO1xuXG4gICAgbWF4Tm9kZVNpemUgPSBNYXRoLm1heCggbWF4Tm9kZVNpemUsIG5iYi53LCBuYmIuaCApO1xuICB9XG5cbiAgLy8gc29ydCBub2RlIHZhbHVlcyBpbiBkZXNjcmVhc2luZyBvcmRlclxuICBub2RlVmFsdWVzLnNvcnQoIGZ1bmN0aW9uKCBhLCBiICl7XG4gICAgcmV0dXJuIGIudmFsdWUgLSBhLnZhbHVlO1xuICB9ICk7XG5cbiAgdmFyIGxldmVsV2lkdGggPSBvcHRpb25zLmxldmVsV2lkdGgoIG5vZGVzICk7XG5cbiAgLy8gcHV0IHRoZSB2YWx1ZXMgaW50byBsZXZlbHNcbiAgdmFyIGxldmVscyA9IFsgW10gXTtcbiAgdmFyIGN1cnJlbnRMZXZlbCA9IGxldmVsc1swXTtcbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBub2RlVmFsdWVzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIHZhbCA9IG5vZGVWYWx1ZXNbIGkgXTtcblxuICAgIGlmKCBjdXJyZW50TGV2ZWwubGVuZ3RoID4gMCApe1xuICAgICAgdmFyIGRpZmYgPSBNYXRoLmFicyggY3VycmVudExldmVsWzBdLnZhbHVlIC0gdmFsLnZhbHVlICk7XG5cbiAgICAgIGlmKCBkaWZmID49IGxldmVsV2lkdGggKXtcbiAgICAgICAgY3VycmVudExldmVsID0gW107XG4gICAgICAgIGxldmVscy5wdXNoKCBjdXJyZW50TGV2ZWwgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjdXJyZW50TGV2ZWwucHVzaCggdmFsICk7XG4gIH1cblxuICAvLyBjcmVhdGUgcG9zaXRpb25zIGZyb20gbGV2ZWxzXG5cbiAgdmFyIG1pbkRpc3QgPSBtYXhOb2RlU2l6ZSArIG9wdGlvbnMubWluTm9kZVNwYWNpbmc7IC8vIG1pbiBkaXN0IGJldHdlZW4gbm9kZXNcblxuICBpZiggIW9wdGlvbnMuYXZvaWRPdmVybGFwICl7IC8vIHRoZW4gc3RyaWN0bHkgY29uc3RyYWluIHRvIGJiXG4gICAgdmFyIGZpcnN0THZsSGFzTXVsdGkgPSBsZXZlbHMubGVuZ3RoID4gMCAmJiBsZXZlbHNbMF0ubGVuZ3RoID4gMTtcbiAgICB2YXIgbWF4UiA9ICggTWF0aC5taW4oIGJiLncsIGJiLmggKSAvIDIgLSBtaW5EaXN0ICk7XG4gICAgdmFyIHJTdGVwID0gbWF4UiAvICggbGV2ZWxzLmxlbmd0aCArIGZpcnN0THZsSGFzTXVsdGkgPyAxIDogMCApO1xuXG4gICAgbWluRGlzdCA9IE1hdGgubWluKCBtaW5EaXN0LCByU3RlcCApO1xuICB9XG5cbiAgLy8gZmluZCB0aGUgbWV0cmljcyBmb3IgZWFjaCBsZXZlbFxuICB2YXIgciA9IDA7XG4gIGZvciggdmFyIGkgPSAwOyBpIDwgbGV2ZWxzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGxldmVsID0gbGV2ZWxzWyBpIF07XG4gICAgdmFyIHN3ZWVwID0gb3B0aW9ucy5zd2VlcCA9PT0gdW5kZWZpbmVkID8gMiAqIE1hdGguUEkgLSAyICogTWF0aC5QSSAvIGxldmVsLmxlbmd0aCA6IG9wdGlvbnMuc3dlZXA7XG4gICAgdmFyIGRUaGV0YSA9IGxldmVsLmRUaGV0YSA9IHN3ZWVwIC8gKCBNYXRoLm1heCggMSwgbGV2ZWwubGVuZ3RoIC0gMSApICk7XG5cbiAgICAvLyBjYWxjdWxhdGUgdGhlIHJhZGl1c1xuICAgIGlmKCBsZXZlbC5sZW5ndGggPiAxICYmIG9wdGlvbnMuYXZvaWRPdmVybGFwICl7IC8vIGJ1dCBvbmx5IGlmIG1vcmUgdGhhbiBvbmUgbm9kZSAoY2FuJ3Qgb3ZlcmxhcClcbiAgICAgIHZhciBkY29zID0gTWF0aC5jb3MoIGRUaGV0YSApIC0gTWF0aC5jb3MoIDAgKTtcbiAgICAgIHZhciBkc2luID0gTWF0aC5zaW4oIGRUaGV0YSApIC0gTWF0aC5zaW4oIDAgKTtcbiAgICAgIHZhciByTWluID0gTWF0aC5zcXJ0KCBtaW5EaXN0ICogbWluRGlzdCAvICggZGNvcyAqIGRjb3MgKyBkc2luICogZHNpbiApICk7IC8vIHMudC4gbm8gbm9kZXMgb3ZlcmxhcHBpbmdcblxuICAgICAgciA9IE1hdGgubWF4KCByTWluLCByICk7XG4gICAgfVxuXG4gICAgbGV2ZWwuciA9IHI7XG5cbiAgICByICs9IG1pbkRpc3Q7XG4gIH1cblxuICBpZiggb3B0aW9ucy5lcXVpZGlzdGFudCApe1xuICAgIHZhciByRGVsdGFNYXggPSAwO1xuICAgIHZhciByID0gMDtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbGV2ZWxzLmxlbmd0aDsgaSsrICl7XG4gICAgICB2YXIgbGV2ZWwgPSBsZXZlbHNbIGkgXTtcbiAgICAgIHZhciByRGVsdGEgPSBsZXZlbC5yIC0gcjtcblxuICAgICAgckRlbHRhTWF4ID0gTWF0aC5tYXgoIHJEZWx0YU1heCwgckRlbHRhICk7XG4gICAgfVxuXG4gICAgciA9IDA7XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBsZXZlbHMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBsZXZlbCA9IGxldmVsc1sgaSBdO1xuXG4gICAgICBpZiggaSA9PT0gMCApe1xuICAgICAgICByID0gbGV2ZWwucjtcbiAgICAgIH1cblxuICAgICAgbGV2ZWwuciA9IHI7XG5cbiAgICAgIHIgKz0gckRlbHRhTWF4O1xuICAgIH1cbiAgfVxuXG4gIC8vIGNhbGN1bGF0ZSB0aGUgbm9kZSBwb3NpdGlvbnNcbiAgdmFyIHBvcyA9IHt9OyAvLyBpZCA9PiBwb3NpdGlvblxuICBmb3IoIHZhciBpID0gMDsgaSA8IGxldmVscy5sZW5ndGg7IGkrKyApe1xuICAgIHZhciBsZXZlbCA9IGxldmVsc1sgaSBdO1xuICAgIHZhciBkVGhldGEgPSBsZXZlbC5kVGhldGE7XG4gICAgdmFyIHIgPSBsZXZlbC5yO1xuXG4gICAgZm9yKCB2YXIgaiA9IDA7IGogPCBsZXZlbC5sZW5ndGg7IGorKyApe1xuICAgICAgdmFyIHZhbCA9IGxldmVsWyBqIF07XG4gICAgICB2YXIgdGhldGEgPSBvcHRpb25zLnN0YXJ0QW5nbGUgKyAoY2xvY2t3aXNlID8gMSA6IC0xKSAqIGRUaGV0YSAqIGo7XG5cbiAgICAgIHZhciBwID0ge1xuICAgICAgICB4OiBjZW50ZXIueCArIHIgKiBNYXRoLmNvcyggdGhldGEgKSxcbiAgICAgICAgeTogY2VudGVyLnkgKyByICogTWF0aC5zaW4oIHRoZXRhIClcbiAgICAgIH07XG5cbiAgICAgIHBvc1sgdmFsLm5vZGUuaWQoKSBdID0gcDtcbiAgICB9XG4gIH1cblxuICAvLyBwb3NpdGlvbiB0aGUgbm9kZXNcbiAgbm9kZXMubGF5b3V0UG9zaXRpb25zKCB0aGlzLCBvcHRpb25zLCBmdW5jdGlvbigpe1xuICAgIHZhciBpZCA9IHRoaXMuaWQoKTtcblxuICAgIHJldHVybiBwb3NbIGlkIF07XG4gIH0gKTtcblxuICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29uY2VudHJpY0xheW91dDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLypcblRoZSBDb1NFIGxheW91dCB3YXMgd3JpdHRlbiBieSBHZXJhcmRvIEh1Y2suXG5odHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vZ2VyYXJkb2h1Y2svXG5cbkJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgYXJ0aWNsZTpcbmh0dHA6Ly9kbC5hY20ub3JnL2NpdGF0aW9uLmNmbT9pZD0xNDk4MDQ3XG5cbk1vZGlmaWNhdGlvbnMgdHJhY2tlZCBvbiBHaXRodWIuXG4qL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoICcuLi8uLi91dGlsJyApO1xudmFyIG1hdGggPSByZXF1aXJlKCAnLi4vLi4vbWF0aCcgKTtcbnZhciBUaHJlYWQgPSByZXF1aXJlKCAnLi4vLi4vdGhyZWFkJyApO1xudmFyIGlzID0gcmVxdWlyZSggJy4uLy4uL2lzJyApO1xuXG52YXIgREVCVUc7XG5cbi8qKlxuICogQGJyaWVmIDogIGRlZmF1bHQgbGF5b3V0IG9wdGlvbnNcbiAqL1xudmFyIGRlZmF1bHRzID0ge1xuICAvLyBDYWxsZWQgb24gYGxheW91dHJlYWR5YFxuICByZWFkeTogZnVuY3Rpb24oKXt9LFxuXG4gIC8vIENhbGxlZCBvbiBgbGF5b3V0c3RvcGBcbiAgc3RvcDogZnVuY3Rpb24oKXt9LFxuXG4gIC8vIFdoZXRoZXIgdG8gYW5pbWF0ZSB3aGlsZSBydW5uaW5nIHRoZSBsYXlvdXRcbiAgYW5pbWF0ZTogdHJ1ZSxcblxuICAvLyBUaGUgbGF5b3V0IGFuaW1hdGVzIG9ubHkgYWZ0ZXIgdGhpcyBtYW55IG1pbGxpc2Vjb25kc1xuICAvLyAocHJldmVudHMgZmxhc2hpbmcgb24gZmFzdCBydW5zKVxuICBhbmltYXRpb25UaHJlc2hvbGQ6IDI1MCxcblxuICAvLyBOdW1iZXIgb2YgaXRlcmF0aW9ucyBiZXR3ZWVuIGNvbnNlY3V0aXZlIHNjcmVlbiBwb3NpdGlvbnMgdXBkYXRlXG4gIC8vICgwIC0+IG9ubHkgdXBkYXRlZCBvbiB0aGUgZW5kKVxuICByZWZyZXNoOiAyMCxcblxuICAvLyBXaGV0aGVyIHRvIGZpdCB0aGUgbmV0d29yayB2aWV3IGFmdGVyIHdoZW4gZG9uZVxuICBmaXQ6IHRydWUsXG5cbiAgLy8gUGFkZGluZyBvbiBmaXRcbiAgcGFkZGluZzogMzAsXG5cbiAgLy8gQ29uc3RyYWluIGxheW91dCBib3VuZHM7IHsgeDEsIHkxLCB4MiwgeTIgfSBvciB7IHgxLCB5MSwgdywgaCB9XG4gIGJvdW5kaW5nQm94OiB1bmRlZmluZWQsXG5cbiAgLy8gUmFuZG9taXplIHRoZSBpbml0aWFsIHBvc2l0aW9ucyBvZiB0aGUgbm9kZXMgKHRydWUpIG9yIHVzZSBleGlzdGluZyBwb3NpdGlvbnMgKGZhbHNlKVxuICByYW5kb21pemU6IGZhbHNlLFxuXG4gIC8vIEV4dHJhIHNwYWNpbmcgYmV0d2VlbiBjb21wb25lbnRzIGluIG5vbi1jb21wb3VuZCBncmFwaHNcbiAgY29tcG9uZW50U3BhY2luZzogMTAwLFxuXG4gIC8vIE5vZGUgcmVwdWxzaW9uIChub24gb3ZlcmxhcHBpbmcpIG11bHRpcGxpZXJcbiAgbm9kZVJlcHVsc2lvbjogZnVuY3Rpb24oIG5vZGUgKXsgcmV0dXJuIDQwMDAwMDsgfSxcblxuICAvLyBOb2RlIHJlcHVsc2lvbiAob3ZlcmxhcHBpbmcpIG11bHRpcGxpZXJcbiAgbm9kZU92ZXJsYXA6IDEwLFxuXG4gIC8vIElkZWFsIGVkZ2UgKG5vbiBuZXN0ZWQpIGxlbmd0aFxuICBpZGVhbEVkZ2VMZW5ndGg6IGZ1bmN0aW9uKCBlZGdlICl7IHJldHVybiAxMDsgfSxcblxuICAvLyBEaXZpc29yIHRvIGNvbXB1dGUgZWRnZSBmb3JjZXNcbiAgZWRnZUVsYXN0aWNpdHk6IGZ1bmN0aW9uKCBlZGdlICl7IHJldHVybiAxMDA7IH0sXG5cbiAgLy8gTmVzdGluZyBmYWN0b3IgKG11bHRpcGxpZXIpIHRvIGNvbXB1dGUgaWRlYWwgZWRnZSBsZW5ndGggZm9yIG5lc3RlZCBlZGdlc1xuICBuZXN0aW5nRmFjdG9yOiA1LFxuXG4gIC8vIEdyYXZpdHkgZm9yY2UgKGNvbnN0YW50KVxuICBncmF2aXR5OiA4MCxcblxuICAvLyBNYXhpbXVtIG51bWJlciBvZiBpdGVyYXRpb25zIHRvIHBlcmZvcm1cbiAgbnVtSXRlcjogMTAwMCxcblxuICAvLyBJbml0aWFsIHRlbXBlcmF0dXJlIChtYXhpbXVtIG5vZGUgZGlzcGxhY2VtZW50KVxuICBpbml0aWFsVGVtcDogMjAwLFxuXG4gIC8vIENvb2xpbmcgZmFjdG9yIChob3cgdGhlIHRlbXBlcmF0dXJlIGlzIHJlZHVjZWQgYmV0d2VlbiBjb25zZWN1dGl2ZSBpdGVyYXRpb25zXG4gIGNvb2xpbmdGYWN0b3I6IDAuOTUsXG5cbiAgLy8gTG93ZXIgdGVtcGVyYXR1cmUgdGhyZXNob2xkIChiZWxvdyB0aGlzIHBvaW50IHRoZSBsYXlvdXQgd2lsbCBlbmQpXG4gIG1pblRlbXA6IDEuMCxcblxuICAvLyBXaGV0aGVyIHRvIHVzZSB0aHJlYWRpbmcgdG8gc3BlZWQgdXAgdGhlIGxheW91dFxuICB1c2VNdWx0aXRhc2tpbmc6IHRydWVcbn07XG5cblxuLyoqXG4gKiBAYnJpZWYgICAgICAgOiBjb25zdHJ1Y3RvclxuICogQGFyZyBvcHRpb25zIDogb2JqZWN0IGNvbnRhaW5pbmcgbGF5b3V0IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gQ29zZUxheW91dCggb3B0aW9ucyApe1xuICB0aGlzLm9wdGlvbnMgPSB1dGlsLmV4dGVuZCgge30sIGRlZmF1bHRzLCBvcHRpb25zICk7XG5cbiAgdGhpcy5vcHRpb25zLmxheW91dCA9IHRoaXM7XG59XG5cblxuLyoqXG4gKiBAYnJpZWYgOiBydW5zIHRoZSBsYXlvdXRcbiAqL1xuQ29zZUxheW91dC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKXtcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gIHZhciBjeSAgICAgID0gb3B0aW9ucy5jeTtcbiAgdmFyIGxheW91dCAgPSB0aGlzO1xuICB2YXIgdGhyZWFkICA9IHRoaXMudGhyZWFkO1xuXG4gIGlmKCAhdGhyZWFkIHx8IHRocmVhZC5zdG9wcGVkKCkgKXtcbiAgICB0aHJlYWQgPSB0aGlzLnRocmVhZCA9IFRocmVhZCggeyBkaXNhYmxlZDogIW9wdGlvbnMudXNlTXVsdGl0YXNraW5nIH0gKTtcbiAgfVxuXG4gIGxheW91dC5zdG9wcGVkID0gZmFsc2U7XG5cbiAgbGF5b3V0LnRyaWdnZXIoIHsgdHlwZTogJ2xheW91dHN0YXJ0JywgbGF5b3V0OiBsYXlvdXQgfSApO1xuXG4gIC8vIFNldCBERUJVRyAtIEdsb2JhbCB2YXJpYWJsZVxuICBpZiggdHJ1ZSA9PT0gb3B0aW9ucy5kZWJ1ZyApe1xuICAgIERFQlVHID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBERUJVRyA9IGZhbHNlO1xuICB9XG5cbiAgLy8gSW5pdGlhbGl6ZSBsYXlvdXQgaW5mb1xuICB2YXIgbGF5b3V0SW5mbyA9IGNyZWF0ZUxheW91dEluZm8oIGN5LCBsYXlvdXQsIG9wdGlvbnMgKTtcblxuICAvLyBTaG93IExheW91dEluZm8gY29udGVudHMgaWYgZGVidWdnaW5nXG4gIGlmKCBERUJVRyApe1xuICAgIHByaW50TGF5b3V0SW5mbyggbGF5b3V0SW5mbyApO1xuICB9XG5cbiAgLy8gSWYgcmVxdWlyZWQsIHJhbmRvbWl6ZSBub2RlIHBvc2l0aW9uc1xuICBpZiAob3B0aW9ucy5yYW5kb21pemUpIHtcbiAgICByYW5kb21pemVQb3NpdGlvbnMoIGxheW91dEluZm8sIGN5ICk7XG4gIH1cblxuICB2YXIgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgdmFyIHJlZnJlc2hSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgdmFyIHJlZnJlc2ggPSBmdW5jdGlvbiggck9wdHMgKXtcbiAgICByT3B0cyA9IHJPcHRzIHx8IHt9O1xuXG4gICAgaWYoIHJlZnJlc2hSZXF1ZXN0ZWQgJiYgIXJPcHRzLm5leHQgKXtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiggIXJPcHRzLmZvcmNlICYmIERhdGUubm93KCkgLSBzdGFydFRpbWUgPCBvcHRpb25zLmFuaW1hdGlvblRocmVzaG9sZCApe1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlZnJlc2hSZXF1ZXN0ZWQgPSB0cnVlO1xuXG4gICAgdXRpbC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIGZ1bmN0aW9uKCl7XG4gICAgICByZWZyZXNoUG9zaXRpb25zKCBsYXlvdXRJbmZvLCBjeSwgb3B0aW9ucyApO1xuXG4gICAgICAvLyBGaXQgdGhlIGdyYXBoIGlmIG5lY2Vzc2FyeVxuICAgICAgaWYoIHRydWUgPT09IG9wdGlvbnMuZml0ICl7XG4gICAgICAgIGN5LmZpdCggb3B0aW9ucy5wYWRkaW5nICk7XG4gICAgICB9XG5cbiAgICAgIHJlZnJlc2hSZXF1ZXN0ZWQgPSBmYWxzZTtcblxuICAgICAgaWYoIHJPcHRzLm5leHQgKXsgck9wdHMubmV4dCgpOyB9XG4gICAgfSk7XG4gIH07XG5cbiAgdGhyZWFkLm9uKCAnbWVzc2FnZScsIGZ1bmN0aW9uKCBlICl7XG4gICAgdmFyIGxheW91dE5vZGVzID0gZS5tZXNzYWdlO1xuXG4gICAgbGF5b3V0SW5mby5sYXlvdXROb2RlcyA9IGxheW91dE5vZGVzO1xuICAgIHJlZnJlc2goKTtcbiAgfSApO1xuXG4gIHRocmVhZC5wYXNzKCB7XG4gICAgbGF5b3V0SW5mbzogbGF5b3V0SW5mbyxcbiAgICBvcHRpb25zOiB7XG4gICAgICBhbmltYXRlOiBvcHRpb25zLmFuaW1hdGUsXG4gICAgICByZWZyZXNoOiBvcHRpb25zLnJlZnJlc2gsXG4gICAgICBjb21wb25lbnRTcGFjaW5nOiBvcHRpb25zLmNvbXBvbmVudFNwYWNpbmcsXG4gICAgICBub2RlT3ZlcmxhcDogb3B0aW9ucy5ub2RlT3ZlcmxhcCxcbiAgICAgIG5lc3RpbmdGYWN0b3I6IG9wdGlvbnMubmVzdGluZ0ZhY3RvcixcbiAgICAgIGdyYXZpdHk6IG9wdGlvbnMuZ3Jhdml0eSxcbiAgICAgIG51bUl0ZXI6IG9wdGlvbnMubnVtSXRlcixcbiAgICAgIGluaXRpYWxUZW1wOiBvcHRpb25zLmluaXRpYWxUZW1wLFxuICAgICAgY29vbGluZ0ZhY3Rvcjogb3B0aW9ucy5jb29saW5nRmFjdG9yLFxuICAgICAgbWluVGVtcDogb3B0aW9ucy5taW5UZW1wXG4gICAgfVxuICB9ICkucnVuKCBmdW5jdGlvbiggcGFzcyApe1xuICAgIHZhciBsYXlvdXRJbmZvID0gcGFzcy5sYXlvdXRJbmZvO1xuICAgIHZhciBvcHRpb25zID0gcGFzcy5vcHRpb25zO1xuICAgIHZhciBzdG9wcGVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBAYnJpZWYgICAgICAgICAgOiBQZXJmb3JtcyBvbmUgaXRlcmF0aW9uIG9mIHRoZSBwaHlzaWNhbCBzaW11bGF0aW9uXG4gICAgICogQGFyZyBsYXlvdXRJbmZvIDogTGF5b3V0SW5mbyBvYmplY3QgYWxyZWFkeSBpbml0aWFsaXplZFxuICAgICAqIEBhcmcgY3kgICAgICAgICA6IEN5dG9zY2FwZSBvYmplY3RcbiAgICAgKiBAYXJnIG9wdGlvbnMgICAgOiBMYXlvdXQgb3B0aW9uc1xuICAgICAqL1xuICAgIHZhciBzdGVwID0gZnVuY3Rpb24oIGxheW91dEluZm8sIG9wdGlvbnMsIHN0ZXAgKXtcbiAgICAgIC8vIHZhciBzID0gXCJcXG5cXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXCI7XG4gICAgICAvLyBzICs9IFwiXFxuU1RFUDogXCIgKyBzdGVwO1xuICAgICAgLy8gcyArPSBcIlxcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcXG5cIjtcbiAgICAgIC8vIGxvZ0RlYnVnKHMpO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgbm9kZSByZXB1bHNpb25zXG4gICAgICBjYWxjdWxhdGVOb2RlRm9yY2VzKCBsYXlvdXRJbmZvLCBvcHRpb25zICk7XG4gICAgICAvLyBDYWxjdWxhdGUgZWRnZSBmb3JjZXNcbiAgICAgIGNhbGN1bGF0ZUVkZ2VGb3JjZXMoIGxheW91dEluZm8sIG9wdGlvbnMgKTtcbiAgICAgIC8vIENhbGN1bGF0ZSBncmF2aXR5IGZvcmNlc1xuICAgICAgY2FsY3VsYXRlR3Jhdml0eUZvcmNlcyggbGF5b3V0SW5mbywgb3B0aW9ucyApO1xuICAgICAgLy8gUHJvcGFnYXRlIGZvcmNlcyBmcm9tIHBhcmVudCB0byBjaGlsZFxuICAgICAgcHJvcGFnYXRlRm9yY2VzKCBsYXlvdXRJbmZvLCBvcHRpb25zICk7XG4gICAgICAvLyBVcGRhdGUgcG9zaXRpb25zIGJhc2VkIG9uIGNhbGN1bGF0ZWQgZm9yY2VzXG4gICAgICB1cGRhdGVQb3NpdGlvbnMoIGxheW91dEluZm8sIG9wdGlvbnMgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQGJyaWVmIDogQ29tcHV0ZXMgdGhlIG5vZGUgcmVwdWxzaW9uIGZvcmNlc1xuICAgICAqL1xuICAgIHZhciBjYWxjdWxhdGVOb2RlRm9yY2VzID0gZnVuY3Rpb24oIGxheW91dEluZm8sIG9wdGlvbnMgKXtcbiAgICAgIC8vIEdvIHRocm91Z2ggZWFjaCBvZiB0aGUgZ3JhcGhzIGluIGdyYXBoU2V0XG4gICAgICAvLyBOb2RlcyBvbmx5IHJlcGVsIGVhY2ggb3RoZXIgaWYgdGhleSBiZWxvbmcgdG8gdGhlIHNhbWUgZ3JhcGhcbiAgICAgIC8vIHZhciBzID0gJ2NhbGN1bGF0ZU5vZGVGb3JjZXMnO1xuICAgICAgLy8gbG9nRGVidWcocyk7XG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGxheW91dEluZm8uZ3JhcGhTZXQubGVuZ3RoOyBpICsrICl7XG4gICAgICAgIHZhciBncmFwaCAgICA9IGxheW91dEluZm8uZ3JhcGhTZXRbIGkgXTtcbiAgICAgICAgdmFyIG51bU5vZGVzID0gZ3JhcGgubGVuZ3RoO1xuXG4gICAgICAgIC8vIHMgPSBcIlNldDogXCIgKyBncmFwaC50b1N0cmluZygpO1xuICAgICAgICAvLyBsb2dEZWJ1ZyhzKTtcblxuICAgICAgICAvLyBOb3cgZ2V0IGFsbCB0aGUgcGFpcnMgb2Ygbm9kZXNcbiAgICAgICAgLy8gT25seSBnZXQgZWFjaCBwYWlyIG9uY2UsIChBLCBCKSA9IChCLCBBKVxuICAgICAgICBmb3IoIHZhciBqID0gMDsgaiA8IG51bU5vZGVzOyBqKysgKXtcbiAgICAgICAgICB2YXIgbm9kZTEgPSBsYXlvdXRJbmZvLmxheW91dE5vZGVzWyBsYXlvdXRJbmZvLmlkVG9JbmRleFsgZ3JhcGhbIGogXSBdIF07XG5cbiAgICAgICAgICBmb3IoIHZhciBrID0gaiArIDE7IGsgPCBudW1Ob2RlczsgaysrICl7XG4gICAgICAgICAgICB2YXIgbm9kZTIgPSBsYXlvdXRJbmZvLmxheW91dE5vZGVzWyBsYXlvdXRJbmZvLmlkVG9JbmRleFsgZ3JhcGhbIGsgXSBdIF07XG5cbiAgICAgICAgICAgIG5vZGVSZXB1bHNpb24oIG5vZGUxLCBub2RlMiwgbGF5b3V0SW5mbywgb3B0aW9ucyApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmFuZG9tRGlzdGFuY2UgPSBmdW5jdGlvbiggbWF4ICl7XG4gICAgICByZXR1cm4gLW1heCArIDIgKiBtYXggKiBNYXRoLnJhbmRvbSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAYnJpZWYgOiBDb21wdXRlIHRoZSBub2RlIHJlcHVsc2lvbiBmb3JjZXMgYmV0d2VlbiBhIHBhaXIgb2Ygbm9kZXNcbiAgICAgKi9cbiAgICB2YXIgbm9kZVJlcHVsc2lvbiA9IGZ1bmN0aW9uKCBub2RlMSwgbm9kZTIsIGxheW91dEluZm8sIG9wdGlvbnMgKXtcbiAgICAgIC8vIHZhciBzID0gXCJOb2RlIHJlcHVsc2lvbi4gTm9kZTE6IFwiICsgbm9kZTEuaWQgKyBcIiBOb2RlMjogXCIgKyBub2RlMi5pZDtcblxuICAgICAgdmFyIGNtcHRJZDEgPSBub2RlMS5jbXB0SWQ7XG4gICAgICB2YXIgY21wdElkMiA9IG5vZGUyLmNtcHRJZDtcblxuICAgICAgaWYoIGNtcHRJZDEgIT09IGNtcHRJZDIgJiYgIWxheW91dEluZm8uaXNDb21wb3VuZCApeyByZXR1cm47IH1cblxuICAgICAgLy8gR2V0IGRpcmVjdGlvbiBvZiBsaW5lIGNvbm5lY3RpbmcgYm90aCBub2RlIGNlbnRlcnNcbiAgICAgIHZhciBkaXJlY3Rpb25YID0gbm9kZTIucG9zaXRpb25YIC0gbm9kZTEucG9zaXRpb25YO1xuICAgICAgdmFyIGRpcmVjdGlvblkgPSBub2RlMi5wb3NpdGlvblkgLSBub2RlMS5wb3NpdGlvblk7XG4gICAgICB2YXIgbWF4UmFuZERpc3QgPSAxO1xuICAgICAgLy8gcyArPSBcIlxcbmRpcmVjdGlvblg6IFwiICsgZGlyZWN0aW9uWCArIFwiLCBkaXJlY3Rpb25ZOiBcIiArIGRpcmVjdGlvblk7XG5cbiAgICAgIC8vIElmIGJvdGggY2VudGVycyBhcmUgdGhlIHNhbWUsIGFwcGx5IGEgcmFuZG9tIGZvcmNlXG4gICAgICBpZiggMCA9PT0gZGlyZWN0aW9uWCAmJiAwID09PSBkaXJlY3Rpb25ZICl7XG4gICAgICAgIGRpcmVjdGlvblggPSByYW5kb21EaXN0YW5jZSggbWF4UmFuZERpc3QgKTtcbiAgICAgICAgZGlyZWN0aW9uWSA9IHJhbmRvbURpc3RhbmNlKCBtYXhSYW5kRGlzdCApO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3ZlcmxhcCA9IG5vZGVzT3ZlcmxhcCggbm9kZTEsIG5vZGUyLCBkaXJlY3Rpb25YLCBkaXJlY3Rpb25ZICk7XG5cbiAgICAgIGlmKCBvdmVybGFwID4gMCApe1xuICAgICAgICAvLyBzICs9IFwiXFxuTm9kZXMgRE8gb3ZlcmxhcC5cIjtcbiAgICAgICAgLy8gcyArPSBcIlxcbk92ZXJsYXA6IFwiICsgb3ZlcmxhcDtcbiAgICAgICAgLy8gSWYgbm9kZXMgb3ZlcmxhcCwgcmVwdWxzaW9uIGZvcmNlIGlzIHByb3BvcnRpb25hbFxuICAgICAgICAvLyB0byB0aGUgb3ZlcmxhcFxuICAgICAgICB2YXIgZm9yY2UgICAgPSBvcHRpb25zLm5vZGVPdmVybGFwICogb3ZlcmxhcDtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBtb2R1bGUgYW5kIGNvbXBvbmVudHMgb2YgdGhlIGZvcmNlIHZlY3RvclxuICAgICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoIGRpcmVjdGlvblggKiBkaXJlY3Rpb25YICsgZGlyZWN0aW9uWSAqIGRpcmVjdGlvblkgKTtcbiAgICAgICAgLy8gcyArPSBcIlxcbkRpc3RhbmNlOiBcIiArIGRpc3RhbmNlO1xuICAgICAgICB2YXIgZm9yY2VYICAgPSBmb3JjZSAqIGRpcmVjdGlvblggLyBkaXN0YW5jZTtcbiAgICAgICAgdmFyIGZvcmNlWSAgID0gZm9yY2UgKiBkaXJlY3Rpb25ZIC8gZGlzdGFuY2U7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHMgKz0gXCJcXG5Ob2RlcyBkbyBOT1Qgb3ZlcmxhcC5cIjtcbiAgICAgICAgLy8gSWYgdGhlcmUncyBubyBvdmVybGFwLCBmb3JjZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsXG4gICAgICAgIC8vIHRvIHNxdWFyZWQgZGlzdGFuY2VcblxuICAgICAgICAvLyBHZXQgY2xpcHBpbmcgcG9pbnRzIGZvciBib3RoIG5vZGVzXG4gICAgICAgIHZhciBwb2ludDEgPSBmaW5kQ2xpcHBpbmdQb2ludCggbm9kZTEsIGRpcmVjdGlvblgsIGRpcmVjdGlvblkgKTtcbiAgICAgICAgdmFyIHBvaW50MiA9IGZpbmRDbGlwcGluZ1BvaW50KCBub2RlMiwgLTEgKiBkaXJlY3Rpb25YLCAtMSAqIGRpcmVjdGlvblkgKTtcblxuICAgICAgICAvLyBVc2UgY2xpcHBpbmcgcG9pbnRzIHRvIGNvbXB1dGUgZGlzdGFuY2VcbiAgICAgICAgdmFyIGRpc3RhbmNlWCAgID0gcG9pbnQyLnggLSBwb2ludDEueDtcbiAgICAgICAgdmFyIGRpc3RhbmNlWSAgID0gcG9pbnQyLnkgLSBwb2ludDEueTtcbiAgICAgICAgdmFyIGRpc3RhbmNlU3FyID0gZGlzdGFuY2VYICogZGlzdGFuY2VYICsgZGlzdGFuY2VZICogZGlzdGFuY2VZO1xuICAgICAgICB2YXIgZGlzdGFuY2UgICAgPSBNYXRoLnNxcnQoIGRpc3RhbmNlU3FyICk7XG4gICAgICAgIC8vIHMgKz0gXCJcXG5EaXN0YW5jZTogXCIgKyBkaXN0YW5jZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBtb2R1bGUgYW5kIGNvbXBvbmVudHMgb2YgdGhlIGZvcmNlIHZlY3RvclxuICAgICAgICB2YXIgZm9yY2UgID0gKCBub2RlMS5ub2RlUmVwdWxzaW9uICsgbm9kZTIubm9kZVJlcHVsc2lvbiApIC8gZGlzdGFuY2VTcXI7XG4gICAgICAgIHZhciBmb3JjZVggPSBmb3JjZSAqIGRpc3RhbmNlWCAvIGRpc3RhbmNlO1xuICAgICAgICB2YXIgZm9yY2VZID0gZm9yY2UgKiBkaXN0YW5jZVkgLyBkaXN0YW5jZTtcbiAgICAgIH1cblxuICAgICAgLy8gQXBwbHkgZm9yY2VcbiAgICAgIGlmKCAhbm9kZTEuaXNMb2NrZWQgKXtcbiAgICAgICAgbm9kZTEub2Zmc2V0WCAtPSBmb3JjZVg7XG4gICAgICAgIG5vZGUxLm9mZnNldFkgLT0gZm9yY2VZO1xuICAgICAgfVxuXG4gICAgICBpZiggIW5vZGUyLmlzTG9ja2VkICl7XG4gICAgICAgIG5vZGUyLm9mZnNldFggKz0gZm9yY2VYO1xuICAgICAgICBub2RlMi5vZmZzZXRZICs9IGZvcmNlWTtcbiAgICAgIH1cblxuICAgICAgLy8gcyArPSBcIlxcbkZvcmNlWDogXCIgKyBmb3JjZVggKyBcIiBGb3JjZVk6IFwiICsgZm9yY2VZO1xuICAgICAgLy8gbG9nRGVidWcocyk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQGJyaWVmICA6IERldGVybWluZXMgd2hldGhlciB0d28gbm9kZXMgb3ZlcmxhcCBvciBub3RcbiAgICAgKiBAcmV0dXJuIDogQW1vdW50IG9mIG92ZXJsYXBwaW5nICgwID0+IG5vIG92ZXJsYXApXG4gICAgICovXG4gICAgdmFyIG5vZGVzT3ZlcmxhcCA9IGZ1bmN0aW9uKCBub2RlMSwgbm9kZTIsIGRYLCBkWSApe1xuXG4gICAgICBpZiggZFggPiAwICl7XG4gICAgICAgIHZhciBvdmVybGFwWCA9IG5vZGUxLm1heFggLSBub2RlMi5taW5YO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG92ZXJsYXBYID0gbm9kZTIubWF4WCAtIG5vZGUxLm1pblg7XG4gICAgICB9XG5cbiAgICAgIGlmKCBkWSA+IDAgKXtcbiAgICAgICAgdmFyIG92ZXJsYXBZID0gbm9kZTEubWF4WSAtIG5vZGUyLm1pblk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb3ZlcmxhcFkgPSBub2RlMi5tYXhZIC0gbm9kZTEubWluWTtcbiAgICAgIH1cblxuICAgICAgaWYoIG92ZXJsYXBYID49IDAgJiYgb3ZlcmxhcFkgPj0gMCApe1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KCBvdmVybGFwWCAqIG92ZXJsYXBYICsgb3ZlcmxhcFkgKiBvdmVybGFwWSApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBicmllZiA6IEZpbmRzIHRoZSBwb2ludCBpbiB3aGljaCBhbiBlZGdlIChkaXJlY3Rpb24gZFgsIGRZKSBpbnRlcnNlY3RzXG4gICAgICogICAgICAgICAgdGhlIHJlY3Rhbmd1bGFyIGJvdW5kaW5nIGJveCBvZiBpdCdzIHNvdXJjZS90YXJnZXQgbm9kZVxuICAgICAqL1xuICAgIHZhciBmaW5kQ2xpcHBpbmdQb2ludCA9IGZ1bmN0aW9uKCBub2RlLCBkWCwgZFkgKXtcblxuICAgICAgLy8gU2hvcmN1dHNcbiAgICAgIHZhciBYID0gbm9kZS5wb3NpdGlvblg7XG4gICAgICB2YXIgWSA9IG5vZGUucG9zaXRpb25ZO1xuICAgICAgdmFyIEggPSBub2RlLmhlaWdodCB8fCAxO1xuICAgICAgdmFyIFcgPSBub2RlLndpZHRoIHx8IDE7XG4gICAgICB2YXIgZGlyU2xvcGUgICAgID0gZFkgLyBkWDtcbiAgICAgIHZhciBub2RlU2xvcGUgICAgPSBIIC8gVztcblxuICAgICAgLy8gdmFyIHMgPSAnQ29tcHV0aW5nIGNsaXBwaW5nIHBvaW50IG9mIG5vZGUgJyArIG5vZGUuaWQgK1xuICAgICAgLy8gICBcIiAuIEhlaWdodDogIFwiICsgSCArIFwiLCBXaWR0aDogXCIgKyBXICtcbiAgICAgIC8vICAgXCJcXG5EaXJlY3Rpb24gXCIgKyBkWCArIFwiLCBcIiArIGRZO1xuICAgICAgLy9cbiAgICAgIC8vIENvbXB1dGUgaW50ZXJzZWN0aW9uXG4gICAgICB2YXIgcmVzID0ge307XG4gICAgICBkbyB7XG4gICAgICAgIC8vIENhc2U6IFZlcnRpY2FsIGRpcmVjdGlvbiAodXApXG4gICAgICAgIGlmKCAwID09PSBkWCAmJiAwIDwgZFkgKXtcbiAgICAgICAgICByZXMueCA9IFg7XG4gICAgICAgICAgLy8gcyArPSBcIlxcblVwIGRpcmVjdGlvblwiO1xuICAgICAgICAgIHJlcy55ID0gWSArIEggLyAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FzZTogVmVydGljYWwgZGlyZWN0aW9uIChkb3duKVxuICAgICAgICBpZiggMCA9PT0gZFggJiYgMCA+IGRZICl7XG4gICAgICAgICAgcmVzLnggPSBYO1xuICAgICAgICAgIHJlcy55ID0gWSArIEggLyAyO1xuICAgICAgICAgIC8vIHMgKz0gXCJcXG5Eb3duIGRpcmVjdGlvblwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FzZTogSW50ZXJzZWN0cyB0aGUgcmlnaHQgYm9yZGVyXG4gICAgICAgIGlmKCAwIDwgZFggJiZcbiAgICAgICAgLTEgKiBub2RlU2xvcGUgPD0gZGlyU2xvcGUgJiZcbiAgICAgICAgZGlyU2xvcGUgPD0gbm9kZVNsb3BlICl7XG4gICAgICAgICAgcmVzLnggPSBYICsgVyAvIDI7XG4gICAgICAgICAgcmVzLnkgPSBZICsgKFcgKiBkWSAvIDIgLyBkWCk7XG4gICAgICAgICAgLy8gcyArPSBcIlxcblJpZ2h0Ym9yZGVyXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXNlOiBJbnRlcnNlY3RzIHRoZSBsZWZ0IGJvcmRlclxuICAgICAgICBpZiggMCA+IGRYICYmXG4gICAgICAgIC0xICogbm9kZVNsb3BlIDw9IGRpclNsb3BlICYmXG4gICAgICAgIGRpclNsb3BlIDw9IG5vZGVTbG9wZSApe1xuICAgICAgICAgIHJlcy54ID0gWCAtIFcgLyAyO1xuICAgICAgICAgIHJlcy55ID0gWSAtIChXICogZFkgLyAyIC8gZFgpO1xuICAgICAgICAgIC8vIHMgKz0gXCJcXG5MZWZ0Ym9yZGVyXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXNlOiBJbnRlcnNlY3RzIHRoZSB0b3AgYm9yZGVyXG4gICAgICAgIGlmKCAwIDwgZFkgJiZcbiAgICAgICAgKCBkaXJTbG9wZSA8PSAtMSAqIG5vZGVTbG9wZSB8fFxuICAgICAgICAgIGRpclNsb3BlID49IG5vZGVTbG9wZSApICl7XG4gICAgICAgICAgcmVzLnggPSBYICsgKEggKiBkWCAvIDIgLyBkWSk7XG4gICAgICAgICAgcmVzLnkgPSBZICsgSCAvIDI7XG4gICAgICAgICAgLy8gcyArPSBcIlxcblRvcCBib3JkZXJcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhc2U6IEludGVyc2VjdHMgdGhlIGJvdHRvbSBib3JkZXJcbiAgICAgICAgaWYoIDAgPiBkWSAmJlxuICAgICAgICAoIGRpclNsb3BlIDw9IC0xICogbm9kZVNsb3BlIHx8XG4gICAgICAgICAgZGlyU2xvcGUgPj0gbm9kZVNsb3BlICkgKXtcbiAgICAgICAgICByZXMueCA9IFggLSAoSCAqIGRYIC8gMiAvIGRZKTtcbiAgICAgICAgICByZXMueSA9IFkgLSBIIC8gMjtcbiAgICAgICAgICAvLyBzICs9IFwiXFxuQm90dG9tIGJvcmRlclwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIH0gd2hpbGUoIGZhbHNlKTtcblxuICAgICAgLy8gcyArPSBcIlxcbkNsaXBwaW5nIHBvaW50IGZvdW5kIGF0IFwiICsgcmVzLnggKyBcIiwgXCIgKyByZXMueTtcbiAgICAgIC8vIGxvZ0RlYnVnKHMpO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQGJyaWVmIDogQ2FsY3VsYXRlcyBhbGwgZWRnZSBmb3JjZXNcbiAgICAgKi9cbiAgICB2YXIgY2FsY3VsYXRlRWRnZUZvcmNlcyA9IGZ1bmN0aW9uKCBsYXlvdXRJbmZvLCBvcHRpb25zICl7XG4gICAgICAvLyBJdGVyYXRlIG92ZXIgYWxsIGVkZ2VzXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGxheW91dEluZm8uZWRnZVNpemU7IGkrKyApe1xuICAgICAgICAvLyBHZXQgZWRnZSwgc291cmNlICYgdGFyZ2V0IG5vZGVzXG4gICAgICAgIHZhciBlZGdlICAgICA9IGxheW91dEluZm8ubGF5b3V0RWRnZXNbIGkgXTtcbiAgICAgICAgdmFyIHNvdXJjZUl4ID0gbGF5b3V0SW5mby5pZFRvSW5kZXhbIGVkZ2Uuc291cmNlSWQgXTtcbiAgICAgICAgdmFyIHNvdXJjZSAgID0gbGF5b3V0SW5mby5sYXlvdXROb2Rlc1sgc291cmNlSXggXTtcbiAgICAgICAgdmFyIHRhcmdldEl4ID0gbGF5b3V0SW5mby5pZFRvSW5kZXhbIGVkZ2UudGFyZ2V0SWQgXTtcbiAgICAgICAgdmFyIHRhcmdldCAgID0gbGF5b3V0SW5mby5sYXlvdXROb2Rlc1sgdGFyZ2V0SXggXTtcblxuICAgICAgICAvLyBHZXQgZGlyZWN0aW9uIG9mIGxpbmUgY29ubmVjdGluZyBib3RoIG5vZGUgY2VudGVyc1xuICAgICAgICB2YXIgZGlyZWN0aW9uWCA9IHRhcmdldC5wb3NpdGlvblggLSBzb3VyY2UucG9zaXRpb25YO1xuICAgICAgICB2YXIgZGlyZWN0aW9uWSA9IHRhcmdldC5wb3NpdGlvblkgLSBzb3VyY2UucG9zaXRpb25ZO1xuXG4gICAgICAgIC8vIElmIGJvdGggY2VudGVycyBhcmUgdGhlIHNhbWUsIGRvIG5vdGhpbmcuXG4gICAgICAgIC8vIEEgcmFuZG9tIGZvcmNlIGhhcyBhbHJlYWR5IGJlZW4gYXBwbGllZCBhcyBub2RlIHJlcHVsc2lvblxuICAgICAgICBpZiggMCA9PT0gZGlyZWN0aW9uWCAmJiAwID09PSBkaXJlY3Rpb25ZICl7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGNsaXBwaW5nIHBvaW50cyBmb3IgYm90aCBub2Rlc1xuICAgICAgICB2YXIgcG9pbnQxID0gZmluZENsaXBwaW5nUG9pbnQoIHNvdXJjZSwgZGlyZWN0aW9uWCwgZGlyZWN0aW9uWSApO1xuICAgICAgICB2YXIgcG9pbnQyID0gZmluZENsaXBwaW5nUG9pbnQoIHRhcmdldCwgLTEgKiBkaXJlY3Rpb25YLCAtMSAqIGRpcmVjdGlvblkgKTtcblxuXG4gICAgICAgIHZhciBseCA9IHBvaW50Mi54IC0gcG9pbnQxLng7XG4gICAgICAgIHZhciBseSA9IHBvaW50Mi55IC0gcG9pbnQxLnk7XG4gICAgICAgIHZhciBsICA9IE1hdGguc3FydCggbHggKiBseCArIGx5ICogbHkgKTtcblxuICAgICAgICB2YXIgZm9yY2UgID0gTWF0aC5wb3coIGVkZ2UuaWRlYWxMZW5ndGggLSBsLCAyICkgLyBlZGdlLmVsYXN0aWNpdHk7XG5cbiAgICAgICAgaWYoIDAgIT09IGwgKXtcbiAgICAgICAgICB2YXIgZm9yY2VYID0gZm9yY2UgKiBseCAvIGw7XG4gICAgICAgICAgdmFyIGZvcmNlWSA9IGZvcmNlICogbHkgLyBsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBmb3JjZVggPSAwO1xuICAgICAgICAgIHZhciBmb3JjZVkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIHRoaXMgZm9yY2UgdG8gdGFyZ2V0IGFuZCBzb3VyY2Ugbm9kZXNcbiAgICAgICAgaWYoICFzb3VyY2UuaXNMb2NrZWQgKXtcbiAgICAgICAgICBzb3VyY2Uub2Zmc2V0WCArPSBmb3JjZVg7XG4gICAgICAgICAgc291cmNlLm9mZnNldFkgKz0gZm9yY2VZO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoICF0YXJnZXQuaXNMb2NrZWQgKXtcbiAgICAgICAgICB0YXJnZXQub2Zmc2V0WCAtPSBmb3JjZVg7XG4gICAgICAgICAgdGFyZ2V0Lm9mZnNldFkgLT0gZm9yY2VZO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFyIHMgPSAnRWRnZSBmb3JjZSBiZXR3ZWVuIG5vZGVzICcgKyBzb3VyY2UuaWQgKyAnIGFuZCAnICsgdGFyZ2V0LmlkO1xuICAgICAgICAvLyBzICs9IFwiXFxuRGlzdGFuY2U6IFwiICsgbCArIFwiIEZvcmNlOiAoXCIgKyBmb3JjZVggKyBcIiwgXCIgKyBmb3JjZVkgKyBcIilcIjtcbiAgICAgICAgLy8gbG9nRGVidWcocyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBicmllZiA6IENvbXB1dGVzIGdyYXZpdHkgZm9yY2VzIGZvciBhbGwgbm9kZXNcbiAgICAgKi9cbiAgICB2YXIgY2FsY3VsYXRlR3Jhdml0eUZvcmNlcyA9IGZ1bmN0aW9uKCBsYXlvdXRJbmZvLCBvcHRpb25zICl7XG4gICAgICB2YXIgZGlzdFRocmVzaG9sZCA9IDE7XG5cbiAgICAgIC8vIHZhciBzID0gJ2NhbGN1bGF0ZUdyYXZpdHlGb3JjZXMnO1xuICAgICAgLy8gbG9nRGVidWcocyk7XG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGxheW91dEluZm8uZ3JhcGhTZXQubGVuZ3RoOyBpICsrICl7XG4gICAgICAgIHZhciBncmFwaCAgICA9IGxheW91dEluZm8uZ3JhcGhTZXRbIGkgXTtcbiAgICAgICAgdmFyIG51bU5vZGVzID0gZ3JhcGgubGVuZ3RoO1xuXG4gICAgICAgIC8vIHMgPSBcIlNldDogXCIgKyBncmFwaC50b1N0cmluZygpO1xuICAgICAgICAvLyBsb2dEZWJ1ZyhzKTtcblxuICAgICAgICAvLyBDb21wdXRlIGdyYXBoIGNlbnRlclxuICAgICAgICBpZiggMCA9PT0gaSApe1xuICAgICAgICAgIHZhciBjZW50ZXJYICAgPSBsYXlvdXRJbmZvLmNsaWVudEhlaWdodCAvIDI7XG4gICAgICAgICAgdmFyIGNlbnRlclkgICA9IGxheW91dEluZm8uY2xpZW50V2lkdGggIC8gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBHZXQgUGFyZW50IG5vZGUgZm9yIHRoaXMgZ3JhcGgsIGFuZCB1c2UgaXRzIHBvc2l0aW9uIGFzIGNlbnRlclxuICAgICAgICAgIHZhciB0ZW1wICAgID0gbGF5b3V0SW5mby5sYXlvdXROb2Rlc1sgbGF5b3V0SW5mby5pZFRvSW5kZXhbIGdyYXBoWzBdIF0gXTtcbiAgICAgICAgICB2YXIgcGFyZW50ICA9IGxheW91dEluZm8ubGF5b3V0Tm9kZXNbIGxheW91dEluZm8uaWRUb0luZGV4WyB0ZW1wLnBhcmVudElkIF0gXTtcbiAgICAgICAgICB2YXIgY2VudGVyWCA9IHBhcmVudC5wb3NpdGlvblg7XG4gICAgICAgICAgdmFyIGNlbnRlclkgPSBwYXJlbnQucG9zaXRpb25ZO1xuICAgICAgICB9XG4gICAgICAgIC8vIHMgPSBcIkNlbnRlciBmb3VuZCBhdDogXCIgKyBjZW50ZXJYICsgXCIsIFwiICsgY2VudGVyWTtcbiAgICAgICAgLy8gbG9nRGVidWcocyk7XG5cbiAgICAgICAgLy8gQXBwbHkgZm9yY2UgdG8gYWxsIG5vZGVzIGluIGdyYXBoXG4gICAgICAgIGZvciggdmFyIGogPSAwOyBqIDwgbnVtTm9kZXM7IGorKyApe1xuICAgICAgICAgIHZhciBub2RlID0gbGF5b3V0SW5mby5sYXlvdXROb2Rlc1sgbGF5b3V0SW5mby5pZFRvSW5kZXhbIGdyYXBoWyBqIF0gXSBdO1xuICAgICAgICAgIC8vIHMgPSBcIk5vZGU6IFwiICsgbm9kZS5pZDtcblxuICAgICAgICAgIGlmKCBub2RlLmlzTG9ja2VkICl7IGNvbnRpbnVlOyB9XG5cbiAgICAgICAgICB2YXIgZHggPSBjZW50ZXJYIC0gbm9kZS5wb3NpdGlvblg7XG4gICAgICAgICAgdmFyIGR5ID0gY2VudGVyWSAtIG5vZGUucG9zaXRpb25ZO1xuICAgICAgICAgIHZhciBkICA9IE1hdGguc3FydCggZHggKiBkeCArIGR5ICogZHkgKTtcbiAgICAgICAgICBpZiggZCA+IGRpc3RUaHJlc2hvbGQgKXtcbiAgICAgICAgICAgIHZhciBmeCA9IG9wdGlvbnMuZ3Jhdml0eSAqIGR4IC8gZDtcbiAgICAgICAgICAgIHZhciBmeSA9IG9wdGlvbnMuZ3Jhdml0eSAqIGR5IC8gZDtcbiAgICAgICAgICAgIG5vZGUub2Zmc2V0WCArPSBmeDtcbiAgICAgICAgICAgIG5vZGUub2Zmc2V0WSArPSBmeTtcbiAgICAgICAgICAgIC8vIHMgKz0gXCI6IEFwcGxpZWQgZm9yY2U6IFwiICsgZnggKyBcIiwgXCIgKyBmeTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcyArPSBcIjogc2t5cHBlZCBzaW5jZSBpdCdzIHRvbyBjbG9zZSB0byBjZW50ZXJcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gbG9nRGVidWcocyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQGJyaWVmICAgICAgICAgIDogVGhpcyBmdW5jdGlvbiBwcm9wYWdhdGVzIHRoZSBleGlzdGluZyBvZmZzZXRzIGZyb21cbiAgICAgKiAgICAgICAgICAgICAgICAgICBwYXJlbnQgbm9kZXMgdG8gaXRzIGRlc2NlbmRlbnRzLlxuICAgICAqIEBhcmcgbGF5b3V0SW5mbyA6IGxheW91dEluZm8gT2JqZWN0XG4gICAgICogQGFyZyBjeSAgICAgICAgIDogY3l0b3NjYXBlIE9iamVjdFxuICAgICAqIEBhcmcgb3B0aW9ucyAgICA6IExheW91dCBvcHRpb25zXG4gICAgICovXG4gICAgdmFyIHByb3BhZ2F0ZUZvcmNlcyA9IGZ1bmN0aW9uKCBsYXlvdXRJbmZvLCBvcHRpb25zICl7XG4gICAgICAvLyBJbmxpbmUgaW1wbGVtZW50YXRpb24gb2YgYSBxdWV1ZSwgdXNlZCBmb3IgdHJhdmVyc2luZyB0aGUgZ3JhcGggaW4gQkZTIG9yZGVyXG4gICAgICB2YXIgcXVldWUgPSBbXTtcbiAgICAgIHZhciBzdGFydCA9IDA7ICAgLy8gUG9pbnRzIHRvIHRoZSBzdGFydCB0aGUgcXVldWVcbiAgICAgIHZhciBlbmQgICA9IC0xOyAgLy8gUG9pbnRzIHRvIHRoZSBlbmQgb2YgdGhlIHF1ZXVlXG5cbiAgICAgIC8vIGxvZ0RlYnVnKCdwcm9wYWdhdGVGb3JjZXMnKTtcblxuICAgICAgLy8gU3RhcnQgYnkgdmlzaXRpbmcgdGhlIG5vZGVzIGluIHRoZSByb290IGdyYXBoXG4gICAgICBxdWV1ZS5wdXNoLmFwcGx5KCBxdWV1ZSwgbGF5b3V0SW5mby5ncmFwaFNldFswXSApO1xuICAgICAgZW5kICs9IGxheW91dEluZm8uZ3JhcGhTZXRbMF0ubGVuZ3RoO1xuXG4gICAgICAvLyBUcmF2ZXJzZSB0aGUgZ3JhcGgsIGxldmVsIGJ5IGxldmVsLFxuICAgICAgd2hpbGUoIHN0YXJ0IDw9IGVuZCApe1xuICAgICAgICAvLyBHZXQgdGhlIG5vZGUgdG8gdmlzaXQgYW5kIHJlbW92ZSBpdCBmcm9tIHF1ZXVlXG4gICAgICAgIHZhciBub2RlSWQgICAgPSBxdWV1ZVsgc3RhcnQrKyBdO1xuICAgICAgICB2YXIgbm9kZUluZGV4ID0gbGF5b3V0SW5mby5pZFRvSW5kZXhbIG5vZGVJZCBdO1xuICAgICAgICB2YXIgbm9kZSAgICAgID0gbGF5b3V0SW5mby5sYXlvdXROb2Rlc1sgbm9kZUluZGV4IF07XG4gICAgICAgIHZhciBjaGlsZHJlbiAgPSBub2RlLmNoaWxkcmVuO1xuXG4gICAgICAgIC8vIFdlIG9ubHkgbmVlZCB0byBwcm9jZXNzIHRoZSBub2RlIGlmIGl0J3MgY29tcG91bmRcbiAgICAgICAgaWYoIDAgPCBjaGlsZHJlbi5sZW5ndGggJiYgIW5vZGUuaXNMb2NrZWQgKXtcbiAgICAgICAgICB2YXIgb2ZmWCA9IG5vZGUub2Zmc2V0WDtcbiAgICAgICAgICB2YXIgb2ZmWSA9IG5vZGUub2Zmc2V0WTtcblxuICAgICAgICAgIC8vIHZhciBzID0gXCJQcm9wYWdhdGluZyBvZmZzZXQgZnJvbSBwYXJlbnQgbm9kZSA6IFwiICsgbm9kZS5pZCArXG4gICAgICAgICAgLy8gICBcIi4gT2Zmc2V0WDogXCIgKyBvZmZYICsgXCIuIE9mZnNldFk6IFwiICsgb2ZmWTtcbiAgICAgICAgICAvLyBzICs9IFwiXFxuIENoaWxkcmVuOiBcIiArIGNoaWxkcmVuLnRvU3RyaW5nKCk7XG4gICAgICAgICAgLy8gbG9nRGVidWcocyk7XG5cbiAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrICl7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gbGF5b3V0SW5mby5sYXlvdXROb2Rlc1sgbGF5b3V0SW5mby5pZFRvSW5kZXhbIGNoaWxkcmVuWyBpIF0gXSBdO1xuICAgICAgICAgICAgLy8gUHJvcGFnYXRlIG9mZnNldFxuICAgICAgICAgICAgY2hpbGROb2RlLm9mZnNldFggKz0gb2ZmWDtcbiAgICAgICAgICAgIGNoaWxkTm9kZS5vZmZzZXRZICs9IG9mZlk7XG4gICAgICAgICAgICAvLyBBZGQgY2hpbGRyZW4gdG8gcXVldWUgdG8gYmUgdmlzaXRlZFxuICAgICAgICAgICAgcXVldWVbICsrZW5kIF0gPSBjaGlsZHJlblsgaSBdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFJlc2V0IHBhcmVudCBvZmZzZXRzXG4gICAgICAgICAgbm9kZS5vZmZzZXRYID0gMDtcbiAgICAgICAgICBub2RlLm9mZnNldFkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQGJyaWVmIDogVXBkYXRlcyB0aGUgbGF5b3V0IG1vZGVsIHBvc2l0aW9ucywgYmFzZWQgb25cbiAgICAgKiAgICAgICAgICB0aGUgYWNjdW11bGF0ZWQgZm9yY2VzXG4gICAgICovXG4gICAgdmFyIHVwZGF0ZVBvc2l0aW9ucyA9IGZ1bmN0aW9uKCBsYXlvdXRJbmZvLCBvcHRpb25zICl7XG4gICAgICAvLyB2YXIgcyA9ICdVcGRhdGluZyBwb3NpdGlvbnMnO1xuICAgICAgLy8gbG9nRGVidWcocyk7XG5cbiAgICAgIC8vIFJlc2V0IGJvdW5kYXJpZXMgZm9yIGNvbXBvdW5kIG5vZGVzXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGxheW91dEluZm8ubm9kZVNpemU7IGkrKyApe1xuICAgICAgICB2YXIgbiA9IGxheW91dEluZm8ubGF5b3V0Tm9kZXNbIGkgXTtcbiAgICAgICAgaWYoIDAgPCBuLmNoaWxkcmVuLmxlbmd0aCApe1xuICAgICAgICAgIC8vIGxvZ0RlYnVnKFwiUmVzZXR0aW5nIGJvdW5kYXJpZXMgb2YgY29tcG91bmQgbm9kZTogXCIgKyBuLmlkKTtcbiAgICAgICAgICBuLm1heFggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbi5taW5YID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG4ubWF4WSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuLm1pblkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBsYXlvdXRJbmZvLm5vZGVTaXplOyBpKysgKXtcbiAgICAgICAgdmFyIG4gPSBsYXlvdXRJbmZvLmxheW91dE5vZGVzWyBpIF07XG4gICAgICAgIGlmKCAwIDwgbi5jaGlsZHJlbi5sZW5ndGggfHwgbi5pc0xvY2tlZCApe1xuICAgICAgICAgIC8vIE5vIG5lZWQgdG8gc2V0IGNvbXBvdW5kIG9yIGxvY2tlZCBub2RlIHBvc2l0aW9uXG4gICAgICAgICAgLy8gbG9nRGVidWcoXCJTa2lwcGluZyBwb3NpdGlvbiB1cGRhdGUgb2Ygbm9kZTogXCIgKyBuLmlkKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzID0gXCJOb2RlOiBcIiArIG4uaWQgKyBcIiBQcmV2aW91cyBwb3NpdGlvbjogKFwiICtcbiAgICAgICAgLy8gbi5wb3NpdGlvblggKyBcIiwgXCIgKyBuLnBvc2l0aW9uWSArIFwiKS5cIjtcblxuICAgICAgICAvLyBMaW1pdCBkaXNwbGFjZW1lbnQgaW4gb3JkZXIgdG8gaW1wcm92ZSBzdGFiaWxpdHlcbiAgICAgICAgdmFyIHRlbXBGb3JjZSA9IGxpbWl0Rm9yY2UoIG4ub2Zmc2V0WCwgbi5vZmZzZXRZLCBsYXlvdXRJbmZvLnRlbXBlcmF0dXJlICk7XG4gICAgICAgIG4ucG9zaXRpb25YICs9IHRlbXBGb3JjZS54O1xuICAgICAgICBuLnBvc2l0aW9uWSArPSB0ZW1wRm9yY2UueTtcbiAgICAgICAgbi5vZmZzZXRYID0gMDtcbiAgICAgICAgbi5vZmZzZXRZID0gMDtcbiAgICAgICAgbi5taW5YICAgID0gbi5wb3NpdGlvblggLSBuLndpZHRoO1xuICAgICAgICBuLm1heFggICAgPSBuLnBvc2l0aW9uWCArIG4ud2lkdGg7XG4gICAgICAgIG4ubWluWSAgICA9IG4ucG9zaXRpb25ZIC0gbi5oZWlnaHQ7XG4gICAgICAgIG4ubWF4WSAgICA9IG4ucG9zaXRpb25ZICsgbi5oZWlnaHQ7XG4gICAgICAgIC8vIHMgKz0gXCIgTmV3IFBvc2l0aW9uOiAoXCIgKyBuLnBvc2l0aW9uWCArIFwiLCBcIiArIG4ucG9zaXRpb25ZICsgXCIpLlwiO1xuICAgICAgICAvLyBsb2dEZWJ1ZyhzKTtcblxuICAgICAgICAvLyBVcGRhdGUgYW5jZXN0cnkgYm91ZGFyaWVzXG4gICAgICAgIHVwZGF0ZUFuY2VzdHJ5Qm91bmRhcmllcyggbiwgbGF5b3V0SW5mbyApO1xuICAgICAgfVxuXG4gICAgICAvLyBVcGRhdGUgc2l6ZSwgcG9zaXRpb24gb2YgY29tcHVuZCBub2Rlc1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBsYXlvdXRJbmZvLm5vZGVTaXplOyBpKysgKXtcbiAgICAgICAgdmFyIG4gPSBsYXlvdXRJbmZvLmxheW91dE5vZGVzWyBpIF07XG4gICAgICAgIGlmKCAwIDwgbi5jaGlsZHJlbi5sZW5ndGggJiYgIW4uaXNMb2NrZWQgKXtcbiAgICAgICAgICBuLnBvc2l0aW9uWCA9IChuLm1heFggKyBuLm1pblgpIC8gMjtcbiAgICAgICAgICBuLnBvc2l0aW9uWSA9IChuLm1heFkgKyBuLm1pblkpIC8gMjtcbiAgICAgICAgICBuLndpZHRoICAgICA9IG4ubWF4WCAtIG4ubWluWDtcbiAgICAgICAgICBuLmhlaWdodCAgICA9IG4ubWF4WSAtIG4ubWluWTtcbiAgICAgICAgICAvLyBzID0gXCJVcGRhdGluZyBwb3NpdGlvbiwgc2l6ZSBvZiBjb21wb3VuZCBub2RlIFwiICsgbi5pZDtcbiAgICAgICAgICAvLyBzICs9IFwiXFxuUG9zaXRpb25YOiBcIiArIG4ucG9zaXRpb25YICsgXCIsIFBvc2l0aW9uWTogXCIgKyBuLnBvc2l0aW9uWTtcbiAgICAgICAgICAvLyBzICs9IFwiXFxuV2lkdGg6IFwiICsgbi53aWR0aCArIFwiLCBIZWlnaHQ6IFwiICsgbi5oZWlnaHQ7XG4gICAgICAgICAgLy8gbG9nRGVidWcocyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQGJyaWVmIDogTGltaXRzIGEgZm9yY2UgKGZvcmNlWCwgZm9yY2VZKSB0byBiZSBub3RcbiAgICAgKiAgICAgICAgICBncmVhdGVyIChpbiBtb2R1bG8pIHRoYW4gbWF4LlxuICAgICA4ICAgICAgICAgIFByZXNlcnZlcyBmb3JjZSBkaXJlY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGxpbWl0Rm9yY2UgPSBmdW5jdGlvbiggZm9yY2VYLCBmb3JjZVksIG1heCApe1xuICAgICAgLy8gdmFyIHMgPSBcIkxpbWl0aW5nIGZvcmNlOiAoXCIgKyBmb3JjZVggKyBcIiwgXCIgKyBmb3JjZVkgKyBcIikuIE1heDogXCIgKyBtYXg7XG4gICAgICB2YXIgZm9yY2UgPSBNYXRoLnNxcnQoIGZvcmNlWCAqIGZvcmNlWCArIGZvcmNlWSAqIGZvcmNlWSApO1xuXG4gICAgICBpZiggZm9yY2UgPiBtYXggKXtcbiAgICAgICAgdmFyIHJlcyA9IHtcbiAgICAgICAgICB4OiBtYXggKiBmb3JjZVggLyBmb3JjZSxcbiAgICAgICAgICB5OiBtYXggKiBmb3JjZVkgLyBmb3JjZVxuICAgICAgICB9O1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzID0ge1xuICAgICAgICAgIHg6IGZvcmNlWCxcbiAgICAgICAgICB5OiBmb3JjZVlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gcyArPSBcIi5cXG5SZXN1bHQ6IChcIiArIHJlcy54ICsgXCIsIFwiICsgcmVzLnkgKyBcIilcIjtcbiAgICAgIC8vIGxvZ0RlYnVnKHMpO1xuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAYnJpZWYgOiBGdW5jdGlvbiB1c2VkIGZvciBrZWVwaW5nIHRyYWNrIG9mIGNvbXBvdW5kIG5vZGVcbiAgICAgKiAgICAgICAgICBzaXplcywgc2luY2UgdGhleSBzaG91bGQgYm91bmQgYWxsIHRoZWlyIHN1Ym5vZGVzLlxuICAgICAqL1xuICAgIHZhciB1cGRhdGVBbmNlc3RyeUJvdW5kYXJpZXMgPSBmdW5jdGlvbiggbm9kZSwgbGF5b3V0SW5mbyApe1xuICAgICAgLy8gdmFyIHMgPSBcIlByb3BhZ2F0aW5nIG5ldyBwb3NpdGlvbi9zaXplIG9mIG5vZGUgXCIgKyBub2RlLmlkO1xuICAgICAgdmFyIHBhcmVudElkID0gbm9kZS5wYXJlbnRJZDtcbiAgICAgIGlmKCBudWxsID09IHBhcmVudElkICl7XG4gICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gcGFyZW50LCB3ZSBhcmUgZG9uZVxuICAgICAgICAvLyBzICs9IFwiLiBObyBwYXJlbnQgbm9kZS5cIjtcbiAgICAgICAgLy8gbG9nRGVidWcocyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IFBhcmVudCBOb2RlXG4gICAgICB2YXIgcCA9IGxheW91dEluZm8ubGF5b3V0Tm9kZXNbIGxheW91dEluZm8uaWRUb0luZGV4WyBwYXJlbnRJZCBdIF07XG4gICAgICB2YXIgZmxhZyA9IGZhbHNlO1xuXG4gICAgICAvLyBNYXhYXG4gICAgICBpZiggbnVsbCA9PSBwLm1heFggfHwgbm9kZS5tYXhYICsgcC5wYWRSaWdodCA+IHAubWF4WCApe1xuICAgICAgICBwLm1heFggPSBub2RlLm1heFggKyBwLnBhZFJpZ2h0O1xuICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgLy8gcyArPSBcIlxcbk5ldyBtYXhYIGZvciBwYXJlbnQgbm9kZSBcIiArIHAuaWQgKyBcIjogXCIgKyBwLm1heFg7XG4gICAgICB9XG5cbiAgICAgIC8vIE1pblhcbiAgICAgIGlmKCBudWxsID09IHAubWluWCB8fCBub2RlLm1pblggLSBwLnBhZExlZnQgPCBwLm1pblggKXtcbiAgICAgICAgcC5taW5YID0gbm9kZS5taW5YIC0gcC5wYWRMZWZ0O1xuICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgLy8gcyArPSBcIlxcbk5ldyBtaW5YIGZvciBwYXJlbnQgbm9kZSBcIiArIHAuaWQgKyBcIjogXCIgKyBwLm1pblg7XG4gICAgICB9XG5cbiAgICAgIC8vIE1heFlcbiAgICAgIGlmKCBudWxsID09IHAubWF4WSB8fCBub2RlLm1heFkgKyBwLnBhZEJvdHRvbSA+IHAubWF4WSApe1xuICAgICAgICBwLm1heFkgPSBub2RlLm1heFkgKyBwLnBhZEJvdHRvbTtcbiAgICAgICAgZmxhZyA9IHRydWU7XG4gICAgICAgIC8vIHMgKz0gXCJcXG5OZXcgbWF4WSBmb3IgcGFyZW50IG5vZGUgXCIgKyBwLmlkICsgXCI6IFwiICsgcC5tYXhZO1xuICAgICAgfVxuXG4gICAgICAvLyBNaW5ZXG4gICAgICBpZiggbnVsbCA9PSBwLm1pblkgfHwgbm9kZS5taW5ZIC0gcC5wYWRUb3AgPCBwLm1pblkgKXtcbiAgICAgICAgcC5taW5ZID0gbm9kZS5taW5ZIC0gcC5wYWRUb3A7XG4gICAgICAgIGZsYWcgPSB0cnVlO1xuICAgICAgICAvLyBzICs9IFwiXFxuTmV3IG1pblkgZm9yIHBhcmVudCBub2RlIFwiICsgcC5pZCArIFwiOiBcIiArIHAubWluWTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdXBkYXRlZCBib3VuZGFyaWVzLCBwcm9wYWdhdGUgY2hhbmdlcyB1cHdhcmRcbiAgICAgIGlmKCBmbGFnICl7XG4gICAgICAgIC8vIGxvZ0RlYnVnKHMpO1xuICAgICAgICByZXR1cm4gdXBkYXRlQW5jZXN0cnlCb3VuZGFyaWVzKCBwLCBsYXlvdXRJbmZvICk7XG4gICAgICB9XG5cbiAgICAgIC8vIHMgKz0gXCIuIE5vIGNoYW5nZXMgaW4gYm91bmRhcmllcy9wb3NpdGlvbiBvZiBwYXJlbnQgbm9kZSBcIiArIHAuaWQ7XG4gICAgICAvLyBsb2dEZWJ1ZyhzKTtcbiAgICAgIHJldHVybjtcbiAgICB9O1xuXG4gICAgdmFyIHNlcGFyYXRlQ29tcG9uZW50cyA9IGZ1bmN0aW9uKCBsYXl1dEluZm8sIG9wdGlvbnMgKXtcbiAgICAgIHZhciBub2RlcyA9IGxheW91dEluZm8ubGF5b3V0Tm9kZXM7XG4gICAgICB2YXIgY29tcG9uZW50cyA9IFtdO1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbIGkgXTtcbiAgICAgICAgdmFyIGNpZCA9IG5vZGUuY21wdElkO1xuICAgICAgICB2YXIgY29tcG9uZW50ID0gY29tcG9uZW50c1sgY2lkIF0gPSBjb21wb25lbnRzWyBjaWQgXSB8fCBbXTtcblxuICAgICAgICBjb21wb25lbnQucHVzaCggbm9kZSApO1xuICAgICAgfVxuXG4gICAgICB2YXIgdG90YWxBID0gMDtcblxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBjb21wb25lbnRzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBjID0gY29tcG9uZW50c1sgaSBdO1xuXG4gICAgICAgIGlmKCAhYyApeyBjb250aW51ZTsgfVxuXG4gICAgICAgIGMueDEgPSBJbmZpbml0eTtcbiAgICAgICAgYy54MiA9IC1JbmZpbml0eTtcbiAgICAgICAgYy55MSA9IEluZmluaXR5O1xuICAgICAgICBjLnkyID0gLUluZmluaXR5O1xuXG4gICAgICAgIGZvciggdmFyIGogPSAwOyBqIDwgYy5sZW5ndGg7IGorKyApe1xuICAgICAgICAgIHZhciBuID0gY1sgaiBdO1xuXG4gICAgICAgICAgYy54MSA9IE1hdGgubWluKCBjLngxLCBuLnBvc2l0aW9uWCAtIG4ud2lkdGggLyAyICk7XG4gICAgICAgICAgYy54MiA9IE1hdGgubWF4KCBjLngyLCBuLnBvc2l0aW9uWCArIG4ud2lkdGggLyAyICk7XG4gICAgICAgICAgYy55MSA9IE1hdGgubWluKCBjLnkxLCBuLnBvc2l0aW9uWSAtIG4uaGVpZ2h0IC8gMiApO1xuICAgICAgICAgIGMueTIgPSBNYXRoLm1heCggYy55Miwgbi5wb3NpdGlvblkgKyBuLmhlaWdodCAvIDIgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGMudyA9IGMueDIgLSBjLngxO1xuICAgICAgICBjLmggPSBjLnkyIC0gYy55MTtcblxuICAgICAgICB0b3RhbEEgKz0gYy53ICogYy5oO1xuICAgICAgfVxuXG4gICAgICBjb21wb25lbnRzLnNvcnQoIGZ1bmN0aW9uKCBjMSwgYzIgKXtcbiAgICAgICAgcmV0dXJuIGMyLncgKiBjMi5oIC0gYzEudyAqIGMxLmg7XG4gICAgICB9ICk7XG5cbiAgICAgIHZhciB4ID0gMDtcbiAgICAgIHZhciB5ID0gMDtcbiAgICAgIHZhciB1c2VkVyA9IDA7XG4gICAgICB2YXIgcm93SCA9IDA7XG4gICAgICB2YXIgbWF4Um93VyA9IE1hdGguc3FydCggdG90YWxBICkgKiBsYXlvdXRJbmZvLmNsaWVudFdpZHRoIC8gbGF5b3V0SW5mby5jbGllbnRIZWlnaHQ7XG5cbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgY29tcG9uZW50cy5sZW5ndGg7IGkrKyApe1xuICAgICAgICB2YXIgYyA9IGNvbXBvbmVudHNbIGkgXTtcblxuICAgICAgICBpZiggIWMgKXsgY29udGludWU7IH1cblxuICAgICAgICBmb3IoIHZhciBqID0gMDsgaiA8IGMubGVuZ3RoOyBqKysgKXtcbiAgICAgICAgICB2YXIgbiA9IGNbIGogXTtcblxuICAgICAgICAgIGlmKCAhbi5pc0xvY2tlZCApe1xuICAgICAgICAgICAgbi5wb3NpdGlvblggKz0geDtcbiAgICAgICAgICAgIG4ucG9zaXRpb25ZICs9IHk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgeCArPSBjLncgKyBvcHRpb25zLmNvbXBvbmVudFNwYWNpbmc7XG4gICAgICAgIHVzZWRXICs9IGMudyArIG9wdGlvbnMuY29tcG9uZW50U3BhY2luZztcbiAgICAgICAgcm93SCA9IE1hdGgubWF4KCByb3dILCBjLmggKTtcblxuICAgICAgICBpZiggdXNlZFcgPiBtYXhSb3dXICl7XG4gICAgICAgICAgeSArPSByb3dIICsgb3B0aW9ucy5jb21wb25lbnRTcGFjaW5nO1xuICAgICAgICAgIHggPSAwO1xuICAgICAgICAgIHVzZWRXID0gMDtcbiAgICAgICAgICByb3dIID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbWFpbkxvb3AgPSBmdW5jdGlvbiggaSApe1xuICAgICAgaWYoIHN0b3BwZWQgKXtcbiAgICAgICAgLy8gbG9nRGVidWcoXCJMYXlvdXQgbWFudWFsbHkgc3RvcHBlZC4gU3RvcHBpbmcgY29tcHV0YXRpb24gaW4gc3RlcCBcIiArIGkpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIERvIG9uZSBzdGVwIGluIHRoZSBwaGlzaWNhbCBzaW11bGF0aW9uXG4gICAgICBzdGVwKCBsYXlvdXRJbmZvLCBvcHRpb25zLCBpICk7XG5cbiAgICAgIC8vIFVwZGF0ZSB0ZW1wZXJhdHVyZVxuICAgICAgbGF5b3V0SW5mby50ZW1wZXJhdHVyZSA9IGxheW91dEluZm8udGVtcGVyYXR1cmUgKiBvcHRpb25zLmNvb2xpbmdGYWN0b3I7XG4gICAgICAvLyBsb2dEZWJ1ZyhcIk5ldyB0ZW1wZXJhdHVyZTogXCIgKyBsYXlvdXRJbmZvLnRlbXBlcmF0dXJlKTtcblxuICAgICAgaWYoIGxheW91dEluZm8udGVtcGVyYXR1cmUgPCBvcHRpb25zLm1pblRlbXAgKXtcbiAgICAgICAgLy8gbG9nRGVidWcoXCJUZW1wZXJhdHVyZSBkcm9wIGJlbG93IG1pbmltdW0gdGhyZXNob2xkLiBTdG9wcGluZyBjb21wdXRhdGlvbiBpbiBzdGVwIFwiICsgaSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbG9vcFJldDtcblxuICAgIGRvIHtcbiAgICAgIHZhciBmID0gMDtcblxuICAgICAgd2hpbGUoIGYgPCBvcHRpb25zLnJlZnJlc2ggJiYgaSA8IG9wdGlvbnMubnVtSXRlciApe1xuICAgICAgICB2YXIgbG9vcFJldCA9IG1haW5Mb29wKCBpICk7XG4gICAgICAgIGlmKCAhbG9vcFJldCApeyBicmVhazsgfVxuXG4gICAgICAgIGYrKztcbiAgICAgICAgaSsrO1xuICAgICAgfVxuXG4gICAgICBpZiggb3B0aW9ucy5hbmltYXRlICl7XG4gICAgICAgIGJyb2FkY2FzdCggbGF5b3V0SW5mby5sYXlvdXROb2RlcyApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gICAgICB9XG5cbiAgICB9IHdoaWxlKCBsb29wUmV0ICYmIGkgKyAxIDwgb3B0aW9ucy5udW1JdGVyICk7XG5cbiAgICBzZXBhcmF0ZUNvbXBvbmVudHMoIGxheW91dEluZm8sIG9wdGlvbnMgKTtcblxuICAgIHJldHVybiBsYXlvdXRJbmZvO1xuICB9ICkudGhlbiggZnVuY3Rpb24oIGxheW91dEluZm9VcGRhdGVkICl7XG4gICAgbGF5b3V0SW5mby5sYXlvdXROb2RlcyA9IGxheW91dEluZm9VcGRhdGVkLmxheW91dE5vZGVzOyAvLyBnZXQgdGhlIHBvc2l0aW9uc1xuXG4gICAgdGhyZWFkLnN0b3AoKTtcbiAgICBkb25lKCk7XG4gIH0gKTtcblxuICB2YXIgZG9uZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmVmcmVzaCh7XG4gICAgICBmb3JjZTogdHJ1ZSxcbiAgICAgIG5leHQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vIExheW91dCBoYXMgZmluaXNoZWRcbiAgICAgICAgbGF5b3V0Lm9uZSgnbGF5b3V0c3RvcCcsIG9wdGlvbnMuc3RvcCk7XG4gICAgICAgIGxheW91dC50cmlnZ2VyKHsgdHlwZTogJ2xheW91dHN0b3AnLCBsYXlvdXQ6IGxheW91dCB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbn07XG5cblxuLyoqXG4gKiBAYnJpZWYgOiBjYWxsZWQgb24gY29udGludW91cyBsYXlvdXRzIHRvIHN0b3AgdGhlbSBiZWZvcmUgdGhleSBmaW5pc2hcbiAqL1xuQ29zZUxheW91dC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuc3RvcHBlZCA9IHRydWU7XG5cbiAgaWYoIHRoaXMudGhyZWFkICl7XG4gICAgdGhpcy50aHJlYWQuc3RvcCgpO1xuICB9XG5cbiAgdGhpcy50cmlnZ2VyKCAnbGF5b3V0c3RvcCcgKTtcblxuICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbn07XG5cbkNvc2VMYXlvdXQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpe1xuICBpZiggdGhpcy50aHJlYWQgKXtcbiAgICB0aGlzLnRocmVhZC5zdG9wKCk7XG4gIH1cblxuICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbn07XG5cblxuLyoqXG4gKiBAYnJpZWYgICAgIDogQ3JlYXRlcyBhbiBvYmplY3Qgd2hpY2ggaXMgY29udGFpbnMgYWxsIHRoZSBkYXRhXG4gKiAgICAgICAgICAgICAgdXNlZCBpbiB0aGUgbGF5b3V0IHByb2Nlc3NcbiAqIEBhcmcgY3kgICAgOiBjeXRvc2NhcGUuanMgb2JqZWN0XG4gKiBAcmV0dXJuICAgIDogbGF5b3V0SW5mbyBvYmplY3QgaW5pdGlhbGl6ZWRcbiAqL1xudmFyIGNyZWF0ZUxheW91dEluZm8gPSBmdW5jdGlvbiggY3ksIGxheW91dCwgb3B0aW9ucyApe1xuICAvLyBTaG9ydGN1dFxuICB2YXIgZWRnZXMgPSBvcHRpb25zLmVsZXMuZWRnZXMoKTtcbiAgdmFyIG5vZGVzID0gb3B0aW9ucy5lbGVzLm5vZGVzKCk7XG5cbiAgdmFyIGxheW91dEluZm8gICA9IHtcbiAgICBpc0NvbXBvdW5kOiBjeS5oYXNDb21wb3VuZE5vZGVzKCksXG4gICAgbGF5b3V0Tm9kZXM6IFtdLFxuICAgIGlkVG9JbmRleDoge30sXG4gICAgbm9kZVNpemU6IG5vZGVzLnNpemUoKSxcbiAgICBncmFwaFNldDogW10sXG4gICAgaW5kZXhUb0dyYXBoOiBbXSxcbiAgICBsYXlvdXRFZGdlczogW10sXG4gICAgZWRnZVNpemU6IGVkZ2VzLnNpemUoKSxcbiAgICB0ZW1wZXJhdHVyZTogb3B0aW9ucy5pbml0aWFsVGVtcCxcbiAgICBjbGllbnRXaWR0aDogY3kud2lkdGgoKSxcbiAgICBjbGllbnRIZWlnaHQ6IGN5LndpZHRoKCksXG4gICAgYm91bmRpbmdCb3g6IG1hdGgubWFrZUJvdW5kaW5nQm94KCBvcHRpb25zLmJvdW5kaW5nQm94ID8gb3B0aW9ucy5ib3VuZGluZ0JveCA6IHtcbiAgICAgICAgICAgICAgICAgICAgIHgxOiAwLCB5MTogMCwgdzogY3kud2lkdGgoKSwgaDogY3kuaGVpZ2h0KClcbiAgICAgICAgICAgICAgICAgICB9IClcbiAgfTtcblxuICB2YXIgY29tcG9uZW50cyA9IG9wdGlvbnMuZWxlcy5jb21wb25lbnRzKCk7XG4gIHZhciBpZDJjbXB0SWQgPSB7fTtcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IGNvbXBvbmVudHMubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgY29tcG9uZW50ID0gY29tcG9uZW50c1sgaSBdO1xuXG4gICAgZm9yKCB2YXIgaiA9IDA7IGogPCBjb21wb25lbnQubGVuZ3RoOyBqKysgKXtcbiAgICAgIHZhciBub2RlID0gY29tcG9uZW50WyBqIF07XG5cbiAgICAgIGlkMmNtcHRJZFsgbm9kZS5pZCgpIF0gPSBpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEl0ZXJhdGUgb3ZlciBhbGwgbm9kZXMsIGNyZWF0aW5nIGxheW91dCBub2Rlc1xuICBmb3IoIHZhciBpID0gMDsgaSA8IGxheW91dEluZm8ubm9kZVNpemU7IGkrKyApe1xuICAgIHZhciBuID0gbm9kZXNbIGkgXTtcbiAgICB2YXIgbmJiID0gbi5ib3VuZGluZ0JveCgpO1xuXG4gICAgdmFyIHRlbXBOb2RlICAgICAgICA9IHt9O1xuICAgIHRlbXBOb2RlLmlzTG9ja2VkICAgPSBuLmxvY2tlZCgpO1xuICAgIHRlbXBOb2RlLmlkICAgICAgICAgPSBuLmRhdGEoICdpZCcgKTtcbiAgICB0ZW1wTm9kZS5wYXJlbnRJZCAgID0gbi5kYXRhKCAncGFyZW50JyApO1xuICAgIHRlbXBOb2RlLmNtcHRJZCAgICAgPSBpZDJjbXB0SWRbIG4uaWQoKSBdO1xuICAgIHRlbXBOb2RlLmNoaWxkcmVuICAgPSBbXTtcbiAgICB0ZW1wTm9kZS5wb3NpdGlvblggID0gbi5wb3NpdGlvbiggJ3gnICk7XG4gICAgdGVtcE5vZGUucG9zaXRpb25ZICA9IG4ucG9zaXRpb24oICd5JyApO1xuICAgIHRlbXBOb2RlLm9mZnNldFggICAgPSAwO1xuICAgIHRlbXBOb2RlLm9mZnNldFkgICAgPSAwO1xuICAgIHRlbXBOb2RlLmhlaWdodCAgICAgPSBuYmIudztcbiAgICB0ZW1wTm9kZS53aWR0aCAgICAgID0gbmJiLmg7XG4gICAgdGVtcE5vZGUubWF4WCAgICAgICA9IHRlbXBOb2RlLnBvc2l0aW9uWCArIHRlbXBOb2RlLndpZHRoICAvIDI7XG4gICAgdGVtcE5vZGUubWluWCAgICAgICA9IHRlbXBOb2RlLnBvc2l0aW9uWCAtIHRlbXBOb2RlLndpZHRoICAvIDI7XG4gICAgdGVtcE5vZGUubWF4WSAgICAgICA9IHRlbXBOb2RlLnBvc2l0aW9uWSArIHRlbXBOb2RlLmhlaWdodCAvIDI7XG4gICAgdGVtcE5vZGUubWluWSAgICAgICA9IHRlbXBOb2RlLnBvc2l0aW9uWSAtIHRlbXBOb2RlLmhlaWdodCAvIDI7XG4gICAgdGVtcE5vZGUucGFkTGVmdCAgICA9IHBhcnNlRmxvYXQoIG4uc3R5bGUoICdwYWRkaW5nLWxlZnQnICkgKTtcbiAgICB0ZW1wTm9kZS5wYWRSaWdodCAgID0gcGFyc2VGbG9hdCggbi5zdHlsZSggJ3BhZGRpbmctcmlnaHQnICkgKTtcbiAgICB0ZW1wTm9kZS5wYWRUb3AgICAgID0gcGFyc2VGbG9hdCggbi5zdHlsZSggJ3BhZGRpbmctdG9wJyApICk7XG4gICAgdGVtcE5vZGUucGFkQm90dG9tICA9IHBhcnNlRmxvYXQoIG4uc3R5bGUoICdwYWRkaW5nLWJvdHRvbScgKSApO1xuXG4gICAgLy8gZm9yY2VzXG4gICAgdGVtcE5vZGUubm9kZVJlcHVsc2lvbiA9IGlzLmZuKCBvcHRpb25zLm5vZGVSZXB1bHNpb24gKSA/IG9wdGlvbnMubm9kZVJlcHVsc2lvbi5jYWxsKCBuLCBuICkgOiBvcHRpb25zLm5vZGVSZXB1bHNpb247XG5cbiAgICAvLyBBZGQgbmV3IG5vZGVcbiAgICBsYXlvdXRJbmZvLmxheW91dE5vZGVzLnB1c2goIHRlbXBOb2RlICk7XG4gICAgLy8gQWRkIGVudHJ5IHRvIGlkLWluZGV4IG1hcFxuICAgIGxheW91dEluZm8uaWRUb0luZGV4WyB0ZW1wTm9kZS5pZCBdID0gaTtcbiAgfVxuXG4gIC8vIElubGluZSBpbXBsZW1lbnRhdGlvbiBvZiBhIHF1ZXVlLCB1c2VkIGZvciB0cmF2ZXJzaW5nIHRoZSBncmFwaCBpbiBCRlMgb3JkZXJcbiAgdmFyIHF1ZXVlID0gW107XG4gIHZhciBzdGFydCA9IDA7ICAgLy8gUG9pbnRzIHRvIHRoZSBzdGFydCB0aGUgcXVldWVcbiAgdmFyIGVuZCAgID0gLTE7ICAvLyBQb2ludHMgdG8gdGhlIGVuZCBvZiB0aGUgcXVldWVcblxuICB2YXIgdGVtcEdyYXBoID0gW107XG5cbiAgLy8gU2Vjb25kIHBhc3MgdG8gYWRkIGNoaWxkIGluZm9ybWF0aW9uIGFuZFxuICAvLyBpbml0aWFsaXplIHF1ZXVlIGZvciBoaWVyYXJjaGljYWwgdHJhdmVyc2FsXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgbGF5b3V0SW5mby5ub2RlU2l6ZTsgaSsrICl7XG4gICAgdmFyIG4gPSBsYXlvdXRJbmZvLmxheW91dE5vZGVzWyBpIF07XG4gICAgdmFyIHBfaWQgPSBuLnBhcmVudElkO1xuICAgIC8vIENoZWNrIGlmIG5vZGUgbiBoYXMgYSBwYXJlbnQgbm9kZVxuICAgIGlmKCBudWxsICE9IHBfaWQgKXtcbiAgICAgIC8vIEFkZCBub2RlIElkIHRvIHBhcmVudCdzIGxpc3Qgb2YgY2hpbGRyZW5cbiAgICAgIGxheW91dEluZm8ubGF5b3V0Tm9kZXNbIGxheW91dEluZm8uaWRUb0luZGV4WyBwX2lkIF0gXS5jaGlsZHJlbi5wdXNoKCBuLmlkICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIGEgbm9kZSBkb2Vzbid0IGhhdmUgYSBwYXJlbnQsIHRoZW4gaXQncyBpbiB0aGUgcm9vdCBncmFwaFxuICAgICAgcXVldWVbICsrZW5kIF0gPSBuLmlkO1xuICAgICAgdGVtcEdyYXBoLnB1c2goIG4uaWQgKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcm9vdCBncmFwaCB0byBncmFwaFNldFxuICBsYXlvdXRJbmZvLmdyYXBoU2V0LnB1c2goIHRlbXBHcmFwaCApO1xuXG4gIC8vIFRyYXZlcnNlIHRoZSBncmFwaCwgbGV2ZWwgYnkgbGV2ZWwsXG4gIHdoaWxlKCBzdGFydCA8PSBlbmQgKXtcbiAgICAvLyBHZXQgdGhlIG5vZGUgdG8gdmlzaXQgYW5kIHJlbW92ZSBpdCBmcm9tIHF1ZXVlXG4gICAgdmFyIG5vZGVfaWQgID0gcXVldWVbIHN0YXJ0KysgXTtcbiAgICB2YXIgbm9kZV9peCAgPSBsYXlvdXRJbmZvLmlkVG9JbmRleFsgbm9kZV9pZCBdO1xuICAgIHZhciBub2RlICAgICA9IGxheW91dEluZm8ubGF5b3V0Tm9kZXNbIG5vZGVfaXggXTtcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmKCBjaGlsZHJlbi5sZW5ndGggPiAwICl7XG4gICAgICAvLyBBZGQgY2hpbGRyZW4gbm9kZXMgYXMgYSBuZXcgZ3JhcGggdG8gZ3JhcGggc2V0XG4gICAgICBsYXlvdXRJbmZvLmdyYXBoU2V0LnB1c2goIGNoaWxkcmVuICk7XG4gICAgICAvLyBBZGQgY2hpbGRyZW4gdG8gcXVlIHF1ZXVlIHRvIGJlIHZpc2l0ZWRcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgcXVldWVbICsrZW5kIF0gPSBjaGlsZHJlblsgaSBdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENyZWF0ZSBpbmRleFRvR3JhcGggbWFwXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgbGF5b3V0SW5mby5ncmFwaFNldC5sZW5ndGg7IGkrKyApe1xuICAgIHZhciBncmFwaCA9IGxheW91dEluZm8uZ3JhcGhTZXRbIGkgXTtcbiAgICBmb3IoIHZhciBqID0gMDsgaiA8IGdyYXBoLmxlbmd0aDsgaisrICl7XG4gICAgICB2YXIgaW5kZXggPSBsYXlvdXRJbmZvLmlkVG9JbmRleFsgZ3JhcGhbIGogXSBdO1xuICAgICAgbGF5b3V0SW5mby5pbmRleFRvR3JhcGhbIGluZGV4IF0gPSBpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEl0ZXJhdGUgb3ZlciBhbGwgZWRnZXMsIGNyZWF0aW5nIExheW91dCBFZGdlc1xuICBmb3IoIHZhciBpID0gMDsgaSA8IGxheW91dEluZm8uZWRnZVNpemU7IGkrKyApe1xuICAgIHZhciBlID0gZWRnZXNbIGkgXTtcbiAgICB2YXIgdGVtcEVkZ2UgPSB7fTtcbiAgICB0ZW1wRWRnZS5pZCAgICAgICA9IGUuZGF0YSggJ2lkJyApO1xuICAgIHRlbXBFZGdlLnNvdXJjZUlkID0gZS5kYXRhKCAnc291cmNlJyApO1xuICAgIHRlbXBFZGdlLnRhcmdldElkID0gZS5kYXRhKCAndGFyZ2V0JyApO1xuXG4gICAgLy8gQ29tcHV0ZSBpZGVhbCBsZW5ndGhcbiAgICB2YXIgaWRlYWxMZW5ndGggPSBpcy5mbiggb3B0aW9ucy5pZGVhbEVkZ2VMZW5ndGggKSA/IG9wdGlvbnMuaWRlYWxFZGdlTGVuZ3RoLmNhbGwoIGUsIGUgKSA6IG9wdGlvbnMuaWRlYWxFZGdlTGVuZ3RoO1xuICAgIHZhciBlbGFzdGljaXR5ID0gaXMuZm4oIG9wdGlvbnMuZWRnZUVsYXN0aWNpdHkgKSA/IG9wdGlvbnMuZWRnZUVsYXN0aWNpdHkuY2FsbCggZSwgZSApIDogb3B0aW9ucy5lZGdlRWxhc3RpY2l0eTtcblxuICAgIC8vIENoZWNrIGlmIGl0J3MgYW4gaW50ZXIgZ3JhcGggZWRnZVxuICAgIHZhciBzb3VyY2VJeCAgICA9IGxheW91dEluZm8uaWRUb0luZGV4WyB0ZW1wRWRnZS5zb3VyY2VJZCBdO1xuICAgIHZhciB0YXJnZXRJeCAgICA9IGxheW91dEluZm8uaWRUb0luZGV4WyB0ZW1wRWRnZS50YXJnZXRJZCBdO1xuICAgIHZhciBzb3VyY2VHcmFwaCA9IGxheW91dEluZm8uaW5kZXhUb0dyYXBoWyBzb3VyY2VJeCBdO1xuICAgIHZhciB0YXJnZXRHcmFwaCA9IGxheW91dEluZm8uaW5kZXhUb0dyYXBoWyB0YXJnZXRJeCBdO1xuXG4gICAgaWYoIHNvdXJjZUdyYXBoICE9IHRhcmdldEdyYXBoICl7XG4gICAgICAvLyBGaW5kIGxvd2VzdCBjb21tb24gZ3JhcGggYW5jZXN0b3JcbiAgICAgIHZhciBsY2EgPSBmaW5kTENBKCB0ZW1wRWRnZS5zb3VyY2VJZCwgdGVtcEVkZ2UudGFyZ2V0SWQsIGxheW91dEluZm8gKTtcblxuICAgICAgLy8gQ29tcHV0ZSBzdW0gb2Ygbm9kZSBkZXB0aHMsIHJlbGF0aXZlIHRvIGxjYSBncmFwaFxuICAgICAgdmFyIGxjYUdyYXBoID0gbGF5b3V0SW5mby5ncmFwaFNldFsgbGNhIF07XG4gICAgICB2YXIgZGVwdGggICAgPSAwO1xuXG4gICAgICAvLyBTb3VyY2UgZGVwdGhcbiAgICAgIHZhciB0ZW1wTm9kZSA9IGxheW91dEluZm8ubGF5b3V0Tm9kZXNbIHNvdXJjZUl4IF07XG4gICAgICB3aGlsZSggLTEgPT09IGxjYUdyYXBoLmluZGV4T2YoIHRlbXBOb2RlLmlkICkgKXtcbiAgICAgICAgdGVtcE5vZGUgPSBsYXlvdXRJbmZvLmxheW91dE5vZGVzWyBsYXlvdXRJbmZvLmlkVG9JbmRleFsgdGVtcE5vZGUucGFyZW50SWQgXSBdO1xuICAgICAgICBkZXB0aCsrO1xuICAgICAgfVxuXG4gICAgICAvLyBUYXJnZXQgZGVwdGhcbiAgICAgIHRlbXBOb2RlID0gbGF5b3V0SW5mby5sYXlvdXROb2Rlc1sgdGFyZ2V0SXggXTtcbiAgICAgIHdoaWxlKCAtMSA9PT0gbGNhR3JhcGguaW5kZXhPZiggdGVtcE5vZGUuaWQgKSApe1xuICAgICAgICB0ZW1wTm9kZSA9IGxheW91dEluZm8ubGF5b3V0Tm9kZXNbIGxheW91dEluZm8uaWRUb0luZGV4WyB0ZW1wTm9kZS5wYXJlbnRJZCBdIF07XG4gICAgICAgIGRlcHRoKys7XG4gICAgICB9XG5cbiAgICAgIC8vIGxvZ0RlYnVnKCdMQ0Egb2Ygbm9kZXMgJyArIHRlbXBFZGdlLnNvdXJjZUlkICsgJyBhbmQgJyArIHRlbXBFZGdlLnRhcmdldElkICtcbiAgICAgIC8vICBcIi4gSW5kZXg6IFwiICsgbGNhICsgXCIgQ29udGVudHM6IFwiICsgbGNhR3JhcGgudG9TdHJpbmcoKSArXG4gICAgICAvLyAgXCIuIERlcHRoOiBcIiArIGRlcHRoKTtcblxuICAgICAgLy8gVXBkYXRlIGlkZWFsTGVuZ3RoXG4gICAgICBpZGVhbExlbmd0aCAqPSBkZXB0aCAqIG9wdGlvbnMubmVzdGluZ0ZhY3RvcjtcbiAgICB9XG5cbiAgICB0ZW1wRWRnZS5pZGVhbExlbmd0aCA9IGlkZWFsTGVuZ3RoO1xuICAgIHRlbXBFZGdlLmVsYXN0aWNpdHkgPSBlbGFzdGljaXR5O1xuXG4gICAgbGF5b3V0SW5mby5sYXlvdXRFZGdlcy5wdXNoKCB0ZW1wRWRnZSApO1xuICB9XG5cbiAgLy8gRmluYWxseSwgcmV0dXJuIGxheW91dEluZm8gb2JqZWN0XG4gIHJldHVybiBsYXlvdXRJbmZvO1xufTtcblxuXG4vKipcbiAqIEBicmllZiA6IFRoaXMgZnVuY3Rpb24gZmluZHMgdGhlIGluZGV4IG9mIHRoZSBsb3dlc3QgY29tbW9uXG4gKiAgICAgICAgICBncmFwaCBhbmNlc3RvciBiZXR3ZWVuIDIgbm9kZXMgaW4gdGhlIHN1YnRyZWVcbiAqICAgICAgICAgIChmcm9tIHRoZSBncmFwaCBoaWVyYXJjaHkgaW5kdWNlZCB0cmVlKSB3aG9zZVxuICogICAgICAgICAgcm9vdCBpcyBncmFwaEl4XG4gKlxuICogQGFyZyBub2RlMTogbm9kZTEncyBJRFxuICogQGFyZyBub2RlMjogbm9kZTIncyBJRFxuICogQGFyZyBsYXlvdXRJbmZvOiBsYXlvdXRJbmZvIG9iamVjdFxuICpcbiAqL1xudmFyIGZpbmRMQ0EgPSBmdW5jdGlvbiggbm9kZTEsIG5vZGUyLCBsYXlvdXRJbmZvICl7XG4gIC8vIEZpbmQgdGhlaXIgY29tbW9uIGFuY2VzdGVyLCBzdGFydGluZyBmcm9tIHRoZSByb290IGdyYXBoXG4gIHZhciByZXMgPSBmaW5kTENBX2F1eCggbm9kZTEsIG5vZGUyLCAwLCBsYXlvdXRJbmZvICk7XG4gIGlmKCAyID4gcmVzLmNvdW50ICl7XG4gICAgLy8gSWYgYXV4IGZ1bmN0aW9uIGNvdWxkbid0IGZpbmQgdGhlIGNvbW1vbiBhbmNlc3RlcixcbiAgICAvLyB0aGVuIGl0IGlzIHRoZSByb290IGdyYXBoXG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlcy5ncmFwaDtcbiAgfVxufTtcblxuXG4vKipcbiAqIEBicmllZiAgICAgICAgICA6IEF1eGlsaWFyeSBmdW5jdGlvbiB1c2VkIGZvciBMQ0EgY29tcHV0YXRpb25cbiAqXG4gKiBAYXJnIG5vZGUxICAgICAgOiBub2RlMSdzIElEXG4gKiBAYXJnIG5vZGUyICAgICAgOiBub2RlMidzIElEXG4gKiBAYXJnIGdyYXBoSXggICAgOiBzdWJncmFwaCBpbmRleFxuICogQGFyZyBsYXlvdXRJbmZvIDogbGF5b3V0SW5mbyBvYmplY3RcbiAqXG4gKiBAcmV0dXJuICAgICAgICAgOiBvYmplY3Qgb2YgdGhlIGZvcm0ge2NvdW50OiBYLCBncmFwaDogWX0sIHdoZXJlOlxuICogICAgICAgICAgICAgICAgICAgWCBpcyB0aGUgbnVtYmVyIG9mIGFuY2VzdGVycyAobWF4OiAyKSBmb3VuZCBpblxuICogICAgICAgICAgICAgICAgICAgZ3JhcGhJeCAoYW5kIGl0J3Mgc3ViZ3JhcGhzKSxcbiAqICAgICAgICAgICAgICAgICAgIFkgaXMgdGhlIGdyYXBoIGluZGV4IG9mIHRoZSBsb3dlc3QgZ3JhcGggY29udGFpbmluZ1xuICogICAgICAgICAgICAgICAgICAgYWxsIFggbm9kZXNcbiAqL1xudmFyIGZpbmRMQ0FfYXV4ID0gZnVuY3Rpb24oIG5vZGUxLCBub2RlMiwgZ3JhcGhJeCwgbGF5b3V0SW5mbyApe1xuICB2YXIgZ3JhcGggPSBsYXlvdXRJbmZvLmdyYXBoU2V0WyBncmFwaEl4IF07XG4gIC8vIElmIGJvdGggbm9kZXMgYmVsb25ncyB0byBncmFwaEl4XG4gIGlmKCAtMSA8IGdyYXBoLmluZGV4T2YoIG5vZGUxICkgJiYgLTEgPCBncmFwaC5pbmRleE9mKCBub2RlMiApICl7XG4gICAgcmV0dXJuIHtjb3VudDogMiwgZ3JhcGg6IGdyYXBoSXh9O1xuICB9XG5cbiAgLy8gTWFrZSByZWN1cnNpdmUgY2FsbHMgZm9yIGFsbCBzdWJncmFwaHNcbiAgdmFyIGMgPSAwO1xuICBmb3IoIHZhciBpID0gMDsgaSA8IGdyYXBoLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIG5vZGVJZCAgID0gZ3JhcGhbIGkgXTtcbiAgICB2YXIgbm9kZUl4ICAgPSBsYXlvdXRJbmZvLmlkVG9JbmRleFsgbm9kZUlkIF07XG4gICAgdmFyIGNoaWxkcmVuID0gbGF5b3V0SW5mby5sYXlvdXROb2Rlc1sgbm9kZUl4IF0uY2hpbGRyZW47XG5cbiAgICAvLyBJZiB0aGUgbm9kZSBoYXMgbm8gY2hpbGQsIHNraXAgaXRcbiAgICBpZiggMCA9PT0gY2hpbGRyZW4ubGVuZ3RoICl7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRHcmFwaEl4ID0gbGF5b3V0SW5mby5pbmRleFRvR3JhcGhbIGxheW91dEluZm8uaWRUb0luZGV4WyBjaGlsZHJlblswXSBdIF07XG4gICAgdmFyIHJlc3VsdCA9IGZpbmRMQ0FfYXV4KCBub2RlMSwgbm9kZTIsIGNoaWxkR3JhcGhJeCwgbGF5b3V0SW5mbyApO1xuICAgIGlmKCAwID09PSByZXN1bHQuY291bnQgKXtcbiAgICAgIC8vIE5laXRoZXIgbm9kZTEgbm9yIG5vZGUyIGFyZSBwcmVzZW50IGluIHRoaXMgc3ViZ3JhcGhcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiggMSA9PT0gcmVzdWx0LmNvdW50ICl7XG4gICAgICAvLyBPbmUgb2YgKG5vZGUxLCBub2RlMikgaXMgcHJlc2VudCBpbiB0aGlzIHN1YmdyYXBoXG4gICAgICBjKys7XG4gICAgICBpZiggMiA9PT0gYyApe1xuICAgICAgICAvLyBXZSd2ZSBhbHJlYWR5IGZvdW5kIGJvdGggbm9kZXMsIG5vIG5lZWQgdG8ga2VlcCBzZWFyY2hpbmdcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEJvdGggbm9kZXMgYXJlIHByZXNlbnQgaW4gdGhpcyBzdWJncmFwaFxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge2NvdW50OiBjLCBncmFwaDogZ3JhcGhJeH07XG59O1xuXG5cbi8qKlxuICogQGJyaWVmOiBwcmludHNMYXlvdXRJbmZvIGludG8ganMgY29uc29sZVxuICogICAgICAgICBPbmx5IHVzZWQgZm9yIGRlYmJ1Z2luZ1xuICovXG52YXIgcHJpbnRMYXlvdXRJbmZvID0gZnVuY3Rpb24oIGxheW91dEluZm8gKXtcbiAgLyogZXNsaW50LWRpc2FibGUgKi9cblxuICBpZiggIURFQlVHICl7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnNvbGUuZGVidWcoICdsYXlvdXROb2RlczonICk7XG4gIGZvciggdmFyIGkgPSAwOyBpIDwgbGF5b3V0SW5mby5ub2RlU2l6ZTsgaSsrICl7XG4gICAgdmFyIG4gPSBsYXlvdXRJbmZvLmxheW91dE5vZGVzWyBpIF07XG4gICAgdmFyIHMgPVxuICAgICdcXG5pbmRleDogJyAgICAgKyBpICtcbiAgICAnXFxuSWQ6ICcgICAgICAgICsgbi5pZCArXG4gICAgJ1xcbkNoaWxkcmVuOiAnICArIG4uY2hpbGRyZW4udG9TdHJpbmcoKSArXG4gICAgJ1xcbnBhcmVudElkOiAnICArIG4ucGFyZW50SWQgICtcbiAgICAnXFxucG9zaXRpb25YOiAnICsgbi5wb3NpdGlvblggK1xuICAgICdcXG5wb3NpdGlvblk6ICcgKyBuLnBvc2l0aW9uWSArXG4gICAgJ1xcbk9mZnNldFg6ICcgKyBuLm9mZnNldFggK1xuICAgICdcXG5PZmZzZXRZOiAnICsgbi5vZmZzZXRZICtcbiAgICAnXFxucGFkTGVmdDogJyArIG4ucGFkTGVmdCArXG4gICAgJ1xcbnBhZFJpZ2h0OiAnICsgbi5wYWRSaWdodCArXG4gICAgJ1xcbnBhZFRvcDogJyArIG4ucGFkVG9wICtcbiAgICAnXFxucGFkQm90dG9tOiAnICsgbi5wYWRCb3R0b207XG5cbiAgICBjb25zb2xlLmRlYnVnKCBzICk7XG4gIH1cblxuICBjb25zb2xlLmRlYnVnKCAnaWRUb0luZGV4JyApO1xuICBmb3IoIHZhciBpIGluIGxheW91dEluZm8uaWRUb0luZGV4ICl7XG4gICAgY29uc29sZS5kZWJ1ZyggJ0lkOiAnICsgaSArICdcXG5JbmRleDogJyArIGxheW91dEluZm8uaWRUb0luZGV4WyBpIF0gKTtcbiAgfVxuXG4gIGNvbnNvbGUuZGVidWcoICdHcmFwaCBTZXQnICk7XG4gIHZhciBzZXQgPSBsYXlvdXRJbmZvLmdyYXBoU2V0O1xuICBmb3IoIHZhciBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkgKysgKXtcbiAgICBjb25zb2xlLmRlYnVnKCAnU2V0IDogJyArIGkgKyAnOiAnICsgc2V0WyBpIF0udG9TdHJpbmcoKSApO1xuICB9XG5cbiAgdmFyIHMgPSAnSW5kZXhUb0dyYXBoJztcbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBsYXlvdXRJbmZvLmluZGV4VG9HcmFwaC5sZW5ndGg7IGkgKysgKXtcbiAgICBzICs9ICdcXG5JbmRleCA6ICcgKyBpICsgJyBHcmFwaDogJyArIGxheW91dEluZm8uaW5kZXhUb0dyYXBoWyBpIF07XG4gIH1cbiAgY29uc29sZS5kZWJ1ZyggcyApO1xuXG4gIHMgPSAnTGF5b3V0IEVkZ2VzJztcbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBsYXlvdXRJbmZvLmxheW91dEVkZ2VzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGUgPSBsYXlvdXRJbmZvLmxheW91dEVkZ2VzWyBpIF07XG4gICAgcyArPSAnXFxuRWRnZSBJbmRleDogJyArIGkgKyAnIElEOiAnICsgZS5pZCArXG4gICAgJyBTb3VjZUlEOiAnICsgZS5zb3VyY2VJZCArICcgVGFyZ2V0SWQ6ICcgKyBlLnRhcmdldElkICtcbiAgICAnIElkZWFsIExlbmd0aDogJyArIGUuaWRlYWxMZW5ndGg7XG4gIH1cbiAgY29uc29sZS5kZWJ1ZyggcyApO1xuXG4gIHMgPSAgJ25vZGVTaXplOiAnICsgbGF5b3V0SW5mby5ub2RlU2l6ZTtcbiAgcyArPSAnXFxuZWRnZVNpemU6ICcgKyBsYXlvdXRJbmZvLmVkZ2VTaXplO1xuICBzICs9ICdcXG50ZW1wZXJhdHVyZTogJyArIGxheW91dEluZm8udGVtcGVyYXR1cmU7XG4gIGNvbnNvbGUuZGVidWcoIHMgKTtcblxuICByZXR1cm47XG4gIC8qIGVzbGludC1lbmFibGUgKi9cbn07XG5cblxuLyoqXG4gKiBAYnJpZWYgOiBSYW5kb21pemVzIHRoZSBwb3NpdGlvbiBvZiBhbGwgbm9kZXNcbiAqL1xudmFyIHJhbmRvbWl6ZVBvc2l0aW9ucyA9IGZ1bmN0aW9uKCBsYXlvdXRJbmZvLCBjeSApe1xuICB2YXIgd2lkdGggICAgID0gbGF5b3V0SW5mby5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCAgICA9IGxheW91dEluZm8uY2xpZW50SGVpZ2h0O1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgbGF5b3V0SW5mby5ub2RlU2l6ZTsgaSsrICl7XG4gICAgdmFyIG4gPSBsYXlvdXRJbmZvLmxheW91dE5vZGVzWyBpIF07XG5cbiAgICAvLyBObyBuZWVkIHRvIHJhbmRvbWl6ZSBjb21wb3VuZCBub2RlcyBvciBsb2NrZWQgbm9kZXNcbiAgICBpZiggMCA9PT0gbi5jaGlsZHJlbi5sZW5ndGggJiYgIW4uaXNMb2NrZWQgKXtcbiAgICAgIG4ucG9zaXRpb25YID0gTWF0aC5yYW5kb20oKSAqIHdpZHRoO1xuICAgICAgbi5wb3NpdGlvblkgPSBNYXRoLnJhbmRvbSgpICogaGVpZ2h0O1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIEBicmllZiAgICAgICAgICA6IFVwZGF0ZXMgdGhlIHBvc2l0aW9ucyBvZiBub2RlcyBpbiB0aGUgbmV0d29ya1xuICogQGFyZyBsYXlvdXRJbmZvIDogTGF5b3V0SW5mbyBvYmplY3RcbiAqIEBhcmcgY3kgICAgICAgICA6IEN5dG9zY2FwZSBvYmplY3RcbiAqIEBhcmcgb3B0aW9ucyAgICA6IExheW91dCBvcHRpb25zXG4gKi9cbnZhciByZWZyZXNoUG9zaXRpb25zID0gZnVuY3Rpb24oIGxheW91dEluZm8sIGN5LCBvcHRpb25zICl7XG4gIC8vIHZhciBzID0gJ1JlZnJlc2hpbmcgcG9zaXRpb25zJztcbiAgLy8gbG9nRGVidWcocyk7XG5cbiAgdmFyIGxheW91dCA9IG9wdGlvbnMubGF5b3V0O1xuICB2YXIgbm9kZXMgPSBvcHRpb25zLmVsZXMubm9kZXMoKTtcbiAgdmFyIGJiID0gbGF5b3V0SW5mby5ib3VuZGluZ0JveDtcbiAgdmFyIGNvc2VCQiA9IHsgeDE6IEluZmluaXR5LCB4MjogLUluZmluaXR5LCB5MTogSW5maW5pdHksIHkyOiAtSW5maW5pdHkgfTtcblxuICBpZiggb3B0aW9ucy5ib3VuZGluZ0JveCApe1xuICAgIG5vZGVzLmZvckVhY2goIGZ1bmN0aW9uKCBub2RlICl7XG4gICAgICB2YXIgbG5vZGUgPSBsYXlvdXRJbmZvLmxheW91dE5vZGVzWyBsYXlvdXRJbmZvLmlkVG9JbmRleFsgbm9kZS5kYXRhKCAnaWQnICkgXSBdO1xuXG4gICAgICBjb3NlQkIueDEgPSBNYXRoLm1pbiggY29zZUJCLngxLCBsbm9kZS5wb3NpdGlvblggKTtcbiAgICAgIGNvc2VCQi54MiA9IE1hdGgubWF4KCBjb3NlQkIueDIsIGxub2RlLnBvc2l0aW9uWCApO1xuXG4gICAgICBjb3NlQkIueTEgPSBNYXRoLm1pbiggY29zZUJCLnkxLCBsbm9kZS5wb3NpdGlvblkgKTtcbiAgICAgIGNvc2VCQi55MiA9IE1hdGgubWF4KCBjb3NlQkIueTIsIGxub2RlLnBvc2l0aW9uWSApO1xuICAgIH0gKTtcblxuICAgIGNvc2VCQi53ID0gY29zZUJCLngyIC0gY29zZUJCLngxO1xuICAgIGNvc2VCQi5oID0gY29zZUJCLnkyIC0gY29zZUJCLnkxO1xuICB9XG5cbiAgbm9kZXMucG9zaXRpb25zKCBmdW5jdGlvbiggaSwgZWxlICl7XG4gICAgdmFyIGxub2RlID0gbGF5b3V0SW5mby5sYXlvdXROb2Rlc1sgbGF5b3V0SW5mby5pZFRvSW5kZXhbIGVsZS5kYXRhKCAnaWQnICkgXSBdO1xuICAgIC8vIHMgPSBcIk5vZGU6IFwiICsgbG5vZGUuaWQgKyBcIi4gUmVmcmVzaGVkIHBvc2l0aW9uOiAoXCIgK1xuICAgIC8vIGxub2RlLnBvc2l0aW9uWCArIFwiLCBcIiArIGxub2RlLnBvc2l0aW9uWSArIFwiKS5cIjtcbiAgICAvLyBsb2dEZWJ1ZyhzKTtcblxuICAgIGlmKCBvcHRpb25zLmJvdW5kaW5nQm94ICl7IC8vIHRoZW4gYWRkIGV4dHJhIGJvdW5kaW5nIGJveCBjb25zdHJhaW50XG4gICAgICB2YXIgcGN0WCA9IChsbm9kZS5wb3NpdGlvblggLSBjb3NlQkIueDEpIC8gY29zZUJCLnc7XG4gICAgICB2YXIgcGN0WSA9IChsbm9kZS5wb3NpdGlvblkgLSBjb3NlQkIueTEpIC8gY29zZUJCLmg7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IGJiLngxICsgcGN0WCAqIGJiLncsXG4gICAgICAgIHk6IGJiLnkxICsgcGN0WSAqIGJiLmhcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IGxub2RlLnBvc2l0aW9uWCxcbiAgICAgICAgeTogbG5vZGUucG9zaXRpb25ZXG4gICAgICB9O1xuICAgIH1cbiAgfSApO1xuXG4gIC8vIFRyaWdnZXIgbGF5b3V0UmVhZHkgb25seSBvbiBmaXJzdCBjYWxsXG4gIGlmKCB0cnVlICE9PSBsYXlvdXRJbmZvLnJlYWR5ICl7XG4gICAgLy8gcyA9ICdUcmlnZ2VyaW5nIGxheW91dHJlYWR5JztcbiAgICAvLyBsb2dEZWJ1ZyhzKTtcbiAgICBsYXlvdXRJbmZvLnJlYWR5ID0gdHJ1ZTtcbiAgICBsYXlvdXQub25lKCAnbGF5b3V0cmVhZHknLCBvcHRpb25zLnJlYWR5ICk7XG4gICAgbGF5b3V0LnRyaWdnZXIoIHsgdHlwZTogJ2xheW91dHJlYWR5JywgbGF5b3V0OiB0aGlzIH0gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAYnJpZWYgOiBMb2dzIGEgZGVidWcgbWVzc2FnZSBpbiBKUyBjb25zb2xlLCBpZiBERUJVRyBpcyBPTlxuICovXG4vLyB2YXIgbG9nRGVidWcgPSBmdW5jdGlvbih0ZXh0KSB7XG4vLyAgIGlmIChERUJVRykge1xuLy8gICAgIGNvbnNvbGUuZGVidWcodGV4dCk7XG4vLyAgIH1cbi8vIH07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29zZUxheW91dDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vLi4vdXRpbCcgKTtcbnZhciBtYXRoID0gcmVxdWlyZSggJy4uLy4uL21hdGgnICk7XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgZml0OiB0cnVlLCAvLyB3aGV0aGVyIHRvIGZpdCB0aGUgdmlld3BvcnQgdG8gdGhlIGdyYXBoXG4gIHBhZGRpbmc6IDMwLCAvLyBwYWRkaW5nIHVzZWQgb24gZml0XG4gIGJvdW5kaW5nQm94OiB1bmRlZmluZWQsIC8vIGNvbnN0cmFpbiBsYXlvdXQgYm91bmRzOyB7IHgxLCB5MSwgeDIsIHkyIH0gb3IgeyB4MSwgeTEsIHcsIGggfVxuICBhdm9pZE92ZXJsYXA6IHRydWUsIC8vIHByZXZlbnRzIG5vZGUgb3ZlcmxhcCwgbWF5IG92ZXJmbG93IGJvdW5kaW5nQm94IGlmIG5vdCBlbm91Z2ggc3BhY2VcbiAgYXZvaWRPdmVybGFwUGFkZGluZzogMTAsIC8vIGV4dHJhIHNwYWNpbmcgYXJvdW5kIG5vZGVzIHdoZW4gYXZvaWRPdmVybGFwOiB0cnVlXG4gIGNvbmRlbnNlOiBmYWxzZSwgLy8gdXNlcyBhbGwgYXZhaWxhYmxlIHNwYWNlIG9uIGZhbHNlLCB1c2VzIG1pbmltYWwgc3BhY2Ugb24gdHJ1ZVxuICByb3dzOiB1bmRlZmluZWQsIC8vIGZvcmNlIG51bSBvZiByb3dzIGluIHRoZSBncmlkXG4gIGNvbHM6IHVuZGVmaW5lZCwgLy8gZm9yY2UgbnVtIG9mIGNvbHVtbnMgaW4gdGhlIGdyaWRcbiAgcG9zaXRpb246IGZ1bmN0aW9uKCBub2RlICl7fSwgLy8gcmV0dXJucyB7IHJvdywgY29sIH0gZm9yIGVsZW1lbnRcbiAgc29ydDogdW5kZWZpbmVkLCAvLyBhIHNvcnRpbmcgZnVuY3Rpb24gdG8gb3JkZXIgdGhlIG5vZGVzOyBlLmcuIGZ1bmN0aW9uKGEsIGIpeyByZXR1cm4gYS5kYXRhKCd3ZWlnaHQnKSAtIGIuZGF0YSgnd2VpZ2h0JykgfVxuICBhbmltYXRlOiBmYWxzZSwgLy8gd2hldGhlciB0byB0cmFuc2l0aW9uIHRoZSBub2RlIHBvc2l0aW9uc1xuICBhbmltYXRpb25EdXJhdGlvbjogNTAwLCAvLyBkdXJhdGlvbiBvZiBhbmltYXRpb24gaW4gbXMgaWYgZW5hYmxlZFxuICBhbmltYXRpb25FYXNpbmc6IHVuZGVmaW5lZCwgLy8gZWFzaW5nIG9mIGFuaW1hdGlvbiBpZiBlbmFibGVkXG4gIHJlYWR5OiB1bmRlZmluZWQsIC8vIGNhbGxiYWNrIG9uIGxheW91dHJlYWR5XG4gIHN0b3A6IHVuZGVmaW5lZCAvLyBjYWxsYmFjayBvbiBsYXlvdXRzdG9wXG59O1xuXG5mdW5jdGlvbiBHcmlkTGF5b3V0KCBvcHRpb25zICl7XG4gIHRoaXMub3B0aW9ucyA9IHV0aWwuZXh0ZW5kKCB7fSwgZGVmYXVsdHMsIG9wdGlvbnMgKTtcbn1cblxuR3JpZExheW91dC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKXtcbiAgdmFyIHBhcmFtcyA9IHRoaXMub3B0aW9ucztcbiAgdmFyIG9wdGlvbnMgPSBwYXJhbXM7XG5cbiAgdmFyIGN5ID0gcGFyYW1zLmN5O1xuICB2YXIgZWxlcyA9IG9wdGlvbnMuZWxlcztcbiAgdmFyIG5vZGVzID0gZWxlcy5ub2RlcygpLm5vdCggJzpwYXJlbnQnICk7XG5cbiAgaWYoIG9wdGlvbnMuc29ydCApe1xuICAgIG5vZGVzID0gbm9kZXMuc29ydCggb3B0aW9ucy5zb3J0ICk7XG4gIH1cblxuICB2YXIgYmIgPSBtYXRoLm1ha2VCb3VuZGluZ0JveCggb3B0aW9ucy5ib3VuZGluZ0JveCA/IG9wdGlvbnMuYm91bmRpbmdCb3ggOiB7XG4gICAgeDE6IDAsIHkxOiAwLCB3OiBjeS53aWR0aCgpLCBoOiBjeS5oZWlnaHQoKVxuICB9ICk7XG5cbiAgaWYoIGJiLmggPT09IDAgfHwgYmIudyA9PT0gMCApe1xuICAgIG5vZGVzLmxheW91dFBvc2l0aW9ucyggdGhpcywgb3B0aW9ucywgZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiB7IHg6IGJiLngxLCB5OiBiYi55MSB9O1xuICAgIH0gKTtcblxuICB9IGVsc2Uge1xuXG4gICAgLy8gd2lkdGgvaGVpZ2h0ICogc3BsaXRzXjIgPSBjZWxscyB3aGVyZSBzcGxpdHMgaXMgbnVtYmVyIG9mIHRpbWVzIHRvIHNwbGl0IHdpZHRoXG4gICAgdmFyIGNlbGxzID0gbm9kZXMuc2l6ZSgpO1xuICAgIHZhciBzcGxpdHMgPSBNYXRoLnNxcnQoIGNlbGxzICogYmIuaCAvIGJiLncgKTtcbiAgICB2YXIgcm93cyA9IE1hdGgucm91bmQoIHNwbGl0cyApO1xuICAgIHZhciBjb2xzID0gTWF0aC5yb3VuZCggYmIudyAvIGJiLmggKiBzcGxpdHMgKTtcblxuICAgIHZhciBzbWFsbCA9IGZ1bmN0aW9uKCB2YWwgKXtcbiAgICAgIGlmKCB2YWwgPT0gbnVsbCApe1xuICAgICAgICByZXR1cm4gTWF0aC5taW4oIHJvd3MsIGNvbHMgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtaW4gPSBNYXRoLm1pbiggcm93cywgY29scyApO1xuICAgICAgICBpZiggbWluID09IHJvd3MgKXtcbiAgICAgICAgICByb3dzID0gdmFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbHMgPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGxhcmdlID0gZnVuY3Rpb24oIHZhbCApe1xuICAgICAgaWYoIHZhbCA9PSBudWxsICl7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCggcm93cywgY29scyApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1heCA9IE1hdGgubWF4KCByb3dzLCBjb2xzICk7XG4gICAgICAgIGlmKCBtYXggPT0gcm93cyApe1xuICAgICAgICAgIHJvd3MgPSB2YWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29scyA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgb1Jvd3MgPSBvcHRpb25zLnJvd3M7XG4gICAgdmFyIG9Db2xzID0gb3B0aW9ucy5jb2xzICE9IG51bGwgPyBvcHRpb25zLmNvbHMgOiBvcHRpb25zLmNvbHVtbnM7XG5cbiAgICAvLyBpZiByb3dzIG9yIGNvbHVtbnMgd2VyZSBzZXQgaW4gb3B0aW9ucywgdXNlIHRob3NlIHZhbHVlc1xuICAgIGlmKCBvUm93cyAhPSBudWxsICYmIG9Db2xzICE9IG51bGwgKXtcbiAgICAgIHJvd3MgPSBvUm93cztcbiAgICAgIGNvbHMgPSBvQ29scztcbiAgICB9IGVsc2UgaWYoIG9Sb3dzICE9IG51bGwgJiYgb0NvbHMgPT0gbnVsbCApe1xuICAgICAgcm93cyA9IG9Sb3dzO1xuICAgICAgY29scyA9IE1hdGguY2VpbCggY2VsbHMgLyByb3dzICk7XG4gICAgfSBlbHNlIGlmKCBvUm93cyA9PSBudWxsICYmIG9Db2xzICE9IG51bGwgKXtcbiAgICAgIGNvbHMgPSBvQ29scztcbiAgICAgIHJvd3MgPSBNYXRoLmNlaWwoIGNlbGxzIC8gY29scyApO1xuICAgIH1cblxuICAgIC8vIG90aGVyd2lzZSB1c2UgdGhlIGF1dG9tYXRpYyB2YWx1ZXMgYW5kIGFkanVzdCBhY2NvcmRpbmdseVxuXG4gICAgLy8gaWYgcm91bmRpbmcgd2FzIHVwLCBzZWUgaWYgd2UgY2FuIHJlZHVjZSByb3dzIG9yIGNvbHVtbnNcbiAgICBlbHNlIGlmKCBjb2xzICogcm93cyA+IGNlbGxzICl7XG4gICAgICB2YXIgc20gPSBzbWFsbCgpO1xuICAgICAgdmFyIGxnID0gbGFyZ2UoKTtcblxuICAgICAgLy8gcmVkdWNpbmcgdGhlIHNtYWxsIHNpZGUgdGFrZXMgYXdheSB0aGUgbW9zdCBjZWxscywgc28gdHJ5IGl0IGZpcnN0XG4gICAgICBpZiggKHNtIC0gMSkgKiBsZyA+PSBjZWxscyApe1xuICAgICAgICBzbWFsbCggc20gLSAxICk7XG4gICAgICB9IGVsc2UgaWYoIChsZyAtIDEpICogc20gPj0gY2VsbHMgKXtcbiAgICAgICAgbGFyZ2UoIGxnIC0gMSApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG5cbiAgICAgIC8vIGlmIHJvdW5kaW5nIHdhcyB0b28gbG93LCBhZGQgcm93cyBvciBjb2x1bW5zXG4gICAgICB3aGlsZSggY29scyAqIHJvd3MgPCBjZWxscyApe1xuICAgICAgICB2YXIgc20gPSBzbWFsbCgpO1xuICAgICAgICB2YXIgbGcgPSBsYXJnZSgpO1xuXG4gICAgICAgIC8vIHRyeSB0byBhZGQgdG8gbGFyZ2VyIHNpZGUgZmlyc3QgKGFkZHMgbGVzcyBpbiBtdWx0aXBsaWNhdGlvbilcbiAgICAgICAgaWYoIChsZyArIDEpICogc20gPj0gY2VsbHMgKXtcbiAgICAgICAgICBsYXJnZSggbGcgKyAxICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc21hbGwoIHNtICsgMSApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNlbGxXaWR0aCA9IGJiLncgLyBjb2xzO1xuICAgIHZhciBjZWxsSGVpZ2h0ID0gYmIuaCAvIHJvd3M7XG5cbiAgICBpZiggb3B0aW9ucy5jb25kZW5zZSApe1xuICAgICAgY2VsbFdpZHRoID0gMDtcbiAgICAgIGNlbGxIZWlnaHQgPSAwO1xuICAgIH1cblxuICAgIGlmKCBvcHRpb25zLmF2b2lkT3ZlcmxhcCApe1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzWyBpIF07XG4gICAgICAgIHZhciBwb3MgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uO1xuXG4gICAgICAgIGlmKCBwb3MueCA9PSBudWxsIHx8IHBvcy55ID09IG51bGwgKXsgLy8gZm9yIGJiXG4gICAgICAgICAgcG9zLnggPSAwO1xuICAgICAgICAgIHBvcy55ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuYmIgPSBub2RlLmJvdW5kaW5nQm94KCk7XG4gICAgICAgIHZhciBwID0gb3B0aW9ucy5hdm9pZE92ZXJsYXBQYWRkaW5nO1xuXG4gICAgICAgIHZhciB3ID0gbmJiLncgKyBwO1xuICAgICAgICB2YXIgaCA9IG5iYi5oICsgcDtcblxuICAgICAgICBjZWxsV2lkdGggPSBNYXRoLm1heCggY2VsbFdpZHRoLCB3ICk7XG4gICAgICAgIGNlbGxIZWlnaHQgPSBNYXRoLm1heCggY2VsbEhlaWdodCwgaCApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjZWxsVXNlZCA9IHt9OyAvLyBlLmcuICdjLTAtMicgPT4gdHJ1ZVxuXG4gICAgdmFyIHVzZWQgPSBmdW5jdGlvbiggcm93LCBjb2wgKXtcbiAgICAgIHJldHVybiBjZWxsVXNlZFsgJ2MtJyArIHJvdyArICctJyArIGNvbCBdID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH07XG5cbiAgICB2YXIgdXNlID0gZnVuY3Rpb24oIHJvdywgY29sICl7XG4gICAgICBjZWxsVXNlZFsgJ2MtJyArIHJvdyArICctJyArIGNvbCBdID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLy8gdG8ga2VlcCB0cmFjayBvZiBjdXJyZW50IGNlbGwgcG9zaXRpb25cbiAgICB2YXIgcm93ID0gMDtcbiAgICB2YXIgY29sID0gMDtcbiAgICB2YXIgbW92ZVRvTmV4dENlbGwgPSBmdW5jdGlvbigpe1xuICAgICAgY29sKys7XG4gICAgICBpZiggY29sID49IGNvbHMgKXtcbiAgICAgICAgY29sID0gMDtcbiAgICAgICAgcm93Kys7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIGdldCBhIGNhY2hlIG9mIGFsbCB0aGUgbWFudWFsIHBvc2l0aW9uc1xuICAgIHZhciBpZDJtYW5Qb3MgPSB7fTtcbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrICl7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVzWyBpIF07XG4gICAgICB2YXIgcmNQb3MgPSBvcHRpb25zLnBvc2l0aW9uKCBub2RlICk7XG5cbiAgICAgIGlmKCByY1BvcyAmJiAocmNQb3Mucm93ICE9PSB1bmRlZmluZWQgfHwgcmNQb3MuY29sICE9PSB1bmRlZmluZWQpICl7IC8vIG11c3QgaGF2ZSBhdCBsZWFzdCByb3cgb3IgY29sIGRlZidkXG4gICAgICAgIHZhciBwb3MgPSB7XG4gICAgICAgICAgcm93OiByY1Bvcy5yb3csXG4gICAgICAgICAgY29sOiByY1Bvcy5jb2xcbiAgICAgICAgfTtcblxuICAgICAgICBpZiggcG9zLmNvbCA9PT0gdW5kZWZpbmVkICl7IC8vIGZpbmQgdW51c2VkIGNvbFxuICAgICAgICAgIHBvcy5jb2wgPSAwO1xuXG4gICAgICAgICAgd2hpbGUoIHVzZWQoIHBvcy5yb3csIHBvcy5jb2wgKSApe1xuICAgICAgICAgICAgcG9zLmNvbCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmKCBwb3Mucm93ID09PSB1bmRlZmluZWQgKXsgLy8gZmluZCB1bnVzZWQgcm93XG4gICAgICAgICAgcG9zLnJvdyA9IDA7XG5cbiAgICAgICAgICB3aGlsZSggdXNlZCggcG9zLnJvdywgcG9zLmNvbCApICl7XG4gICAgICAgICAgICBwb3Mucm93Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWQybWFuUG9zWyBub2RlLmlkKCkgXSA9IHBvcztcbiAgICAgICAgdXNlKCBwb3Mucm93LCBwb3MuY29sICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGdldFBvcyA9IGZ1bmN0aW9uKCBpLCBlbGVtZW50ICl7XG4gICAgICB2YXIgeCwgeTtcblxuICAgICAgaWYoIGVsZW1lbnQubG9ja2VkKCkgfHwgZWxlbWVudC5pc1BhcmVudCgpICl7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gc2VlIGlmIHdlIGhhdmUgYSBtYW51YWwgcG9zaXRpb24gc2V0XG4gICAgICB2YXIgcmNQb3MgPSBpZDJtYW5Qb3NbIGVsZW1lbnQuaWQoKSBdO1xuICAgICAgaWYoIHJjUG9zICl7XG4gICAgICAgIHggPSByY1Bvcy5jb2wgKiBjZWxsV2lkdGggKyBjZWxsV2lkdGggLyAyICsgYmIueDE7XG4gICAgICAgIHkgPSByY1Bvcy5yb3cgKiBjZWxsSGVpZ2h0ICsgY2VsbEhlaWdodCAvIDIgKyBiYi55MTtcblxuICAgICAgfSBlbHNlIHsgLy8gb3RoZXJ3aXNlIHNldCBhdXRvbWF0aWNhbGx5XG5cbiAgICAgICAgd2hpbGUoIHVzZWQoIHJvdywgY29sICkgKXtcbiAgICAgICAgICBtb3ZlVG9OZXh0Q2VsbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgeCA9IGNvbCAqIGNlbGxXaWR0aCArIGNlbGxXaWR0aCAvIDIgKyBiYi54MTtcbiAgICAgICAgeSA9IHJvdyAqIGNlbGxIZWlnaHQgKyBjZWxsSGVpZ2h0IC8gMiArIGJiLnkxO1xuICAgICAgICB1c2UoIHJvdywgY29sICk7XG5cbiAgICAgICAgbW92ZVRvTmV4dENlbGwoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgeDogeCwgeTogeSB9O1xuXG4gICAgfTtcblxuICAgIG5vZGVzLmxheW91dFBvc2l0aW9ucyggdGhpcywgb3B0aW9ucywgZ2V0UG9zICk7XG4gIH1cblxuICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBHcmlkTGF5b3V0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgeyBuYW1lOiAnYnJlYWR0aGZpcnN0JywgaW1wbDogcmVxdWlyZSggJy4vYnJlYWR0aGZpcnN0JyApIH0sXG4gIHsgbmFtZTogJ2NpcmNsZScsIGltcGw6IHJlcXVpcmUoICcuL2NpcmNsZScgKSB9LFxuICB7IG5hbWU6ICdjb25jZW50cmljJyxpbXBsOiByZXF1aXJlKCAnLi9jb25jZW50cmljJyApIH0sXG4gIHsgbmFtZTogJ2Nvc2UnLCBpbXBsOiByZXF1aXJlKCAnLi9jb3NlJyApIH0sXG4gIHsgbmFtZTogJ2dyaWQnLCBpbXBsOiByZXF1aXJlKCAnLi9ncmlkJyApIH0sXG4gIHsgbmFtZTogJ251bGwnLCBpbXBsOiByZXF1aXJlKCAnLi9udWxsJyApIH0sXG4gIHsgbmFtZTogJ3ByZXNldCcsIGltcGw6IHJlcXVpcmUoICcuL3ByZXNldCcgKSB9LFxuICB7IG5hbWU6ICdyYW5kb20nLCBpbXBsOiByZXF1aXJlKCAnLi9yYW5kb20nICkgfVxuXTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vLi4vdXRpbCcgKTtcblxuLy8gZGVmYXVsdCBsYXlvdXQgb3B0aW9uc1xudmFyIGRlZmF1bHRzID0ge1xuICByZWFkeTogZnVuY3Rpb24oKXt9LCAvLyBvbiBsYXlvdXRyZWFkeVxuICBzdG9wOiBmdW5jdGlvbigpe30gLy8gb24gbGF5b3V0c3RvcFxufTtcblxuLy8gY29uc3RydWN0b3Jcbi8vIG9wdGlvbnMgOiBvYmplY3QgY29udGFpbmluZyBsYXlvdXQgb3B0aW9uc1xuZnVuY3Rpb24gTnVsbExheW91dCggb3B0aW9ucyApe1xuICB0aGlzLm9wdGlvbnMgPSB1dGlsLmV4dGVuZCgge30sIGRlZmF1bHRzLCBvcHRpb25zICk7XG59XG5cbi8vIHJ1bnMgdGhlIGxheW91dFxuTnVsbExheW91dC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKXtcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gIHZhciBlbGVzID0gb3B0aW9ucy5lbGVzOyAvLyBlbGVtZW50cyB0byBjb25zaWRlciBpbiB0aGUgbGF5b3V0XG4gIHZhciBsYXlvdXQgPSB0aGlzO1xuXG4gIC8vIGN5IGlzIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIGZvciB1cyBpbiB0aGUgY29uc3RydWN0b3JcbiAgdmFyIGN5ID0gb3B0aW9ucy5jeTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cbiAgbGF5b3V0LnRyaWdnZXIoICdsYXlvdXRzdGFydCcgKTtcblxuICAvLyBwdXRzIGFsbCBub2RlcyBhdCAoMCwgMClcbiAgZWxlcy5ub2RlcygpLnBvc2l0aW9ucyggZnVuY3Rpb24oKXtcbiAgICByZXR1cm4ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICB9ICk7XG5cbiAgLy8gdHJpZ2dlciBsYXlvdXRyZWFkeSB3aGVuIGVhY2ggbm9kZSBoYXMgaGFkIGl0cyBwb3NpdGlvbiBzZXQgYXQgbGVhc3Qgb25jZVxuICBsYXlvdXQub25lKCAnbGF5b3V0cmVhZHknLCBvcHRpb25zLnJlYWR5ICk7XG4gIGxheW91dC50cmlnZ2VyKCAnbGF5b3V0cmVhZHknICk7XG5cbiAgLy8gdHJpZ2dlciBsYXlvdXRzdG9wIHdoZW4gdGhlIGxheW91dCBzdG9wcyAoZS5nLiBmaW5pc2hlcylcbiAgbGF5b3V0Lm9uZSggJ2xheW91dHN0b3AnLCBvcHRpb25zLnN0b3AgKTtcbiAgbGF5b3V0LnRyaWdnZXIoICdsYXlvdXRzdG9wJyApO1xuXG4gIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xufTtcblxuLy8gY2FsbGVkIG9uIGNvbnRpbnVvdXMgbGF5b3V0cyB0byBzdG9wIHRoZW0gYmVmb3JlIHRoZXkgZmluaXNoXG5OdWxsTGF5b3V0LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE51bGxMYXlvdXQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSggJy4uLy4uL3V0aWwnICk7XG52YXIgaXMgPSByZXF1aXJlKCAnLi4vLi4vaXMnICk7XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgcG9zaXRpb25zOiB1bmRlZmluZWQsIC8vIG1hcCBvZiAobm9kZSBpZCkgPT4gKHBvc2l0aW9uIG9iaik7IG9yIGZ1bmN0aW9uKG5vZGUpeyByZXR1cm4gc29tUG9zOyB9XG4gIHpvb206IHVuZGVmaW5lZCwgLy8gdGhlIHpvb20gbGV2ZWwgdG8gc2V0IChwcm9iIHdhbnQgZml0ID0gZmFsc2UgaWYgc2V0KVxuICBwYW46IHVuZGVmaW5lZCwgLy8gdGhlIHBhbiBsZXZlbCB0byBzZXQgKHByb2Igd2FudCBmaXQgPSBmYWxzZSBpZiBzZXQpXG4gIGZpdDogdHJ1ZSwgLy8gd2hldGhlciB0byBmaXQgdG8gdmlld3BvcnRcbiAgcGFkZGluZzogMzAsIC8vIHBhZGRpbmcgb24gZml0XG4gIGFuaW1hdGU6IGZhbHNlLCAvLyB3aGV0aGVyIHRvIHRyYW5zaXRpb24gdGhlIG5vZGUgcG9zaXRpb25zXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiA1MDAsIC8vIGR1cmF0aW9uIG9mIGFuaW1hdGlvbiBpbiBtcyBpZiBlbmFibGVkXG4gIGFuaW1hdGlvbkVhc2luZzogdW5kZWZpbmVkLCAvLyBlYXNpbmcgb2YgYW5pbWF0aW9uIGlmIGVuYWJsZWRcbiAgcmVhZHk6IHVuZGVmaW5lZCwgLy8gY2FsbGJhY2sgb24gbGF5b3V0cmVhZHlcbiAgc3RvcDogdW5kZWZpbmVkIC8vIGNhbGxiYWNrIG9uIGxheW91dHN0b3Bcbn07XG5cbmZ1bmN0aW9uIFByZXNldExheW91dCggb3B0aW9ucyApe1xuICB0aGlzLm9wdGlvbnMgPSB1dGlsLmV4dGVuZCgge30sIGRlZmF1bHRzLCBvcHRpb25zICk7XG59XG5cblByZXNldExheW91dC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKXtcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gIHZhciBlbGVzID0gb3B0aW9ucy5lbGVzO1xuXG4gIHZhciBub2RlcyA9IGVsZXMubm9kZXMoKTtcbiAgdmFyIHBvc0lzRm4gPSBpcy5mbiggb3B0aW9ucy5wb3NpdGlvbnMgKTtcblxuICBmdW5jdGlvbiBnZXRQb3NpdGlvbiggbm9kZSApe1xuICAgIGlmKCBvcHRpb25zLnBvc2l0aW9ucyA9PSBudWxsICl7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiggcG9zSXNGbiApe1xuICAgICAgcmV0dXJuIG9wdGlvbnMucG9zaXRpb25zLmFwcGx5KCBub2RlLCBbIG5vZGUgXSApO1xuICAgIH1cblxuICAgIHZhciBwb3MgPSBvcHRpb25zLnBvc2l0aW9uc1sgbm9kZS5fcHJpdmF0ZS5kYXRhLmlkIF07XG5cbiAgICBpZiggcG9zID09IG51bGwgKXtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBwb3M7XG4gIH1cblxuICBub2Rlcy5sYXlvdXRQb3NpdGlvbnMoIHRoaXMsIG9wdGlvbnMsIGZ1bmN0aW9uKCBpLCBub2RlICl7XG4gICAgdmFyIHBvc2l0aW9uID0gZ2V0UG9zaXRpb24oIG5vZGUgKTtcblxuICAgIGlmKCBub2RlLmxvY2tlZCgpIHx8IHBvc2l0aW9uID09IG51bGwgKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH0gKTtcblxuICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUHJlc2V0TGF5b3V0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoICcuLi8uLi91dGlsJyApO1xudmFyIG1hdGggPSByZXF1aXJlKCAnLi4vLi4vbWF0aCcgKTtcblxudmFyIGRlZmF1bHRzID0ge1xuICBmaXQ6IHRydWUsIC8vIHdoZXRoZXIgdG8gZml0IHRvIHZpZXdwb3J0XG4gIHBhZGRpbmc6IDMwLCAvLyBmaXQgcGFkZGluZ1xuICBib3VuZGluZ0JveDogdW5kZWZpbmVkLCAvLyBjb25zdHJhaW4gbGF5b3V0IGJvdW5kczsgeyB4MSwgeTEsIHgyLCB5MiB9IG9yIHsgeDEsIHkxLCB3LCBoIH1cbiAgYW5pbWF0ZTogZmFsc2UsIC8vIHdoZXRoZXIgdG8gdHJhbnNpdGlvbiB0aGUgbm9kZSBwb3NpdGlvbnNcbiAgYW5pbWF0aW9uRHVyYXRpb246IDUwMCwgLy8gZHVyYXRpb24gb2YgYW5pbWF0aW9uIGluIG1zIGlmIGVuYWJsZWRcbiAgYW5pbWF0aW9uRWFzaW5nOiB1bmRlZmluZWQsIC8vIGVhc2luZyBvZiBhbmltYXRpb24gaWYgZW5hYmxlZFxuICByZWFkeTogdW5kZWZpbmVkLCAvLyBjYWxsYmFjayBvbiBsYXlvdXRyZWFkeVxuICBzdG9wOiB1bmRlZmluZWQgLy8gY2FsbGJhY2sgb24gbGF5b3V0c3RvcFxufTtcblxuZnVuY3Rpb24gUmFuZG9tTGF5b3V0KCBvcHRpb25zICl7XG4gIHRoaXMub3B0aW9ucyA9IHV0aWwuZXh0ZW5kKCB7fSwgZGVmYXVsdHMsIG9wdGlvbnMgKTtcbn1cblxuUmFuZG9tTGF5b3V0LnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbigpe1xuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgdmFyIGN5ID0gb3B0aW9ucy5jeTtcbiAgdmFyIGVsZXMgPSBvcHRpb25zLmVsZXM7XG4gIHZhciBub2RlcyA9IGVsZXMubm9kZXMoKS5ub3QoICc6cGFyZW50JyApO1xuXG4gIHZhciBiYiA9IG1hdGgubWFrZUJvdW5kaW5nQm94KCBvcHRpb25zLmJvdW5kaW5nQm94ID8gb3B0aW9ucy5ib3VuZGluZ0JveCA6IHtcbiAgICB4MTogMCwgeTE6IDAsIHc6IGN5LndpZHRoKCksIGg6IGN5LmhlaWdodCgpXG4gIH0gKTtcblxuICB2YXIgZ2V0UG9zID0gZnVuY3Rpb24oIGksIG5vZGUgKXtcbiAgICByZXR1cm4ge1xuICAgICAgeDogYmIueDEgKyBNYXRoLnJvdW5kKCBNYXRoLnJhbmRvbSgpICogYmIudyApLFxuICAgICAgeTogYmIueTEgKyBNYXRoLnJvdW5kKCBNYXRoLnJhbmRvbSgpICogYmIuaCApXG4gICAgfTtcbiAgfTtcblxuICBub2Rlcy5sYXlvdXRQb3NpdGlvbnMoIHRoaXMsIG9wdGlvbnMsIGdldFBvcyApO1xuXG4gIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSYW5kb21MYXlvdXQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtYXRoID0gcmVxdWlyZSggJy4uLy4uLy4uL21hdGgnICk7XG52YXIgaXMgPSByZXF1aXJlKCAnLi4vLi4vLi4vaXMnICk7XG52YXIgdXRpbCA9IHJlcXVpcmUoICcuLi8uLi8uLi91dGlsJyApO1xudmFyIHNiZ24gPSByZXF1aXJlKCAnLi4vLi4vLi4vc2JnbicgKTsgXG5cbnZhciBCUnAgPSB7fTtcblxuQlJwLmFycm93U2hhcGVzID0ge307XG5cbkJScC5hcnJvd1NoYXBlV2lkdGggPSAwLjM7XG5cbkJScC5yZWdpc3RlckFycm93U2hhcGVzID0gZnVuY3Rpb24oKXtcbiAgdmFyIGFycm93U2hhcGVzID0gdGhpcy5hcnJvd1NoYXBlcyA9IEJScC5hcnJvd1NoYXBlcztcbiAgdmFyIHJlbmRlcmVyID0gdGhpcztcblxuICAvLyBDb250cmFjdCBmb3IgYXJyb3cgc2hhcGVzOlxuICAvLyAwLCAwIGlzIGFycm93IHRpcFxuICAvLyAoMCwgMSkgaXMgZGlyZWN0aW9uIHRvd2FyZHMgbm9kZVxuICAvLyAoMSwgMCkgaXMgcmlnaHRcbiAgLy9cbiAgLy8gZnVuY3Rpb25hbCBhcGk6XG4gIC8vIGNvbGxpZGU6IGNoZWNrIHgsIHkgaW4gc2hhcGVcbiAgLy8gcm91Z2hDb2xsaWRlOiBjYWxsZWQgYmVmb3JlIGNvbGxpZGUsIG5vIGZhbHNlIG5lZ2F0aXZlc1xuICAvLyBkcmF3OiBkcmF3XG4gIC8vIHNwYWNpbmc6IGRpc3QoYXJyb3dUaXAsIG5vZGVCb3VuZGFyeSlcbiAgLy8gZ2FwOiBkaXN0KGVkZ2VUaXAsIG5vZGVCb3VuZGFyeSksIGVkZ2VUaXAgbWF5ICE9IGFycm93VGlwXG5cbiAgdmFyIGJiQ29sbGlkZSA9IGZ1bmN0aW9uKCB4LCB5LCBzaXplLCBhbmdsZSwgdHJhbnNsYXRpb24sIHBhZGRpbmcgKXtcbiAgICB2YXIgeDEgPSB0cmFuc2xhdGlvbi54IC0gc2l6ZSAvIDIgLSBwYWRkaW5nO1xuICAgIHZhciB4MiA9IHRyYW5zbGF0aW9uLnggKyBzaXplIC8gMiArIHBhZGRpbmc7XG4gICAgdmFyIHkxID0gdHJhbnNsYXRpb24ueSAtIHNpemUgLyAyIC0gcGFkZGluZztcbiAgICB2YXIgeTIgPSB0cmFuc2xhdGlvbi55ICsgc2l6ZSAvIDIgKyBwYWRkaW5nO1xuXG4gICAgdmFyIGluc2lkZSA9ICh4MSA8PSB4ICYmIHggPD0geDIpICYmICh5MSA8PSB5ICYmIHkgPD0geTIpO1xuXG4gICAgcmV0dXJuIGluc2lkZTtcbiAgfTtcblxuICB2YXIgdHJhbnNmb3JtID0gZnVuY3Rpb24oIHgsIHksIHNpemUsIGFuZ2xlLCB0cmFuc2xhdGlvbiApe1xuICAgIHZhciB4Um90YXRlZCA9IHggKiBNYXRoLmNvcyggYW5nbGUgKSAtIHkgKiBNYXRoLnNpbiggYW5nbGUgKTtcbiAgICB2YXIgeVJvdGF0ZWQgPSB4ICogTWF0aC5zaW4oIGFuZ2xlICkgKyB5ICogTWF0aC5jb3MoIGFuZ2xlICk7XG5cbiAgICB2YXIgeFNjYWxlZCA9IHhSb3RhdGVkICogc2l6ZTtcbiAgICB2YXIgeVNjYWxlZCA9IHlSb3RhdGVkICogc2l6ZTtcblxuICAgIHZhciB4VHJhbnNsYXRlZCA9IHhTY2FsZWQgKyB0cmFuc2xhdGlvbi54O1xuICAgIHZhciB5VHJhbnNsYXRlZCA9IHlTY2FsZWQgKyB0cmFuc2xhdGlvbi55O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHhUcmFuc2xhdGVkLFxuICAgICAgeTogeVRyYW5zbGF0ZWRcbiAgICB9O1xuICB9O1xuXG4gIHZhciB0cmFuc2Zvcm1Qb2ludHMgPSBmdW5jdGlvbiggcHRzLCBzaXplLCBhbmdsZSwgdHJhbnNsYXRpb24gKXtcbiAgICB2YXIgcmV0UHRzID0gW107XG5cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IHB0cy5sZW5ndGg7IGkgKz0gMiApe1xuICAgICAgdmFyIHggPSBwdHNbIGkgXTtcbiAgICAgIHZhciB5ID0gcHRzWyBpICsgMV07XG5cbiAgICAgIHJldFB0cy5wdXNoKCB0cmFuc2Zvcm0oIHgsIHksIHNpemUsIGFuZ2xlLCB0cmFuc2xhdGlvbiApICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldFB0cztcbiAgfTtcblxuICB2YXIgcG9pbnRzVG9BcnIgPSBmdW5jdGlvbiggcHRzICl7XG4gICAgdmFyIHJldCA9IFtdO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBwdHMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBwID0gcHRzWyBpIF07XG5cbiAgICAgIHJldC5wdXNoKCBwLngsIHAueSApO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgdmFyIGRlZmluZUFycm93U2hhcGUgPSBmdW5jdGlvbiggbmFtZSwgZGVmbiApe1xuICAgIGlmKCBpcy5zdHJpbmcoIGRlZm4gKSApe1xuICAgICAgZGVmbiA9IGFycm93U2hhcGVzWyBkZWZuIF07XG4gICAgfVxuXG4gICAgYXJyb3dTaGFwZXNbIG5hbWUgXSA9IHV0aWwuZXh0ZW5kKCB7XG4gICAgICBuYW1lOiBuYW1lLFxuXG4gICAgICBwb2ludHM6IFtcbiAgICAgICAgLTAuMTUsIC0wLjMsXG4gICAgICAgIDAuMTUsIC0wLjMsXG4gICAgICAgIDAuMTUsIDAuMyxcbiAgICAgICAgLTAuMTUsIDAuM1xuICAgICAgXSxcblxuICAgICAgY29sbGlkZTogZnVuY3Rpb24oIHgsIHksIHNpemUsIGFuZ2xlLCB0cmFuc2xhdGlvbiwgcGFkZGluZyApe1xuICAgICAgICB2YXIgcG9pbnRzID0gcG9pbnRzVG9BcnIoIHRyYW5zZm9ybVBvaW50cyggdGhpcy5wb2ludHMsIHNpemUgKyAyICogcGFkZGluZywgYW5nbGUsIHRyYW5zbGF0aW9uICkgKTtcbiAgICAgICAgdmFyIGluc2lkZSA9IG1hdGgucG9pbnRJbnNpZGVQb2x5Z29uUG9pbnRzKCB4LCB5LCBwb2ludHMgKTtcblxuICAgICAgICByZXR1cm4gaW5zaWRlO1xuICAgICAgfSxcblxuICAgICAgcm91Z2hDb2xsaWRlOiBiYkNvbGxpZGUsXG5cbiAgICAgIGRyYXc6IGZ1bmN0aW9uKCBjb250ZXh0LCBzaXplLCBhbmdsZSwgdHJhbnNsYXRpb24gKXtcbiAgICAgICAgdmFyIHBvaW50cyA9IHRyYW5zZm9ybVBvaW50cyggdGhpcy5wb2ludHMsIHNpemUsIGFuZ2xlLCB0cmFuc2xhdGlvbiApO1xuXG4gICAgICAgIHJlbmRlcmVyLmFycm93U2hhcGVJbXBsKCAncG9seWdvbicgKSggY29udGV4dCwgcG9pbnRzICk7XG4gICAgICB9LFxuXG4gICAgICBzcGFjaW5nOiBmdW5jdGlvbiggZWRnZSApe1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0sXG5cbiAgICAgIGdhcDogZnVuY3Rpb24oIGVkZ2UgKXtcbiAgICAgICAgcmV0dXJuIGVkZ2UucHN0eWxlKCAnd2lkdGgnICkucGZWYWx1ZSAqIDI7XG4gICAgICB9XG4gICAgfSwgZGVmbiApO1xuICB9O1xuXG4gIGRlZmluZUFycm93U2hhcGUoICdub25lJywge1xuICAgIGNvbGxpZGU6IHV0aWwuZmFsc2lmeSxcblxuICAgIHJvdWdoQ29sbGlkZTogdXRpbC5mYWxzaWZ5LFxuXG4gICAgZHJhdzogdXRpbC5ub29wLFxuXG4gICAgc3BhY2luZzogdXRpbC56ZXJvaWZ5LFxuXG4gICAgZ2FwOiB1dGlsLnplcm9pZnlcbiAgfSApO1xuXG4gIGRlZmluZUFycm93U2hhcGUoICd0cmlhbmdsZScsIHtcbiAgICBwb2ludHM6IFtcbiAgICAgIC0wLjE1LCAtMC4zLFxuICAgICAgMCwgMCxcbiAgICAgIDAuMTUsIC0wLjNcbiAgICBdXG4gIH0gKTtcblxuICBkZWZpbmVBcnJvd1NoYXBlKCAnYXJyb3cnLCAndHJpYW5nbGUnICk7XG5cbiAgZGVmaW5lQXJyb3dTaGFwZSggJ3RyaWFuZ2xlLWJhY2tjdXJ2ZScsIHtcbiAgICBwb2ludHM6IGFycm93U2hhcGVzWyAndHJpYW5nbGUnIF0ucG9pbnRzLFxuXG4gICAgY29udHJvbFBvaW50OiBbIDAsIC0wLjE1IF0sXG5cbiAgICByb3VnaENvbGxpZGU6IGJiQ29sbGlkZSxcblxuICAgIGRyYXc6IGZ1bmN0aW9uKCBjb250ZXh0LCBzaXplLCBhbmdsZSwgdHJhbnNsYXRpb24gKXtcbiAgICAgIHZhciBwdHNUcmFucyA9IHRyYW5zZm9ybVBvaW50cyggdGhpcy5wb2ludHMsIHNpemUsIGFuZ2xlLCB0cmFuc2xhdGlvbiApO1xuICAgICAgdmFyIGN0cmxQdCA9IHRoaXMuY29udHJvbFBvaW50O1xuICAgICAgdmFyIGN0cmxQdFRyYW5zID0gdHJhbnNmb3JtKCBjdHJsUHRbMF0sIGN0cmxQdFsxXSwgc2l6ZSwgYW5nbGUsIHRyYW5zbGF0aW9uICk7XG5cbiAgICAgIHJlbmRlcmVyLmFycm93U2hhcGVJbXBsKCB0aGlzLm5hbWUgKSggY29udGV4dCwgcHRzVHJhbnMsIGN0cmxQdFRyYW5zICk7XG4gICAgfSxcblxuICAgIGdhcDogZnVuY3Rpb24oIGVkZ2UgKXtcbiAgICAgIHJldHVybiBlZGdlLnBzdHlsZSggJ3dpZHRoJyApLnBmVmFsdWU7XG4gICAgfVxuICB9ICk7XG5cblxuICBkZWZpbmVBcnJvd1NoYXBlKCAndHJpYW5nbGUtdGVlJywge1xuICAgIHBvaW50czogW1xuICAgICAgLTAuMTUsIC0wLjMsXG4gICAgICAwLCAwLFxuICAgICAgMC4xNSwgLTAuMyxcbiAgICAgIC0wLjE1LCAtMC4zXG4gICAgXSxcblxuICAgIHBvaW50c1RlZTogW1xuICAgICAgLTAuMTUsIC0wLjQsXG4gICAgICAtMC4xNSwgLTAuNSxcbiAgICAgIDAuMTUsIC0wLjUsXG4gICAgICAwLjE1LCAtMC40XG4gICAgXSxcblxuICAgIGNvbGxpZGU6IGZ1bmN0aW9uKCB4LCB5LCBzaXplLCBhbmdsZSwgdHJhbnNsYXRpb24sIHBhZGRpbmcgKXtcbiAgICAgIHZhciB0cmlQdHMgPSBwb2ludHNUb0FyciggdHJhbnNmb3JtUG9pbnRzKCB0aGlzLnBvaW50cywgc2l6ZSArIDIgKiBwYWRkaW5nLCBhbmdsZSwgdHJhbnNsYXRpb24gKSApO1xuICAgICAgdmFyIHRlZVB0cyA9IHBvaW50c1RvQXJyKCB0cmFuc2Zvcm1Qb2ludHMoIHRoaXMucG9pbnRzVGVlLCBzaXplICsgMiAqIHBhZGRpbmcsIGFuZ2xlLCB0cmFuc2xhdGlvbiApICk7XG5cbiAgICAgIHZhciBpbnNpZGUgPSBtYXRoLnBvaW50SW5zaWRlUG9seWdvblBvaW50cyggeCwgeSwgdHJpUHRzICkgfHwgbWF0aC5wb2ludEluc2lkZVBvbHlnb25Qb2ludHMoIHgsIHksIHRlZVB0cyApO1xuXG4gICAgICByZXR1cm4gaW5zaWRlO1xuICAgIH0sXG5cbiAgICBkcmF3OiBmdW5jdGlvbiggY29udGV4dCwgc2l6ZSwgYW5nbGUsIHRyYW5zbGF0aW9uICl7XG4gICAgICB2YXIgdHJpUHRzID0gdHJhbnNmb3JtUG9pbnRzKCB0aGlzLnBvaW50cywgc2l6ZSwgYW5nbGUsIHRyYW5zbGF0aW9uICk7XG4gICAgICB2YXIgdGVlUHRzID0gdHJhbnNmb3JtUG9pbnRzKCB0aGlzLnBvaW50c1RlZSwgc2l6ZSwgYW5nbGUsIHRyYW5zbGF0aW9uICk7XG5cbiAgICAgIHJlbmRlcmVyLmFycm93U2hhcGVJbXBsKCB0aGlzLm5hbWUgKSggY29udGV4dCwgdHJpUHRzLCB0ZWVQdHMgKTtcbiAgICB9XG4gIH0gKTtcblxuICBkZWZpbmVBcnJvd1NoYXBlKCAndmVlJywge1xuICAgIHBvaW50czogW1xuICAgICAgLTAuMTUsIC0wLjMsXG4gICAgICAwLCAwLFxuICAgICAgMC4xNSwgLTAuMyxcbiAgICAgIDAsIC0wLjE1XG4gICAgXSxcblxuICAgIGdhcDogZnVuY3Rpb24oIGVkZ2UgKXtcbiAgICAgIHJldHVybiBlZGdlLnBzdHlsZSggJ3dpZHRoJyApLnBmVmFsdWU7XG4gICAgfVxuICB9ICk7XG5cbiAgZGVmaW5lQXJyb3dTaGFwZSggJ2NpcmNsZScsIHtcbiAgICByYWRpdXM6IDAuMTUsXG5cbiAgICBjb2xsaWRlOiBmdW5jdGlvbiggeCwgeSwgc2l6ZSwgYW5nbGUsIHRyYW5zbGF0aW9uLCBwYWRkaW5nICl7XG4gICAgICB2YXIgdCA9IHRyYW5zbGF0aW9uO1xuICAgICAgdmFyIGluc2lkZSA9ICggTWF0aC5wb3coIHQueCAtIHgsIDIgKSArIE1hdGgucG93KCB0LnkgLSB5LCAyICkgPD0gTWF0aC5wb3coIChzaXplICsgMiAqIHBhZGRpbmcpICogdGhpcy5yYWRpdXMsIDIgKSApO1xuXG4gICAgICByZXR1cm4gaW5zaWRlO1xuICAgIH0sXG5cbiAgICBkcmF3OiBmdW5jdGlvbiggY29udGV4dCwgc2l6ZSwgYW5nbGUsIHRyYW5zbGF0aW9uICl7XG4gICAgICByZW5kZXJlci5hcnJvd1NoYXBlSW1wbCggdGhpcy5uYW1lICkoIGNvbnRleHQsIHRyYW5zbGF0aW9uLngsIHRyYW5zbGF0aW9uLnksIHRoaXMucmFkaXVzICogc2l6ZSApO1xuICAgIH0sXG5cbiAgICBzcGFjaW5nOiBmdW5jdGlvbiggZWRnZSApe1xuICAgICAgcmV0dXJuIHJlbmRlcmVyLmdldEFycm93V2lkdGgoIGVkZ2UucHN0eWxlKCAnd2lkdGgnICkucGZWYWx1ZSApXG4gICAgICAgICogdGhpcy5yYWRpdXM7XG4gICAgfVxuICB9ICk7XG5cbiAgZGVmaW5lQXJyb3dTaGFwZSggJ2luaGliaXRvcicsIHtcbiAgICBwb2ludHM6IFtcbiAgICAgIC0wLjE1LCAwLFxuICAgICAgLTAuMTUsIC0wLjEsXG4gICAgICAwLjE1LCAtMC4xLFxuICAgICAgMC4xNSwgMFxuICAgIF0sXG5cbiAgICBzcGFjaW5nOiBmdW5jdGlvbiggZWRnZSApe1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSxcblxuICAgIGdhcDogZnVuY3Rpb24oIGVkZ2UgKXtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfSApO1xuXG4gIGRlZmluZUFycm93U2hhcGUoICd0ZWUnLCAnaW5oaWJpdG9yJyApO1xuXG4gIGRlZmluZUFycm93U2hhcGUoICdzcXVhcmUnLCB7XG4gICAgcG9pbnRzOiBbXG4gICAgICAtMC4xNSwgMC4wMCxcbiAgICAgIDAuMTUsIDAuMDAsXG4gICAgICAwLjE1LCAtMC4zLFxuICAgICAgLTAuMTUsIC0wLjNcbiAgICBdXG4gIH0gKTtcblxuICBkZWZpbmVBcnJvd1NoYXBlKCAnZGlhbW9uZCcsIHtcbiAgICBwb2ludHM6IFtcbiAgICAgIC0wLjE1LCAtMC4xNSxcbiAgICAgIDAsIC0wLjMsXG4gICAgICAwLjE1LCAtMC4xNSxcbiAgICAgIDAsIDBcbiAgICBdLFxuXG4gICAgZ2FwOiBmdW5jdGlvbiggZWRnZSApe1xuICAgICAgcmV0dXJuIGVkZ2UucHN0eWxlKCAnd2lkdGgnICkucGZWYWx1ZTtcbiAgICB9XG4gIH0gKTtcblxuICBzYmduLnJlZ2lzdGVyU2JnbkFycm93U2hhcGVzKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJScDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG1hdGggPSByZXF1aXJlKCAnLi4vLi4vLi4vbWF0aCcgKTtcbnZhciBpcyA9IHJlcXVpcmUoICcuLi8uLi8uLi9pcycgKTtcbnZhciB1dGlsID0gcmVxdWlyZSggJy4uLy4uLy4uL3V0aWwnICk7XG52YXIgekluZGV4U29ydCA9IHJlcXVpcmUoICcuLi8uLi8uLi9jb2xsZWN0aW9uL3pzb3J0JyApO1xudmFyIHNiZ24gPSByZXF1aXJlKCAnLi4vLi4vLi4vc2JnbicgKTtcblxudmFyIEJScCA9IHt9O1xuXG5CUnAucmVnaXN0ZXJDYWxjdWxhdGlvbkxpc3RlbmVycyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBjeSA9IHRoaXMuY3k7XG4gIHZhciBlbGVzVG9VcGRhdGUgPSBjeS5jb2xsZWN0aW9uKCk7XG4gIHZhciByID0gdGhpcztcblxuICB2YXIgZW5xdWV1ZSA9IGZ1bmN0aW9uKCBlbGVzLCBlICl7XG4gICAgZWxlc1RvVXBkYXRlLm1lcmdlKCBlbGVzICk7XG5cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBlbGUgPSBlbGVzW2ldO1xuICAgICAgdmFyIF9wID0gZWxlLl9wcml2YXRlO1xuICAgICAgdmFyIHJzdHlsZSA9IF9wLnJzdHlsZTtcblxuICAgICAgcnN0eWxlLmNsZWFuID0gZmFsc2U7XG4gICAgICBfcC5iYkNhY2hlID0gbnVsbDtcblxuICAgICAgdmFyIGV2dHMgPSByc3R5bGUuZGlydHlFdmVudHMgPSByc3R5bGUuZGlydHlFdmVudHMgfHwgeyBsZW5ndGg6IDAgfTtcblxuICAgICAgaWYoICFldnRzWyBlLnR5cGUgXSApe1xuICAgICAgICBldnRzWyBlLnR5cGUgXSA9IHRydWU7XG4gICAgICAgIGV2dHMubGVuZ3RoKys7XG4vL1xuICAgICAgICAvLyBlbGVzVG9VcGRhdGUubWVyZ2UoIGVsZSApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByLmJpbmRlciggY3kgKVxuICAgIC8vIG5vZGVzXG5cbiAgICAub24oJ3Bvc2l0aW9uLiogc3R5bGUuKiBmcmVlLionLCAnbm9kZScsIGZ1bmN0aW9uIG9uRGlydHlNb2ROb2RlKCBlICl7XG4gICAgICB2YXIgbm9kZSA9IGUuY3lUYXJnZXQ7XG5cbiAgICAgIGVucXVldWUoIG5vZGUsIGUgKTtcbiAgICAgIGVucXVldWUoIG5vZGUuY29ubmVjdGVkRWRnZXMoKSwgZSApO1xuXG4gICAgICBpZiggY3kuaGFzQ29tcG91bmROb2RlcygpICl7XG4gICAgICAgIHZhciBwYXJlbnRzID0gbm9kZS5wYXJlbnRzKCk7XG5cbiAgICAgICAgZW5xdWV1ZSggcGFyZW50cywgZSApO1xuICAgICAgICBlbnF1ZXVlKCBwYXJlbnRzLmNvbm5lY3RlZEVkZ2VzKCksIGUgKTtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLm9uKCdhZGQuKiBiYWNrZ3JvdW5kLionLCAnbm9kZScsIGZ1bmN0aW9uIG9uRGlydHlBZGROb2RlKCBlICl7XG4gICAgICB2YXIgZWxlID0gZS5jeVRhcmdldDtcblxuICAgICAgZW5xdWV1ZSggZWxlLCBlICk7XG4gICAgfSlcblxuICAgIC8vIGVkZ2VzXG5cbiAgICAub24oJ2FkZC4qIHN0eWxlLionLCAnZWRnZScsIGZ1bmN0aW9uIG9uRGlydHlFZGdlKCBlICl7XG4gICAgICB2YXIgZWRnZSA9IGUuY3lUYXJnZXQ7XG5cbiAgICAgIGVucXVldWUoIGVkZ2UsIGUgKTtcbiAgICAgIGVucXVldWUoIGVkZ2UucGFyYWxsZWxFZGdlcygpLCBlICk7XG4gICAgfSlcblxuICAgIC5vbigncmVtb3ZlLionLCAnZWRnZScsIGZ1bmN0aW9uIG9uRGlydHlSZW1vdmVFZGdlKCBlICl7XG4gICAgICB2YXIgZWRnZSA9IGUuY3lUYXJnZXQ7XG4gICAgICB2YXIgcEVkZ2VzID0gZWRnZS5wYXJhbGxlbEVkZ2VzKCk7XG5cbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgcEVkZ2VzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBwRWRnZSA9IHBFZGdlc1tpXTtcblxuICAgICAgICBpZiggIXBFZGdlLnJlbW92ZWQoKSApe1xuICAgICAgICAgIGVucXVldWUoIHBFZGdlLCBlICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICA7XG5cbiAgdmFyIHVwZGF0ZUVsZUNhbGNzID0gZnVuY3Rpb24oIHdpbGxEcmF3ICl7XG4gICAgaWYoIHdpbGxEcmF3ICl7XG4gICAgICB2YXIgZm5zID0gci5vblVwZGF0ZUVsZUNhbGNzRm5zO1xuXG4gICAgICBpZiggZm5zICl7IGZvciggdmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBmbiA9IGZuc1tpXTtcblxuICAgICAgICBmbiggd2lsbERyYXcsIGVsZXNUb1VwZGF0ZSApO1xuICAgICAgfSB9XG5cbiAgICAgIHIucmVjYWxjdWxhdGVSZW5kZXJlZFN0eWxlKCBlbGVzVG9VcGRhdGUsIGZhbHNlICk7XG5cbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlc1RvVXBkYXRlLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIGVsZXNUb1VwZGF0ZVtpXS5fcHJpdmF0ZS5yc3R5bGUuZGlydHlFdmVudHMgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBlbGVzVG9VcGRhdGUgPSBjeS5jb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIHIuYmVmb3JlUmVuZGVyKCB1cGRhdGVFbGVDYWxjcywgci5iZWZvcmVSZW5kZXJQcmlvcml0aWVzLmVsZUNhbGNzICk7XG59O1xuXG5CUnAub25VcGRhdGVFbGVDYWxjcyA9IGZ1bmN0aW9uKCBmbiApe1xuICB2YXIgZm5zID0gdGhpcy5vblVwZGF0ZUVsZUNhbGNzRm5zID0gdGhpcy5vblVwZGF0ZUVsZUNhbGNzRm5zIHx8IFtdO1xuXG4gIGZucy5wdXNoKCBmbiApO1xufTtcblxuQlJwLnJlY2FsY3VsYXRlUmVuZGVyZWRTdHlsZSA9IGZ1bmN0aW9uKCBlbGVzLCB1c2VDYWNoZSApe1xuICB2YXIgZWRnZXMgPSBbXTtcbiAgdmFyIG5vZGVzID0gW107XG5cbiAgLy8gdGhlIHJlbmRlcmVyIGNhbid0IGJlIHVzZWQgZm9yIGNhbGNzIHdoZW4gZGVzdHJveWVkLCBlLmcuIGVsZS5ib3VuZGluZ0JveCgpXG4gIGlmKCB0aGlzLmRlc3Ryb3llZCApeyByZXR1cm47IH1cblxuICAvLyB1c2UgY2FjaGUgYnkgZGVmYXVsdCBmb3IgcGVyZlxuICBpZiggdXNlQ2FjaGUgPT09IHVuZGVmaW5lZCApeyB1c2VDYWNoZSA9IHRydWU7IH1cblxuICBmb3IoIHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgZWxlID0gZWxlc1sgaSBdO1xuICAgIHZhciBfcCA9IGVsZS5fcHJpdmF0ZTtcbiAgICB2YXIgcnN0eWxlID0gX3AucnN0eWxlO1xuXG4gICAgLy8gb25seSB1cGRhdGUgaWYgZGlydHkgYW5kIGluIGdyYXBoXG4gICAgaWYoICh1c2VDYWNoZSAmJiByc3R5bGUuY2xlYW4pIHx8IGVsZS5yZW1vdmVkKCkgKXsgY29udGludWU7IH1cblxuICAgIC8vIG9ubHkgdXBkYXRlIGlmIG5vdCBkaXNwbGF5OiBub25lXG4gICAgaWYoIGVsZS5wc3R5bGUoJ2Rpc3BsYXknKS52YWx1ZSA9PT0gJ25vbmUnICl7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiggX3AuZ3JvdXAgPT09ICdub2RlcycgKXtcbiAgICAgIG5vZGVzLnB1c2goIGVsZSApO1xuICAgIH0gZWxzZSB7IC8vIGVkZ2VzXG4gICAgICBlZGdlcy5wdXNoKCBlbGUgKTtcbiAgICB9XG5cbiAgICByc3R5bGUuY2xlYW4gPSB0cnVlO1xuICAgIC8vIHJzdHlsZS5kaXJ0eUV2ZW50cyA9IG51bGw7XG4gIH1cblxuICAvLyB1cGRhdGUgbm9kZSBkYXRhIGZyb20gcHJvamVjdGlvbnNcbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKyApe1xuICAgIHZhciBlbGUgPSBub2Rlc1tpXTtcbiAgICB2YXIgX3AgPSBlbGUuX3ByaXZhdGU7XG4gICAgdmFyIHJzdHlsZSA9IF9wLnJzdHlsZTtcbiAgICB2YXIgcG9zID0gX3AucG9zaXRpb247XG5cbiAgICB0aGlzLnJlY2FsY3VsYXRlTm9kZUxhYmVsUHJvamVjdGlvbiggZWxlICk7XG5cbiAgICByc3R5bGUubm9kZVggPSBwb3MueDtcbiAgICByc3R5bGUubm9kZVkgPSBwb3MueTtcbiAgICByc3R5bGUubm9kZVcgPSBlbGUucHN0eWxlKCAnd2lkdGgnICkucGZWYWx1ZTtcbiAgICByc3R5bGUubm9kZUggPSBlbGUucHN0eWxlKCAnaGVpZ2h0JyApLnBmVmFsdWU7XG4gIH1cblxuICB0aGlzLnJlY2FsY3VsYXRlRWRnZVByb2plY3Rpb25zKCBlZGdlcyApO1xuXG4gIC8vIHVwZGF0ZSBlZGdlIGRhdGEgZnJvbSBwcm9qZWN0aW9uc1xuICBmb3IoIHZhciBpID0gMDsgaSA8IGVkZ2VzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGVsZSA9IGVkZ2VzWyBpIF07XG4gICAgdmFyIF9wID0gZWxlLl9wcml2YXRlO1xuICAgIHZhciByc3R5bGUgPSBfcC5yc3R5bGU7XG4gICAgdmFyIHJzID0gX3AucnNjcmF0Y2g7XG5cbiAgICB0aGlzLnJlY2FsY3VsYXRlRWRnZUxhYmVsUHJvamVjdGlvbnMoIGVsZSApO1xuXG4gICAgLy8gdXBkYXRlIHJzdHlsZSBwb3NpdGlvbnNcbiAgICByc3R5bGUuc3JjWCA9IHJzLmFycm93U3RhcnRYO1xuICAgIHJzdHlsZS5zcmNZID0gcnMuYXJyb3dTdGFydFk7XG4gICAgcnN0eWxlLnRndFggPSBycy5hcnJvd0VuZFg7XG4gICAgcnN0eWxlLnRndFkgPSBycy5hcnJvd0VuZFk7XG4gICAgcnN0eWxlLm1pZFggPSBycy5taWRYO1xuICAgIHJzdHlsZS5taWRZID0gcnMubWlkWTtcbiAgICByc3R5bGUubGFiZWxBbmdsZSA9IHJzLmxhYmVsQW5nbGU7XG4gICAgcnN0eWxlLnNvdXJjZUxhYmVsQW5nbGUgPSBycy5zb3VyY2VMYWJlbEFuZ2xlO1xuICAgIHJzdHlsZS50YXJnZXRMYWJlbEFuZ2xlID0gcnMudGFyZ2V0TGFiZWxBbmdsZTtcbiAgfVxufTtcblxuLy8gUHJvamVjdCBtb3VzZVxuQlJwLnByb2plY3RJbnRvVmlld3BvcnQgPSBmdW5jdGlvbiggY2xpZW50WCwgY2xpZW50WSApe1xuICB2YXIgb2Zmc2V0cyA9IHRoaXMuZmluZENvbnRhaW5lckNsaWVudENvb3JkcygpO1xuICB2YXIgb2Zmc2V0TGVmdCA9IG9mZnNldHNbMF07XG4gIHZhciBvZmZzZXRUb3AgPSBvZmZzZXRzWzFdO1xuXG4gIHZhciB4ID0gY2xpZW50WCAtIG9mZnNldExlZnQ7XG4gIHZhciB5ID0gY2xpZW50WSAtIG9mZnNldFRvcDtcblxuICB4IC09IHRoaXMuY3kucGFuKCkueDsgeSAtPSB0aGlzLmN5LnBhbigpLnk7IHggLz0gdGhpcy5jeS56b29tKCk7IHkgLz0gdGhpcy5jeS56b29tKCk7XG4gIHJldHVybiBbIHgsIHkgXTtcbn07XG5cbkJScC5maW5kQ29udGFpbmVyQ2xpZW50Q29vcmRzID0gZnVuY3Rpb24oKXtcbiAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuXG4gIHZhciBiYiA9IHRoaXMuY29udGFpbmVyQkIgPSB0aGlzLmNvbnRhaW5lckJCIHx8IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICByZXR1cm4gWyBiYi5sZWZ0LCBiYi50b3AsIGJiLnJpZ2h0IC0gYmIubGVmdCwgYmIuYm90dG9tIC0gYmIudG9wIF07XG59O1xuXG5CUnAuaW52YWxpZGF0ZUNvbnRhaW5lckNsaWVudENvb3Jkc0NhY2hlID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5jb250YWluZXJCQiA9IG51bGw7XG59O1xuXG5CUnAuZmluZE5lYXJlc3RFbGVtZW50ID0gZnVuY3Rpb24oIHgsIHksIGlzVG91Y2ggKXtcbiAgcmV0dXJuIHRoaXMuZmluZE5lYXJlc3RFbGVtZW50cyggeCwgeSwgaXNUb3VjaCApWzBdO1xufTtcblxuQlJwLmZpbmROZWFyZXN0RWxlbWVudHMgPSBmdW5jdGlvbiggeCwgeSwgaXNUb3VjaCApe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciByID0gdGhpcztcbiAgdmFyIGVsZXMgPSByLmdldENhY2hlZFpTb3J0ZWRFbGVzKCk7XG4gIHZhciBuZWFyID0gW107IC8vIDEgbm9kZSBtYXgsIDEgZWRnZSBtYXhcbiAgdmFyIHpvb20gPSByLmN5Lnpvb20oKTtcbiAgdmFyIGhhc0NvbXBvdW5kcyA9IHIuY3kuaGFzQ29tcG91bmROb2RlcygpO1xuICB2YXIgZWRnZVRocmVzaG9sZCA9IChpc1RvdWNoID8gMjQgOiA4KSAvIHpvb207XG4gIHZhciBub2RlVGhyZXNob2xkID0gKGlzVG91Y2ggPyA4IDogMikgLyB6b29tO1xuICB2YXIgbGFiZWxUaHJlc2hvbGQgPSAoaXNUb3VjaCA/IDggOiAyKSAvIHpvb207XG4gIHZhciBtaW5TcURpc3QgPSBJbmZpbml0eTtcbiAgdmFyIG5lYXJFZGdlO1xuICB2YXIgbmVhck5vZGU7XG5cbiAgZnVuY3Rpb24gYWRkRWxlKCBlbGUsIHNxRGlzdCApe1xuICAgIGlmKCBlbGUuaXNOb2RlKCkgKXtcbiAgICAgIGlmKCBuZWFyTm9kZSApe1xuICAgICAgICByZXR1cm47IC8vIGNhbid0IHJlcGxhY2Ugbm9kZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmVhck5vZGUgPSBlbGU7XG4gICAgICAgIG5lYXIucHVzaCggZWxlICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYoIGVsZS5pc0VkZ2UoKSAmJiAoIHNxRGlzdCA9PSBudWxsIHx8IHNxRGlzdCA8IG1pblNxRGlzdCApICl7XG4gICAgICBpZiggbmVhckVkZ2UgKXsgLy8gdGhlbiByZXBsYWNlIGV4aXN0aW5nIGVkZ2VcbiAgICAgICAgLy8gY2FuIHJlcGxhY2Ugb25seSBpZiBzYW1lIHotaW5kZXhcbiAgICAgICAgaWYoIG5lYXJFZGdlLnBzdHlsZSggJ3otaW5kZXgnICkudmFsdWUgPT09IGVsZS5wc3R5bGUoJ3otaW5kZXgnKS52YWx1ZSApe1xuICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbmVhci5sZW5ndGg7IGkrKyApe1xuICAgICAgICAgICAgaWYoIG5lYXJbaV0uaXNFZGdlKCkgKXtcbiAgICAgICAgICAgICAgbmVhcltpXSA9IGVsZTtcbiAgICAgICAgICAgICAgbmVhckVkZ2UgPSBlbGU7XG4gICAgICAgICAgICAgIG1pblNxRGlzdCA9IHNxRGlzdCAhPSBudWxsID8gc3FEaXN0IDogbWluU3FEaXN0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5lYXIucHVzaCggZWxlICk7XG4gICAgICAgIG5lYXJFZGdlID0gZWxlO1xuICAgICAgICBtaW5TcURpc3QgPSBzcURpc3QgIT0gbnVsbCA/IHNxRGlzdCA6IG1pblNxRGlzdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja05vZGUoIG5vZGUgKXtcbiAgICB2YXIgX3AgPSBub2RlLl9wcml2YXRlO1xuXG4gICAgaWYoIG5vZGUucHN0eWxlKCAnZXZlbnRzJyApLnN0clZhbHVlID09PSAnbm8nICl7IHJldHVybjsgfVxuXG4gICAgdmFyIHdpZHRoID0gbm9kZS5vdXRlcldpZHRoKCkgKyAyICogbm9kZVRocmVzaG9sZDtcbiAgICB2YXIgaGVpZ2h0ID0gbm9kZS5vdXRlckhlaWdodCgpICsgMiAqIG5vZGVUaHJlc2hvbGQ7XG4gICAgdmFyIGh3ID0gd2lkdGggLyAyO1xuICAgIHZhciBoaCA9IGhlaWdodCAvIDI7XG4gICAgdmFyIHBvcyA9IF9wLnBvc2l0aW9uO1xuXG4vLyAgICBpZihcbi8vICAgICAgcG9zLnggLSBodyA8PSB4ICYmIHggPD0gcG9zLnggKyBodyAvLyBiYiBjaGVjayB4XG4vLyAgICAgICAgJiZcbi8vICAgICAgcG9zLnkgLSBoaCA8PSB5ICYmIHkgPD0gcG9zLnkgKyBoaCAvLyBiYiBjaGVjayB5XG4vLyAgICApe1xuICAgICAgdmFyIHNoYXBlID0gci5ub2RlU2hhcGVzWyBzZWxmLmdldE5vZGVTaGFwZSggbm9kZSApIF07XG5cbiAgICAgIGlmKFxuICAgICAgICBzYmduLmlzTm9kZVNoYXBlVG90YWxseU92ZXJyaWRlbihzZWxmLCBub2RlKT9zaGFwZS5jaGVja1BvaW50KCB4LCB5LCBub2RlLCAwICk6c2hhcGUuY2hlY2tQb2ludCh4LCB5LCAwLCB3aWR0aCwgaGVpZ2h0LCBwb3MueCwgcG9zLnkpXG4gICAgICApe1xuICAgICAgICBhZGRFbGUoIG5vZGUsIDAgKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbi8vICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRWRnZSggZWRnZSApe1xuICAgIHZhciBfcCA9IGVkZ2UuX3ByaXZhdGU7XG5cbiAgICBpZiggZWRnZS5wc3R5bGUoJ2V2ZW50cycpLnN0clZhbHVlID09PSAnbm8nICl7IHJldHVybjsgfVxuXG4gICAgdmFyIHJzID0gX3AucnNjcmF0Y2g7XG4gICAgdmFyIHdpZHRoID0gZWRnZS5wc3R5bGUoICd3aWR0aCcgKS5wZlZhbHVlIC8gMiArIGVkZ2VUaHJlc2hvbGQ7IC8vIG1vcmUgbGlrZSBhIGRpc3RhbmNlIHJhZGl1cyBmcm9tIGNlbnRyZVxuICAgIHZhciB3aWR0aFNxID0gd2lkdGggKiB3aWR0aDtcbiAgICB2YXIgd2lkdGgyID0gd2lkdGggKiAyO1xuICAgIHZhciBzcmMgPSBfcC5zb3VyY2U7XG4gICAgdmFyIHRndCA9IF9wLnRhcmdldDtcbiAgICB2YXIgaW5FZGdlQkIgPSBmYWxzZTtcbiAgICB2YXIgc3FEaXN0O1xuXG4gICAgaWYoIHJzLmVkZ2VUeXBlID09PSAnc2VnbWVudHMnIHx8IHJzLmVkZ2VUeXBlID09PSAnc3RyYWlnaHQnIHx8IHJzLmVkZ2VUeXBlID09PSAnaGF5c3RhY2snICl7XG4gICAgICB2YXIgcHRzID0gcnMuYWxscHRzO1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSArIDMgPCBwdHMubGVuZ3RoOyBpICs9IDIgKXtcbiAgICAgICAgaWYoXG4gICAgICAgICAgKGluRWRnZUJCID0gbWF0aC5pbkxpbmVWaWNpbml0eSggeCwgeSwgcHRzWyBpIF0sIHB0c1sgaSArIDFdLCBwdHNbIGkgKyAyXSwgcHRzWyBpICsgM10sIHdpZHRoMiApKVxuICAgICAgICAgICAgJiZcbiAgICAgICAgICB3aWR0aFNxID4gKCBzcURpc3QgPSBtYXRoLnNxZGlzdFRvRmluaXRlTGluZSggeCwgeSwgcHRzWyBpIF0sIHB0c1sgaSArIDFdLCBwdHNbIGkgKyAyXSwgcHRzWyBpICsgM10gKSApXG4gICAgICAgICl7XG4gICAgICAgICAgYWRkRWxlKCBlZGdlLCBzcURpc3QgKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfSBlbHNlIGlmKCBycy5lZGdlVHlwZSA9PT0gJ2JlemllcicgfHwgcnMuZWRnZVR5cGUgPT09ICdtdWx0aWJlemllcicgfHwgcnMuZWRnZVR5cGUgPT09ICdzZWxmJyB8fCBycy5lZGdlVHlwZSA9PT0gJ2NvbXBvdW5kJyApe1xuICAgICAgdmFyIHB0cyA9IHJzLmFsbHB0cztcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpICsgNSA8IHJzLmFsbHB0cy5sZW5ndGg7IGkgKz0gNCApe1xuICAgICAgICBpZihcbiAgICAgICAgICAoaW5FZGdlQkIgPSBtYXRoLmluQmV6aWVyVmljaW5pdHkoIHgsIHksIHB0c1sgaSBdLCBwdHNbIGkgKyAxXSwgcHRzWyBpICsgMl0sIHB0c1sgaSArIDNdLCBwdHNbIGkgKyA0XSwgcHRzWyBpICsgNV0sIHdpZHRoMiApKVxuICAgICAgICAgICAgJiZcbiAgICAgICAgICAod2lkdGhTcSA+IChzcURpc3QgPSBtYXRoLnNxZGlzdFRvUXVhZHJhdGljQmV6aWVyKCB4LCB5LCBwdHNbIGkgXSwgcHRzWyBpICsgMV0sIHB0c1sgaSArIDJdLCBwdHNbIGkgKyAzXSwgcHRzWyBpICsgNF0sIHB0c1sgaSArIDVdICkpIClcbiAgICAgICAgKXtcbiAgICAgICAgICBhZGRFbGUoIGVkZ2UsIHNxRGlzdCApO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaWYgd2UncmUgY2xvc2UgdG8gdGhlIGVkZ2UgYnV0IGRpZG4ndCBoaXQgaXQsIG1heWJlIHdlIGhpdCBpdHMgYXJyb3dzXG4gICAgaWYoIGluRWRnZUJCICl7XG4gICAgICB2YXIgc3JjID0gc3JjIHx8IF9wLnNvdXJjZTtcbiAgICAgIHZhciB0Z3QgPSB0Z3QgfHwgX3AudGFyZ2V0O1xuXG4gICAgICB2YXIgZVdpZHRoID0gZWRnZS5wc3R5bGUoICd3aWR0aCcgKS5wZlZhbHVlO1xuICAgICAgdmFyIGFyU2l6ZSA9IHNlbGYuZ2V0QXJyb3dXaWR0aCggZVdpZHRoICk7XG5cbiAgICAgIHZhciBhcnJvd3MgPSBbXG4gICAgICAgIHsgbmFtZTogJ3NvdXJjZScsIHg6IHJzLmFycm93U3RhcnRYLCB5OiBycy5hcnJvd1N0YXJ0WSwgYW5nbGU6IHJzLnNyY0Fycm93QW5nbGUgfSxcbiAgICAgICAgeyBuYW1lOiAndGFyZ2V0JywgeDogcnMuYXJyb3dFbmRYLCB5OiBycy5hcnJvd0VuZFksIGFuZ2xlOiBycy50Z3RBcnJvd0FuZ2xlIH0sXG4gICAgICAgIHsgbmFtZTogJ21pZC1zb3VyY2UnLCB4OiBycy5taWRYLCB5OiBycy5taWRZLCBhbmdsZTogcnMubWlkc3JjQXJyb3dBbmdsZSB9LFxuICAgICAgICB7IG5hbWU6ICdtaWQtdGFyZ2V0JywgeDogcnMubWlkWCwgeTogcnMubWlkWSwgYW5nbGU6IHJzLm1pZHRndEFycm93QW5nbGUgfVxuICAgICAgXTtcblxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBhcnJvd3MubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGFyID0gYXJyb3dzWyBpIF07XG4gICAgICAgIHZhciBzaGFwZSA9IHIuYXJyb3dTaGFwZXNbIGVkZ2UucHN0eWxlKCBhci5uYW1lICsgJy1hcnJvdy1zaGFwZScgKS52YWx1ZSBdO1xuXG4gICAgICAgIGlmKFxuICAgICAgICAgIHNoYXBlLnJvdWdoQ29sbGlkZSggeCwgeSwgYXJTaXplLCBhci5hbmdsZSwgeyB4OiBhci54LCB5OiBhci55IH0sIGVkZ2VUaHJlc2hvbGQgKVxuICAgICAgICAgICAmJlxuICAgICAgICAgIHNoYXBlLmNvbGxpZGUoIHgsIHksIGFyU2l6ZSwgYXIuYW5nbGUsIHsgeDogYXIueCwgeTogYXIueSB9LCBlZGdlVGhyZXNob2xkIClcbiAgICAgICAgKXtcbiAgICAgICAgICBhZGRFbGUoIGVkZ2UgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZvciBjb21wb3VuZCBncmFwaHMsIGhpdHRpbmcgZWRnZSBtYXkgYWN0dWFsbHkgd2FudCBhIGNvbm5lY3RlZCBub2RlIGluc3RlYWQgKGIvYyBlZGdlIG1heSBoYXZlIGdyZWF0ZXIgei1pbmRleCBwcmVjZWRlbmNlKVxuICAgIGlmKCBoYXNDb21wb3VuZHMgJiYgbmVhci5sZW5ndGggPiAwICl7XG4gICAgICBjaGVja05vZGUoIHNyYyApO1xuICAgICAgY2hlY2tOb2RlKCB0Z3QgKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVwcm9wKCBvYmosIG5hbWUsIHByZSApe1xuICAgIHJldHVybiB1dGlsLmdldFByZWZpeGVkUHJvcGVydHkoIG9iaiwgbmFtZSwgcHJlICk7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0xhYmVsKCBlbGUsIHByZWZpeCApe1xuICAgIHZhciBfcCA9IGVsZS5fcHJpdmF0ZTtcbiAgICB2YXIgdGggPSBsYWJlbFRocmVzaG9sZDtcblxuICAgIHZhciBwcmVmaXhEYXNoO1xuICAgIGlmKCBwcmVmaXggKXtcbiAgICAgIHByZWZpeERhc2ggPSBwcmVmaXggKyAnLSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZWZpeERhc2ggPSAnJztcbiAgICB9XG5cbiAgICB2YXIgdGV4dCA9IGVsZS5wc3R5bGUoIHByZWZpeERhc2ggKyAnbGFiZWwnICkudmFsdWU7XG4gICAgdmFyIGV2ZW50c0VuYWJsZWQgPSBlbGUucHN0eWxlKCAndGV4dC1ldmVudHMnICkuc3RyVmFsdWUgPT09ICd5ZXMnO1xuXG4gICAgaWYoICFldmVudHNFbmFibGVkIHx8ICF0ZXh0ICl7IHJldHVybjsgfVxuXG4gICAgdmFyIHJzdHlsZSA9IF9wLnJzdHlsZTtcbiAgICB2YXIgYncgPSBlbGUucHN0eWxlKCd0ZXh0LWJvcmRlci13aWR0aCcpLnBmVmFsdWU7XG4gICAgdmFyIHB3ID0gZWxlLnBzdHlsZSgndGV4dC1iYWNrZ3JvdW5kLXBhZGRpbmcnKS5wZlZhbHVlO1xuICAgIHZhciBsdyA9IHByZXByb3AoIHJzdHlsZSwgJ2xhYmVsV2lkdGgnLCBwcmVmaXggKSArIGJ3ICsgMip0aCArIDIqcHc7XG4gICAgdmFyIGxoID0gcHJlcHJvcCggcnN0eWxlLCAnbGFiZWxIZWlnaHQnLCBwcmVmaXggKSArIGJ3ICsgMip0aCArIDIqcHc7XG4gICAgdmFyIGx4ID0gcHJlcHJvcCggcnN0eWxlLCAnbGFiZWxYJywgcHJlZml4ICk7XG4gICAgdmFyIGx5ID0gcHJlcHJvcCggcnN0eWxlLCAnbGFiZWxZJywgcHJlZml4ICk7XG5cbiAgICB2YXIgdGhldGEgPSBwcmVwcm9wKCBfcC5yc2NyYXRjaCwgJ2xhYmVsQW5nbGUnLCBwcmVmaXggKTtcblxuICAgIHZhciBseDEgPSBseCAtIGx3IC8gMjtcbiAgICB2YXIgbHgyID0gbHggKyBsdyAvIDI7XG4gICAgdmFyIGx5MSA9IGx5IC0gbGggLyAyO1xuICAgIHZhciBseTIgPSBseSArIGxoIC8gMjtcblxuICAgIGlmKCB0aGV0YSApe1xuICAgICAgdmFyIGNvcyA9IE1hdGguY29zKCB0aGV0YSApO1xuICAgICAgdmFyIHNpbiA9IE1hdGguc2luKCB0aGV0YSApO1xuXG4gICAgICB2YXIgcm90YXRlID0gZnVuY3Rpb24oIHgsIHkgKXtcbiAgICAgICAgeCA9IHggLSBseDtcbiAgICAgICAgeSA9IHkgLSBseTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IHggKiBjb3MgLSB5ICogc2luICsgbHgsXG4gICAgICAgICAgeTogeCAqIHNpbiArIHkgKiBjb3MgKyBseVxuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgdmFyIHB4MXkxID0gcm90YXRlKCBseDEsIGx5MSApO1xuICAgICAgdmFyIHB4MXkyID0gcm90YXRlKCBseDEsIGx5MiApO1xuICAgICAgdmFyIHB4MnkxID0gcm90YXRlKCBseDIsIGx5MSApO1xuICAgICAgdmFyIHB4MnkyID0gcm90YXRlKCBseDIsIGx5MiApO1xuXG4gICAgICB2YXIgcG9pbnRzID0gW1xuICAgICAgICBweDF5MS54LCBweDF5MS55LFxuICAgICAgICBweDJ5MS54LCBweDJ5MS55LFxuICAgICAgICBweDJ5Mi54LCBweDJ5Mi55LFxuICAgICAgICBweDF5Mi54LCBweDF5Mi55XG4gICAgICBdO1xuXG4gICAgICBpZiggbWF0aC5wb2ludEluc2lkZVBvbHlnb25Qb2ludHMoIHgsIHksIHBvaW50cyApICl7XG4gICAgICAgIGFkZEVsZSggZWxlICk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7IC8vIGRvIGEgY2hlYXBlciBiYiBjaGVja1xuICAgICAgdmFyIGJiID0ge1xuICAgICAgICB3OiBsdyxcbiAgICAgICAgaDogbGgsXG4gICAgICAgIHgxOiBseDEsXG4gICAgICAgIHgyOiBseDIsXG4gICAgICAgIHkxOiBseTEsXG4gICAgICAgIHkyOiBseTJcbiAgICAgIH07XG5cbiAgICAgIGlmKCBtYXRoLmluQm91bmRpbmdCb3goIGJiLCB4LCB5ICkgKXtcbiAgICAgICAgYWRkRWxlKCBlbGUgKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICBmb3IoIHZhciBpID0gZWxlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApeyAvLyByZXZlcnNlIG9yZGVyIGZvciBwcmVjZWRlbmNlXG4gICAgdmFyIGVsZSA9IGVsZXNbIGkgXTtcblxuICAgIGlmKCBlbGUuaXNOb2RlKCkgKXtcbiAgICAgIGNoZWNrTm9kZSggZWxlICkgfHwgY2hlY2tMYWJlbCggZWxlICk7XG5cbiAgICB9IGVsc2UgeyAvLyB0aGVuIGVkZ2VcbiAgICAgIGNoZWNrRWRnZSggZWxlICkgfHwgY2hlY2tMYWJlbCggZWxlICkgfHwgY2hlY2tMYWJlbCggZWxlLCAnc291cmNlJyApIHx8IGNoZWNrTGFiZWwoIGVsZSwgJ3RhcmdldCcgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVhcjtcbn07XG5cbi8vICdHaXZlIG1lIGV2ZXJ5dGhpbmcgZnJvbSB0aGlzIGJveCdcbkJScC5nZXRBbGxJbkJveCA9IGZ1bmN0aW9uKCB4MSwgeTEsIHgyLCB5MiApe1xuICB2YXIgZWxlcyA9IHRoaXMuZ2V0Q2FjaGVkWlNvcnRlZEVsZXMoKTtcbiAgdmFyIG5vZGVzID0gZWxlcy5ub2RlcztcbiAgdmFyIGVkZ2VzID0gZWxlcy5lZGdlcztcbiAgdmFyIGJveCA9IFtdO1xuXG4gIHZhciB4MWMgPSBNYXRoLm1pbiggeDEsIHgyICk7XG4gIHZhciB4MmMgPSBNYXRoLm1heCggeDEsIHgyICk7XG4gIHZhciB5MWMgPSBNYXRoLm1pbiggeTEsIHkyICk7XG4gIHZhciB5MmMgPSBNYXRoLm1heCggeTEsIHkyICk7XG5cbiAgeDEgPSB4MWM7XG4gIHgyID0geDJjO1xuICB5MSA9IHkxYztcbiAgeTIgPSB5MmM7XG5cbiAgdmFyIGJveEJiID0gbWF0aC5tYWtlQm91bmRpbmdCb3goIHtcbiAgICB4MTogeDEsIHkxOiB5MSxcbiAgICB4MjogeDIsIHkyOiB5MlxuICB9ICk7XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKyApe1xuICAgIHZhciBub2RlID0gbm9kZXNbIGkgXTtcbiAgICB2YXIgbm9kZUJiID0gbm9kZS5ib3VuZGluZ0JveCgge1xuICAgICAgaW5jbHVkZU5vZGVzOiB0cnVlLFxuICAgICAgaW5jbHVkZUVkZ2VzOiBmYWxzZSxcbiAgICAgIGluY2x1ZGVMYWJlbHM6IGZhbHNlLFxuICAgICAgaW5jbHVkZVNoYWRvd3M6IGZhbHNlXG4gICAgfSApO1xuXG4gICAgaWYoIG1hdGguYm91bmRpbmdCb3hlc0ludGVyc2VjdCggYm94QmIsIG5vZGVCYiApICl7XG4gICAgICBib3gucHVzaCggbm9kZXNbIGkgXSApO1xuICAgIH1cbiAgfVxuXG4gIGZvciggdmFyIGUgPSAwOyBlIDwgZWRnZXMubGVuZ3RoOyBlKysgKXtcbiAgICB2YXIgZWRnZSA9IGVkZ2VzWyBlIF07XG4gICAgdmFyIF9wID0gZWRnZS5fcHJpdmF0ZTtcbiAgICB2YXIgcnMgPSBfcC5yc2NyYXRjaDtcblxuICAgIGlmKCBycy5zdGFydFggIT0gbnVsbCAmJiBycy5zdGFydFkgIT0gbnVsbCAmJiAhbWF0aC5pbkJvdW5kaW5nQm94KCBib3hCYiwgcnMuc3RhcnRYLCBycy5zdGFydFkgKSApeyBjb250aW51ZTsgfVxuICAgIGlmKCBycy5lbmRYICE9IG51bGwgJiYgcnMuZW5kWSAhPSBudWxsICYmICFtYXRoLmluQm91bmRpbmdCb3goIGJveEJiLCBycy5lbmRYLCBycy5lbmRZICkgKXsgY29udGludWU7IH1cblxuICAgIGlmKCBycy5lZGdlVHlwZSA9PT0gJ2JlemllcicgfHwgcnMuZWRnZVR5cGUgPT09ICdtdWx0aWJlemllcicgfHwgcnMuZWRnZVR5cGUgPT09ICdzZWxmJyB8fCBycy5lZGdlVHlwZSA9PT0gJ2NvbXBvdW5kJyB8fCBycy5lZGdlVHlwZSA9PT0gJ3NlZ21lbnRzJyB8fCBycy5lZGdlVHlwZSA9PT0gJ2hheXN0YWNrJyApe1xuXG4gICAgICB2YXIgcHRzID0gX3AucnN0eWxlLmJlemllclB0cyB8fCBfcC5yc3R5bGUubGluZVB0cyB8fCBfcC5yc3R5bGUuaGF5c3RhY2tQdHM7XG4gICAgICB2YXIgYWxsSW5zaWRlID0gdHJ1ZTtcblxuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBwdHMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgaWYoICFtYXRoLnBvaW50SW5Cb3VuZGluZ0JveCggYm94QmIsIHB0c1sgaSBdICkgKXtcbiAgICAgICAgICBhbGxJbnNpZGUgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiggYWxsSW5zaWRlICl7XG4gICAgICAgIGJveC5wdXNoKCBlZGdlICk7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYoIHJzLmVkZ2VUeXBlID09PSAnaGF5c3RhY2snIHx8IHJzLmVkZ2VUeXBlID09PSAnc3RyYWlnaHQnICl7XG4gICAgICBib3gucHVzaCggZWRnZSApO1xuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIGJveDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzaGFwZSBvZiB0aGUgZ2l2ZW4gbm9kZS4gSWYgdGhlIGhlaWdodCBvciB3aWR0aCBvZiB0aGUgZ2l2ZW4gbm9kZVxuICogaXMgc2V0IHRvIGF1dG8sIHRoZSBub2RlIGlzIGNvbnNpZGVyZWQgdG8gYmUgYSBjb21wb3VuZC5cbiAqXG4gKiBAcGFyYW0gbm9kZSAgICAgICAgICBhIG5vZGVcbiAqIEByZXR1cm4ge1N0cmluZ30gICAgIHNoYXBlIG9mIHRoZSBub2RlXG4gKi9cbkJScC5nZXROb2RlU2hhcGUgPSBmdW5jdGlvbiggbm9kZSApe1xuICB2YXIgciA9IHRoaXM7XG4gIHZhciBzaGFwZSA9IG5vZGUucHN0eWxlKCAnc2hhcGUnICkudmFsdWU7XG5cbi8vICBpZiggbm9kZS5pc1BhcmVudCgpICl7XG4vLyAgICBpZiggc2hhcGUgPT09ICdyZWN0YW5nbGUnIHx8IHNoYXBlID09PSAncm91bmRyZWN0YW5nbGUnICl7XG4vLyAgICAgIHJldHVybiBzaGFwZTtcbi8vICAgIH0gZWxzZSB7XG4vLyAgICAgIHJldHVybiAncmVjdGFuZ2xlJztcbi8vICAgIH1cbi8vICB9XG5cbiAgaWYoIHNoYXBlID09PSAncG9seWdvbicgKXtcbiAgICB2YXIgcG9pbnRzID0gbm9kZS5wc3R5bGUoICdzaGFwZS1wb2x5Z29uLXBvaW50cycgKS52YWx1ZTtcblxuICAgIHJldHVybiByLm5vZGVTaGFwZXMubWFrZVBvbHlnb24oIHBvaW50cyApLm5hbWU7XG4gIH1cblxuICByZXR1cm4gc2hhcGU7XG59O1xuXG5CUnAudXBkYXRlQ2FjaGVkR3JhYmJlZEVsZXMgPSBmdW5jdGlvbigpe1xuICB2YXIgZWxlcyA9IHRoaXMuY2FjaGVkWlNvcnRlZEVsZXM7XG5cbiAgaWYoICFlbGVzICl7XG4gICAgLy8ganVzdCBsZXQgdGhpcyBiZSByZWNhbGN1bGF0ZWQgb24gdGhlIG5leHQgeiBzb3J0IHRpY2tcbiAgICByZXR1cm47XG4gIH1cblxuICBlbGVzLmRyYWcgPSBbXTtcbiAgZWxlcy5ub25kcmFnID0gW107XG5cbiAgdmFyIGdyYWJUYXJnZXRzID0gW107XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGVsZSA9IGVsZXNbaV07XG4gICAgdmFyIHJzID0gZWxlLl9wcml2YXRlLnJzY3JhdGNoO1xuXG4gICAgaWYoIGVsZS5ncmFiYmVkKCkgJiYgIWVsZS5pc1BhcmVudCgpICl7XG4gICAgICBncmFiVGFyZ2V0cy5wdXNoKCBlbGUgKTtcbiAgICB9IGVsc2UgaWYoIHJzLmluRHJhZ0xheWVyICl7XG4gICAgICBlbGVzLmRyYWcucHVzaCggZWxlICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZXMubm9uZHJhZy5wdXNoKCBlbGUgKTtcbiAgICB9XG4gIH1cblxuICAvLyBwdXQgdGhlIGdyYWIgdGFyZ2V0IG5vZGVzIGxhc3Qgc28gaXQncyBvbiB0b3Agb2YgaXRzIG5laWdoYm91cmhvb2RcbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBncmFiVGFyZ2V0cy5sZW5ndGg7IGkrKyApe1xuICAgIHZhciBlbGUgPSBncmFiVGFyZ2V0c1tpXTtcblxuICAgIGVsZXMuZHJhZy5wdXNoKCBlbGUgKTtcbiAgfVxufTtcblxuQlJwLmludmFsaWRhdGVDYWNoZWRaU29ydGVkRWxlcyA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuY2FjaGVkWlNvcnRlZEVsZXMgPSBudWxsO1xufTtcblxuQlJwLmdldENhY2hlZFpTb3J0ZWRFbGVzID0gZnVuY3Rpb24oIGZvcmNlUmVjYWxjICl7XG4gIGlmKCBmb3JjZVJlY2FsYyB8fCAhdGhpcy5jYWNoZWRaU29ydGVkRWxlcyApe1xuICAgIHZhciBjeUVsZXMgPSB0aGlzLmN5Lm11dGFibGVFbGVtZW50cygpO1xuICAgIHZhciBlbGVzID0gW107XG5cbiAgICBlbGVzLm5vZGVzID0gW107XG4gICAgZWxlcy5lZGdlcyA9IFtdO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBjeUVsZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBlbGUgPSBjeUVsZXNbaV07XG5cbiAgICAgIGlmKCBlbGUuYW5pbWF0ZWQoKSB8fCAoZWxlLnZpc2libGUoKSAmJiAhZWxlLnRyYW5zcGFyZW50KCkpICl7XG4gICAgICAgIGVsZXMucHVzaCggZWxlICk7XG5cbiAgICAgICAgaWYoIGVsZS5pc05vZGUoKSApe1xuICAgICAgICAgIGVsZXMubm9kZXMucHVzaCggZWxlICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlcy5lZGdlcy5wdXNoKCBlbGUgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGVsZXMuc29ydCggekluZGV4U29ydCApO1xuXG4gICAgdGhpcy5jYWNoZWRaU29ydGVkRWxlcyA9IGVsZXM7XG5cbiAgICB0aGlzLnVwZGF0ZUNhY2hlZEdyYWJiZWRFbGVzKCk7XG4gIH0gZWxzZSB7XG4gICAgZWxlcyA9IHRoaXMuY2FjaGVkWlNvcnRlZEVsZXM7XG4gIH1cblxuICByZXR1cm4gZWxlcztcbn07XG5cbmZ1bmN0aW9uIHB1c2hCZXppZXJQdHMoIHIsIGVkZ2UsIHB0cyApe1xuICB2YXIgcWJlemllckF0ID0gZnVuY3Rpb24oIHAxLCBwMiwgcDMsIHQgKXsgcmV0dXJuIG1hdGgucWJlemllckF0KCBwMSwgcDIsIHAzLCB0ICk7IH07XG4gIHZhciBfcCA9IGVkZ2UuX3ByaXZhdGU7XG4gIHZhciBicHRzID0gX3AucnN0eWxlLmJlemllclB0cztcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IHIuYmV6aWVyUHJvalBjdHMubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgcCA9IHIuYmV6aWVyUHJvalBjdHNbaV07XG5cbiAgICBicHRzLnB1c2goIHtcbiAgICAgIHg6IHFiZXppZXJBdCggcHRzWzBdLCBwdHNbMl0sIHB0c1s0XSwgcCApLFxuICAgICAgeTogcWJlemllckF0KCBwdHNbMV0sIHB0c1szXSwgcHRzWzVdLCBwIClcbiAgICB9ICk7XG4gIH1cbn1cblxuQlJwLnByb2plY3RMaW5lcyA9IGZ1bmN0aW9uKCBlZGdlICl7XG4gIHZhciBfcCA9IGVkZ2UuX3ByaXZhdGU7XG4gIHZhciBycyA9IF9wLnJzY3JhdGNoO1xuICB2YXIgZXQgPSBycy5lZGdlVHlwZTtcblxuICAvLyBjbGVhciB0aGUgY2FjaGVkIHBvaW50cyBzdGF0ZVxuICBfcC5yc3R5bGUuYmV6aWVyUHRzID0gbnVsbDtcbiAgX3AucnN0eWxlLmxpbmVQdHMgPSBudWxsO1xuICBfcC5yc3R5bGUuaGF5c3RhY2tQdHMgPSBudWxsO1xuXG4gIGlmKCBldCA9PT0gJ211bHRpYmV6aWVyJyB8fCAgZXQgPT09ICdiZXppZXInIHx8ICBldCA9PT0gJ3NlbGYnIHx8ICBldCA9PT0gJ2NvbXBvdW5kJyApe1xuICAgIHZhciBicHRzID0gX3AucnN0eWxlLmJlemllclB0cyA9IFtdOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblxuICAgIGZvciggdmFyIGkgPSAwOyBpICsgNSA8IHJzLmFsbHB0cy5sZW5ndGg7IGkgKz0gNCApe1xuICAgICAgcHVzaEJlemllclB0cyggdGhpcywgZWRnZSwgcnMuYWxscHRzLnNsaWNlKCBpLCBpICsgNiApICk7XG4gICAgfVxuICB9IGVsc2UgaWYoICBldCA9PT0gJ3NlZ21lbnRzJyApe1xuICAgIHZhciBscHRzID0gX3AucnN0eWxlLmxpbmVQdHMgPSBbXTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpICsgMSA8IHJzLmFsbHB0cy5sZW5ndGg7IGkgKz0gMiApe1xuICAgICAgbHB0cy5wdXNoKCB7XG4gICAgICAgIHg6IHJzLmFsbHB0c1sgaSBdLFxuICAgICAgICB5OiBycy5hbGxwdHNbIGkgKyAxXVxuICAgICAgfSApO1xuICAgIH1cbiAgfSBlbHNlIGlmKCBldCA9PT0gJ2hheXN0YWNrJyApe1xuICAgIHZhciBocHRzID0gcnMuaGF5c3RhY2tQdHM7XG5cbiAgICBfcC5yc3R5bGUuaGF5c3RhY2tQdHMgPSBbXG4gICAgICB7IHg6IGhwdHNbMF0sIHk6IGhwdHNbMV0gfSxcbiAgICAgIHsgeDogaHB0c1syXSwgeTogaHB0c1szXSB9XG4gICAgXTtcbiAgfVxuXG4gIF9wLnJzdHlsZS5hcnJvd1dpZHRoID0gdGhpcy5nZXRBcnJvd1dpZHRoKCBlZGdlLnBzdHlsZSgnd2lkdGgnKS5wZlZhbHVlICkgKiB0aGlzLmFycm93U2hhcGVXaWR0aDtcbn07XG5cbkJScC5wcm9qZWN0QmV6aWVyID0gQlJwLnByb2plY3RMaW5lcztcblxuQlJwLnJlY2FsY3VsYXRlTm9kZUxhYmVsUHJvamVjdGlvbiA9IGZ1bmN0aW9uKCBub2RlICl7XG4gIHZhciBjb250ZW50ID0gbm9kZS5wc3R5bGUoICdsYWJlbCcgKS5zdHJWYWx1ZTtcblxuICBpZiggaXMuZW1wdHlTdHJpbmcoY29udGVudCkgKXsgcmV0dXJuOyB9XG5cbiAgdmFyIHRleHRYLCB0ZXh0WTtcbiAgdmFyIF9wID0gbm9kZS5fcHJpdmF0ZTtcbiAgdmFyIG5vZGVXaWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgdmFyIG5vZGVIZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICB2YXIgcGFkZGluZ0xlZnQgPSBub2RlLnBzdHlsZSgncGFkZGluZy1sZWZ0JykucGZWYWx1ZTtcbiAgdmFyIHBhZGRpbmdSaWdodCA9IG5vZGUucHN0eWxlKCdwYWRkaW5nLXJpZ2h0JykucGZWYWx1ZTtcbiAgdmFyIHBhZGRpbmdUb3AgPSBub2RlLnBzdHlsZSgncGFkZGluZy10b3AnKS5wZlZhbHVlO1xuICB2YXIgcGFkZGluZ0JvdHRvbSA9IG5vZGUucHN0eWxlKCdwYWRkaW5nLWJvdHRvbScpLnBmVmFsdWU7XG4gIHZhciBub2RlUG9zID0gX3AucG9zaXRpb247XG4gIHZhciB0ZXh0SGFsaWduID0gbm9kZS5wc3R5bGUoICd0ZXh0LWhhbGlnbicgKS5zdHJWYWx1ZTtcbiAgdmFyIHRleHRWYWxpZ24gPSBub2RlLnBzdHlsZSggJ3RleHQtdmFsaWduJyApLnN0clZhbHVlO1xuICB2YXIgcnMgPSBfcC5yc2NyYXRjaDtcbiAgdmFyIHJzdHlsZSA9IF9wLnJzdHlsZTtcblxuICBzd2l0Y2goIHRleHRIYWxpZ24gKXtcbiAgICBjYXNlICdsZWZ0JzpcbiAgICAgIHRleHRYID0gbm9kZVBvcy54IC0gbm9kZVdpZHRoIC8gMiAtIHBhZGRpbmdMZWZ0O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdyaWdodCc6XG4gICAgICB0ZXh0WCA9IG5vZGVQb3MueCArIG5vZGVXaWR0aCAvIDIgKyBwYWRkaW5nUmlnaHQ7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6IC8vIGUuZy4gY2VudGVyXG4gICAgICB0ZXh0WCA9IG5vZGVQb3MueDtcbiAgfVxuXG4gIHN3aXRjaCggdGV4dFZhbGlnbiApe1xuICAgIGNhc2UgJ3RvcCc6XG4gICAgICB0ZXh0WSA9IG5vZGVQb3MueSAtIG5vZGVIZWlnaHQgLyAyIC0gcGFkZGluZ1RvcDtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIHRleHRZID0gbm9kZVBvcy55ICsgbm9kZUhlaWdodCAvIDIgKyBwYWRkaW5nQm90dG9tO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OiAvLyBlLmcuIG1pZGRsZVxuICAgICAgdGV4dFkgPSBub2RlUG9zLnk7XG4gIH1cblxuICBycy5sYWJlbFggPSB0ZXh0WDtcbiAgcnMubGFiZWxZID0gdGV4dFk7XG4gIHJzdHlsZS5sYWJlbFggPSB0ZXh0WDtcbiAgcnN0eWxlLmxhYmVsWSA9IHRleHRZO1xuXG4gIHRoaXMuYXBwbHlMYWJlbERpbWVuc2lvbnMoIG5vZGUgKTtcbn07XG5cbkJScC5yZWNhbGN1bGF0ZUVkZ2VMYWJlbFByb2plY3Rpb25zID0gZnVuY3Rpb24oIGVkZ2UgKXtcbiAgdmFyIHA7XG4gIHZhciBfcCA9IGVkZ2UuX3ByaXZhdGU7XG4gIHZhciBycyA9IF9wLnJzY3JhdGNoO1xuICB2YXIgciA9IHRoaXM7XG4gIHZhciBjb250ZW50ID0ge1xuICAgIG1pZDogZWRnZS5wc3R5bGUoJ2xhYmVsJykuc3RyVmFsdWUsXG4gICAgc291cmNlOiBlZGdlLnBzdHlsZSgnc291cmNlLWxhYmVsJykuc3RyVmFsdWUsXG4gICAgdGFyZ2V0OiBlZGdlLnBzdHlsZSgndGFyZ2V0LWxhYmVsJykuc3RyVmFsdWVcbiAgfTtcblxuICBpZiggY29udGVudC5taWQgfHwgY29udGVudC5zb3VyY2UgfHwgY29udGVudC50YXJnZXQgKXtcbiAgICAvLyB0aGVuIHdlIGhhdmUgdG8gY2FsY3VsYXRlLi4uXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuOyAvLyBubyBsYWJlbHMgPT4gbm8gY2FsY3NcbiAgfVxuXG4gIC8vIGFkZCBjZW50ZXIgcG9pbnQgdG8gc3R5bGUgc28gYm91bmRpbmcgYm94IGNhbGN1bGF0aW9ucyBjYW4gdXNlIGl0XG4gIC8vXG4gIHAgPSB7XG4gICAgeDogcnMubWlkWCxcbiAgICB5OiBycy5taWRZXG4gIH07XG5cbiAgdmFyIHNldFJzID0gZnVuY3Rpb24oIHByb3BOYW1lLCBwcmVmaXgsIHZhbHVlICl7XG4gICAgdXRpbC5zZXRQcmVmaXhlZFByb3BlcnR5KCBfcC5yc2NyYXRjaCwgcHJvcE5hbWUsIHByZWZpeCwgdmFsdWUgKTtcbiAgICB1dGlsLnNldFByZWZpeGVkUHJvcGVydHkoIF9wLnJzdHlsZSwgcHJvcE5hbWUsIHByZWZpeCwgdmFsdWUgKTtcbiAgfTtcblxuICBzZXRScyggJ2xhYmVsWCcsIG51bGwsIHAueCApO1xuICBzZXRScyggJ2xhYmVsWScsIG51bGwsIHAueSApO1xuXG4gIHZhciBjcmVhdGVDb250cm9sUG9pbnRJbmZvID0gZnVuY3Rpb24oKXtcbiAgICBpZiggY3JlYXRlQ29udHJvbFBvaW50SW5mby5jYWNoZSApeyByZXR1cm4gY3JlYXRlQ29udHJvbFBvaW50SW5mby5jYWNoZTsgfSAvLyB1c2UgY2FjaGUgc28gb25seSAxeCBwZXIgZWRnZVxuXG4gICAgdmFyIGN0cmxwdHMgPSBbXTtcblxuICAgIC8vIHN0b3JlIGVhY2ggY3RybHB0IGluZm8gaW5pdFxuICAgIGZvciggdmFyIGkgPSAwOyBpICsgNSA8IHJzLmFsbHB0cy5sZW5ndGg7IGkgKz0gNCApe1xuICAgICAgdmFyIHAwID0geyB4OiBycy5hbGxwdHNbaV0sIHk6IHJzLmFsbHB0c1tpKzFdIH07XG4gICAgICB2YXIgcDEgPSB7IHg6IHJzLmFsbHB0c1tpKzJdLCB5OiBycy5hbGxwdHNbaSszXSB9OyAvLyBjdHJscHRcbiAgICAgIHZhciBwMiA9IHsgeDogcnMuYWxscHRzW2krNF0sIHk6IHJzLmFsbHB0c1tpKzVdIH07XG5cbiAgICAgIGN0cmxwdHMucHVzaCh7XG4gICAgICAgIHAwOiBwMCxcbiAgICAgICAgcDE6IHAxLFxuICAgICAgICBwMjogcDIsXG4gICAgICAgIHN0YXJ0RGlzdDogMCxcbiAgICAgICAgbGVuZ3RoOiAwLFxuICAgICAgICBzZWdtZW50czogW11cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBicHRzID0gX3AucnN0eWxlLmJlemllclB0cztcbiAgICB2YXIgblByb2pzID0gci5iZXppZXJQcm9qUGN0cy5sZW5ndGg7XG5cbiAgICBmdW5jdGlvbiBhZGRTZWdtZW50KCBjcCwgcDAsIHAxLCB0MCwgdDEgKXtcbiAgICAgIHZhciBsZW5ndGggPSBtYXRoLmRpc3QoIHAwLCBwMSApO1xuICAgICAgdmFyIHByZXZTZWdtZW50ID0gY3Auc2VnbWVudHNbIGNwLnNlZ21lbnRzLmxlbmd0aCAtIDEgXTtcbiAgICAgIHZhciBzZWdtZW50ID0ge1xuICAgICAgICBwMDogcDAsXG4gICAgICAgIHAxOiBwMSxcbiAgICAgICAgdDA6IHQwLFxuICAgICAgICB0MTogdDEsXG4gICAgICAgIHN0YXJ0RGlzdDogcHJldlNlZ21lbnQgPyBwcmV2U2VnbWVudC5zdGFydERpc3QgKyBwcmV2U2VnbWVudC5sZW5ndGggOiAwLFxuICAgICAgICBsZW5ndGg6IGxlbmd0aFxuICAgICAgfTtcblxuICAgICAgY3Auc2VnbWVudHMucHVzaCggc2VnbWVudCApO1xuXG4gICAgICBjcC5sZW5ndGggKz0gbGVuZ3RoO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBlYWNoIGN0cmxwdCB3aXRoIHNlZ21lbnQgaW5mb1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgY3RybHB0cy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGNwID0gY3RybHB0c1tpXTtcbiAgICAgIHZhciBwcmV2Q3AgPSBjdHJscHRzW2kgLSAxXTtcblxuICAgICAgaWYoIHByZXZDcCApe1xuICAgICAgICBjcC5zdGFydERpc3QgPSBwcmV2Q3Auc3RhcnREaXN0ICsgcHJldkNwLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgYWRkU2VnbWVudChcbiAgICAgICAgY3AsXG4gICAgICAgIGNwLnAwLCAgIGJwdHNbIGkgKiBuUHJvanMgXSxcbiAgICAgICAgMCwgICAgICAgci5iZXppZXJQcm9qUGN0c1sgMCBdXG4gICAgICApOyAvLyBmaXJzdFxuXG4gICAgICBmb3IoIHZhciBqID0gMDsgaiA8IG5Qcm9qcyAtIDE7IGorKyApe1xuICAgICAgICBhZGRTZWdtZW50KFxuICAgICAgICAgIGNwLFxuICAgICAgICAgIGJwdHNbIGkgKiBuUHJvanMgKyBqIF0sICAgYnB0c1sgaSAqIG5Qcm9qcyArIGogKyAxIF0sXG4gICAgICAgICAgci5iZXppZXJQcm9qUGN0c1sgaiBdLCAgICByLmJlemllclByb2pQY3RzWyBqICsgMSBdXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGFkZFNlZ21lbnQoXG4gICAgICAgIGNwLFxuICAgICAgICBicHRzWyBpICogblByb2pzICsgblByb2pzIC0gMSBdLCAgIGNwLnAyLFxuICAgICAgICByLmJlemllclByb2pQY3RzWyBuUHJvanMgLSAxIF0sICAgIDFcbiAgICAgICk7IC8vIGxhc3RcbiAgICB9XG5cbiAgICByZXR1cm4gKCBjcmVhdGVDb250cm9sUG9pbnRJbmZvLmNhY2hlID0gY3RybHB0cyApO1xuICB9O1xuXG4gIHZhciBjYWxjdWxhdGVFbmRQcm9qZWN0aW9uID0gZnVuY3Rpb24oIHByZWZpeCApe1xuICAgIHZhciBhbmdsZTtcbiAgICB2YXIgaXNTcmMgPSBwcmVmaXggPT09ICdzb3VyY2UnO1xuXG4gICAgaWYoICFjb250ZW50WyBwcmVmaXggXSApeyByZXR1cm47IH1cblxuICAgIHZhciBvZmZzZXQgPSBlZGdlLnBzdHlsZShwcmVmaXgrJy10ZXh0LW9mZnNldCcpLnBmVmFsdWU7XG5cbiAgICB2YXIgbGluZUFuZ2xlID0gZnVuY3Rpb24oIHAwLCBwMSApe1xuICAgICAgdmFyIGR4ID0gcDEueCAtIHAwLng7XG4gICAgICB2YXIgZHkgPSBwMS55IC0gcDAueTtcblxuICAgICAgcmV0dXJuIE1hdGguYXRhbiggZHkgLyBkeCApO1xuICAgIH07XG5cbiAgICB2YXIgYmV6aWVyQW5nbGUgPSBmdW5jdGlvbiggcDAsIHAxLCBwMiwgdCApe1xuICAgICAgdmFyIHQwID0gbWF0aC5ib3VuZCggMCwgdCAtIDAuMDAxLCAxICk7XG4gICAgICB2YXIgdDEgPSBtYXRoLmJvdW5kKCAwLCB0ICsgMC4wMDEsIDEgKTtcblxuICAgICAgdmFyIGxwMCA9IG1hdGgucWJlemllclB0QXQoIHAwLCBwMSwgcDIsIHQwICk7XG4gICAgICB2YXIgbHAxID0gbWF0aC5xYmV6aWVyUHRBdCggcDAsIHAxLCBwMiwgdDEgKTtcblxuICAgICAgcmV0dXJuIGxpbmVBbmdsZSggbHAwLCBscDEgKTtcbiAgICB9O1xuXG4gICAgc3dpdGNoKCBycy5lZGdlVHlwZSApe1xuICAgICAgY2FzZSAnc2VsZic6XG4gICAgICBjYXNlICdjb21wb3VuZCc6XG4gICAgICBjYXNlICdiZXppZXInOlxuICAgICAgY2FzZSAnbXVsdGliZXppZXInOlxuICAgICAgICB2YXIgY3BzID0gY3JlYXRlQ29udHJvbFBvaW50SW5mbygpO1xuICAgICAgICB2YXIgc2VsZWN0ZWQ7XG4gICAgICAgIHZhciBzdGFydERpc3QgPSAwO1xuICAgICAgICB2YXIgdG90YWxEaXN0ID0gMDtcblxuICAgICAgICAvLyBmaW5kIHRoZSBzZWdtZW50IHdlJ3JlIG9uXG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgY3BzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgICAgdmFyIGNwID0gY3BzWyBpc1NyYyA/IGkgOiBjcHMubGVuZ3RoIC0gMSAtIGkgXTtcblxuICAgICAgICAgIGZvciggdmFyIGogPSAwOyBqIDwgY3Auc2VnbWVudHMubGVuZ3RoOyBqKysgKXtcbiAgICAgICAgICAgIHZhciBzZWcgPSBjcC5zZWdtZW50c1sgaXNTcmMgPyBqIDogY3Auc2VnbWVudHMubGVuZ3RoIC0gMSAtIGogXTtcbiAgICAgICAgICAgIHZhciBsYXN0U2VnID0gaSA9PT0gY3BzLmxlbmd0aCAtIDEgJiYgaiA9PT0gY3Auc2VnbWVudHMubGVuZ3RoIC0gMTtcblxuICAgICAgICAgICAgc3RhcnREaXN0ID0gdG90YWxEaXN0O1xuICAgICAgICAgICAgdG90YWxEaXN0ICs9IHNlZy5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmKCB0b3RhbERpc3QgPj0gb2Zmc2V0IHx8IGxhc3RTZWcgKXtcbiAgICAgICAgICAgICAgc2VsZWN0ZWQgPSB7IGNwOiBjcCwgc2VnbWVudDogc2VnIH07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKCBzZWxlY3RlZCApeyBicmVhazsgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNwID0gc2VsZWN0ZWQuY3A7XG4gICAgICAgIHZhciBzZWcgPSBzZWxlY3RlZC5zZWdtZW50O1xuICAgICAgICB2YXIgdFNlZ21lbnQgPSAoIG9mZnNldCAtIHN0YXJ0RGlzdCApIC8gKCBzZWcubGVuZ3RoICk7XG4gICAgICAgIHZhciBzZWdEdCA9IHNlZy50MSAtIHNlZy50MDtcbiAgICAgICAgdmFyIHQgPSBpc1NyYyA/IHNlZy50MCArIHNlZ0R0ICogdFNlZ21lbnQgOiBzZWcudDEgLSBzZWdEdCAqIHRTZWdtZW50O1xuXG4gICAgICAgIHQgPSBtYXRoLmJvdW5kKCAwLCB0LCAxICk7XG4gICAgICAgIHAgPSBtYXRoLnFiZXppZXJQdEF0KCBjcC5wMCwgY3AucDEsIGNwLnAyLCB0ICk7XG4gICAgICAgIGFuZ2xlID0gYmV6aWVyQW5nbGUoIGNwLnAwLCBjcC5wMSwgY3AucDIsIHQsIHAgKTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc3RyYWlnaHQnOlxuICAgICAgY2FzZSAnc2VnbWVudHMnOlxuICAgICAgY2FzZSAnaGF5c3RhY2snOlxuICAgICAgICB2YXIgZCA9IDAsIGRpLCBkMDtcbiAgICAgICAgdmFyIHAwLCBwMTtcbiAgICAgICAgdmFyIGwgPSBycy5hbGxwdHMubGVuZ3RoO1xuXG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpICsgMyA8IGw7IGkgKz0gMiApe1xuICAgICAgICAgIGlmKCBpc1NyYyApe1xuICAgICAgICAgICAgcDAgPSB7IHg6IHJzLmFsbHB0c1tpXSwgICAgIHk6IHJzLmFsbHB0c1tpKzFdIH07XG4gICAgICAgICAgICBwMSA9IHsgeDogcnMuYWxscHRzW2krMl0sICAgeTogcnMuYWxscHRzW2krM10gfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcDAgPSB7IHg6IHJzLmFsbHB0c1tsLTItaV0sIHk6IHJzLmFsbHB0c1tsLTEtaV0gfTtcbiAgICAgICAgICAgIHAxID0geyB4OiBycy5hbGxwdHNbbC00LWldLCB5OiBycy5hbGxwdHNbbC0zLWldIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGkgPSBtYXRoLmRpc3QoIHAwLCBwMSApO1xuICAgICAgICAgIGQwID0gZDtcbiAgICAgICAgICBkICs9IGRpO1xuXG4gICAgICAgICAgaWYoIGQgPj0gb2Zmc2V0ICl7IGJyZWFrOyB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcEQgPSBvZmZzZXQgLSBkMDtcbiAgICAgICAgdmFyIHQgPSBwRCAvIGRpO1xuXG4gICAgICAgIHQgID0gbWF0aC5ib3VuZCggMCwgdCwgMSApO1xuICAgICAgICBwID0gbWF0aC5saW5lQXQoIHAwLCBwMSwgdCApO1xuICAgICAgICBhbmdsZSA9IGxpbmVBbmdsZSggcDAsIHAxICk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc2V0UnMoICdsYWJlbFgnLCBwcmVmaXgsIHAueCApO1xuICAgIHNldFJzKCAnbGFiZWxZJywgcHJlZml4LCBwLnkgKTtcbiAgICBzZXRScyggJ2xhYmVsQXV0b0FuZ2xlJywgcHJlZml4LCBhbmdsZSApO1xuICB9O1xuXG4gIGNhbGN1bGF0ZUVuZFByb2plY3Rpb24oICdzb3VyY2UnICk7XG4gIGNhbGN1bGF0ZUVuZFByb2plY3Rpb24oICd0YXJnZXQnICk7XG5cbiAgdGhpcy5hcHBseUxhYmVsRGltZW5zaW9ucyggZWRnZSApO1xufTtcblxuQlJwLmFwcGx5TGFiZWxEaW1lbnNpb25zID0gZnVuY3Rpb24oIGVsZSApe1xuICB0aGlzLmFwcGx5UHJlZml4ZWRMYWJlbERpbWVuc2lvbnMoIGVsZSApO1xuXG4gIGlmKCBlbGUuaXNFZGdlKCkgKXtcbiAgICB0aGlzLmFwcGx5UHJlZml4ZWRMYWJlbERpbWVuc2lvbnMoIGVsZSwgJ3NvdXJjZScgKTtcbiAgICB0aGlzLmFwcGx5UHJlZml4ZWRMYWJlbERpbWVuc2lvbnMoIGVsZSwgJ3RhcmdldCcgKTtcbiAgfVxufTtcblxuQlJwLmFwcGx5UHJlZml4ZWRMYWJlbERpbWVuc2lvbnMgPSBmdW5jdGlvbiggZWxlLCBwcmVmaXggKXtcbiAgdmFyIF9wID0gZWxlLl9wcml2YXRlO1xuXG4gIHZhciB0ZXh0ID0gdGhpcy5nZXRMYWJlbFRleHQoIGVsZSwgcHJlZml4ICk7XG4gIHZhciBsYWJlbERpbXMgPSB0aGlzLmNhbGN1bGF0ZUxhYmVsRGltZW5zaW9ucyggZWxlLCB0ZXh0ICk7XG5cbiAgdXRpbC5zZXRQcmVmaXhlZFByb3BlcnR5KCBfcC5yc3R5bGUsICAgJ2xhYmVsV2lkdGgnLCBwcmVmaXgsIGxhYmVsRGltcy53aWR0aCApO1xuICB1dGlsLnNldFByZWZpeGVkUHJvcGVydHkoIF9wLnJzY3JhdGNoLCAnbGFiZWxXaWR0aCcsIHByZWZpeCwgbGFiZWxEaW1zLndpZHRoICk7XG5cbiAgdXRpbC5zZXRQcmVmaXhlZFByb3BlcnR5KCBfcC5yc3R5bGUsICAgJ2xhYmVsSGVpZ2h0JywgcHJlZml4LCBsYWJlbERpbXMuaGVpZ2h0ICk7XG4gIHV0aWwuc2V0UHJlZml4ZWRQcm9wZXJ0eSggX3AucnNjcmF0Y2gsICdsYWJlbEhlaWdodCcsIHByZWZpeCwgbGFiZWxEaW1zLmhlaWdodCApO1xufTtcblxuQlJwLmdldExhYmVsVGV4dCA9IGZ1bmN0aW9uKCBlbGUsIHByZWZpeCApe1xuICB2YXIgX3AgPSBlbGUuX3ByaXZhdGU7XG4gIHZhciBwZmQgPSBwcmVmaXggPyBwcmVmaXggKyAnLScgOiAnJztcbiAgdmFyIHRleHQgPSBlbGUucHN0eWxlKCBwZmQgKyAnbGFiZWwnICkuc3RyVmFsdWU7XG4gIHZhciB0ZXh0VHJhbnNmb3JtID0gZWxlLnBzdHlsZSggJ3RleHQtdHJhbnNmb3JtJyApLnZhbHVlO1xuICB2YXIgcnNjcmF0Y2ggPSBmdW5jdGlvbiggcHJvcE5hbWUsIHZhbHVlICl7XG4gICAgaWYoIHZhbHVlICl7XG4gICAgICB1dGlsLnNldFByZWZpeGVkUHJvcGVydHkoIF9wLnJzY3JhdGNoLCBwcm9wTmFtZSwgcHJlZml4LCB2YWx1ZSApO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdXRpbC5nZXRQcmVmaXhlZFByb3BlcnR5KCBfcC5yc2NyYXRjaCwgcHJvcE5hbWUsIHByZWZpeCApO1xuICAgIH1cbiAgfTtcblxuICBpZiggdGV4dFRyYW5zZm9ybSA9PSAnbm9uZScgKXtcbiAgICAvLyBwYXNzdGhyb3VnaFxuICB9IGVsc2UgaWYoIHRleHRUcmFuc2Zvcm0gPT0gJ3VwcGVyY2FzZScgKXtcbiAgICB0ZXh0ID0gdGV4dC50b1VwcGVyQ2FzZSgpO1xuICB9IGVsc2UgaWYoIHRleHRUcmFuc2Zvcm0gPT0gJ2xvd2VyY2FzZScgKXtcbiAgICB0ZXh0ID0gdGV4dC50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgdmFyIHdyYXBTdHlsZSA9IGVsZS5wc3R5bGUoICd0ZXh0LXdyYXAnICkudmFsdWU7XG5cbiAgaWYoIHdyYXBTdHlsZSA9PT0gJ3dyYXAnICl7XG4gICAgLy9jb25zb2xlLmxvZygnd3JhcCcpO1xuXG4gICAgdmFyIGxhYmVsS2V5ID0gcnNjcmF0Y2goICdsYWJlbEtleScgKTtcblxuICAgIC8vIHNhdmUgcmVjYWxjIGlmIHRoZSBsYWJlbCBpcyB0aGUgc2FtZSBhcyBiZWZvcmVcbiAgICBpZiggbGFiZWxLZXkgJiYgcnNjcmF0Y2goICdsYWJlbFdyYXBLZXknICkgPT09IGxhYmVsS2V5ICl7XG4gICAgICAvLyBjb25zb2xlLmxvZygnd3JhcCBjYWNoZSBoaXQnKTtcbiAgICAgIHJldHVybiByc2NyYXRjaCggJ2xhYmVsV3JhcENhY2hlZFRleHQnICk7XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKCd3cmFwIGNhY2hlIG1pc3MnKTtcblxuICAgIHZhciBsaW5lcyA9IHRleHQuc3BsaXQoICdcXG4nICk7XG4gICAgdmFyIG1heFcgPSBlbGUucHN0eWxlKCAndGV4dC1tYXgtd2lkdGgnICkucGZWYWx1ZTtcbiAgICB2YXIgd3JhcHBlZExpbmVzID0gW107XG5cbiAgICBmb3IoIHZhciBsID0gMDsgbCA8IGxpbmVzLmxlbmd0aDsgbCsrICl7XG4gICAgICB2YXIgbGluZSA9IGxpbmVzWyBsIF07XG4gICAgICB2YXIgbGluZURpbXMgPSB0aGlzLmNhbGN1bGF0ZUxhYmVsRGltZW5zaW9ucyggZWxlLCBsaW5lLCAnbGluZT0nICsgbGluZSApO1xuICAgICAgdmFyIGxpbmVXID0gbGluZURpbXMud2lkdGg7XG5cbiAgICAgIGlmKCBsaW5lVyA+IG1heFcgKXsgLy8gbGluZSBpcyB0b28gbG9uZ1xuICAgICAgICB2YXIgd29yZHMgPSBsaW5lLnNwbGl0KCAvXFxzKy8gKTsgLy8gTkI6IGFzc3VtZSBjb2xsYXBzZWQgd2hpdGVzcGFjZSBpbnRvIHNpbmdsZSBzcGFjZVxuICAgICAgICB2YXIgc3VibGluZSA9ICcnO1xuXG4gICAgICAgIGZvciggdmFyIHcgPSAwOyB3IDwgd29yZHMubGVuZ3RoOyB3KysgKXtcbiAgICAgICAgICB2YXIgd29yZCA9IHdvcmRzWyB3IF07XG4gICAgICAgICAgdmFyIHRlc3RMaW5lID0gc3VibGluZS5sZW5ndGggPT09IDAgPyB3b3JkIDogc3VibGluZSArICcgJyArIHdvcmQ7XG4gICAgICAgICAgdmFyIHRlc3REaW1zID0gdGhpcy5jYWxjdWxhdGVMYWJlbERpbWVuc2lvbnMoIGVsZSwgdGVzdExpbmUsICd0ZXN0TGluZT0nICsgdGVzdExpbmUgKTtcbiAgICAgICAgICB2YXIgdGVzdFcgPSB0ZXN0RGltcy53aWR0aDtcblxuICAgICAgICAgIGlmKCB0ZXN0VyA8PSBtYXhXICl7IC8vIHdvcmQgZml0cyBvbiBjdXJyZW50IGxpbmVcbiAgICAgICAgICAgIHN1YmxpbmUgKz0gd29yZCArICcgJztcbiAgICAgICAgICB9IGVsc2UgeyAvLyB3b3JkIHN0YXJ0cyBuZXcgbGluZVxuICAgICAgICAgICAgd3JhcHBlZExpbmVzLnB1c2goIHN1YmxpbmUgKTtcbiAgICAgICAgICAgIHN1YmxpbmUgPSB3b3JkICsgJyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHRoZXJlJ3MgcmVtYWluaW5nIHRleHQsIHB1dCBpdCBpbiBhIHdyYXBwZWQgbGluZVxuICAgICAgICBpZiggIXN1YmxpbmUubWF0Y2goIC9eXFxzKyQvICkgKXtcbiAgICAgICAgICB3cmFwcGVkTGluZXMucHVzaCggc3VibGluZSApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgeyAvLyBsaW5lIGlzIGFscmVhZHkgc2hvcnQgZW5vdWdoXG4gICAgICAgIHdyYXBwZWRMaW5lcy5wdXNoKCBsaW5lICk7XG4gICAgICB9XG4gICAgfSAvLyBmb3JcblxuICAgIHJzY3JhdGNoKCAnbGFiZWxXcmFwQ2FjaGVkTGluZXMnLCB3cmFwcGVkTGluZXMgKTtcbiAgICB0ZXh0ID0gcnNjcmF0Y2goICdsYWJlbFdyYXBDYWNoZWRUZXh0Jywgd3JhcHBlZExpbmVzLmpvaW4oICdcXG4nICkgKTtcbiAgICByc2NyYXRjaCggJ2xhYmVsV3JhcEtleScsIGxhYmVsS2V5ICk7XG5cbiAgICAvLyBjb25zb2xlLmxvZyh0ZXh0KVxuICB9IGVsc2UgaWYoIHdyYXBTdHlsZSA9PT0gJ2VsbGlwc2lzJyApe1xuICAgIHZhciBtYXhXID0gZWxlLnBzdHlsZSggJ3RleHQtbWF4LXdpZHRoJyApLnBmVmFsdWU7XG4gICAgdmFyIGVsbGlwc2l6ZWQgPSAnJztcbiAgICB2YXIgZWxsaXBzaXMgPSAnXFx1MjAyNic7XG4gICAgdmFyIGluY0xhc3RDaCA9IGZhbHNlO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrICl7XG4gICAgICB2YXIgd2lkdGhXaXRoTmV4dENoID0gdGhpcy5jYWxjdWxhdGVMYWJlbERpbWVuc2lvbnMoIGVsZSwgZWxsaXBzaXplZCArIHRleHRbaV0gKyBlbGxpcHNpcyApLndpZHRoO1xuXG4gICAgICBpZiggd2lkdGhXaXRoTmV4dENoID4gbWF4VyApeyBicmVhazsgfVxuXG4gICAgICBlbGxpcHNpemVkICs9IHRleHRbaV07XG5cbiAgICAgIGlmKCBpID09PSB0ZXh0Lmxlbmd0aCAtIDEgKXsgaW5jTGFzdENoID0gdHJ1ZTsgfVxuICAgIH1cblxuICAgIGlmKCAhaW5jTGFzdENoICl7XG4gICAgICBlbGxpcHNpemVkICs9IGVsbGlwc2lzO1xuICAgIH1cblxuICAgIHJldHVybiBlbGxpcHNpemVkO1xuICB9IC8vIGlmIGVsbGlwc2l6ZVxuXG4gIHJldHVybiB0ZXh0O1xufTtcblxuQlJwLmNhbGN1bGF0ZUxhYmVsRGltZW5zaW9ucyA9IGZ1bmN0aW9uKCBlbGUsIHRleHQsIGV4dHJhS2V5ICl7XG4gIHZhciByID0gdGhpcztcblxuICB2YXIgY2FjaGVLZXkgPSBlbGUuX3ByaXZhdGUubGFiZWxTdHlsZUtleSArICckQCQnICsgdGV4dDtcblxuICBpZiggZXh0cmFLZXkgKXtcbiAgICBjYWNoZUtleSArPSAnJEAkJyArIGV4dHJhS2V5O1xuICB9XG5cbiAgdmFyIGNhY2hlID0gci5sYWJlbERpbUNhY2hlIHx8IChyLmxhYmVsRGltQ2FjaGUgPSB7fSk7XG5cbiAgaWYoIGNhY2hlWyBjYWNoZUtleSBdICl7XG4gICAgcmV0dXJuIGNhY2hlWyBjYWNoZUtleSBdO1xuICB9XG5cbiAgdmFyIHNpemVNdWx0ID0gMTsgLy8gaW5jcmVhc2UgdGhlIHNjYWxlIHRvIGluY3JlYXNlIGFjY3VyYWN5IHcuci50LiB6b29tZWQgdGV4dFxuICB2YXIgZlN0eWxlID0gZWxlLnBzdHlsZSggJ2ZvbnQtc3R5bGUnICkuc3RyVmFsdWU7XG4gIHZhciBzaXplID0gKCBzaXplTXVsdCAqIGVsZS5wc3R5bGUoICdmb250LXNpemUnICkucGZWYWx1ZSApICsgJ3B4JztcbiAgdmFyIGZhbWlseSA9IGVsZS5wc3R5bGUoICdmb250LWZhbWlseScgKS5zdHJWYWx1ZTtcbiAgdmFyIHdlaWdodCA9IGVsZS5wc3R5bGUoICdmb250LXdlaWdodCcgKS5zdHJWYWx1ZTtcblxuICB2YXIgZGl2ID0gdGhpcy5sYWJlbENhbGNEaXY7XG5cbiAgaWYoICFkaXYgKXtcbiAgICBkaXYgPSB0aGlzLmxhYmVsQ2FsY0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCBkaXYgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICB9XG5cbiAgdmFyIGRzID0gZGl2LnN0eWxlO1xuXG4gIC8vIGZyb20gZWxlIHN0eWxlXG4gIGRzLmZvbnRGYW1pbHkgPSBmYW1pbHk7XG4gIGRzLmZvbnRTdHlsZSA9IGZTdHlsZTtcbiAgZHMuZm9udFNpemUgPSBzaXplO1xuICBkcy5mb250V2VpZ2h0ID0gd2VpZ2h0O1xuXG4gIC8vIGZvcmNlZCBzdHlsZVxuICBkcy5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIGRzLmxlZnQgPSAnLTk5OTlweCc7XG4gIGRzLnRvcCA9ICctOTk5OXB4JztcbiAgZHMuekluZGV4ID0gJy0xJztcbiAgZHMudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICBkcy5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xuICBkcy5wYWRkaW5nID0gJzAnO1xuICBkcy5saW5lSGVpZ2h0ID0gJzEnO1xuXG4gIGlmKCBlbGUucHN0eWxlKCAndGV4dC13cmFwJyApLnZhbHVlID09PSAnd3JhcCcgKXtcbiAgICBkcy53aGl0ZVNwYWNlID0gJ3ByZSc7IC8vIHNvIG5ld2xpbmVzIGFyZSB0YWtlbiBpbnRvIGFjY291bnRcbiAgfSBlbHNlIHtcbiAgICBkcy53aGl0ZVNwYWNlID0gJ25vcm1hbCc7XG4gIH1cblxuICAvLyBwdXQgbGFiZWwgY29udGVudCBpbiBkaXZcbiAgZGl2LnRleHRDb250ZW50ID0gdGV4dDtcblxuICBjYWNoZVsgY2FjaGVLZXkgXSA9IHtcbiAgICB3aWR0aDogTWF0aC5jZWlsKCBkaXYuY2xpZW50V2lkdGggLyBzaXplTXVsdCApLFxuICAgIGhlaWdodDogTWF0aC5jZWlsKCBkaXYuY2xpZW50SGVpZ2h0IC8gc2l6ZU11bHQgKVxuICB9O1xuXG4gIHJldHVybiBjYWNoZVsgY2FjaGVLZXkgXTtcbn07XG5cbkJScC5yZWNhbGN1bGF0ZUVkZ2VQcm9qZWN0aW9ucyA9IGZ1bmN0aW9uKCBlZGdlcyApe1xuICB0aGlzLmZpbmRFZGdlQ29udHJvbFBvaW50cyggZWRnZXMgKTtcbn07XG5cblxuLy8gRmluZCBlZGdlIGNvbnRyb2wgcG9pbnRzXG5CUnAuZmluZEVkZ2VDb250cm9sUG9pbnRzID0gZnVuY3Rpb24oIGVkZ2VzICl7XG4gIGlmKCAhZWRnZXMgfHwgZWRnZXMubGVuZ3RoID09PSAwICl7IHJldHVybjsgfVxuXG4gIHZhciByID0gdGhpcztcbiAgdmFyIGN5ID0gci5jeTtcbiAgdmFyIGhhc0NvbXBvdW5kcyA9IGN5Lmhhc0NvbXBvdW5kTm9kZXMoKTtcbiAgdmFyIGhhc2hUYWJsZSA9IHt9O1xuICB2YXIgcGFpcklkcyA9IFtdO1xuICB2YXIgaGF5c3RhY2tFZGdlcyA9IFtdO1xuXG4gIC8vIGNyZWF0ZSBhIHRhYmxlIG9mIGVkZ2UgKHNyYywgdGd0KSA9PiBsaXN0IG9mIGVkZ2VzIGJldHdlZW4gdGhlbVxuICB2YXIgcGFpcklkO1xuICBmb3IoIHZhciBpID0gMDsgaSA8IGVkZ2VzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGVkZ2UgPSBlZGdlc1sgaSBdO1xuICAgIHZhciBfcCA9IGVkZ2UuX3ByaXZhdGU7XG4gICAgdmFyIGRhdGEgPSBfcC5kYXRhO1xuICAgIHZhciBjdXJ2ZVN0eWxlID0gZWRnZS5wc3R5bGUoICdjdXJ2ZS1zdHlsZScgKS52YWx1ZTtcbiAgICB2YXIgZWRnZUlzVW5idW5kbGVkID0gY3VydmVTdHlsZSA9PT0gJ3VuYnVuZGxlZC1iZXppZXInIHx8IGN1cnZlU3R5bGUgPT09ICdzZWdtZW50cyc7XG5cbiAgICAvLyBpZ25vcmUgZWRnZXMgd2hvIGFyZSBub3QgdG8gYmUgZGlzcGxheWVkXG4gICAgLy8gdGhleSBzaG91bGRuJ3QgdGFrZSB1cCBzcGFjZVxuICAgIGlmKCBlZGdlLnBzdHlsZSggJ2Rpc3BsYXknKS52YWx1ZSA9PT0gJ25vbmUnICl7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiggY3VydmVTdHlsZSA9PT0gJ2hheXN0YWNrJyApe1xuICAgICAgaGF5c3RhY2tFZGdlcy5wdXNoKCBlZGdlICk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgc3JjSWQgPSBkYXRhLnNvdXJjZTtcbiAgICB2YXIgdGd0SWQgPSBkYXRhLnRhcmdldDtcblxuICAgIHBhaXJJZCA9IHNyY0lkID4gdGd0SWQgP1xuICAgICAgdGd0SWQgKyAnJC0kJyArIHNyY0lkIDpcbiAgICAgIHNyY0lkICsgJyQtJCcgKyB0Z3RJZCA7XG5cbiAgICBpZiggZWRnZUlzVW5idW5kbGVkICl7XG4gICAgICBwYWlySWQgPSAndW5idW5kbGVkJyArICckLSQnICsgZGF0YS5pZDtcbiAgICB9XG5cbiAgICBpZiggaGFzaFRhYmxlWyBwYWlySWQgXSA9PSBudWxsICl7XG4gICAgICBoYXNoVGFibGVbIHBhaXJJZCBdID0gW107XG4gICAgICBwYWlySWRzLnB1c2goIHBhaXJJZCApO1xuICAgIH1cblxuICAgIGhhc2hUYWJsZVsgcGFpcklkIF0ucHVzaCggZWRnZSApO1xuXG4gICAgaWYoIGVkZ2VJc1VuYnVuZGxlZCApe1xuICAgICAgaGFzaFRhYmxlWyBwYWlySWQgXS5oYXNVbmJ1bmRsZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzcmMsIHRndCwgc3JjX3AsIHRndF9wLCBzcmNQb3MsIHRndFBvcywgc3JjVywgc3JjSCwgdGd0VywgdGd0SCwgc3JjU2hhcGUsIHRndFNoYXBlO1xuICB2YXIgdmVjdG9yTm9ybUludmVyc2U7XG4gIHZhciBiYWRCZXppZXI7XG4gIHZhciBwb3J0c291cmNlLCBwb3J0dGFyZ2V0O1xuXG4gIC8vIGZvciBlYWNoIHBhaXIgKHNyYywgdGd0KSwgY3JlYXRlIHRoZSBjdHJsIHB0c1xuICAvLyBOZXN0ZWQgZm9yIGxvb3AgaXMgT0s7IHRvdGFsIG51bWJlciBvZiBpdGVyYXRpb25zIGZvciBib3RoIGxvb3BzID0gZWRnZUNvdW50XG4gIGZvciggdmFyIHAgPSAwOyBwIDwgcGFpcklkcy5sZW5ndGg7IHArKyApe1xuICAgIHBhaXJJZCA9IHBhaXJJZHNbIHAgXTtcbiAgICB2YXIgcGFpckVkZ2VzID0gaGFzaFRhYmxlWyBwYWlySWQgXTtcblxuICAgIC8vIGZvciBlYWNoIHBhaXIgaWQsIHRoZSBlZGdlcyBzaG91bGQgYmUgc29ydGVkIGJ5IGluZGV4XG4gICAgcGFpckVkZ2VzLnNvcnQoIGZ1bmN0aW9uKCBlZGdlMSwgZWRnZTIgKXtcbiAgICAgIHJldHVybiBlZGdlMS5wb29sSW5kZXgoKSAtIGVkZ2UyLnBvb2xJbmRleCgpO1xuICAgIH0gKTtcblxuICAgIHNyYyA9IHBhaXJFZGdlc1swXS5fcHJpdmF0ZS5zb3VyY2U7XG4gICAgdGd0ID0gcGFpckVkZ2VzWzBdLl9wcml2YXRlLnRhcmdldDtcbiAgICBcbiAgICBwb3J0c291cmNlID0gcGFpckVkZ2VzWzBdLmRhdGEoJ3BvcnRzb3VyY2UnKTtcbiAgICBwb3J0dGFyZ2V0ID0gcGFpckVkZ2VzWzBdLmRhdGEoJ3BvcnR0YXJnZXQnKTtcblxuICAgIC8vIG1ha2Ugc3VyZSBzcmMvdGd0IGRpc3RpbmN0aW9uIGlzIGNvbnNpc3RlbnQgZm9yIGJ1bmRsZWQgZWRnZXNcbiAgICBpZiggIXBhaXJFZGdlcy5oYXNVbmJ1bmRsZWQgJiYgc3JjLmlkKCkgPiB0Z3QuaWQoKSApe1xuICAgICAgdmFyIHRlbXAgPSBzcmM7XG4gICAgICBzcmMgPSB0Z3Q7XG4gICAgICB0Z3QgPSB0ZW1wO1xuICAgICAgXG4gICAgICB0ZW1wID0gcG9ydHNvdXJjZTtcbiAgICAgIHBvcnRzb3VyY2UgPSBwb3J0dGFyZ2V0O1xuICAgICAgcG9ydHRhcmdldCA9IHRlbXA7XG4gICAgfVxuXG4gICAgc3JjX3AgPSBzcmMuX3ByaXZhdGU7XG4gICAgdGd0X3AgPSB0Z3QuX3ByaXZhdGU7XG5cbiAgICBzcmNQb3MgPSBzcmNfcC5wb3NpdGlvbjtcbiAgICB0Z3RQb3MgPSB0Z3RfcC5wb3NpdGlvbjtcblxuICAgIHNyY1cgPSBzcmMub3V0ZXJXaWR0aCgpO1xuICAgIHNyY0ggPSBzcmMub3V0ZXJIZWlnaHQoKTtcblxuICAgIHRndFcgPSB0Z3Qub3V0ZXJXaWR0aCgpO1xuICAgIHRndEggPSB0Z3Qub3V0ZXJIZWlnaHQoKTtcblxuICAgIHNyY1NoYXBlID0gci5ub2RlU2hhcGVzWyB0aGlzLmdldE5vZGVTaGFwZSggc3JjICkgXTtcbiAgICB0Z3RTaGFwZSA9IHIubm9kZVNoYXBlc1sgdGhpcy5nZXROb2RlU2hhcGUoIHRndCApIF07XG5cbiAgICBiYWRCZXppZXIgPSBmYWxzZTtcblxuXG4gICAgaWYoIChwYWlyRWRnZXMubGVuZ3RoID4gMSAmJiBzcmMgIT09IHRndCkgfHwgcGFpckVkZ2VzLmhhc1VuYnVuZGxlZCApe1xuXG4gICAgICAvLyBwdCBvdXRzaWRlIHNyYyBzaGFwZSB0byBjYWxjIGRpc3RhbmNlL2Rpc3BsYWNlbWVudCBmcm9tIHNyYyB0byB0Z3RcbiAgICAgIHZhciBzcmNPdXRzaWRlO1xuICAgICAgaWYoc2Jnbi5pc05vZGVTaGFwZVRvdGFsbHlPdmVycmlkZW4odGhpcywgc3JjKSkgeyBcbiAgICAgICAgc3JjT3V0c2lkZSA9IHNyY1NoYXBlLmludGVyc2VjdExpbmUoc3JjLCB0Z3RQb3MueCwgdGd0UG9zLnksIHBvcnRzb3VyY2UpO1xuICAgICAgfVxuICAgICAgZWxzZVxuICAgICAgICBzcmNPdXRzaWRlID0gc3JjU2hhcGUuaW50ZXJzZWN0TGluZShcbiAgICAgICAgICBzcmNQb3MueCxcbiAgICAgICAgICBzcmNQb3MueSxcbiAgICAgICAgICBzcmNXLFxuICAgICAgICAgIHNyY0gsXG4gICAgICAgICAgdGd0UG9zLngsXG4gICAgICAgICAgdGd0UG9zLnksXG4gICAgICAgICAgMFxuICAgICAgICApO1xuXG4gICAgICAvLyBwdCBvdXRzaWRlIHRndCBzaGFwZSB0byBjYWxjIGRpc3RhbmNlL2Rpc3BsYWNlbWVudCBmcm9tIHNyYyB0byB0Z3RcbiAgICAgIHZhciB0Z3RPdXRzaWRlO1xuICAgICAgaWYoc2Jnbi5pc05vZGVTaGFwZVRvdGFsbHlPdmVycmlkZW4odGhpcywgdGd0KSl7XG4gICAgICAgIHRndE91dHNpZGUgPSB0Z3RTaGFwZS5pbnRlcnNlY3RMaW5lKHRndCwgc3JjUG9zLngsIHNyY1Bvcy55LCBwb3J0dGFyZ2V0KTtcbiAgICAgIH1cbiAgICAgIGVsc2VcbiAgICAgICAgdGd0T3V0c2lkZSA9IHRndFNoYXBlLmludGVyc2VjdExpbmUoXG4gICAgICAgICAgICB0Z3RQb3MueCxcbiAgICAgICAgICAgIHRndFBvcy55LFxuICAgICAgICAgICAgdGd0VyxcbiAgICAgICAgICAgIHRndEgsXG4gICAgICAgICAgICBzcmNQb3MueCxcbiAgICAgICAgICAgIHNyY1Bvcy55LFxuICAgICAgICAgICAgMFxuICAgICAgICAgICk7XG5cbiAgICAgIHZhciBtaWRwdFNyY1B0cyA9IHtcbiAgICAgICAgeDE6IHNyY091dHNpZGVbMF0sXG4gICAgICAgIHgyOiB0Z3RPdXRzaWRlWzBdLFxuICAgICAgICB5MTogc3JjT3V0c2lkZVsxXSxcbiAgICAgICAgeTI6IHRndE91dHNpZGVbMV1cbiAgICAgIH07XG5cbiAgICAgIHZhciBwb3NQdHMgPSB7XG4gICAgICAgIHgxOiBzcmNQb3MueCxcbiAgICAgICAgeDI6IHRndFBvcy54LFxuICAgICAgICB5MTogc3JjUG9zLnksXG4gICAgICAgIHkyOiB0Z3RQb3MueVxuICAgICAgfTtcblxuICAgICAgdmFyIGR5ID0gKCB0Z3RQb3MueSAtIHNyY1Bvcy55ICk7XG4gICAgICB2YXIgZHggPSAoIHRndFBvcy54IC0gc3JjUG9zLnggKTtcbiAgICAgIHZhciBsID0gTWF0aC5zcXJ0KCBkeCAqIGR4ICsgZHkgKiBkeSApO1xuXG4gICAgICB2YXIgdmVjdG9yID0ge1xuICAgICAgICB4OiBkeCxcbiAgICAgICAgeTogZHlcbiAgICAgIH07XG5cbiAgICAgIHZhciB2ZWN0b3JOb3JtID0ge1xuICAgICAgICB4OiB2ZWN0b3IueCAvIGwsXG4gICAgICAgIHk6IHZlY3Rvci55IC8gbFxuICAgICAgfTtcbiAgICAgIHZlY3Rvck5vcm1JbnZlcnNlID0ge1xuICAgICAgICB4OiAtdmVjdG9yTm9ybS55LFxuICAgICAgICB5OiB2ZWN0b3JOb3JtLnhcbiAgICAgIH07XG5cblxuICAgICAgLy8gaWYgbm9kZSBzaGFwZXMgb3ZlcmxhcCwgdGhlbiBubyBjdHJsIHB0cyB0byBkcmF3XG4gICAgICBpZihcbiAgICAgICAgc2Jnbi5pc05vZGVTaGFwZVRvdGFsbHlPdmVycmlkZW4odGhpcywgdGd0KT90Z3RTaGFwZS5jaGVja1BvaW50KCBzcmNPdXRzaWRlWzBdLCBzcmNPdXRzaWRlWzFdLCB0Z3QsIDAgKTp0Z3RTaGFwZS5jaGVja1BvaW50KCBzcmNPdXRzaWRlWzBdLCBzcmNPdXRzaWRlWzFdLCAwLCB0Z3RXLCB0Z3RILCB0Z3RQb3MueCwgdGd0UG9zLnkgKSAgfHxcbiAgICAgICAgc2Jnbi5pc05vZGVTaGFwZVRvdGFsbHlPdmVycmlkZW4odGhpcywgc3JjKT9zcmNTaGFwZS5jaGVja1BvaW50KCB0Z3RPdXRzaWRlWzBdLCB0Z3RPdXRzaWRlWzFdLCBzcmMsIDAgKTpzcmNTaGFwZS5jaGVja1BvaW50KCB0Z3RPdXRzaWRlWzBdLCB0Z3RPdXRzaWRlWzFdLCAwLCBzcmNXLCBzcmNILCBzcmNQb3MueCwgc3JjUG9zLnkgKVxuICAgICAgKXtcbiAgICAgICAgdmVjdG9yTm9ybUludmVyc2UgPSB7fTtcbiAgICAgICAgYmFkQmV6aWVyID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIHZhciBlZGdlO1xuICAgIHZhciBlZGdlX3A7XG4gICAgdmFyIHJzO1xuXG4gICAgdmFyIGRpckNvdW50cyA9IHtcbiAgICAgICdub3J0aCc6IDAsXG4gICAgICAnd2VzdCc6IDAsXG4gICAgICAnc291dGgnOiAwLFxuICAgICAgJ2Vhc3QnOiAwLFxuICAgICAgJ25vcnRod2VzdCc6IDAsXG4gICAgICAnc291dGh3ZXN0JzogMCxcbiAgICAgICdub3J0aGVhc3QnOiAwLFxuICAgICAgJ3NvdXRoZWFzdCc6IDBcbiAgICB9XG5cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IHBhaXJFZGdlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgZWRnZSA9IHBhaXJFZGdlc1sgaSBdO1xuICAgICAgZWRnZV9wID0gZWRnZS5fcHJpdmF0ZTtcbiAgICAgIHJzID0gZWRnZV9wLnJzY3JhdGNoO1xuXG4gICAgICB2YXIgZWRnZUluZGV4MSA9IHJzLmxhc3RFZGdlSW5kZXg7XG4gICAgICB2YXIgZWRnZUluZGV4MiA9IGk7XG5cbiAgICAgIHZhciBudW1FZGdlczEgPSBycy5sYXN0TnVtRWRnZXM7XG4gICAgICB2YXIgbnVtRWRnZXMyID0gcGFpckVkZ2VzLmxlbmd0aDtcblxuICAgICAgdmFyIGN1cnZlU3R5bGUgPSBlZGdlLnBzdHlsZSggJ2N1cnZlLXN0eWxlJyApLnZhbHVlO1xuICAgICAgdmFyIGN0cmxwdERpc3RzID0gZWRnZS5wc3R5bGUoICdjb250cm9sLXBvaW50LWRpc3RhbmNlcycgKTtcblxuICAgICAgdmFyIGxvb3BEaXIgPSBlZGdlLnBzdHlsZSgnbG9vcC1kaXJlY3Rpb24nKS5wZlZhbHVlO1xuICAgICAgdmFyIGxvb3BTd3AgPSBlZGdlLnBzdHlsZSgnbG9vcC1zd2VlcCcpLnBmVmFsdWU7XG5cbiAgICAgIHZhciBjdHJscHRXcyA9IGVkZ2UucHN0eWxlKCAnY29udHJvbC1wb2ludC13ZWlnaHRzJyApO1xuICAgICAgdmFyIGJlemllck4gPSBjdHJscHREaXN0cyAmJiBjdHJscHRXcyA/IE1hdGgubWluKCBjdHJscHREaXN0cy52YWx1ZS5sZW5ndGgsIGN0cmxwdFdzLnZhbHVlLmxlbmd0aCApIDogMTtcbiAgICAgIHZhciBzdGVwU2l6ZSA9IGVkZ2UucHN0eWxlKCAnY29udHJvbC1wb2ludC1zdGVwLXNpemUnICkucGZWYWx1ZTtcbiAgICAgIHZhciBjdHJscHREaXN0ID0gY3RybHB0RGlzdHMgPyBjdHJscHREaXN0cy5wZlZhbHVlWzBdIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIGN0cmxwdFdlaWdodCA9IGN0cmxwdFdzLnZhbHVlWzBdO1xuICAgICAgdmFyIGVkZ2VJc1VuYnVuZGxlZCA9IGN1cnZlU3R5bGUgPT09ICd1bmJ1bmRsZWQtYmV6aWVyJyB8fCBjdXJ2ZVN0eWxlID09PSAnc2VnbWVudHMnO1xuXG4gICAgICB2YXIgc3JjWDEgPSBycy5sYXN0U3JjQ3RsUHRYO1xuICAgICAgdmFyIHNyY1gyID0gc3JjUG9zLng7XG4gICAgICB2YXIgc3JjWTEgPSBycy5sYXN0U3JjQ3RsUHRZO1xuICAgICAgdmFyIHNyY1kyID0gc3JjUG9zLnk7XG4gICAgICB2YXIgc3JjVzEgPSBycy5sYXN0U3JjQ3RsUHRXO1xuICAgICAgdmFyIHNyY1cyID0gc3JjLm91dGVyV2lkdGgoKTtcbiAgICAgIHZhciBzcmNIMSA9IHJzLmxhc3RTcmNDdGxQdEg7XG4gICAgICB2YXIgc3JjSDIgPSBzcmMub3V0ZXJIZWlnaHQoKTtcblxuICAgICAgdmFyIHRndFgxID0gcnMubGFzdFRndEN0bFB0WDtcbiAgICAgIHZhciB0Z3RYMiA9IHRndFBvcy54O1xuICAgICAgdmFyIHRndFkxID0gcnMubGFzdFRndEN0bFB0WTtcbiAgICAgIHZhciB0Z3RZMiA9IHRndFBvcy55O1xuICAgICAgdmFyIHRndFcxID0gcnMubGFzdFRndEN0bFB0VztcbiAgICAgIHZhciB0Z3RXMiA9IHRndC5vdXRlcldpZHRoKCk7XG4gICAgICB2YXIgdGd0SDEgPSBycy5sYXN0VGd0Q3RsUHRIO1xuICAgICAgdmFyIHRndEgyID0gdGd0Lm91dGVySGVpZ2h0KCk7XG5cbiAgICAgIHZhciB3aWR0aDEgPSBycy5sYXN0VztcbiAgICAgIHZhciB3aWR0aDIgPSBlZGdlLnBzdHlsZSggJ2NvbnRyb2wtcG9pbnQtc3RlcC1zaXplJyApLnBmVmFsdWU7XG5cbiAgICAgIHZhciBlZGdlRGlzdGFuY2VzID0gZWRnZS5wc3R5bGUoJ2VkZ2UtZGlzdGFuY2VzJykudmFsdWU7XG5cbiAgICAgIGlmKCBiYWRCZXppZXIgKXtcbiAgICAgICAgcnMuYmFkQmV6aWVyID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJzLmJhZEJlemllciA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiggc3JjWDEgPT09IHNyY1gyICYmIHNyY1kxID09PSBzcmNZMiAmJiBzcmNXMSA9PT0gc3JjVzIgJiYgc3JjSDEgPT09IHNyY0gyXG4gICAgICAmJiAgdGd0WDEgPT09IHRndFgyICYmIHRndFkxID09PSB0Z3RZMiAmJiB0Z3RXMSA9PT0gdGd0VzIgJiYgdGd0SDEgPT09IHRndEgyXG4gICAgICAmJiAgd2lkdGgxID09PSB3aWR0aDJcbiAgICAgICYmICAoKGVkZ2VJbmRleDEgPT09IGVkZ2VJbmRleDIgJiYgbnVtRWRnZXMxID09PSBudW1FZGdlczIpIHx8IGVkZ2VJc1VuYnVuZGxlZCkgKXtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2VkZ2UgY3RybCBwdCBjYWNoZSBISVQnKVxuICAgICAgICBjb250aW51ZTsgLy8gdGhlbiB0aGUgY29udHJvbCBwb2ludHMgaGF2ZW4ndCBjaGFuZ2VkIGFuZCB3ZSBjYW4gc2tpcCBjYWxjdWxhdGluZyB0aGVtXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBycy5sYXN0U3JjQ3RsUHRYID0gc3JjWDI7XG4gICAgICAgIHJzLmxhc3RTcmNDdGxQdFkgPSBzcmNZMjtcbiAgICAgICAgcnMubGFzdFNyY0N0bFB0VyA9IHNyY1cyO1xuICAgICAgICBycy5sYXN0U3JjQ3RsUHRIID0gc3JjSDI7XG4gICAgICAgIHJzLmxhc3RUZ3RDdGxQdFggPSB0Z3RYMjtcbiAgICAgICAgcnMubGFzdFRndEN0bFB0WSA9IHRndFkyO1xuICAgICAgICBycy5sYXN0VGd0Q3RsUHRXID0gdGd0VzI7XG4gICAgICAgIHJzLmxhc3RUZ3RDdGxQdEggPSB0Z3RIMjtcbiAgICAgICAgcnMubGFzdEVkZ2VJbmRleCA9IGVkZ2VJbmRleDI7XG4gICAgICAgIHJzLmxhc3ROdW1FZGdlcyA9IG51bUVkZ2VzMjtcbiAgICAgICAgcnMubGFzdFdpZHRoID0gd2lkdGgyO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnZWRnZSBjdHJsIHB0IGNhY2hlIE1JU1MnKVxuICAgICAgfVxuXG4gICAgICBpZiggc3JjID09PSB0Z3QgKXtcbiAgICAgICAgLy8gU2VsZi1lZGdlXG5cbiAgICAgICAgcnMuZWRnZVR5cGUgPSAnc2VsZic7XG5cbiAgICAgICAgdmFyIGogPSBpO1xuICAgICAgICB2YXIgbG9vcERpc3QgPSBzdGVwU2l6ZTtcblxuICAgICAgICBpZiggZWRnZUlzVW5idW5kbGVkICl7XG4gICAgICAgICAgaiA9IDA7XG4gICAgICAgICAgbG9vcERpc3QgPSBjdHJscHREaXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG91dEFuZ2xlID0gIGxvb3BEaXIgLSBsb29wU3dwIC8gMjtcbiAgICAgICAgdmFyIGluQW5nbGUgID0gIGxvb3BEaXIgKyBsb29wU3dwIC8gMjtcblxuICAgICAgICAvLyBpbmNyZWFzZSBieSBzdGVwIHNpemUgZm9yIG92ZXJsYXBwaW5nIGxvb3BzLCBrZXllZCBvbiBkaXJlY3Rpb24gYW5kIHN3ZWVwIHZhbHVlc1xuICAgICAgICB2YXIgZGMgPSBTdHJpbmcobG9vcERpciArICdfJyArIGxvb3BTd3ApO1xuICAgICAgICBqID0gZGlyQ291bnRzW2RjXSA9PT0gdW5kZWZpbmVkID8gZGlyQ291bnRzW2RjXSA9IDAgOiArK2RpckNvdW50c1tkY107XG5cbiAgICAgICAgcnMuY3RybHB0cyA9IFtcbiAgICAgICAgICBzcmNQb3MueCArIE1hdGguY29zKG91dEFuZ2xlKSAqIDEuNCAqIGxvb3BEaXN0ICogKGogLyAzICsgMSksXG4gICAgICAgICAgc3JjUG9zLnkgKyBNYXRoLnNpbihvdXRBbmdsZSkgKiAxLjQgKiBsb29wRGlzdCAqIChqIC8gMyArIDEpLFxuICAgICAgICAgIHNyY1Bvcy54ICsgTWF0aC5jb3MoaW5BbmdsZSkgKiAxLjQgKiBsb29wRGlzdCAqIChqIC8gMyArIDEpLFxuICAgICAgICAgIHNyY1Bvcy55ICsgTWF0aC5zaW4oaW5BbmdsZSkgKiAxLjQgKiBsb29wRGlzdCAqIChqIC8gMyArIDEpXG4gICAgICAgIF07XG5cbiAgICAgIH0gZWxzZSBpZihcbiAgICAgICAgaGFzQ29tcG91bmRzICYmXG4gICAgICAgICggc3JjLmlzUGFyZW50KCkgfHwgc3JjLmlzQ2hpbGQoKSB8fCB0Z3QuaXNQYXJlbnQoKSB8fCB0Z3QuaXNDaGlsZCgpICkgJiZcbiAgICAgICAgKCBzcmMucGFyZW50cygpLmFueVNhbWUoIHRndCApIHx8IHRndC5wYXJlbnRzKCkuYW55U2FtZSggc3JjICkgKVxuICAgICAgKXtcbiAgICAgICAgLy8gQ29tcG91bmQgZWRnZVxuXG4gICAgICAgIHJzLmVkZ2VUeXBlID0gJ2NvbXBvdW5kJztcblxuICAgICAgICAvLyBiZWNhdXNlIHRoZSBsaW5lIGFwcHJveGltYXRpb24gZG9lc24ndCBhcHBseSBmb3IgY29tcG91bmQgYmV6aWVyc1xuICAgICAgICAvLyAobG9vcC9zZWxmIGVkZ2VzIGFyZSBhbHJlYWR5IGVsaWRlZCBiL2Mgb2YgY2hlYXAgc3JjPT10Z3QgY2hlY2spXG4gICAgICAgIHJzLmJhZEJlemllciA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBqID0gaTtcbiAgICAgICAgdmFyIGxvb3BEaXN0ID0gc3RlcFNpemU7XG5cbiAgICAgICAgaWYoIGVkZ2VJc1VuYnVuZGxlZCApe1xuICAgICAgICAgIGogPSAwO1xuICAgICAgICAgIGxvb3BEaXN0ID0gY3RybHB0RGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb29wVyA9IDUwO1xuXG4gICAgICAgIHZhciBsb29wYVBvcyA9IHtcbiAgICAgICAgICB4OiBzcmNQb3MueCAtIHNyY1cgLyAyLFxuICAgICAgICAgIHk6IHNyY1Bvcy55IC0gc3JjSCAvIDJcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgbG9vcGJQb3MgPSB7XG4gICAgICAgICAgeDogdGd0UG9zLnggLSB0Z3RXIC8gMixcbiAgICAgICAgICB5OiB0Z3RQb3MueSAtIHRndEggLyAyXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGxvb3BQb3MgPSB7XG4gICAgICAgICAgeDogTWF0aC5taW4oIGxvb3BhUG9zLngsIGxvb3BiUG9zLnggKSxcbiAgICAgICAgICB5OiBNYXRoLm1pbiggbG9vcGFQb3MueSwgbG9vcGJQb3MueSApXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gYXZvaWRzIGNhc2VzIHdpdGggaW1wb3NzaWJsZSBiZXppZXJzXG4gICAgICAgIHZhciBtaW5Db21wb3VuZFN0cmV0Y2ggPSAwLjU7XG4gICAgICAgIHZhciBjb21wb3VuZFN0cmV0Y2hBID0gTWF0aC5tYXgoIG1pbkNvbXBvdW5kU3RyZXRjaCwgTWF0aC5sb2coIHNyY1cgKiAwLjAxICkgKTtcbiAgICAgICAgdmFyIGNvbXBvdW5kU3RyZXRjaEIgPSBNYXRoLm1heCggbWluQ29tcG91bmRTdHJldGNoLCBNYXRoLmxvZyggdGd0VyAqIDAuMDEgKSApO1xuXG4gICAgICAgIHJzLmN0cmxwdHMgPSBbXG4gICAgICAgICAgbG9vcFBvcy54LFxuICAgICAgICAgIGxvb3BQb3MueSAtICgxICsgTWF0aC5wb3coIGxvb3BXLCAxLjEyICkgLyAxMDApICogbG9vcERpc3QgKiAoaiAvIDMgKyAxKSAqIGNvbXBvdW5kU3RyZXRjaEEsXG5cbiAgICAgICAgICBsb29wUG9zLnggLSAoMSArIE1hdGgucG93KCBsb29wVywgMS4xMiApIC8gMTAwKSAqIGxvb3BEaXN0ICogKGogLyAzICsgMSkgKiBjb21wb3VuZFN0cmV0Y2hCLFxuICAgICAgICAgIGxvb3BQb3MueVxuICAgICAgICBdO1xuXG4gICAgICB9IGVsc2UgaWYoIGN1cnZlU3R5bGUgPT09ICdzZWdtZW50cycgKXtcbiAgICAgICAgLy8gU2VnbWVudHMgKG11bHRpcGxlIHN0cmFpZ2h0IGxpbmVzKVxuXG4gICAgICAgIHJzLmVkZ2VUeXBlID0gJ3NlZ21lbnRzJztcbiAgICAgICAgcnMuc2VncHRzID0gW107XG5cbiAgICAgICAgdmFyIHNlZ21lbnRXcyA9IGVkZ2UucHN0eWxlKCAnc2VnbWVudC13ZWlnaHRzJyApLnBmVmFsdWU7XG4gICAgICAgIHZhciBzZWdtZW50RHMgPSBlZGdlLnBzdHlsZSggJ3NlZ21lbnQtZGlzdGFuY2VzJyApLnBmVmFsdWU7XG4gICAgICAgIHZhciBzZWdtZW50c04gPSBNYXRoLm1pbiggc2VnbWVudFdzLmxlbmd0aCwgc2VnbWVudERzLmxlbmd0aCApO1xuXG4gICAgICAgIGZvciggdmFyIHMgPSAwOyBzIDwgc2VnbWVudHNOOyBzKysgKXtcbiAgICAgICAgICB2YXIgdyA9IHNlZ21lbnRXc1sgcyBdO1xuICAgICAgICAgIHZhciBkID0gc2VnbWVudERzWyBzIF07XG5cbiAgICAgICAgICB2YXIgdzEgPSAxIC0gdztcbiAgICAgICAgICB2YXIgdzIgPSB3O1xuXG4gICAgICAgICAgdmFyIG1pZHB0UHRzID0gZWRnZURpc3RhbmNlcyA9PT0gJ25vZGUtcG9zaXRpb24nID8gcG9zUHRzIDogbWlkcHRTcmNQdHM7XG5cbiAgICAgICAgICB2YXIgYWRqdXN0ZWRNaWRwdCA9IHtcbiAgICAgICAgICAgIHg6IG1pZHB0UHRzLngxICogdzEgKyBtaWRwdFB0cy54MiAqIHcyLFxuICAgICAgICAgICAgeTogbWlkcHRQdHMueTEgKiB3MSArIG1pZHB0UHRzLnkyICogdzJcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcnMuc2VncHRzLnB1c2goXG4gICAgICAgICAgICBhZGp1c3RlZE1pZHB0LnggKyB2ZWN0b3JOb3JtSW52ZXJzZS54ICogZCxcbiAgICAgICAgICAgIGFkanVzdGVkTWlkcHQueSArIHZlY3Rvck5vcm1JbnZlcnNlLnkgKiBkXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAvLyBTdHJhaWdodCBlZGdlXG4gICAgICB9IGVsc2UgaWYoXG4gICAgICAgIHBhaXJFZGdlcy5sZW5ndGggJSAyID09PSAxXG4gICAgICAgICYmIGkgPT09IE1hdGguZmxvb3IoIHBhaXJFZGdlcy5sZW5ndGggLyAyIClcbiAgICAgICAgJiYgIWVkZ2VJc1VuYnVuZGxlZFxuICAgICAgKXtcblxuICAgICAgICBycy5lZGdlVHlwZSA9ICdzdHJhaWdodCc7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIChNdWx0aSliZXppZXJcblxuICAgICAgICB2YXIgbXVsdGkgPSBlZGdlSXNVbmJ1bmRsZWQ7XG5cbiAgICAgICAgcnMuZWRnZVR5cGUgPSBtdWx0aSA/ICdtdWx0aWJlemllcicgOiAnYmV6aWVyJztcbiAgICAgICAgcnMuY3RybHB0cyA9IFtdO1xuXG4gICAgICAgIGZvciggdmFyIGIgPSAwOyBiIDwgYmV6aWVyTjsgYisrICl7XG4gICAgICAgICAgdmFyIG5vcm1jdHJscHREaXN0ID0gKDAuNSAtIHBhaXJFZGdlcy5sZW5ndGggLyAyICsgaSkgKiBzdGVwU2l6ZTtcbiAgICAgICAgICB2YXIgbWFuY3RybHB0RGlzdDtcbiAgICAgICAgICB2YXIgc2lnbiA9IG1hdGguc2lnbnVtKCBub3JtY3RybHB0RGlzdCApO1xuXG4gICAgICAgICAgaWYoIG11bHRpICl7XG4gICAgICAgICAgICBjdHJscHREaXN0ID0gY3RybHB0RGlzdHMgPyBjdHJscHREaXN0cy5wZlZhbHVlWyBiIF0gOiBzdGVwU2l6ZTsgLy8gZmFsbCBiYWNrIG9uIHN0ZXAgc2l6ZVxuICAgICAgICAgICAgY3RybHB0V2VpZ2h0ID0gY3RybHB0V3MudmFsdWVbIGIgXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiggZWRnZUlzVW5idW5kbGVkICl7IC8vIG11bHRpIG9yIHNpbmdsZSB1bmJ1bmRsZWRcbiAgICAgICAgICAgIG1hbmN0cmxwdERpc3QgPSBjdHJscHREaXN0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYW5jdHJscHREaXN0ID0gY3RybHB0RGlzdCAhPT0gdW5kZWZpbmVkID8gc2lnbiAqIGN0cmxwdERpc3QgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGRpc3RhbmNlRnJvbU1pZHBvaW50ID0gbWFuY3RybHB0RGlzdCAhPT0gdW5kZWZpbmVkID8gbWFuY3RybHB0RGlzdCA6IG5vcm1jdHJscHREaXN0O1xuXG4gICAgICAgICAgdmFyIHcxID0gMSAtIGN0cmxwdFdlaWdodDtcbiAgICAgICAgICB2YXIgdzIgPSBjdHJscHRXZWlnaHQ7XG5cbiAgICAgICAgICB2YXIgbWlkcHRQdHMgPSBlZGdlRGlzdGFuY2VzID09PSAnbm9kZS1wb3NpdGlvbicgPyBwb3NQdHMgOiBtaWRwdFNyY1B0cztcblxuICAgICAgICAgIHZhciBhZGp1c3RlZE1pZHB0ID0ge1xuICAgICAgICAgICAgeDogbWlkcHRQdHMueDEgKiB3MSArIG1pZHB0UHRzLngyICogdzIsXG4gICAgICAgICAgICB5OiBtaWRwdFB0cy55MSAqIHcxICsgbWlkcHRQdHMueTIgKiB3MlxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBycy5jdHJscHRzLnB1c2goXG4gICAgICAgICAgICBhZGp1c3RlZE1pZHB0LnggKyB2ZWN0b3JOb3JtSW52ZXJzZS54ICogZGlzdGFuY2VGcm9tTWlkcG9pbnQsXG4gICAgICAgICAgICBhZGp1c3RlZE1pZHB0LnkgKyB2ZWN0b3JOb3JtSW52ZXJzZS55ICogZGlzdGFuY2VGcm9tTWlkcG9pbnRcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgLy8gZmluZCBlbmRwdHMgZm9yIGVkZ2VcbiAgICAgIHRoaXMuZmluZEVuZHBvaW50cyggZWRnZSApO1xuXG4gICAgICB2YXIgYmFkU3RhcnQgPSAhaXMubnVtYmVyKCBycy5zdGFydFggKSB8fCAhaXMubnVtYmVyKCBycy5zdGFydFkgKTtcbiAgICAgIHZhciBiYWRBU3RhcnQgPSAhaXMubnVtYmVyKCBycy5hcnJvd1N0YXJ0WCApIHx8ICFpcy5udW1iZXIoIHJzLmFycm93U3RhcnRZICk7XG4gICAgICB2YXIgYmFkRW5kID0gIWlzLm51bWJlciggcnMuZW5kWCApIHx8ICFpcy5udW1iZXIoIHJzLmVuZFkgKTtcbiAgICAgIHZhciBiYWRBRW5kID0gIWlzLm51bWJlciggcnMuYXJyb3dFbmRYICkgfHwgIWlzLm51bWJlciggcnMuYXJyb3dFbmRZICk7XG5cbiAgICAgIHZhciBtaW5DcEFEaXN0RmFjdG9yID0gMztcbiAgICAgIHZhciBhcnJvd1cgPSB0aGlzLmdldEFycm93V2lkdGgoIGVkZ2UucHN0eWxlKCAnd2lkdGgnICkucGZWYWx1ZSApICogdGhpcy5hcnJvd1NoYXBlV2lkdGg7XG4gICAgICB2YXIgbWluQ3BBRGlzdCA9IG1pbkNwQURpc3RGYWN0b3IgKiBhcnJvd1c7XG5cbiAgICAgIGlmKCBycy5lZGdlVHlwZSA9PT0gJ2JlemllcicgKXtcbiAgICAgICAgdmFyIHN0YXJ0QUNwRGlzdCA9IG1hdGguZGlzdCggeyB4OiBycy5jdHJscHRzWzBdLCB5OiBycy5jdHJscHRzWzFdIH0sIHsgeDogcnMuc3RhcnRYLCB5OiBycy5zdGFydFkgfSApO1xuICAgICAgICB2YXIgY2xvc2VTdGFydEFDcCA9IHN0YXJ0QUNwRGlzdCA8IG1pbkNwQURpc3Q7XG4gICAgICAgIHZhciBlbmRBQ3BEaXN0ID0gbWF0aC5kaXN0KCB7IHg6IHJzLmN0cmxwdHNbMF0sIHk6IHJzLmN0cmxwdHNbMV0gfSwgeyB4OiBycy5lbmRYLCB5OiBycy5lbmRZIH0gKTtcbiAgICAgICAgdmFyIGNsb3NlRW5kQUNwID0gZW5kQUNwRGlzdCA8IG1pbkNwQURpc3Q7XG5cbiAgICAgICAgdmFyIG92ZXJsYXBwaW5nID0gZmFsc2U7XG5cbiAgICAgICAgaWYoIGJhZFN0YXJ0IHx8IGJhZEFTdGFydCB8fCBjbG9zZVN0YXJ0QUNwICl7XG4gICAgICAgICAgb3ZlcmxhcHBpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gcHJvamVjdCBjb250cm9sIHBvaW50IGFsb25nIGxpbmUgZnJvbSBzcmMgY2VudHJlIHRvIG91dHNpZGUgdGhlIHNyYyBzaGFwZVxuICAgICAgICAgIC8vIChvdGhlcndpc2UgaW50ZXJzZWN0aW9uIHdpbGwgeWllbGQgbm90aGluZylcbiAgICAgICAgICB2YXIgY3BEID0geyAvLyBkZWx0YVxuICAgICAgICAgICAgeDogcnMuY3RybHB0c1swXSAtIHNyY1Bvcy54LFxuICAgICAgICAgICAgeTogcnMuY3RybHB0c1sxXSAtIHNyY1Bvcy55XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgY3BMID0gTWF0aC5zcXJ0KCBjcEQueCAqIGNwRC54ICsgY3BELnkgKiBjcEQueSApOyAvLyBsZW5ndGggb2YgbGluZVxuICAgICAgICAgIHZhciBjcE0gPSB7IC8vIG5vcm1hbGlzZWQgZGVsdGFcbiAgICAgICAgICAgIHg6IGNwRC54IC8gY3BMLFxuICAgICAgICAgICAgeTogY3BELnkgLyBjcExcbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciByYWRpdXMgPSBNYXRoLm1heCggc3JjVywgc3JjSCApO1xuICAgICAgICAgIHZhciBjcFByb2ogPSB7IC8vICoyIHJhZGl1cyBndWFyYW50ZWVzIG91dHNpZGUgc2hhcGVcbiAgICAgICAgICAgIHg6IHJzLmN0cmxwdHNbMF0gKyBjcE0ueCAqIDIgKiByYWRpdXMsXG4gICAgICAgICAgICB5OiBycy5jdHJscHRzWzFdICsgY3BNLnkgKiAyICogcmFkaXVzXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciBzcmNDdHJsUHRJbnRuO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmKHNiZ24uaXNOb2RlU2hhcGVUb3RhbGx5T3ZlcnJpZGVuKHRoaXMsIHNyYykpXG4gICAgICAgICAgICBzcmNDdHJsUHRJbnRuID0gc3JjU2hhcGUuaW50ZXJzZWN0TGluZShzcmMsIGNwUHJvai54LCBjcFByb2oueSwgZWRnZS5fcHJpdmF0ZS5kYXRhLnBvcnRzb3VyY2UpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHNyY0N0cmxQdEludG4gPSBzcmNTaGFwZS5pbnRlcnNlY3RMaW5lKFxuICAgICAgICAgICAgICBzcmNQb3MueCxcbiAgICAgICAgICAgICAgc3JjUG9zLnksXG4gICAgICAgICAgICAgIHNyY1csXG4gICAgICAgICAgICAgIHNyY0gsXG4gICAgICAgICAgICAgIGNwUHJvai54LFxuICAgICAgICAgICAgICBjcFByb2oueSxcbiAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgIGlmKCBjbG9zZVN0YXJ0QUNwICl7XG4gICAgICAgICAgICBycy5jdHJscHRzWzBdID0gcnMuY3RybHB0c1swXSArIGNwTS54ICogKG1pbkNwQURpc3QgLSBzdGFydEFDcERpc3QpO1xuICAgICAgICAgICAgcnMuY3RybHB0c1sxXSA9IHJzLmN0cmxwdHNbMV0gKyBjcE0ueSAqIChtaW5DcEFEaXN0IC0gc3RhcnRBQ3BEaXN0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcnMuY3RybHB0c1swXSA9IHNyY0N0cmxQdEludG5bMF0gKyBjcE0ueCAqIG1pbkNwQURpc3Q7XG4gICAgICAgICAgICBycy5jdHJscHRzWzFdID0gc3JjQ3RybFB0SW50blsxXSArIGNwTS55ICogbWluQ3BBRGlzdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiggYmFkRW5kIHx8IGJhZEFFbmQgfHwgY2xvc2VFbmRBQ3AgKXtcbiAgICAgICAgICBvdmVybGFwcGluZyA9IHRydWU7XG5cbiAgICAgICAgICAvLyBwcm9qZWN0IGNvbnRyb2wgcG9pbnQgYWxvbmcgbGluZSBmcm9tIHRndCBjZW50cmUgdG8gb3V0c2lkZSB0aGUgdGd0IHNoYXBlXG4gICAgICAgICAgLy8gKG90aGVyd2lzZSBpbnRlcnNlY3Rpb24gd2lsbCB5aWVsZCBub3RoaW5nKVxuICAgICAgICAgIHZhciBjcEQgPSB7IC8vIGRlbHRhXG4gICAgICAgICAgICB4OiBycy5jdHJscHRzWzBdIC0gdGd0UG9zLngsXG4gICAgICAgICAgICB5OiBycy5jdHJscHRzWzFdIC0gdGd0UG9zLnlcbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciBjcEwgPSBNYXRoLnNxcnQoIGNwRC54ICogY3BELnggKyBjcEQueSAqIGNwRC55ICk7IC8vIGxlbmd0aCBvZiBsaW5lXG4gICAgICAgICAgdmFyIGNwTSA9IHsgLy8gbm9ybWFsaXNlZCBkZWx0YVxuICAgICAgICAgICAgeDogY3BELnggLyBjcEwsXG4gICAgICAgICAgICB5OiBjcEQueSAvIGNwTFxuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIHJhZGl1cyA9IE1hdGgubWF4KCBzcmNXLCBzcmNIICk7XG4gICAgICAgICAgdmFyIGNwUHJvaiA9IHsgLy8gKjIgcmFkaXVzIGd1YXJhbnRlZXMgb3V0c2lkZSBzaGFwZVxuICAgICAgICAgICAgeDogcnMuY3RybHB0c1swXSArIGNwTS54ICogMiAqIHJhZGl1cyxcbiAgICAgICAgICAgIHk6IHJzLmN0cmxwdHNbMV0gKyBjcE0ueSAqIDIgKiByYWRpdXNcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdmFyIHRndEN0cmxQdEludG47XG4gICAgICAgICAgaWYoc2Jnbi5pc05vZGVTaGFwZVRvdGFsbHlPdmVycmlkZW4odGhpcywgdGd0KSlcbiAgICAgICAgICAgIHRndEN0cmxQdEludG4gPSB0Z3RTaGFwZS5pbnRlcnNlY3RMaW5lKHRndCwgY3BQcm9qLngsIGNwUHJvai55LCBlZGdlLl9wcml2YXRlLmRhdGEucG9ydHRhcmdldCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGd0Q3RybFB0SW50biA9IHRndFNoYXBlLmludGVyc2VjdExpbmUoXG4gICAgICAgICAgICAgIHRndFBvcy54LFxuICAgICAgICAgICAgICB0Z3RQb3MueSxcbiAgICAgICAgICAgICAgdGd0VyxcbiAgICAgICAgICAgICAgdGd0SCxcbiAgICAgICAgICAgICAgY3BQcm9qLngsXG4gICAgICAgICAgICAgIGNwUHJvai55LFxuICAgICAgICAgICAgICAwXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYoIGNsb3NlRW5kQUNwICl7XG4gICAgICAgICAgICBycy5jdHJscHRzWzBdID0gcnMuY3RybHB0c1swXSArIGNwTS54ICogKG1pbkNwQURpc3QgLSBlbmRBQ3BEaXN0KTtcbiAgICAgICAgICAgIHJzLmN0cmxwdHNbMV0gPSBycy5jdHJscHRzWzFdICsgY3BNLnkgKiAobWluQ3BBRGlzdCAtIGVuZEFDcERpc3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBycy5jdHJscHRzWzBdID0gdGd0Q3RybFB0SW50blswXSArIGNwTS54ICogbWluQ3BBRGlzdDtcbiAgICAgICAgICAgIHJzLmN0cmxwdHNbMV0gPSB0Z3RDdHJsUHRJbnRuWzFdICsgY3BNLnkgKiBtaW5DcEFEaXN0O1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIG92ZXJsYXBwaW5nICl7XG4gICAgICAgICAgLy8gcmVjYWxjIGVuZHB0c1xuICAgICAgICAgIHRoaXMuZmluZEVuZHBvaW50cyggZWRnZSApO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgaWYoIHJzLmVkZ2VUeXBlID09PSAnbXVsdGliZXppZXInIHx8IHJzLmVkZ2VUeXBlID09PSAnYmV6aWVyJyB8fCBycy5lZGdlVHlwZSA9PT0gJ3NlbGYnIHx8IHJzLmVkZ2VUeXBlID09PSAnY29tcG91bmQnICl7XG4gICAgICAgIHJzLmFsbHB0cyA9IFtdO1xuXG4gICAgICAgIHJzLmFsbHB0cy5wdXNoKCBycy5zdGFydFgsIHJzLnN0YXJ0WSApO1xuXG4gICAgICAgIGZvciggdmFyIGIgPSAwOyBiICsgMSA8IHJzLmN0cmxwdHMubGVuZ3RoOyBiICs9IDIgKXtcbiAgICAgICAgICAvLyBjdHJsIHB0IGl0c2VsZlxuICAgICAgICAgIHJzLmFsbHB0cy5wdXNoKCBycy5jdHJscHRzWyBiIF0sIHJzLmN0cmxwdHNbIGIgKyAxXSApO1xuXG4gICAgICAgICAgLy8gdGhlIG1pZHB0IGJldHdlZW4gY3RybHB0cyBhcyBpbnRlcm1lZGlhdGUgZGVzdGluYXRpb24gcHRzXG4gICAgICAgICAgaWYoIGIgKyAzIDwgcnMuY3RybHB0cy5sZW5ndGggKXtcbiAgICAgICAgICAgIHJzLmFsbHB0cy5wdXNoKCAocnMuY3RybHB0c1sgYiBdICsgcnMuY3RybHB0c1sgYiArIDJdKSAvIDIsIChycy5jdHJscHRzWyBiICsgMV0gKyBycy5jdHJscHRzWyBiICsgM10pIC8gMiApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJzLmFsbHB0cy5wdXNoKCBycy5lbmRYLCBycy5lbmRZICk7XG5cbiAgICAgICAgdmFyIG0sIG10O1xuICAgICAgICBpZiggcnMuY3RybHB0cy5sZW5ndGggLyAyICUgMiA9PT0gMCApe1xuICAgICAgICAgIG0gPSBycy5hbGxwdHMubGVuZ3RoIC8gMiAtIDE7XG5cbiAgICAgICAgICBycy5taWRYID0gcnMuYWxscHRzWyBtIF07XG4gICAgICAgICAgcnMubWlkWSA9IHJzLmFsbHB0c1sgbSArIDFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG0gPSBycy5hbGxwdHMubGVuZ3RoIC8gMiAtIDM7XG4gICAgICAgICAgbXQgPSAwLjU7XG5cbiAgICAgICAgICBycy5taWRYID0gbWF0aC5xYmV6aWVyQXQoIHJzLmFsbHB0c1sgbSBdLCBycy5hbGxwdHNbIG0gKyAyXSwgcnMuYWxscHRzWyBtICsgNF0sIG10ICk7XG4gICAgICAgICAgcnMubWlkWSA9IG1hdGgucWJlemllckF0KCBycy5hbGxwdHNbIG0gKyAxXSwgcnMuYWxscHRzWyBtICsgM10sIHJzLmFsbHB0c1sgbSArIDVdLCBtdCApO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSBpZiggcnMuZWRnZVR5cGUgPT09ICdzdHJhaWdodCcgKXtcbiAgICAgICAgLy8gbmVlZCB0byBjYWxjIHRoZXNlIGFmdGVyIGVuZHB0c1xuICAgICAgICBycy5hbGxwdHMgPSBbIHJzLnN0YXJ0WCwgcnMuc3RhcnRZLCBycy5lbmRYLCBycy5lbmRZIF07XG5cbiAgICAgICAgLy8gZGVmYXVsdCBtaWRwdCBmb3IgbGFiZWxzIGV0Y1xuICAgICAgICBycy5taWRYID0gKCBycy5zdGFydFggKyBycy5lbmRYICsgcnMuYXJyb3dTdGFydFggKyBycy5hcnJvd0VuZFggKSAvIDQ7XG4gICAgICAgIHJzLm1pZFkgPSAoIHJzLnN0YXJ0WSArIHJzLmVuZFkgKyBycy5hcnJvd1N0YXJ0WSArIHJzLmFycm93RW5kWSApIC8gNDtcblxuICAgICAgfSBlbHNlIGlmKCBycy5lZGdlVHlwZSA9PT0gJ3NlZ21lbnRzJyApe1xuICAgICAgICBycy5hbGxwdHMgPSBbXTtcbiAgICAgICAgcnMuYWxscHRzLnB1c2goIHJzLnN0YXJ0WCwgcnMuc3RhcnRZICk7XG4gICAgICAgIHJzLmFsbHB0cy5wdXNoLmFwcGx5KCBycy5hbGxwdHMsIHJzLnNlZ3B0cyApO1xuICAgICAgICBycy5hbGxwdHMucHVzaCggcnMuZW5kWCwgcnMuZW5kWSApO1xuXG4gICAgICAgIGlmKCBycy5zZWdwdHMubGVuZ3RoICUgNCA9PT0gMCApe1xuICAgICAgICAgIHZhciBpMiA9IHJzLnNlZ3B0cy5sZW5ndGggLyAyO1xuICAgICAgICAgIHZhciBpMSA9IGkyIC0gMjtcblxuICAgICAgICAgIHJzLm1pZFggPSAoIHJzLnNlZ3B0c1sgaTEgXSArIHJzLnNlZ3B0c1sgaTIgXSApIC8gMjtcbiAgICAgICAgICBycy5taWRZID0gKCBycy5zZWdwdHNbIGkxICsgMV0gKyBycy5zZWdwdHNbIGkyICsgMV0gKSAvIDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGkxID0gcnMuc2VncHRzLmxlbmd0aCAvIDIgLSAxO1xuXG4gICAgICAgICAgcnMubWlkWCA9IHJzLnNlZ3B0c1sgaTEgXTtcbiAgICAgICAgICBycy5taWRZID0gcnMuc2VncHRzWyBpMSArIDFdO1xuICAgICAgICB9XG5cblxuICAgICAgfVxuXG4gICAgICB0aGlzLnByb2plY3RMaW5lcyggZWRnZSApO1xuICAgICAgdGhpcy5jYWxjdWxhdGVBcnJvd0FuZ2xlcyggZWRnZSApO1xuICAgICAgdGhpcy5yZWNhbGN1bGF0ZUVkZ2VMYWJlbFByb2plY3Rpb25zKCBlZGdlICk7XG4gICAgICB0aGlzLmNhbGN1bGF0ZUxhYmVsQW5nbGVzKCBlZGdlICk7XG5cbiAgICB9IC8vIGZvciBwYWlyIGVkZ2VzXG4gIH0gLy8gZm9yIHBhaXIgaWRzXG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBoYXlzdGFja0VkZ2VzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGVkZ2UgPSBoYXlzdGFja0VkZ2VzWyBpIF07XG4gICAgdmFyIF9wID0gZWRnZS5fcHJpdmF0ZTtcbiAgICB2YXIgcnNjcmF0Y2ggPSBfcC5yc2NyYXRjaDtcbiAgICB2YXIgcnMgPSByc2NyYXRjaDtcblxuICAgIGlmKCAhcnNjcmF0Y2guaGF5c3RhY2sgKXtcbiAgICAgIHZhciBhbmdsZSA9IE1hdGgucmFuZG9tKCkgKiAyICogTWF0aC5QSTtcblxuICAgICAgcnNjcmF0Y2guc291cmNlID0ge1xuICAgICAgICB4OiBNYXRoLmNvcyggYW5nbGUgKSxcbiAgICAgICAgeTogTWF0aC5zaW4oIGFuZ2xlIClcbiAgICAgIH07XG5cbiAgICAgIHZhciBhbmdsZSA9IE1hdGgucmFuZG9tKCkgKiAyICogTWF0aC5QSTtcblxuICAgICAgcnNjcmF0Y2gudGFyZ2V0ID0ge1xuICAgICAgICB4OiBNYXRoLmNvcyggYW5nbGUgKSxcbiAgICAgICAgeTogTWF0aC5zaW4oIGFuZ2xlIClcbiAgICAgIH07XG5cbiAgICB9XG5cbiAgICB2YXIgc3JjID0gX3Auc291cmNlO1xuICAgIHZhciB0Z3QgPSBfcC50YXJnZXQ7XG4gICAgdmFyIHNyY1BvcyA9IHNyYy5fcHJpdmF0ZS5wb3NpdGlvbjtcbiAgICB2YXIgdGd0UG9zID0gdGd0Ll9wcml2YXRlLnBvc2l0aW9uO1xuICAgIHZhciBzcmNXID0gc3JjLndpZHRoKCk7XG4gICAgdmFyIHRndFcgPSB0Z3Qud2lkdGgoKTtcbiAgICB2YXIgc3JjSCA9IHNyYy5oZWlnaHQoKTtcbiAgICB2YXIgdGd0SCA9IHRndC5oZWlnaHQoKTtcbiAgICB2YXIgcmFkaXVzID0gZWRnZS5wc3R5bGUoICdoYXlzdGFjay1yYWRpdXMnICkudmFsdWU7XG4gICAgdmFyIGhhbGZSYWRpdXMgPSByYWRpdXMgLyAyOyAvLyBiL2MgaGF2ZSB0byBoYWxmIHdpZHRoL2hlaWdodFxuXG4gICAgcnMuaGF5c3RhY2tQdHMgPSBycy5hbGxwdHMgPSBbXG4gICAgICBycy5zb3VyY2UueCAqIHNyY1cgKiBoYWxmUmFkaXVzICsgc3JjUG9zLngsXG4gICAgICBycy5zb3VyY2UueSAqIHNyY0ggKiBoYWxmUmFkaXVzICsgc3JjUG9zLnksXG4gICAgICBycy50YXJnZXQueCAqIHRndFcgKiBoYWxmUmFkaXVzICsgdGd0UG9zLngsXG4gICAgICBycy50YXJnZXQueSAqIHRndEggKiBoYWxmUmFkaXVzICsgdGd0UG9zLnlcbiAgICBdO1xuXG4gICAgcnMubWlkWCA9IChycy5hbGxwdHNbMF0gKyBycy5hbGxwdHNbMl0pIC8gMjtcbiAgICBycy5taWRZID0gKHJzLmFsbHB0c1sxXSArIHJzLmFsbHB0c1szXSkgLyAyO1xuXG4gICAgLy8gYWx3YXlzIG92ZXJyaWRlIGFzIGhheXN0YWNrIGluIGNhc2Ugc2V0IHRvIGRpZmZlcmVudCB0eXBlIHByZXZpb3VzbHlcbiAgICByc2NyYXRjaC5lZGdlVHlwZSA9ICdoYXlzdGFjayc7XG4gICAgcnNjcmF0Y2guaGF5c3RhY2sgPSB0cnVlO1xuXG4gICAgdGhpcy5wcm9qZWN0TGluZXMoIGVkZ2UgKTtcbiAgICB0aGlzLmNhbGN1bGF0ZUFycm93QW5nbGVzKCBlZGdlICk7XG4gICAgdGhpcy5yZWNhbGN1bGF0ZUVkZ2VMYWJlbFByb2plY3Rpb25zKCBlZGdlICk7XG4gICAgdGhpcy5jYWxjdWxhdGVMYWJlbEFuZ2xlcyggZWRnZSApO1xuICB9XG5cbiAgcmV0dXJuIGhhc2hUYWJsZTtcbn07XG5cbnZhciBnZXRBbmdsZUZyb21EaXNwID0gZnVuY3Rpb24oIGRpc3BYLCBkaXNwWSApe1xuICByZXR1cm4gTWF0aC5hdGFuMiggZGlzcFksIGRpc3BYICkgLSBNYXRoLlBJIC8gMjtcbn07XG5cbkJScC5jYWxjdWxhdGVBcnJvd0FuZ2xlcyA9IGZ1bmN0aW9uKCBlZGdlICl7XG4gIHZhciBycyA9IGVkZ2UuX3ByaXZhdGUucnNjcmF0Y2g7XG4gIHZhciBpc0hheXN0YWNrID0gcnMuZWRnZVR5cGUgPT09ICdoYXlzdGFjayc7XG4gIHZhciBpc0JlemllciA9IHJzLmVkZ2VUeXBlID09PSAnYmV6aWVyJztcbiAgdmFyIGlzTXVsdGliZXppZXIgPSBycy5lZGdlVHlwZSA9PT0gJ211bHRpYmV6aWVyJztcbiAgdmFyIGlzU2VnbWVudHMgPSBycy5lZGdlVHlwZSA9PT0gJ3NlZ21lbnRzJztcbiAgdmFyIGlzQ29tcG91bmQgPSBycy5lZGdlVHlwZSA9PT0gJ2NvbXBvdW5kJztcbiAgdmFyIGlzU2VsZiA9IHJzLmVkZ2VUeXBlID09PSAnc2VsZic7XG4gIHZhciBpc0luc2lkZSA9IHJzLmVkZ2VQb2ludHNUb3dhcmRzID09PSAnaW5zaWRlJztcblxuICAvLyBEaXNwbGFjZW1lbnQgZ2l2ZXMgZGlyZWN0aW9uIGZvciBhcnJvd2hlYWQgb3JpZW50YXRpb25cbiAgdmFyIGRpc3BYLCBkaXNwWTtcbiAgdmFyIHN0YXJ0WCwgc3RhcnRZLCBlbmRYLCBlbmRZO1xuXG4gIHZhciBzcmNQb3MgPSBlZGdlLl9wcml2YXRlLnNvdXJjZS5fcHJpdmF0ZS5wb3NpdGlvbjtcbiAgdmFyIHRndFBvcyA9IGVkZ2UuX3ByaXZhdGUudGFyZ2V0Ll9wcml2YXRlLnBvc2l0aW9uO1xuXG4gIGlmKCBpc0hheXN0YWNrICl7XG4gICAgc3RhcnRYID0gcnMuaGF5c3RhY2tQdHNbMF07XG4gICAgc3RhcnRZID0gcnMuaGF5c3RhY2tQdHNbMV07XG4gICAgZW5kWCA9IHJzLmhheXN0YWNrUHRzWzJdO1xuICAgIGVuZFkgPSBycy5oYXlzdGFja1B0c1szXTtcbiAgfSBlbHNlIHtcbiAgICBzdGFydFggPSBycy5hcnJvd1N0YXJ0WDtcbiAgICBzdGFydFkgPSBycy5hcnJvd1N0YXJ0WTtcbiAgICBlbmRYID0gcnMuYXJyb3dFbmRYO1xuICAgIGVuZFkgPSBycy5hcnJvd0VuZFk7XG4gIH1cblxuICAvLyBzb3VyY2VcbiAgLy9cblxuICBpZiggIWlzSW5zaWRlICYmIGlzU2VnbWVudHMgKXtcbiAgICBkaXNwWCA9IHN0YXJ0WCAtIHJzLnNlZ3B0c1swXTtcbiAgICBkaXNwWSA9IHN0YXJ0WSAtIHJzLnNlZ3B0c1sxXTtcbiAgfSBlbHNlIGlmKCAhaXNJbnNpZGUgJiYgKCBpc011bHRpYmV6aWVyIHx8IGlzQ29tcG91bmQgfHwgaXNTZWxmIHx8IGlzQmV6aWVyICkgKXtcbiAgICB2YXIgcHRzID0gcnMuYWxscHRzO1xuICAgIHZhciBiWCA9IG1hdGgucWJlemllckF0KCBwdHNbMF0sIHB0c1syXSwgcHRzWzRdLCAwLjEgKTtcbiAgICB2YXIgYlkgPSBtYXRoLnFiZXppZXJBdCggcHRzWzFdLCBwdHNbM10sIHB0c1s1XSwgMC4xICk7XG5cbiAgICBkaXNwWCA9IHN0YXJ0WCAtIGJYO1xuICAgIGRpc3BZID0gc3RhcnRZIC0gYlk7XG4gIH0gZWxzZSB7XG4gICAgZGlzcFggPSBzcmNQb3MueCAtIHN0YXJ0WDtcbiAgICBkaXNwWSA9IHNyY1Bvcy55IC0gc3RhcnRZO1xuICB9XG5cbiAgcnMuc3JjQXJyb3dBbmdsZSA9IGdldEFuZ2xlRnJvbURpc3AoIGRpc3BYLCBkaXNwWSApO1xuXG4gIC8vIG1pZCB0YXJnZXRcbiAgLy9cblxuICB2YXIgbWlkWCA9IHJzLm1pZFg7XG4gIHZhciBtaWRZID0gcnMubWlkWTtcblxuICBpZiggaXNIYXlzdGFjayApe1xuICAgIG1pZFggPSAoIHN0YXJ0WCArIGVuZFggKSAvIDI7XG4gICAgbWlkWSA9ICggc3RhcnRZICsgZW5kWSApIC8gMjtcbiAgfVxuXG4gIGRpc3BYID0gZW5kWCAtIHN0YXJ0WDtcbiAgZGlzcFkgPSBlbmRZIC0gc3RhcnRZO1xuXG4gIGlmKCBpc1NlbGYgKXtcbiAgICBkaXNwWCA9IC0xO1xuICAgIGRpc3BZID0gMTtcbiAgfSBlbHNlIGlmKCBpc1NlZ21lbnRzICl7XG4gICAgdmFyIHB0cyA9IHJzLmFsbHB0cztcblxuICAgIGlmKCBwdHMubGVuZ3RoIC8gMiAlIDIgPT09IDAgKXtcbiAgICAgIHZhciBpMiA9IHB0cy5sZW5ndGggLyAyO1xuICAgICAgdmFyIGkxID0gaTIgLSAyO1xuXG4gICAgICBkaXNwWCA9ICggcHRzWyBpMiBdIC0gcHRzWyBpMSBdICk7XG4gICAgICBkaXNwWSA9ICggcHRzWyBpMiArIDFdIC0gcHRzWyBpMSArIDFdICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpMiA9IHB0cy5sZW5ndGggLyAyIC0gMTtcbiAgICAgIHZhciBpMSA9IGkyIC0gMjtcbiAgICAgIHZhciBpMyA9IGkyICsgMjtcblxuICAgICAgZGlzcFggPSAoIHB0c1sgaTIgXSAtIHB0c1sgaTEgXSApO1xuICAgICAgZGlzcFkgPSAoIHB0c1sgaTIgKyAxXSAtIHB0c1sgaTEgKyAxXSApO1xuICAgIH1cbiAgfSBlbHNlIGlmKCBpc011bHRpYmV6aWVyIHx8IGlzQ29tcG91bmQgKXtcbiAgICB2YXIgcHRzID0gcnMuYWxscHRzO1xuICAgIHZhciBjcHRzID0gcnMuY3RybHB0cztcbiAgICB2YXIgYnAweCwgYnAweTtcbiAgICB2YXIgYnAxeCwgYnAxeTtcblxuICAgIGlmKCBjcHRzLmxlbmd0aCAvIDIgJSAyID09PSAwICl7XG4gICAgICB2YXIgcDAgPSBwdHMubGVuZ3RoIC8gMiAtIDE7IC8vIHN0YXJ0cHRcbiAgICAgIHZhciBpYyA9IHAwICsgMjtcbiAgICAgIHZhciBwMSA9IGljICsgMjtcblxuICAgICAgYnAweCA9IG1hdGgucWJlemllckF0KCBwdHNbIHAwIF0sIHB0c1sgaWMgXSwgcHRzWyBwMSBdLCAwLjAgKTtcbiAgICAgIGJwMHkgPSBtYXRoLnFiZXppZXJBdCggcHRzWyBwMCArIDFdLCBwdHNbIGljICsgMV0sIHB0c1sgcDEgKyAxXSwgMC4wICk7XG5cbiAgICAgIGJwMXggPSBtYXRoLnFiZXppZXJBdCggcHRzWyBwMCBdLCBwdHNbIGljIF0sIHB0c1sgcDEgXSwgMC4wMDAxICk7XG4gICAgICBicDF5ID0gbWF0aC5xYmV6aWVyQXQoIHB0c1sgcDAgKyAxXSwgcHRzWyBpYyArIDFdLCBwdHNbIHAxICsgMV0sIDAuMDAwMSApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaWMgPSBwdHMubGVuZ3RoIC8gMiAtIDE7IC8vIGN0cnB0XG4gICAgICB2YXIgcDAgPSBpYyAtIDI7IC8vIHN0YXJ0cHRcbiAgICAgIHZhciBwMSA9IGljICsgMjsgLy8gZW5kcHRcblxuICAgICAgYnAweCA9IG1hdGgucWJlemllckF0KCBwdHNbIHAwIF0sIHB0c1sgaWMgXSwgcHRzWyBwMSBdLCAwLjQ5OTkgKTtcbiAgICAgIGJwMHkgPSBtYXRoLnFiZXppZXJBdCggcHRzWyBwMCArIDFdLCBwdHNbIGljICsgMV0sIHB0c1sgcDEgKyAxXSwgMC40OTk5ICk7XG5cbiAgICAgIGJwMXggPSBtYXRoLnFiZXppZXJBdCggcHRzWyBwMCBdLCBwdHNbIGljIF0sIHB0c1sgcDEgXSwgMC41ICk7XG4gICAgICBicDF5ID0gbWF0aC5xYmV6aWVyQXQoIHB0c1sgcDAgKyAxXSwgcHRzWyBpYyArIDFdLCBwdHNbIHAxICsgMV0sIDAuNSApO1xuICAgIH1cblxuICAgIGRpc3BYID0gKCBicDF4IC0gYnAweCApO1xuICAgIGRpc3BZID0gKCBicDF5IC0gYnAweSApO1xuICB9XG5cbiAgcnMubWlkdGd0QXJyb3dBbmdsZSA9IGdldEFuZ2xlRnJvbURpc3AoIGRpc3BYLCBkaXNwWSApO1xuXG4gIHJzLm1pZERpc3BYID0gZGlzcFg7XG4gIHJzLm1pZERpc3BZID0gZGlzcFk7XG5cbiAgLy8gbWlkIHNvdXJjZVxuICAvL1xuXG4gIGRpc3BYICo9IC0xO1xuICBkaXNwWSAqPSAtMTtcblxuICBpZiggaXNTZWdtZW50cyApe1xuICAgIHZhciBwdHMgPSBycy5hbGxwdHM7XG5cbiAgICBpZiggcHRzLmxlbmd0aCAvIDIgJSAyID09PSAwICl7XG4gICAgICAvLyBhbHJlYWR5IG9rXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpMiA9IHB0cy5sZW5ndGggLyAyIC0gMTtcbiAgICAgIHZhciBpMyA9IGkyICsgMjtcblxuICAgICAgZGlzcFggPSAtKCBwdHNbIGkzIF0gLSBwdHNbIGkyIF0gKTtcbiAgICAgIGRpc3BZID0gLSggcHRzWyBpMyArIDFdIC0gcHRzWyBpMiArIDFdICk7XG4gICAgfVxuICB9XG5cbiAgcnMubWlkc3JjQXJyb3dBbmdsZSA9IGdldEFuZ2xlRnJvbURpc3AoIGRpc3BYLCBkaXNwWSApO1xuXG4gIC8vIHRhcmdldFxuICAvL1xuXG4gIGlmKCAhaXNJbnNpZGUgJiYgaXNTZWdtZW50cyApe1xuICAgIGRpc3BYID0gZW5kWCAtIHJzLnNlZ3B0c1sgcnMuc2VncHRzLmxlbmd0aCAtIDIgXTtcbiAgICBkaXNwWSA9IGVuZFkgLSBycy5zZWdwdHNbIHJzLnNlZ3B0cy5sZW5ndGggLSAxIF07XG4gIH0gZWxzZSBpZiggIWlzSW5zaWRlICYmICggaXNNdWx0aWJlemllciB8fCBpc0NvbXBvdW5kIHx8IGlzU2VsZiB8fCBpc0JlemllciApICl7XG4gICAgdmFyIHB0cyA9IHJzLmFsbHB0cztcbiAgICB2YXIgbCA9IHB0cy5sZW5ndGg7XG4gICAgdmFyIGJYID0gbWF0aC5xYmV6aWVyQXQoIHB0c1tsLTZdLCBwdHNbbC00XSwgcHRzW2wtMl0sIDAuOSApO1xuICAgIHZhciBiWSA9IG1hdGgucWJlemllckF0KCBwdHNbbC01XSwgcHRzW2wtM10sIHB0c1tsLTFdLCAwLjkgKTtcblxuICAgIGRpc3BYID0gZW5kWCAtIGJYO1xuICAgIGRpc3BZID0gZW5kWSAtIGJZO1xuICB9IGVsc2Uge1xuICAgIGRpc3BYID0gdGd0UG9zLnggLSBlbmRYO1xuICAgIGRpc3BZID0gdGd0UG9zLnkgLSBlbmRZO1xuICB9XG5cbiAgcnMudGd0QXJyb3dBbmdsZSA9IGdldEFuZ2xlRnJvbURpc3AoIGRpc3BYLCBkaXNwWSApO1xufTtcblxuQlJwLmNhbGN1bGF0ZUxhYmVsQW5nbGVzID0gZnVuY3Rpb24oIGVsZSApe1xuICB2YXIgX3AgPSBlbGUuX3ByaXZhdGU7XG4gIHZhciBycyA9IF9wLnJzY3JhdGNoO1xuICB2YXIgaXNFZGdlID0gZWxlLmlzRWRnZSgpO1xuICB2YXIgcm90ID0gZWxlLnBzdHlsZSggJ3RleHQtcm90YXRpb24nICk7XG4gIHZhciByb3RTdHIgPSByb3Quc3RyVmFsdWU7XG5cbiAgaWYoIHJvdFN0ciA9PT0gJ25vbmUnICl7XG4gICAgcnMubGFiZWxBbmdsZSA9IHJzLnNvdXJjZUxhYmVsQW5nbGUgPSBycy50YXJnZXRMYWJlbEFuZ2xlID0gMDtcbiAgfSBlbHNlIGlmKCBpc0VkZ2UgJiYgcm90U3RyID09PSAnYXV0b3JvdGF0ZScgKXtcbiAgICBycy5sYWJlbEFuZ2xlID0gTWF0aC5hdGFuKCBycy5taWREaXNwWSAvIHJzLm1pZERpc3BYICk7XG4gICAgcnMuc291cmNlTGFiZWxBbmdsZSA9IHJzLnNvdXJjZUxhYmVsQXV0b0FuZ2xlO1xuICAgIHJzLnRhcmdldExhYmVsQW5nbGUgPSBycy50YXJnZXRMYWJlbEF1dG9BbmdsZTtcbiAgfSBlbHNlIGlmKCByb3RTdHIgPT09ICdhdXRvcm90YXRlJyApe1xuICAgIHJzLmxhYmVsQW5nbGUgPSBycy5zb3VyY2VMYWJlbEFuZ2xlID0gcnMudGFyZ2V0TGFiZWxBbmdsZSA9IDA7XG4gIH0gZWxzZSB7XG4gICAgcnMubGFiZWxBbmdsZSA9IHJzLnNvdXJjZUxhYmVsQW5nbGUgPSBycy50YXJnZXRMYWJlbEFuZ2xlID0gcm90LnBmVmFsdWU7XG4gIH1cbn07XG5cblxuQlJwLmZpbmRFbmRwb2ludHMgPSBmdW5jdGlvbiggZWRnZSApe1xuICB2YXIgciA9IHRoaXM7XG4gIHZhciBpbnRlcnNlY3Q7XG5cbiAgdmFyIHNvdXJjZSA9IGVkZ2Uuc291cmNlKClbMF07XG4gIHZhciB0YXJnZXQgPSBlZGdlLnRhcmdldCgpWzBdO1xuXG4gIHZhciBzcmNfcCA9IHNvdXJjZS5fcHJpdmF0ZTtcbiAgdmFyIHRndF9wID0gdGFyZ2V0Ll9wcml2YXRlO1xuXG4gIHZhciBzcmNQb3MgPSBzcmNfcC5wb3NpdGlvbjtcbiAgdmFyIHRndFBvcyA9IHRndF9wLnBvc2l0aW9uO1xuXG4gIHZhciB0Z3RBclNoYXBlID0gZWRnZS5wc3R5bGUoICd0YXJnZXQtYXJyb3ctc2hhcGUnICkudmFsdWU7XG4gIHZhciBzcmNBclNoYXBlID0gZWRnZS5wc3R5bGUoICdzb3VyY2UtYXJyb3ctc2hhcGUnICkudmFsdWU7XG5cbiAgdmFyIHRndERpc3QgPSBlZGdlLnBzdHlsZSggJ3RhcmdldC1kaXN0YW5jZS1mcm9tLW5vZGUnICkucGZWYWx1ZTtcbiAgdmFyIHNyY0Rpc3QgPSBlZGdlLnBzdHlsZSggJ3NvdXJjZS1kaXN0YW5jZS1mcm9tLW5vZGUnICkucGZWYWx1ZTtcblxuICB2YXIgcnMgPSBlZGdlLl9wcml2YXRlLnJzY3JhdGNoO1xuXG4gIHZhciBldCA9IHJzLmVkZ2VUeXBlO1xuICB2YXIgc2VsZiA9IGV0ID09PSAnc2VsZicgfHwgZXQgPT09ICdjb21wb3VuZCc7XG4gIHZhciBiZXppZXIgPSBldCA9PT0gJ2JlemllcicgfHwgZXQgPT09ICdtdWx0aWJlemllcicgfHwgc2VsZjtcbiAgdmFyIG11bHRpID0gZXQgIT09ICdiZXppZXInO1xuICB2YXIgbGluZXMgPSBldCA9PT0gJ3N0cmFpZ2h0JyB8fCBldCA9PT0gJ3NlZ21lbnRzJztcbiAgdmFyIHNlZ21lbnRzID0gZXQgPT09ICdzZWdtZW50cyc7XG4gIFxuICB2YXIgcG9ydHRhcmdldCA9IGVkZ2UuX3ByaXZhdGUuZGF0YS5wb3J0dGFyZ2V0O1xuICB2YXIgcG9ydHNvdXJjZSA9IGVkZ2UuX3ByaXZhdGUuZGF0YS5wb3J0c291cmNlO1xuICBcbiAgdmFyIGhhc0VuZHB0cyA9IGJlemllciB8fCBtdWx0aSB8fCBsaW5lcztcbiAgdmFyIHBvaW50c1Rvd2FyZHMgPSBzZWxmID8gJ2luc2lkZScgOiBlZGdlLnBzdHlsZSgnZWRnZS1wb2ludGluZy1kaXJlY3Rpb24nKS52YWx1ZTtcbiAgdmFyIGluc2lkZSA9IHBvaW50c1Rvd2FyZHMgPT09ICdpbnNpZGUnO1xuXG4gIHJzLmVkZ2VQb2ludHNUb3dhcmRzID0gcG9pbnRzVG93YXJkcztcblxuICB2YXIgcDE7IC8vIGxhc3Qga25vd24gcG9pbnQgb2YgZWRnZSBvbiB0YXJnZXQgc2lkZVxuICB2YXIgcDI7IC8vIGxhc3Qga25vd24gcG9pbnQgb2YgZWRnZSBvbiBzb3VyY2Ugc2lkZVxuXG4gIHZhciBwMV9pOyAvLyBwb2ludCB0byBpbnRlcnNlY3Qgd2l0aCB0YXJnZXQgc2hhcGVcbiAgdmFyIHAyX2k7IC8vIHBvaW50IHRvIGludGVyc2VjdCB3aXRoIHNvdXJjZSBzaGFwZVxuXG4gIGlmKCBiZXppZXIgKXtcbiAgICB2YXIgY3BTdGFydCA9IFsgcnMuY3RybHB0c1swXSwgcnMuY3RybHB0c1sxXSBdO1xuICAgIHZhciBjcEVuZCA9IG11bHRpID8gWyBycy5jdHJscHRzWyBycy5jdHJscHRzLmxlbmd0aCAtIDJdLCBycy5jdHJscHRzWyBycy5jdHJscHRzLmxlbmd0aCAtIDFdIF0gOiBjcFN0YXJ0O1xuXG4gICAgcDEgPSBjcEVuZDtcbiAgICBwMiA9IGNwU3RhcnQ7XG4gIH0gZWxzZSBpZiggbGluZXMgKXtcbiAgICB2YXIgc3JjQXJyb3dGcm9tUHQgPSAhc2VnbWVudHMgPyBbIHRndFBvcy54LCB0Z3RQb3MueSBdIDogcnMuc2VncHRzLnNsaWNlKCAwLCAyICk7XG4gICAgdmFyIHRndEFycm93RnJvbVB0ID0gIXNlZ21lbnRzID8gWyBzcmNQb3MueCwgc3JjUG9zLnkgXSA6IHJzLnNlZ3B0cy5zbGljZSggcnMuc2VncHRzLmxlbmd0aCAtIDIgKTtcblxuICAgIHAxID0gdGd0QXJyb3dGcm9tUHQ7XG4gICAgcDIgPSBzcmNBcnJvd0Zyb21QdDtcbiAgICBcbiAgICBpZighc2VnbWVudHMpe1xuICAgICAgdmFyIHBvcnRQMSA9IHNiZ24uYWRkUG9ydFJlcGxhY2VtZW50SWZBbnkoc291cmNlLCBwb3J0c291cmNlKTtcbiAgICAgIHZhciBwb3J0UDIgPSBzYmduLmFkZFBvcnRSZXBsYWNlbWVudElmQW55KHRhcmdldCwgcG9ydHRhcmdldCk7XG5cbiAgICAgIGlmKHBvcnRQMS54ICE9IHNyY1Bvcy54IHx8IHBvcnRQMS55ICE9IHNyY1Bvcy55KXtcbiAgICAgICAgcDFbMF0gPSBwb3J0UDEueDtcbiAgICAgICAgcDFbMV0gPSBwb3J0UDEueTtcbiAgICAgIH1cblxuICAgICAgaWYocG9ydFAyLnggIT0gdGd0UG9zLnggfHwgcG9ydFAyLnkgIT0gdGd0UG9zLnkpe1xuICAgICAgICBwMlswXSA9IHBvcnRQMi54O1xuICAgICAgICBwMlsxXSA9IHBvcnRQMi55O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHAxX2kgPSBwMTtcbiAgcDJfaSA9IHAyO1xuXG4gIGlmKCAhaW5zaWRlICl7XG4gICAgcDFfaSA9IFsgc3JjUG9zLngsIHNyY1Bvcy55IF07XG4gICAgcDJfaSA9IFsgdGd0UG9zLngsIHRndFBvcy55IF07XG4gIH1cblxuICBpZihzYmduLmlzTm9kZVNoYXBlVG90YWxseU92ZXJyaWRlbih0aGlzLCB0YXJnZXQpKVxuICAgIGludGVyc2VjdCA9IHIubm9kZVNoYXBlc1t0aGlzLmdldE5vZGVTaGFwZSh0YXJnZXQpXS5pbnRlcnNlY3RMaW5lKHRhcmdldCwgcDFbMF0sIHAxWzFdLCBwb3J0dGFyZ2V0ICk7XG4gIGVsc2VcbiAgICBpbnRlcnNlY3QgPSByLm5vZGVTaGFwZXNbdGhpcy5nZXROb2RlU2hhcGUodGFyZ2V0KV0uaW50ZXJzZWN0TGluZShcbiAgICAgIHRndFBvcy54LFxuICAgICAgdGd0UG9zLnksXG4gICAgICB0YXJnZXQub3V0ZXJXaWR0aCgpLFxuICAgICAgdGFyZ2V0Lm91dGVySGVpZ2h0KCksXG4gICAgICBwMVswXSxcbiAgICAgIHAxWzFdLFxuICAgICAgMFxuICAgICk7XG5cbiAgdmFyIGFycm93RW5kID0gbWF0aC5zaG9ydGVuSW50ZXJzZWN0aW9uKFxuICAgIGludGVyc2VjdCxcbiAgICBwMSxcbiAgICByLmFycm93U2hhcGVzWyB0Z3RBclNoYXBlIF0uc3BhY2luZyggZWRnZSApICsgdGd0RGlzdFxuICApO1xuICB2YXIgZWRnZUVuZCA9IG1hdGguc2hvcnRlbkludGVyc2VjdGlvbihcbiAgICBpbnRlcnNlY3QsXG4gICAgcDEsXG4gICAgci5hcnJvd1NoYXBlc1sgdGd0QXJTaGFwZSBdLmdhcCggZWRnZSApICsgdGd0RGlzdFxuICApO1xuXG4gIHJzLmVuZFggPSBlZGdlRW5kWzBdO1xuICBycy5lbmRZID0gZWRnZUVuZFsxXTtcblxuICBycy5hcnJvd0VuZFggPSBhcnJvd0VuZFswXTtcbiAgcnMuYXJyb3dFbmRZID0gYXJyb3dFbmRbMV07XG5cbiAgaWYoc2Jnbi5pc05vZGVTaGFwZVRvdGFsbHlPdmVycmlkZW4odGhpcywgc291cmNlKSlcbiAgICBpbnRlcnNlY3QgPSByLm5vZGVTaGFwZXNbdGhpcy5nZXROb2RlU2hhcGUoc291cmNlKV0uaW50ZXJzZWN0TGluZShzb3VyY2UsIHAyWzBdLCBwMlsxXSwgcG9ydHNvdXJjZSk7XG4gIGVsc2VcbiAgICBpbnRlcnNlY3QgPSByLm5vZGVTaGFwZXNbdGhpcy5nZXROb2RlU2hhcGUoc291cmNlKV0uaW50ZXJzZWN0TGluZShcbiAgICAgIHNyY1Bvcy54LFxuICAgICAgc3JjUG9zLnksXG4gICAgICBzb3VyY2Uub3V0ZXJXaWR0aCgpLFxuICAgICAgc291cmNlLm91dGVySGVpZ2h0KCksXG4gICAgICBwMlswXSxcbiAgICAgIHAyWzFdLFxuICAgICAgMFxuICAgICk7XG5cbiAgdmFyIGFycm93U3RhcnQgPSBtYXRoLnNob3J0ZW5JbnRlcnNlY3Rpb24oXG4gICAgaW50ZXJzZWN0LFxuICAgIHAyLFxuICAgIHIuYXJyb3dTaGFwZXNbIHNyY0FyU2hhcGUgXS5zcGFjaW5nKCBlZGdlICkgKyBzcmNEaXN0XG4gICk7XG4gIHZhciBlZGdlU3RhcnQgPSBtYXRoLnNob3J0ZW5JbnRlcnNlY3Rpb24oXG4gICAgaW50ZXJzZWN0LFxuICAgIHAyLFxuICAgIHIuYXJyb3dTaGFwZXNbIHNyY0FyU2hhcGUgXS5nYXAoIGVkZ2UgKSArIHNyY0Rpc3RcbiAgKTtcblxuICBycy5zdGFydFggPSBlZGdlU3RhcnRbMF07XG4gIHJzLnN0YXJ0WSA9IGVkZ2VTdGFydFsxXTtcblxuICBycy5hcnJvd1N0YXJ0WCA9IGFycm93U3RhcnRbMF07XG4gIHJzLmFycm93U3RhcnRZID0gYXJyb3dTdGFydFsxXTtcblxuICBpZiggaGFzRW5kcHRzICl7XG4gICAgaWYoICFpcy5udW1iZXIoIHJzLnN0YXJ0WCApIHx8ICFpcy5udW1iZXIoIHJzLnN0YXJ0WSApIHx8ICFpcy5udW1iZXIoIHJzLmVuZFggKSB8fCAhaXMubnVtYmVyKCBycy5lbmRZICkgKXtcbiAgICAgIHJzLmJhZExpbmUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBycy5iYWRMaW5lID0gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuXG5CUnAuZ2V0QXJyb3dXaWR0aCA9IEJScC5nZXRBcnJvd0hlaWdodCA9IGZ1bmN0aW9uKCBlZGdlV2lkdGggKXtcbiAgdmFyIGNhY2hlID0gdGhpcy5hcnJvd1dpZHRoQ2FjaGUgPSB0aGlzLmFycm93V2lkdGhDYWNoZSB8fCB7fTtcblxuICB2YXIgY2FjaGVkVmFsID0gY2FjaGVbIGVkZ2VXaWR0aCBdO1xuICBpZiggY2FjaGVkVmFsICl7XG4gICAgcmV0dXJuIGNhY2hlZFZhbDtcbiAgfVxuXG4gIGNhY2hlZFZhbCA9ICBNYXRoLm1heCggTWF0aC5wb3coIGVkZ2VXaWR0aCAqIDEzLjM3LCAwLjkgKSwgMjkgKTtcbiAgY2FjaGVbIGVkZ2VXaWR0aCBdID0gY2FjaGVkVmFsO1xuXG4gIHJldHVybiBjYWNoZWRWYWw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJScDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJScCA9IHt9O1xuXG5CUnAuZ2V0Q2FjaGVkSW1hZ2UgPSBmdW5jdGlvbiggdXJsLCBjcm9zc09yaWdpbiwgb25Mb2FkICl7XG4gIHZhciByID0gdGhpcztcbiAgdmFyIGltYWdlQ2FjaGUgPSByLmltYWdlQ2FjaGUgPSByLmltYWdlQ2FjaGUgfHwge307XG4gIHZhciBjYWNoZSA9IGltYWdlQ2FjaGVbIHVybCBdO1xuXG4gIGlmKCBjYWNoZSApe1xuICAgIGlmKCAhY2FjaGUuaW1hZ2UuY29tcGxldGUgKXtcbiAgICAgIGNhY2hlLmltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkxvYWQpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZS5pbWFnZTtcbiAgfSBlbHNlIHtcbiAgICBjYWNoZSA9IGltYWdlQ2FjaGVbIHVybCBdID0gaW1hZ2VDYWNoZVsgdXJsIF0gfHwge307XG5cbiAgICB2YXIgaW1hZ2UgPSBjYWNoZS5pbWFnZSA9IG5ldyBJbWFnZSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZCk7XG5cbiAgICAvLyAjMTU4MiBzYWZhcmkgZG9lc24ndCBsb2FkIGRhdGEgdXJpcyB3aXRoIGNyb3NzT3JpZ2luIHByb3Blcmx5XG4gICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEyMzk3OFxuICAgIHZhciBkYXRhVXJpUHJlZml4ID0gJ2RhdGE6JztcbiAgICB2YXIgaXNEYXRhVXJpID0gdXJsLnN1YnN0cmluZyggMCwgZGF0YVVyaVByZWZpeC5sZW5ndGggKS50b0xvd2VyQ2FzZSgpID09PSBkYXRhVXJpUHJlZml4O1xuICAgIGlmKCAhaXNEYXRhVXJpICl7XG4gICAgICBpbWFnZS5jcm9zc09yaWdpbiA9IGNyb3NzT3JpZ2luOyAvLyBwcmV2ZW50IHRhaW50ZWQgY2FudmFzXG4gICAgfVxuXG4gICAgaW1hZ2Uuc3JjID0gdXJsO1xuXG4gICAgcmV0dXJuIGltYWdlO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJScDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzID0gcmVxdWlyZSggJy4uLy4uLy4uL2lzJyApO1xudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vLi4vLi4vdXRpbCcgKTtcblxudmFyIEJhc2VSZW5kZXJlciA9IGZ1bmN0aW9uKCBvcHRpb25zICl7IHRoaXMuaW5pdCggb3B0aW9ucyApOyB9O1xudmFyIEJSID0gQmFzZVJlbmRlcmVyO1xudmFyIEJScCA9IEJSLnByb3RvdHlwZTtcblxuQlJwLmNsaWVudEZ1bmN0aW9ucyA9IFsgJ3JlZHJhd0hpbnQnLCAncmVuZGVyJywgJ3JlbmRlclRvJywgJ21hdGNoQ2FudmFzU2l6ZScsICdub2RlU2hhcGVJbXBsJywgJ2Fycm93U2hhcGVJbXBsJyBdO1xuXG5CUnAuaW5pdCA9IGZ1bmN0aW9uKCBvcHRpb25zICl7XG4gIHZhciByID0gdGhpcztcblxuICByLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gIHIuY3kgPSBvcHRpb25zLmN5O1xuXG4gIHIuY29udGFpbmVyID0gb3B0aW9ucy5jeS5jb250YWluZXIoKTtcblxuICByLnNlbGVjdGlvbiA9IFsgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCAwXTsgLy8gQ29vcmRpbmF0ZXMgZm9yIHNlbGVjdGlvbiBib3gsIHBsdXMgZW5hYmxlZCBmbGFnXG5cbiAgci5iZXppZXJQcm9qUGN0cyA9IFsgMC4wNSwgMC4yMjUsIDAuNCwgMC41LCAwLjYsIDAuNzc1LCAwLjk1IF07XG5cbiAgLy8tLVBvaW50ZXItcmVsYXRlZCBkYXRhXG4gIHIuaG92ZXJEYXRhID0ge2Rvd246IG51bGwsIGxhc3Q6IG51bGwsXG4gICAgICBkb3duVGltZTogbnVsbCwgdHJpZ2dlck1vZGU6IG51bGwsXG4gICAgICBkcmFnZ2luZzogZmFsc2UsXG4gICAgICBpbml0aWFsUGFuOiBbIG51bGwsIG51bGwgXSwgY2FwdHVyZTogZmFsc2V9O1xuXG4gIHIuZHJhZ0RhdGEgPSB7cG9zc2libGVEcmFnRWxlbWVudHM6IFtdfTtcblxuICByLnRvdWNoRGF0YSA9IHtcbiAgICBzdGFydDogbnVsbCwgY2FwdHVyZTogZmFsc2UsXG5cbiAgICAvLyBUaGVzZSAzIGZpZWxkcyByZWxhdGVkIHRvIHRhcCwgdGFwaG9sZCBldmVudHNcbiAgICBzdGFydFBvc2l0aW9uOiBbIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwgXSxcbiAgICBzaW5nbGVUb3VjaFN0YXJ0VGltZTogbnVsbCxcbiAgICBzaW5nbGVUb3VjaE1vdmVkOiB0cnVlLFxuXG4gICAgbm93OiBbIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwgXSxcbiAgICBlYXJsaWVyOiBbIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwgXVxuICB9O1xuXG4gIHIucmVkcmF3cyA9IDA7XG4gIHIuc2hvd0ZwcyA9IG9wdGlvbnMuc2hvd0ZwcztcblxuICByLmhpZGVFZGdlc09uVmlld3BvcnQgPSBvcHRpb25zLmhpZGVFZGdlc09uVmlld3BvcnQ7XG4gIHIuaGlkZUxhYmVsc09uVmlld3BvcnQgPSBvcHRpb25zLmhpZGVMYWJlbHNPblZpZXdwb3J0O1xuICByLnRleHR1cmVPblZpZXdwb3J0ID0gb3B0aW9ucy50ZXh0dXJlT25WaWV3cG9ydDtcbiAgci53aGVlbFNlbnNpdGl2aXR5ID0gb3B0aW9ucy53aGVlbFNlbnNpdGl2aXR5O1xuICByLm1vdGlvbkJsdXJFbmFibGVkID0gb3B0aW9ucy5tb3Rpb25CbHVyOyAvLyBvbiBieSBkZWZhdWx0XG4gIHIuZm9yY2VkUGl4ZWxSYXRpbyA9IG9wdGlvbnMucGl4ZWxSYXRpbztcbiAgci5tb3Rpb25CbHVyID0gb3B0aW9ucy5tb3Rpb25CbHVyOyAvLyBmb3IgaW5pdGlhbCBraWNrIG9mZlxuICByLm1vdGlvbkJsdXJPcGFjaXR5ID0gb3B0aW9ucy5tb3Rpb25CbHVyT3BhY2l0eTtcbiAgci5tb3Rpb25CbHVyVHJhbnNwYXJlbmN5ID0gMSAtIHIubW90aW9uQmx1ck9wYWNpdHk7XG4gIHIubW90aW9uQmx1clB4UmF0aW8gPSAxO1xuICByLm1iUHhSQmx1cnJ5ID0gMTsgLy8wLjg7XG4gIHIubWluTWJMb3dRdWFsRnJhbWVzID0gNDtcbiAgci5mdWxsUXVhbGl0eU1iID0gZmFsc2U7XG4gIHIuY2xlYXJlZEZvck1vdGlvbkJsdXIgPSBbXTtcbiAgci5kZXNrdG9wVGFwVGhyZXNob2xkID0gb3B0aW9ucy5kZXNrdG9wVGFwVGhyZXNob2xkO1xuICByLmRlc2t0b3BUYXBUaHJlc2hvbGQyID0gb3B0aW9ucy5kZXNrdG9wVGFwVGhyZXNob2xkICogb3B0aW9ucy5kZXNrdG9wVGFwVGhyZXNob2xkO1xuICByLnRvdWNoVGFwVGhyZXNob2xkID0gb3B0aW9ucy50b3VjaFRhcFRocmVzaG9sZDtcbiAgci50b3VjaFRhcFRocmVzaG9sZDIgPSBvcHRpb25zLnRvdWNoVGFwVGhyZXNob2xkICogb3B0aW9ucy50b3VjaFRhcFRocmVzaG9sZDtcbiAgci50YXBob2xkRHVyYXRpb24gPSA1MDA7XG5cbiAgci5iaW5kaW5ncyA9IFtdO1xuICByLmJlZm9yZVJlbmRlckNhbGxiYWNrcyA9IFtdO1xuICByLmJlZm9yZVJlbmRlclByaW9yaXRpZXMgPSB7IC8vIGhpZ2hlciBwcmlvcml0eSBleGVjcyBiZWZvcmUgbG93ZXIgb25lXG4gICAgYW5pbWF0aW9uczogICA0MDAsXG4gICAgZWxlQ2FsY3M6ICAgICAzMDAsXG4gICAgZWxlVHhyRGVxOiAgICAyMDAsXG4gICAgbHlyVHhyRGVxOiAgICAxMDBcbiAgfTtcblxuICByLnJlZ2lzdGVyTm9kZVNoYXBlcygpO1xuICByLnJlZ2lzdGVyQXJyb3dTaGFwZXMoKTtcbiAgci5yZWdpc3RlckNhbGN1bGF0aW9uTGlzdGVuZXJzKCk7XG4gIHIubG9hZCgpO1xufTtcblxuQlJwLm5vdGlmeSA9IGZ1bmN0aW9uKCBwYXJhbXMgKXtcbiAgdmFyIHR5cGVzO1xuICB2YXIgciA9IHRoaXM7XG5cbiAgLy8gdGhlIHJlbmRlcmVyIGNhbid0IGJlIG5vdGlmaWVkIGFmdGVyIGl0J3MgZGVzdHJveWVkXG4gIGlmKCB0aGlzLmRlc3Ryb3llZCApeyByZXR1cm47IH1cblxuICBpZiggaXMuYXJyYXkoIHBhcmFtcy50eXBlICkgKXtcbiAgICB0eXBlcyA9IHBhcmFtcy50eXBlO1xuXG4gIH0gZWxzZSB7XG4gICAgdHlwZXMgPSBbIHBhcmFtcy50eXBlIF07XG4gIH1cblxuICB2YXIgaGFzID0ge307XG4gIGZvciggdmFyIGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgdHlwZSA9IHR5cGVzWyBpIF07XG5cbiAgICBoYXNbIHR5cGUgXSA9IHRydWU7XG4gIH0gLy8gZm9yXG5cbiAgaWYoIGhhc1snZGVzdHJveSddICl7XG4gICAgci5kZXN0cm95KCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYoIGhhc1snYWRkJ10gfHwgaGFzWydyZW1vdmUnXSB8fCBoYXNbJ2xvYWQnXSB8fCBoYXNbJ3pvcmRlciddICl7XG4gICAgci5pbnZhbGlkYXRlQ2FjaGVkWlNvcnRlZEVsZXMoKTtcbiAgfVxuXG4gIGlmKCBoYXNbJ3ZpZXdwb3J0J10gKXtcbiAgICByLnJlZHJhd0hpbnQoICdzZWxlY3QnLCB0cnVlICk7XG4gIH1cblxuICBpZiggaGFzWydsb2FkJ10gfHwgaGFzWydyZXNpemUnXSApe1xuICAgIHIuaW52YWxpZGF0ZUNvbnRhaW5lckNsaWVudENvb3Jkc0NhY2hlKCk7XG4gICAgci5tYXRjaENhbnZhc1NpemUoIHIuY29udGFpbmVyICk7XG4gIH1cblxuICByLnJlZHJhd0hpbnQoICdlbGVzJywgdHJ1ZSApO1xuICByLnJlZHJhd0hpbnQoICdkcmFnJywgdHJ1ZSApO1xuXG4gIHRoaXMuc3RhcnRSZW5kZXJMb29wKCk7XG5cbiAgdGhpcy5yZWRyYXcoKTtcbn07XG5cbkJScC5kZXN0cm95ID0gZnVuY3Rpb24oKXtcbiAgdmFyIHIgPSB0aGlzO1xuXG4gIHIuZGVzdHJveWVkID0gdHJ1ZTtcblxuICByLmN5LnN0b3BBbmltYXRpb25Mb29wKCk7XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCByLmJpbmRpbmdzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGJpbmRpbmcgPSByLmJpbmRpbmdzWyBpIF07XG4gICAgdmFyIGIgPSBiaW5kaW5nO1xuICAgIHZhciB0Z3QgPSBiLnRhcmdldDtcblxuICAgICggdGd0Lm9mZiB8fCB0Z3QucmVtb3ZlRXZlbnRMaXN0ZW5lciApLmFwcGx5KCB0Z3QsIGIuYXJncyApO1xuICB9XG5cbiAgci5iaW5kaW5ncyA9IFtdO1xuICByLmJlZm9yZVJlbmRlckNhbGxiYWNrcyA9IFtdO1xuICByLm9uVXBkYXRlRWxlQ2FsY3NGbnMgPSBbXTtcblxuICBpZiggci5yZW1vdmVPYnNlcnZlciApe1xuICAgIHIucmVtb3ZlT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICB9XG5cbiAgaWYoIHIuc3R5bGVPYnNlcnZlciApe1xuICAgIHIuc3R5bGVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gIH1cblxuICBpZiggci5sYWJlbENhbGNEaXYgKXtcbiAgICB0cnkge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCggci5sYWJlbENhbGNEaXYgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgIH0gY2F0Y2goIGUgKXtcbiAgICAgIC8vIGllMTAgaXNzdWUgIzEwMTRcbiAgICB9XG4gIH1cbn07XG5cbltcbiAgcmVxdWlyZSggJy4vYXJyb3ctc2hhcGVzJyApLFxuICByZXF1aXJlKCAnLi9jb29yZC1lbGUtbWF0aCcgKSxcbiAgcmVxdWlyZSggJy4vaW1hZ2VzJyApLFxuICByZXF1aXJlKCAnLi9sb2FkLWxpc3RlbmVycycgKSxcbiAgcmVxdWlyZSggJy4vbm9kZS1zaGFwZXMnICksXG4gIHJlcXVpcmUoICcuL3JlZHJhdycgKVxuXS5mb3JFYWNoKCBmdW5jdGlvbiggcHJvcHMgKXtcbiAgdXRpbC5leHRlbmQoIEJScCwgcHJvcHMgKTtcbn0gKTtcblxubW9kdWxlLmV4cG9ydHMgPSBCUjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzID0gcmVxdWlyZSggJy4uLy4uLy4uL2lzJyApO1xudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vLi4vLi4vdXRpbCcgKTtcbnZhciBtYXRoID0gcmVxdWlyZSggJy4uLy4uLy4uL21hdGgnICk7XG52YXIgRXZlbnQgPSByZXF1aXJlKCAnLi4vLi4vLi4vZXZlbnQnICk7XG5cbnZhciBCUnAgPSB7fTtcblxuQlJwLnJlZ2lzdGVyQmluZGluZyA9IGZ1bmN0aW9uKCB0YXJnZXQsIGV2ZW50LCBoYW5kbGVyLCB1c2VDYXB0dXJlICl7XG4gIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KCBhcmd1bWVudHMsIFsxXSApOyAvLyBjb3B5XG4gIHZhciBiID0gdGhpcy5iaW5kZXIoIHRhcmdldCApO1xuXG4gIHJldHVybiBiLm9uLmFwcGx5KCBiLCBhcmdzICk7XG59O1xuXG5CUnAuYmluZGVyID0gZnVuY3Rpb24oIHRndCApe1xuICB2YXIgciA9IHRoaXM7XG5cbiAgdmFyIG9uID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIHIuYmluZGluZ3MucHVzaCh7XG4gICAgICB0YXJnZXQ6IHRndCxcbiAgICAgIGFyZ3M6IGFyZ3NcbiAgICB9KTtcblxuICAgICggdGd0LmFkZEV2ZW50TGlzdGVuZXIgfHwgdGd0Lm9uICkuYXBwbHkoIHRndCwgYXJncyApO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBvbjogb24sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogb24sXG4gICAgYWRkTGlzdGVuZXI6IG9uLFxuICAgIGJpbmQ6IG9uXG4gIH07XG59O1xuXG5CUnAubm9kZUlzRHJhZ2dhYmxlID0gZnVuY3Rpb24oIG5vZGUgKXtcbiAgcmV0dXJuIChcbiAgICBub2RlXG4gICAgJiYgbm9kZS5pc05vZGUoKVxuICAgICYmICFub2RlLmxvY2tlZCgpXG4gICAgJiYgbm9kZS5ncmFiYmFibGUoKVxuICApO1xufTtcblxuQlJwLm5vZGVJc0dyYWJiYWJsZSA9IGZ1bmN0aW9uKCBub2RlICl7XG4gIHJldHVybiAoXG4gICAgdGhpcy5ub2RlSXNEcmFnZ2FibGUoIG5vZGUgKVxuICAgICYmIG5vZGUucHN0eWxlKCAnb3BhY2l0eScgKS52YWx1ZSAhPT0gMFxuICAgICYmIG5vZGUucHN0eWxlKCAndmlzaWJpbGl0eScgKS52YWx1ZSA9PT0gJ3Zpc2libGUnXG4gICAgJiYgbm9kZS5wc3R5bGUoICdkaXNwbGF5JyApLnZhbHVlID09PSAnZWxlbWVudCdcbiAgKTtcbn07XG5cbkJScC5sb2FkID0gZnVuY3Rpb24oKXtcbiAgdmFyIHIgPSB0aGlzO1xuXG4gIHZhciB0cmlnZ2VyRXZlbnRzID0gZnVuY3Rpb24oIHRhcmdldCwgbmFtZXMsIGUsIHByb3BzICl7XG4gICAgaWYoIHRhcmdldCA9PSBudWxsICl7XG4gICAgICB0YXJnZXQgPSByLmN5O1xuICAgIH1cblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBuYW1lID0gbmFtZXNbIGkgXTtcblxuICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCBlLCB1dGlsLmV4dGVuZCggeyB0eXBlOiBuYW1lIH0sIHByb3BzICkgKTtcbiAgICAgIHRhcmdldC50cmlnZ2VyKCBldmVudCApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNNdWx0U2VsS2V5RG93biA9IGZ1bmN0aW9uKCBlICl7XG4gICAgcmV0dXJuIGUuc2hpZnRLZXkgfHwgZS5tZXRhS2V5IHx8IGUuY3RybEtleTsgLy8gbWF5YmUgZS5hbHRLZXlcbiAgfTtcblxuICB2YXIgYWxsb3dQYW5uaW5nUGFzc3Rocm91Z2ggPSBmdW5jdGlvbiggZG93biwgZG93bnMgKXtcbiAgICB2YXIgYWxsb3dQYXNzdGhyb3VnaCA9IHRydWU7XG5cbiAgICBpZiggci5jeS5oYXNDb21wb3VuZE5vZGVzKCkgJiYgZG93biAmJiBkb3duLmlzRWRnZSgpICl7XG4gICAgICAvLyBhIGNvbXBvdW5kIG5vZGUgYmVsb3cgdGhlIGVkZ2UgPT4gbm8gcGFzc3Rocm91Z2ggcGFubmluZ1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGRvd25zICYmIGkgPCBkb3ducy5sZW5ndGg7IGkrKyApe1xuICAgICAgICB2YXIgZG93biA9IGRvd25zW2ldO1xuXG4gICAgICAgIGlmKCBkb3duLmlzTm9kZSgpICYmIGRvd24uaXNQYXJlbnQoKSApe1xuICAgICAgICAgIGFsbG93UGFzc3Rocm91Z2ggPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhbGxvd1Bhc3N0aHJvdWdoID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWxsb3dQYXNzdGhyb3VnaDtcbiAgfTtcblxuICB2YXIgZ2V0RHJhZ0xpc3RJZHMgPSBmdW5jdGlvbiggb3B0cyApe1xuICAgIHZhciBsaXN0SGFzSWQ7XG5cbiAgICBpZiggb3B0cy5hZGRUb0xpc3QgJiYgci5jeS5oYXNDb21wb3VuZE5vZGVzKCkgKXsgLy8gb25seSBuZWVkZWQgZm9yIGNvbXBvdW5kIGdyYXBoc1xuICAgICAgaWYoICFvcHRzLmFkZFRvTGlzdC5oYXNJZCApeyAvLyBidWlsZCBpZHMgbG9va3VwIGlmIGRvZXNuJ3QgYWxyZWFkeSBleGlzdFxuICAgICAgICBvcHRzLmFkZFRvTGlzdC5oYXNJZCA9IHt9O1xuXG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgb3B0cy5hZGRUb0xpc3QubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgICB2YXIgZWxlID0gb3B0cy5hZGRUb0xpc3RbIGkgXTtcblxuICAgICAgICAgIG9wdHMuYWRkVG9MaXN0Lmhhc0lkWyBlbGUuaWQoKSBdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0SGFzSWQgPSBvcHRzLmFkZFRvTGlzdC5oYXNJZDtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdEhhc0lkIHx8IHt9O1xuICB9O1xuXG4gIHZhciBzZXRHcmFiYmVkID0gZnVuY3Rpb24oIGVsZSApe1xuICAgIGVsZVswXS5fcHJpdmF0ZS5ncmFiYmVkID0gdHJ1ZTtcbiAgfTtcblxuICB2YXIgc2V0RnJlZWQgPSBmdW5jdGlvbiggZWxlICl7XG4gICAgZWxlWzBdLl9wcml2YXRlLmdyYWJiZWQgPSBmYWxzZTtcbiAgfTtcblxuICB2YXIgc2V0SW5EcmFnTGF5ZXIgPSBmdW5jdGlvbiggZWxlICl7XG4gICAgZWxlWzBdLl9wcml2YXRlLnJzY3JhdGNoLmluRHJhZ0xheWVyID0gdHJ1ZTtcbiAgfTtcblxuICB2YXIgc2V0T3V0RHJhZ0xheWVyID0gZnVuY3Rpb24oIGVsZSApe1xuICAgIGVsZVswXS5fcHJpdmF0ZS5yc2NyYXRjaC5pbkRyYWdMYXllciA9IGZhbHNlO1xuICB9O1xuXG4gIHZhciBzZXRHcmFiVGFyZ2V0ID0gZnVuY3Rpb24oIGVsZSApe1xuICAgIGVsZVswXS5fcHJpdmF0ZS5yc2NyYXRjaC5pc0dyYWJUYXJnZXQgPSB0cnVlO1xuICB9O1xuXG4gIHZhciByZW1vdmVHcmFiVGFyZ2V0ID0gZnVuY3Rpb24oIGVsZSApe1xuICAgIGVsZVswXS5fcHJpdmF0ZS5yc2NyYXRjaC5pc0dyYWJUYXJnZXQgPSBmYWxzZTtcbiAgfTtcblxuICB2YXIgYWRkVG9EcmFnTGlzdCA9IGZ1bmN0aW9uKCBlbGUsIG9wdHMgKXtcbiAgICB2YXIgbGlzdEhhc0lkID0gZ2V0RHJhZ0xpc3RJZHMoIG9wdHMgKTtcblxuICAgIGlmKCAhbGlzdEhhc0lkWyBlbGUuaWQoKSBdICl7XG4gICAgICBvcHRzLmFkZFRvTGlzdC5wdXNoKCBlbGUgKTtcbiAgICAgIGxpc3RIYXNJZFsgZWxlLmlkKCkgXSA9IHRydWU7XG5cbiAgICAgIHNldEdyYWJiZWQoIGVsZSApO1xuICAgIH1cbiAgfTtcblxuICAvLyBoZWxwZXIgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHdoaWNoIGNoaWxkIG5vZGVzIGFuZCBpbm5lciBlZGdlc1xuICAvLyBvZiBhIGNvbXBvdW5kIG5vZGUgdG8gYmUgZHJhZ2dlZCBhcyB3ZWxsIGFzIHRoZSBncmFiYmVkIGFuZCBzZWxlY3RlZCBub2Rlc1xuICB2YXIgYWRkRGVzY2VuZGFudHNUb0RyYWcgPSBmdW5jdGlvbiggbm9kZSwgb3B0cyApe1xuICAgIGlmKCAhbm9kZS5jeSgpLmhhc0NvbXBvdW5kTm9kZXMoKSApe1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmKCBvcHRzLmluRHJhZ0xheWVyID09IG51bGwgJiYgb3B0cy5hZGRUb0xpc3QgPT0gbnVsbCApeyByZXR1cm47IH0gLy8gbm90aGluZyB0byBkb1xuXG4gICAgdmFyIGlubmVyTm9kZXMgPSBub2RlLmRlc2NlbmRhbnRzKCk7XG5cbiAgICBpZiggb3B0cy5pbkRyYWdMYXllciApe1xuICAgICAgaW5uZXJOb2Rlcy5mb3JFYWNoKCBzZXRJbkRyYWdMYXllciApO1xuICAgICAgaW5uZXJOb2Rlcy5jb25uZWN0ZWRFZGdlcygpLmZvckVhY2goIHNldEluRHJhZ0xheWVyICk7XG4gICAgfVxuXG4gICAgaWYoIG9wdHMuYWRkVG9MaXN0ICl7XG4gICAgICBpbm5lck5vZGVzLmZvckVhY2goZnVuY3Rpb24oIGVsZSApe1xuICAgICAgICBhZGRUb0RyYWdMaXN0KCBlbGUsIG9wdHMgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvLyBhZGRzIHRoZSBnaXZlbiBub2RlcyBhbmQgaXRzIG5laWdoYm91cmhvb2QgdG8gdGhlIGRyYWcgbGF5ZXJcbiAgdmFyIGFkZE5vZGVzVG9EcmFnID0gZnVuY3Rpb24oIG5vZGVzLCBvcHRzICl7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgICB2YXIgaGFzQ29tcG91bmROb2RlcyA9IG5vZGVzLmN5KCkuaGFzQ29tcG91bmROb2RlcygpO1xuXG4gICAgaWYoIG9wdHMuaW5EcmFnTGF5ZXIgKXtcbiAgICAgIG5vZGVzLmZvckVhY2goIHNldEluRHJhZ0xheWVyICk7XG5cbiAgICAgIG5vZGVzLm5laWdoYm9yaG9vZCgpLnN0ZEZpbHRlcihmdW5jdGlvbiggZWxlICl7XG4gICAgICAgIHJldHVybiAhaGFzQ29tcG91bmROb2RlcyB8fCBlbGUuaXNFZGdlKCk7XG4gICAgICB9KS5mb3JFYWNoKCBzZXRJbkRyYWdMYXllciApO1xuICAgIH1cblxuICAgIGlmKCBvcHRzLmFkZFRvTGlzdCApe1xuICAgICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbiggZWxlICl7XG4gICAgICAgIGFkZFRvRHJhZ0xpc3QoIGVsZSwgb3B0cyApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgYWRkRGVzY2VuZGFudHNUb0RyYWcoIG5vZGVzLCBvcHRzICk7IC8vIGFsd2F5cyBhZGQgdG8gZHJhZ1xuXG4gICAgLy8gYWxzbyBhZGQgbm9kZXMgYW5kIGVkZ2VzIHJlbGF0ZWQgdG8gdGhlIHRvcG1vc3QgYW5jZXN0b3JcbiAgICB1cGRhdGVBbmNlc3RvcnNJbkRyYWdMYXllciggbm9kZXMsIHtcbiAgICAgIGluRHJhZ0xheWVyOiBvcHRzLmluRHJhZ0xheWVyXG4gICAgfSApO1xuXG4gICAgci51cGRhdGVDYWNoZWRHcmFiYmVkRWxlcygpO1xuICB9O1xuXG4gIHZhciBhZGROb2RlVG9EcmFnID0gYWRkTm9kZXNUb0RyYWc7XG5cbiAgdmFyIGZyZWVEcmFnZ2VkRWxlbWVudHMgPSBmdW5jdGlvbiggZ3JhYmJlZEVsZXMgKXtcbiAgICBpZiggIWdyYWJiZWRFbGVzICl7IHJldHVybjsgfVxuXG4gICAgZ3JhYmJlZEVsZXMuaGFzSWQgPSB7fTsgLy8gY2xlYXIgdGhlIGlkIGxpc3RcblxuICAgIC8vIGp1c3QgZ28gb3ZlciBhbGwgZWxlbWVudHMgcmF0aGVyIHRoYW4gZG9pbmcgYSBidW5jaCBvZiAocG9zc2libHkgZXhwZW5zaXZlKSB0cmF2ZXJzYWxzXG4gICAgci5nZXRDYWNoZWRaU29ydGVkRWxlcygpLmZvckVhY2goZnVuY3Rpb24oIGVsZSApe1xuICAgICAgc2V0RnJlZWQoIGVsZSApO1xuICAgICAgc2V0T3V0RHJhZ0xheWVyKCBlbGUgKTtcbiAgICAgIHJlbW92ZUdyYWJUYXJnZXQoIGVsZSApO1xuICAgIH0pO1xuXG4gICAgci51cGRhdGVDYWNoZWRHcmFiYmVkRWxlcygpO1xuICB9O1xuXG4gIC8vIGhlbHBlciBmdW5jdGlvbiB0byBkZXRlcm1pbmUgd2hpY2ggYW5jZXN0b3Igbm9kZXMgYW5kIGVkZ2VzIHNob3VsZCBnb1xuICAvLyB0byB0aGUgZHJhZyBsYXllciAob3Igc2hvdWxkIGJlIHJlbW92ZWQgZnJvbSBkcmFnIGxheWVyKS5cbiAgdmFyIHVwZGF0ZUFuY2VzdG9yc0luRHJhZ0xheWVyID0gZnVuY3Rpb24oIG5vZGUsIG9wdHMgKXtcblxuICAgIGlmKCBvcHRzLmluRHJhZ0xheWVyID09IG51bGwgJiYgb3B0cy5hZGRUb0xpc3QgPT0gbnVsbCApeyByZXR1cm47IH0gLy8gbm90aGluZyB0byBkb1xuXG4gICAgaWYoICFub2RlLmN5KCkuaGFzQ29tcG91bmROb2RlcygpICl7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZmluZCB0b3AtbGV2ZWwgcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IG5vZGUuYW5jZXN0b3JzKCkub3JwaGFucygpO1xuXG4gICAgLy8gbm8gcGFyZW50IG5vZGU6IG5vIG5vZGVzIHRvIGFkZCB0byB0aGUgZHJhZyBsYXllclxuICAgIGlmKCBwYXJlbnQuc2FtZSggbm9kZSApICl7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5vZGVzID0gcGFyZW50LmRlc2NlbmRhbnRzKCkuc3Bhd25TZWxmKClcbiAgICAgIC5tZXJnZSggcGFyZW50IClcbiAgICAgIC51bm1lcmdlKCBub2RlIClcbiAgICAgIC51bm1lcmdlKCBub2RlLmRlc2NlbmRhbnRzKCkgKVxuICAgIDtcblxuICAgIHZhciBlZGdlcyA9IG5vZGVzLmNvbm5lY3RlZEVkZ2VzKCk7XG5cbiAgICBpZiggb3B0cy5pbkRyYWdMYXllciApe1xuICAgICAgZWRnZXMuZm9yRWFjaCggc2V0SW5EcmFnTGF5ZXIgKTtcbiAgICAgIG5vZGVzLmZvckVhY2goIHNldEluRHJhZ0xheWVyICk7XG4gICAgfVxuXG4gICAgaWYoIG9wdHMuYWRkVG9MaXN0ICl7XG4gICAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKCBlbGUgKXtcbiAgICAgICAgYWRkVG9EcmFnTGlzdCggZWxlLCBvcHRzICk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhdmVNdXRhdGlvbnNBcGkgPSB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCc7XG5cbiAgLy8gd2F0Y2ggZm9yIHdoZW4gdGhlIGN5IGNvbnRhaW5lciBpcyByZW1vdmVkIGZyb20gdGhlIGRvbVxuICBpZiggaGF2ZU11dGF0aW9uc0FwaSApe1xuICAgIHIucmVtb3ZlT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlciggZnVuY3Rpb24oIG11dG5zICl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbXV0bnMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIG11dG4gPSBtdXRuc1sgaSBdO1xuICAgICAgICB2YXIgck5vZGVzID0gbXV0bi5yZW1vdmVkTm9kZXM7XG5cbiAgICAgICAgaWYoIHJOb2RlcyApeyBmb3IoIHZhciBqID0gMDsgaiA8IHJOb2Rlcy5sZW5ndGg7IGorKyApe1xuICAgICAgICAgIHZhciByTm9kZSA9IHJOb2Rlc1sgaiBdO1xuXG4gICAgICAgICAgaWYoIHJOb2RlID09PSByLmNvbnRhaW5lciApe1xuICAgICAgICAgICAgci5kZXN0cm95KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gfVxuICAgICAgfVxuICAgIH0gKTtcblxuICAgIGlmKCByLmNvbnRhaW5lci5wYXJlbnROb2RlICl7XG4gICAgICByLnJlbW92ZU9ic2VydmVyLm9ic2VydmUoIHIuY29udGFpbmVyLnBhcmVudE5vZGUsIHsgY2hpbGRMaXN0OiB0cnVlIH0gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgci5yZWdpc3RlckJpbmRpbmcoIHIuY29udGFpbmVyLCAnRE9NTm9kZVJlbW92ZWQnLCBmdW5jdGlvbiggZSApe1xuICAgICAgci5kZXN0cm95KCk7XG4gICAgfSApO1xuICB9XG5cbiAgdmFyIG9uUmVzaXplID0gdXRpbC5kZWJvdW5jZSggZnVuY3Rpb24oKXtcbiAgICByLmN5LmludmFsaWRhdGVTaXplKCk7XG4gICAgci5pbnZhbGlkYXRlQ29udGFpbmVyQ2xpZW50Q29vcmRzQ2FjaGUoKTtcblxuICAgIHIubWF0Y2hDYW52YXNTaXplKCByLmNvbnRhaW5lciApO1xuICAgIHIucmVkcmF3SGludCggJ2VsZXMnLCB0cnVlICk7XG4gICAgci5yZWRyYXdIaW50KCAnZHJhZycsIHRydWUgKTtcbiAgICByLnJlZHJhdygpO1xuICB9LCAxMDAgKTtcblxuICBpZiggaGF2ZU11dGF0aW9uc0FwaSApe1xuICAgIHIuc3R5bGVPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCBvblJlc2l6ZSApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbiAgICByLnN0eWxlT2JzZXJ2ZXIub2JzZXJ2ZSggci5jb250YWluZXIsIHsgYXR0cmlidXRlczogdHJ1ZSB9ICk7XG4gIH1cblxuICAvLyBhdXRvIHJlc2l6ZVxuICByLnJlZ2lzdGVyQmluZGluZyggd2luZG93LCAncmVzaXplJywgb25SZXNpemUgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4gIHZhciBpbnZhbEN0bnJCQk9uU2Nyb2xsID0gZnVuY3Rpb24oIGRvbUVsZSApe1xuICAgIHIucmVnaXN0ZXJCaW5kaW5nKCBkb21FbGUsICdzY3JvbGwnLCBmdW5jdGlvbiggZSApe1xuICAgICAgci5pbnZhbGlkYXRlQ29udGFpbmVyQ2xpZW50Q29vcmRzQ2FjaGUoKTtcbiAgICB9ICk7XG4gIH07XG5cbiAgdmFyIGJiQ3RuciA9IHIuY3kuY29udGFpbmVyKCk7XG5cbiAgZm9yKCA7OyApe1xuXG4gICAgaW52YWxDdG5yQkJPblNjcm9sbCggYmJDdG5yICk7XG5cbiAgICBpZiggYmJDdG5yLnBhcmVudE5vZGUgKXtcbiAgICAgIGJiQ3RuciA9IGJiQ3Ruci5wYXJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgfVxuXG4gIC8vIHN0b3AgcmlnaHQgY2xpY2sgbWVudSBmcm9tIGFwcGVhcmluZyBvbiBjeVxuICByLnJlZ2lzdGVyQmluZGluZyggci5jb250YWluZXIsICdjb250ZXh0bWVudScsIGZ1bmN0aW9uKCBlICl7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9ICk7XG5cbiAgdmFyIGluQm94U2VsZWN0aW9uID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gci5zZWxlY3Rpb25bNF0gIT09IDA7XG4gIH07XG5cbiAgLy8gUHJpbWFyeSBrZXlcbiAgci5yZWdpc3RlckJpbmRpbmcoIHIuY29udGFpbmVyLCAnbW91c2Vkb3duJywgZnVuY3Rpb24gbW91c2Vkb3duSGFuZGxlciggZSApe1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICByLmhvdmVyRGF0YS5jYXB0dXJlID0gdHJ1ZTtcbiAgICByLmhvdmVyRGF0YS53aGljaCA9IGUud2hpY2g7XG5cbiAgICB2YXIgY3kgPSByLmN5O1xuICAgIHZhciBncG9zID0gWyBlLmNsaWVudFgsIGUuY2xpZW50WSBdO1xuICAgIHZhciBwb3MgPSByLnByb2plY3RJbnRvVmlld3BvcnQoIGdwb3NbMF0sIGdwb3NbMV0gKTtcbiAgICB2YXIgc2VsZWN0ID0gci5zZWxlY3Rpb247XG4gICAgdmFyIG5lYXJzID0gci5maW5kTmVhcmVzdEVsZW1lbnRzKCBwb3NbMF0sIHBvc1sxXSwgZmFsc2UgKTtcbiAgICB2YXIgbmVhciA9IG5lYXJzWzBdO1xuICAgIHZhciBkcmFnZ2VkRWxlbWVudHMgPSByLmRyYWdEYXRhLnBvc3NpYmxlRHJhZ0VsZW1lbnRzO1xuXG4gICAgci5ob3ZlckRhdGEubWRvd25Qb3MgPSBwb3M7XG4gICAgci5ob3ZlckRhdGEubWRvd25HUG9zID0gZ3BvcztcblxuICAgIHZhciBjaGVja0ZvclRhcGhvbGQgPSBmdW5jdGlvbigpe1xuICAgICAgci5ob3ZlckRhdGEudGFwaG9sZENhbmNlbGxlZCA9IGZhbHNlO1xuXG4gICAgICBjbGVhclRpbWVvdXQoIHIuaG92ZXJEYXRhLnRhcGhvbGRUaW1lb3V0ICk7XG5cbiAgICAgIHIuaG92ZXJEYXRhLnRhcGhvbGRUaW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKXtcblxuICAgICAgICBpZiggci5ob3ZlckRhdGEudGFwaG9sZENhbmNlbGxlZCApe1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgZWxlID0gci5ob3ZlckRhdGEuZG93bjtcblxuICAgICAgICAgIGlmKCBlbGUgKXtcbiAgICAgICAgICAgIGVsZS50cmlnZ2VyKCBuZXcgRXZlbnQoIGUsIHtcbiAgICAgICAgICAgICAgdHlwZTogJ3RhcGhvbGQnLFxuICAgICAgICAgICAgICBjeVBvc2l0aW9uOiB7IHg6IHBvc1swXSwgeTogcG9zWzFdIH1cbiAgICAgICAgICAgIH0gKSApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjeS50cmlnZ2VyKCBuZXcgRXZlbnQoIGUsIHtcbiAgICAgICAgICAgICAgdHlwZTogJ3RhcGhvbGQnLFxuICAgICAgICAgICAgICBjeVBvc2l0aW9uOiB7IHg6IHBvc1swXSwgeTogcG9zWzFdIH1cbiAgICAgICAgICAgIH0gKSApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9LCByLnRhcGhvbGREdXJhdGlvbiApO1xuICAgIH07XG5cbiAgICAvLyBSaWdodCBjbGljayBidXR0b25cbiAgICBpZiggZS53aGljaCA9PSAzICl7XG5cbiAgICAgIHIuaG92ZXJEYXRhLmN4dFN0YXJ0ZWQgPSB0cnVlO1xuXG4gICAgICB2YXIgY3h0RXZ0ID0gbmV3IEV2ZW50KCBlLCB7XG4gICAgICAgIHR5cGU6ICdjeHR0YXBzdGFydCcsXG4gICAgICAgIGN5UG9zaXRpb246IHsgeDogcG9zWzBdLCB5OiBwb3NbMV0gfVxuICAgICAgfSApO1xuXG4gICAgICBpZiggbmVhciApe1xuICAgICAgICBuZWFyLmFjdGl2YXRlKCk7XG4gICAgICAgIG5lYXIudHJpZ2dlciggY3h0RXZ0ICk7XG5cbiAgICAgICAgci5ob3ZlckRhdGEuZG93biA9IG5lYXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjeS50cmlnZ2VyKCBjeHRFdnQgKTtcbiAgICAgIH1cblxuICAgICAgci5ob3ZlckRhdGEuZG93blRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgICAgci5ob3ZlckRhdGEuY3h0RHJhZ2dlZCA9IGZhbHNlO1xuXG4gICAgLy8gUHJpbWFyeSBidXR0b25cbiAgICB9IGVsc2UgaWYoIGUud2hpY2ggPT0gMSApe1xuXG4gICAgICBpZiggbmVhciApe1xuICAgICAgICBuZWFyLmFjdGl2YXRlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEVsZW1lbnQgZHJhZ2dpbmdcbiAgICAgIHtcbiAgICAgICAgLy8gSWYgc29tZXRoaW5nIGlzIHVuZGVyIHRoZSBjdXJzb3IgYW5kIGl0IGlzIGRyYWdnYWJsZSwgcHJlcGFyZSB0byBncmFiIGl0XG4gICAgICAgIGlmKCBuZWFyICE9IG51bGwgKXtcblxuICAgICAgICAgIGlmKCByLm5vZGVJc0dyYWJiYWJsZSggbmVhciApICl7XG5cbiAgICAgICAgICAgIHZhciBncmFiRXZlbnQgPSBuZXcgRXZlbnQoIGUsIHtcbiAgICAgICAgICAgICAgdHlwZTogJ2dyYWInLFxuICAgICAgICAgICAgICBjeVBvc2l0aW9uOiB7IHg6IHBvc1swXSwgeTogcG9zWzFdIH1cbiAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgc2V0R3JhYlRhcmdldCggbmVhciApO1xuXG4gICAgICAgICAgICBpZiggIW5lYXIuc2VsZWN0ZWQoKSApe1xuXG4gICAgICAgICAgICAgIGRyYWdnZWRFbGVtZW50cyA9IHIuZHJhZ0RhdGEucG9zc2libGVEcmFnRWxlbWVudHMgPSBbXTtcbiAgICAgICAgICAgICAgYWRkTm9kZVRvRHJhZyggbmVhciwgeyBhZGRUb0xpc3Q6IGRyYWdnZWRFbGVtZW50cyB9ICk7XG5cbiAgICAgICAgICAgICAgbmVhci50cmlnZ2VyKCBncmFiRXZlbnQgKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmKCBuZWFyLnNlbGVjdGVkKCkgKXtcbiAgICAgICAgICAgICAgZHJhZ2dlZEVsZW1lbnRzID0gci5kcmFnRGF0YS5wb3NzaWJsZURyYWdFbGVtZW50cyA9IFsgIF07XG5cbiAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkTm9kZXMgPSBjeS4kKCBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5pc05vZGUoKSAmJiB0aGlzLnNlbGVjdGVkKCkgJiYgci5ub2RlSXNHcmFiYmFibGUoIHRoaXMgKTsgfSApO1xuXG4gICAgICAgICAgICAgIGFkZE5vZGVzVG9EcmFnKCBzZWxlY3RlZE5vZGVzLCB7IGFkZFRvTGlzdDogZHJhZ2dlZEVsZW1lbnRzIH0gKTtcblxuICAgICAgICAgICAgICBuZWFyLnRyaWdnZXIoIGdyYWJFdmVudCApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByLnJlZHJhd0hpbnQoICdlbGVzJywgdHJ1ZSApO1xuICAgICAgICAgICAgci5yZWRyYXdIaW50KCAnZHJhZycsIHRydWUgKTtcblxuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgci5ob3ZlckRhdGEuZG93biA9IG5lYXI7XG4gICAgICAgIHIuaG92ZXJEYXRhLmRvd25zID0gbmVhcnM7XG4gICAgICAgIHIuaG92ZXJEYXRhLmRvd25UaW1lID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgIH1cblxuICAgICAgdHJpZ2dlckV2ZW50cyggbmVhciwgWyAnbW91c2Vkb3duJywgJ3RhcHN0YXJ0JywgJ3Ztb3VzZWRvd24nIF0sIGUsIHtcbiAgICAgICAgY3lQb3NpdGlvbjogeyB4OiBwb3NbMF0sIHk6IHBvc1sxXSB9XG4gICAgICB9ICk7XG5cbiAgICAgIGlmKCBuZWFyID09IG51bGwgKXtcbiAgICAgICAgc2VsZWN0WzRdID0gMTtcblxuICAgICAgICByLmRhdGEuYmdBY3RpdmVQb3Npc3Rpb24gPSB7XG4gICAgICAgICAgeDogcG9zWzBdLFxuICAgICAgICAgIHk6IHBvc1sxXVxuICAgICAgICB9O1xuXG4gICAgICAgIHIucmVkcmF3SGludCggJ3NlbGVjdCcsIHRydWUgKTtcblxuICAgICAgICByLnJlZHJhdygpO1xuICAgICAgfSBlbHNlIGlmKCBuZWFyLmlzRWRnZSgpICl7XG4gICAgICAgIHNlbGVjdFs0XSA9IDE7IC8vIGZvciBmdXR1cmUgcGFuXG4gICAgICB9XG5cbiAgICAgIGNoZWNrRm9yVGFwaG9sZCgpO1xuXG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBzZWxlY3Rpb24gYm94IGNvb3JkaW5hdGVzXG4gICAgc2VsZWN0WzBdID0gc2VsZWN0WzJdID0gcG9zWzBdO1xuICAgIHNlbGVjdFsxXSA9IHNlbGVjdFszXSA9IHBvc1sxXTtcblxuICB9LCBmYWxzZSApO1xuXG4gIHIucmVnaXN0ZXJCaW5kaW5nKCB3aW5kb3csICdtb3VzZW1vdmUnLCBmdW5jdGlvbiBtb3VzZW1vdmVIYW5kbGVyKCBlICl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgcHJldmVudERlZmF1bHQgPSBmYWxzZTtcbiAgICB2YXIgY2FwdHVyZSA9IHIuaG92ZXJEYXRhLmNhcHR1cmU7XG5cbiAgICAvLyBzYXZlIGN5Y2xlcyBpZiBtb3VzZSBldmVudHMgYXJlbid0IHRvIGJlIGNhcHR1cmVkXG4gICAgaWYoICFjYXB0dXJlICl7XG4gICAgICB2YXIgY29udGFpbmVyUGFnZUNvb3JkcyA9IHIuZmluZENvbnRhaW5lckNsaWVudENvb3JkcygpO1xuXG4gICAgICBpZiggZS5jbGllbnRYID4gY29udGFpbmVyUGFnZUNvb3Jkc1swXSAmJiBlLmNsaWVudFggPCBjb250YWluZXJQYWdlQ29vcmRzWzBdICsgci5jYW52YXNXaWR0aFxuICAgICAgICAmJiBlLmNsaWVudFkgPiBjb250YWluZXJQYWdlQ29vcmRzWzFdICYmIGUuY2xpZW50WSA8IGNvbnRhaW5lclBhZ2VDb29yZHNbMV0gKyByLmNhbnZhc0hlaWdodFxuICAgICAgKXtcbiAgICAgICAgLy8gaW5zaWRlIGNvbnRhaW5lciBib3VuZHMgc28gT0tcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN5Q29udGFpbmVyID0gci5jb250YWluZXI7XG4gICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICB2YXIgdFBhcmVudCA9IHRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgdmFyIGNvbnRhaW5lcklzVGFyZ2V0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlKCB0UGFyZW50ICl7XG4gICAgICAgIGlmKCB0UGFyZW50ID09PSBjeUNvbnRhaW5lciApe1xuICAgICAgICAgIGNvbnRhaW5lcklzVGFyZ2V0ID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRQYXJlbnQgPSB0UGFyZW50LnBhcmVudE5vZGU7XG4gICAgICB9XG5cbiAgICAgIGlmKCAhY29udGFpbmVySXNUYXJnZXQgKXsgcmV0dXJuOyB9IC8vIGlmIHRhcmdldCBpcyBvdXRpc2RlIGN5IGNvbnRhaW5lciwgdGhlbiB0aGlzIGV2ZW50IGlzIG5vdCBmb3IgdXNcbiAgICB9XG5cbiAgICB2YXIgY3kgPSByLmN5O1xuICAgIHZhciB6b29tID0gY3kuem9vbSgpO1xuICAgIHZhciBncG9zID0gWyBlLmNsaWVudFgsIGUuY2xpZW50WSBdO1xuICAgIHZhciBwb3MgPSByLnByb2plY3RJbnRvVmlld3BvcnQoIGdwb3NbMF0sIGdwb3NbMV0gKTtcbiAgICB2YXIgbWRvd25Qb3MgPSByLmhvdmVyRGF0YS5tZG93blBvcztcbiAgICB2YXIgbWRvd25HUG9zID0gci5ob3ZlckRhdGEubWRvd25HUG9zO1xuICAgIHZhciBzZWxlY3QgPSByLnNlbGVjdGlvbjtcblxuICAgIHZhciBuZWFyID0gbnVsbDtcbiAgICBpZiggIXIuaG92ZXJEYXRhLmRyYWdnaW5nRWxlcyAmJiAhci5ob3ZlckRhdGEuZHJhZ2dpbmcgJiYgIXIuaG92ZXJEYXRhLnNlbGVjdGluZyApe1xuICAgICAgbmVhciA9IHIuZmluZE5lYXJlc3RFbGVtZW50KCBwb3NbMF0sIHBvc1sxXSwgZmFsc2UgKTtcbiAgICB9XG4gICAgdmFyIGxhc3QgPSByLmhvdmVyRGF0YS5sYXN0O1xuICAgIHZhciBkb3duID0gci5ob3ZlckRhdGEuZG93bjtcblxuICAgIHZhciBkaXNwID0gWyBwb3NbMF0gLSBzZWxlY3RbMl0sIHBvc1sxXSAtIHNlbGVjdFszXSBdO1xuXG4gICAgdmFyIGRyYWdnZWRFbGVtZW50cyA9IHIuZHJhZ0RhdGEucG9zc2libGVEcmFnRWxlbWVudHM7XG5cbiAgICB2YXIgaXNPdmVyVGhyZXNob2xkRHJhZztcblxuICAgIGlmKCBtZG93bkdQb3MgKXtcbiAgICAgIHZhciBkeCA9IGdwb3NbMF0gLSBtZG93bkdQb3NbMF07XG4gICAgICB2YXIgZHgyID0gZHggKiBkeDtcbiAgICAgIHZhciBkeSA9IGdwb3NbMV0gLSBtZG93bkdQb3NbMV07XG4gICAgICB2YXIgZHkyID0gZHkgKiBkeTtcbiAgICAgIHZhciBkaXN0MiA9IGR4MiArIGR5MjtcblxuICAgICAgaXNPdmVyVGhyZXNob2xkRHJhZyA9IGRpc3QyID49IHIuZGVza3RvcFRhcFRocmVzaG9sZDI7XG4gICAgfVxuXG4gICAgdmFyIG11bHRTZWxLZXlEb3duID0gaXNNdWx0U2VsS2V5RG93biggZSApO1xuXG4gICAgaWYgKGlzT3ZlclRocmVzaG9sZERyYWcpIHtcbiAgICAgIHIuaG92ZXJEYXRhLnRhcGhvbGRDYW5jZWxsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciB1cGRhdGVEcmFnRGVsdGEgPSBmdW5jdGlvbigpe1xuICAgICAgdmFyIGRyYWdEZWx0YSA9IHIuaG92ZXJEYXRhLmRyYWdEZWx0YSA9IHIuaG92ZXJEYXRhLmRyYWdEZWx0YSB8fCBbXTtcblxuICAgICAgaWYoIGRyYWdEZWx0YS5sZW5ndGggPT09IDAgKXtcbiAgICAgICAgZHJhZ0RlbHRhLnB1c2goIGRpc3BbMF0gKTtcbiAgICAgICAgZHJhZ0RlbHRhLnB1c2goIGRpc3BbMV0gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdEZWx0YVswXSArPSBkaXNwWzBdO1xuICAgICAgICBkcmFnRGVsdGFbMV0gKz0gZGlzcFsxXTtcbiAgICAgIH1cbiAgICB9O1xuXG5cbiAgICBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG5cbiAgICB0cmlnZ2VyRXZlbnRzKCBuZWFyLCBbICdtb3VzZW1vdmUnLCAndm1vdXNlbW92ZScsICd0YXBkcmFnJyBdLCBlLCB7XG4gICAgICBjeVBvc2l0aW9uOiB7IHg6IHBvc1swXSwgeTogcG9zWzFdIH1cbiAgICB9ICk7XG5cbiAgICB2YXIgZ29JbnRvQm94TW9kZSA9IGZ1bmN0aW9uKCl7XG4gICAgICByLmRhdGEuYmdBY3RpdmVQb3Npc3Rpb24gPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmKCAhci5ob3ZlckRhdGEuc2VsZWN0aW5nICl7XG4gICAgICAgIGN5LnRyaWdnZXIoJ2JveHN0YXJ0Jyk7XG4gICAgICB9XG5cbiAgICAgIHNlbGVjdFs0XSA9IDE7XG4gICAgICByLmhvdmVyRGF0YS5zZWxlY3RpbmcgPSB0cnVlO1xuXG4gICAgICByLnJlZHJhd0hpbnQoICdzZWxlY3QnLCB0cnVlICk7XG4gICAgICByLnJlZHJhdygpO1xuICAgIH07XG5cbiAgICAvLyB0cmlnZ2VyIGNvbnRleHQgZHJhZyBpZiBybW91c2UgZG93blxuICAgIGlmKCByLmhvdmVyRGF0YS53aGljaCA9PT0gMyApe1xuICAgICAgLy8gYnV0IG9ubHkgaWYgb3ZlciB0aHJlc2hvbGRcbiAgICAgIGlmKCBpc092ZXJUaHJlc2hvbGREcmFnICl7XG4gICAgICAgIHZhciBjeHRFdnQgPSBuZXcgRXZlbnQoIGUsIHtcbiAgICAgICAgICB0eXBlOiAnY3h0ZHJhZycsXG4gICAgICAgICAgY3lQb3NpdGlvbjogeyB4OiBwb3NbMF0sIHk6IHBvc1sxXSB9XG4gICAgICAgIH0gKTtcblxuICAgICAgICBpZiggZG93biApe1xuICAgICAgICAgIGRvd24udHJpZ2dlciggY3h0RXZ0ICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3kudHJpZ2dlciggY3h0RXZ0ICk7XG4gICAgICAgIH1cblxuICAgICAgICByLmhvdmVyRGF0YS5jeHREcmFnZ2VkID0gdHJ1ZTtcblxuICAgICAgICBpZiggIXIuaG92ZXJEYXRhLmN4dE92ZXIgfHwgbmVhciAhPT0gci5ob3ZlckRhdGEuY3h0T3ZlciApe1xuXG4gICAgICAgICAgaWYoIHIuaG92ZXJEYXRhLmN4dE92ZXIgKXtcbiAgICAgICAgICAgIHIuaG92ZXJEYXRhLmN4dE92ZXIudHJpZ2dlciggbmV3IEV2ZW50KCBlLCB7XG4gICAgICAgICAgICAgIHR5cGU6ICdjeHRkcmFnb3V0JyxcbiAgICAgICAgICAgICAgY3lQb3NpdGlvbjogeyB4OiBwb3NbMF0sIHk6IHBvc1sxXSB9XG4gICAgICAgICAgICB9ICkgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByLmhvdmVyRGF0YS5jeHRPdmVyID0gbmVhcjtcblxuICAgICAgICAgIGlmKCBuZWFyICl7XG4gICAgICAgICAgICBuZWFyLnRyaWdnZXIoIG5ldyBFdmVudCggZSwge1xuICAgICAgICAgICAgICB0eXBlOiAnY3h0ZHJhZ292ZXInLFxuICAgICAgICAgICAgICBjeVBvc2l0aW9uOiB7IHg6IHBvc1swXSwgeTogcG9zWzFdIH1cbiAgICAgICAgICAgIH0gKSApO1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB3ZSBhcmUgZHJhZyBwYW5uaW5nIHRoZSBlbnRpcmUgZ3JhcGhcbiAgICB9IGVsc2UgaWYoIHIuaG92ZXJEYXRhLmRyYWdnaW5nICl7XG4gICAgICBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG5cbiAgICAgIGlmKCBjeS5wYW5uaW5nRW5hYmxlZCgpICYmIGN5LnVzZXJQYW5uaW5nRW5hYmxlZCgpICl7XG4gICAgICAgIHZhciBkZWx0YVA7XG5cbiAgICAgICAgaWYoIHIuaG92ZXJEYXRhLmp1c3RTdGFydGVkUGFuICl7XG4gICAgICAgICAgdmFyIG1kUG9zID0gci5ob3ZlckRhdGEubWRvd25Qb3M7XG5cbiAgICAgICAgICBkZWx0YVAgPSB7XG4gICAgICAgICAgICB4OiAoIHBvc1swXSAtIG1kUG9zWzBdICkgKiB6b29tLFxuICAgICAgICAgICAgeTogKCBwb3NbMV0gLSBtZFBvc1sxXSApICogem9vbVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICByLmhvdmVyRGF0YS5qdXN0U3RhcnRlZFBhbiA9IGZhbHNlO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsdGFQID0ge1xuICAgICAgICAgICAgeDogZGlzcFswXSAqIHpvb20sXG4gICAgICAgICAgICB5OiBkaXNwWzFdICogem9vbVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGN5LnBhbkJ5KCBkZWx0YVAgKTtcblxuICAgICAgICByLmhvdmVyRGF0YS5kcmFnZ2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gTmVlZHMgcmVwcm9qZWN0IGR1ZSB0byBwYW4gY2hhbmdpbmcgdmlld3BvcnRcbiAgICAgIHBvcyA9IHIucHJvamVjdEludG9WaWV3cG9ydCggZS5jbGllbnRYLCBlLmNsaWVudFkgKTtcblxuICAgIC8vIENoZWNrcyBwcmltYXJ5IGJ1dHRvbiBkb3duICYgb3V0IG9mIHRpbWUgJiBtb3VzZSBub3QgbW92ZWQgbXVjaFxuICAgIH0gZWxzZSBpZihcbiAgICAgICAgc2VsZWN0WzRdID09IDEgJiYgKGRvd24gPT0gbnVsbCB8fCBkb3duLmlzRWRnZSgpKVxuICAgICl7XG5cbiAgICAgIGlmKCBpc092ZXJUaHJlc2hvbGREcmFnICl7XG5cbiAgICAgICAgaWYoICFyLmhvdmVyRGF0YS5kcmFnZ2luZyAmJiBjeS5ib3hTZWxlY3Rpb25FbmFibGVkKCkgJiYgKCBtdWx0U2VsS2V5RG93biB8fCAhY3kucGFubmluZ0VuYWJsZWQoKSB8fCAhY3kudXNlclBhbm5pbmdFbmFibGVkKCkgKSApe1xuICAgICAgICAgIGdvSW50b0JveE1vZGUoKTtcblxuICAgICAgICB9IGVsc2UgaWYoICFyLmhvdmVyRGF0YS5zZWxlY3RpbmcgJiYgY3kucGFubmluZ0VuYWJsZWQoKSAmJiBjeS51c2VyUGFubmluZ0VuYWJsZWQoKSApe1xuICAgICAgICAgIHZhciBhbGxvd1Bhc3N0aHJvdWdoID0gYWxsb3dQYW5uaW5nUGFzc3Rocm91Z2goIGRvd24sIHIuaG92ZXJEYXRhLmRvd25zICk7XG5cbiAgICAgICAgICBpZiggYWxsb3dQYXNzdGhyb3VnaCApe1xuICAgICAgICAgICAgci5ob3ZlckRhdGEuZHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgci5ob3ZlckRhdGEuanVzdFN0YXJ0ZWRQYW4gPSB0cnVlO1xuICAgICAgICAgICAgc2VsZWN0WzRdID0gMDtcblxuICAgICAgICAgICAgci5kYXRhLmJnQWN0aXZlUG9zaXN0aW9uID0gbWF0aC5hcnJheTJwb2ludCggbWRvd25Qb3MgKTtcblxuICAgICAgICAgICAgci5yZWRyYXdIaW50KCAnc2VsZWN0JywgdHJ1ZSApO1xuICAgICAgICAgICAgci5yZWRyYXcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiggZG93biAmJiBkb3duLmlzRWRnZSgpICYmIGRvd24uYWN0aXZlKCkgKXsgZG93bi51bmFjdGl2YXRlKCk7IH1cblxuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmKCBkb3duICYmIGRvd24uaXNFZGdlKCkgJiYgZG93bi5hY3RpdmUoKSApeyBkb3duLnVuYWN0aXZhdGUoKTsgfVxuXG4gICAgICBpZiggKCAhZG93biB8fCAhZG93bi5ncmFiYmVkKCkgKSAmJiBuZWFyICE9IGxhc3QgKXtcblxuICAgICAgICBpZiggbGFzdCApe1xuICAgICAgICAgIHRyaWdnZXJFdmVudHMoIGxhc3QsIFsgJ21vdXNlb3V0JywgJ3RhcGRyYWdvdXQnIF0sIGUsIHtcbiAgICAgICAgICAgIGN5UG9zaXRpb246IHsgeDogcG9zWzBdLCB5OiBwb3NbMV0gfVxuICAgICAgICAgIH0gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCBuZWFyICl7XG4gICAgICAgICAgdHJpZ2dlckV2ZW50cyggbmVhciwgWyAnbW91c2VvdmVyJywgJ3RhcGRyYWdvdmVyJyBdLCBlLCB7XG4gICAgICAgICAgICBjeVBvc2l0aW9uOiB7IHg6IHBvc1swXSwgeTogcG9zWzFdIH1cbiAgICAgICAgICB9ICk7XG4gICAgICAgIH1cblxuICAgICAgICByLmhvdmVyRGF0YS5sYXN0ID0gbmVhcjtcbiAgICAgIH1cblxuICAgICAgaWYoIGRvd24gJiYgci5ub2RlSXNEcmFnZ2FibGUoIGRvd24gKSApe1xuXG4gICAgICAgIGlmKCBpc092ZXJUaHJlc2hvbGREcmFnICl7IC8vIHRoZW4gd2UgY2FuIHRha2UgYWN0aW9uXG5cbiAgICAgICAgICBpZiggY3kuYm94U2VsZWN0aW9uRW5hYmxlZCgpICYmIG11bHRTZWxLZXlEb3duICl7IC8vIHRoZW4gc2VsZWN0aW9uIG92ZXJyaWRlc1xuICAgICAgICAgICAgaWYoIGRvd24gJiYgZG93bi5ncmFiYmVkKCkgKXtcbiAgICAgICAgICAgICAgZnJlZURyYWdnZWRFbGVtZW50cyggZHJhZ2dlZEVsZW1lbnRzICk7XG5cbiAgICAgICAgICAgICAgZG93bi50cmlnZ2VyKCdmcmVlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdvSW50b0JveE1vZGUoKTtcblxuICAgICAgICAgIH0gZWxzZSB7IC8vIG90aGVyd2lzZSBkcmFnXG4gICAgICAgICAgICB2YXIganVzdFN0YXJ0ZWREcmFnID0gIXIuZHJhZ0RhdGEuZGlkRHJhZztcblxuICAgICAgICAgICAgaWYoIGp1c3RTdGFydGVkRHJhZyApe1xuICAgICAgICAgICAgICByLnJlZHJhd0hpbnQoICdlbGVzJywgdHJ1ZSApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByLmRyYWdEYXRhLmRpZERyYWcgPSB0cnVlOyAvLyBpbmRpY2F0ZSB0aGF0IHdlIGFjdHVhbGx5IGRpZCBkcmFnIHRoZSBub2RlXG5cbiAgICAgICAgICAgIHZhciB0b1RyaWdnZXIgPSBbXTtcblxuICAgICAgICAgICAgLy8gbm93LCBhZGQgdGhlIGVsZW1lbnRzIHRvIHRoZSBkcmFnIGxheWVyIGlmIG5vdCBkb25lIGFscmVhZHlcbiAgICAgICAgICAgIGlmKCAhci5ob3ZlckRhdGEuZHJhZ2dpbmdFbGVzICl7XG4gICAgICAgICAgICAgIGFkZE5vZGVzVG9EcmFnKCBjeS5jb2xsZWN0aW9uKCBkcmFnZ2VkRWxlbWVudHMgKSwgeyBpbkRyYWdMYXllcjogdHJ1ZSB9ICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZHJhZ2dlZEVsZW1lbnRzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgICAgICAgIHZhciBkRWxlID0gZHJhZ2dlZEVsZW1lbnRzWyBpIF07XG5cbiAgICAgICAgICAgICAgLy8gTG9ja2VkIG5vZGVzIG5vdCBkcmFnZ2FibGUsIGFzIHdlbGwgYXMgbm9uLXZpc2libGUgbm9kZXNcbiAgICAgICAgICAgICAgaWYoIHIubm9kZUlzRHJhZ2dhYmxlKCBkRWxlICkgJiYgZEVsZS5ncmFiYmVkKCkgKXtcbiAgICAgICAgICAgICAgICB2YXIgZFBvcyA9IGRFbGUuX3ByaXZhdGUucG9zaXRpb247XG5cbiAgICAgICAgICAgICAgICB0b1RyaWdnZXIucHVzaCggZEVsZSApO1xuXG4gICAgICAgICAgICAgICAgaWYoIGlzLm51bWJlciggZGlzcFswXSApICYmIGlzLm51bWJlciggZGlzcFsxXSApICl7XG4gICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlUG9zID0gIWRFbGUuaXNQYXJlbnQoKTtcblxuICAgICAgICAgICAgICAgICAgaWYoIHVwZGF0ZVBvcyApe1xuICAgICAgICAgICAgICAgICAgICBkUG9zLnggKz0gZGlzcFswXTtcbiAgICAgICAgICAgICAgICAgICAgZFBvcy55ICs9IGRpc3BbMV07XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmKCBqdXN0U3RhcnRlZERyYWcgKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyYWdEZWx0YSA9IHIuaG92ZXJEYXRhLmRyYWdEZWx0YTtcblxuICAgICAgICAgICAgICAgICAgICBpZiggdXBkYXRlUG9zICYmIGRyYWdEZWx0YSAmJiBpcy5udW1iZXIoIGRyYWdEZWx0YVswXSApICYmIGlzLm51bWJlciggZHJhZ0RlbHRhWzFdICkgKXtcbiAgICAgICAgICAgICAgICAgICAgICBkUG9zLnggKz0gZHJhZ0RlbHRhWzBdO1xuICAgICAgICAgICAgICAgICAgICAgIGRQb3MueSArPSBkcmFnRGVsdGFbMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByLmhvdmVyRGF0YS5kcmFnZ2luZ0VsZXMgPSB0cnVlO1xuXG4gICAgICAgICAgICB2YXIgdGNvbCA9IGN5LmNvbGxlY3Rpb24oIHRvVHJpZ2dlciApO1xuXG4gICAgICAgICAgICB0Y29sLnVwZGF0ZUNvbXBvdW5kQm91bmRzKCk7XG4gICAgICAgICAgICB0Y29sLnRyaWdnZXIoICdwb3NpdGlvbiBkcmFnJyApO1xuXG4gICAgICAgICAgICByLnJlZHJhd0hpbnQoICdkcmFnJywgdHJ1ZSApO1xuICAgICAgICAgICAgci5yZWRyYXcoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHsgLy8gb3RoZXJ3aXNlIHNhdmUgZHJhZyBkZWx0YSBmb3Igd2hlbiB3ZSBhY3R1YWxseSBzdGFydCBkcmFnZ2luZyBzbyB0aGUgcmVsYXRpdmUgZ3JhYiBwb3MgaXMgY29uc3RhbnRcbiAgICAgICAgICB1cGRhdGVEcmFnRGVsdGEoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBwcmV2ZW50IHRoZSBkcmFnZ2luZyBmcm9tIHRyaWdnZXJpbmcgdGV4dCBzZWxlY3Rpb24gb24gdGhlIHBhZ2VcbiAgICAgIHByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzZWxlY3RbMl0gPSBwb3NbMF07IHNlbGVjdFszXSA9IHBvc1sxXTtcblxuICAgIGlmKCBwcmV2ZW50RGVmYXVsdCApe1xuICAgICAgaWYoIGUuc3RvcFByb3BhZ2F0aW9uICkgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmKCBlLnByZXZlbnREZWZhdWx0ICkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwgZmFsc2UgKTtcblxuICByLnJlZ2lzdGVyQmluZGluZyggd2luZG93LCAnbW91c2V1cCcsIGZ1bmN0aW9uIG1vdXNldXBIYW5kbGVyKCBlICl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgY2FwdHVyZSA9IHIuaG92ZXJEYXRhLmNhcHR1cmU7XG4gICAgaWYoICFjYXB0dXJlICl7IHJldHVybjsgfVxuICAgIHIuaG92ZXJEYXRhLmNhcHR1cmUgPSBmYWxzZTtcblxuICAgIHZhciBjeSA9IHIuY3k7IHZhciBwb3MgPSByLnByb2plY3RJbnRvVmlld3BvcnQoIGUuY2xpZW50WCwgZS5jbGllbnRZICk7IHZhciBzZWxlY3QgPSByLnNlbGVjdGlvbjtcbiAgICB2YXIgbmVhciA9IHIuZmluZE5lYXJlc3RFbGVtZW50KCBwb3NbMF0sIHBvc1sxXSwgZmFsc2UgKTtcbiAgICB2YXIgZHJhZ2dlZEVsZW1lbnRzID0gci5kcmFnRGF0YS5wb3NzaWJsZURyYWdFbGVtZW50czsgdmFyIGRvd24gPSByLmhvdmVyRGF0YS5kb3duO1xuICAgIHZhciBtdWx0U2VsS2V5RG93biA9IGlzTXVsdFNlbEtleURvd24oIGUgKTtcblxuICAgIGlmKCByLmRhdGEuYmdBY3RpdmVQb3Npc3Rpb24gKXtcbiAgICAgIHIucmVkcmF3SGludCggJ3NlbGVjdCcsIHRydWUgKTtcbiAgICAgIHIucmVkcmF3KCk7XG4gICAgfVxuXG4gICAgci5ob3ZlckRhdGEudGFwaG9sZENhbmNlbGxlZCA9IHRydWU7XG5cbiAgICByLmRhdGEuYmdBY3RpdmVQb3Npc3Rpb24gPSB1bmRlZmluZWQ7IC8vIG5vdCBhY3RpdmUgYmcgbm93XG5cbiAgICBpZiggZG93biApe1xuICAgICAgZG93bi51bmFjdGl2YXRlKCk7XG4gICAgfVxuXG4gICAgaWYoIHIuaG92ZXJEYXRhLndoaWNoID09PSAzICl7XG4gICAgICB2YXIgY3h0RXZ0ID0gbmV3IEV2ZW50KCBlLCB7XG4gICAgICAgIHR5cGU6ICdjeHR0YXBlbmQnLFxuICAgICAgICBjeVBvc2l0aW9uOiB7IHg6IHBvc1swXSwgeTogcG9zWzFdIH1cbiAgICAgIH0gKTtcblxuICAgICAgaWYoIGRvd24gKXtcbiAgICAgICAgZG93bi50cmlnZ2VyKCBjeHRFdnQgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN5LnRyaWdnZXIoIGN4dEV2dCApO1xuICAgICAgfVxuXG4gICAgICBpZiggIXIuaG92ZXJEYXRhLmN4dERyYWdnZWQgKXtcbiAgICAgICAgdmFyIGN4dFRhcCA9IG5ldyBFdmVudCggZSwge1xuICAgICAgICAgIHR5cGU6ICdjeHR0YXAnLFxuICAgICAgICAgIGN5UG9zaXRpb246IHsgeDogcG9zWzBdLCB5OiBwb3NbMV0gfVxuICAgICAgICB9ICk7XG5cbiAgICAgICAgaWYoIGRvd24gKXtcbiAgICAgICAgICBkb3duLnRyaWdnZXIoIGN4dFRhcCApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN5LnRyaWdnZXIoIGN4dFRhcCApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHIuaG92ZXJEYXRhLmN4dERyYWdnZWQgPSBmYWxzZTtcbiAgICAgIHIuaG92ZXJEYXRhLndoaWNoID0gbnVsbDtcblxuICAgIH0gZWxzZSBpZiggci5ob3ZlckRhdGEud2hpY2ggPT09IDEgKXtcblxuICAgICAgLy8gRGVzZWxlY3QgYWxsIGVsZW1lbnRzIGlmIG5vdGhpbmcgaXMgY3VycmVudGx5IHVuZGVyIHRoZSBtb3VzZSBjdXJzb3IgYW5kIHdlIGFyZW4ndCBkcmFnZ2luZyBzb21ldGhpbmdcbiAgICAgIGlmKCAoZG93biA9PSBudWxsKSAvLyBub3QgbW91c2Vkb3duIG9uIG5vZGVcbiAgICAgICAgJiYgIXIuZHJhZ0RhdGEuZGlkRHJhZyAvLyBkaWRuJ3QgbW92ZSB0aGUgbm9kZSBhcm91bmRcbiAgICAgICAgJiYgIXIuaG92ZXJEYXRhLnNlbGVjdGluZyAvLyBub3QgYm94IHNlbGVjdGlvblxuICAgICAgICAmJiAhci5ob3ZlckRhdGEuZHJhZ2dlZCAvLyBkaWRuJ3QgcGFuXG4gICAgICAgICYmICFpc011bHRTZWxLZXlEb3duKCBlIClcbiAgICAgICl7XG5cbiAgICAgICAgY3kuJCggZnVuY3Rpb24oKXtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZCgpO1xuICAgICAgICB9ICkudW5zZWxlY3QoKTtcblxuICAgICAgICBpZiggZHJhZ2dlZEVsZW1lbnRzLmxlbmd0aCA+IDAgKXtcbiAgICAgICAgICByLnJlZHJhd0hpbnQoICdlbGVzJywgdHJ1ZSApO1xuICAgICAgICB9XG5cbiAgICAgICAgci5kcmFnRGF0YS5wb3NzaWJsZURyYWdFbGVtZW50cyA9IGRyYWdnZWRFbGVtZW50cyA9IFtdO1xuICAgICAgfVxuXG4gICAgICB0cmlnZ2VyRXZlbnRzKCBuZWFyLCBbICdtb3VzZXVwJywgJ3RhcGVuZCcsICd2bW91c2V1cCcgXSwgZSwge1xuICAgICAgICBjeVBvc2l0aW9uOiB7IHg6IHBvc1swXSwgeTogcG9zWzFdIH1cbiAgICAgIH0gKTtcblxuICAgICAgaWYoXG4gICAgICAgICFyLmRyYWdEYXRhLmRpZERyYWcgLy8gZGlkbid0IG1vdmUgYSBub2RlIGFyb3VuZFxuICAgICAgICAmJiAhci5ob3ZlckRhdGEuZHJhZ2dlZCAvLyBkaWRuJ3QgcGFuXG4gICAgICAgICYmICFyLmhvdmVyRGF0YS5zZWxlY3RpbmcgLy8gbm90IGJveCBzZWxlY3Rpb25cbiAgICAgICl7XG4gICAgICAgIHRyaWdnZXJFdmVudHMoIGRvd24sIFsnY2xpY2snLCAndGFwJywgJ3ZjbGljayddLCBlLCB7XG4gICAgICAgICAgY3lQb3NpdGlvbjogeyB4OiBwb3NbMF0sIHk6IHBvc1sxXSB9XG4gICAgICAgIH0gKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2luZ2xlIHNlbGVjdGlvblxuICAgICAgaWYoIG5lYXIgPT0gZG93biAmJiAhci5kcmFnRGF0YS5kaWREcmFnICYmICFyLmhvdmVyRGF0YS5zZWxlY3RpbmcgKXtcbiAgICAgICAgaWYoIG5lYXIgIT0gbnVsbCAmJiBuZWFyLl9wcml2YXRlLnNlbGVjdGFibGUgKXtcblxuICAgICAgICAgIGlmKCByLmhvdmVyRGF0YS5kcmFnZ2luZyApe1xuICAgICAgICAgICAgLy8gaWYgcGFubmluZywgZG9uJ3QgY2hhbmdlIHNlbGVjdGlvbiBzdGF0ZVxuICAgICAgICAgIH0gZWxzZSBpZiggY3kuc2VsZWN0aW9uVHlwZSgpID09PSAnYWRkaXRpdmUnIHx8IG11bHRTZWxLZXlEb3duICl7XG4gICAgICAgICAgICBpZiggbmVhci5zZWxlY3RlZCgpICl7XG4gICAgICAgICAgICAgIG5lYXIudW5zZWxlY3QoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5lYXIuc2VsZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKCAhbXVsdFNlbEtleURvd24gKXtcbiAgICAgICAgICAgICAgY3kuJCggJzpzZWxlY3RlZCcgKS51bm1lcmdlKCBuZWFyICkudW5zZWxlY3QoKTtcbiAgICAgICAgICAgICAgbmVhci5zZWxlY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByLnJlZHJhd0hpbnQoICdlbGVzJywgdHJ1ZSApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmKCByLmhvdmVyRGF0YS5zZWxlY3RpbmcgKXtcbiAgICAgICAgdmFyIGJveCA9IGN5LmNvbGxlY3Rpb24oIHIuZ2V0QWxsSW5Cb3goIHNlbGVjdFswXSwgc2VsZWN0WzFdLCBzZWxlY3RbMl0sIHNlbGVjdFszXSApICk7XG5cbiAgICAgICAgci5yZWRyYXdIaW50KCAnc2VsZWN0JywgdHJ1ZSApO1xuXG4gICAgICAgIGlmKCBib3gubGVuZ3RoID4gMCApe1xuICAgICAgICAgIHIucmVkcmF3SGludCggJ2VsZXMnLCB0cnVlICk7XG4gICAgICAgIH1cblxuICAgICAgICBjeS50cmlnZ2VyKCdib3hlbmQnKTtcblxuICAgICAgICB2YXIgZWxlV291bGRCZVNlbGVjdGVkID0gZnVuY3Rpb24oIGVsZSApeyByZXR1cm4gZWxlLnNlbGVjdGFibGUoKSAmJiAhZWxlLnNlbGVjdGVkKCk7IH07XG5cbiAgICAgICAgaWYoIGN5LnNlbGVjdGlvblR5cGUoKSA9PT0gJ2FkZGl0aXZlJyApe1xuICAgICAgICAgIGJveFxuICAgICAgICAgICAgLnRyaWdnZXIoJ2JveCcpXG4gICAgICAgICAgICAuc3RkRmlsdGVyKCBlbGVXb3VsZEJlU2VsZWN0ZWQgKVxuICAgICAgICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgICAgICAgLnRyaWdnZXIoJ2JveHNlbGVjdCcpXG4gICAgICAgICAgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmKCAhbXVsdFNlbEtleURvd24gKXtcbiAgICAgICAgICAgIGN5LiQoICc6c2VsZWN0ZWQnICkudW5tZXJnZSggYm94ICkudW5zZWxlY3QoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBib3hcbiAgICAgICAgICAgIC50cmlnZ2VyKCdib3gnKVxuICAgICAgICAgICAgLnN0ZEZpbHRlciggZWxlV291bGRCZVNlbGVjdGVkIClcbiAgICAgICAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgICAgICAgIC50cmlnZ2VyKCdib3hzZWxlY3QnKVxuICAgICAgICAgIDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFsd2F5cyBuZWVkIHJlZHJhdyBpbiBjYXNlIGVsZXMgdW5zZWxlY3RhYmxlXG4gICAgICAgIHIucmVkcmF3KCk7XG5cbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGRyYWcgcGFuXG4gICAgICBpZiggci5ob3ZlckRhdGEuZHJhZ2dpbmcgKXtcbiAgICAgICAgci5ob3ZlckRhdGEuZHJhZ2dpbmcgPSBmYWxzZTtcblxuICAgICAgICByLnJlZHJhd0hpbnQoICdzZWxlY3QnLCB0cnVlICk7XG4gICAgICAgIHIucmVkcmF3SGludCggJ2VsZXMnLCB0cnVlICk7XG5cbiAgICAgICAgci5yZWRyYXcoKTtcbiAgICAgIH1cblxuICAgICAgaWYoICFzZWxlY3RbNF0gKSB7XG4gICAgICAgIHIucmVkcmF3SGludCgnZHJhZycsIHRydWUpO1xuICAgICAgICByLnJlZHJhd0hpbnQoJ2VsZXMnLCB0cnVlKTtcblxuICAgICAgICB2YXIgZG93bldhc0dyYWJiZWQgPSBkb3duICYmIGRvd24uZ3JhYmJlZCgpO1xuXG4gICAgICAgIGZyZWVEcmFnZ2VkRWxlbWVudHMoIGRyYWdnZWRFbGVtZW50cyApO1xuXG4gICAgICAgIGlmKCBkb3duV2FzR3JhYmJlZCApeyBkb3duLnRyaWdnZXIoJ2ZyZWUnKTsgfVxuICAgICAgfVxuXG4gICAgfSAvLyBlbHNlIG5vdCByaWdodCBtb3VzZVxuXG4gICAgc2VsZWN0WzRdID0gMDsgci5ob3ZlckRhdGEuZG93biA9IG51bGw7XG5cbiAgICByLmhvdmVyRGF0YS5jeHRTdGFydGVkID0gZmFsc2U7XG4gICAgci5ob3ZlckRhdGEuZHJhZ2dpbmdFbGVzID0gZmFsc2U7XG4gICAgci5ob3ZlckRhdGEuc2VsZWN0aW5nID0gZmFsc2U7XG4gICAgci5kcmFnRGF0YS5kaWREcmFnID0gZmFsc2U7XG4gICAgci5ob3ZlckRhdGEuZHJhZ2dlZCA9IGZhbHNlO1xuICAgIHIuaG92ZXJEYXRhLmRyYWdEZWx0YSA9IFtdO1xuICAgIHIuaG92ZXJEYXRhLm1kb3duUG9zID0gbnVsbDtcbiAgICByLmhvdmVyRGF0YS5tZG93bkdQb3MgPSBudWxsO1xuXG4gIH0sIGZhbHNlICk7XG5cbiAgdmFyIHdoZWVsSGFuZGxlciA9IGZ1bmN0aW9uKCBlICl7XG5cblxuICAgIGlmKCByLnNjcm9sbGluZ1BhZ2UgKXsgcmV0dXJuOyB9IC8vIHdoaWxlIHNjcm9sbGluZywgaWdub3JlIHdoZWVsLXRvLXpvb21cblxuICAgIHZhciBjeSA9IHIuY3k7XG4gICAgdmFyIHBvcyA9IHIucHJvamVjdEludG9WaWV3cG9ydCggZS5jbGllbnRYLCBlLmNsaWVudFkgKTtcbiAgICB2YXIgcnBvcyA9IFsgcG9zWzBdICogY3kuem9vbSgpICsgY3kucGFuKCkueCxcbiAgICAgICAgICAgICAgICAgIHBvc1sxXSAqIGN5Lnpvb20oKSArIGN5LnBhbigpLnkgXTtcblxuICAgIGlmKCByLmhvdmVyRGF0YS5kcmFnZ2luZ0VsZXMgfHwgci5ob3ZlckRhdGEuZHJhZ2dpbmcgfHwgci5ob3ZlckRhdGEuY3h0U3RhcnRlZCB8fCBpbkJveFNlbGVjdGlvbigpICl7IC8vIGlmIHBhbiBkcmFnZ2luZyBvciBjeHQgZHJhZ2dpbmcsIHdoZWVsIG1vdmVtZW50cyBtYWtlIG5vIHpvb21cbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiggY3kucGFubmluZ0VuYWJsZWQoKSAmJiBjeS51c2VyUGFubmluZ0VuYWJsZWQoKSAmJiBjeS56b29taW5nRW5hYmxlZCgpICYmIGN5LnVzZXJab29taW5nRW5hYmxlZCgpICl7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHIuZGF0YS53aGVlbFpvb21pbmcgPSB0cnVlO1xuICAgICAgY2xlYXJUaW1lb3V0KCByLmRhdGEud2hlZWxUaW1lb3V0ICk7XG4gICAgICByLmRhdGEud2hlZWxUaW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKXtcbiAgICAgICAgci5kYXRhLndoZWVsWm9vbWluZyA9IGZhbHNlO1xuXG4gICAgICAgIHIucmVkcmF3SGludCggJ2VsZXMnLCB0cnVlICk7XG4gICAgICAgIHIucmVkcmF3KCk7XG4gICAgICB9LCAxNTAgKTtcblxuICAgICAgdmFyIGRpZmY7XG5cbiAgICAgIGlmKCBlLmRlbHRhWSAhPSBudWxsICl7XG4gICAgICAgIGRpZmYgPSBlLmRlbHRhWSAvIC0yNTA7XG4gICAgICB9IGVsc2UgaWYoIGUud2hlZWxEZWx0YVkgIT0gbnVsbCApe1xuICAgICAgICBkaWZmID0gZS53aGVlbERlbHRhWSAvIDEwMDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaWZmID0gZS53aGVlbERlbHRhIC8gMTAwMDtcbiAgICAgIH1cblxuICAgICAgZGlmZiA9IGRpZmYgKiByLndoZWVsU2Vuc2l0aXZpdHk7XG5cbiAgICAgIHZhciBuZWVkc1doZWVsRml4ID0gZS5kZWx0YU1vZGUgPT09IDE7XG4gICAgICBpZiggbmVlZHNXaGVlbEZpeCApeyAvLyBmaXhlcyBzbG93IHdoZWVsIGV2ZW50cyBvbiBmZi9saW51eCBhbmQgZmYvd2luZG93c1xuICAgICAgICBkaWZmICo9IDMzO1xuICAgICAgfVxuXG4gICAgICBjeS56b29tKCB7XG4gICAgICAgIGxldmVsOiBjeS56b29tKCkgKiBNYXRoLnBvdyggMTAsIGRpZmYgKSxcbiAgICAgICAgcmVuZGVyZWRQb3NpdGlvbjogeyB4OiBycG9zWzBdLCB5OiBycG9zWzFdIH1cbiAgICAgIH0gKTtcbiAgICB9XG5cbiAgfTtcblxuICAvLyBGdW5jdGlvbnMgdG8gaGVscCB3aXRoIHdoZXRoZXIgbW91c2Ugd2hlZWwgc2hvdWxkIHRyaWdnZXIgem9vbWluZ1xuICAvLyAtLVxuICByLnJlZ2lzdGVyQmluZGluZyggci5jb250YWluZXIsICd3aGVlbCcsIHdoZWVsSGFuZGxlciwgdHJ1ZSApO1xuXG4gIC8vIGRpc2FibGUgbm9uc3RhbmRhcmQgd2hlZWwgZXZlbnRzXG4gIC8vIHIucmVnaXN0ZXJCaW5kaW5nKHIuY29udGFpbmVyLCAnbW91c2V3aGVlbCcsIHdoZWVsSGFuZGxlciwgdHJ1ZSk7XG4gIC8vIHIucmVnaXN0ZXJCaW5kaW5nKHIuY29udGFpbmVyLCAnRE9NTW91c2VTY3JvbGwnLCB3aGVlbEhhbmRsZXIsIHRydWUpO1xuICAvLyByLnJlZ2lzdGVyQmluZGluZyhyLmNvbnRhaW5lciwgJ01vek1vdXNlUGl4ZWxTY3JvbGwnLCB3aGVlbEhhbmRsZXIsIHRydWUpOyAvLyBvbGRlciBmaXJlZm94XG5cbiAgci5yZWdpc3RlckJpbmRpbmcoIHdpbmRvdywgJ3Njcm9sbCcsIGZ1bmN0aW9uIHNjcm9sbEhhbmRsZXIoIGUgKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgIHIuc2Nyb2xsaW5nUGFnZSA9IHRydWU7XG5cbiAgICBjbGVhclRpbWVvdXQoIHIuc2Nyb2xsaW5nUGFnZVRpbWVvdXQgKTtcbiAgICByLnNjcm9sbGluZ1BhZ2VUaW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKXtcbiAgICAgIHIuc2Nyb2xsaW5nUGFnZSA9IGZhbHNlO1xuICAgIH0sIDI1MCApO1xuICB9LCB0cnVlICk7XG5cbiAgLy8gRnVuY3Rpb25zIHRvIGhlbHAgd2l0aCBoYW5kbGluZyBtb3VzZW91dC9tb3VzZW92ZXIgb24gdGhlIEN5dG9zY2FwZSBjb250YWluZXJcbiAgLy8gSGFuZGxlIG1vdXNlb3V0IG9uIEN5dG9zY2FwZSBjb250YWluZXJcbiAgci5yZWdpc3RlckJpbmRpbmcoIHIuY29udGFpbmVyLCAnbW91c2VvdXQnLCBmdW5jdGlvbiBtb3VzZU91dEhhbmRsZXIoIGUgKXtcbiAgICB2YXIgcG9zID0gci5wcm9qZWN0SW50b1ZpZXdwb3J0KCBlLmNsaWVudFgsIGUuY2xpZW50WSApO1xuXG4gICAgci5jeS50cmlnZ2VyKCBuZXcgRXZlbnQoIGUsIHtcbiAgICAgIHR5cGU6ICdtb3VzZW91dCcsXG4gICAgICBjeVBvc2l0aW9uOiB7IHg6IHBvc1swXSwgeTogcG9zWzFdIH1cbiAgICB9ICkgKTtcbiAgfSwgZmFsc2UgKTtcblxuICByLnJlZ2lzdGVyQmluZGluZyggci5jb250YWluZXIsICdtb3VzZW92ZXInLCBmdW5jdGlvbiBtb3VzZU92ZXJIYW5kbGVyKCBlICl7XG4gICAgdmFyIHBvcyA9IHIucHJvamVjdEludG9WaWV3cG9ydCggZS5jbGllbnRYLCBlLmNsaWVudFkgKTtcblxuICAgIHIuY3kudHJpZ2dlciggbmV3IEV2ZW50KCBlLCB7XG4gICAgICB0eXBlOiAnbW91c2VvdmVyJyxcbiAgICAgIGN5UG9zaXRpb246IHsgeDogcG9zWzBdLCB5OiBwb3NbMV0gfVxuICAgIH0gKSApO1xuICB9LCBmYWxzZSApO1xuXG4gIHZhciBmMXgxLCBmMXkxLCBmMngxLCBmMnkxOyAvLyBzdGFydGluZyBwb2ludHMgZm9yIHBpbmNoLXRvLXpvb21cbiAgdmFyIGRpc3RhbmNlMSwgZGlzdGFuY2UxU3E7IC8vIGluaXRpYWwgZGlzdGFuY2UgYmV0d2VlbiBmaW5nZXIgMSBhbmQgZmluZ2VyIDIgZm9yIHBpbmNoLXRvLXpvb21cbiAgdmFyIGNlbnRlcjEsIG1vZGVsQ2VudGVyMTsgLy8gY2VudGVyIHBvaW50IG9uIHN0YXJ0IHBpbmNoIHRvIHpvb21cbiAgdmFyIG9mZnNldExlZnQsIG9mZnNldFRvcDtcbiAgdmFyIGNvbnRhaW5lcldpZHRoLCBjb250YWluZXJIZWlnaHQ7XG4gIHZhciB0d29GaW5nZXJzU3RhcnRJbnNpZGU7XG5cbiAgdmFyIGRpc3RhbmNlID0gZnVuY3Rpb24oIHgxLCB5MSwgeDIsIHkyICl7XG4gICAgcmV0dXJuIE1hdGguc3FydCggKHgyIC0geDEpICogKHgyIC0geDEpICsgKHkyIC0geTEpICogKHkyIC0geTEpICk7XG4gIH07XG5cbiAgdmFyIGRpc3RhbmNlU3EgPSBmdW5jdGlvbiggeDEsIHkxLCB4MiwgeTIgKXtcbiAgICByZXR1cm4gKHgyIC0geDEpICogKHgyIC0geDEpICsgKHkyIC0geTEpICogKHkyIC0geTEpO1xuICB9O1xuXG4gIHZhciB0b3VjaHN0YXJ0SGFuZGxlcjtcbiAgci5yZWdpc3RlckJpbmRpbmcoIHIuY29udGFpbmVyLCAndG91Y2hzdGFydCcsIHRvdWNoc3RhcnRIYW5kbGVyID0gZnVuY3Rpb24oIGUgKXtcbiAgICByLnRvdWNoRGF0YS5jYXB0dXJlID0gdHJ1ZTtcbiAgICByLmRhdGEuYmdBY3RpdmVQb3Npc3Rpb24gPSB1bmRlZmluZWQ7XG5cbiAgICB2YXIgY3kgPSByLmN5O1xuICAgIHZhciBub3cgPSByLnRvdWNoRGF0YS5ub3c7XG4gICAgdmFyIGVhcmxpZXIgPSByLnRvdWNoRGF0YS5lYXJsaWVyO1xuXG4gICAgaWYoIGUudG91Y2hlc1swXSApeyB2YXIgcG9zID0gci5wcm9qZWN0SW50b1ZpZXdwb3J0KCBlLnRvdWNoZXNbMF0uY2xpZW50WCwgZS50b3VjaGVzWzBdLmNsaWVudFkgKTsgbm93WzBdID0gcG9zWzBdOyBub3dbMV0gPSBwb3NbMV07IH1cbiAgICBpZiggZS50b3VjaGVzWzFdICl7IHZhciBwb3MgPSByLnByb2plY3RJbnRvVmlld3BvcnQoIGUudG91Y2hlc1sxXS5jbGllbnRYLCBlLnRvdWNoZXNbMV0uY2xpZW50WSApOyBub3dbMl0gPSBwb3NbMF07IG5vd1szXSA9IHBvc1sxXTsgfVxuICAgIGlmKCBlLnRvdWNoZXNbMl0gKXsgdmFyIHBvcyA9IHIucHJvamVjdEludG9WaWV3cG9ydCggZS50b3VjaGVzWzJdLmNsaWVudFgsIGUudG91Y2hlc1syXS5jbGllbnRZICk7IG5vd1s0XSA9IHBvc1swXTsgbm93WzVdID0gcG9zWzFdOyB9XG5cbiAgICAvLyByZWNvcmQgc3RhcnRpbmcgcG9pbnRzIGZvciBwaW5jaC10by16b29tXG4gICAgaWYoIGUudG91Y2hlc1sxXSApe1xuXG4gICAgICBmcmVlRHJhZ2dlZEVsZW1lbnRzKCByLmRyYWdEYXRhLnRvdWNoRHJhZ0VsZXMgKTtcblxuICAgICAgdmFyIG9mZnNldHMgPSByLmZpbmRDb250YWluZXJDbGllbnRDb29yZHMoKTtcbiAgICAgIG9mZnNldExlZnQgPSBvZmZzZXRzWzBdO1xuICAgICAgb2Zmc2V0VG9wID0gb2Zmc2V0c1sxXTtcbiAgICAgIGNvbnRhaW5lcldpZHRoID0gb2Zmc2V0c1syXTtcbiAgICAgIGNvbnRhaW5lckhlaWdodCA9IG9mZnNldHNbM107XG5cbiAgICAgIGYxeDEgPSBlLnRvdWNoZXNbMF0uY2xpZW50WCAtIG9mZnNldExlZnQ7XG4gICAgICBmMXkxID0gZS50b3VjaGVzWzBdLmNsaWVudFkgLSBvZmZzZXRUb3A7XG5cbiAgICAgIGYyeDEgPSBlLnRvdWNoZXNbMV0uY2xpZW50WCAtIG9mZnNldExlZnQ7XG4gICAgICBmMnkxID0gZS50b3VjaGVzWzFdLmNsaWVudFkgLSBvZmZzZXRUb3A7XG5cbiAgICAgIHR3b0ZpbmdlcnNTdGFydEluc2lkZSA9XG4gICAgICAgICAgIDAgPD0gZjF4MSAmJiBmMXgxIDw9IGNvbnRhaW5lcldpZHRoXG4gICAgICAgICYmIDAgPD0gZjJ4MSAmJiBmMngxIDw9IGNvbnRhaW5lcldpZHRoXG4gICAgICAgICYmIDAgPD0gZjF5MSAmJiBmMXkxIDw9IGNvbnRhaW5lckhlaWdodFxuICAgICAgICAmJiAwIDw9IGYyeTEgJiYgZjJ5MSA8PSBjb250YWluZXJIZWlnaHRcbiAgICAgIDtcblxuICAgICAgdmFyIHBhbiA9IGN5LnBhbigpO1xuICAgICAgdmFyIHpvb20gPSBjeS56b29tKCk7XG5cbiAgICAgIGRpc3RhbmNlMSA9IGRpc3RhbmNlKCBmMXgxLCBmMXkxLCBmMngxLCBmMnkxICk7XG4gICAgICBkaXN0YW5jZTFTcSA9IGRpc3RhbmNlU3EoIGYxeDEsIGYxeTEsIGYyeDEsIGYyeTEgKTtcbiAgICAgIGNlbnRlcjEgPSBbIChmMXgxICsgZjJ4MSkgLyAyLCAoZjF5MSArIGYyeTEpIC8gMiBdO1xuICAgICAgbW9kZWxDZW50ZXIxID0gW1xuICAgICAgICAoY2VudGVyMVswXSAtIHBhbi54KSAvIHpvb20sXG4gICAgICAgIChjZW50ZXIxWzFdIC0gcGFuLnkpIC8gem9vbVxuICAgICAgXTtcblxuICAgICAgLy8gY29uc2lkZXIgY29udGV4dCB0YXBcbiAgICAgIHZhciBjeHREaXN0VGhyZXNob2xkID0gMjAwO1xuICAgICAgdmFyIGN4dERpc3RUaHJlc2hvbGRTcSA9IGN4dERpc3RUaHJlc2hvbGQgKiBjeHREaXN0VGhyZXNob2xkO1xuICAgICAgaWYoIGRpc3RhbmNlMVNxIDwgY3h0RGlzdFRocmVzaG9sZFNxICYmICFlLnRvdWNoZXNbMl0gKXtcblxuICAgICAgICB2YXIgbmVhcjEgPSByLmZpbmROZWFyZXN0RWxlbWVudCggbm93WzBdLCBub3dbMV0sIHRydWUgKTtcbiAgICAgICAgdmFyIG5lYXIyID0gci5maW5kTmVhcmVzdEVsZW1lbnQoIG5vd1syXSwgbm93WzNdLCB0cnVlICk7XG5cbiAgICAgICAgaWYoIG5lYXIxICYmIG5lYXIxLmlzTm9kZSgpICl7XG4gICAgICAgICAgbmVhcjEuYWN0aXZhdGUoKS50cmlnZ2VyKCBuZXcgRXZlbnQoIGUsIHtcbiAgICAgICAgICAgIHR5cGU6ICdjeHR0YXBzdGFydCcsXG4gICAgICAgICAgICBjeVBvc2l0aW9uOiB7IHg6IG5vd1swXSwgeTogbm93WzFdIH1cbiAgICAgICAgICB9ICkgKTtcbiAgICAgICAgICByLnRvdWNoRGF0YS5zdGFydCA9IG5lYXIxO1xuXG4gICAgICAgIH0gZWxzZSBpZiggbmVhcjIgJiYgbmVhcjIuaXNOb2RlKCkgKXtcbiAgICAgICAgICBuZWFyMi5hY3RpdmF0ZSgpLnRyaWdnZXIoIG5ldyBFdmVudCggZSwge1xuICAgICAgICAgICAgdHlwZTogJ2N4dHRhcHN0YXJ0JyxcbiAgICAgICAgICAgIGN5UG9zaXRpb246IHsgeDogbm93WzBdLCB5OiBub3dbMV0gfVxuICAgICAgICAgIH0gKSApO1xuICAgICAgICAgIHIudG91Y2hEYXRhLnN0YXJ0ID0gbmVhcjI7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjeS50cmlnZ2VyKCBuZXcgRXZlbnQoIGUsIHtcbiAgICAgICAgICAgIHR5cGU6ICdjeHR0YXBzdGFydCcsXG4gICAgICAgICAgICBjeVBvc2l0aW9uOiB7IHg6IG5vd1swXSwgeTogbm93WzFdIH1cbiAgICAgICAgICB9ICkgKTtcbiAgICAgICAgICByLnRvdWNoRGF0YS5zdGFydCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiggci50b3VjaERhdGEuc3RhcnQgKXsgci50b3VjaERhdGEuc3RhcnQuX3ByaXZhdGUuZ3JhYmJlZCA9IGZhbHNlOyB9XG4gICAgICAgIHIudG91Y2hEYXRhLmN4dCA9IHRydWU7XG4gICAgICAgIHIudG91Y2hEYXRhLmN4dERyYWdnZWQgPSBmYWxzZTtcbiAgICAgICAgci5kYXRhLmJnQWN0aXZlUG9zaXN0aW9uID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHIucmVkcmF3KCk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgaWYoIGUudG91Y2hlc1syXSApe1xuICAgICAgLy8gaWdub3JlXG4gICAgfSBlbHNlIGlmKCBlLnRvdWNoZXNbMV0gKXtcbiAgICAgIC8vIGlnbm9yZVxuICAgIH0gZWxzZSBpZiggZS50b3VjaGVzWzBdICl7XG4gICAgICB2YXIgbmVhcnMgPSByLmZpbmROZWFyZXN0RWxlbWVudHMoIG5vd1swXSwgbm93WzFdLCB0cnVlICk7XG4gICAgICB2YXIgbmVhciA9IG5lYXJzWzBdO1xuXG4gICAgICBpZiggbmVhciAhPSBudWxsICl7XG4gICAgICAgIG5lYXIuYWN0aXZhdGUoKTtcblxuICAgICAgICByLnRvdWNoRGF0YS5zdGFydCA9IG5lYXI7XG4gICAgICAgIHIudG91Y2hEYXRhLnN0YXJ0cyA9IG5lYXJzO1xuXG4gICAgICAgIGlmKCByLm5vZGVJc0dyYWJiYWJsZSggbmVhciApICl7XG5cbiAgICAgICAgICB2YXIgZHJhZ2dlZEVsZXMgPSByLmRyYWdEYXRhLnRvdWNoRHJhZ0VsZXMgPSBbXTtcblxuICAgICAgICAgIHIucmVkcmF3SGludCggJ2VsZXMnLCB0cnVlICk7XG4gICAgICAgICAgci5yZWRyYXdIaW50KCAnZHJhZycsIHRydWUgKTtcblxuICAgICAgICAgIGlmKCBuZWFyLnNlbGVjdGVkKCkgKXtcbiAgICAgICAgICAgIC8vIHJlc2V0IGRyYWcgZWxlbWVudHMsIHNpbmNlIG5lYXIgd2lsbCBiZSBhZGRlZCBhZ2FpblxuXG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWROb2RlcyA9IGN5LiQoIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkKCkgJiYgci5ub2RlSXNHcmFiYmFibGUoIHRoaXMgKTtcbiAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgYWRkTm9kZXNUb0RyYWcoIHNlbGVjdGVkTm9kZXMsIHsgYWRkVG9MaXN0OiBkcmFnZ2VkRWxlcyB9ICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZE5vZGVUb0RyYWcoIG5lYXIsIHsgYWRkVG9MaXN0OiBkcmFnZ2VkRWxlcyB9ICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2V0R3JhYlRhcmdldCggbmVhciApO1xuXG4gICAgICAgICAgbmVhci50cmlnZ2VyKCBuZXcgRXZlbnQoIGUsIHtcbiAgICAgICAgICAgIHR5cGU6ICdncmFiJyxcbiAgICAgICAgICAgIGN5UG9zaXRpb246IHsgeDogbm93WzBdLCB5OiBub3dbMV0gfVxuICAgICAgICAgIH0gKSApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRyaWdnZXJFdmVudHMoIG5lYXIsIFsgJ3RvdWNoc3RhcnQnLCAndGFwc3RhcnQnLCAndm1vdXNlZG93bicgXSwgZSwge1xuICAgICAgICBjeVBvc2l0aW9uOiB7IHg6IG5vd1swXSwgeTogbm93WzFdIH1cbiAgICAgIH0gKTtcblxuICAgICAgaWYoIG5lYXIgPT0gbnVsbCApe1xuICAgICAgICByLmRhdGEuYmdBY3RpdmVQb3Npc3Rpb24gPSB7XG4gICAgICAgICAgeDogcG9zWzBdLFxuICAgICAgICAgIHk6IHBvc1sxXVxuICAgICAgICB9O1xuXG4gICAgICAgIHIucmVkcmF3SGludCggJ3NlbGVjdCcsIHRydWUgKTtcbiAgICAgICAgci5yZWRyYXcoKTtcbiAgICAgIH1cblxuXG4gICAgICAvLyBUYXAsIHRhcGhvbGRcbiAgICAgIC8vIC0tLS0tXG5cbiAgICAgIHIudG91Y2hEYXRhLnN0YXJ0UG9zaXRpb24gPSBbXTtcbiAgICAgIGZvciAodmFyIGk9MDsgaTxub3cubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZWFybGllcltpXSA9IG5vd1tpXTtcbiAgICAgICAgci50b3VjaERhdGEuc3RhcnRQb3NpdGlvbltpXSA9IG5vd1tpXTtcbiAgICAgIH1cblxuICAgICAgci50b3VjaERhdGEuc3RhcnRHUG9zaXRpb24gPSBbIGUudG91Y2hlc1swXS5jbGllbnRYLCBlLnRvdWNoZXNbMF0uY2xpZW50WSBdO1xuXG4gICAgICByLnRvdWNoRGF0YS5zaW5nbGVUb3VjaE1vdmVkID0gZmFsc2U7XG4gICAgICByLnRvdWNoRGF0YS5zaW5nbGVUb3VjaFN0YXJ0VGltZSA9ICtuZXcgRGF0ZSgpO1xuXG4gICAgICBjbGVhclRpbWVvdXQoIHIudG91Y2hEYXRhLnRhcGhvbGRUaW1lb3V0ICk7XG4gICAgICByLnRvdWNoRGF0YS50YXBob2xkVGltZW91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKFxuICAgICAgICAgICAgci50b3VjaERhdGEuc2luZ2xlVG91Y2hNb3ZlZCA9PT0gZmFsc2VcbiAgICAgICAgICAgICYmICFyLnBpbmNoaW5nIC8vIGlmIHBpbmNoaW5nLCB0aGVuIHRhcGhvbGQgdW5zZWxlY3Qgc2hvdWxkbid0IHRha2UgZWZmZWN0XG4gICAgICAgICAgICAmJiAhci50b3VjaERhdGEuc2VsZWN0aW5nIC8vIGJveCBzZWxlY3Rpb24gc2hvdWxkbid0IGFsbG93IHRhcGhvbGQgdGhyb3VnaFxuICAgICAgICApe1xuICAgICAgICAgIHRyaWdnZXJFdmVudHMoIHIudG91Y2hEYXRhLnN0YXJ0LCBbICd0YXBob2xkJyBdLCBlLCB7XG4gICAgICAgICAgICBjeVBvc2l0aW9uOiB7IHg6IG5vd1swXSwgeTogbm93WzFdIH1cbiAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICBpZiggIXIudG91Y2hEYXRhLnN0YXJ0ICl7XG4gICAgICAgICAgICBjeS4kKCAnOnNlbGVjdGVkJyApLnVuc2VsZWN0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgIH0sIHIudGFwaG9sZER1cmF0aW9uICk7XG4gICAgfVxuXG4gIH0sIGZhbHNlICk7XG5cbiAgdmFyIHRvdWNobW92ZUhhbmRsZXI7XG4gIHIucmVnaXN0ZXJCaW5kaW5nKHdpbmRvdywgJ3RvdWNobW92ZScsIHRvdWNobW92ZUhhbmRsZXIgPSBmdW5jdGlvbihlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgc2VsZWN0ID0gci5zZWxlY3Rpb247XG4gICAgdmFyIGNhcHR1cmUgPSByLnRvdWNoRGF0YS5jYXB0dXJlO1xuICAgIHZhciBjeSA9IHIuY3k7XG4gICAgdmFyIG5vdyA9IHIudG91Y2hEYXRhLm5vdztcbiAgICB2YXIgZWFybGllciA9IHIudG91Y2hEYXRhLmVhcmxpZXI7XG4gICAgdmFyIHpvb20gPSBjeS56b29tKCk7XG5cbiAgICBpZiggZS50b3VjaGVzWzBdICl7IHZhciBwb3MgPSByLnByb2plY3RJbnRvVmlld3BvcnQoIGUudG91Y2hlc1swXS5jbGllbnRYLCBlLnRvdWNoZXNbMF0uY2xpZW50WSApOyBub3dbMF0gPSBwb3NbMF07IG5vd1sxXSA9IHBvc1sxXTsgfVxuICAgIGlmKCBlLnRvdWNoZXNbMV0gKXsgdmFyIHBvcyA9IHIucHJvamVjdEludG9WaWV3cG9ydCggZS50b3VjaGVzWzFdLmNsaWVudFgsIGUudG91Y2hlc1sxXS5jbGllbnRZICk7IG5vd1syXSA9IHBvc1swXTsgbm93WzNdID0gcG9zWzFdOyB9XG4gICAgaWYoIGUudG91Y2hlc1syXSApeyB2YXIgcG9zID0gci5wcm9qZWN0SW50b1ZpZXdwb3J0KCBlLnRvdWNoZXNbMl0uY2xpZW50WCwgZS50b3VjaGVzWzJdLmNsaWVudFkgKTsgbm93WzRdID0gcG9zWzBdOyBub3dbNV0gPSBwb3NbMV07IH1cblxuICAgIHZhciBpc092ZXJUaHJlc2hvbGREcmFnO1xuXG4gICAgaWYoIGNhcHR1cmUgJiYgZS50b3VjaGVzWzBdICl7XG4gICAgICB2YXIgZGlzcCA9IFtdOyBmb3IgKHZhciBqPTA7ajxub3cubGVuZ3RoO2orKykgeyBkaXNwW2pdID0gbm93W2pdIC0gZWFybGllcltqXTsgfVxuICAgICAgdmFyIHN0YXJ0R1BvcyA9IHIudG91Y2hEYXRhLnN0YXJ0R1Bvc2l0aW9uO1xuICAgICAgdmFyIGR4ID0gZS50b3VjaGVzWzBdLmNsaWVudFggLSBzdGFydEdQb3NbMF07XG4gICAgICB2YXIgZHgyID0gZHggKiBkeDtcbiAgICAgIHZhciBkeSA9IGUudG91Y2hlc1swXS5jbGllbnRZIC0gc3RhcnRHUG9zWzFdO1xuICAgICAgdmFyIGR5MiA9IGR5ICogZHk7XG4gICAgICB2YXIgZGlzdDIgPSBkeDIgKyBkeTI7XG5cbiAgICAgIGlzT3ZlclRocmVzaG9sZERyYWcgPSBkaXN0MiA+PSByLnRvdWNoVGFwVGhyZXNob2xkMjtcbiAgICB9XG5cbiAgICAvLyBjb250ZXh0IHN3aXBlIGNhbmNlbGxpbmdcbiAgICBpZiggY2FwdHVyZSAmJiByLnRvdWNoRGF0YS5jeHQgKXtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgdmFyIGYxeDIgPSBlLnRvdWNoZXNbMF0uY2xpZW50WCAtIG9mZnNldExlZnQsIGYxeTIgPSBlLnRvdWNoZXNbMF0uY2xpZW50WSAtIG9mZnNldFRvcDtcbiAgICAgIHZhciBmMngyID0gZS50b3VjaGVzWzFdLmNsaWVudFggLSBvZmZzZXRMZWZ0LCBmMnkyID0gZS50b3VjaGVzWzFdLmNsaWVudFkgLSBvZmZzZXRUb3A7XG4gICAgICAvLyB2YXIgZGlzdGFuY2UyID0gZGlzdGFuY2UoIGYxeDIsIGYxeTIsIGYyeDIsIGYyeTIgKTtcbiAgICAgIHZhciBkaXN0YW5jZTJTcSA9IGRpc3RhbmNlU3EoIGYxeDIsIGYxeTIsIGYyeDIsIGYyeTIgKTtcbiAgICAgIHZhciBmYWN0b3JTcSA9IGRpc3RhbmNlMlNxIC8gZGlzdGFuY2UxU3E7XG5cbiAgICAgIHZhciBkaXN0VGhyZXNob2xkID0gMTUwO1xuICAgICAgdmFyIGRpc3RUaHJlc2hvbGRTcSA9IGRpc3RUaHJlc2hvbGQgKiBkaXN0VGhyZXNob2xkO1xuICAgICAgdmFyIGZhY3RvclRocmVzaG9sZCA9IDEuNTtcbiAgICAgIHZhciBmYWN0b3JUaHJlc2hvbGRTcSA9IGZhY3RvclRocmVzaG9sZCAqIGZhY3RvclRocmVzaG9sZDtcblxuICAgICAgLy8gY2FuY2VsIGN0eCBnZXN0dXJlcyBpZiB0aGUgZGlzdGFuY2UgYi90IHRoZSBmaW5nZXJzIGluY3JlYXNlc1xuICAgICAgaWYoIGZhY3RvclNxID49IGZhY3RvclRocmVzaG9sZFNxIHx8IGRpc3RhbmNlMlNxID49IGRpc3RUaHJlc2hvbGRTcSApe1xuICAgICAgICByLnRvdWNoRGF0YS5jeHQgPSBmYWxzZTtcbiAgICAgICAgaWYoIHIudG91Y2hEYXRhLnN0YXJ0ICl7IHIudG91Y2hEYXRhLnN0YXJ0LnVuYWN0aXZhdGUoKTsgci50b3VjaERhdGEuc3RhcnQgPSBudWxsOyB9XG4gICAgICAgIHIuZGF0YS5iZ0FjdGl2ZVBvc2lzdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgci5yZWRyYXdIaW50KCAnc2VsZWN0JywgdHJ1ZSApO1xuXG4gICAgICAgIHZhciBjeHRFdnQgPSBuZXcgRXZlbnQoIGUsIHtcbiAgICAgICAgICB0eXBlOiAnY3h0dGFwZW5kJyxcbiAgICAgICAgICBjeVBvc2l0aW9uOiB7IHg6IG5vd1swXSwgeTogbm93WzFdIH1cbiAgICAgICAgfSApO1xuICAgICAgICBpZiggci50b3VjaERhdGEuc3RhcnQgKXtcbiAgICAgICAgICByLnRvdWNoRGF0YS5zdGFydC50cmlnZ2VyKCBjeHRFdnQgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjeS50cmlnZ2VyKCBjeHRFdnQgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gY29udGV4dCBzd2lwZVxuICAgIGlmKCBjYXB0dXJlICYmIHIudG91Y2hEYXRhLmN4dCApe1xuICAgICAgdmFyIGN4dEV2dCA9IG5ldyBFdmVudCggZSwge1xuICAgICAgICB0eXBlOiAnY3h0ZHJhZycsXG4gICAgICAgIGN5UG9zaXRpb246IHsgeDogbm93WzBdLCB5OiBub3dbMV0gfVxuICAgICAgfSApO1xuICAgICAgci5kYXRhLmJnQWN0aXZlUG9zaXN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgci5yZWRyYXdIaW50KCAnc2VsZWN0JywgdHJ1ZSApO1xuXG4gICAgICBpZiggci50b3VjaERhdGEuc3RhcnQgKXtcbiAgICAgICAgci50b3VjaERhdGEuc3RhcnQudHJpZ2dlciggY3h0RXZ0ICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjeS50cmlnZ2VyKCBjeHRFdnQgKTtcbiAgICAgIH1cblxuICAgICAgaWYoIHIudG91Y2hEYXRhLnN0YXJ0ICl7IHIudG91Y2hEYXRhLnN0YXJ0Ll9wcml2YXRlLmdyYWJiZWQgPSBmYWxzZTsgfVxuICAgICAgci50b3VjaERhdGEuY3h0RHJhZ2dlZCA9IHRydWU7XG5cbiAgICAgIHZhciBuZWFyID0gci5maW5kTmVhcmVzdEVsZW1lbnQoIG5vd1swXSwgbm93WzFdLCB0cnVlICk7XG5cbiAgICAgIGlmKCAhci50b3VjaERhdGEuY3h0T3ZlciB8fCBuZWFyICE9PSByLnRvdWNoRGF0YS5jeHRPdmVyICl7XG5cbiAgICAgICAgaWYoIHIudG91Y2hEYXRhLmN4dE92ZXIgKXtcbiAgICAgICAgICByLnRvdWNoRGF0YS5jeHRPdmVyLnRyaWdnZXIoIG5ldyBFdmVudCggZSwge1xuICAgICAgICAgICAgdHlwZTogJ2N4dGRyYWdvdXQnLFxuICAgICAgICAgICAgY3lQb3NpdGlvbjogeyB4OiBub3dbMF0sIHk6IG5vd1sxXSB9XG4gICAgICAgICAgfSApICk7XG4gICAgICAgIH1cblxuICAgICAgICByLnRvdWNoRGF0YS5jeHRPdmVyID0gbmVhcjtcblxuICAgICAgICBpZiggbmVhciApe1xuICAgICAgICAgIG5lYXIudHJpZ2dlciggbmV3IEV2ZW50KCBlLCB7XG4gICAgICAgICAgICB0eXBlOiAnY3h0ZHJhZ292ZXInLFxuICAgICAgICAgICAgY3lQb3NpdGlvbjogeyB4OiBub3dbMF0sIHk6IG5vd1sxXSB9XG4gICAgICAgICAgfSApICk7XG5cbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAvLyBib3ggc2VsZWN0aW9uXG4gICAgfSBlbHNlIGlmKCBjYXB0dXJlICYmIGUudG91Y2hlc1syXSAmJiBjeS5ib3hTZWxlY3Rpb25FbmFibGVkKCkgKXtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgci5kYXRhLmJnQWN0aXZlUG9zaXN0aW9uID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLmxhc3RUaHJlZVRvdWNoID0gK25ldyBEYXRlKCk7XG5cbiAgICAgIGlmKCAhci50b3VjaERhdGEuc2VsZWN0aW5nICl7XG4gICAgICAgIGN5LnRyaWdnZXIoJ2JveHN0YXJ0Jyk7XG4gICAgICB9XG5cbiAgICAgIHIudG91Y2hEYXRhLnNlbGVjdGluZyA9IHRydWU7XG5cbiAgICAgIHIucmVkcmF3SGludCggJ3NlbGVjdCcsIHRydWUgKTtcblxuICAgICAgaWYoICFzZWxlY3QgfHwgc2VsZWN0Lmxlbmd0aCA9PT0gMCB8fCBzZWxlY3RbMF0gPT09IHVuZGVmaW5lZCApe1xuICAgICAgICBzZWxlY3RbMF0gPSAobm93WzBdICsgbm93WzJdICsgbm93WzRdKSAvIDM7XG4gICAgICAgIHNlbGVjdFsxXSA9IChub3dbMV0gKyBub3dbM10gKyBub3dbNV0pIC8gMztcbiAgICAgICAgc2VsZWN0WzJdID0gKG5vd1swXSArIG5vd1syXSArIG5vd1s0XSkgLyAzICsgMTtcbiAgICAgICAgc2VsZWN0WzNdID0gKG5vd1sxXSArIG5vd1szXSArIG5vd1s1XSkgLyAzICsgMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdFsyXSA9IChub3dbMF0gKyBub3dbMl0gKyBub3dbNF0pIC8gMztcbiAgICAgICAgc2VsZWN0WzNdID0gKG5vd1sxXSArIG5vd1szXSArIG5vd1s1XSkgLyAzO1xuICAgICAgfVxuXG4gICAgICBzZWxlY3RbNF0gPSAxO1xuICAgICAgci50b3VjaERhdGEuc2VsZWN0aW5nID0gdHJ1ZTtcblxuICAgICAgci5yZWRyYXcoKTtcblxuICAgIC8vIHBpbmNoIHRvIHpvb21cbiAgICB9IGVsc2UgaWYoIGNhcHR1cmUgJiYgZS50b3VjaGVzWzFdICYmIGN5Lnpvb21pbmdFbmFibGVkKCkgJiYgY3kucGFubmluZ0VuYWJsZWQoKSAmJiBjeS51c2VyWm9vbWluZ0VuYWJsZWQoKSAmJiBjeS51c2VyUGFubmluZ0VuYWJsZWQoKSApeyAvLyB0d28gZmluZ2VycyA9PiBwaW5jaCB0byB6b29tXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHIuZGF0YS5iZ0FjdGl2ZVBvc2lzdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgIHIucmVkcmF3SGludCggJ3NlbGVjdCcsIHRydWUgKTtcblxuICAgICAgdmFyIGRyYWdnZWRFbGVzID0gci5kcmFnRGF0YS50b3VjaERyYWdFbGVzO1xuICAgICAgaWYoIGRyYWdnZWRFbGVzICl7XG4gICAgICAgIHIucmVkcmF3SGludCggJ2RyYWcnLCB0cnVlICk7XG5cbiAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBkcmFnZ2VkRWxlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgICAgIGRyYWdnZWRFbGVzWyBpIF0uX3ByaXZhdGUuZ3JhYmJlZCA9IGZhbHNlO1xuICAgICAgICAgIGRyYWdnZWRFbGVzWyBpIF0uX3ByaXZhdGUucnNjcmF0Y2guaW5EcmFnTGF5ZXIgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyAoeDIsIHkyKSBmb3IgZmluZ2VycyAxIGFuZCAyXG4gICAgICB2YXIgZjF4MiA9IGUudG91Y2hlc1swXS5jbGllbnRYIC0gb2Zmc2V0TGVmdCwgZjF5MiA9IGUudG91Y2hlc1swXS5jbGllbnRZIC0gb2Zmc2V0VG9wO1xuICAgICAgdmFyIGYyeDIgPSBlLnRvdWNoZXNbMV0uY2xpZW50WCAtIG9mZnNldExlZnQsIGYyeTIgPSBlLnRvdWNoZXNbMV0uY2xpZW50WSAtIG9mZnNldFRvcDtcblxuXG4gICAgICB2YXIgZGlzdGFuY2UyID0gZGlzdGFuY2UoIGYxeDIsIGYxeTIsIGYyeDIsIGYyeTIgKTtcbiAgICAgIC8vIHZhciBkaXN0YW5jZTJTcSA9IGRpc3RhbmNlU3EoIGYxeDIsIGYxeTIsIGYyeDIsIGYyeTIgKTtcbiAgICAgIC8vIHZhciBmYWN0b3IgPSBNYXRoLnNxcnQoIGRpc3RhbmNlMlNxICkgLyBNYXRoLnNxcnQoIGRpc3RhbmNlMVNxICk7XG4gICAgICB2YXIgZmFjdG9yID0gZGlzdGFuY2UyIC8gZGlzdGFuY2UxO1xuXG4gICAgICBpZiggZmFjdG9yICE9IDEgJiYgdHdvRmluZ2Vyc1N0YXJ0SW5zaWRlICl7XG4gICAgICAgIC8vIGRlbHRhIGZpbmdlcjFcbiAgICAgICAgdmFyIGRmMXggPSBmMXgyIC0gZjF4MTtcbiAgICAgICAgdmFyIGRmMXkgPSBmMXkyIC0gZjF5MTtcblxuICAgICAgICAvLyBkZWx0YSBmaW5nZXIgMlxuICAgICAgICB2YXIgZGYyeCA9IGYyeDIgLSBmMngxO1xuICAgICAgICB2YXIgZGYyeSA9IGYyeTIgLSBmMnkxO1xuXG4gICAgICAgIC8vIHRyYW5zbGF0aW9uIGlzIHRoZSBub3JtYWxpc2VkIHZlY3RvciBvZiB0aGUgdHdvIGZpbmdlcnMgbW92ZW1lbnRcbiAgICAgICAgLy8gaS5lLiBzbyBwaW5jaGluZyBjYW5jZWxzIG91dCBhbmQgbW92aW5nIHRvZ2V0aGVyIHBhbnNcbiAgICAgICAgdmFyIHR4ID0gKGRmMXggKyBkZjJ4KSAvIDI7XG4gICAgICAgIHZhciB0eSA9IChkZjF5ICsgZGYyeSkgLyAyO1xuXG4gICAgICAgIC8vIGFkanVzdCBmYWN0b3IgYnkgdGhlIHNwZWVkIG11bHRpcGxpZXJcbiAgICAgICAgLy8gdmFyIHNwZWVkID0gMS41O1xuICAgICAgICAvLyBpZiggZmFjdG9yID4gMSApe1xuICAgICAgICAvLyAgIGZhY3RvciA9IChmYWN0b3IgLSAxKSAqIHNwZWVkICsgMTtcbiAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgLy8gICBmYWN0b3IgPSAxIC0gKDEgLSBmYWN0b3IpICogc3BlZWQ7XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBub3cgY2FsY3VsYXRlIHRoZSB6b29tXG4gICAgICAgIHZhciB6b29tMSA9IGN5Lnpvb20oKTtcbiAgICAgICAgdmFyIHpvb20yID0gem9vbTEgKiBmYWN0b3I7XG4gICAgICAgIHZhciBwYW4xID0gY3kucGFuKCk7XG5cbiAgICAgICAgLy8gdGhlIG1vZGVsIGNlbnRlciBwb2ludCBjb252ZXJ0ZWQgdG8gdGhlIGN1cnJlbnQgcmVuZGVyZWQgcG9zXG4gICAgICAgIHZhciBjdHJ4ID0gbW9kZWxDZW50ZXIxWzBdICogem9vbTEgKyBwYW4xLng7XG4gICAgICAgIHZhciBjdHJ5ID0gbW9kZWxDZW50ZXIxWzFdICogem9vbTEgKyBwYW4xLnk7XG5cbiAgICAgICAgdmFyIHBhbjIgPSB7XG4gICAgICAgICAgeDogLXpvb20yIC8gem9vbTEgKiAoY3RyeCAtIHBhbjEueCAtIHR4KSArIGN0cngsXG4gICAgICAgICAgeTogLXpvb20yIC8gem9vbTEgKiAoY3RyeSAtIHBhbjEueSAtIHR5KSArIGN0cnlcbiAgICAgICAgfTtcblxuICAgICAgICAvLyByZW1vdmUgZHJhZ2dlZCBlbGVzXG4gICAgICAgIGlmKCByLnRvdWNoRGF0YS5zdGFydCApe1xuICAgICAgICAgIHZhciBkcmFnZ2VkRWxlcyA9IHIuZHJhZ0RhdGEudG91Y2hEcmFnRWxlcztcblxuICAgICAgICAgIGZyZWVEcmFnZ2VkRWxlbWVudHMoIGRyYWdnZWRFbGVzICk7XG5cbiAgICAgICAgICByLnJlZHJhd0hpbnQoICdkcmFnJywgdHJ1ZSApO1xuICAgICAgICAgIHIucmVkcmF3SGludCggJ2VsZXMnLCB0cnVlICk7XG5cbiAgICAgICAgICByLnRvdWNoRGF0YS5zdGFydFxuICAgICAgICAgICAgLnRyaWdnZXIoICdmcmVlJyApXG4gICAgICAgICAgICAudW5hY3RpdmF0ZSgpXG4gICAgICAgICAgO1xuICAgICAgICB9XG5cbiAgICAgICAgY3kudmlld3BvcnQoIHtcbiAgICAgICAgICB6b29tOiB6b29tMixcbiAgICAgICAgICBwYW46IHBhbjIsXG4gICAgICAgICAgY2FuY2VsT25GYWlsZWRab29tOiB0cnVlXG4gICAgICAgIH0gKTtcblxuICAgICAgICBkaXN0YW5jZTEgPSBkaXN0YW5jZTI7XG4gICAgICAgIGYxeDEgPSBmMXgyO1xuICAgICAgICBmMXkxID0gZjF5MjtcbiAgICAgICAgZjJ4MSA9IGYyeDI7XG4gICAgICAgIGYyeTEgPSBmMnkyO1xuXG4gICAgICAgIHIucGluY2hpbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBSZS1wcm9qZWN0XG4gICAgICBpZiggZS50b3VjaGVzWzBdICl7IHZhciBwb3MgPSByLnByb2plY3RJbnRvVmlld3BvcnQoIGUudG91Y2hlc1swXS5jbGllbnRYLCBlLnRvdWNoZXNbMF0uY2xpZW50WSApOyBub3dbMF0gPSBwb3NbMF07IG5vd1sxXSA9IHBvc1sxXTsgfVxuICAgICAgaWYoIGUudG91Y2hlc1sxXSApeyB2YXIgcG9zID0gci5wcm9qZWN0SW50b1ZpZXdwb3J0KCBlLnRvdWNoZXNbMV0uY2xpZW50WCwgZS50b3VjaGVzWzFdLmNsaWVudFkgKTsgbm93WzJdID0gcG9zWzBdOyBub3dbM10gPSBwb3NbMV07IH1cbiAgICAgIGlmKCBlLnRvdWNoZXNbMl0gKXsgdmFyIHBvcyA9IHIucHJvamVjdEludG9WaWV3cG9ydCggZS50b3VjaGVzWzJdLmNsaWVudFgsIGUudG91Y2hlc1syXS5jbGllbnRZICk7IG5vd1s0XSA9IHBvc1swXTsgbm93WzVdID0gcG9zWzFdOyB9XG5cbiAgICB9IGVsc2UgaWYoIGUudG91Y2hlc1swXSApe1xuICAgICAgdmFyIHN0YXJ0ID0gci50b3VjaERhdGEuc3RhcnQ7XG4gICAgICB2YXIgbGFzdCA9IHIudG91Y2hEYXRhLmxhc3Q7XG4gICAgICB2YXIgbmVhcjtcblxuICAgICAgaWYoICFyLmhvdmVyRGF0YS5kcmFnZ2luZ0VsZXMgJiYgIXIuc3dpcGVQYW5uaW5nICl7XG4gICAgICAgIG5lYXIgPSByLmZpbmROZWFyZXN0RWxlbWVudCggbm93WzBdLCBub3dbMV0sIHRydWUgKTtcbiAgICAgIH1cblxuICAgICAgaWYoIGNhcHR1cmUgJiYgc3RhcnQgIT0gbnVsbCApe1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGRyYWdnaW5nIG5vZGVzXG4gICAgICBpZiggY2FwdHVyZSAmJiBzdGFydCAhPSBudWxsICYmIHIubm9kZUlzRHJhZ2dhYmxlKCBzdGFydCApICl7XG5cbiAgICAgICAgaWYoIGlzT3ZlclRocmVzaG9sZERyYWcgKXsgLy8gdGhlbiBkcmFnZ2luZyBjYW4gaGFwcGVuXG4gICAgICAgICAgdmFyIGRyYWdnZWRFbGVzID0gci5kcmFnRGF0YS50b3VjaERyYWdFbGVzO1xuICAgICAgICAgIHZhciBqdXN0U3RhcnRlZERyYWcgPSAhci5kcmFnRGF0YS5kaWREcmFnO1xuXG4gICAgICAgICAgaWYoIGp1c3RTdGFydGVkRHJhZyApe1xuICAgICAgICAgICAgYWRkTm9kZXNUb0RyYWcoIGN5LmNvbGxlY3Rpb24oIGRyYWdnZWRFbGVzICksIHsgaW5EcmFnTGF5ZXI6IHRydWUgfSApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciggdmFyIGsgPSAwOyBrIDwgZHJhZ2dlZEVsZXMubGVuZ3RoOyBrKysgKXtcbiAgICAgICAgICAgIHZhciBkcmFnZ2VkRWxlID0gZHJhZ2dlZEVsZXNbIGsgXTtcblxuICAgICAgICAgICAgaWYoIHIubm9kZUlzRHJhZ2dhYmxlKCBkcmFnZ2VkRWxlICkgJiYgZHJhZ2dlZEVsZS5ncmFiYmVkKCkgKXtcbiAgICAgICAgICAgICAgci5kcmFnRGF0YS5kaWREcmFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdmFyIGRQb3MgPSBkcmFnZ2VkRWxlLl9wcml2YXRlLnBvc2l0aW9uO1xuICAgICAgICAgICAgICB2YXIgdXBkYXRlUG9zID0gIWRyYWdnZWRFbGUuaXNQYXJlbnQoKTtcblxuICAgICAgICAgICAgICBpZiggdXBkYXRlUG9zICYmIGlzLm51bWJlciggZGlzcFswXSApICYmIGlzLm51bWJlciggZGlzcFsxXSApICl7XG4gICAgICAgICAgICAgICAgZFBvcy54ICs9IGRpc3BbMF07XG4gICAgICAgICAgICAgICAgZFBvcy55ICs9IGRpc3BbMV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZigganVzdFN0YXJ0ZWREcmFnICl7XG4gICAgICAgICAgICAgICAgci5yZWRyYXdIaW50KCAnZWxlcycsIHRydWUgKTtcblxuICAgICAgICAgICAgICAgIHZhciBkcmFnRGVsdGEgPSByLnRvdWNoRGF0YS5kcmFnRGVsdGE7XG5cbiAgICAgICAgICAgICAgICBpZiggdXBkYXRlUG9zICYmIGRyYWdEZWx0YSAmJiBpcy5udW1iZXIoIGRyYWdEZWx0YVswXSApICYmIGlzLm51bWJlciggZHJhZ0RlbHRhWzFdICkgKXtcbiAgICAgICAgICAgICAgICAgIGRQb3MueCArPSBkcmFnRGVsdGFbMF07XG4gICAgICAgICAgICAgICAgICBkUG9zLnkgKz0gZHJhZ0RlbHRhWzFdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHRjb2wgPSBjeS5jb2xsZWN0aW9uKCBkcmFnZ2VkRWxlcyApO1xuXG4gICAgICAgICAgdGNvbC51cGRhdGVDb21wb3VuZEJvdW5kcygpO1xuICAgICAgICAgIHRjb2wudHJpZ2dlciggJ3Bvc2l0aW9uIGRyYWcnICk7XG5cbiAgICAgICAgICByLmhvdmVyRGF0YS5kcmFnZ2luZ0VsZXMgPSB0cnVlO1xuXG4gICAgICAgICAgci5yZWRyYXdIaW50KCAnZHJhZycsIHRydWUgKTtcblxuICAgICAgICAgIGlmKFxuICAgICAgICAgICAgICAgci50b3VjaERhdGEuc3RhcnRQb3NpdGlvblswXSA9PSBlYXJsaWVyWzBdXG4gICAgICAgICAgICAmJiByLnRvdWNoRGF0YS5zdGFydFBvc2l0aW9uWzFdID09IGVhcmxpZXJbMV1cbiAgICAgICAgICApe1xuXG4gICAgICAgICAgICByLnJlZHJhd0hpbnQoICdlbGVzJywgdHJ1ZSApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHIucmVkcmF3KCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIG90aGVyaXNlIGtlZXAgdHJhY2sgb2YgZHJhZyBkZWx0YSBmb3IgbGF0ZXJcbiAgICAgICAgICB2YXIgZHJhZ0RlbHRhID0gci50b3VjaERhdGEuZHJhZ0RlbHRhID0gci50b3VjaERhdGEuZHJhZ0RlbHRhIHx8IFtdO1xuXG4gICAgICAgICAgaWYoIGRyYWdEZWx0YS5sZW5ndGggPT09IDAgKXtcbiAgICAgICAgICAgIGRyYWdEZWx0YS5wdXNoKCBkaXNwWzBdICk7XG4gICAgICAgICAgICBkcmFnRGVsdGEucHVzaCggZGlzcFsxXSApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkcmFnRGVsdGFbMF0gKz0gZGlzcFswXTtcbiAgICAgICAgICAgIGRyYWdEZWx0YVsxXSArPSBkaXNwWzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyB0b3VjaG1vdmVcbiAgICAgIHtcbiAgICAgICAgdHJpZ2dlckV2ZW50cyggKHN0YXJ0IHx8IG5lYXIpLCBbICd0b3VjaG1vdmUnLCAndGFwZHJhZycsICd2bW91c2Vtb3ZlJyBdLCBlLCB7XG4gICAgICAgICAgY3lQb3NpdGlvbjogeyB4OiBub3dbMF0sIHk6IG5vd1sxXSB9XG4gICAgICAgIH0gKTtcblxuICAgICAgICBpZiggKCAhc3RhcnQgfHwgIXN0YXJ0LmdyYWJiZWQoKSApICYmIG5lYXIgIT0gbGFzdCApe1xuICAgICAgICAgIGlmKCBsYXN0ICl7IGxhc3QudHJpZ2dlciggbmV3IEV2ZW50KCBlLCB7IHR5cGU6ICd0YXBkcmFnb3V0JywgY3lQb3NpdGlvbjogeyB4OiBub3dbMF0sIHk6IG5vd1sxXSB9IH0gKSApOyB9XG4gICAgICAgICAgaWYoIG5lYXIgKXsgbmVhci50cmlnZ2VyKCBuZXcgRXZlbnQoIGUsIHsgdHlwZTogJ3RhcGRyYWdvdmVyJywgY3lQb3NpdGlvbjogeyB4OiBub3dbMF0sIHk6IG5vd1sxXSB9IH0gKSApOyB9XG4gICAgICAgIH1cblxuICAgICAgICByLnRvdWNoRGF0YS5sYXN0ID0gbmVhcjtcbiAgICAgIH1cblxuICAgICAgLy8gY2hlY2sgdG8gY2FuY2VsIHRhcGhvbGRcbiAgICAgIGlmKCBjYXB0dXJlICl7XG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbm93Lmxlbmd0aDsgaSsrICl7XG4gICAgICAgICAgaWYoIG5vd1sgaSBdXG4gICAgICAgICAgICAmJiByLnRvdWNoRGF0YS5zdGFydFBvc2l0aW9uWyBpIF1cbiAgICAgICAgICAgICYmIGlzT3ZlclRocmVzaG9sZERyYWcgKXtcblxuICAgICAgICAgICAgci50b3VjaERhdGEuc2luZ2xlVG91Y2hNb3ZlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHBhbm5pbmdcbiAgICAgIGlmKFxuICAgICAgICAgIGNhcHR1cmVcbiAgICAgICAgICAmJiAoIHN0YXJ0ID09IG51bGwgfHwgc3RhcnQuaXNFZGdlKCkgKVxuICAgICAgICAgICYmIGN5LnBhbm5pbmdFbmFibGVkKCkgJiYgY3kudXNlclBhbm5pbmdFbmFibGVkKClcbiAgICAgICl7XG5cbiAgICAgICAgdmFyIGFsbG93UGFzc3Rocm91Z2ggPSBhbGxvd1Bhbm5pbmdQYXNzdGhyb3VnaCggc3RhcnQsIHIudG91Y2hEYXRhLnN0YXJ0cyApO1xuXG4gICAgICAgIGlmKCBhbGxvd1Bhc3N0aHJvdWdoICl7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgaWYoIHIuc3dpcGVQYW5uaW5nICl7XG4gICAgICAgICAgICBjeS5wYW5CeSgge1xuICAgICAgICAgICAgICB4OiBkaXNwWzBdICogem9vbSxcbiAgICAgICAgICAgICAgeTogZGlzcFsxXSAqIHpvb21cbiAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgIH0gZWxzZSBpZiggaXNPdmVyVGhyZXNob2xkRHJhZyApe1xuICAgICAgICAgICAgci5zd2lwZVBhbm5pbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBjeS5wYW5CeSgge1xuICAgICAgICAgICAgICB4OiBkeCAqIHpvb20sXG4gICAgICAgICAgICAgIHk6IGR5ICogem9vbVxuICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICBpZiggc3RhcnQgKXtcbiAgICAgICAgICAgICAgc3RhcnQudW5hY3RpdmF0ZSgpO1xuXG4gICAgICAgICAgICAgIGlmKCAhci5kYXRhLmJnQWN0aXZlUG9zaXN0aW9uICl7XG4gICAgICAgICAgICAgICAgci5kYXRhLmJnQWN0aXZlUG9zaXN0aW9uID0gbWF0aC5hcnJheTJwb2ludCggci50b3VjaERhdGEuc3RhcnRQb3NpdGlvbiApO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgci5yZWRyYXdIaW50KCAnc2VsZWN0JywgdHJ1ZSApO1xuXG4gICAgICAgICAgICAgIHIudG91Y2hEYXRhLnN0YXJ0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlLXByb2plY3RcbiAgICAgICAgdmFyIHBvcyA9IHIucHJvamVjdEludG9WaWV3cG9ydCggZS50b3VjaGVzWzBdLmNsaWVudFgsIGUudG91Y2hlc1swXS5jbGllbnRZICk7XG4gICAgICAgIG5vd1swXSA9IHBvc1swXTsgbm93WzFdID0gcG9zWzFdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciggdmFyIGogPSAwOyBqIDwgbm93Lmxlbmd0aDsgaisrICl7IGVhcmxpZXJbIGogXSA9IG5vd1sgaiBdOyB9XG4gICAgLy9yLnJlZHJhdygpO1xuXG4gIH0sIGZhbHNlICk7XG5cbiAgdmFyIHRvdWNoY2FuY2VsSGFuZGxlcjtcbiAgci5yZWdpc3RlckJpbmRpbmcoIHdpbmRvdywgJ3RvdWNoY2FuY2VsJywgdG91Y2hjYW5jZWxIYW5kbGVyID0gZnVuY3Rpb24oIGUgKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgIHZhciBzdGFydCA9IHIudG91Y2hEYXRhLnN0YXJ0O1xuXG4gICAgci50b3VjaERhdGEuY2FwdHVyZSA9IGZhbHNlO1xuXG4gICAgaWYoIHN0YXJ0ICl7XG4gICAgICBzdGFydC51bmFjdGl2YXRlKCk7XG4gICAgfVxuICB9ICk7XG5cbiAgdmFyIHRvdWNoZW5kSGFuZGxlcjtcbiAgci5yZWdpc3RlckJpbmRpbmcoIHdpbmRvdywgJ3RvdWNoZW5kJywgdG91Y2hlbmRIYW5kbGVyID0gZnVuY3Rpb24oIGUgKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgIHZhciBzdGFydCA9IHIudG91Y2hEYXRhLnN0YXJ0O1xuXG4gICAgdmFyIGNhcHR1cmUgPSByLnRvdWNoRGF0YS5jYXB0dXJlO1xuXG4gICAgaWYoIGNhcHR1cmUgKXtcbiAgICAgIHIudG91Y2hEYXRhLmNhcHR1cmUgPSBmYWxzZTtcblxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNlbGVjdCA9IHIuc2VsZWN0aW9uO1xuXG4gICAgci5zd2lwZVBhbm5pbmcgPSBmYWxzZTtcbiAgICByLmhvdmVyRGF0YS5kcmFnZ2luZ0VsZXMgPSBmYWxzZTtcblxuICAgIHZhciBjeSA9IHIuY3k7XG4gICAgdmFyIHpvb20gPSBjeS56b29tKCk7XG4gICAgdmFyIG5vdyA9IHIudG91Y2hEYXRhLm5vdztcbiAgICB2YXIgZWFybGllciA9IHIudG91Y2hEYXRhLmVhcmxpZXI7XG5cbiAgICBpZiggZS50b3VjaGVzWzBdICl7IHZhciBwb3MgPSByLnByb2plY3RJbnRvVmlld3BvcnQoIGUudG91Y2hlc1swXS5jbGllbnRYLCBlLnRvdWNoZXNbMF0uY2xpZW50WSApOyBub3dbMF0gPSBwb3NbMF07IG5vd1sxXSA9IHBvc1sxXTsgfVxuICAgIGlmKCBlLnRvdWNoZXNbMV0gKXsgdmFyIHBvcyA9IHIucHJvamVjdEludG9WaWV3cG9ydCggZS50b3VjaGVzWzFdLmNsaWVudFgsIGUudG91Y2hlc1sxXS5jbGllbnRZICk7IG5vd1syXSA9IHBvc1swXTsgbm93WzNdID0gcG9zWzFdOyB9XG4gICAgaWYoIGUudG91Y2hlc1syXSApeyB2YXIgcG9zID0gci5wcm9qZWN0SW50b1ZpZXdwb3J0KCBlLnRvdWNoZXNbMl0uY2xpZW50WCwgZS50b3VjaGVzWzJdLmNsaWVudFkgKTsgbm93WzRdID0gcG9zWzBdOyBub3dbNV0gPSBwb3NbMV07IH1cblxuICAgIGlmKCBzdGFydCApe1xuICAgICAgc3RhcnQudW5hY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIHZhciBjdHhUYXBlbmQ7XG4gICAgaWYoIHIudG91Y2hEYXRhLmN4dCApe1xuICAgICAgY3R4VGFwZW5kID0gbmV3IEV2ZW50KCBlLCB7XG4gICAgICAgIHR5cGU6ICdjeHR0YXBlbmQnLFxuICAgICAgICBjeVBvc2l0aW9uOiB7IHg6IG5vd1swXSwgeTogbm93WzFdIH1cbiAgICAgIH0gKTtcblxuICAgICAgaWYoIHN0YXJ0ICl7XG4gICAgICAgIHN0YXJ0LnRyaWdnZXIoIGN0eFRhcGVuZCApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3kudHJpZ2dlciggY3R4VGFwZW5kICk7XG4gICAgICB9XG5cbiAgICAgIGlmKCAhci50b3VjaERhdGEuY3h0RHJhZ2dlZCApe1xuICAgICAgICB2YXIgY3R4VGFwID0gbmV3IEV2ZW50KCBlLCB7XG4gICAgICAgICAgdHlwZTogJ2N4dHRhcCcsXG4gICAgICAgICAgY3lQb3NpdGlvbjogeyB4OiBub3dbMF0sIHk6IG5vd1sxXSB9XG4gICAgICAgIH0gKTtcblxuICAgICAgICBpZiggc3RhcnQgKXtcbiAgICAgICAgICBzdGFydC50cmlnZ2VyKCBjdHhUYXAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjeS50cmlnZ2VyKCBjdHhUYXAgKTtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIGlmKCByLnRvdWNoRGF0YS5zdGFydCApeyByLnRvdWNoRGF0YS5zdGFydC5fcHJpdmF0ZS5ncmFiYmVkID0gZmFsc2U7IH1cbiAgICAgIHIudG91Y2hEYXRhLmN4dCA9IGZhbHNlO1xuICAgICAgci50b3VjaERhdGEuc3RhcnQgPSBudWxsO1xuXG4gICAgICByLnJlZHJhdygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIG5vIG1vcmUgYm94IHNlbGVjdGlvbiBpZiB3ZSBkb24ndCBoYXZlIHRocmVlIGZpbmdlcnNcbiAgICBpZiggIWUudG91Y2hlc1syXSAmJiBjeS5ib3hTZWxlY3Rpb25FbmFibGVkKCkgJiYgci50b3VjaERhdGEuc2VsZWN0aW5nICl7XG4gICAgICByLnRvdWNoRGF0YS5zZWxlY3RpbmcgPSBmYWxzZTtcblxuICAgICAgdmFyIGJveCA9IGN5LmNvbGxlY3Rpb24oIHIuZ2V0QWxsSW5Cb3goIHNlbGVjdFswXSwgc2VsZWN0WzFdLCBzZWxlY3RbMl0sIHNlbGVjdFszXSApICk7XG5cbiAgICAgIHNlbGVjdFswXSA9IHVuZGVmaW5lZDtcbiAgICAgIHNlbGVjdFsxXSA9IHVuZGVmaW5lZDtcbiAgICAgIHNlbGVjdFsyXSA9IHVuZGVmaW5lZDtcbiAgICAgIHNlbGVjdFszXSA9IHVuZGVmaW5lZDtcbiAgICAgIHNlbGVjdFs0XSA9IDA7XG5cbiAgICAgIHIucmVkcmF3SGludCggJ3NlbGVjdCcsIHRydWUgKTtcblxuICAgICAgY3kudHJpZ2dlcignYm94ZW5kJyk7XG5cbiAgICAgIHZhciBlbGVXb3VsZEJlU2VsZWN0ZWQgPSBmdW5jdGlvbiggZWxlICl7IHJldHVybiBlbGUuc2VsZWN0YWJsZSgpICYmICFlbGUuc2VsZWN0ZWQoKTsgfTtcblxuICAgICAgYm94XG4gICAgICAgIC50cmlnZ2VyKCdib3gnKVxuICAgICAgICAuc3RkRmlsdGVyKCBlbGVXb3VsZEJlU2VsZWN0ZWQgKVxuICAgICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAgIC50cmlnZ2VyKCdib3hzZWxlY3QnKVxuICAgICAgO1xuXG4gICAgICBpZiggYm94Lm5vbmVtcHR5KCkgKXtcbiAgICAgICAgci5yZWRyYXdIaW50KCAnZWxlcycsIHRydWUgKTtcbiAgICAgIH1cblxuICAgICAgci5yZWRyYXcoKTtcbiAgICB9XG5cbiAgICBpZiggc3RhcnQgIT0gbnVsbCApe1xuICAgICAgc3RhcnQudW5hY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIGlmKCBlLnRvdWNoZXNbMl0gKXtcbiAgICAgIHIuZGF0YS5iZ0FjdGl2ZVBvc2lzdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgIHIucmVkcmF3SGludCggJ3NlbGVjdCcsIHRydWUgKTtcbiAgICB9IGVsc2UgaWYoIGUudG91Y2hlc1sxXSApe1xuICAgICAgLy8gaWdub3JlXG4gICAgfSBlbHNlIGlmKCBlLnRvdWNoZXNbMF0gKXtcbiAgICAgIC8vIGlnbm9yZVxuXG4gICAgLy8gTGFzdCB0b3VjaCByZWxlYXNlZFxuICAgIH0gZWxzZSBpZiggIWUudG91Y2hlc1swXSApe1xuXG4gICAgICByLmRhdGEuYmdBY3RpdmVQb3Npc3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICByLnJlZHJhd0hpbnQoICdzZWxlY3QnLCB0cnVlICk7XG5cbiAgICAgIHZhciBkcmFnZ2VkRWxlcyA9IHIuZHJhZ0RhdGEudG91Y2hEcmFnRWxlcztcblxuICAgICAgaWYoIHN0YXJ0ICE9IG51bGwgKXtcblxuICAgICAgICB2YXIgc3RhcnRXYXNHcmFiYmVkID0gc3RhcnQuX3ByaXZhdGUuZ3JhYmJlZDtcblxuICAgICAgICBmcmVlRHJhZ2dlZEVsZW1lbnRzKCBkcmFnZ2VkRWxlcyApO1xuXG4gICAgICAgIHIucmVkcmF3SGludCggJ2RyYWcnLCB0cnVlICk7XG4gICAgICAgIHIucmVkcmF3SGludCggJ2VsZXMnLCB0cnVlICk7XG5cbiAgICAgICAgaWYoIHN0YXJ0V2FzR3JhYmJlZCApe1xuICAgICAgICAgIHN0YXJ0LnRyaWdnZXIoICdmcmVlJyApO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJpZ2dlckV2ZW50cyggc3RhcnQsIFsgJ3RvdWNoZW5kJywgJ3RhcGVuZCcsICd2bW91c2V1cCcsICd0YXBkcmFnb3V0JyBdLCBlLCB7XG4gICAgICAgICAgY3lQb3NpdGlvbjogeyB4OiBub3dbMF0sIHk6IG5vd1sxXSB9XG4gICAgICAgIH0gKTtcblxuICAgICAgICBzdGFydC51bmFjdGl2YXRlKCk7XG5cbiAgICAgICAgci50b3VjaERhdGEuc3RhcnQgPSBudWxsO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbmVhciA9IHIuZmluZE5lYXJlc3RFbGVtZW50KCBub3dbMF0sIG5vd1sxXSwgdHJ1ZSApO1xuXG4gICAgICAgIHRyaWdnZXJFdmVudHMoIG5lYXIsIFsgJ3RvdWNoZW5kJywgJ3RhcGVuZCcsICd2bW91c2V1cCcsICd0YXBkcmFnb3V0JyBdLCBlLCB7XG4gICAgICAgICAgY3lQb3NpdGlvbjogeyB4OiBub3dbMF0sIHk6IG5vd1sxXSB9XG4gICAgICAgIH0gKTtcblxuICAgICAgfVxuXG4gICAgICB2YXIgZHggPSByLnRvdWNoRGF0YS5zdGFydFBvc2l0aW9uWzBdIC0gbm93WzBdO1xuICAgICAgdmFyIGR4MiA9IGR4ICogZHg7XG4gICAgICB2YXIgZHkgPSByLnRvdWNoRGF0YS5zdGFydFBvc2l0aW9uWzFdIC0gbm93WzFdO1xuICAgICAgdmFyIGR5MiA9IGR5ICogZHk7XG4gICAgICB2YXIgZGlzdDIgPSBkeDIgKyBkeTI7XG4gICAgICB2YXIgcmRpc3QyID0gZGlzdDIgKiB6b29tICogem9vbTtcblxuICAgICAgLy8gUHJlcGFyZSB0byBzZWxlY3QgdGhlIGN1cnJlbnRseSB0b3VjaGVkIG5vZGUsIG9ubHkgaWYgaXQgaGFzbid0IGJlZW4gZHJhZ2dlZCBwYXN0IGEgY2VydGFpbiBkaXN0YW5jZVxuICAgICAgaWYoIHN0YXJ0ICE9IG51bGxcbiAgICAgICAgICAmJiAhci5kcmFnRGF0YS5kaWREcmFnIC8vIGRpZG4ndCBkcmFnIG5vZGVzIGFyb3VuZFxuICAgICAgICAgICYmIHN0YXJ0Ll9wcml2YXRlLnNlbGVjdGFibGVcbiAgICAgICAgICAmJiByZGlzdDIgPCByLnRvdWNoVGFwVGhyZXNob2xkMlxuICAgICAgICAgICYmICFyLnBpbmNoaW5nIC8vIHBpbmNoIHRvIHpvb20gc2hvdWxkIG5vdCBhZmZlY3Qgc2VsZWN0aW9uXG4gICAgICApe1xuXG4gICAgICAgIGlmKCBjeS5zZWxlY3Rpb25UeXBlKCkgPT09ICdzaW5nbGUnICl7XG4gICAgICAgICAgY3kuJCggJzpzZWxlY3RlZCcgKS51bm1lcmdlKCBzdGFydCApLnVuc2VsZWN0KCk7XG4gICAgICAgICAgc3RhcnQuc2VsZWN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYoIHN0YXJ0LnNlbGVjdGVkKCkgKXtcbiAgICAgICAgICAgIHN0YXJ0LnVuc2VsZWN0KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0LnNlbGVjdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHIucmVkcmF3SGludCggJ2VsZXMnLCB0cnVlICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRhcCBldmVudCwgcm91Z2hseSBzYW1lIGFzIG1vdXNlIGNsaWNrIGV2ZW50IGZvciB0b3VjaFxuICAgICAgaWYoICFyLnRvdWNoRGF0YS5zaW5nbGVUb3VjaE1vdmVkICl7XG4gICAgICAgIHRyaWdnZXJFdmVudHMoIHN0YXJ0LCBbICd0YXAnLCAndmNsaWNrJyBdLCBlLCB7XG4gICAgICAgICAgY3lQb3NpdGlvbjogeyB4OiBub3dbMF0sIHk6IG5vd1sxXSB9XG4gICAgICAgIH0gKTtcbiAgICAgIH1cblxuICAgICAgci50b3VjaERhdGEuc2luZ2xlVG91Y2hNb3ZlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgZm9yKCB2YXIgaiA9IDA7IGogPCBub3cubGVuZ3RoOyBqKysgKXsgZWFybGllclsgaiBdID0gbm93WyBqIF07IH1cblxuICAgIHIuZHJhZ0RhdGEuZGlkRHJhZyA9IGZhbHNlOyAvLyByZXNldCBmb3IgbmV4dCBtb3VzZWRvd25cblxuICAgIGlmKCBlLnRvdWNoZXMubGVuZ3RoID09PSAwICl7XG4gICAgICByLnRvdWNoRGF0YS5kcmFnRGVsdGEgPSBbXTtcbiAgICAgIHIudG91Y2hEYXRhLnN0YXJ0UG9zaXRpb24gPSBudWxsO1xuICAgICAgci50b3VjaERhdGEuc3RhcnRHUG9zaXRpb24gPSBudWxsO1xuICAgIH1cblxuICAgIGlmKCBlLnRvdWNoZXMubGVuZ3RoIDwgMiApe1xuICAgICAgci5waW5jaGluZyA9IGZhbHNlO1xuICAgICAgci5yZWRyYXdIaW50KCAnZWxlcycsIHRydWUgKTtcbiAgICAgIHIucmVkcmF3KCk7XG4gICAgfVxuXG4gICAgLy9yLnJlZHJhdygpO1xuXG4gIH0sIGZhbHNlICk7XG5cbiAgLy8gZmFsbGJhY2sgY29tcGF0aWJpbGl0eSBsYXllciBmb3IgbXMgcG9pbnRlciBldmVudHNcbiAgaWYoIHR5cGVvZiBUb3VjaEV2ZW50ID09PSAndW5kZWZpbmVkJyApe1xuXG4gICAgdmFyIHBvaW50ZXJzID0gW107XG5cbiAgICB2YXIgbWFrZVRvdWNoID0gZnVuY3Rpb24oIGUgKXtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNsaWVudFg6IGUuY2xpZW50WCxcbiAgICAgICAgY2xpZW50WTogZS5jbGllbnRZLFxuICAgICAgICBmb3JjZTogMSxcbiAgICAgICAgaWRlbnRpZmllcjogZS5wb2ludGVySWQsXG4gICAgICAgIHBhZ2VYOiBlLnBhZ2VYLFxuICAgICAgICBwYWdlWTogZS5wYWdlWSxcbiAgICAgICAgcmFkaXVzWDogZS53aWR0aCAvIDIsXG4gICAgICAgIHJhZGl1c1k6IGUuaGVpZ2h0IC8gMixcbiAgICAgICAgc2NyZWVuWDogZS5zY3JlZW5YLFxuICAgICAgICBzY3JlZW5ZOiBlLnNjcmVlblksXG4gICAgICAgIHRhcmdldDogZS50YXJnZXRcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBtYWtlUG9pbnRlciA9IGZ1bmN0aW9uKCBlICl7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBldmVudDogZSxcbiAgICAgICAgdG91Y2g6IG1ha2VUb3VjaCggZSApXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB2YXIgYWRkUG9pbnRlciA9IGZ1bmN0aW9uKCBlICl7XG4gICAgICBwb2ludGVycy5wdXNoKCBtYWtlUG9pbnRlciggZSApICk7XG4gICAgfTtcblxuICAgIHZhciByZW1vdmVQb2ludGVyID0gZnVuY3Rpb24oIGUgKXtcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgcG9pbnRlcnMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIHAgPSBwb2ludGVyc1sgaSBdO1xuXG4gICAgICAgIGlmKCBwLmV2ZW50LnBvaW50ZXJJZCA9PT0gZS5wb2ludGVySWQgKXtcbiAgICAgICAgICBwb2ludGVycy5zcGxpY2UoIGksIDEgKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHVwZGF0ZVBvaW50ZXIgPSBmdW5jdGlvbiggZSApe1xuICAgICAgdmFyIHAgPSBwb2ludGVycy5maWx0ZXIoIGZ1bmN0aW9uKCBwICl7XG4gICAgICAgIHJldHVybiBwLmV2ZW50LnBvaW50ZXJJZCA9PT0gZS5wb2ludGVySWQ7XG4gICAgICB9IClbMF07XG5cbiAgICAgIHAuZXZlbnQgPSBlO1xuICAgICAgcC50b3VjaCA9IG1ha2VUb3VjaCggZSApO1xuICAgIH07XG5cbiAgICB2YXIgYWRkVG91Y2hlc1RvRXZlbnQgPSBmdW5jdGlvbiggZSApe1xuICAgICAgZS50b3VjaGVzID0gcG9pbnRlcnMubWFwKCBmdW5jdGlvbiggcCApe1xuICAgICAgICByZXR1cm4gcC50b3VjaDtcbiAgICAgIH0gKTtcbiAgICB9O1xuXG4gICAgci5yZWdpc3RlckJpbmRpbmcoIHIuY29udGFpbmVyLCAncG9pbnRlcmRvd24nLCBmdW5jdGlvbiggZSApe1xuICAgICAgaWYoIGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScgKXsgcmV0dXJuOyB9IC8vIG1vdXNlIGFscmVhZHkgaGFuZGxlZFxuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGFkZFBvaW50ZXIoIGUgKTtcblxuICAgICAgYWRkVG91Y2hlc1RvRXZlbnQoIGUgKTtcbiAgICAgIHRvdWNoc3RhcnRIYW5kbGVyKCBlICk7XG4gICAgfSApO1xuXG4gICAgci5yZWdpc3RlckJpbmRpbmcoIHIuY29udGFpbmVyLCAncG9pbnRlcnVwJywgZnVuY3Rpb24oIGUgKXtcbiAgICAgIGlmKCBlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnICl7IHJldHVybjsgfSAvLyBtb3VzZSBhbHJlYWR5IGhhbmRsZWRcblxuICAgICAgcmVtb3ZlUG9pbnRlciggZSApO1xuXG4gICAgICBhZGRUb3VjaGVzVG9FdmVudCggZSApO1xuICAgICAgdG91Y2hlbmRIYW5kbGVyKCBlICk7XG4gICAgfSApO1xuXG4gICAgci5yZWdpc3RlckJpbmRpbmcoIHIuY29udGFpbmVyLCAncG9pbnRlcmNhbmNlbCcsIGZ1bmN0aW9uKCBlICl7XG4gICAgICBpZiggZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJyApeyByZXR1cm47IH0gLy8gbW91c2UgYWxyZWFkeSBoYW5kbGVkXG5cbiAgICAgIHJlbW92ZVBvaW50ZXIoIGUgKTtcblxuICAgICAgYWRkVG91Y2hlc1RvRXZlbnQoIGUgKTtcbiAgICAgIHRvdWNoY2FuY2VsSGFuZGxlciggZSApO1xuICAgIH0gKTtcblxuICAgIHIucmVnaXN0ZXJCaW5kaW5nKCByLmNvbnRhaW5lciwgJ3BvaW50ZXJtb3ZlJywgZnVuY3Rpb24oIGUgKXtcbiAgICAgIGlmKCBlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnICl7IHJldHVybjsgfSAvLyBtb3VzZSBhbHJlYWR5IGhhbmRsZWRcblxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICB1cGRhdGVQb2ludGVyKCBlICk7XG5cbiAgICAgIGFkZFRvdWNoZXNUb0V2ZW50KCBlICk7XG4gICAgICB0b3VjaG1vdmVIYW5kbGVyKCBlICk7XG4gICAgfSApO1xuXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQlJwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWF0aCA9IHJlcXVpcmUoICcuLi8uLi8uLi9tYXRoJyApO1xudmFyIHNiZ24gPSByZXF1aXJlKCAnLi4vLi4vLi4vc2JnbicgKTtcblxudmFyIEJScCA9IHt9O1xuXG5CUnAubm9kZVNoYXBlcyA9IHt9O1xuXG5CUnAuZ2VuZXJhdGVQb2x5Z29uID0gZnVuY3Rpb24oIG5hbWUsIHBvaW50cyApe1xuICByZXR1cm4gKCB0aGlzLm5vZGVTaGFwZXNbIG5hbWUgXSA9IHtcbiAgICByZW5kZXJlcjogdGhpcyxcblxuICAgIG5hbWU6IG5hbWUsXG5cbiAgICBwb2ludHM6IHBvaW50cyxcblxuICAgIGRyYXc6IGZ1bmN0aW9uKCBjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLCB3aWR0aCwgaGVpZ2h0ICl7XG4gICAgICB0aGlzLnJlbmRlcmVyLm5vZGVTaGFwZUltcGwoICdwb2x5Z29uJywgY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsIGhlaWdodCwgdGhpcy5wb2ludHMgKTtcbiAgICB9LFxuXG4gICAgaW50ZXJzZWN0TGluZTogZnVuY3Rpb24oIG5vZGVYLCBub2RlWSwgd2lkdGgsIGhlaWdodCwgeCwgeSwgcGFkZGluZyApe1xuICAgICAgcmV0dXJuIG1hdGgucG9seWdvbkludGVyc2VjdExpbmUoXG4gICAgICAgICAgeCwgeSxcbiAgICAgICAgICB0aGlzLnBvaW50cyxcbiAgICAgICAgICBub2RlWCxcbiAgICAgICAgICBub2RlWSxcbiAgICAgICAgICB3aWR0aCAvIDIsIGhlaWdodCAvIDIsXG4gICAgICAgICAgcGFkZGluZyApXG4gICAgICAgIDtcbiAgICB9LFxuXG4gICAgY2hlY2tQb2ludDogZnVuY3Rpb24oIHgsIHksIHBhZGRpbmcsIHdpZHRoLCBoZWlnaHQsIGNlbnRlclgsIGNlbnRlclkgKXtcbiAgICAgIHJldHVybiBtYXRoLnBvaW50SW5zaWRlUG9seWdvbiggeCwgeSwgdGhpcy5wb2ludHMsXG4gICAgICAgIGNlbnRlclgsIGNlbnRlclksIHdpZHRoLCBoZWlnaHQsIFswLCAtMV0sIHBhZGRpbmcgKVxuICAgICAgO1xuICAgIH1cbiAgfSApO1xufTtcblxuQlJwLmdlbmVyYXRlRWxsaXBzZSA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiAoIHRoaXMubm9kZVNoYXBlc1snZWxsaXBzZSddID0ge1xuICAgIHJlbmRlcmVyOiB0aGlzLFxuXG4gICAgbmFtZTogJ2VsbGlwc2UnLFxuXG4gICAgZHJhdzogZnVuY3Rpb24oIGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclksIHdpZHRoLCBoZWlnaHQgKXtcbiAgICAgIHRoaXMucmVuZGVyZXIubm9kZVNoYXBlSW1wbCggdGhpcy5uYW1lLCBjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLCB3aWR0aCwgaGVpZ2h0ICk7XG4gICAgfSxcblxuICAgIGludGVyc2VjdExpbmU6IGZ1bmN0aW9uKCBub2RlWCwgbm9kZVksIHdpZHRoLCBoZWlnaHQsIHgsIHksIHBhZGRpbmcgKXtcbiAgICAgIHJldHVybiBtYXRoLmludGVyc2VjdExpbmVFbGxpcHNlKFxuICAgICAgICB4LCB5LFxuICAgICAgICBub2RlWCxcbiAgICAgICAgbm9kZVksXG4gICAgICAgIHdpZHRoIC8gMiArIHBhZGRpbmcsXG4gICAgICAgIGhlaWdodCAvIDIgKyBwYWRkaW5nIClcbiAgICAgIDtcbiAgICB9LFxuXG4gICAgY2hlY2tQb2ludDogZnVuY3Rpb24oIHgsIHksIHBhZGRpbmcsIHdpZHRoLCBoZWlnaHQsIGNlbnRlclgsIGNlbnRlclkgKXtcbiAgICAgIHggLT0gY2VudGVyWDtcbiAgICAgIHkgLT0gY2VudGVyWTtcblxuICAgICAgeCAvPSAod2lkdGggLyAyICsgcGFkZGluZyk7XG4gICAgICB5IC89IChoZWlnaHQgLyAyICsgcGFkZGluZyk7XG5cbiAgICAgIHJldHVybiB4ICogeCArIHkgKiB5IDw9IDE7XG4gICAgfVxuICB9ICk7XG59O1xuXG5CUnAuZ2VuZXJhdGVSb3VuZFJlY3RhbmdsZSA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiAoIHRoaXMubm9kZVNoYXBlc1sncm91bmRyZWN0YW5nbGUnXSA9IHtcbiAgICByZW5kZXJlcjogdGhpcyxcblxuICAgIG5hbWU6ICdyb3VuZHJlY3RhbmdsZScsXG5cbiAgICBwb2ludHM6IG1hdGguZ2VuZXJhdGVVbml0TmdvblBvaW50c0ZpdFRvU3F1YXJlKCA0LCAwICksXG5cbiAgICBkcmF3OiBmdW5jdGlvbiggY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsIGhlaWdodCApe1xuICAgICAgdGhpcy5yZW5kZXJlci5ub2RlU2hhcGVJbXBsKCB0aGlzLm5hbWUsIGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclksIHdpZHRoLCBoZWlnaHQgKTtcbiAgICB9LFxuXG4gICAgaW50ZXJzZWN0TGluZTogZnVuY3Rpb24oIG5vZGVYLCBub2RlWSwgd2lkdGgsIGhlaWdodCwgeCwgeSwgcGFkZGluZyApe1xuICAgICAgcmV0dXJuIG1hdGgucm91bmRSZWN0YW5nbGVJbnRlcnNlY3RMaW5lKFxuICAgICAgICB4LCB5LFxuICAgICAgICBub2RlWCxcbiAgICAgICAgbm9kZVksXG4gICAgICAgIHdpZHRoLCBoZWlnaHQsXG4gICAgICAgIHBhZGRpbmcgKVxuICAgICAgO1xuICAgIH0sXG5cbiAgICAvLyBMb29rcyBsaWtlIHRoZSB3aWR0aCBwYXNzZWQgaW50byB0aGlzIGZ1bmN0aW9uIGlzIGFjdHVhbGx5IHRoZSB0b3RhbCB3aWR0aCAvIDJcbiAgICBjaGVja1BvaW50OiBmdW5jdGlvbihcbiAgICAgIHgsIHksIHBhZGRpbmcsIHdpZHRoLCBoZWlnaHQsIGNlbnRlclgsIGNlbnRlclkgKXtcblxuICAgICAgdmFyIGNvcm5lclJhZGl1cyA9IG1hdGguZ2V0Um91bmRSZWN0YW5nbGVSYWRpdXMoIHdpZHRoLCBoZWlnaHQgKTtcblxuICAgICAgLy8gQ2hlY2sgaEJveFxuICAgICAgaWYoIG1hdGgucG9pbnRJbnNpZGVQb2x5Z29uKCB4LCB5LCB0aGlzLnBvaW50cyxcbiAgICAgICAgY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsIGhlaWdodCAtIDIgKiBjb3JuZXJSYWRpdXMsIFswLCAtMV0sIHBhZGRpbmcgKSApe1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgdkJveFxuICAgICAgaWYoIG1hdGgucG9pbnRJbnNpZGVQb2x5Z29uKCB4LCB5LCB0aGlzLnBvaW50cyxcbiAgICAgICAgY2VudGVyWCwgY2VudGVyWSwgd2lkdGggLSAyICogY29ybmVyUmFkaXVzLCBoZWlnaHQsIFswLCAtMV0sIHBhZGRpbmcgKSApe1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoZWNrSW5FbGxpcHNlID0gZnVuY3Rpb24oIHgsIHksIGNlbnRlclgsIGNlbnRlclksIHdpZHRoLCBoZWlnaHQsIHBhZGRpbmcgKXtcbiAgICAgICAgeCAtPSBjZW50ZXJYO1xuICAgICAgICB5IC09IGNlbnRlclk7XG5cbiAgICAgICAgeCAvPSAod2lkdGggLyAyICsgcGFkZGluZyk7XG4gICAgICAgIHkgLz0gKGhlaWdodCAvIDIgKyBwYWRkaW5nKTtcblxuICAgICAgICByZXR1cm4gKHggKiB4ICsgeSAqIHkgPD0gMSk7XG4gICAgICB9O1xuXG5cbiAgICAgIC8vIENoZWNrIHRvcCBsZWZ0IHF1YXJ0ZXIgY2lyY2xlXG4gICAgICBpZiggY2hlY2tJbkVsbGlwc2UoIHgsIHksXG4gICAgICAgIGNlbnRlclggLSB3aWR0aCAvIDIgKyBjb3JuZXJSYWRpdXMsXG4gICAgICAgIGNlbnRlclkgLSBoZWlnaHQgLyAyICsgY29ybmVyUmFkaXVzLFxuICAgICAgICBjb3JuZXJSYWRpdXMgKiAyLCBjb3JuZXJSYWRpdXMgKiAyLCBwYWRkaW5nICkgKXtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgdG9wIHJpZ2h0IHF1YXJ0ZXIgY2lyY2xlXG4gICAgICBpZiggY2hlY2tJbkVsbGlwc2UoIHgsIHksXG4gICAgICAgIGNlbnRlclggKyB3aWR0aCAvIDIgLSBjb3JuZXJSYWRpdXMsXG4gICAgICAgIGNlbnRlclkgLSBoZWlnaHQgLyAyICsgY29ybmVyUmFkaXVzLFxuICAgICAgICBjb3JuZXJSYWRpdXMgKiAyLCBjb3JuZXJSYWRpdXMgKiAyLCBwYWRkaW5nICkgKXtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgYm90dG9tIHJpZ2h0IHF1YXJ0ZXIgY2lyY2xlXG4gICAgICBpZiggY2hlY2tJbkVsbGlwc2UoIHgsIHksXG4gICAgICAgIGNlbnRlclggKyB3aWR0aCAvIDIgLSBjb3JuZXJSYWRpdXMsXG4gICAgICAgIGNlbnRlclkgKyBoZWlnaHQgLyAyIC0gY29ybmVyUmFkaXVzLFxuICAgICAgICBjb3JuZXJSYWRpdXMgKiAyLCBjb3JuZXJSYWRpdXMgKiAyLCBwYWRkaW5nICkgKXtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgYm90dG9tIGxlZnQgcXVhcnRlciBjaXJjbGVcbiAgICAgIGlmKCBjaGVja0luRWxsaXBzZSggeCwgeSxcbiAgICAgICAgY2VudGVyWCAtIHdpZHRoIC8gMiArIGNvcm5lclJhZGl1cyxcbiAgICAgICAgY2VudGVyWSArIGhlaWdodCAvIDIgLSBjb3JuZXJSYWRpdXMsXG4gICAgICAgIGNvcm5lclJhZGl1cyAqIDIsIGNvcm5lclJhZGl1cyAqIDIsIHBhZGRpbmcgKSApe1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9ICk7XG59O1xuXG5CUnAucmVnaXN0ZXJOb2RlU2hhcGVzID0gZnVuY3Rpb24oKXtcbiAgdmFyIG5vZGVTaGFwZXMgPSB0aGlzLm5vZGVTaGFwZXMgPSBCUnAubm9kZVNoYXBlcztcbiAgdmFyIHJlbmRlcmVyID0gdGhpcztcblxuICB0aGlzLmdlbmVyYXRlRWxsaXBzZSgpO1xuXG4gIHRoaXMuZ2VuZXJhdGVQb2x5Z29uKCAndHJpYW5nbGUnLCBtYXRoLmdlbmVyYXRlVW5pdE5nb25Qb2ludHNGaXRUb1NxdWFyZSggMywgMCApICk7XG5cbiAgdGhpcy5nZW5lcmF0ZVBvbHlnb24oICdyZWN0YW5nbGUnLCBtYXRoLmdlbmVyYXRlVW5pdE5nb25Qb2ludHNGaXRUb1NxdWFyZSggNCwgMCApICk7XG4gIG5vZGVTaGFwZXNbICdzcXVhcmUnIF0gPSBub2RlU2hhcGVzWyAncmVjdGFuZ2xlJyBdO1xuXG4gIHRoaXMuZ2VuZXJhdGVSb3VuZFJlY3RhbmdsZSgpO1xuXG4gIHRoaXMuZ2VuZXJhdGVQb2x5Z29uKCAnZGlhbW9uZCcsIFtcbiAgICAwLCAxLFxuICAgIDEsIDAsXG4gICAgMCwgLTEsXG4gICAgLTEsIDBcbiAgXSApO1xuXG4gIHRoaXMuZ2VuZXJhdGVQb2x5Z29uKCAncGVudGFnb24nLCBtYXRoLmdlbmVyYXRlVW5pdE5nb25Qb2ludHNGaXRUb1NxdWFyZSggNSwgMCApICk7XG5cbiAgdGhpcy5nZW5lcmF0ZVBvbHlnb24oICdoZXhhZ29uJywgbWF0aC5nZW5lcmF0ZVVuaXROZ29uUG9pbnRzRml0VG9TcXVhcmUoIDYsIDAgKSApO1xuXG4gIHRoaXMuZ2VuZXJhdGVQb2x5Z29uKCAnaGVwdGFnb24nLCBtYXRoLmdlbmVyYXRlVW5pdE5nb25Qb2ludHNGaXRUb1NxdWFyZSggNywgMCApICk7XG5cbiAgdGhpcy5nZW5lcmF0ZVBvbHlnb24oICdvY3RhZ29uJywgbWF0aC5nZW5lcmF0ZVVuaXROZ29uUG9pbnRzRml0VG9TcXVhcmUoIDgsIDAgKSApO1xuXG4gIHZhciBzdGFyNVBvaW50cyA9IG5ldyBBcnJheSggMjAgKTtcbiAge1xuICAgIHZhciBvdXRlclBvaW50cyA9IG1hdGguZ2VuZXJhdGVVbml0TmdvblBvaW50cyggNSwgMCApO1xuICAgIHZhciBpbm5lclBvaW50cyA9IG1hdGguZ2VuZXJhdGVVbml0TmdvblBvaW50cyggNSwgTWF0aC5QSSAvIDUgKTtcblxuICAgIC8vIE91dGVyIHJhZGl1cyBpcyAxOyBpbm5lciByYWRpdXMgb2Ygc3RhciBpcyBzbWFsbGVyXG4gICAgdmFyIGlubmVyUmFkaXVzID0gMC41ICogKDMgLSBNYXRoLnNxcnQoIDUgKSk7XG4gICAgaW5uZXJSYWRpdXMgKj0gMS41NztcblxuICAgIGZvciggdmFyIGkgPSAwO2kgPCBpbm5lclBvaW50cy5sZW5ndGggLyAyO2krKyApe1xuICAgICAgaW5uZXJQb2ludHNbIGkgKiAyXSAqPSBpbm5lclJhZGl1cztcbiAgICAgIGlubmVyUG9pbnRzWyBpICogMiArIDFdICo9IGlubmVyUmFkaXVzO1xuICAgIH1cblxuICAgIGZvciggdmFyIGkgPSAwO2kgPCAyMCAvIDQ7aSsrICl7XG4gICAgICBzdGFyNVBvaW50c1sgaSAqIDRdID0gb3V0ZXJQb2ludHNbIGkgKiAyXTtcbiAgICAgIHN0YXI1UG9pbnRzWyBpICogNCArIDFdID0gb3V0ZXJQb2ludHNbIGkgKiAyICsgMV07XG5cbiAgICAgIHN0YXI1UG9pbnRzWyBpICogNCArIDJdID0gaW5uZXJQb2ludHNbIGkgKiAyXTtcbiAgICAgIHN0YXI1UG9pbnRzWyBpICogNCArIDNdID0gaW5uZXJQb2ludHNbIGkgKiAyICsgMV07XG4gICAgfVxuICB9XG5cbiAgc3RhcjVQb2ludHMgPSBtYXRoLmZpdFBvbHlnb25Ub1NxdWFyZSggc3RhcjVQb2ludHMgKTtcblxuICB0aGlzLmdlbmVyYXRlUG9seWdvbiggJ3N0YXInLCBzdGFyNVBvaW50cyApO1xuXG4gIHRoaXMuZ2VuZXJhdGVQb2x5Z29uKCAndmVlJywgW1xuICAgIC0xLCAtMSxcbiAgICAwLCAtMC4zMzMsXG4gICAgMSwgLTEsXG4gICAgMCwgMVxuICBdICk7XG5cbiAgdGhpcy5nZW5lcmF0ZVBvbHlnb24oICdyaG9tYm9pZCcsIFtcbiAgICAtMSwgLTEsXG4gICAgMC4zMzMsIC0xLFxuICAgIDEsIDEsXG4gICAgLTAuMzMzLCAxXG4gIF0gKTtcblxuICBub2RlU2hhcGVzLm1ha2VQb2x5Z29uID0gZnVuY3Rpb24oIHBvaW50cyApe1xuXG4gICAgLy8gdXNlIGNhY2hpbmcgb24gdXNlci1zcGVjaWZpZWQgcG9seWdvbnMgc28gdGhleSBhcmUgYXMgZmFzdCBhcyBuYXRpdmUgc2hhcGVzXG5cbiAgICB2YXIga2V5ID0gcG9pbnRzLmpvaW4oICckJyApO1xuICAgIHZhciBuYW1lID0gJ3BvbHlnb24tJyArIGtleTtcbiAgICB2YXIgc2hhcGU7XG5cbiAgICBpZiggKHNoYXBlID0gdGhpc1sgbmFtZSBdKSApeyAvLyBnb3QgY2FjaGVkIHNoYXBlXG4gICAgICByZXR1cm4gc2hhcGU7XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIGFuZCBjYWNoZSBuZXcgc2hhcGVcbiAgICByZXR1cm4gcmVuZGVyZXIuZ2VuZXJhdGVQb2x5Z29uKCBuYW1lLCBwb2ludHMgKTtcbiAgfTtcblxuICBzYmduLnJlZ2lzdGVyU2Jnbk5vZGVTaGFwZXMoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQlJwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoICcuLi8uLi8uLi91dGlsJyApO1xuXG52YXIgQlJwID0ge307XG5cbkJScC50aW1lVG9SZW5kZXIgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5yZWRyYXdUb3RhbFRpbWUgLyB0aGlzLnJlZHJhd0NvdW50O1xufTtcblxuQlJwLnJlZHJhdyA9IGZ1bmN0aW9uKCBvcHRpb25zICl7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHV0aWwuc3RhdGljRW1wdHlPYmplY3QoKTtcblxuICB2YXIgciA9IHRoaXM7XG5cbiAgaWYoIHIuYXZlcmFnZVJlZHJhd1RpbWUgPT09IHVuZGVmaW5lZCApeyByLmF2ZXJhZ2VSZWRyYXdUaW1lID0gMDsgfVxuICBpZiggci5sYXN0UmVkcmF3VGltZSA9PT0gdW5kZWZpbmVkICl7IHIubGFzdFJlZHJhd1RpbWUgPSAwOyB9XG4gIGlmKCByLmxhc3REcmF3VGltZSA9PT0gdW5kZWZpbmVkICl7IHIubGFzdERyYXdUaW1lID0gMDsgfVxuXG4gIHIucmVxdWVzdGVkRnJhbWUgPSB0cnVlO1xuICByLnJlbmRlck9wdGlvbnMgPSBvcHRpb25zO1xufTtcblxuQlJwLmJlZm9yZVJlbmRlciA9IGZ1bmN0aW9uKCBmbiwgcHJpb3JpdHkgKXtcbiAgLy8gdGhlIHJlbmRlcmVyIGNhbid0IGFkZCB0aWNrIGNhbGxiYWNrcyB3aGVuIGRlc3Ryb3llZFxuICBpZiggdGhpcy5kZXN0cm95ZWQgKXsgcmV0dXJuOyB9XG5cbiAgcHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXG4gIHZhciBjYnMgPSB0aGlzLmJlZm9yZVJlbmRlckNhbGxiYWNrcztcblxuICBjYnMucHVzaCh7IGZuOiBmbiwgcHJpb3JpdHk6IHByaW9yaXR5IH0pO1xuXG4gIC8vIGhpZ2hlciBwcmlvcml0eSBjYWxsYmFja3MgZXhlY3V0ZWQgZmlyc3RcbiAgY2JzLnNvcnQoZnVuY3Rpb24oIGEsIGIgKXsgcmV0dXJuIGIucHJpb3JpdHkgLSBhLnByaW9yaXR5OyB9KTtcbn07XG5cbnZhciBiZWZvcmVSZW5kZXJDYWxsYmFja3MgPSBmdW5jdGlvbiggciwgd2lsbERyYXcsIHN0YXJ0VGltZSApe1xuICB2YXIgY2JzID0gci5iZWZvcmVSZW5kZXJDYWxsYmFja3M7XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBjYnMubGVuZ3RoOyBpKysgKXtcbiAgICBjYnNbaV0uZm4oIHdpbGxEcmF3LCBzdGFydFRpbWUgKTtcbiAgfVxufTtcblxuQlJwLnN0YXJ0UmVuZGVyTG9vcCA9IGZ1bmN0aW9uKCl7XG4gIHZhciByID0gdGhpcztcblxuICBpZiggci5yZW5kZXJMb29wU3RhcnRlZCApe1xuICAgIHJldHVybjtcbiAgfSBlbHNlIHtcbiAgICByLnJlbmRlckxvb3BTdGFydGVkID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciByZW5kZXJGbiA9IGZ1bmN0aW9uKCByZXF1ZXN0VGltZSApe1xuICAgIGlmKCByLmRlc3Ryb3llZCApeyByZXR1cm47IH1cblxuICAgIGlmKCByLnJlcXVlc3RlZEZyYW1lICYmICFyLnNraXBGcmFtZSApe1xuICAgICAgYmVmb3JlUmVuZGVyQ2FsbGJhY2tzKCByLCB0cnVlLCByZXF1ZXN0VGltZSApO1xuXG4gICAgICB2YXIgc3RhcnRUaW1lID0gdXRpbC5wZXJmb3JtYW5jZU5vdygpO1xuXG4gICAgICByLnJlbmRlciggci5yZW5kZXJPcHRpb25zICk7XG5cbiAgICAgIHZhciBlbmRUaW1lID0gci5sYXN0RHJhd1RpbWUgPSB1dGlsLnBlcmZvcm1hbmNlTm93KCk7XG5cbiAgICAgIGlmKCByLmF2ZXJhZ2VSZWRyYXdUaW1lID09PSB1bmRlZmluZWQgKXtcbiAgICAgICAgci5hdmVyYWdlUmVkcmF3VGltZSA9IGVuZFRpbWUgLSBzdGFydFRpbWU7XG4gICAgICB9XG5cbiAgICAgIGlmKCByLnJlZHJhd0NvdW50ID09PSB1bmRlZmluZWQgKXtcbiAgICAgICAgci5yZWRyYXdDb3VudCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHIucmVkcmF3Q291bnQrKztcblxuICAgICAgaWYoIHIucmVkcmF3VG90YWxUaW1lID09PSB1bmRlZmluZWQgKXtcbiAgICAgICAgci5yZWRyYXdUb3RhbFRpbWUgPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgZHVyYXRpb24gPSBlbmRUaW1lIC0gc3RhcnRUaW1lO1xuXG4gICAgICByLnJlZHJhd1RvdGFsVGltZSArPSBkdXJhdGlvbjtcbiAgICAgIHIubGFzdFJlZHJhd1RpbWUgPSBkdXJhdGlvbjtcblxuICAgICAgLy8gdXNlIGEgd2VpZ2h0ZWQgYXZlcmFnZSB3aXRoIGEgYmlhcyBmcm9tIHRoZSBwcmV2aW91cyBhdmVyYWdlIHNvIHdlIGRvbid0IHNwaWtlIHNvIGVhc2lseVxuICAgICAgci5hdmVyYWdlUmVkcmF3VGltZSA9IHIuYXZlcmFnZVJlZHJhd1RpbWUgLyAyICsgZHVyYXRpb24gLyAyO1xuXG4gICAgICByLnJlcXVlc3RlZEZyYW1lID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJlZm9yZVJlbmRlckNhbGxiYWNrcyggciwgZmFsc2UsIHJlcXVlc3RUaW1lICk7XG4gICAgfVxuXG4gICAgci5za2lwRnJhbWUgPSBmYWxzZTtcblxuICAgIHV0aWwucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCByZW5kZXJGbiApO1xuICB9O1xuXG4gIHV0aWwucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCByZW5kZXJGbiApO1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJScDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENScCA9IHt9O1xuXG52YXIgaW1wbDtcblxuQ1JwLmFycm93U2hhcGVJbXBsID0gZnVuY3Rpb24oIG5hbWUgKXtcbiAgcmV0dXJuICggaW1wbCB8fCAoaW1wbCA9IHtcbiAgICAncG9seWdvbic6IGZ1bmN0aW9uKCBjb250ZXh0LCBwb2ludHMgKXtcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBwdCA9IHBvaW50c1sgaSBdO1xuXG4gICAgICAgIGNvbnRleHQubGluZVRvKCBwdC54LCBwdC55ICk7XG4gICAgICB9XG4gICAgfSxcblxuICAgICd0cmlhbmdsZS1iYWNrY3VydmUnOiBmdW5jdGlvbiggY29udGV4dCwgcG9pbnRzLCBjb250cm9sUG9pbnQgKXtcbiAgICAgIHZhciBmaXJzdFB0O1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKyApe1xuICAgICAgICB2YXIgcHQgPSBwb2ludHNbIGkgXTtcblxuICAgICAgICBpZiggaSA9PT0gMCApe1xuICAgICAgICAgIGZpcnN0UHQgPSBwdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubGluZVRvKCBwdC54LCBwdC55ICk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyggY29udHJvbFBvaW50LngsIGNvbnRyb2xQb2ludC55LCBmaXJzdFB0LngsIGZpcnN0UHQueSApO1xuICAgIH0sXG5cbiAgICAndHJpYW5nbGUtdGVlJzogZnVuY3Rpb24oIGNvbnRleHQsIHRyaWFuZ2xlUG9pbnRzLCB0ZWVQb2ludHMgKXtcbiAgICAgIHZhciB0cmlQdHMgPSB0cmlhbmdsZVBvaW50cztcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdHJpUHRzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBwdCA9IHRyaVB0c1sgaSBdO1xuXG4gICAgICAgIGNvbnRleHQubGluZVRvKCBwdC54LCBwdC55ICk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZWVQdHMgPSB0ZWVQb2ludHM7XG4gICAgICB2YXIgZmlyc3RUZWVQdCA9IHRlZVBvaW50c1swXTtcbiAgICAgIGNvbnRleHQubW92ZVRvKCBmaXJzdFRlZVB0LngsIGZpcnN0VGVlUHQueSApO1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IHRlZVB0cy5sZW5ndGg7IGkrKyApe1xuICAgICAgICB2YXIgcHQgPSB0ZWVQdHNbIGkgXTtcblxuICAgICAgICBjb250ZXh0LmxpbmVUbyggcHQueCwgcHQueSApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAnY2lyY2xlJzogZnVuY3Rpb24oIGNvbnRleHQsIHJ4LCByeSwgciApe1xuICAgICAgY29udGV4dC5hcmMoIHJ4LCByeSwgciwgMCwgTWF0aC5QSSAqIDIsIGZhbHNlICk7XG4gICAgfVxuICB9KSApWyBuYW1lIF07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENScDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENScCA9IHt9O1xuXG5DUnAuZHJhd0VkZ2UgPSBmdW5jdGlvbiggY29udGV4dCwgZWRnZSwgc2hpZnRUb09yaWdpbldpdGhCYiwgZHJhd0xhYmVsLCBkcmF3T3ZlcmxheUluc3RlYWQgKXtcbiAgdmFyIHJzID0gZWRnZS5fcHJpdmF0ZS5yc2NyYXRjaDtcbiAgdmFyIHVzZVBhdGhzID0gdGhpcy51c2VQYXRocygpO1xuXG4gIC8vIGlmIGJlemllciBjdHJsIHB0cyBjYW4gbm90IGJlIGNhbGN1bGF0ZWQsIHRoZW4gZGllXG4gIGlmKCBycy5iYWRMaW5lIHx8IGlzTmFOKHJzLmFsbHB0c1swXSkgKXsgLy8gaXNOYU4gaW4gY2FzZSBlZGdlIGlzIGltcG9zc2libGUgYW5kIGJyb3dzZXIgYnVncyAoZS5nLiBzYWZhcmkpXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYoICFlZGdlLnZpc2libGUoKSApeyByZXR1cm47IH1cblxuICB2YXIgYmI7XG4gIGlmKCBzaGlmdFRvT3JpZ2luV2l0aEJiICl7XG4gICAgYmIgPSBzaGlmdFRvT3JpZ2luV2l0aEJiO1xuXG4gICAgY29udGV4dC50cmFuc2xhdGUoIC1iYi54MSwgLWJiLnkxICk7XG4gIH1cblxuICB2YXIgb3ZlcmxheVBhZGRpbmcgPSBlZGdlLnBzdHlsZSggJ292ZXJsYXktcGFkZGluZycgKS5wZlZhbHVlO1xuICB2YXIgb3ZlcmxheU9wYWNpdHkgPSBlZGdlLnBzdHlsZSggJ292ZXJsYXktb3BhY2l0eScgKS52YWx1ZTtcbiAgdmFyIG92ZXJsYXlDb2xvciA9IGVkZ2UucHN0eWxlKCAnb3ZlcmxheS1jb2xvcicgKS52YWx1ZTtcblxuICAvLyBFZGdlIGNvbG9yICYgb3BhY2l0eVxuICBpZiggZHJhd092ZXJsYXlJbnN0ZWFkICl7XG5cbiAgICBpZiggb3ZlcmxheU9wYWNpdHkgPT09IDAgKXsgLy8gZXhpdCBlYXJseSBpZiBubyBvdmVybGF5XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zdHJva2VTdHlsZSggY29udGV4dCwgb3ZlcmxheUNvbG9yWzBdLCBvdmVybGF5Q29sb3JbMV0sIG92ZXJsYXlDb2xvclsyXSwgb3ZlcmxheU9wYWNpdHkgKTtcbiAgICBjb250ZXh0LmxpbmVDYXAgPSAncm91bmQnO1xuXG4gICAgaWYoIHJzLmVkZ2VUeXBlID09ICdzZWxmJyAmJiAhdXNlUGF0aHMgKXtcbiAgICAgIGNvbnRleHQubGluZUNhcCA9ICdidXR0JztcbiAgICB9XG5cbiAgfSBlbHNlIHtcbiAgICB2YXIgbGluZUNvbG9yID0gZWRnZS5wc3R5bGUoICdsaW5lLWNvbG9yJyApLnZhbHVlO1xuXG4gICAgdGhpcy5zdHJva2VTdHlsZSggY29udGV4dCwgbGluZUNvbG9yWzBdLCBsaW5lQ29sb3JbMV0sIGxpbmVDb2xvclsyXSwgZWRnZS5wc3R5bGUoICdvcGFjaXR5JyApLnZhbHVlICk7XG5cbiAgICBjb250ZXh0LmxpbmVDYXAgPSAnYnV0dCc7XG4gIH1cblxuICBjb250ZXh0LmxpbmVKb2luID0gJ3JvdW5kJztcblxuICB2YXIgZWRnZVdpZHRoID0gZWRnZS5wc3R5bGUoICd3aWR0aCcgKS5wZlZhbHVlICsgKGRyYXdPdmVybGF5SW5zdGVhZCA/IDIgKiBvdmVybGF5UGFkZGluZyA6IDApO1xuICB2YXIgbGluZVN0eWxlID0gZHJhd092ZXJsYXlJbnN0ZWFkID8gJ3NvbGlkJyA6IGVkZ2UucHN0eWxlKCAnbGluZS1zdHlsZScgKS52YWx1ZTtcbiAgY29udGV4dC5saW5lV2lkdGggPSBlZGdlV2lkdGg7XG5cbiAgdmFyIHNoYWRvd0JsdXIgPSBlZGdlLnBzdHlsZSggJ3NoYWRvdy1ibHVyJyApLnBmVmFsdWU7XG4gIHZhciBzaGFkb3dPcGFjaXR5ID0gZWRnZS5wc3R5bGUoICdzaGFkb3ctb3BhY2l0eScgKS52YWx1ZTtcbiAgdmFyIHNoYWRvd0NvbG9yID0gZWRnZS5wc3R5bGUoICdzaGFkb3ctY29sb3InICkudmFsdWU7XG4gIHZhciBzaGFkb3dPZmZzZXRYID0gZWRnZS5wc3R5bGUoICdzaGFkb3ctb2Zmc2V0LXgnICkucGZWYWx1ZTtcbiAgdmFyIHNoYWRvd09mZnNldFkgPSBlZGdlLnBzdHlsZSggJ3NoYWRvdy1vZmZzZXQteScgKS5wZlZhbHVlO1xuXG4gIHRoaXMuc2hhZG93U3R5bGUoIGNvbnRleHQsICBzaGFkb3dDb2xvciwgZHJhd092ZXJsYXlJbnN0ZWFkID8gMCA6IHNoYWRvd09wYWNpdHksIHNoYWRvd0JsdXIsIHNoYWRvd09mZnNldFgsIHNoYWRvd09mZnNldFkgKTtcblxuICB0aGlzLmRyYXdFZGdlUGF0aChcbiAgICBlZGdlLFxuICAgIGNvbnRleHQsXG4gICAgcnMuYWxscHRzLFxuICAgIGxpbmVTdHlsZSxcbiAgICBlZGdlV2lkdGhcbiAgKTtcblxuICB0aGlzLmRyYXdBcnJvd2hlYWRzKCBjb250ZXh0LCBlZGdlLCBkcmF3T3ZlcmxheUluc3RlYWQgKTtcblxuICB0aGlzLnNoYWRvd1N0eWxlKCBjb250ZXh0LCAndHJhbnNwYXJlbnQnLCAwICk7IC8vIHJlc2V0IGZvciBuZXh0IGd1eVxuXG4gIGlmKCAhZHJhd092ZXJsYXlJbnN0ZWFkICl7XG4gICAgdGhpcy5kcmF3RWRnZSggY29udGV4dCwgZWRnZSwgZmFsc2UsIGRyYXdMYWJlbCwgdHJ1ZSApO1xuICB9XG5cbiAgdGhpcy5kcmF3RWxlbWVudFRleHQoIGNvbnRleHQsIGVkZ2UsIGRyYXdMYWJlbCApO1xuXG4gIGlmKCBzaGlmdFRvT3JpZ2luV2l0aEJiICl7XG4gICAgY29udGV4dC50cmFuc2xhdGUoIGJiLngxLCBiYi55MSApO1xuICB9XG59O1xuXG5cbkNScC5kcmF3RWRnZVBhdGggPSBmdW5jdGlvbiggZWRnZSwgY29udGV4dCwgcHRzLCB0eXBlLCB3aWR0aCApe1xuICB2YXIgcnMgPSBlZGdlLl9wcml2YXRlLnJzY3JhdGNoO1xuICB2YXIgY2FudmFzQ3h0ID0gY29udGV4dDtcbiAgdmFyIHBhdGg7XG4gIHZhciBwYXRoQ2FjaGVIaXQgPSBmYWxzZTtcbiAgdmFyIHVzZVBhdGhzID0gdGhpcy51c2VQYXRocygpO1xuXG4gIGlmKCB1c2VQYXRocyApe1xuICAgIHZhciBwYXRoQ2FjaGVLZXkgPSBwdHMuam9pbiggJyQnICk7XG4gICAgdmFyIGtleU1hdGNoZXMgPSBycy5wYXRoQ2FjaGVLZXkgJiYgcnMucGF0aENhY2hlS2V5ID09PSBwYXRoQ2FjaGVLZXk7XG5cbiAgICBpZigga2V5TWF0Y2hlcyApe1xuICAgICAgcGF0aCA9IGNvbnRleHQgPSBycy5wYXRoQ2FjaGU7XG4gICAgICBwYXRoQ2FjaGVIaXQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoID0gY29udGV4dCA9IG5ldyBQYXRoMkQoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgICAgcnMucGF0aENhY2hlS2V5ID0gcGF0aENhY2hlS2V5O1xuICAgICAgcnMucGF0aENhY2hlID0gcGF0aDtcbiAgICB9XG4gIH1cblxuICBpZiggY2FudmFzQ3h0LnNldExpbmVEYXNoICl7IC8vIGZvciB2ZXJ5IG91dG9mZGF0ZSBicm93c2Vyc1xuICAgIHN3aXRjaCggdHlwZSApe1xuICAgICAgY2FzZSAnZG90dGVkJzpcbiAgICAgICAgY2FudmFzQ3h0LnNldExpbmVEYXNoKCBbIDEsIDEgXSApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZGFzaGVkJzpcbiAgICAgICAgY2FudmFzQ3h0LnNldExpbmVEYXNoKCBbIDYsIDMgXSApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc29saWQnOlxuICAgICAgICBjYW52YXNDeHQuc2V0TGluZURhc2goIFsgXSApO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiggIXBhdGhDYWNoZUhpdCAmJiAhcnMuYmFkTGluZSApe1xuICAgIGlmKCBjb250ZXh0LmJlZ2luUGF0aCApeyBjb250ZXh0LmJlZ2luUGF0aCgpOyB9XG4gICAgY29udGV4dC5tb3ZlVG8oIHB0c1swXSwgcHRzWzFdICk7XG5cbiAgICBzd2l0Y2goIHJzLmVkZ2VUeXBlICl7XG4gICAgICBjYXNlICdiZXppZXInOlxuICAgICAgY2FzZSAnc2VsZic6XG4gICAgICBjYXNlICdjb21wb3VuZCc6XG4gICAgICBjYXNlICdtdWx0aWJlemllcic6XG4gICAgICAgIGZvciggdmFyIGkgPSAyOyBpICsgMyA8IHB0cy5sZW5ndGg7IGkgKz0gNCApe1xuICAgICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyggcHRzWyBpIF0sIHB0c1sgaSArIDFdLCBwdHNbIGkgKyAyXSwgcHRzWyBpICsgM10gKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc3RyYWlnaHQnOlxuICAgICAgY2FzZSAnc2VnbWVudHMnOlxuICAgICAgY2FzZSAnaGF5c3RhY2snOlxuICAgICAgICBmb3IoIHZhciBpID0gMjsgaSArIDEgPCBwdHMubGVuZ3RoOyBpICs9IDIgKXtcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyggcHRzWyBpIF0sIHB0c1sgaSArIDFdICk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgY29udGV4dCA9IGNhbnZhc0N4dDtcbiAgaWYoIHVzZVBhdGhzICl7XG4gICAgY29udGV4dC5zdHJva2UoIHBhdGggKTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xuICB9XG5cbiAgLy8gcmVzZXQgYW55IGxpbmUgZGFzaGVzXG4gIGlmKCBjb250ZXh0LnNldExpbmVEYXNoICl7IC8vIGZvciB2ZXJ5IG91dG9mZGF0ZSBicm93c2Vyc1xuICAgIGNvbnRleHQuc2V0TGluZURhc2goIFsgXSApO1xuICB9XG5cbn07XG5cbkNScC5kcmF3QXJyb3doZWFkcyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlZGdlLCBkcmF3T3ZlcmxheUluc3RlYWQgKXtcbiAgaWYoIGRyYXdPdmVybGF5SW5zdGVhZCApeyByZXR1cm47IH0gLy8gZG9uJ3QgZG8gYW55dGhpbmcgZm9yIG92ZXJsYXlzXG5cbiAgdmFyIHJzID0gZWRnZS5fcHJpdmF0ZS5yc2NyYXRjaDtcbiAgdmFyIGlzSGF5c3RhY2sgPSBycy5lZGdlVHlwZSA9PT0gJ2hheXN0YWNrJztcblxuICBpZiggIWlzSGF5c3RhY2sgKXtcbiAgICB0aGlzLmRyYXdBcnJvd2hlYWQoIGNvbnRleHQsIGVkZ2UsICdzb3VyY2UnLCBycy5hcnJvd1N0YXJ0WCwgcnMuYXJyb3dTdGFydFksIHJzLnNyY0Fycm93QW5nbGUgKTtcbiAgfVxuXG4gIHRoaXMuZHJhd0Fycm93aGVhZCggY29udGV4dCwgZWRnZSwgJ21pZC10YXJnZXQnLCBycy5taWRYLCBycy5taWRZLCBycy5taWR0Z3RBcnJvd0FuZ2xlICk7XG5cbiAgdGhpcy5kcmF3QXJyb3doZWFkKCBjb250ZXh0LCBlZGdlLCAnbWlkLXNvdXJjZScsIHJzLm1pZFgsIHJzLm1pZFksIHJzLm1pZHNyY0Fycm93QW5nbGUgKTtcblxuICBpZiggIWlzSGF5c3RhY2sgKXtcbiAgICB0aGlzLmRyYXdBcnJvd2hlYWQoIGNvbnRleHQsIGVkZ2UsICd0YXJnZXQnLCBycy5hcnJvd0VuZFgsIHJzLmFycm93RW5kWSwgcnMudGd0QXJyb3dBbmdsZSApO1xuICB9XG59O1xuXG5DUnAuZHJhd0Fycm93aGVhZCA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlZGdlLCBwcmVmaXgsIHgsIHksIGFuZ2xlICl7XG4gIGlmKCBpc05hTiggeCApIHx8IHggPT0gbnVsbCB8fCBpc05hTiggeSApIHx8IHkgPT0gbnVsbCB8fCBpc05hTiggYW5nbGUgKSB8fCBhbmdsZSA9PSBudWxsICl7IHJldHVybjsgfVxuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGFycm93U2hhcGUgPSBlZGdlLnBzdHlsZSggcHJlZml4ICsgJy1hcnJvdy1zaGFwZScgKS52YWx1ZTtcblxuICBpZiggYXJyb3dTaGFwZSA9PT0gJ25vbmUnICl7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGdjbyA9IGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uO1xuXG4gIHZhciBhcnJvd0NsZWFyRmlsbCA9IGVkZ2UucHN0eWxlKCBwcmVmaXggKyAnLWFycm93LWZpbGwnICkudmFsdWUgPT09ICdob2xsb3cnID8gJ2JvdGgnIDogJ2ZpbGxlZCc7XG4gIHZhciBhcnJvd0ZpbGwgPSBlZGdlLnBzdHlsZSggcHJlZml4ICsgJy1hcnJvdy1maWxsJyApLnZhbHVlO1xuICB2YXIgb3BhY2l0eSA9IGVkZ2UucHN0eWxlKCAnb3BhY2l0eScgKS52YWx1ZTtcblxuICBpZiggYXJyb3dTaGFwZSA9PT0gJ2hhbGYtdHJpYW5nbGUtb3ZlcnNob3QnICl7XG4gICAgYXJyb3dGaWxsID0gJ2hvbGxvdyc7XG4gICAgYXJyb3dDbGVhckZpbGwgPSAnaG9sbG93JztcbiAgfVxuXG4gIGlmKCBvcGFjaXR5ICE9PSAxIHx8IGFycm93RmlsbCA9PT0gJ2hvbGxvdycgKXsgLy8gdGhlbiBleHRyYSBjbGVhciBpcyBuZWVkZWRcbiAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdkZXN0aW5hdGlvbi1vdXQnO1xuXG4gICAgc2VsZi5maWxsU3R5bGUoIGNvbnRleHQsIDI1NSwgMjU1LCAyNTUsIDEgKTtcbiAgICBzZWxmLnN0cm9rZVN0eWxlKCBjb250ZXh0LCAyNTUsIDI1NSwgMjU1LCAxICk7XG5cbiAgICBzZWxmLmRyYXdBcnJvd1NoYXBlKCBlZGdlLCBwcmVmaXgsIGNvbnRleHQsXG4gICAgICBhcnJvd0NsZWFyRmlsbCwgZWRnZS5wc3R5bGUoICd3aWR0aCcgKS5wZlZhbHVlLCBlZGdlLnBzdHlsZSggcHJlZml4ICsgJy1hcnJvdy1zaGFwZScgKS52YWx1ZSxcbiAgICAgIHgsIHksIGFuZ2xlXG4gICAgKTtcblxuICAgIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gZ2NvO1xuICB9IC8vIG90aGVyd2lzZSwgdGhlIG9wYXF1ZSBhcnJvdyBjbGVhcnMgaXQgZm9yIGZyZWUgOilcblxuICB2YXIgY29sb3IgPSBlZGdlLnBzdHlsZSggcHJlZml4ICsgJy1hcnJvdy1jb2xvcicgKS52YWx1ZTtcbiAgc2VsZi5maWxsU3R5bGUoIGNvbnRleHQsIGNvbG9yWzBdLCBjb2xvclsxXSwgY29sb3JbMl0sIG9wYWNpdHkgKTtcbiAgc2VsZi5zdHJva2VTdHlsZSggY29udGV4dCwgY29sb3JbMF0sIGNvbG9yWzFdLCBjb2xvclsyXSwgb3BhY2l0eSApO1xuXG4gIHNlbGYuZHJhd0Fycm93U2hhcGUoIGVkZ2UsIHByZWZpeCwgY29udGV4dCxcbiAgICBhcnJvd0ZpbGwsIGVkZ2UucHN0eWxlKCAnd2lkdGgnICkucGZWYWx1ZSwgZWRnZS5wc3R5bGUoIHByZWZpeCArICctYXJyb3ctc2hhcGUnICkudmFsdWUsXG4gICAgeCwgeSwgYW5nbGVcbiAgKTtcbn07XG5cbkNScC5kcmF3QXJyb3dTaGFwZSA9IGZ1bmN0aW9uKCBlZGdlLCBhcnJvd1R5cGUsIGNvbnRleHQsIGZpbGwsIGVkZ2VXaWR0aCwgc2hhcGUsIHgsIHksIGFuZ2xlICl7XG4gIHZhciByID0gdGhpcztcbiAgdmFyIHVzZVBhdGhzID0gdGhpcy51c2VQYXRocygpO1xuICB2YXIgcnMgPSBlZGdlLl9wcml2YXRlLnJzY3JhdGNoO1xuICB2YXIgcGF0aENhY2hlSGl0ID0gZmFsc2U7XG4gIHZhciBwYXRoO1xuICB2YXIgY2FudmFzQ29udGV4dCA9IGNvbnRleHQ7XG4gIHZhciB0cmFuc2xhdGlvbiA9IHsgeDogeCwgeTogeSB9O1xuICB2YXIgc2l6ZSA9IHRoaXMuZ2V0QXJyb3dXaWR0aCggZWRnZVdpZHRoICk7XG4gIHZhciBzaGFwZUltcGwgPSByLmFycm93U2hhcGVzWyBzaGFwZSBdO1xuXG4gIGlmKCB1c2VQYXRocyApe1xuICAgIHZhciBwYXRoQ2FjaGVLZXkgPSBzaXplICsgJyQnICsgc2hhcGUgKyAnJCcgKyBhbmdsZSArICckJyArIHggKyAnJCcgKyB5O1xuICAgIHJzLmFycm93UGF0aENhY2hlS2V5ID0gcnMuYXJyb3dQYXRoQ2FjaGVLZXkgfHwge307XG4gICAgcnMuYXJyb3dQYXRoQ2FjaGUgPSBycy5hcnJvd1BhdGhDYWNoZSB8fCB7fTtcblxuICAgIHZhciBhbHJlYWR5Q2FjaGVkID0gcnMuYXJyb3dQYXRoQ2FjaGVLZXlbIGFycm93VHlwZSBdID09PSBwYXRoQ2FjaGVLZXk7XG4gICAgaWYoIGFscmVhZHlDYWNoZWQgKXtcbiAgICAgIHBhdGggPSBjb250ZXh0ID0gcnMuYXJyb3dQYXRoQ2FjaGVbIGFycm93VHlwZSBdO1xuICAgICAgcGF0aENhY2hlSGl0ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aCA9IGNvbnRleHQgPSBuZXcgUGF0aDJEKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICAgIHJzLmFycm93UGF0aENhY2hlS2V5WyBhcnJvd1R5cGUgXSA9IHBhdGhDYWNoZUtleTtcbiAgICAgIHJzLmFycm93UGF0aENhY2hlWyBhcnJvd1R5cGUgXSA9IHBhdGg7XG4gICAgfVxuICB9XG5cbiAgaWYoIGNvbnRleHQuYmVnaW5QYXRoICl7IGNvbnRleHQuYmVnaW5QYXRoKCk7IH1cblxuICBpZiggIXBhdGhDYWNoZUhpdCApe1xuICAgIHNoYXBlSW1wbC5kcmF3KCBjb250ZXh0LCBzaXplLCBhbmdsZSwgdHJhbnNsYXRpb24gKTtcbiAgfVxuXG4gIGlmKCAhc2hhcGVJbXBsLmxlYXZlUGF0aE9wZW4gJiYgY29udGV4dC5jbG9zZVBhdGggKXtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG5cbiAgY29udGV4dCA9IGNhbnZhc0NvbnRleHQ7XG5cbiAgaWYoIGZpbGwgPT09ICdmaWxsZWQnIHx8IGZpbGwgPT09ICdib3RoJyApe1xuICAgIGlmKCB1c2VQYXRocyApe1xuICAgICAgY29udGV4dC5maWxsKCBwYXRoICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmKCBmaWxsID09PSAnaG9sbG93JyB8fCBmaWxsID09PSAnYm90aCcgKXtcbiAgICBjb250ZXh0LmxpbmVXaWR0aCA9ICggc2hhcGVJbXBsLm1hdGNoRWRnZVdpZHRoID8gZWRnZVdpZHRoIDogMSApO1xuICAgIGNvbnRleHQubGluZUpvaW4gPSAnbWl0ZXInO1xuXG4gICAgaWYoIHVzZVBhdGhzICl7XG4gICAgICBjb250ZXh0LnN0cm9rZSggcGF0aCApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgIH1cblxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENScDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG1hdGggPSByZXF1aXJlKCAnLi4vLi4vLi4vbWF0aCcgKTtcblxudmFyIENScCA9IHt9O1xuXG5DUnAuZHJhd0VsZW1lbnQgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlLCBzaGlmdFRvT3JpZ2luV2l0aEJiLCBzaG93TGFiZWwgKXtcbiAgdmFyIHIgPSB0aGlzO1xuXG4gIGlmKCBlbGUuaXNOb2RlKCkgKXtcbiAgICByLmRyYXdOb2RlKCBjb250ZXh0LCBlbGUsIHNoaWZ0VG9PcmlnaW5XaXRoQmIsIHNob3dMYWJlbCApO1xuICB9IGVsc2Uge1xuICAgIHIuZHJhd0VkZ2UoIGNvbnRleHQsIGVsZSwgc2hpZnRUb09yaWdpbldpdGhCYiwgc2hvd0xhYmVsICk7XG4gIH1cbn07XG5cbkNScC5kcmF3Q2FjaGVkRWxlbWVudCA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGUsIHB4UmF0aW8sIGV4dGVudCApe1xuICB2YXIgciA9IHRoaXM7XG4gIHZhciBiYiA9IGVsZS5ib3VuZGluZ0JveCgpO1xuXG4gIGlmKCBiYi53ID09PSAwIHx8IGJiLmggPT09IDAgKXsgcmV0dXJuOyB9XG5cbiAgaWYoICFleHRlbnQgfHwgbWF0aC5ib3VuZGluZ0JveGVzSW50ZXJzZWN0KCBiYiwgZXh0ZW50ICkgKXtcbiAgICB2YXIgY2FjaGUgPSByLmRhdGEuZWxlVHhyQ2FjaGUuZ2V0RWxlbWVudCggZWxlLCBiYiwgcHhSYXRpbyApO1xuXG4gICAgaWYoIGNhY2hlICl7XG4gICAgICBjb250ZXh0LmRyYXdJbWFnZSggY2FjaGUudGV4dHVyZS5jYW52YXMsIGNhY2hlLngsIDAsIGNhY2hlLndpZHRoLCBjYWNoZS5oZWlnaHQsIGJiLngxLCBiYi55MSwgYmIudywgYmIuaCApO1xuICAgIH0gZWxzZSB7IC8vIGlmIHRoZSBlbGVtZW50IGlzIG5vdCBjYWNoZWFibGUsIHRoZW4gZHJhdyBkaXJlY3RseVxuICAgICAgci5kcmF3RWxlbWVudCggY29udGV4dCwgZWxlICk7XG4gICAgfVxuICB9XG59O1xuXG5DUnAuZHJhd0VsZW1lbnRzID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZXMgKXtcbiAgdmFyIHIgPSB0aGlzO1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKyApe1xuICAgIHZhciBlbGUgPSBlbGVzWyBpIF07XG5cbiAgICByLmRyYXdFbGVtZW50KCBjb250ZXh0LCBlbGUgKTtcbiAgfVxufTtcblxuQ1JwLmRyYXdDYWNoZWRFbGVtZW50cyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVzLCBweFJhdGlvLCBleHRlbnQgKXtcbiAgdmFyIHIgPSB0aGlzO1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKyApe1xuICAgIHZhciBlbGUgPSBlbGVzWyBpIF07XG5cbiAgICByLmRyYXdDYWNoZWRFbGVtZW50KCBjb250ZXh0LCBlbGUsIHB4UmF0aW8sIGV4dGVudCApO1xuICB9XG59O1xuXG5DUnAuZHJhd0NhY2hlZE5vZGVzID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZXMsIHB4UmF0aW8sIGV4dGVudCApe1xuICB2YXIgciA9IHRoaXM7XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGVsZSA9IGVsZXNbIGkgXTtcblxuICAgIGlmKCAhZWxlLmlzTm9kZSgpICl7IGNvbnRpbnVlOyB9XG5cbiAgICByLmRyYXdDYWNoZWRFbGVtZW50KCBjb250ZXh0LCBlbGUsIHB4UmF0aW8sIGV4dGVudCApO1xuICB9XG59O1xuXG5DUnAuZHJhd0xheWVyZWRFbGVtZW50cyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVzLCBweFJhdGlvLCBleHRlbnQgKXtcbiAgdmFyIHIgPSB0aGlzO1xuXG4gIHZhciBsYXllcnMgPSByLmRhdGEubHlyVHhyQ2FjaGUuZ2V0TGF5ZXJzKCBlbGVzLCBweFJhdGlvICk7XG5cbiAgaWYoIGxheWVycyApe1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbGF5ZXJzLmxlbmd0aDsgaSsrICl7XG4gICAgICB2YXIgbGF5ZXIgPSBsYXllcnNbaV07XG4gICAgICB2YXIgYmIgPSBsYXllci5iYjtcblxuICAgICAgaWYoIGJiLncgPT09IDAgfHwgYmIuaCA9PT0gMCApeyBjb250aW51ZTsgfVxuXG4gICAgICBjb250ZXh0LmRyYXdJbWFnZSggbGF5ZXIuY2FudmFzLCBiYi54MSwgYmIueTEsIGJiLncsIGJiLmggKTtcbiAgICB9XG4gIH0gZWxzZSB7IC8vIGZhbGwgYmFjayBvbiBwbGFpbiBjYWNoaW5nIGlmIG5vIGxheWVyc1xuICAgIHIuZHJhd0NhY2hlZEVsZW1lbnRzKCBjb250ZXh0LCBlbGVzLCBweFJhdGlvLCBleHRlbnQgKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDUnA7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc2JnbiA9IHJlcXVpcmUoICcuLi8uLi8uLi9zYmduJyApO1xuXG52YXIgQ1JwID0ge307XG5cbkNScC5zYWZlRHJhd0ltYWdlID0gZnVuY3Rpb24oIGNvbnRleHQsIGltZywgaXgsIGl5LCBpdywgaWgsIHgsIHksIHcsIGggKXtcbiAgdmFyIHIgPSB0aGlzO1xuXG4gIHRyeSB7XG4gICAgY29udGV4dC5kcmF3SW1hZ2UoIGltZywgaXgsIGl5LCBpdywgaWgsIHgsIHksIHcsIGggKTtcbiAgfSBjYXRjaCggZSApe1xuICAgIHIucmVkcmF3SGludCggJ2VsZXMnLCB0cnVlICk7XG4gICAgci5yZWRyYXdIaW50KCAnZHJhZycsIHRydWUgKTtcblxuICAgIHIuZHJhd2luZ0ltYWdlID0gdHJ1ZTtcblxuICAgIHIucmVkcmF3KCk7XG4gIH1cbn07XG5cbkNScC5kcmF3SW5zY3JpYmVkSW1hZ2UgPSBmdW5jdGlvbiggY29udGV4dCwgaW1nLCBub2RlICl7XG4gIHZhciByID0gdGhpcztcbiAgdmFyIG5vZGVYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xuICB2YXIgbm9kZVkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG4gIHZhciBmaXQgPSBub2RlLnBzdHlsZSggJ2JhY2tncm91bmQtZml0JyApLnZhbHVlO1xuICB2YXIgeFBvcyA9IG5vZGUucHN0eWxlKCAnYmFja2dyb3VuZC1wb3NpdGlvbi14JyApO1xuICB2YXIgeVBvcyA9IG5vZGUucHN0eWxlKCAnYmFja2dyb3VuZC1wb3NpdGlvbi15JyApO1xuICB2YXIgcmVwZWF0ID0gbm9kZS5wc3R5bGUoICdiYWNrZ3JvdW5kLXJlcGVhdCcgKS52YWx1ZTtcbiAgdmFyIG5vZGVXID0gbm9kZS53aWR0aCgpO1xuICB2YXIgbm9kZUggPSBub2RlLmhlaWdodCgpO1xuICB2YXIgcnMgPSBub2RlLl9wcml2YXRlLnJzY3JhdGNoO1xuICB2YXIgY2xpcCA9IG5vZGUucHN0eWxlKCAnYmFja2dyb3VuZC1jbGlwJyApLnZhbHVlO1xuICB2YXIgc2hvdWxkQ2xpcCA9IGNsaXAgPT09ICdub2RlJztcbiAgdmFyIGltZ09wYWNpdHkgPSBub2RlLnBzdHlsZSggJ2JhY2tncm91bmQtaW1hZ2Utb3BhY2l0eScgKS52YWx1ZTtcblxuICB2YXIgaW1nVyA9IGltZy53aWR0aCB8fCBpbWcuY2FjaGVkVztcbiAgdmFyIGltZ0ggPSBpbWcuaGVpZ2h0IHx8IGltZy5jYWNoZWRIO1xuXG4gIC8vIHdvcmthcm91bmQgZm9yIGJyb2tlbiBicm93c2VycyBsaWtlIGllXG4gIGlmKCBudWxsID09IGltZ1cgfHwgbnVsbCA9PSBpbWdIICl7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggaW1nICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuICAgIGltZ1cgPSBpbWcuY2FjaGVkVyA9IGltZy53aWR0aCB8fCBpbWcub2Zmc2V0V2lkdGg7XG4gICAgaW1nSCA9IGltZy5jYWNoZWRIID0gaW1nLmhlaWdodCB8fCBpbWcub2Zmc2V0SGVpZ2h0O1xuXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCggaW1nICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgfVxuXG4gIHZhciB3ID0gaW1nVztcbiAgdmFyIGggPSBpbWdIO1xuXG4gIHZhciBiZ1cgPSBub2RlLnBzdHlsZSggJ2JhY2tncm91bmQtd2lkdGgnICk7XG4gIGlmKCBiZ1cudmFsdWUgIT09ICdhdXRvJyApe1xuICAgIGlmKCBiZ1cudW5pdHMgPT09ICclJyApe1xuICAgICAgdyA9IGJnVy52YWx1ZSAvIDEwMCAqIG5vZGVXO1xuICAgIH0gZWxzZSB7XG4gICAgICB3ID0gYmdXLnBmVmFsdWU7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJnSCA9IG5vZGUucHN0eWxlKCAnYmFja2dyb3VuZC1oZWlnaHQnICk7XG4gIGlmKCBiZ0gudmFsdWUgIT09ICdhdXRvJyApe1xuICAgIGlmKCBiZ0gudW5pdHMgPT09ICclJyApe1xuICAgICAgaCA9IGJnSC52YWx1ZSAvIDEwMCAqIG5vZGVIO1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gYmdILnBmVmFsdWU7XG4gICAgfVxuICB9XG5cbiAgaWYoIHcgPT09IDAgfHwgaCA9PT0gMCApe1xuICAgIHJldHVybjsgLy8gbm8gcG9pbnQgaW4gZHJhd2luZyBlbXB0eSBpbWFnZSAoYW5kIGNocm9tZSBpcyBicm9rZW4gaW4gdGhpcyBjYXNlKVxuICB9XG5cbiAgaWYoIGZpdCA9PT0gJ2NvbnRhaW4nICl7XG4gICAgdmFyIHNjYWxlID0gTWF0aC5taW4oIG5vZGVXIC8gdywgbm9kZUggLyBoICk7XG5cbiAgICB3ICo9IHNjYWxlO1xuICAgIGggKj0gc2NhbGU7XG5cbiAgfSBlbHNlIGlmKCBmaXQgPT09ICdjb3ZlcicgKXtcbiAgICB2YXIgc2NhbGUgPSBNYXRoLm1heCggbm9kZVcgLyB3LCBub2RlSCAvIGggKTtcblxuICAgIHcgKj0gc2NhbGU7XG4gICAgaCAqPSBzY2FsZTtcbiAgfVxuXG4gIHZhciB4ID0gKG5vZGVYIC0gbm9kZVcgLyAyKTsgLy8gbGVmdFxuICBpZiggeFBvcy51bml0cyA9PT0gJyUnICl7XG4gICAgeCArPSAobm9kZVcgLSB3KSAqIHhQb3MudmFsdWUgLyAxMDA7XG4gIH0gZWxzZSB7XG4gICAgeCArPSB4UG9zLnBmVmFsdWU7XG4gIH1cblxuICB2YXIgeSA9IChub2RlWSAtIG5vZGVIIC8gMik7IC8vIHRvcFxuICBpZiggeVBvcy51bml0cyA9PT0gJyUnICl7XG4gICAgeSArPSAobm9kZUggLSBoKSAqIHlQb3MudmFsdWUgLyAxMDA7XG4gIH0gZWxzZSB7XG4gICAgeSArPSB5UG9zLnBmVmFsdWU7XG4gIH1cblxuICBpZiggcnMucGF0aENhY2hlICl7XG4gICAgeCAtPSBub2RlWDtcbiAgICB5IC09IG5vZGVZO1xuXG4gICAgbm9kZVggPSAwO1xuICAgIG5vZGVZID0gMDtcbiAgfVxuXG4gIHZhciBnQWxwaGEgPSBjb250ZXh0Lmdsb2JhbEFscGhhO1xuXG4gIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBpbWdPcGFjaXR5O1xuXG4gIGlmKCByZXBlYXQgPT09ICduby1yZXBlYXQnICl7XG5cbiAgICBpZiggc2hvdWxkQ2xpcCApe1xuICAgICAgY29udGV4dC5zYXZlKCk7XG5cbiAgICAgIGlmKCBycy5wYXRoQ2FjaGUgKXtcbiAgICAgICAgY29udGV4dC5jbGlwKCBycy5wYXRoQ2FjaGUgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmKHNiZ24uc2JnblNoYXBlc1t0aGlzLmdldE5vZGVTaGFwZShub2RlKV0pe1xuICAgICAgICAgICAgci5ub2RlU2hhcGVzW3RoaXMuZ2V0Tm9kZVNoYXBlKG5vZGUpXS5kcmF3KFxuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgbm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHIubm9kZVNoYXBlc1tyLmdldE5vZGVTaGFwZShub2RlKV0uZHJhdyhcbiAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgICAgbm9kZVgsIG5vZGVZLFxuICAgICAgICAgICAgICBub2RlVywgbm9kZUgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5jbGlwKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgci5zYWZlRHJhd0ltYWdlKCBjb250ZXh0LCBpbWcsIDAsIDAsIGltZ1csIGltZ0gsIHgsIHksIHcsIGggKTtcblxuICAgIGlmKCBzaG91bGRDbGlwICl7XG4gICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhdHRlcm4gPSBjb250ZXh0LmNyZWF0ZVBhdHRlcm4oIGltZywgcmVwZWF0ICk7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSBwYXR0ZXJuO1xuXG4gICAgaWYoc2Jnbi5zYmduU2hhcGVzW3RoaXMuZ2V0Tm9kZVNoYXBlKG5vZGUpXSl7XG4gICAgICAgIHIubm9kZVNoYXBlc1t0aGlzLmdldE5vZGVTaGFwZShub2RlKV0uZHJhdyhcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICBub2RlKTtcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgICAgci5ub2RlU2hhcGVzW3IuZ2V0Tm9kZVNoYXBlKG5vZGUpXS5kcmF3KFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgbm9kZVgsIG5vZGVZLFxuICAgICAgICAgIG5vZGVXLCBub2RlSCk7XG4gICAgfVxuXG4gICAgY29udGV4dC50cmFuc2xhdGUoIHgsIHkgKTtcbiAgICBjb250ZXh0LmZpbGwoKTtcbiAgICBjb250ZXh0LnRyYW5zbGF0ZSggLXgsIC15ICk7XG4gIH1cblxuICBjb250ZXh0Lmdsb2JhbEFscGhhID0gZ0FscGhhO1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENScDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vLi4vLi4vdXRpbCcgKTtcbnZhciBtYXRoID0gcmVxdWlyZSggJy4uLy4uLy4uL21hdGgnICk7XG5cbnZhciBDUnAgPSB7fTtcblxuQ1JwLmVsZVRleHRCaWdnZXJUaGFuTWluID0gZnVuY3Rpb24oIGVsZSwgc2NhbGUgKXtcbiAgaWYoICFzY2FsZSApe1xuICAgIHZhciB6b29tID0gZWxlLmN5KCkuem9vbSgpO1xuICAgIHZhciBweFJhdGlvID0gdGhpcy5nZXRQaXhlbFJhdGlvKCk7XG4gICAgdmFyIGx2bCA9IE1hdGguY2VpbCggbWF0aC5sb2cyKCB6b29tICogcHhSYXRpbyApICk7IC8vIHRoZSBlZmZlY3RpdmUgdGV4dHVyZSBsZXZlbFxuXG4gICAgc2NhbGUgPSBNYXRoLnBvdyggMiwgbHZsICk7XG4gIH1cblxuICB2YXIgY29tcHV0ZWRTaXplID0gZWxlLnBzdHlsZSggJ2ZvbnQtc2l6ZScgKS5wZlZhbHVlICogc2NhbGU7XG4gIHZhciBtaW5TaXplID0gZWxlLnBzdHlsZSggJ21pbi16b29tZWQtZm9udC1zaXplJyApLnBmVmFsdWU7XG5cbiAgaWYoIGNvbXB1dGVkU2l6ZSA8IG1pblNpemUgKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkNScC5kcmF3RWxlbWVudFRleHQgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlLCBmb3JjZSApe1xuICB2YXIgciA9IHRoaXM7XG5cbiAgaWYoIGZvcmNlID09PSB1bmRlZmluZWQgKXtcbiAgICBpZiggIXIuZWxlVGV4dEJpZ2dlclRoYW5NaW4oIGVsZSApICl7IHJldHVybjsgfVxuICB9IGVsc2Uge1xuICAgIGlmKCAhZm9yY2UgKXsgcmV0dXJuOyB9XG4gIH1cblxuICBpZiggZWxlLmlzTm9kZSgpICl7XG4gICAgdmFyIGxhYmVsID0gZWxlLnBzdHlsZSggJ2xhYmVsJyApO1xuXG4gICAgaWYoICFsYWJlbCB8fCAhbGFiZWwudmFsdWUgKXsgcmV0dXJuOyB9XG5cbiAgICB2YXIgdGV4dEhhbGlnbiA9IGVsZS5wc3R5bGUoICd0ZXh0LWhhbGlnbicgKS5zdHJWYWx1ZTtcbiAgICB2YXIgdGV4dFZhbGlnbiA9IGVsZS5wc3R5bGUoICd0ZXh0LXZhbGlnbicgKS5zdHJWYWx1ZTtcblxuICAgIHN3aXRjaCggdGV4dEhhbGlnbiApe1xuICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgIGNvbnRleHQudGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgY29udGV4dC50ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OiAvLyBlLmcuIGNlbnRlclxuICAgICAgICBjb250ZXh0LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgIH1cblxuICAgIGNvbnRleHQudGV4dEJhc2VsaW5lID0gJ2JvdHRvbSc7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxhYmVsID0gZWxlLnBzdHlsZSggJ2xhYmVsJyApO1xuICAgIHZhciBzcmNMYWJlbCA9IGVsZS5wc3R5bGUoICdzb3VyY2UtbGFiZWwnICk7XG4gICAgdmFyIHRndExhYmVsID0gZWxlLnBzdHlsZSggJ3RhcmdldC1sYWJlbCcgKTtcblxuICAgIGlmKFxuICAgICAgKCAhbGFiZWwgfHwgIWxhYmVsLnZhbHVlIClcbiAgICAgICYmICggIXNyY0xhYmVsIHx8ICFzcmNMYWJlbC52YWx1ZSApXG4gICAgICAmJiAoICF0Z3RMYWJlbCB8fCAhdGd0TGFiZWwudmFsdWUgKVxuICAgICl7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29udGV4dC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICBjb250ZXh0LnRleHRCYXNlbGluZSA9ICdib3R0b20nO1xuICB9XG5cblxuICByLmRyYXdUZXh0KCBjb250ZXh0LCBlbGUgKTtcblxuICBpZiggZWxlLmlzRWRnZSgpICl7XG4gICAgci5kcmF3VGV4dCggY29udGV4dCwgZWxlLCAnc291cmNlJyApO1xuXG4gICAgci5kcmF3VGV4dCggY29udGV4dCwgZWxlLCAndGFyZ2V0JyApO1xuICB9XG59O1xuXG5DUnAuZHJhd05vZGVUZXh0ID0gQ1JwLmRyYXdFZGdlVGV4dCA9IENScC5kcmF3RWxlbWVudFRleHQ7XG5cbkNScC5nZXRGb250Q2FjaGUgPSBmdW5jdGlvbiggY29udGV4dCApe1xuICB2YXIgY2FjaGU7XG5cbiAgdGhpcy5mb250Q2FjaGVzID0gdGhpcy5mb250Q2FjaGVzIHx8IFtdO1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5mb250Q2FjaGVzLmxlbmd0aDsgaSsrICl7XG4gICAgY2FjaGUgPSB0aGlzLmZvbnRDYWNoZXNbIGkgXTtcblxuICAgIGlmKCBjYWNoZS5jb250ZXh0ID09PSBjb250ZXh0ICl7XG4gICAgICByZXR1cm4gY2FjaGU7XG4gICAgfVxuICB9XG5cbiAgY2FjaGUgPSB7XG4gICAgY29udGV4dDogY29udGV4dFxuICB9O1xuICB0aGlzLmZvbnRDYWNoZXMucHVzaCggY2FjaGUgKTtcblxuICByZXR1cm4gY2FjaGU7XG59O1xuXG4vLyBzZXQgdXAgY2FudmFzIGNvbnRleHQgd2l0aCBmb250XG4vLyByZXR1cm5zIHRyYW5zZm9ybWVkIHRleHQgc3RyaW5nXG5DUnAuc2V0dXBUZXh0U3R5bGUgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlICl7XG4gIC8vIEZvbnQgc3R5bGVcbiAgdmFyIHBhcmVudE9wYWNpdHkgPSBlbGUuZWZmZWN0aXZlT3BhY2l0eSgpO1xuICB2YXIgbGFiZWxTdHlsZSA9IGVsZS5wc3R5bGUoICdmb250LXN0eWxlJyApLnN0clZhbHVlO1xuICB2YXIgbGFiZWxTaXplID0gZWxlLnBzdHlsZSggJ2ZvbnQtc2l6ZScgKS5wZlZhbHVlICsgJ3B4JztcbiAgdmFyIGxhYmVsRmFtaWx5ID0gZWxlLnBzdHlsZSggJ2ZvbnQtZmFtaWx5JyApLnN0clZhbHVlO1xuICB2YXIgbGFiZWxXZWlnaHQgPSBlbGUucHN0eWxlKCAnZm9udC13ZWlnaHQnICkuc3RyVmFsdWU7XG4gIHZhciBvcGFjaXR5ID0gZWxlLnBzdHlsZSggJ3RleHQtb3BhY2l0eScgKS52YWx1ZSAqIGVsZS5wc3R5bGUoICdvcGFjaXR5JyApLnZhbHVlICogcGFyZW50T3BhY2l0eTtcbiAgdmFyIG91dGxpbmVPcGFjaXR5ID0gZWxlLnBzdHlsZSggJ3RleHQtb3V0bGluZS1vcGFjaXR5JyApLnZhbHVlICogb3BhY2l0eTtcbiAgdmFyIGNvbG9yID0gZWxlLnBzdHlsZSggJ2NvbG9yJyApLnZhbHVlO1xuICB2YXIgb3V0bGluZUNvbG9yID0gZWxlLnBzdHlsZSggJ3RleHQtb3V0bGluZS1jb2xvcicgKS52YWx1ZTtcbiAgdmFyIHNoYWRvd0JsdXIgPSBlbGUucHN0eWxlKCAndGV4dC1zaGFkb3ctYmx1cicgKS5wZlZhbHVlO1xuICB2YXIgc2hhZG93T3BhY2l0eSA9IGVsZS5wc3R5bGUoICd0ZXh0LXNoYWRvdy1vcGFjaXR5JyApLnZhbHVlO1xuICB2YXIgc2hhZG93Q29sb3IgPSBlbGUucHN0eWxlKCAndGV4dC1zaGFkb3ctY29sb3InICkudmFsdWU7XG4gIHZhciBzaGFkb3dPZmZzZXRYID0gZWxlLnBzdHlsZSggJ3RleHQtc2hhZG93LW9mZnNldC14JyApLnBmVmFsdWU7XG4gIHZhciBzaGFkb3dPZmZzZXRZID0gZWxlLnBzdHlsZSggJ3RleHQtc2hhZG93LW9mZnNldC15JyApLnBmVmFsdWU7XG5cbiAgdmFyIGZvbnRDYWNoZUtleSA9IGVsZS5fcHJpdmF0ZS5mb250S2V5O1xuICB2YXIgY2FjaGUgPSB0aGlzLmdldEZvbnRDYWNoZSggY29udGV4dCApO1xuXG4gIGlmKCBjYWNoZS5rZXkgIT09IGZvbnRDYWNoZUtleSApe1xuICAgIGNvbnRleHQuZm9udCA9IGxhYmVsU3R5bGUgKyAnICcgKyBsYWJlbFdlaWdodCArICcgJyArIGxhYmVsU2l6ZSArICcgJyArIGxhYmVsRmFtaWx5O1xuXG4gICAgY2FjaGUua2V5ID0gZm9udENhY2hlS2V5O1xuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIHRleHQgZHJhdyBwb3NpdGlvbiBiYXNlZCBvbiB0ZXh0IGFsaWdubWVudFxuXG4gIC8vIHNvIHRleHQgb3V0bGluZXMgYXJlbid0IGphZ2dlZFxuICBjb250ZXh0LmxpbmVKb2luID0gJ3JvdW5kJztcblxuICB0aGlzLmZpbGxTdHlsZSggY29udGV4dCwgY29sb3JbIDAgXSwgY29sb3JbIDEgXSwgY29sb3JbIDIgXSwgb3BhY2l0eSApO1xuXG4gIHRoaXMuc3Ryb2tlU3R5bGUoIGNvbnRleHQsIG91dGxpbmVDb2xvclsgMCBdLCBvdXRsaW5lQ29sb3JbIDEgXSwgb3V0bGluZUNvbG9yWyAyIF0sIG91dGxpbmVPcGFjaXR5ICk7XG5cbiAgdGhpcy5zaGFkb3dTdHlsZSggY29udGV4dCwgc2hhZG93Q29sb3IsIHNoYWRvd09wYWNpdHksIHNoYWRvd0JsdXIsIHNoYWRvd09mZnNldFgsIHNoYWRvd09mZnNldFkgKTtcbn07XG5cbmZ1bmN0aW9uIHJvdW5kUmVjdCggY3R4LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMgKXtcbiAgdmFyIHJhZGl1cyA9IHJhZGl1cyB8fCA1O1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5tb3ZlVG8oIHggKyByYWRpdXMsIHkgKTtcbiAgY3R4LmxpbmVUbyggeCArIHdpZHRoIC0gcmFkaXVzLCB5ICk7XG4gIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKCB4ICsgd2lkdGgsIHksIHggKyB3aWR0aCwgeSArIHJhZGl1cyApO1xuICBjdHgubGluZVRvKCB4ICsgd2lkdGgsIHkgKyBoZWlnaHQgLSByYWRpdXMgKTtcbiAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oIHggKyB3aWR0aCwgeSArIGhlaWdodCwgeCArIHdpZHRoIC0gcmFkaXVzLCB5ICsgaGVpZ2h0ICk7XG4gIGN0eC5saW5lVG8oIHggKyByYWRpdXMsIHkgKyBoZWlnaHQgKTtcbiAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oIHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSByYWRpdXMgKTtcbiAgY3R4LmxpbmVUbyggeCwgeSArIHJhZGl1cyApO1xuICBjdHgucXVhZHJhdGljQ3VydmVUbyggeCwgeSwgeCArIHJhZGl1cywgeSApO1xuICBjdHguY2xvc2VQYXRoKCk7XG4gIGN0eC5maWxsKCk7XG59XG5cbi8vIERyYXcgdGV4dFxuQ1JwLmRyYXdUZXh0ID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZSwgcHJlZml4ICl7XG4gIHZhciBfcCA9IGVsZS5fcHJpdmF0ZTtcbiAgdmFyIHJzY3JhdGNoID0gX3AucnNjcmF0Y2g7XG4gIHZhciBwYXJlbnRPcGFjaXR5ID0gZWxlLmVmZmVjdGl2ZU9wYWNpdHkoKTtcbiAgaWYoIHBhcmVudE9wYWNpdHkgPT09IDAgfHwgZWxlLnBzdHlsZSggJ3RleHQtb3BhY2l0eScgKS52YWx1ZSA9PT0gMCApe1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0ZXh0WCA9IHV0aWwuZ2V0UHJlZml4ZWRQcm9wZXJ0eSggcnNjcmF0Y2gsICdsYWJlbFgnLCBwcmVmaXggKTtcbiAgdmFyIHRleHRZID0gdXRpbC5nZXRQcmVmaXhlZFByb3BlcnR5KCByc2NyYXRjaCwgJ2xhYmVsWScsIHByZWZpeCApO1xuICB2YXIgdGV4dCA9IHRoaXMuZ2V0TGFiZWxUZXh0KCBlbGUsIHByZWZpeCApO1xuXG4gIGlmKCB0ZXh0ICE9IG51bGwgJiYgdGV4dCAhPT0gJycgJiYgIWlzTmFOKCB0ZXh0WCApICYmICFpc05hTiggdGV4dFkgKSApe1xuICAgIHRoaXMuc2V0dXBUZXh0U3R5bGUoIGNvbnRleHQsIGVsZSApO1xuXG4gICAgdmFyIHBkYXNoID0gcHJlZml4ID8gcHJlZml4ICsgJy0nIDogJyc7XG4gICAgdmFyIHRleHRXID0gdXRpbC5nZXRQcmVmaXhlZFByb3BlcnR5KCByc2NyYXRjaCwgJ2xhYmVsV2lkdGgnLCBwcmVmaXggKTtcbiAgICB2YXIgdGV4dEggPSB1dGlsLmdldFByZWZpeGVkUHJvcGVydHkoIHJzY3JhdGNoLCAnbGFiZWxIZWlnaHQnLCBwcmVmaXggKTtcbiAgICB2YXIgdGV4dEFuZ2xlID0gdXRpbC5nZXRQcmVmaXhlZFByb3BlcnR5KCByc2NyYXRjaCwgJ2xhYmVsQW5nbGUnLCBwcmVmaXggKTtcbiAgICB2YXIgbWFyZ2luWCA9IGVsZS5wc3R5bGUoIHBkYXNoICsgJ3RleHQtbWFyZ2luLXgnICkucGZWYWx1ZTtcbiAgICB2YXIgbWFyZ2luWSA9IGVsZS5wc3R5bGUoIHBkYXNoICsgJ3RleHQtbWFyZ2luLXknICkucGZWYWx1ZTtcblxuICAgIHZhciBpc0VkZ2UgPSBlbGUuaXNFZGdlKCk7XG4gICAgdmFyIGlzTm9kZSA9IGVsZS5pc05vZGUoKTtcblxuICAgIHZhciBoYWxpZ24gPSBlbGUucHN0eWxlKCAndGV4dC1oYWxpZ24nICkudmFsdWU7XG4gICAgdmFyIHZhbGlnbiA9IGVsZS5wc3R5bGUoICd0ZXh0LXZhbGlnbicgKS52YWx1ZTtcblxuICAgIGlmKCBpc0VkZ2UgKXtcbiAgICAgIGhhbGlnbiA9ICdjZW50ZXInO1xuICAgICAgdmFsaWduID0gJ2NlbnRlcic7XG4gICAgfVxuXG4gICAgdGV4dFggKz0gbWFyZ2luWDtcbiAgICB0ZXh0WSArPSBtYXJnaW5ZO1xuXG4gICAgdmFyIHJvdGF0aW9uID0gZWxlLnBzdHlsZSggJ3RleHQtcm90YXRpb24nICk7XG4gICAgdmFyIHRoZXRhO1xuXG4gICAgaWYoIHJvdGF0aW9uLnN0clZhbHVlID09PSAnYXV0b3JvdGF0ZScgKXtcbiAgICAgIHRoZXRhID0gaXNFZGdlID8gdGV4dEFuZ2xlIDogMDtcbiAgICB9IGVsc2UgaWYoIHJvdGF0aW9uLnN0clZhbHVlID09PSAnbm9uZScgKXtcbiAgICAgIHRoZXRhID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhldGEgPSByb3RhdGlvbi5wZlZhbHVlO1xuICAgIH1cblxuICAgIGlmKCB0aGV0YSAhPT0gMCApe1xuICAgICAgdmFyIG9yZ1RleHRYID0gdGV4dFg7XG4gICAgICB2YXIgb3JnVGV4dFkgPSB0ZXh0WTtcblxuICAgICAgY29udGV4dC50cmFuc2xhdGUoIG9yZ1RleHRYLCBvcmdUZXh0WSApO1xuICAgICAgY29udGV4dC5yb3RhdGUoIHRoZXRhICk7XG5cbiAgICAgIHRleHRYID0gMDtcbiAgICAgIHRleHRZID0gMDtcbiAgICB9XG5cbiAgICBpZiggaXNOb2RlICl7XG4gICAgICB2YXIgcExlZnQgPSBlbGUucHN0eWxlKCAncGFkZGluZy1sZWZ0JyApLnBmVmFsdWU7XG4gICAgICB2YXIgcFJpZ2h0ID0gZWxlLnBzdHlsZSggJ3BhZGRpbmctcmlnaHQnICkucGZWYWx1ZTtcbiAgICAgIHZhciBwVG9wID0gZWxlLnBzdHlsZSggJ3BhZGRpbmctdG9wJyApLnBmVmFsdWU7XG4gICAgICB2YXIgcEJvdHRvbSA9IGVsZS5wc3R5bGUoICdwYWRkaW5nLWJvdHRvbScgKS5wZlZhbHVlO1xuXG4gICAgICB0ZXh0WCArPSBwTGVmdCAvIDI7XG4gICAgICB0ZXh0WCAtPSBwUmlnaHQgLyAyO1xuXG4gICAgICB0ZXh0WSArPSBwVG9wIC8gMjtcbiAgICAgIHRleHRZIC09IHBCb3R0b20gLyAyO1xuICAgIH1cblxuICAgIHN3aXRjaCggdmFsaWduICl7XG4gICAgICBjYXNlICd0b3AnOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgIHRleHRZICs9IHRleHRIIC8gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICB0ZXh0WSArPSB0ZXh0SDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIGJhY2tncm91bmRPcGFjaXR5ID0gZWxlLnBzdHlsZSggJ3RleHQtYmFja2dyb3VuZC1vcGFjaXR5JyApLnZhbHVlO1xuICAgIHZhciBib3JkZXJPcGFjaXR5ID0gZWxlLnBzdHlsZSggJ3RleHQtYm9yZGVyLW9wYWNpdHknICkudmFsdWU7XG4gICAgdmFyIHRleHRCb3JkZXJXaWR0aCA9IGVsZS5wc3R5bGUoICd0ZXh0LWJvcmRlci13aWR0aCcgKS5wZlZhbHVlO1xuICAgIHZhciBiYWNrZ3JvdW5kUGFkZGluZyA9IGVsZS5wc3R5bGUoICd0ZXh0LWJhY2tncm91bmQtcGFkZGluZycgKS5wZlZhbHVlO1xuXG4gICAgaWYoIGJhY2tncm91bmRPcGFjaXR5ID4gMCB8fCAoIHRleHRCb3JkZXJXaWR0aCA+IDAgJiYgYm9yZGVyT3BhY2l0eSA+IDAgKSApe1xuICAgICAgdmFyIGJnWCA9IHRleHRYIC0gYmFja2dyb3VuZFBhZGRpbmc7XG5cbiAgICAgIHN3aXRjaCggaGFsaWduICl7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgIGJnWCAtPSB0ZXh0VztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICBiZ1ggLT0gdGV4dFcgLyAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHZhciBiZ1kgPSB0ZXh0WSAtIHRleHRIIC0gYmFja2dyb3VuZFBhZGRpbmc7XG4gICAgICB2YXIgYmdXID0gdGV4dFcgKyAyKmJhY2tncm91bmRQYWRkaW5nO1xuICAgICAgdmFyIGJnSCA9IHRleHRIICsgMipiYWNrZ3JvdW5kUGFkZGluZztcblxuICAgICAgaWYoIGJhY2tncm91bmRPcGFjaXR5ID4gMCApe1xuICAgICAgICB2YXIgdGV4dEZpbGwgPSBjb250ZXh0LmZpbGxTdHlsZTtcbiAgICAgICAgdmFyIHRleHRCYWNrZ3JvdW5kQ29sb3IgPSBlbGUucHN0eWxlKCAndGV4dC1iYWNrZ3JvdW5kLWNvbG9yJyApLnZhbHVlO1xuXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoJyArIHRleHRCYWNrZ3JvdW5kQ29sb3JbIDAgXSArICcsJyArIHRleHRCYWNrZ3JvdW5kQ29sb3JbIDEgXSArICcsJyArIHRleHRCYWNrZ3JvdW5kQ29sb3JbIDIgXSArICcsJyArIGJhY2tncm91bmRPcGFjaXR5ICogcGFyZW50T3BhY2l0eSArICcpJztcbiAgICAgICAgdmFyIHN0eWxlU2hhcGUgPSBlbGUucHN0eWxlKCAndGV4dC1iYWNrZ3JvdW5kLXNoYXBlJyApLnN0clZhbHVlO1xuICAgICAgICBpZiggc3R5bGVTaGFwZSA9PSAncm91bmRyZWN0YW5nbGUnICl7XG4gICAgICAgICAgcm91bmRSZWN0KCBjb250ZXh0LCBiZ1gsIGJnWSwgYmdXLCBiZ0gsIDIgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KCBiZ1gsIGJnWSwgYmdXLCBiZ0ggKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRleHRGaWxsO1xuICAgICAgfVxuXG4gICAgICBpZiggdGV4dEJvcmRlcldpZHRoID4gMCAmJiBib3JkZXJPcGFjaXR5ID4gMCApe1xuICAgICAgICB2YXIgdGV4dFN0cm9rZSA9IGNvbnRleHQuc3Ryb2tlU3R5bGU7XG4gICAgICAgIHZhciB0ZXh0TGluZVdpZHRoID0gY29udGV4dC5saW5lV2lkdGg7XG4gICAgICAgIHZhciB0ZXh0Qm9yZGVyQ29sb3IgPSBlbGUucHN0eWxlKCAndGV4dC1ib3JkZXItY29sb3InICkudmFsdWU7XG4gICAgICAgIHZhciB0ZXh0Qm9yZGVyU3R5bGUgPSBlbGUucHN0eWxlKCAndGV4dC1ib3JkZXItc3R5bGUnICkudmFsdWU7XG5cbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKCcgKyB0ZXh0Qm9yZGVyQ29sb3JbIDAgXSArICcsJyArIHRleHRCb3JkZXJDb2xvclsgMSBdICsgJywnICsgdGV4dEJvcmRlckNvbG9yWyAyIF0gKyAnLCcgKyBib3JkZXJPcGFjaXR5ICogcGFyZW50T3BhY2l0eSArICcpJztcbiAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSB0ZXh0Qm9yZGVyV2lkdGg7XG5cbiAgICAgICAgaWYoIGNvbnRleHQuc2V0TGluZURhc2ggKXsgLy8gZm9yIHZlcnkgb3V0b2ZkYXRlIGJyb3dzZXJzXG4gICAgICAgICAgc3dpdGNoKCB0ZXh0Qm9yZGVyU3R5bGUgKXtcbiAgICAgICAgICAgIGNhc2UgJ2RvdHRlZCc6XG4gICAgICAgICAgICAgIGNvbnRleHQuc2V0TGluZURhc2goIFsgMSwgMSBdICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGFzaGVkJzpcbiAgICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lRGFzaCggWyA0LCAyIF0gKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkb3VibGUnOlxuICAgICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHRleHRCb3JkZXJXaWR0aCAvIDQ7IC8vIDUwJSByZXNlcnZlZCBmb3Igd2hpdGUgYmV0d2VlbiB0aGUgdHdvIGJvcmRlcnNcbiAgICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lRGFzaCggW10gKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzb2xpZCc6XG4gICAgICAgICAgICAgIGNvbnRleHQuc2V0TGluZURhc2goIFtdICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlUmVjdCggYmdYLCBiZ1ksIGJnVywgYmdIICk7XG5cbiAgICAgICAgaWYoIHRleHRCb3JkZXJTdHlsZSA9PT0gJ2RvdWJsZScgKXtcbiAgICAgICAgICB2YXIgd2hpdGVXaWR0aCA9IHRleHRCb3JkZXJXaWR0aCAvIDI7XG5cbiAgICAgICAgICBjb250ZXh0LnN0cm9rZVJlY3QoIGJnWCArIHdoaXRlV2lkdGgsIGJnWSArIHdoaXRlV2lkdGgsIGJnVyAtIHdoaXRlV2lkdGggKiAyLCBiZ0ggLSB3aGl0ZVdpZHRoICogMiApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIGNvbnRleHQuc2V0TGluZURhc2ggKXsgLy8gZm9yIHZlcnkgb3V0b2ZkYXRlIGJyb3dzZXJzXG4gICAgICAgICAgY29udGV4dC5zZXRMaW5lRGFzaCggW10gKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHRleHRMaW5lV2lkdGg7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0ZXh0U3Ryb2tlO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgdmFyIGxpbmVXaWR0aCA9IDIgKiBlbGUucHN0eWxlKCAndGV4dC1vdXRsaW5lLXdpZHRoJyApLnBmVmFsdWU7IC8vICoyIGIvYyB0aGUgc3Ryb2tlIGlzIGRyYXduIGNlbnRyZWQgb24gdGhlIG1pZGRsZVxuXG4gICAgaWYoIGxpbmVXaWR0aCA+IDAgKXtcbiAgICAgIGNvbnRleHQubGluZVdpZHRoID0gbGluZVdpZHRoO1xuICAgIH1cblxuICAgIGlmKCBlbGUucHN0eWxlKCAndGV4dC13cmFwJyApLnZhbHVlID09PSAnd3JhcCcgKXtcbiAgICAgIHZhciBsaW5lcyA9IHJzY3JhdGNoLmxhYmVsV3JhcENhY2hlZExpbmVzO1xuICAgICAgdmFyIGxpbmVIZWlnaHQgPSB0ZXh0SCAvIGxpbmVzLmxlbmd0aDtcblxuICAgICAgc3dpdGNoKCB2YWxpZ24gKXtcbiAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICB0ZXh0WSAtPSAoIGxpbmVzLmxlbmd0aCAtIDEgKSAqIGxpbmVIZWlnaHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgdGV4dFkgLT0gKCBsaW5lcy5sZW5ndGggLSAxICkgKiBsaW5lSGVpZ2h0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBmb3IoIHZhciBsID0gMDsgbCA8IGxpbmVzLmxlbmd0aDsgbCsrICl7XG4gICAgICAgIGlmKCBsaW5lV2lkdGggPiAwICl7XG4gICAgICAgICAgY29udGV4dC5zdHJva2VUZXh0KCBsaW5lc1sgbCBdLCB0ZXh0WCwgdGV4dFkgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQoIGxpbmVzWyBsIF0sIHRleHRYLCB0ZXh0WSApO1xuXG4gICAgICAgIHRleHRZICs9IGxpbmVIZWlnaHQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgaWYoIGxpbmVXaWR0aCA+IDAgKXtcbiAgICAgICAgY29udGV4dC5zdHJva2VUZXh0KCB0ZXh0LCB0ZXh0WCwgdGV4dFkgKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5maWxsVGV4dCggdGV4dCwgdGV4dFgsIHRleHRZICk7XG4gICAgfVxuXG4gICAgaWYoIHRoZXRhICE9PSAwICl7XG4gICAgICBjb250ZXh0LnJvdGF0ZSggLXRoZXRhICk7XG4gICAgICBjb250ZXh0LnRyYW5zbGF0ZSggLW9yZ1RleHRYLCAtb3JnVGV4dFkgKTtcbiAgICB9XG5cbiAgICB0aGlzLnNoYWRvd1N0eWxlKCBjb250ZXh0LCAndHJhbnNwYXJlbnQnLCAwICk7IC8vIHJlc2V0IGZvciBuZXh0IGd1eVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENScDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzID0gcmVxdWlyZSggJy4uLy4uLy4uL2lzJyApO1xudmFyIHNiZ24gPSByZXF1aXJlKCAnLi4vLi4vLi4vc2JnbicgKTtcblxudmFyIENScCA9IHt9O1xuXG5DUnAuZHJhd05vZGUgPSBmdW5jdGlvbiggY29udGV4dCwgbm9kZSwgc2hpZnRUb09yaWdpbldpdGhCYiwgZHJhd0xhYmVsICl7XG4gIHZhciByID0gdGhpcztcbiAgdmFyIG5vZGVXaWR0aCwgbm9kZUhlaWdodDtcbiAgdmFyIHJzID0gbm9kZS5fcHJpdmF0ZS5yc2NyYXRjaDtcbiAgdmFyIF9wID0gbm9kZS5fcHJpdmF0ZTtcbiAgdmFyIHBvcyA9IHBvcyB8fCBfcC5wb3NpdGlvbjtcblxuICBpZiggIWlzLm51bWJlciggcG9zLnggKSB8fCAhaXMubnVtYmVyKCBwb3MueSApICl7XG4gICAgcmV0dXJuOyAvLyBjYW4ndCBkcmF3IG5vZGUgd2l0aCB1bmRlZmluZWQgcG9zaXRpb25cbiAgfVxuXG4gIGlmKCAhbm9kZS52aXNpYmxlKCkgKXsgcmV0dXJuOyB9XG5cbiAgdmFyIHBhcmVudE9wYWNpdHkgPSBub2RlLmVmZmVjdGl2ZU9wYWNpdHkoKTtcblxuICB2YXIgdXNlUGF0aHMgPSB0aGlzLnVzZVBhdGhzKCk7XG4gIHZhciBwYXRoO1xuICB2YXIgcGF0aENhY2hlSGl0ID0gZmFsc2U7XG5cbiAgbm9kZVdpZHRoID0gbm9kZS53aWR0aCgpICsgbm9kZS5wc3R5bGUoICdwYWRkaW5nLWxlZnQnICkucGZWYWx1ZSArIG5vZGUucHN0eWxlKCAncGFkZGluZy1yaWdodCcgKS5wZlZhbHVlO1xuICBub2RlSGVpZ2h0ID0gbm9kZS5oZWlnaHQoKSArIG5vZGUucHN0eWxlKCAncGFkZGluZy10b3AnICkucGZWYWx1ZSArIG5vZGUucHN0eWxlKCAncGFkZGluZy1ib3R0b20nICkucGZWYWx1ZTtcblxuICBjb250ZXh0LmxpbmVXaWR0aCA9IG5vZGUucHN0eWxlKCAnYm9yZGVyLXdpZHRoJyApLnBmVmFsdWU7XG5cbiAgLy9cbiAgLy8gc2V0dXAgc2hpZnRcblxuICB2YXIgYmI7XG4gIGlmKCBzaGlmdFRvT3JpZ2luV2l0aEJiICl7XG4gICAgYmIgPSBzaGlmdFRvT3JpZ2luV2l0aEJiO1xuXG4gICAgY29udGV4dC50cmFuc2xhdGUoIC1iYi54MSwgLWJiLnkxICk7XG4gIH1cblxuICAvL1xuICAvLyBsb2FkIGJnIGltYWdlXG5cbiAgdmFyIGJnSW1nUHJvcCA9IG5vZGUucHN0eWxlKCAnYmFja2dyb3VuZC1pbWFnZScgKTtcbiAgdmFyIHVybCA9IGJnSW1nUHJvcC52YWx1ZVsyXSB8fCBiZ0ltZ1Byb3AudmFsdWVbMV07XG4gIHZhciBpbWFnZTtcblxuICBpZiggdXJsICE9PSB1bmRlZmluZWQgKXtcblxuICAgIHZhciBiZ0ltZ0Nyb3NzT3JpZ2luID0gbm9kZS5wc3R5bGUoICdiYWNrZ3JvdW5kLWltYWdlLWNyb3Nzb3JpZ2luJyApO1xuXG4gICAgLy8gZ2V0IGltYWdlLCBhbmQgaWYgbm90IGxvYWRlZCB0aGVuIGFzayB0byByZWRyYXcgd2hlbiBsYXRlciBsb2FkZWRcbiAgICBpbWFnZSA9IHRoaXMuZ2V0Q2FjaGVkSW1hZ2UoIHVybCwgYmdJbWdDcm9zc09yaWdpbiwgZnVuY3Rpb24oKXtcbiAgICAgIG5vZGUudHJpZ2dlcignYmFja2dyb3VuZCcpO1xuXG4gICAgICByLnJlZHJhd0hpbnQoICdlbGVzJywgdHJ1ZSApO1xuICAgICAgci5yZWRyYXdIaW50KCAnZHJhZycsIHRydWUgKTtcblxuICAgICAgci5kcmF3aW5nSW1hZ2UgPSB0cnVlO1xuXG4gICAgICByLnJlZHJhdygpO1xuICAgIH0gKTtcblxuICAgIHZhciBwcmV2QmdpbmcgPSBfcC5iYWNrZ3JvdW5kaW5nO1xuICAgIF9wLmJhY2tncm91bmRpbmcgPSAhaW1hZ2UuY29tcGxldGU7XG5cbiAgICBpZiggcHJldkJnaW5nICE9PSBfcC5iYWNrZ3JvdW5kaW5nICl7IC8vIHVwZGF0ZSBzdHlsZSBiL2MgOmJhY2tncm91bmRpbmcgc3RhdGUgY2hhbmdlZFxuICAgICAgbm9kZS51cGRhdGVTdHlsZSggZmFsc2UgKTtcbiAgICB9XG4gIH1cblxuICAvL1xuICAvLyBzZXR1cCBzdHlsZXNcblxuICB2YXIgYmdDb2xvciA9IG5vZGUucHN0eWxlKCAnYmFja2dyb3VuZC1jb2xvcicgKS52YWx1ZTtcbiAgdmFyIGJvcmRlckNvbG9yID0gbm9kZS5wc3R5bGUoICdib3JkZXItY29sb3InICkudmFsdWU7XG4gIHZhciBib3JkZXJTdHlsZSA9IG5vZGUucHN0eWxlKCAnYm9yZGVyLXN0eWxlJyApLnZhbHVlO1xuXG4gIHRoaXMuZmlsbFN0eWxlKCBjb250ZXh0LCBiZ0NvbG9yWzBdLCBiZ0NvbG9yWzFdLCBiZ0NvbG9yWzJdLCBub2RlLnBzdHlsZSggJ2JhY2tncm91bmQtb3BhY2l0eScgKS52YWx1ZSAqIHBhcmVudE9wYWNpdHkgKTtcblxuICB0aGlzLnN0cm9rZVN0eWxlKCBjb250ZXh0LCBib3JkZXJDb2xvclswXSwgYm9yZGVyQ29sb3JbMV0sIGJvcmRlckNvbG9yWzJdLCBub2RlLnBzdHlsZSggJ2JvcmRlci1vcGFjaXR5JyApLnZhbHVlICogcGFyZW50T3BhY2l0eSApO1xuXG4gIHZhciBzaGFkb3dCbHVyID0gbm9kZS5wc3R5bGUoICdzaGFkb3ctYmx1cicgKS5wZlZhbHVlO1xuICB2YXIgc2hhZG93T3BhY2l0eSA9IG5vZGUucHN0eWxlKCAnc2hhZG93LW9wYWNpdHknICkudmFsdWU7XG4gIHZhciBzaGFkb3dDb2xvciA9IG5vZGUucHN0eWxlKCAnc2hhZG93LWNvbG9yJyApLnZhbHVlO1xuICB2YXIgc2hhZG93T2Zmc2V0WCA9IG5vZGUucHN0eWxlKCAnc2hhZG93LW9mZnNldC14JyApLnBmVmFsdWU7XG4gIHZhciBzaGFkb3dPZmZzZXRZID0gbm9kZS5wc3R5bGUoICdzaGFkb3ctb2Zmc2V0LXknICkucGZWYWx1ZTtcblxuICB0aGlzLnNoYWRvd1N0eWxlKCBjb250ZXh0LCBzaGFkb3dDb2xvciwgc2hhZG93T3BhY2l0eSwgc2hhZG93Qmx1ciwgc2hhZG93T2Zmc2V0WCwgc2hhZG93T2Zmc2V0WSApO1xuXG4gIGNvbnRleHQubGluZUpvaW4gPSAnbWl0ZXInOyAvLyBzbyBib3JkZXJzIGFyZSBzcXVhcmUgd2l0aCB0aGUgbm9kZSBzaGFwZVxuXG4gIGlmKCBjb250ZXh0LnNldExpbmVEYXNoICl7IC8vIGZvciB2ZXJ5IG91dG9mZGF0ZSBicm93c2Vyc1xuICAgIHN3aXRjaCggYm9yZGVyU3R5bGUgKXtcbiAgICAgIGNhc2UgJ2RvdHRlZCc6XG4gICAgICAgIGNvbnRleHQuc2V0TGluZURhc2goIFsgMSwgMSBdICk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdkYXNoZWQnOlxuICAgICAgICBjb250ZXh0LnNldExpbmVEYXNoKCBbIDQsIDIgXSApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc29saWQnOlxuICAgICAgY2FzZSAnZG91YmxlJzpcbiAgICAgICAgY29udGV4dC5zZXRMaW5lRGFzaCggWyBdICk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG5cbiAgLy9cbiAgLy8gZHJhdyBzaGFwZVxuXG4gIHZhciBzdHlsZVNoYXBlID0gbm9kZS5wc3R5bGUoJ3NoYXBlJykuc3RyVmFsdWU7XG4gIHZhciBzaGFwZVB0cyA9IG5vZGUucHN0eWxlKCdzaGFwZS1wb2x5Z29uLXBvaW50cycpLnBmVmFsdWU7XG5cbiAgaWYoIHVzZVBhdGhzICl7XG4gICAgdmFyIHBhdGhDYWNoZUtleSA9IHN0eWxlU2hhcGUgKyAnJCcgKyBub2RlV2lkdGggKyAnJCcgKyBub2RlSGVpZ2h0ICsgKCBzdHlsZVNoYXBlID09PSAncG9seWdvbicgPyAnJCcgKyBzaGFwZVB0cy5qb2luKCckJykgOiAnJyApO1xuXG4gICAgY29udGV4dC50cmFuc2xhdGUoIHBvcy54LCBwb3MueSApO1xuXG4gICAgaWYoIHJzLnBhdGhDYWNoZUtleSA9PT0gcGF0aENhY2hlS2V5ICl7XG4gICAgICBwYXRoID0gcnMucGF0aENhY2hlO1xuICAgICAgcGF0aENhY2hlSGl0ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aCA9IG5ldyBQYXRoMkQoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgICAgcnMucGF0aENhY2hlS2V5ID0gcGF0aENhY2hlS2V5O1xuICAgICAgcnMucGF0aENhY2hlID0gcGF0aDtcbiAgICB9XG4gIH1cblxuICBpZiggIXBhdGhDYWNoZUhpdCApe1xuXG4gICAgdmFyIG5wb3MgPSBwb3M7XG5cbiAgICBpZiggdXNlUGF0aHMgKXtcbiAgICAgIG5wb3MgPSB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDBcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYoc2Jnbi5zYmduU2hhcGVzW3RoaXMuZ2V0Tm9kZVNoYXBlKG5vZGUpXSl7XG4gICAgICAgIHIubm9kZVNoYXBlc1t0aGlzLmdldE5vZGVTaGFwZShub2RlKV0uZHJhdyhcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICBub2RlKTtcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgICAgci5ub2RlU2hhcGVzW3IuZ2V0Tm9kZVNoYXBlKG5vZGUpXS5kcmF3KFxuICAgICAgICAgICggcGF0aCB8fCBjb250ZXh0ICksXG4gICAgICAgICAgbnBvcy54LFxuICAgICAgICAgIG5wb3MueSxcbiAgICAgICAgICBub2RlV2lkdGgsXG4gICAgICAgICAgbm9kZUhlaWdodCk7XG4gICAgfVxuICB9XG5cbiAgaWYoIHVzZVBhdGhzICl7XG4gICAgY29udGV4dC5maWxsKCBwYXRoICk7XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dC5maWxsKCk7XG4gIH1cblxuICB0aGlzLnNoYWRvd1N0eWxlKCBjb250ZXh0LCAndHJhbnNwYXJlbnQnLCAwICk7IC8vIHJlc2V0IGZvciBuZXh0IGd1eVxuXG4gIC8vXG4gIC8vIGJnIGltYWdlXG5cbiAgaWYoIHVybCAhPT0gdW5kZWZpbmVkICl7XG4gICAgaWYoIGltYWdlLmNvbXBsZXRlICl7XG4gICAgICB0aGlzLmRyYXdJbnNjcmliZWRJbWFnZSggY29udGV4dCwgaW1hZ2UsIG5vZGUgKTtcbiAgICB9XG4gIH1cblxuICAvL1xuICAvLyBwaWVcblxuICB2YXIgZGFya25lc3MgPSBub2RlLnBzdHlsZSggJ2JhY2tncm91bmQtYmxhY2tlbicgKS52YWx1ZTtcbiAgdmFyIGJvcmRlcldpZHRoID0gbm9kZS5wc3R5bGUoICdib3JkZXItd2lkdGgnICkucGZWYWx1ZTtcblxuICBpZiggdGhpcy5oYXNQaWUoIG5vZGUgKSApe1xuICAgIHRoaXMuZHJhd1BpZSggY29udGV4dCwgbm9kZSwgcGFyZW50T3BhY2l0eSApO1xuXG4gICAgLy8gcmVkcmF3IHBhdGggZm9yIGJsYWNrZW4gYW5kIGJvcmRlclxuICAgIGlmKCBkYXJrbmVzcyAhPT0gMCB8fCBib3JkZXJXaWR0aCAhPT0gMCApe1xuXG4gICAgICBpZiggIXVzZVBhdGhzICl7XG4gICAgICAgIGlmKHNiZ24uc2JnblNoYXBlc1t0aGlzLmdldE5vZGVTaGFwZShub2RlKV0pe1xuICAgICAgICAgICAgci5ub2RlU2hhcGVzW3RoaXMuZ2V0Tm9kZVNoYXBlKG5vZGUpXS5kcmF3KFxuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgbm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHIubm9kZVNoYXBlc1tyLmdldE5vZGVTaGFwZShub2RlKV0uZHJhdyhcbiAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgICAgcG9zLngsXG4gICAgICAgICAgICAgIHBvcy55LFxuICAgICAgICAgICAgICBub2RlV2lkdGgsXG4gICAgICAgICAgICAgIG5vZGVIZWlnaHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy9cbiAgLy8gZGFya2VuL2xpZ2h0ZW5cblxuICBpZiggZGFya25lc3MgPiAwICl7XG4gICAgdGhpcy5maWxsU3R5bGUoIGNvbnRleHQsIDAsIDAsIDAsIGRhcmtuZXNzICk7XG5cbiAgICBpZiggdXNlUGF0aHMgKXtcbiAgICAgIGNvbnRleHQuZmlsbCggcGF0aCApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICB9XG5cbiAgfSBlbHNlIGlmKCBkYXJrbmVzcyA8IDAgKXtcbiAgICB0aGlzLmZpbGxTdHlsZSggY29udGV4dCwgMjU1LCAyNTUsIDI1NSwgLWRhcmtuZXNzICk7XG5cbiAgICBpZiggdXNlUGF0aHMgKXtcbiAgICAgIGNvbnRleHQuZmlsbCggcGF0aCApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICB9XG4gIH1cblxuICAvL1xuICAvLyBib3JkZXJcblxuICBpZiggYm9yZGVyV2lkdGggPiAwICl7XG5cbiAgICBpZiggdXNlUGF0aHMgKXtcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCBwYXRoICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgfVxuXG4gICAgaWYoIGJvcmRlclN0eWxlID09PSAnZG91YmxlJyApe1xuICAgICAgY29udGV4dC5saW5lV2lkdGggPSBub2RlLnBzdHlsZSggJ2JvcmRlci13aWR0aCcgKS5wZlZhbHVlIC8gMztcblxuICAgICAgdmFyIGdjbyA9IGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uO1xuICAgICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnZGVzdGluYXRpb24tb3V0JztcblxuICAgICAgaWYoIHVzZVBhdGhzICl7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCBwYXRoICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IGdjbztcbiAgICB9XG5cbiAgfVxuXG4gIGlmKCB1c2VQYXRocyApe1xuICAgIGNvbnRleHQudHJhbnNsYXRlKCAtcG9zLngsIC1wb3MueSApO1xuICB9XG5cbiAgLy8gcmVzZXQgaW4gY2FzZSB3ZSBjaGFuZ2VkIHRoZSBib3JkZXIgc3R5bGVcbiAgaWYoIGNvbnRleHQuc2V0TGluZURhc2ggKXsgLy8gZm9yIHZlcnkgb3V0b2ZkYXRlIGJyb3dzZXJzXG4gICAgY29udGV4dC5zZXRMaW5lRGFzaCggWyBdICk7XG4gIH1cblxuICAvL1xuICAvLyBsYWJlbFxuXG4gIHIuZHJhd0VsZW1lbnRUZXh0KCBjb250ZXh0LCBub2RlLCBkcmF3TGFiZWwgKTtcblxuICAvL1xuICAvLyBvdmVybGF5XG5cbiAgdmFyIG92ZXJsYXlQYWRkaW5nID0gbm9kZS5wc3R5bGUoICdvdmVybGF5LXBhZGRpbmcnICkucGZWYWx1ZTtcbiAgdmFyIG92ZXJsYXlPcGFjaXR5ID0gbm9kZS5wc3R5bGUoICdvdmVybGF5LW9wYWNpdHknICkudmFsdWU7XG4gIHZhciBvdmVybGF5Q29sb3IgPSBub2RlLnBzdHlsZSggJ292ZXJsYXktY29sb3InICkudmFsdWU7XG5cbiAgaWYoIG92ZXJsYXlPcGFjaXR5ID4gMCApe1xuICAgIHRoaXMuZmlsbFN0eWxlKCBjb250ZXh0LCBvdmVybGF5Q29sb3JbMF0sIG92ZXJsYXlDb2xvclsxXSwgb3ZlcmxheUNvbG9yWzJdLCBvdmVybGF5T3BhY2l0eSApO1xuXG4gICAgci5ub2RlU2hhcGVzWyAncm91bmRyZWN0YW5nbGUnIF0uZHJhdyhcbiAgICAgIGNvbnRleHQsXG4gICAgICBub2RlLl9wcml2YXRlLnBvc2l0aW9uLngsXG4gICAgICBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnksXG4gICAgICBub2RlV2lkdGggKyBvdmVybGF5UGFkZGluZyAqIDIsXG4gICAgICBub2RlSGVpZ2h0ICsgb3ZlcmxheVBhZGRpbmcgKiAyXG4gICAgKTtcblxuICAgIGNvbnRleHQuZmlsbCgpO1xuICB9XG5cbiAgLy9cbiAgLy8gY2xlYW4gdXAgc2hpZnRcblxuICBpZiggc2hpZnRUb09yaWdpbldpdGhCYiApe1xuICAgIGNvbnRleHQudHJhbnNsYXRlKCBiYi54MSwgYmIueTEgKTtcbiAgfVxuXG59O1xuXG4vLyBkb2VzIHRoZSBub2RlIGhhdmUgYXQgbGVhc3Qgb25lIHBpZSBwaWVjZT9cbkNScC5oYXNQaWUgPSBmdW5jdGlvbiggbm9kZSApe1xuICBub2RlID0gbm9kZVswXTsgLy8gZW5zdXJlIGVsZSByZWZcblxuICByZXR1cm4gbm9kZS5fcHJpdmF0ZS5oYXNQaWU7XG59O1xuXG5DUnAuZHJhd1BpZSA9IGZ1bmN0aW9uKCBjb250ZXh0LCBub2RlLCBub2RlT3BhY2l0eSwgcG9zICl7XG4gIG5vZGUgPSBub2RlWzBdOyAvLyBlbnN1cmUgZWxlIHJlZlxuXG4gIHZhciBfcCA9IG5vZGUuX3ByaXZhdGU7XG4gIHZhciBjeVN0eWxlID0gbm9kZS5jeSgpLnN0eWxlKCk7XG4gIHZhciBwaWVTaXplID0gbm9kZS5wc3R5bGUoICdwaWUtc2l6ZScgKTtcbiAgdmFyIG5vZGVXID0gbm9kZS53aWR0aCgpO1xuICB2YXIgbm9kZUggPSBub2RlLmhlaWdodCgpO1xuICB2YXIgcG9zID0gcG9zIHx8IF9wLnBvc2l0aW9uO1xuICB2YXIgeCA9IHBvcy54O1xuICB2YXIgeSA9IHBvcy55O1xuICB2YXIgcmFkaXVzID0gTWF0aC5taW4oIG5vZGVXLCBub2RlSCApIC8gMjsgLy8gbXVzdCBmaXQgaW4gbm9kZVxuICB2YXIgbGFzdFBlcmNlbnQgPSAwOyAvLyB3aGF0ICUgdG8gY29udGludWUgZHJhd2luZyBwaWUgc2xpY2VzIGZyb20gb24gWzAsIDFdXG4gIHZhciB1c2VQYXRocyA9IHRoaXMudXNlUGF0aHMoKTtcblxuICBpZiggdXNlUGF0aHMgKXtcbiAgICB4ID0gMDtcbiAgICB5ID0gMDtcbiAgfVxuXG4gIGlmKCBwaWVTaXplLnVuaXRzID09PSAnJScgKXtcbiAgICByYWRpdXMgPSByYWRpdXMgKiBwaWVTaXplLnZhbHVlIC8gMTAwO1xuICB9IGVsc2UgaWYoIHBpZVNpemUucGZWYWx1ZSAhPT0gdW5kZWZpbmVkICl7XG4gICAgcmFkaXVzID0gcGllU2l6ZS5wZlZhbHVlIC8gMjtcbiAgfVxuXG4gIGZvciggdmFyIGkgPSAxOyBpIDw9IGN5U3R5bGUucGllQmFja2dyb3VuZE47IGkrKyApeyAvLyAxLi5OXG4gICAgdmFyIHNpemUgPSBub2RlLnBzdHlsZSggJ3BpZS0nICsgaSArICctYmFja2dyb3VuZC1zaXplJyApLnZhbHVlO1xuICAgIHZhciBjb2xvciA9IG5vZGUucHN0eWxlKCAncGllLScgKyBpICsgJy1iYWNrZ3JvdW5kLWNvbG9yJyApLnZhbHVlO1xuICAgIHZhciBvcGFjaXR5ID0gbm9kZS5wc3R5bGUoICdwaWUtJyArIGkgKyAnLWJhY2tncm91bmQtb3BhY2l0eScgKS52YWx1ZSAqIG5vZGVPcGFjaXR5O1xuICAgIHZhciBwZXJjZW50ID0gc2l6ZSAvIDEwMDsgLy8gbWFwIGludGVnZXIgcmFuZ2UgWzAsIDEwMF0gdG8gWzAsIDFdXG5cbiAgICAvLyBwZXJjZW50IGNhbid0IHB1c2ggYmV5b25kIDFcbiAgICBpZiggcGVyY2VudCArIGxhc3RQZXJjZW50ID4gMSApe1xuICAgICAgcGVyY2VudCA9IDEgLSBsYXN0UGVyY2VudDtcbiAgICB9XG5cbiAgICB2YXIgYW5nbGVTdGFydCA9IDEuNSAqIE1hdGguUEkgKyAyICogTWF0aC5QSSAqIGxhc3RQZXJjZW50OyAvLyBzdGFydCBhdCAxMiBvJ2Nsb2NrIGFuZCBnbyBjbG9ja3dpc2VcbiAgICB2YXIgYW5nbGVEZWx0YSA9IDIgKiBNYXRoLlBJICogcGVyY2VudDtcbiAgICB2YXIgYW5nbGVFbmQgPSBhbmdsZVN0YXJ0ICsgYW5nbGVEZWx0YTtcblxuICAgIC8vIGlnbm9yZSBpZlxuICAgIC8vIC0gemVybyBzaXplXG4gICAgLy8gLSB3ZSdyZSBhbHJlYWR5IGJleW9uZCB0aGUgZnVsbCBjaXJjbGVcbiAgICAvLyAtIGFkZGluZyB0aGUgY3VycmVudCBzbGljZSB3b3VsZCBnbyBiZXlvbmQgdGhlIGZ1bGwgY2lyY2xlXG4gICAgaWYoIHNpemUgPT09IDAgfHwgbGFzdFBlcmNlbnQgPj0gMSB8fCBsYXN0UGVyY2VudCArIHBlcmNlbnQgPiAxICl7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQubW92ZVRvKCB4LCB5ICk7XG4gICAgY29udGV4dC5hcmMoIHgsIHksIHJhZGl1cywgYW5nbGVTdGFydCwgYW5nbGVFbmQgKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgdGhpcy5maWxsU3R5bGUoIGNvbnRleHQsIGNvbG9yWzBdLCBjb2xvclsxXSwgY29sb3JbMl0sIG9wYWNpdHkgKTtcblxuICAgIGNvbnRleHQuZmlsbCgpO1xuXG4gICAgbGFzdFBlcmNlbnQgKz0gcGVyY2VudDtcbiAgfVxuXG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQ1JwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ1JwID0ge307XG5cbnZhciB1dGlsID0gcmVxdWlyZSggJy4uLy4uLy4uL3V0aWwnICk7XG5cbnZhciBtb3Rpb25CbHVyRGVsYXkgPSAxMDA7XG5cbi8vIHZhciBpc0ZpcmVmb3ggPSB0eXBlb2YgSW5zdGFsbFRyaWdnZXIgIT09ICd1bmRlZmluZWQnO1xuXG5DUnAuZ2V0UGl4ZWxSYXRpbyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBjb250ZXh0ID0gdGhpcy5kYXRhLmNvbnRleHRzWzBdO1xuXG4gIGlmKCB0aGlzLmZvcmNlZFBpeGVsUmF0aW8gIT0gbnVsbCApe1xuICAgIHJldHVybiB0aGlzLmZvcmNlZFBpeGVsUmF0aW87XG4gIH1cblxuICB2YXIgYmFja2luZ1N0b3JlID0gY29udGV4dC5iYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8XG4gICAgY29udGV4dC53ZWJraXRCYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8XG4gICAgY29udGV4dC5tb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8XG4gICAgY29udGV4dC5tc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHxcbiAgICBjb250ZXh0Lm9CYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8XG4gICAgY29udGV4dC5iYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8IDE7XG5cbiAgcmV0dXJuICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSAvIGJhY2tpbmdTdG9yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxufTtcblxuQ1JwLnBhaW50Q2FjaGUgPSBmdW5jdGlvbiggY29udGV4dCApe1xuICB2YXIgY2FjaGVzID0gdGhpcy5wYWludENhY2hlcyA9IHRoaXMucGFpbnRDYWNoZXMgfHwgW107XG4gIHZhciBuZWVkVG9DcmVhdGVDYWNoZSA9IHRydWU7XG4gIHZhciBjYWNoZTtcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IGNhY2hlcy5sZW5ndGg7IGkrKyApe1xuICAgIGNhY2hlID0gY2FjaGVzWyBpIF07XG5cbiAgICBpZiggY2FjaGUuY29udGV4dCA9PT0gY29udGV4dCApe1xuICAgICAgbmVlZFRvQ3JlYXRlQ2FjaGUgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmKCBuZWVkVG9DcmVhdGVDYWNoZSApe1xuICAgIGNhY2hlID0ge1xuICAgICAgY29udGV4dDogY29udGV4dFxuICAgIH07XG4gICAgY2FjaGVzLnB1c2goIGNhY2hlICk7XG4gIH1cblxuICByZXR1cm4gY2FjaGU7XG59O1xuXG5DUnAuZmlsbFN0eWxlID0gZnVuY3Rpb24oIGNvbnRleHQsIHIsIGcsIGIsIGEgKXtcbiAgY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgnICsgciArICcsJyArIGcgKyAnLCcgKyBiICsgJywnICsgYSArICcpJztcblxuICAvLyB0dXJuIG9mZiBmb3Igbm93LCBzZWVtcyBjb250ZXh0IGRvZXMgaXRzIG93biBjYWNoaW5nXG5cbiAgLy8gdmFyIGNhY2hlID0gdGhpcy5wYWludENhY2hlKGNvbnRleHQpO1xuXG4gIC8vIHZhciBmaWxsU3R5bGUgPSAncmdiYSgnICsgciArICcsJyArIGcgKyAnLCcgKyBiICsgJywnICsgYSArICcpJztcblxuICAvLyBpZiggY2FjaGUuZmlsbFN0eWxlICE9PSBmaWxsU3R5bGUgKXtcbiAgLy8gICBjb250ZXh0LmZpbGxTdHlsZSA9IGNhY2hlLmZpbGxTdHlsZSA9IGZpbGxTdHlsZTtcbiAgLy8gfVxufTtcblxuQ1JwLnN0cm9rZVN0eWxlID0gZnVuY3Rpb24oIGNvbnRleHQsIHIsIGcsIGIsIGEgKXtcbiAgY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKCcgKyByICsgJywnICsgZyArICcsJyArIGIgKyAnLCcgKyBhICsgJyknO1xuXG4gIC8vIHR1cm4gb2ZmIGZvciBub3csIHNlZW1zIGNvbnRleHQgZG9lcyBpdHMgb3duIGNhY2hpbmdcblxuICAvLyB2YXIgY2FjaGUgPSB0aGlzLnBhaW50Q2FjaGUoY29udGV4dCk7XG5cbiAgLy8gdmFyIHN0cm9rZVN0eWxlID0gJ3JnYmEoJyArIHIgKyAnLCcgKyBnICsgJywnICsgYiArICcsJyArIGEgKyAnKSc7XG5cbiAgLy8gaWYoIGNhY2hlLnN0cm9rZVN0eWxlICE9PSBzdHJva2VTdHlsZSApe1xuICAvLyAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBjYWNoZS5zdHJva2VTdHlsZSA9IHN0cm9rZVN0eWxlO1xuICAvLyB9XG59O1xuXG5DUnAuc2hhZG93U3R5bGUgPSBmdW5jdGlvbiggY29udGV4dCwgY29sb3IsIG9wYWNpdHksIGJsdXIsIG9mZnNldFgsIG9mZnNldFkgKXtcbiAgdmFyIHpvb20gPSB0aGlzLmN5Lnpvb20oKTtcblxuICAvLyB2YXIgY2FjaGUgPSB0aGlzLnBhaW50Q2FjaGUoIGNvbnRleHQgKTtcbiAgLy9cbiAgLy8gLy8gZG9uJ3QgbWFrZSBleHBlbnNpdmUgY2hhbmdlcyB0byB0aGUgc2hhZG93IHN0eWxlIGlmIGl0J3Mgbm90IHVzZWRcbiAgLy8gaWYoIGNhY2hlLnNoYWRvd09wYWNpdHkgPT09IDAgJiYgb3BhY2l0eSA9PT0gMCApe1xuICAvLyAgIHJldHVybjtcbiAgLy8gfVxuICAvL1xuICAvLyBjYWNoZS5zaGFkb3dPcGFjaXR5ID0gb3BhY2l0eTtcblxuICBpZiggb3BhY2l0eSA+IDAgKXtcbiAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSBibHVyICogem9vbTtcbiAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gJ3JnYmEoJyArIGNvbG9yWzBdICsgJywnICsgY29sb3JbMV0gKyAnLCcgKyBjb2xvclsyXSArICcsJyArIG9wYWNpdHkgKyAnKSc7XG4gICAgY29udGV4dC5zaGFkb3dPZmZzZXRYID0gb2Zmc2V0WCAqIHpvb207XG4gICAgY29udGV4dC5zaGFkb3dPZmZzZXRZID0gb2Zmc2V0WSAqIHpvb207XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dC5zaGFkb3dCbHVyID0gMDtcbiAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gJ3RyYW5zcGFyZW50JztcbiAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSAwO1xuICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IDA7XG4gIH1cbn07XG5cbi8vIFJlc2l6ZSBjYW52YXNcbkNScC5tYXRjaENhbnZhc1NpemUgPSBmdW5jdGlvbiggY29udGFpbmVyICl7XG4gIHZhciByID0gdGhpcztcbiAgdmFyIGRhdGEgPSByLmRhdGE7XG4gIHZhciB3aWR0aCA9IGNvbnRhaW5lci5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG4gIHZhciBwaXhlbFJhdGlvID0gci5nZXRQaXhlbFJhdGlvKCk7XG4gIHZhciBtYlB4UmF0aW8gPSByLm1vdGlvbkJsdXJQeFJhdGlvO1xuXG4gIGlmKFxuICAgIGNvbnRhaW5lciA9PT0gci5kYXRhLmJ1ZmZlckNhbnZhc2VzWyByLk1PVElPTkJMVVJfQlVGRkVSX05PREUgXSB8fFxuICAgIGNvbnRhaW5lciA9PT0gci5kYXRhLmJ1ZmZlckNhbnZhc2VzWyByLk1PVElPTkJMVVJfQlVGRkVSX0RSQUcgXVxuICApe1xuICAgIHBpeGVsUmF0aW8gPSBtYlB4UmF0aW87XG4gIH1cblxuICB2YXIgY2FudmFzV2lkdGggPSB3aWR0aCAqIHBpeGVsUmF0aW87XG4gIHZhciBjYW52YXNIZWlnaHQgPSBoZWlnaHQgKiBwaXhlbFJhdGlvO1xuICB2YXIgY2FudmFzO1xuXG4gIGlmKCBjYW52YXNXaWR0aCA9PT0gci5jYW52YXNXaWR0aCAmJiBjYW52YXNIZWlnaHQgPT09IHIuY2FudmFzSGVpZ2h0ICl7XG4gICAgcmV0dXJuOyAvLyBzYXZlIGN5Y2xlcyBpZiBzYW1lXG4gIH1cblxuICByLmZvbnRDYWNoZXMgPSBudWxsOyAvLyByZXNpemluZyByZXNldHMgdGhlIHN0eWxlXG5cbiAgdmFyIGNhbnZhc0NvbnRhaW5lciA9IGRhdGEuY2FudmFzQ29udGFpbmVyO1xuICBjYW52YXNDb250YWluZXIuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XG4gIGNhbnZhc0NvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgci5DQU5WQVNfTEFZRVJTOyBpKysgKXtcblxuICAgIGNhbnZhcyA9IGRhdGEuY2FudmFzZXNbIGkgXTtcblxuICAgIGlmKCBjYW52YXMud2lkdGggIT09IGNhbnZhc1dpZHRoIHx8IGNhbnZhcy5oZWlnaHQgIT09IGNhbnZhc0hlaWdodCApe1xuXG4gICAgICBjYW52YXMud2lkdGggPSBjYW52YXNXaWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXNIZWlnaHQ7XG5cbiAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcbiAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuICAgIH1cbiAgfVxuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgci5CVUZGRVJfQ09VTlQ7IGkrKyApe1xuXG4gICAgY2FudmFzID0gZGF0YS5idWZmZXJDYW52YXNlc1sgaSBdO1xuXG4gICAgaWYoIGNhbnZhcy53aWR0aCAhPT0gY2FudmFzV2lkdGggfHwgY2FudmFzLmhlaWdodCAhPT0gY2FudmFzSGVpZ2h0ICl7XG5cbiAgICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhc1dpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhc0hlaWdodDtcblxuICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG4gICAgfVxuICB9XG5cbiAgci50ZXh0dXJlTXVsdCA9IDE7XG4gIGlmKCBwaXhlbFJhdGlvIDw9IDEgKXtcbiAgICBjYW52YXMgPSBkYXRhLmJ1ZmZlckNhbnZhc2VzWyByLlRFWFRVUkVfQlVGRkVSIF07XG5cbiAgICByLnRleHR1cmVNdWx0ID0gMjtcbiAgICBjYW52YXMud2lkdGggPSBjYW52YXNXaWR0aCAqIHIudGV4dHVyZU11bHQ7XG4gICAgY2FudmFzLmhlaWdodCA9IGNhbnZhc0hlaWdodCAqIHIudGV4dHVyZU11bHQ7XG4gIH1cblxuICByLmNhbnZhc1dpZHRoID0gY2FudmFzV2lkdGg7XG4gIHIuY2FudmFzSGVpZ2h0ID0gY2FudmFzSGVpZ2h0O1xuXG59O1xuXG5DUnAucmVuZGVyVG8gPSBmdW5jdGlvbiggY3h0LCB6b29tLCBwYW4sIHB4UmF0aW8gKXtcbiAgdGhpcy5yZW5kZXIoIHtcbiAgICBmb3JjZWRDb250ZXh0OiBjeHQsXG4gICAgZm9yY2VkWm9vbTogem9vbSxcbiAgICBmb3JjZWRQYW46IHBhbixcbiAgICBkcmF3QWxsTGF5ZXJzOiB0cnVlLFxuICAgIGZvcmNlZFB4UmF0aW86IHB4UmF0aW9cbiAgfSApO1xufTtcblxuQ1JwLnJlbmRlciA9IGZ1bmN0aW9uKCBvcHRpb25zICl7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHV0aWwuc3RhdGljRW1wdHlPYmplY3QoKTtcblxuICB2YXIgZm9yY2VkQ29udGV4dCA9IG9wdGlvbnMuZm9yY2VkQ29udGV4dDtcbiAgdmFyIGRyYXdBbGxMYXllcnMgPSBvcHRpb25zLmRyYXdBbGxMYXllcnM7XG4gIHZhciBkcmF3T25seU5vZGVMYXllciA9IG9wdGlvbnMuZHJhd09ubHlOb2RlTGF5ZXI7XG4gIHZhciBmb3JjZWRab29tID0gb3B0aW9ucy5mb3JjZWRab29tO1xuICB2YXIgZm9yY2VkUGFuID0gb3B0aW9ucy5mb3JjZWRQYW47XG4gIHZhciByID0gdGhpcztcbiAgdmFyIHBpeGVsUmF0aW8gPSBvcHRpb25zLmZvcmNlZFB4UmF0aW8gPT09IHVuZGVmaW5lZCA/IHRoaXMuZ2V0UGl4ZWxSYXRpbygpIDogb3B0aW9ucy5mb3JjZWRQeFJhdGlvO1xuICB2YXIgY3kgPSByLmN5OyB2YXIgZGF0YSA9IHIuZGF0YTtcbiAgdmFyIG5lZWREcmF3ID0gZGF0YS5jYW52YXNOZWVkc1JlZHJhdztcbiAgdmFyIHRleHR1cmVEcmF3ID0gci50ZXh0dXJlT25WaWV3cG9ydCAmJiAhZm9yY2VkQ29udGV4dCAmJiAoci5waW5jaGluZyB8fCByLmhvdmVyRGF0YS5kcmFnZ2luZyB8fCByLnN3aXBlUGFubmluZyB8fCByLmRhdGEud2hlZWxab29taW5nKTtcbiAgdmFyIG1vdGlvbkJsdXIgPSBvcHRpb25zLm1vdGlvbkJsdXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubW90aW9uQmx1ciA6IHIubW90aW9uQmx1cjtcbiAgdmFyIG1iUHhSYXRpbyA9IHIubW90aW9uQmx1clB4UmF0aW87XG4gIHZhciBoYXNDb21wb3VuZE5vZGVzID0gY3kuaGFzQ29tcG91bmROb2RlcygpO1xuICB2YXIgaW5Ob2RlRHJhZ0dlc3R1cmUgPSByLmhvdmVyRGF0YS5kcmFnZ2luZ0VsZXM7XG4gIHZhciBpbkJveFNlbGVjdGlvbiA9IHIuaG92ZXJEYXRhLnNlbGVjdGluZyB8fCByLnRvdWNoRGF0YS5zZWxlY3RpbmcgPyB0cnVlIDogZmFsc2U7XG4gIG1vdGlvbkJsdXIgPSBtb3Rpb25CbHVyICYmICFmb3JjZWRDb250ZXh0ICYmIHIubW90aW9uQmx1ckVuYWJsZWQgJiYgIWluQm94U2VsZWN0aW9uO1xuICB2YXIgbW90aW9uQmx1ckZhZGVFZmZlY3QgPSBtb3Rpb25CbHVyO1xuXG4gIGlmKCAhZm9yY2VkQ29udGV4dCApe1xuICAgIGlmKCByLnByZXZQeFJhdGlvICE9PSBwaXhlbFJhdGlvICl7XG4gICAgICByLmludmFsaWRhdGVDb250YWluZXJDbGllbnRDb29yZHNDYWNoZSgpO1xuICAgICAgci5tYXRjaENhbnZhc1NpemUoIHIuY29udGFpbmVyICk7XG5cbiAgICAgIHIucmVkcmF3SGludCgnZWxlcycsIHRydWUpO1xuICAgICAgci5yZWRyYXdIaW50KCdkcmFnJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgci5wcmV2UHhSYXRpbyA9IHBpeGVsUmF0aW87XG4gIH1cblxuICBpZiggIWZvcmNlZENvbnRleHQgJiYgci5tb3Rpb25CbHVyVGltZW91dCApe1xuICAgIGNsZWFyVGltZW91dCggci5tb3Rpb25CbHVyVGltZW91dCApO1xuICB9XG5cbiAgaWYoIG1vdGlvbkJsdXIgKXtcbiAgICBpZiggci5tYkZyYW1lcyA9PSBudWxsICl7XG4gICAgICByLm1iRnJhbWVzID0gMDtcbiAgICB9XG5cbiAgICBpZiggIXIuZHJhd2luZ0ltYWdlICl7IC8vIGltYWdlIGxvYWRpbmcgZnJhbWVzIGRvbid0IGNvdW50IHRvd2FyZHMgbW90aW9uIGJsdXIgYmx1cnJ5IGZyYW1lc1xuICAgICAgci5tYkZyYW1lcysrO1xuICAgIH1cblxuICAgIGlmKCByLm1iRnJhbWVzIDwgMyApeyAvLyBuZWVkIHNldmVyYWwgZnJhbWVzIGJlZm9yZSBldmVuIGhpZ2ggcXVhbGl0eSBtb3Rpb25ibHVyXG4gICAgICBtb3Rpb25CbHVyRmFkZUVmZmVjdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGdvIHRvIGxvd2VyIHF1YWxpdHkgYmx1cnJ5IGZyYW1lcyB3aGVuIHNldmVyYWwgbS9iIGZyYW1lcyBoYXZlIGJlZW4gcmVuZGVyZWQgKGF2b2lkcyBmbGFzaGluZylcbiAgICBpZiggci5tYkZyYW1lcyA+IHIubWluTWJMb3dRdWFsRnJhbWVzICl7XG4gICAgICAvL3IuZnVsbFF1YWxpdHlNYiA9IGZhbHNlO1xuICAgICAgci5tb3Rpb25CbHVyUHhSYXRpbyA9IHIubWJQeFJCbHVycnk7XG4gICAgfVxuICB9XG5cbiAgaWYoIHIuY2xlYXJpbmdNb3Rpb25CbHVyICl7XG4gICAgci5tb3Rpb25CbHVyUHhSYXRpbyA9IDE7XG4gIH1cblxuICAvLyBiL2MgZHJhd1RvQ29udGV4dCgpIG1heSBiZSBhc3luYyB3LnIudC4gcmVkcmF3KCksIGtlZXAgdHJhY2sgb2YgbGFzdCB0ZXh0dXJlIGZyYW1lXG4gIC8vIGJlY2F1c2UgYSByb2d1ZSBhc3luYyB0ZXh0dXJlIGZyYW1lIHdvdWxkIGNsZWFyIG5lZWREcmF3XG4gIGlmKCByLnRleHR1cmVEcmF3TGFzdEZyYW1lICYmICF0ZXh0dXJlRHJhdyApe1xuICAgIG5lZWREcmF3WyByLk5PREUgXSA9IHRydWU7XG4gICAgbmVlZERyYXdbIHIuU0VMRUNUX0JPWCBdID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBjb3JlU3R5bGUgPSBjeS5zdHlsZSgpLl9wcml2YXRlLmNvcmVTdHlsZTtcblxuICB2YXIgem9vbSA9IGN5Lnpvb20oKTtcbiAgdmFyIGVmZmVjdGl2ZVpvb20gPSBmb3JjZWRab29tICE9PSB1bmRlZmluZWQgPyBmb3JjZWRab29tIDogem9vbTtcbiAgdmFyIHBhbiA9IGN5LnBhbigpO1xuICB2YXIgZWZmZWN0aXZlUGFuID0ge1xuICAgIHg6IHBhbi54LFxuICAgIHk6IHBhbi55XG4gIH07XG5cbiAgdmFyIHZwID0ge1xuICAgIHpvb206IHpvb20sXG4gICAgcGFuOiB7XG4gICAgICB4OiBwYW4ueCxcbiAgICAgIHk6IHBhbi55XG4gICAgfVxuICB9O1xuICB2YXIgcHJldlZwID0gci5wcmV2Vmlld3BvcnQ7XG4gIHZhciB2aWV3cG9ydElzRGlmZiA9IHByZXZWcCA9PT0gdW5kZWZpbmVkIHx8IHZwLnpvb20gIT09IHByZXZWcC56b29tIHx8IHZwLnBhbi54ICE9PSBwcmV2VnAucGFuLnggfHwgdnAucGFuLnkgIT09IHByZXZWcC5wYW4ueTtcblxuICAvLyB3ZSB3YW50IHRoZSBsb3cgcXVhbGl0eSBtb3Rpb25ibHVyIG9ubHkgd2hlbiB0aGUgdmlld3BvcnQgaXMgYmVpbmcgbWFuaXB1bGF0ZWQgZXRjICh3aGVyZSBpdCdzIG5vdCBub3RpY2VkKVxuICBpZiggIXZpZXdwb3J0SXNEaWZmICYmICEoaW5Ob2RlRHJhZ0dlc3R1cmUgJiYgIWhhc0NvbXBvdW5kTm9kZXMpICl7XG4gICAgci5tb3Rpb25CbHVyUHhSYXRpbyA9IDE7XG4gIH1cblxuICBpZiggZm9yY2VkUGFuICl7XG4gICAgZWZmZWN0aXZlUGFuID0gZm9yY2VkUGFuO1xuICB9XG5cbiAgLy8gYXBwbHkgcGl4ZWwgcmF0aW9cblxuICBlZmZlY3RpdmVab29tICo9IHBpeGVsUmF0aW87XG4gIGVmZmVjdGl2ZVBhbi54ICo9IHBpeGVsUmF0aW87XG4gIGVmZmVjdGl2ZVBhbi55ICo9IHBpeGVsUmF0aW87XG5cbiAgdmFyIGVsZXMgPSByLmdldENhY2hlZFpTb3J0ZWRFbGVzKCk7XG5cbiAgZnVuY3Rpb24gbWJjbGVhciggY29udGV4dCwgeCwgeSwgdywgaCApe1xuICAgIHZhciBnY28gPSBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbjtcblxuICAgIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ2Rlc3RpbmF0aW9uLW91dCc7XG4gICAgci5maWxsU3R5bGUoIGNvbnRleHQsIDI1NSwgMjU1LCAyNTUsIHIubW90aW9uQmx1clRyYW5zcGFyZW5jeSApO1xuICAgIGNvbnRleHQuZmlsbFJlY3QoIHgsIHksIHcsIGggKTtcblxuICAgIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gZ2NvO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0Q29udGV4dFRyYW5zZm9ybSggY29udGV4dCwgY2xlYXIgKXtcbiAgICB2YXIgZVBhbiwgZVpvb20sIHcsIGg7XG5cbiAgICBpZiggIXIuY2xlYXJpbmdNb3Rpb25CbHVyICYmIChjb250ZXh0ID09PSBkYXRhLmJ1ZmZlckNvbnRleHRzWyByLk1PVElPTkJMVVJfQlVGRkVSX05PREUgXSB8fCBjb250ZXh0ID09PSBkYXRhLmJ1ZmZlckNvbnRleHRzWyByLk1PVElPTkJMVVJfQlVGRkVSX0RSQUcgXSkgKXtcbiAgICAgIGVQYW4gPSB7XG4gICAgICAgIHg6IHBhbi54ICogbWJQeFJhdGlvLFxuICAgICAgICB5OiBwYW4ueSAqIG1iUHhSYXRpb1xuICAgICAgfTtcblxuICAgICAgZVpvb20gPSB6b29tICogbWJQeFJhdGlvO1xuXG4gICAgICB3ID0gci5jYW52YXNXaWR0aCAqIG1iUHhSYXRpbztcbiAgICAgIGggPSByLmNhbnZhc0hlaWdodCAqIG1iUHhSYXRpbztcbiAgICB9IGVsc2Uge1xuICAgICAgZVBhbiA9IGVmZmVjdGl2ZVBhbjtcbiAgICAgIGVab29tID0gZWZmZWN0aXZlWm9vbTtcblxuICAgICAgdyA9IHIuY2FudmFzV2lkdGg7XG4gICAgICBoID0gci5jYW52YXNIZWlnaHQ7XG4gICAgfVxuXG4gICAgY29udGV4dC5zZXRUcmFuc2Zvcm0oIDEsIDAsIDAsIDEsIDAsIDAgKTtcblxuICAgIGlmKCBjbGVhciA9PT0gJ21vdGlvbkJsdXInICl7XG4gICAgICBtYmNsZWFyKCBjb250ZXh0LCAwLCAwLCB3LCBoICk7XG4gICAgfSBlbHNlIGlmKCAhZm9yY2VkQ29udGV4dCAmJiAoY2xlYXIgPT09IHVuZGVmaW5lZCB8fCBjbGVhcikgKXtcbiAgICAgIGNvbnRleHQuY2xlYXJSZWN0KCAwLCAwLCB3LCBoICk7XG4gICAgfVxuXG4gICAgaWYoICFkcmF3QWxsTGF5ZXJzICl7XG4gICAgICBjb250ZXh0LnRyYW5zbGF0ZSggZVBhbi54LCBlUGFuLnkgKTtcbiAgICAgIGNvbnRleHQuc2NhbGUoIGVab29tLCBlWm9vbSApO1xuICAgIH1cbiAgICBpZiggZm9yY2VkUGFuICl7XG4gICAgICBjb250ZXh0LnRyYW5zbGF0ZSggZm9yY2VkUGFuLngsIGZvcmNlZFBhbi55ICk7XG4gICAgfVxuICAgIGlmKCBmb3JjZWRab29tICl7XG4gICAgICBjb250ZXh0LnNjYWxlKCBmb3JjZWRab29tLCBmb3JjZWRab29tICk7XG4gICAgfVxuICB9XG5cbiAgaWYoICF0ZXh0dXJlRHJhdyApe1xuICAgIHIudGV4dHVyZURyYXdMYXN0RnJhbWUgPSBmYWxzZTtcbiAgfVxuXG4gIGlmKCB0ZXh0dXJlRHJhdyApe1xuICAgIHIudGV4dHVyZURyYXdMYXN0RnJhbWUgPSB0cnVlO1xuXG4gICAgdmFyIGJiO1xuXG4gICAgaWYoICFyLnRleHR1cmVDYWNoZSApe1xuICAgICAgci50ZXh0dXJlQ2FjaGUgPSB7fTtcblxuICAgICAgYmIgPSByLnRleHR1cmVDYWNoZS5iYiA9IGN5Lm11dGFibGVFbGVtZW50cygpLmJvdW5kaW5nQm94KCk7XG5cbiAgICAgIHIudGV4dHVyZUNhY2hlLnRleHR1cmUgPSByLmRhdGEuYnVmZmVyQ2FudmFzZXNbIHIuVEVYVFVSRV9CVUZGRVIgXTtcblxuICAgICAgdmFyIGN4dCA9IHIuZGF0YS5idWZmZXJDb250ZXh0c1sgci5URVhUVVJFX0JVRkZFUiBdO1xuXG4gICAgICBjeHQuc2V0VHJhbnNmb3JtKCAxLCAwLCAwLCAxLCAwLCAwICk7XG4gICAgICBjeHQuY2xlYXJSZWN0KCAwLCAwLCByLmNhbnZhc1dpZHRoICogci50ZXh0dXJlTXVsdCwgci5jYW52YXNIZWlnaHQgKiByLnRleHR1cmVNdWx0ICk7XG5cbiAgICAgIHIucmVuZGVyKCB7XG4gICAgICAgIGZvcmNlZENvbnRleHQ6IGN4dCxcbiAgICAgICAgZHJhd09ubHlOb2RlTGF5ZXI6IHRydWUsXG4gICAgICAgIGZvcmNlZFB4UmF0aW86IHBpeGVsUmF0aW8gKiByLnRleHR1cmVNdWx0XG4gICAgICB9ICk7XG5cbiAgICAgIHZhciB2cCA9IHIudGV4dHVyZUNhY2hlLnZpZXdwb3J0ID0ge1xuICAgICAgICB6b29tOiBjeS56b29tKCksXG4gICAgICAgIHBhbjogY3kucGFuKCksXG4gICAgICAgIHdpZHRoOiByLmNhbnZhc1dpZHRoLFxuICAgICAgICBoZWlnaHQ6IHIuY2FudmFzSGVpZ2h0XG4gICAgICB9O1xuXG4gICAgICB2cC5tcGFuID0ge1xuICAgICAgICB4OiAoMCAtIHZwLnBhbi54KSAvIHZwLnpvb20sXG4gICAgICAgIHk6ICgwIC0gdnAucGFuLnkpIC8gdnAuem9vbVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBuZWVkRHJhd1sgci5EUkFHIF0gPSBmYWxzZTtcbiAgICBuZWVkRHJhd1sgci5OT0RFIF0gPSBmYWxzZTtcblxuICAgIHZhciBjb250ZXh0ID0gZGF0YS5jb250ZXh0c1sgci5OT0RFIF07XG5cbiAgICB2YXIgdGV4dHVyZSA9IHIudGV4dHVyZUNhY2hlLnRleHR1cmU7XG4gICAgdmFyIHZwID0gci50ZXh0dXJlQ2FjaGUudmlld3BvcnQ7XG4gICAgYmIgPSByLnRleHR1cmVDYWNoZS5iYjtcblxuICAgIGNvbnRleHQuc2V0VHJhbnNmb3JtKCAxLCAwLCAwLCAxLCAwLCAwICk7XG5cbiAgICBpZiggbW90aW9uQmx1ciApe1xuICAgICAgbWJjbGVhciggY29udGV4dCwgMCwgMCwgdnAud2lkdGgsIHZwLmhlaWdodCApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0LmNsZWFyUmVjdCggMCwgMCwgdnAud2lkdGgsIHZwLmhlaWdodCApO1xuICAgIH1cblxuICAgIHZhciBvdXRzaWRlQmdDb2xvciA9IGNvcmVTdHlsZVsgJ291dHNpZGUtdGV4dHVyZS1iZy1jb2xvcicgXS52YWx1ZTtcbiAgICB2YXIgb3V0c2lkZUJnT3BhY2l0eSA9IGNvcmVTdHlsZVsgJ291dHNpZGUtdGV4dHVyZS1iZy1vcGFjaXR5JyBdLnZhbHVlO1xuICAgIHIuZmlsbFN0eWxlKCBjb250ZXh0LCBvdXRzaWRlQmdDb2xvclswXSwgb3V0c2lkZUJnQ29sb3JbMV0sIG91dHNpZGVCZ0NvbG9yWzJdLCBvdXRzaWRlQmdPcGFjaXR5ICk7XG4gICAgY29udGV4dC5maWxsUmVjdCggMCwgMCwgdnAud2lkdGgsIHZwLmhlaWdodCApO1xuXG4gICAgdmFyIHpvb20gPSBjeS56b29tKCk7XG5cbiAgICBzZXRDb250ZXh0VHJhbnNmb3JtKCBjb250ZXh0LCBmYWxzZSApO1xuXG4gICAgY29udGV4dC5jbGVhclJlY3QoIHZwLm1wYW4ueCwgdnAubXBhbi55LCB2cC53aWR0aCAvIHZwLnpvb20gLyBwaXhlbFJhdGlvLCB2cC5oZWlnaHQgLyB2cC56b29tIC8gcGl4ZWxSYXRpbyApO1xuICAgIGNvbnRleHQuZHJhd0ltYWdlKCB0ZXh0dXJlLCB2cC5tcGFuLngsIHZwLm1wYW4ueSwgdnAud2lkdGggLyB2cC56b29tIC8gcGl4ZWxSYXRpbywgdnAuaGVpZ2h0IC8gdnAuem9vbSAvIHBpeGVsUmF0aW8gKTtcblxuICB9IGVsc2UgaWYoIHIudGV4dHVyZU9uVmlld3BvcnQgJiYgIWZvcmNlZENvbnRleHQgKXsgLy8gY2xlYXIgdGhlIGNhY2hlIHNpbmNlIHdlIGRvbid0IG5lZWQgaXRcbiAgICByLnRleHR1cmVDYWNoZSA9IG51bGw7XG4gIH1cblxuICB2YXIgZXh0ZW50ID0gY3kuZXh0ZW50KCk7XG4gIHZhciB2cE1hbmlwID0gKHIucGluY2hpbmcgfHwgci5ob3ZlckRhdGEuZHJhZ2dpbmcgfHwgci5zd2lwZVBhbm5pbmcgfHwgci5kYXRhLndoZWVsWm9vbWluZyB8fCByLmhvdmVyRGF0YS5kcmFnZ2luZ0VsZXMpO1xuICB2YXIgaGlkZUVkZ2VzID0gci5oaWRlRWRnZXNPblZpZXdwb3J0ICYmIHZwTWFuaXA7XG5cbiAgdmFyIG5lZWRNYkNsZWFyID0gW107XG5cbiAgbmVlZE1iQ2xlYXJbIHIuTk9ERSBdID0gIW5lZWREcmF3WyByLk5PREUgXSAmJiBtb3Rpb25CbHVyICYmICFyLmNsZWFyZWRGb3JNb3Rpb25CbHVyWyByLk5PREUgXSB8fCByLmNsZWFyaW5nTW90aW9uQmx1cjtcbiAgaWYoIG5lZWRNYkNsZWFyWyByLk5PREUgXSApeyByLmNsZWFyZWRGb3JNb3Rpb25CbHVyWyByLk5PREUgXSA9IHRydWU7IH1cblxuICBuZWVkTWJDbGVhclsgci5EUkFHIF0gPSAhbmVlZERyYXdbIHIuRFJBRyBdICYmIG1vdGlvbkJsdXIgJiYgIXIuY2xlYXJlZEZvck1vdGlvbkJsdXJbIHIuRFJBRyBdIHx8IHIuY2xlYXJpbmdNb3Rpb25CbHVyO1xuICBpZiggbmVlZE1iQ2xlYXJbIHIuRFJBRyBdICl7IHIuY2xlYXJlZEZvck1vdGlvbkJsdXJbIHIuRFJBRyBdID0gdHJ1ZTsgfVxuXG4gIGlmKCBuZWVkRHJhd1sgci5OT0RFIF0gfHwgZHJhd0FsbExheWVycyB8fCBkcmF3T25seU5vZGVMYXllciB8fCBuZWVkTWJDbGVhclsgci5OT0RFIF0gKXtcbiAgICB2YXIgdXNlQnVmZmVyID0gbW90aW9uQmx1ciAmJiAhbmVlZE1iQ2xlYXJbIHIuTk9ERSBdICYmIG1iUHhSYXRpbyAhPT0gMTtcbiAgICB2YXIgY29udGV4dCA9IGZvcmNlZENvbnRleHQgfHwgKCB1c2VCdWZmZXIgPyByLmRhdGEuYnVmZmVyQ29udGV4dHNbIHIuTU9USU9OQkxVUl9CVUZGRVJfTk9ERSBdIDogZGF0YS5jb250ZXh0c1sgci5OT0RFIF0gKTtcbiAgICB2YXIgY2xlYXIgPSBtb3Rpb25CbHVyICYmICF1c2VCdWZmZXIgPyAnbW90aW9uQmx1cicgOiB1bmRlZmluZWQ7XG5cbiAgICBzZXRDb250ZXh0VHJhbnNmb3JtKCBjb250ZXh0LCBjbGVhciApO1xuXG4gICAgaWYoIGhpZGVFZGdlcyApe1xuICAgICAgci5kcmF3Q2FjaGVkTm9kZXMoIGNvbnRleHQsIGVsZXMubm9uZHJhZywgcGl4ZWxSYXRpbywgZXh0ZW50ICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIuZHJhd0xheWVyZWRFbGVtZW50cyggY29udGV4dCwgZWxlcy5ub25kcmFnLCBwaXhlbFJhdGlvLCBleHRlbnQgKTtcbiAgICB9XG5cbiAgICBpZiggIWRyYXdBbGxMYXllcnMgJiYgIW1vdGlvbkJsdXIgKXtcbiAgICAgIG5lZWREcmF3WyByLk5PREUgXSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmKCAhZHJhd09ubHlOb2RlTGF5ZXIgJiYgKG5lZWREcmF3WyByLkRSQUcgXSB8fCBkcmF3QWxsTGF5ZXJzIHx8IG5lZWRNYkNsZWFyWyByLkRSQUcgXSkgKXtcbiAgICB2YXIgdXNlQnVmZmVyID0gbW90aW9uQmx1ciAmJiAhbmVlZE1iQ2xlYXJbIHIuRFJBRyBdICYmIG1iUHhSYXRpbyAhPT0gMTtcbiAgICB2YXIgY29udGV4dCA9IGZvcmNlZENvbnRleHQgfHwgKCB1c2VCdWZmZXIgPyByLmRhdGEuYnVmZmVyQ29udGV4dHNbIHIuTU9USU9OQkxVUl9CVUZGRVJfRFJBRyBdIDogZGF0YS5jb250ZXh0c1sgci5EUkFHIF0gKTtcblxuICAgIHNldENvbnRleHRUcmFuc2Zvcm0oIGNvbnRleHQsIG1vdGlvbkJsdXIgJiYgIXVzZUJ1ZmZlciA/ICdtb3Rpb25CbHVyJyA6IHVuZGVmaW5lZCApO1xuXG4gICAgaWYoIGhpZGVFZGdlcyApe1xuICAgICAgci5kcmF3Q2FjaGVkTm9kZXMoIGNvbnRleHQsIGVsZXMuZHJhZywgcGl4ZWxSYXRpbywgZXh0ZW50ICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIuZHJhd0NhY2hlZEVsZW1lbnRzKCBjb250ZXh0LCBlbGVzLmRyYWcsIHBpeGVsUmF0aW8sIGV4dGVudCApO1xuICAgIH1cblxuICAgIGlmKCAhZHJhd0FsbExheWVycyAmJiAhbW90aW9uQmx1ciApe1xuICAgICAgbmVlZERyYXdbIHIuRFJBRyBdID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYoIHIuc2hvd0ZwcyB8fCAoIWRyYXdPbmx5Tm9kZUxheWVyICYmIChuZWVkRHJhd1sgci5TRUxFQ1RfQk9YIF0gJiYgIWRyYXdBbGxMYXllcnMpKSApe1xuICAgIHZhciBjb250ZXh0ID0gZm9yY2VkQ29udGV4dCB8fCBkYXRhLmNvbnRleHRzWyByLlNFTEVDVF9CT1ggXTtcblxuICAgIHNldENvbnRleHRUcmFuc2Zvcm0oIGNvbnRleHQgKTtcblxuICAgIGlmKCByLnNlbGVjdGlvbls0XSA9PSAxICYmICggci5ob3ZlckRhdGEuc2VsZWN0aW5nIHx8IHIudG91Y2hEYXRhLnNlbGVjdGluZyApICl7XG4gICAgICB2YXIgem9vbSA9IHIuY3kuem9vbSgpO1xuICAgICAgdmFyIGJvcmRlcldpZHRoID0gY29yZVN0eWxlWyAnc2VsZWN0aW9uLWJveC1ib3JkZXItd2lkdGgnIF0udmFsdWUgLyB6b29tO1xuXG4gICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IGJvcmRlcldpZHRoO1xuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgnXG4gICAgICAgICsgY29yZVN0eWxlWyAnc2VsZWN0aW9uLWJveC1jb2xvcicgXS52YWx1ZVswXSArICcsJ1xuICAgICAgICArIGNvcmVTdHlsZVsgJ3NlbGVjdGlvbi1ib3gtY29sb3InIF0udmFsdWVbMV0gKyAnLCdcbiAgICAgICAgKyBjb3JlU3R5bGVbICdzZWxlY3Rpb24tYm94LWNvbG9yJyBdLnZhbHVlWzJdICsgJywnXG4gICAgICAgICsgY29yZVN0eWxlWyAnc2VsZWN0aW9uLWJveC1vcGFjaXR5JyBdLnZhbHVlICsgJyknO1xuXG4gICAgICBjb250ZXh0LmZpbGxSZWN0KFxuICAgICAgICByLnNlbGVjdGlvblswXSxcbiAgICAgICAgci5zZWxlY3Rpb25bMV0sXG4gICAgICAgIHIuc2VsZWN0aW9uWzJdIC0gci5zZWxlY3Rpb25bMF0sXG4gICAgICAgIHIuc2VsZWN0aW9uWzNdIC0gci5zZWxlY3Rpb25bMV0gKTtcblxuICAgICAgaWYoIGJvcmRlcldpZHRoID4gMCApe1xuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gJ3JnYmEoJ1xuICAgICAgICAgICsgY29yZVN0eWxlWyAnc2VsZWN0aW9uLWJveC1ib3JkZXItY29sb3InIF0udmFsdWVbMF0gKyAnLCdcbiAgICAgICAgICArIGNvcmVTdHlsZVsgJ3NlbGVjdGlvbi1ib3gtYm9yZGVyLWNvbG9yJyBdLnZhbHVlWzFdICsgJywnXG4gICAgICAgICAgKyBjb3JlU3R5bGVbICdzZWxlY3Rpb24tYm94LWJvcmRlci1jb2xvcicgXS52YWx1ZVsyXSArICcsJ1xuICAgICAgICAgICsgY29yZVN0eWxlWyAnc2VsZWN0aW9uLWJveC1vcGFjaXR5JyBdLnZhbHVlICsgJyknO1xuXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlUmVjdChcbiAgICAgICAgICByLnNlbGVjdGlvblswXSxcbiAgICAgICAgICByLnNlbGVjdGlvblsxXSxcbiAgICAgICAgICByLnNlbGVjdGlvblsyXSAtIHIuc2VsZWN0aW9uWzBdLFxuICAgICAgICAgIHIuc2VsZWN0aW9uWzNdIC0gci5zZWxlY3Rpb25bMV0gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiggZGF0YS5iZ0FjdGl2ZVBvc2lzdGlvbiAmJiAhci5ob3ZlckRhdGEuc2VsZWN0aW5nICl7XG4gICAgICB2YXIgem9vbSA9IHIuY3kuem9vbSgpO1xuICAgICAgdmFyIHBvcyA9IGRhdGEuYmdBY3RpdmVQb3Npc3Rpb247XG5cbiAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoJ1xuICAgICAgICArIGNvcmVTdHlsZVsgJ2FjdGl2ZS1iZy1jb2xvcicgXS52YWx1ZVswXSArICcsJ1xuICAgICAgICArIGNvcmVTdHlsZVsgJ2FjdGl2ZS1iZy1jb2xvcicgXS52YWx1ZVsxXSArICcsJ1xuICAgICAgICArIGNvcmVTdHlsZVsgJ2FjdGl2ZS1iZy1jb2xvcicgXS52YWx1ZVsyXSArICcsJ1xuICAgICAgICArIGNvcmVTdHlsZVsgJ2FjdGl2ZS1iZy1vcGFjaXR5JyBdLnZhbHVlICsgJyknO1xuXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgY29udGV4dC5hcmMoIHBvcy54LCBwb3MueSwgY29yZVN0eWxlWyAnYWN0aXZlLWJnLXNpemUnIF0ucGZWYWx1ZSAvIHpvb20sIDAsIDIgKiBNYXRoLlBJICk7XG4gICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICB9XG5cbiAgICB2YXIgdGltZVRvUmVuZGVyID0gci5sYXN0UmVkcmF3VGltZTtcbiAgICBpZiggci5zaG93RnBzICYmIHRpbWVUb1JlbmRlciApe1xuICAgICAgdGltZVRvUmVuZGVyID0gTWF0aC5yb3VuZCggdGltZVRvUmVuZGVyICk7XG4gICAgICB2YXIgZnBzID0gTWF0aC5yb3VuZCggMTAwMCAvIHRpbWVUb1JlbmRlciApO1xuXG4gICAgICBjb250ZXh0LnNldFRyYW5zZm9ybSggMSwgMCwgMCwgMSwgMCwgMCApO1xuXG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwgMCwgMCwgMC43NSknO1xuICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwgMCwgMCwgMC43NSknO1xuICAgICAgY29udGV4dC5saW5lV2lkdGggPSAxO1xuICAgICAgY29udGV4dC5maWxsVGV4dCggJzEgZnJhbWUgPSAnICsgdGltZVRvUmVuZGVyICsgJyBtcyA9ICcgKyBmcHMgKyAnIGZwcycsIDAsIDIwICk7XG5cbiAgICAgIHZhciBtYXhGcHMgPSA2MDtcbiAgICAgIGNvbnRleHQuc3Ryb2tlUmVjdCggMCwgMzAsIDI1MCwgMjAgKTtcbiAgICAgIGNvbnRleHQuZmlsbFJlY3QoIDAsIDMwLCAyNTAgKiBNYXRoLm1pbiggZnBzIC8gbWF4RnBzLCAxICksIDIwICk7XG4gICAgfVxuXG4gICAgaWYoICFkcmF3QWxsTGF5ZXJzICl7XG4gICAgICBuZWVkRHJhd1sgci5TRUxFQ1RfQk9YIF0gPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBtb3Rpb25ibHVyOiBibGl0IHJlbmRlcmVkIGJsdXJyeSBmcmFtZXNcbiAgaWYoIG1vdGlvbkJsdXIgJiYgbWJQeFJhdGlvICE9PSAxICl7XG4gICAgdmFyIGN4dE5vZGUgPSBkYXRhLmNvbnRleHRzWyByLk5PREUgXTtcbiAgICB2YXIgdHh0Tm9kZSA9IHIuZGF0YS5idWZmZXJDYW52YXNlc1sgci5NT1RJT05CTFVSX0JVRkZFUl9OT0RFIF07XG5cbiAgICB2YXIgY3h0RHJhZyA9IGRhdGEuY29udGV4dHNbIHIuRFJBRyBdO1xuICAgIHZhciB0eHREcmFnID0gci5kYXRhLmJ1ZmZlckNhbnZhc2VzWyByLk1PVElPTkJMVVJfQlVGRkVSX0RSQUcgXTtcblxuICAgIHZhciBkcmF3TW90aW9uQmx1ciA9IGZ1bmN0aW9uKCBjeHQsIHR4dCwgbmVlZENsZWFyICl7XG4gICAgICBjeHQuc2V0VHJhbnNmb3JtKCAxLCAwLCAwLCAxLCAwLCAwICk7XG5cbiAgICAgIGlmKCBuZWVkQ2xlYXIgfHwgIW1vdGlvbkJsdXJGYWRlRWZmZWN0ICl7XG4gICAgICAgIGN4dC5jbGVhclJlY3QoIDAsIDAsIHIuY2FudmFzV2lkdGgsIHIuY2FudmFzSGVpZ2h0ICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYmNsZWFyKCBjeHQsIDAsIDAsIHIuY2FudmFzV2lkdGgsIHIuY2FudmFzSGVpZ2h0ICk7XG4gICAgICB9XG5cbiAgICAgIHZhciBweHIgPSBtYlB4UmF0aW87XG5cbiAgICAgIGN4dC5kcmF3SW1hZ2UoXG4gICAgICAgIHR4dCwgLy8gaW1nXG4gICAgICAgIDAsIDAsIC8vIHN4LCBzeVxuICAgICAgICByLmNhbnZhc1dpZHRoICogcHhyLCByLmNhbnZhc0hlaWdodCAqIHB4ciwgLy8gc3csIHNoXG4gICAgICAgIDAsIDAsIC8vIHgsIHlcbiAgICAgICAgci5jYW52YXNXaWR0aCwgci5jYW52YXNIZWlnaHQgLy8gdywgaFxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgaWYoIG5lZWREcmF3WyByLk5PREUgXSB8fCBuZWVkTWJDbGVhclsgci5OT0RFIF0gKXtcbiAgICAgIGRyYXdNb3Rpb25CbHVyKCBjeHROb2RlLCB0eHROb2RlLCBuZWVkTWJDbGVhclsgci5OT0RFIF0gKTtcbiAgICAgIG5lZWREcmF3WyByLk5PREUgXSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmKCBuZWVkRHJhd1sgci5EUkFHIF0gfHwgbmVlZE1iQ2xlYXJbIHIuRFJBRyBdICl7XG4gICAgICBkcmF3TW90aW9uQmx1ciggY3h0RHJhZywgdHh0RHJhZywgbmVlZE1iQ2xlYXJbIHIuRFJBRyBdICk7XG4gICAgICBuZWVkRHJhd1sgci5EUkFHIF0gPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByLnByZXZWaWV3cG9ydCA9IHZwO1xuXG4gIGlmKCByLmNsZWFyaW5nTW90aW9uQmx1ciApe1xuICAgIHIuY2xlYXJpbmdNb3Rpb25CbHVyID0gZmFsc2U7XG4gICAgci5tb3Rpb25CbHVyQ2xlYXJlZCA9IHRydWU7XG4gICAgci5tb3Rpb25CbHVyID0gdHJ1ZTtcbiAgfVxuXG4gIGlmKCBtb3Rpb25CbHVyICl7XG4gICAgci5tb3Rpb25CbHVyVGltZW91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7XG4gICAgICByLm1vdGlvbkJsdXJUaW1lb3V0ID0gbnVsbDtcblxuICAgICAgci5jbGVhcmVkRm9yTW90aW9uQmx1clsgci5OT0RFIF0gPSBmYWxzZTtcbiAgICAgIHIuY2xlYXJlZEZvck1vdGlvbkJsdXJbIHIuRFJBRyBdID0gZmFsc2U7XG4gICAgICByLm1vdGlvbkJsdXIgPSBmYWxzZTtcbiAgICAgIHIuY2xlYXJpbmdNb3Rpb25CbHVyID0gIXRleHR1cmVEcmF3O1xuICAgICAgci5tYkZyYW1lcyA9IDA7XG5cbiAgICAgIG5lZWREcmF3WyByLk5PREUgXSA9IHRydWU7XG4gICAgICBuZWVkRHJhd1sgci5EUkFHIF0gPSB0cnVlO1xuXG4gICAgICByLnJlZHJhdygpO1xuICAgIH0sIG1vdGlvbkJsdXJEZWxheSApO1xuICB9XG5cbiAgci5kcmF3aW5nSW1hZ2UgPSBmYWxzZTtcblxuXG4gIGlmKCAhZm9yY2VkQ29udGV4dCAmJiAhci5pbml0cmVuZGVyICl7XG4gICAgci5pbml0cmVuZGVyID0gdHJ1ZTtcbiAgICBjeS50cmlnZ2VyKCAnaW5pdHJlbmRlcicgKTtcbiAgfVxuXG4gIGlmKCAhZm9yY2VkQ29udGV4dCApe1xuICAgIGN5LnRyaWdnZXIoJ3JlbmRlcicpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ1JwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWF0aCA9IHJlcXVpcmUoICcuLi8uLi8uLi9tYXRoJyApO1xuXG52YXIgQ1JwID0ge307XG5cbi8vIEBPIFBvbHlnb24gZHJhd2luZ1xuQ1JwLmRyYXdQb2x5Z29uUGF0aCA9IGZ1bmN0aW9uKFxuICBjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBwb2ludHMgKXtcblxuICB2YXIgaGFsZlcgPSB3aWR0aCAvIDI7XG4gIHZhciBoYWxmSCA9IGhlaWdodCAvIDI7XG5cbiAgaWYoIGNvbnRleHQuYmVnaW5QYXRoICl7IGNvbnRleHQuYmVnaW5QYXRoKCk7IH1cblxuICBjb250ZXh0Lm1vdmVUbyggeCArIGhhbGZXICogcG9pbnRzWzBdLCB5ICsgaGFsZkggKiBwb2ludHNbMV0gKTtcblxuICBmb3IoIHZhciBpID0gMTsgaSA8IHBvaW50cy5sZW5ndGggLyAyOyBpKysgKXtcbiAgICBjb250ZXh0LmxpbmVUbyggeCArIGhhbGZXICogcG9pbnRzWyBpICogMl0sIHkgKyBoYWxmSCAqIHBvaW50c1sgaSAqIDIgKyAxXSApO1xuICB9XG5cbiAgY29udGV4dC5jbG9zZVBhdGgoKTtcbn07XG5cbi8vIFJvdW5kIHJlY3RhbmdsZSBkcmF3aW5nXG5DUnAuZHJhd1JvdW5kUmVjdGFuZ2xlUGF0aCA9IGZ1bmN0aW9uKFxuICBjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICl7XG5cbiAgdmFyIGhhbGZXaWR0aCA9IHdpZHRoIC8gMjtcbiAgdmFyIGhhbGZIZWlnaHQgPSBoZWlnaHQgLyAyO1xuICB2YXIgY29ybmVyUmFkaXVzID0gbWF0aC5nZXRSb3VuZFJlY3RhbmdsZVJhZGl1cyggd2lkdGgsIGhlaWdodCApO1xuXG4gIGlmKCBjb250ZXh0LmJlZ2luUGF0aCApeyBjb250ZXh0LmJlZ2luUGF0aCgpOyB9XG5cbiAgLy8gU3RhcnQgYXQgdG9wIG1pZGRsZVxuICBjb250ZXh0Lm1vdmVUbyggeCwgeSAtIGhhbGZIZWlnaHQgKTtcbiAgLy8gQXJjIGZyb20gbWlkZGxlIHRvcCB0byByaWdodCBzaWRlXG4gIGNvbnRleHQuYXJjVG8oIHggKyBoYWxmV2lkdGgsIHkgLSBoYWxmSGVpZ2h0LCB4ICsgaGFsZldpZHRoLCB5LCBjb3JuZXJSYWRpdXMgKTtcbiAgLy8gQXJjIGZyb20gcmlnaHQgc2lkZSB0byBib3R0b21cbiAgY29udGV4dC5hcmNUbyggeCArIGhhbGZXaWR0aCwgeSArIGhhbGZIZWlnaHQsIHgsIHkgKyBoYWxmSGVpZ2h0LCBjb3JuZXJSYWRpdXMgKTtcbiAgLy8gQXJjIGZyb20gYm90dG9tIHRvIGxlZnQgc2lkZVxuICBjb250ZXh0LmFyY1RvKCB4IC0gaGFsZldpZHRoLCB5ICsgaGFsZkhlaWdodCwgeCAtIGhhbGZXaWR0aCwgeSwgY29ybmVyUmFkaXVzICk7XG4gIC8vIEFyYyBmcm9tIGxlZnQgc2lkZSB0byB0b3BCb3JkZXJcbiAgY29udGV4dC5hcmNUbyggeCAtIGhhbGZXaWR0aCwgeSAtIGhhbGZIZWlnaHQsIHgsIHkgLSBoYWxmSGVpZ2h0LCBjb3JuZXJSYWRpdXMgKTtcbiAgLy8gSm9pbiBsaW5lXG4gIGNvbnRleHQubGluZVRvKCB4LCB5IC0gaGFsZkhlaWdodCApO1xuXG5cbiAgY29udGV4dC5jbG9zZVBhdGgoKTtcbn07XG5cbnZhciBzaW4wID0gTWF0aC5zaW4oIDAgKTtcbnZhciBjb3MwID0gTWF0aC5jb3MoIDAgKTtcblxudmFyIHNpbiA9IHt9O1xudmFyIGNvcyA9IHt9O1xuXG52YXIgZWxsaXBzZVN0ZXBTaXplID0gTWF0aC5QSSAvIDQwO1xuXG5mb3IoIHZhciBpID0gMCAqIE1hdGguUEk7IGkgPCAyICogTWF0aC5QSTsgaSArPSBlbGxpcHNlU3RlcFNpemUgKXtcbiAgc2luWyBpIF0gPSBNYXRoLnNpbiggaSApO1xuICBjb3NbIGkgXSA9IE1hdGguY29zKCBpICk7XG59XG5cbkNScC5kcmF3RWxsaXBzZVBhdGggPSBmdW5jdGlvbiggY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsIGhlaWdodCApe1xuICAgIGlmKCBjb250ZXh0LmJlZ2luUGF0aCApeyBjb250ZXh0LmJlZ2luUGF0aCgpOyB9XG5cbiAgICBpZiggY29udGV4dC5lbGxpcHNlICl7XG4gICAgICBjb250ZXh0LmVsbGlwc2UoIGNlbnRlclgsIGNlbnRlclksIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMiwgMCwgMCwgMiAqIE1hdGguUEkgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHhQb3MsIHlQb3M7XG4gICAgICB2YXIgcncgPSB3aWR0aCAvIDI7XG4gICAgICB2YXIgcmggPSBoZWlnaHQgLyAyO1xuICAgICAgZm9yKCB2YXIgaSA9IDAgKiBNYXRoLlBJOyBpIDwgMiAqIE1hdGguUEk7IGkgKz0gZWxsaXBzZVN0ZXBTaXplICl7XG4gICAgICAgIHhQb3MgPSBjZW50ZXJYIC0gKHJ3ICogc2luWyBpIF0pICogc2luMCArIChydyAqIGNvc1sgaSBdKSAqIGNvczA7XG4gICAgICAgIHlQb3MgPSBjZW50ZXJZICsgKHJoICogY29zWyBpIF0pICogc2luMCArIChyaCAqIHNpblsgaSBdKSAqIGNvczA7XG5cbiAgICAgICAgaWYoIGkgPT09IDAgKXtcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyggeFBvcywgeVBvcyApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQubGluZVRvKCB4UG9zLCB5UG9zICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENScDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG1hdGggPSByZXF1aXJlKCAnLi4vLi4vLi4vbWF0aCcgKTtcbnZhciB1dGlsID0gcmVxdWlyZSggJy4uLy4uLy4uL3V0aWwnICk7XG52YXIgSGVhcCA9IHJlcXVpcmUoICcuLi8uLi8uLi9oZWFwJyApO1xudmFyIGRlZnMgPSByZXF1aXJlKCAnLi90ZXh0dXJlLWNhY2hlLWRlZnMnICk7XG5cbnZhciBtaW5UeHJIID0gMjU7IC8vIHRoZSBzaXplIG9mIHRoZSB0ZXh0dXJlIGNhY2hlIGZvciBzbWFsbCBoZWlnaHQgZWxlcyAoc3BlY2lhbCBjYXNlKVxudmFyIHR4clN0ZXBIID0gNTA7IC8vIHRoZSBtaW4gc2l6ZSBvZiB0aGUgcmVndWxhciBjYWNoZSwgYW5kIHRoZSBzaXplIGl0IGluY3JlYXNlcyB3aXRoIGVhY2ggc3RlcCB1cFxudmFyIG1pbkx2bCA9IC00OyAvLyB3aGVuIHNjYWxpbmcgc21hbGxlciB0aGFuIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byByZS1yZW5kZXJcbnZhciBtYXhMdmwgPSAyOyAvLyB3aGVuIGxhcmdlciB0aGFuIHRoaXMgc2NhbGUganVzdCByZW5kZXIgZGlyZWN0bHkgKGNhY2hpbmcgaXMgbm90IGhlbHBmdWwpXG52YXIgbWF4Wm9vbSA9IDMuOTk7IC8vIGJleW9uZCB0aGlzIHpvb20gbGV2ZWwsIGxheWVyZWQgdGV4dHVyZXMgYXJlIG5vdCB1c2VkXG52YXIgZWxlVHhyU3BhY2luZyA9IDg7IC8vIHNwYWNpbmcgYmV0d2VlbiBlbGVtZW50cyBvbiB0ZXh0dXJlcyB0byBhdm9pZCBibGl0dGluZyBvdmVybGFwc1xudmFyIGRlZlR4cldpZHRoID0gMTAyNDsgLy8gZGVmYXVsdC9taW5pbXVtIHRleHR1cmUgd2lkdGhcbnZhciBtYXhUeHJXID0gMTAyNDsgLy8gdGhlIG1heGltdW0gd2lkdGggb2YgYSB0ZXh0dXJlXG52YXIgbWF4VHhySCA9IDEwMjQ7ICAvLyB0aGUgbWF4aW11bSBoZWlnaHQgb2YgYSB0ZXh0dXJlXG52YXIgbWluVXRpbGl0eSA9IDAuNTsgLy8gaWYgdXNhZ2Ugb2YgdGV4dHVyZSBpcyBsZXNzIHRoYW4gdGhpcywgaXQgaXMgcmV0aXJlZFxudmFyIG1heEZ1bGxuZXNzID0gMC44OyAvLyBmdWxsbmVzcyBvZiB0ZXh0dXJlIGFmdGVyIHdoaWNoIHF1ZXVlIHJlbW92YWwgaXMgY2hlY2tlZFxudmFyIG1heEZ1bGxuZXNzQ2hlY2tzID0gMTA7IC8vIGRlcXVldWVkIGFmdGVyIHRoaXMgbWFueSBjaGVja3NcbnZhciBhbGxvd0VkZ2VUeHJDYWNoaW5nID0gZmFsc2U7IC8vIHdoZXRoZXIgZWRnZXMgY2FuIGJlIGNhY2hlZCBhcyB0ZXh0dXJlcyAoVE9ETyBtYXliZSBiZXR0ZXIgb24gaWYgd2ViZ2wgc3VwcG9ydGVkPylcbnZhciBhbGxvd1BhcmVudFR4ckNhY2hpbmcgPSBmYWxzZTsgLy8gd2hldGhlciBwYXJlbnQgbm9kZXMgY2FuIGJlIGNhY2hlZCBhcyB0ZXh0dXJlcyAoVE9ETyBtYXliZSBiZXR0ZXIgb24gaWYgd2ViZ2wgc3VwcG9ydGVkPylcbnZhciBkZXFDb3N0ID0gMC4xNTsgLy8gJSBvZiBhZGQnbCByZW5kZXJpbmcgY29zdCBhbGxvd2VkIGZvciBkZXF1ZXVpbmcgZWxlIGNhY2hlcyBlYWNoIGZyYW1lXG52YXIgZGVxQXZnQ29zdCA9IDAuMTsgLy8gJSBvZiBhZGQnbCByZW5kZXJpbmcgY29zdCBjb21wYXJlZCB0byBhdmVyYWdlIG92ZXJhbGwgcmVkcmF3IHRpbWVcbnZhciBkZXFOb0RyYXdDb3N0ID0gMC45OyAvLyAlIG9mIGF2ZyBmcmFtZSB0aW1lIHRoYXQgY2FuIGJlIHVzZWQgZm9yIGRlcXVldWVpbmcgd2hlbiBub3QgZHJhd2luZ1xudmFyIGRlcUZhc3RDb3N0ID0gMC45OyAvLyAlIG9mIGZyYW1lIHRpbWUgdG8gYmUgdXNlZCB3aGVuID42MGZwc1xudmFyIGRlcVJlZHJhd1RocmVzaG9sZCA9IDEwMDsgLy8gdGltZSB0byBiYXRjaCByZWRyYXdzIHRvZ2V0aGVyIGZyb20gZGVxdWV1ZWluZyB0byBhbGxvdyBtb3JlIGRlcXVldWVpbmcgY2FsY3MgdG8gaGFwcGVuIGluIHRoZSBtZWFud2hpbGVcbnZhciBtYXhEZXFTaXplID0gMTsgLy8gbnVtYmVyIG9mIGVsZXMgdG8gZGVxdWV1ZSBhbmQgcmVuZGVyIGF0IGhpZ2hlciB0ZXh0dXJlIGluIGVhY2ggYmF0Y2hcblxudmFyIGdldFR4clJlYXNvbnMgPSB7XG4gIGRlcXVldWU6ICdkZXF1ZXVlJyxcbiAgZG93bnNjYWxlOiAnZG93bnNjYWxlJyxcbiAgaGlnaFF1YWxpdHk6ICdoaWdoUXVhbGl0eSdcbn07XG5cbnZhciBFbGVtZW50VGV4dHVyZUNhY2hlID0gZnVuY3Rpb24oIHJlbmRlcmVyICl7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBzZWxmLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gIHNlbGYub25EZXF1ZXVlcyA9IFtdO1xuXG4gIHNlbGYuc2V0dXBEZXF1ZXVlaW5nKCk7XG59O1xuXG52YXIgRVRDcCA9IEVsZW1lbnRUZXh0dXJlQ2FjaGUucHJvdG90eXBlO1xuXG5FVENwLnJlYXNvbnMgPSBnZXRUeHJSZWFzb25zO1xuXG4vLyB0aGUgbGlzdCBvZiB0ZXh0dXJlcyBpbiB3aGljaCBuZXcgc3VidGV4dHVyZXMgZm9yIGVsZW1lbnRzIGNhbiBiZSBwbGFjZWRcbkVUQ3AuZ2V0VGV4dHVyZVF1ZXVlID0gZnVuY3Rpb24oIHR4ckggKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzZWxmLmVsZUltZ0NhY2hlcyA9IHNlbGYuZWxlSW1nQ2FjaGVzIHx8IHt9O1xuXG4gIHJldHVybiAoIHNlbGYuZWxlSW1nQ2FjaGVzWyB0eHJIIF0gPSBzZWxmLmVsZUltZ0NhY2hlc1sgdHhySCBdIHx8IFtdICk7XG59O1xuXG4vLyB0aGUgbGlzdCBvZiB1c3VzZWQgdGV4dHVyZXMgd2hpY2ggY2FuIGJlIHJlY3ljbGVkIChpbiB1c2UgaW4gdGV4dHVyZSBxdWV1ZSlcbkVUQ3AuZ2V0UmV0aXJlZFRleHR1cmVRdWV1ZSA9IGZ1bmN0aW9uKCB0eHJIICl7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgcnR4dHJRcyA9IHNlbGYuZWxlSW1nQ2FjaGVzLnJldGlyZWQgPSBzZWxmLmVsZUltZ0NhY2hlcy5yZXRpcmVkIHx8IHt9O1xuICB2YXIgcnR4dHJRID0gcnR4dHJRc1sgdHhySCBdID0gcnR4dHJRc1sgdHhySCBdIHx8IFtdO1xuXG4gIHJldHVybiBydHh0clE7XG59O1xuXG4vLyBxdWV1ZSBvZiBlbGVtZW50IGRyYXcgcmVxdWVzdHMgYXQgZGlmZmVyZW50IHNjYWxlIGxldmVsc1xuRVRDcC5nZXRFbGVtZW50UXVldWUgPSBmdW5jdGlvbigpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIHEgPSBzZWxmLmVsZUNhY2hlUXVldWUgPSBzZWxmLmVsZUNhY2hlUXVldWUgfHwgbmV3IEhlYXAoZnVuY3Rpb24oIGEsIGIgKXtcbiAgICByZXR1cm4gYi5yZXFzIC0gYS5yZXFzO1xuICB9KTtcblxuICByZXR1cm4gcTtcbn07XG5cbi8vIHF1ZXVlIG9mIGVsZW1lbnQgZHJhdyByZXF1ZXN0cyBhdCBkaWZmZXJlbnQgc2NhbGUgbGV2ZWxzIChlbGVtZW50IGlkIGxvb2t1cClcbkVUQ3AuZ2V0RWxlbWVudElkVG9RdWV1ZSA9IGZ1bmN0aW9uKCl7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgaWQycSA9IHNlbGYuZWxlSWRUb0NhY2hlUXVldWUgPSBzZWxmLmVsZUlkVG9DYWNoZVF1ZXVlIHx8IHt9O1xuXG4gIHJldHVybiBpZDJxO1xufTtcblxuRVRDcC5nZXRFbGVtZW50ID0gZnVuY3Rpb24oIGVsZSwgYmIsIHB4UmF0aW8sIGx2bCwgcmVhc29uICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHIgPSB0aGlzLnJlbmRlcmVyO1xuICB2YXIgcnMgPSBlbGUuX3ByaXZhdGUucnNjcmF0Y2g7XG4gIHZhciB6b29tID0gci5jeS56b29tKCk7XG5cbiAgaWYoIGJiLncgPT09IDAgfHwgYmIuaCA9PT0gMCApeyByZXR1cm4gbnVsbDsgfVxuXG4gIGlmKCBsdmwgPT0gbnVsbCApe1xuICAgIGx2bCA9IE1hdGguY2VpbCggbWF0aC5sb2cyKCB6b29tICogcHhSYXRpbyApICk7XG4gIH1cblxuICBpZiggbHZsIDwgbWluTHZsICl7XG4gICAgbHZsID0gbWluTHZsO1xuICB9IGVsc2UgaWYoIHpvb20gPj0gbWF4Wm9vbSB8fCBsdmwgPiBtYXhMdmwgKXtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBzY2FsZSA9IE1hdGgucG93KCAyLCBsdmwgKTtcbiAgdmFyIGVsZVNjYWxlZEggPSBiYi5oICogc2NhbGU7XG4gIHZhciBlbGVTY2FsZWRXID0gYmIudyAqIHNjYWxlO1xuICB2YXIgY2FjaGVzID0gcnMuaW1nQ2FjaGVzID0gcnMuaW1nQ2FjaGVzIHx8IHt9O1xuICB2YXIgZWxlQ2FjaGUgPSBjYWNoZXNbbHZsXTtcblxuICBpZiggZWxlQ2FjaGUgKXtcbiAgICByZXR1cm4gZWxlQ2FjaGU7XG4gIH1cblxuICB2YXIgdHhySDsgLy8gd2hpY2ggdGV4dHVyZSBoZWlnaHQgdGhpcyBlbGUgYmVsb25ncyB0b1xuXG4gIGlmKCBlbGVTY2FsZWRIIDw9IG1pblR4ckggKXtcbiAgICB0eHJIID0gbWluVHhySDtcbiAgfSBlbHNlIGlmKCBlbGVTY2FsZWRIIDw9IHR4clN0ZXBIICl7XG4gICAgdHhySCA9IHR4clN0ZXBIO1xuICB9IGVsc2Uge1xuICAgIHR4ckggPSBNYXRoLmNlaWwoIGVsZVNjYWxlZEggLyB0eHJTdGVwSCApICogdHhyU3RlcEg7XG4gIH1cblxuICBpZihcbiAgICBlbGVTY2FsZWRIID4gbWF4VHhySFxuICAgIHx8IGVsZVNjYWxlZFcgPiBtYXhUeHJXXG4gICAgfHwgKCAhYWxsb3dFZGdlVHhyQ2FjaGluZyAmJiBlbGUuaXNFZGdlKCkgKVxuICAgIHx8ICggIWFsbG93UGFyZW50VHhyQ2FjaGluZyAmJiBlbGUuaXNQYXJlbnQoKSApXG4gICl7XG4gICAgcmV0dXJuIG51bGw7IC8vIGNhY2hpbmcgbGFyZ2UgZWxlbWVudHMgaXMgbm90IGVmZmljaWVudFxuICB9XG5cbiAgdmFyIHR4clEgPSBzZWxmLmdldFRleHR1cmVRdWV1ZSggdHhySCApO1xuXG4gIC8vIGZpcnN0IHRyeSB0aGUgc2Vjb25kIGxhc3Qgb25lIGluIGNhc2UgaXQgaGFzIHNwYWNlIGF0IHRoZSBlbmRcbiAgdmFyIHR4ciA9IHR4clFbIHR4clEubGVuZ3RoIC0gMiBdO1xuXG4gIHZhciBhZGROZXdUeHIgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiBzZWxmLnJlY3ljbGVUZXh0dXJlKCB0eHJILCBlbGVTY2FsZWRXICkgfHwgc2VsZi5hZGRUZXh0dXJlKCB0eHJILCBlbGVTY2FsZWRXICk7XG4gIH07XG5cbiAgLy8gdHJ5IHRoZSBsYXN0IG9uZSBpZiB0aGVyZSBpcyBubyBzZWNvbmQgbGFzdCBvbmVcbiAgaWYoICF0eHIgKXtcbiAgICB0eHIgPSB0eHJRWyB0eHJRLmxlbmd0aCAtIDEgXTtcbiAgfVxuXG4gIC8vIGlmIHRoZSBsYXN0IG9uZSBkb2Vzbid0IGV4aXN0LCB3ZSBuZWVkIGEgZmlyc3Qgb25lXG4gIGlmKCAhdHhyICl7XG4gICAgdHhyID0gYWRkTmV3VHhyKCk7XG4gIH1cblxuICAvLyBpZiB0aGVyZSdzIG5vIHJvb20gaW4gdGhlIGN1cnJlbnQgdGV4dHVyZSwgd2UgbmVlZCBhIG5ldyBvbmVcbiAgaWYoIHR4ci53aWR0aCAtIHR4ci51c2VkV2lkdGggPCBlbGVTY2FsZWRXICl7XG4gICAgdHhyID0gYWRkTmV3VHhyKCk7XG4gIH1cblxuICB2YXIgc2NhbGVkTGFiZWxTaG93biA9IHIuZWxlVGV4dEJpZ2dlclRoYW5NaW4oIGVsZSwgc2NhbGUgKTtcbiAgdmFyIHNjYWxhYmxlRnJvbSA9IGZ1bmN0aW9uKCBvdGhlckNhY2hlICl7XG4gICAgcmV0dXJuIG90aGVyQ2FjaGUgJiYgb3RoZXJDYWNoZS5zY2FsZWRMYWJlbFNob3duID09PSBzY2FsZWRMYWJlbFNob3duO1xuICB9O1xuXG4gIHZhciBkZXFpbmcgPSByZWFzb24gJiYgcmVhc29uID09PSBnZXRUeHJSZWFzb25zLmRlcXVldWU7XG4gIHZhciBoaWdoUXVhbGl0eVJlcSA9IHJlYXNvbiAmJiByZWFzb24gPT09IGdldFR4clJlYXNvbnMuaGlnaFF1YWxpdHk7XG4gIHZhciBkb3duc2NhbGVSZXEgPSByZWFzb24gJiYgcmVhc29uID09PSBnZXRUeHJSZWFzb25zLmRvd25zY2FsZTtcblxuICB2YXIgaGlnaGVyQ2FjaGU7IC8vIHRoZSBuZWFyZXN0IGNhY2hlIHdpdGggYSBoaWdoZXIgbGV2ZWxcbiAgZm9yKCB2YXIgbCA9IGx2bCArIDE7IGwgPD0gbWF4THZsOyBsKysgKXtcbiAgICB2YXIgYyA9IGNhY2hlc1tsXTtcblxuICAgIGlmKCBjICl7IGhpZ2hlckNhY2hlID0gYzsgYnJlYWs7IH1cbiAgfVxuXG4gIHZhciBvbmVVcENhY2hlID0gaGlnaGVyQ2FjaGUgJiYgaGlnaGVyQ2FjaGUubGV2ZWwgPT09IGx2bCArIDEgPyBoaWdoZXJDYWNoZSA6IG51bGw7XG5cbiAgdmFyIGRvd25zY2FsZSA9IGZ1bmN0aW9uKCl7XG4gICAgdHhyLmNvbnRleHQuZHJhd0ltYWdlKFxuICAgICAgb25lVXBDYWNoZS50ZXh0dXJlLmNhbnZhcyxcbiAgICAgIG9uZVVwQ2FjaGUueCwgMCxcbiAgICAgIG9uZVVwQ2FjaGUud2lkdGgsIG9uZVVwQ2FjaGUuaGVpZ2h0LFxuICAgICAgdHhyLnVzZWRXaWR0aCwgMCxcbiAgICAgIGVsZVNjYWxlZFcsIGVsZVNjYWxlZEhcbiAgICApO1xuICB9O1xuXG4gIGlmKCBzY2FsYWJsZUZyb20ob25lVXBDYWNoZSkgKXtcbiAgICAvLyB0aGVuIHdlIGNhbiByZWxhdGl2ZWx5IGNoZWFwbHkgcmVzY2FsZSB0aGUgZXhpc3RpbmcgaW1hZ2Ugdy9vIHJlcmVuZGVyaW5nXG4gICAgZG93bnNjYWxlKCk7XG5cbiAgfSBlbHNlIGlmKCBzY2FsYWJsZUZyb20oaGlnaGVyQ2FjaGUpICl7XG4gICAgLy8gdGhlbiB1c2UgdGhlIGhpZ2hlciBjYWNoZSBmb3Igbm93IGFuZCBxdWV1ZSB0aGUgbmV4dCBsZXZlbCBkb3duXG4gICAgLy8gdG8gY2hlYXBseSBzY2FsZSB0b3dhcmRzIHRoZSBzbWFsbGVyIGxldmVsXG5cbiAgICBpZiggaGlnaFF1YWxpdHlSZXEgKXtcbiAgICAgIGZvciggdmFyIGwgPSBoaWdoZXJDYWNoZS5sZXZlbDsgbCA+IGx2bDsgbC0tICl7XG4gICAgICAgIG9uZVVwQ2FjaGUgPSBzZWxmLmdldEVsZW1lbnQoIGVsZSwgYmIsIHB4UmF0aW8sIGwsIGdldFR4clJlYXNvbnMuZG93bnNjYWxlICk7XG4gICAgICB9XG5cbiAgICAgIGRvd25zY2FsZSgpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYucXVldWVFbGVtZW50KCBlbGUsIGJiLCBoaWdoZXJDYWNoZS5sZXZlbCAtIDEgKTtcblxuICAgICAgcmV0dXJuIGhpZ2hlckNhY2hlO1xuICAgIH1cbiAgfSBlbHNlIHtcblxuICAgIHZhciBsb3dlckNhY2hlOyAvLyB0aGUgbmVhcmVzdCBjYWNoZSB3aXRoIGEgbG93ZXIgbGV2ZWxcbiAgICBpZiggIWRlcWluZyAmJiAhaGlnaFF1YWxpdHlSZXEgJiYgIWRvd25zY2FsZVJlcSApe1xuICAgICAgZm9yKCB2YXIgbCA9IGx2bCAtIDE7IGwgPj0gbWluTHZsOyBsLS0gKXtcbiAgICAgICAgdmFyIGMgPSBjYWNoZXNbbF07XG5cbiAgICAgICAgaWYoIGMgKXsgbG93ZXJDYWNoZSA9IGM7IGJyZWFrOyB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYoIHNjYWxhYmxlRnJvbShsb3dlckNhY2hlKSApe1xuICAgICAgLy8gdGhlbiB1c2UgdGhlIGxvd2VyIHF1YWxpdHkgY2FjaGUgZm9yIG5vdyBhbmQgcXVldWUgdGhlIGJldHRlciBvbmUgZm9yIGxhdGVyXG5cbiAgICAgIHNlbGYucXVldWVFbGVtZW50KCBlbGUsIGJiLCBsdmwgKTtcblxuICAgICAgcmV0dXJuIGxvd2VyQ2FjaGU7XG4gICAgfVxuXG4gICAgdHhyLmNvbnRleHQudHJhbnNsYXRlKCB0eHIudXNlZFdpZHRoLCAwICk7XG4gICAgdHhyLmNvbnRleHQuc2NhbGUoIHNjYWxlLCBzY2FsZSApO1xuXG4gICAgci5kcmF3RWxlbWVudCggdHhyLmNvbnRleHQsIGVsZSwgYmIsIHNjYWxlZExhYmVsU2hvd24gKTtcblxuICAgIHR4ci5jb250ZXh0LnNjYWxlKCAxL3NjYWxlLCAxL3NjYWxlICk7XG4gICAgdHhyLmNvbnRleHQudHJhbnNsYXRlKCAtdHhyLnVzZWRXaWR0aCwgMCApO1xuICB9XG5cbiAgZWxlQ2FjaGUgPSBjYWNoZXNbbHZsXSA9IHtcbiAgICBlbGU6IGVsZSxcbiAgICB4OiB0eHIudXNlZFdpZHRoLFxuICAgIHRleHR1cmU6IHR4cixcbiAgICBsZXZlbDogbHZsLFxuICAgIHNjYWxlOiBzY2FsZSxcbiAgICB3aWR0aDogZWxlU2NhbGVkVyxcbiAgICBoZWlnaHQ6IGVsZVNjYWxlZEgsXG4gICAgc2NhbGVkTGFiZWxTaG93bjogc2NhbGVkTGFiZWxTaG93blxuICB9O1xuXG4gIHR4ci51c2VkV2lkdGggKz0gTWF0aC5jZWlsKCBlbGVTY2FsZWRXICsgZWxlVHhyU3BhY2luZyApO1xuXG4gIHR4ci5lbGVDYWNoZXMucHVzaCggZWxlQ2FjaGUgKTtcblxuICBzZWxmLmNoZWNrVGV4dHVyZUZ1bGxuZXNzKCB0eHIgKTtcblxuICByZXR1cm4gZWxlQ2FjaGU7XG59O1xuXG5FVENwLmludmFsaWRhdGVFbGVtZW50ID0gZnVuY3Rpb24oIGVsZSApe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjYWNoZXMgPSBlbGUuX3ByaXZhdGUucnNjcmF0Y2guaW1nQ2FjaGVzO1xuXG4gIGlmKCBjYWNoZXMgKXtcbiAgICBmb3IoIHZhciBsdmwgPSBtaW5Mdmw7IGx2bCA8PSBtYXhMdmw7IGx2bCsrICl7XG4gICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbIGx2bCBdO1xuXG4gICAgICBpZiggY2FjaGUgKXtcbiAgICAgICAgdmFyIHR4ciA9IGNhY2hlLnRleHR1cmU7XG5cbiAgICAgICAgLy8gcmVtb3ZlIHNwYWNlIGZyb20gdGhlIHRleHR1cmUgaXQgYmVsb25ncyB0b1xuICAgICAgICB0eHIuaW52YWxpZGF0ZWRXaWR0aCArPSBjYWNoZS53aWR0aDtcblxuICAgICAgICAvLyByZW1vdmUgcmVmcyB3aXRoIHRoZSBlbGVtZW50XG4gICAgICAgIGNhY2hlc1sgbHZsIF0gPSBudWxsO1xuICAgICAgICB1dGlsLnJlbW92ZUZyb21BcnJheSggdHhyLmVsZUNhY2hlcywgY2FjaGUgKTtcblxuICAgICAgICAvLyBtaWdodCBoYXZlIHRvIHJlbW92ZSB0aGUgZW50aXJlIHRleHR1cmUgaWYgaXQncyBub3QgZWZmaWNpZW50bHkgdXNpbmcgaXRzIHNwYWNlXG4gICAgICAgIHNlbGYuY2hlY2tUZXh0dXJlVXRpbGl0eSggdHhyICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5FVENwLmNoZWNrVGV4dHVyZVV0aWxpdHkgPSBmdW5jdGlvbiggdHhyICl7XG4gIC8vIGludmFsaWRhdGUgYWxsIGVudHJpZXMgaW4gdGhlIGNhY2hlIGlmIHRoZSBjYWNoZSBzaXplIGlzIHNtYWxsXG4gIGlmKCB0eHIuaW52YWxpZGF0ZWRXaWR0aCA+PSBtaW5VdGlsaXR5ICogdHhyLndpZHRoICl7XG4gICAgdGhpcy5yZXRpcmVUZXh0dXJlKCB0eHIgKTtcbiAgfVxufTtcblxuRVRDcC5jaGVja1RleHR1cmVGdWxsbmVzcyA9IGZ1bmN0aW9uKCB0eHIgKXtcbiAgLy8gaWYgdGV4dHVyZSBoYXMgYmVlbiBtb3N0bHkgZmlsbGVkIGFuZCBwYXNzZWQgb3ZlciBzZXZlcmFsIHRpbWVzLCByZW1vdmVcbiAgLy8gaXQgZnJvbSB0aGUgcXVldWUgc28gd2UgZG9uJ3QgbmVlZCB0byB3YXN0ZSB0aW1lIGxvb2tpbmcgYXQgaXQgdG8gcHV0IG5ldyB0aGluZ3NcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB0eHJRID0gc2VsZi5nZXRUZXh0dXJlUXVldWUoIHR4ci5oZWlnaHQgKTtcblxuICBpZiggdHhyLnVzZWRXaWR0aCAvIHR4ci53aWR0aCA+IG1heEZ1bGxuZXNzICYmIHR4ci5mdWxsbmVzc0NoZWNrcyA+PSBtYXhGdWxsbmVzc0NoZWNrcyApe1xuICAgIHV0aWwucmVtb3ZlRnJvbUFycmF5KCB0eHJRLCB0eHIgKTtcbiAgfSBlbHNlIHtcbiAgICB0eHIuZnVsbG5lc3NDaGVja3MrKztcbiAgfVxufTtcblxuRVRDcC5yZXRpcmVUZXh0dXJlID0gZnVuY3Rpb24oIHR4ciApe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB0eHJIID0gdHhyLmhlaWdodDtcbiAgdmFyIHR4clEgPSBzZWxmLmdldFRleHR1cmVRdWV1ZSggdHhySCApO1xuXG4gIC8vIHJldGlyZSB0aGUgdGV4dHVyZSBmcm9tIHRoZSBhY3RpdmUgLyBzZWFyY2hhYmxlIHF1ZXVlOlxuXG4gIHV0aWwucmVtb3ZlRnJvbUFycmF5KCB0eHJRLCB0eHIgKTtcblxuICB0eHIucmV0aXJlZCA9IHRydWU7XG5cbiAgLy8gcmVtb3ZlIHRoZSByZWZzIGZyb20gdGhlIGVsZXMgdG8gdGhlIGNhY2hlczpcblxuICB2YXIgZWxlQ2FjaGVzID0gdHhyLmVsZUNhY2hlcztcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IGVsZUNhY2hlcy5sZW5ndGg7IGkrKyApe1xuICAgIHZhciBlbGVDYWNoZSA9IGVsZUNhY2hlc1tpXTtcbiAgICB2YXIgZWxlID0gZWxlQ2FjaGUuZWxlO1xuICAgIHZhciBsdmwgPSBlbGVDYWNoZS5sZXZlbDtcbiAgICB2YXIgaW1nQ2FjaGVzID0gZWxlLl9wcml2YXRlLnJzY3JhdGNoLmltZ0NhY2hlcztcblxuICAgIGlmKCBpbWdDYWNoZXMgKXtcbiAgICAgIGltZ0NhY2hlc1sgbHZsIF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHV0aWwuY2xlYXJBcnJheSggZWxlQ2FjaGVzICk7XG5cbiAgLy8gYWRkIHRoZSB0ZXh0dXJlIHRvIGEgcmV0aXJlZCBxdWV1ZSBzbyBpdCBjYW4gYmUgcmVjeWNsZWQgaW4gZnV0dXJlOlxuXG4gIHZhciBydHh0clEgPSBzZWxmLmdldFJldGlyZWRUZXh0dXJlUXVldWUoIHR4ckggKTtcblxuICBydHh0clEucHVzaCggdHhyICk7XG59O1xuXG5FVENwLmFkZFRleHR1cmUgPSBmdW5jdGlvbiggdHhySCwgbWluVyApe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB0eHJRID0gc2VsZi5nZXRUZXh0dXJlUXVldWUoIHR4ckggKTtcbiAgdmFyIHR4ciA9IHt9O1xuXG4gIHR4clEucHVzaCggdHhyICk7XG5cbiAgdHhyLmVsZUNhY2hlcyA9IFtdO1xuXG4gIHR4ci5oZWlnaHQgPSB0eHJIO1xuICB0eHIud2lkdGggPSBNYXRoLm1heCggZGVmVHhyV2lkdGgsIG1pblcgKTtcbiAgdHhyLnVzZWRXaWR0aCA9IDA7XG4gIHR4ci5pbnZhbGlkYXRlZFdpZHRoID0gMDtcbiAgdHhyLmZ1bGxuZXNzQ2hlY2tzID0gMDtcblxuICB0eHIuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgdHhyLmNhbnZhcy53aWR0aCA9IHR4ci53aWR0aDtcbiAgdHhyLmNhbnZhcy5oZWlnaHQgPSB0eHIuaGVpZ2h0O1xuXG4gIHR4ci5jb250ZXh0ID0gdHhyLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gIHJldHVybiB0eHI7XG59O1xuXG5FVENwLnJlY3ljbGVUZXh0dXJlID0gZnVuY3Rpb24oIHR4ckgsIG1pblcgKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgdHhyUSA9IHNlbGYuZ2V0VGV4dHVyZVF1ZXVlKCB0eHJIICk7XG4gIHZhciBydHh0clEgPSBzZWxmLmdldFJldGlyZWRUZXh0dXJlUXVldWUoIHR4ckggKTtcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IHJ0eHRyUS5sZW5ndGg7IGkrKyApe1xuICAgIHZhciB0eHIgPSBydHh0clFbaV07XG5cbiAgICBpZiggdHhyLndpZHRoID49IG1pblcgKXtcbiAgICAgIHR4ci5yZXRpcmVkID0gZmFsc2U7XG5cbiAgICAgIHR4ci51c2VkV2lkdGggPSAwO1xuICAgICAgdHhyLmludmFsaWRhdGVkV2lkdGggPSAwO1xuICAgICAgdHhyLmZ1bGxuZXNzQ2hlY2tzID0gMDtcblxuICAgICAgdXRpbC5jbGVhckFycmF5KCB0eHIuZWxlQ2FjaGVzICk7XG5cbiAgICAgIHR4ci5jb250ZXh0LmNsZWFyUmVjdCggMCwgMCwgdHhyLndpZHRoLCB0eHIuaGVpZ2h0ICk7XG5cbiAgICAgIHV0aWwucmVtb3ZlRnJvbUFycmF5KCBydHh0clEsIHR4ciApO1xuICAgICAgdHhyUS5wdXNoKCB0eHIgKTtcblxuICAgICAgcmV0dXJuIHR4cjtcbiAgICB9XG4gIH1cbn07XG5cbkVUQ3AucXVldWVFbGVtZW50ID0gZnVuY3Rpb24oIGVsZSwgYmIsIGx2bCApe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBxID0gc2VsZi5nZXRFbGVtZW50UXVldWUoKTtcbiAgdmFyIGlkMnEgPSBzZWxmLmdldEVsZW1lbnRJZFRvUXVldWUoKTtcbiAgdmFyIGlkID0gZWxlLmlkKCk7XG4gIHZhciBleGlzdGluZ1JlcSA9IGlkMnFbIGlkIF07XG5cbiAgaWYoIGV4aXN0aW5nUmVxICl7IC8vIHVzZSB0aGUgbWF4IGx2bCBiL2MgaW4gYmV0d2VlbiBsdmxzIGFyZSBjaGVhcCB0byBtYWtlXG4gICAgZXhpc3RpbmdSZXEubGV2ZWwgPSBNYXRoLm1heCggZXhpc3RpbmdSZXEubGV2ZWwsIGx2bCApO1xuICAgIGV4aXN0aW5nUmVxLnJlcXMrKztcblxuICAgIHEudXBkYXRlSXRlbSggZXhpc3RpbmdSZXEgKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcmVxID0ge1xuICAgICAgZWxlOiBlbGUsXG4gICAgICBiYjogYmIsXG4gICAgICBwb3NpdGlvbjogbWF0aC5jb3B5UG9zaXRpb24oIGVsZS5wb3NpdGlvbigpICksXG4gICAgICBsZXZlbDogbHZsLFxuICAgICAgcmVxczogMVxuICAgIH07XG5cbiAgICBpZiggZWxlLmlzRWRnZSgpICl7XG4gICAgICByZXEucG9zaXRpb25zID0ge1xuICAgICAgICBzb3VyY2U6IG1hdGguY29weVBvc2l0aW9uKCBlbGUuc291cmNlKCkucG9zaXRpb24oKSApLFxuICAgICAgICB0YXJnZXQ6IG1hdGguY29weVBvc2l0aW9uKCBlbGUudGFyZ2V0KCkucG9zaXRpb24oKSApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHEucHVzaCggcmVxICk7XG5cbiAgICBpZDJxWyBpZCBdID0gcmVxO1xuICB9XG59O1xuXG5FVENwLmRlcXVldWUgPSBmdW5jdGlvbiggcHhSYXRpbywgZXh0ZW50ICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHEgPSBzZWxmLmdldEVsZW1lbnRRdWV1ZSgpO1xuICB2YXIgaWQycSA9IHNlbGYuZ2V0RWxlbWVudElkVG9RdWV1ZSgpO1xuICB2YXIgZGVxdWV1ZWQgPSBbXTtcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IG1heERlcVNpemU7IGkrKyApe1xuICAgIGlmKCBxLnNpemUoKSA+IDAgKXtcbiAgICAgIHZhciByZXEgPSBxLnBvcCgpO1xuXG4gICAgICBpZDJxWyByZXEuZWxlLmlkKCkgXSA9IG51bGw7XG5cbiAgICAgIGRlcXVldWVkLnB1c2goIHJlcSApO1xuXG4gICAgICB2YXIgZWxlID0gcmVxLmVsZTtcbiAgICAgIHZhciBiYjtcblxuICAgICAgaWYoXG4gICAgICAgICggZWxlLmlzRWRnZSgpXG4gICAgICAgICAgJiYgKFxuICAgICAgICAgICAgIW1hdGguYXJlUG9zaXRpb25zU2FtZSggZWxlLnNvdXJjZSgpLnBvc2l0aW9uKCksIHJlcS5wb3NpdGlvbnMuc291cmNlIClcbiAgICAgICAgICAgIHx8ICFtYXRoLmFyZVBvc2l0aW9uc1NhbWUoIGVsZS50YXJnZXQoKS5wb3NpdGlvbigpLCByZXEucG9zaXRpb25zLnRhcmdldCApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICAgIHx8ICggIW1hdGguYXJlUG9zaXRpb25zU2FtZSggZWxlLnBvc2l0aW9uKCksIHJlcS5wb3NpdGlvbiApIClcbiAgICAgICl7XG4gICAgICAgIGJiID0gZWxlLmJvdW5kaW5nQm94KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYiA9IHJlcS5iYjtcbiAgICAgIH1cblxuICAgICAgc2VsZi5nZXRFbGVtZW50KCByZXEuZWxlLCBiYiwgcHhSYXRpbywgcmVxLmxldmVsLCBnZXRUeHJSZWFzb25zLmRlcXVldWUgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRlcXVldWVkO1xufTtcblxuRVRDcC5vbkRlcXVldWUgPSBmdW5jdGlvbiggZm4gKXsgdGhpcy5vbkRlcXVldWVzLnB1c2goIGZuICk7IH07XG5FVENwLm9mZkRlcXVldWUgPSBmdW5jdGlvbiggZm4gKXsgdXRpbC5yZW1vdmVGcm9tQXJyYXkoIHRoaXMub25EZXF1ZXVlcywgZm4gKTsgfTtcblxuRVRDcC5zZXR1cERlcXVldWVpbmcgPSBkZWZzLnNldHVwRGVxdWV1ZWluZyh7XG4gIGRlcVJlZHJhd1RocmVzaG9sZDogZGVxUmVkcmF3VGhyZXNob2xkLFxuICBkZXFDb3N0OiBkZXFDb3N0LFxuICBkZXFBdmdDb3N0OiBkZXFBdmdDb3N0LFxuICBkZXFOb0RyYXdDb3N0OiBkZXFOb0RyYXdDb3N0LFxuICBkZXFGYXN0Q29zdDogZGVxRmFzdENvc3QsXG4gIGRlcTogZnVuY3Rpb24oIHNlbGYsIHB4UmF0aW8sIGV4dGVudCApe1xuICAgIHJldHVybiBzZWxmLmRlcXVldWUoIHB4UmF0aW8sIGV4dGVudCApO1xuICB9LFxuICBvbkRlcWQ6IGZ1bmN0aW9uKCBzZWxmLCBkZXFkICl7XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBzZWxmLm9uRGVxdWV1ZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBmbiA9IHNlbGYub25EZXF1ZXVlc1tpXTtcblxuICAgICAgZm4oIGRlcWQgKTtcbiAgICB9XG4gIH0sXG4gIHNob3VsZFJlZHJhdzogZnVuY3Rpb24oIHNlbGYsIGRlcWQsIHB4UmF0aW8sIGV4dGVudCApe1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZGVxZC5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGJiID0gZGVxZFtpXS5iYjtcblxuICAgICAgaWYoIG1hdGguYm91bmRpbmdCb3hlc0ludGVyc2VjdCggYmIsIGV4dGVudCApICl7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgcHJpb3JpdHk6IGZ1bmN0aW9uKCBzZWxmICl7XG4gICAgcmV0dXJuIHNlbGYucmVuZGVyZXIuYmVmb3JlUmVuZGVyUHJpb3JpdGllcy5lbGVUeHJEZXE7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVsZW1lbnRUZXh0dXJlQ2FjaGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpcyA9IHJlcXVpcmUoICcuLi8uLi8uLi9pcycgKTtcblxudmFyIENScCA9IHt9O1xuXG5DUnAuY3JlYXRlQnVmZmVyID0gZnVuY3Rpb24oIHcsIGggKXtcbiAgdmFyIGJ1ZmZlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdjYW52YXMnICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgYnVmZmVyLndpZHRoID0gdztcbiAgYnVmZmVyLmhlaWdodCA9IGg7XG5cbiAgcmV0dXJuIFsgYnVmZmVyLCBidWZmZXIuZ2V0Q29udGV4dCggJzJkJyApIF07XG59O1xuXG5DUnAuYnVmZmVyQ2FudmFzSW1hZ2UgPSBmdW5jdGlvbiggb3B0aW9ucyApe1xuICB2YXIgY3kgPSB0aGlzLmN5O1xuICB2YXIgZWxlcyA9IGN5Lm11dGFibGVFbGVtZW50cygpO1xuICB2YXIgYmIgPSBlbGVzLmJvdW5kaW5nQm94KCk7XG4gIHZhciB3aWR0aCA9IG9wdGlvbnMuZnVsbCA/IE1hdGguY2VpbCggYmIudyApIDogdGhpcy5jb250YWluZXIuY2xpZW50V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBvcHRpb25zLmZ1bGwgPyBNYXRoLmNlaWwoIGJiLmggKSA6IHRoaXMuY29udGFpbmVyLmNsaWVudEhlaWdodDtcbiAgdmFyIHNwZWNkTWF4RGltcyA9IGlzLm51bWJlciggb3B0aW9ucy5tYXhXaWR0aCApIHx8IGlzLm51bWJlciggb3B0aW9ucy5tYXhIZWlnaHQgKTtcbiAgdmFyIHB4UmF0aW8gPSB0aGlzLmdldFBpeGVsUmF0aW8oKTtcbiAgdmFyIHNjYWxlID0gMTtcblxuICBpZiggb3B0aW9ucy5zY2FsZSAhPT0gdW5kZWZpbmVkICl7XG4gICAgd2lkdGggKj0gb3B0aW9ucy5zY2FsZTtcbiAgICBoZWlnaHQgKj0gb3B0aW9ucy5zY2FsZTtcblxuICAgIHNjYWxlID0gb3B0aW9ucy5zY2FsZTtcbiAgfSBlbHNlIGlmKCBzcGVjZE1heERpbXMgKXtcbiAgICB2YXIgbWF4U2NhbGVXID0gSW5maW5pdHk7XG4gICAgdmFyIG1heFNjYWxlSCA9IEluZmluaXR5O1xuXG4gICAgaWYoIGlzLm51bWJlciggb3B0aW9ucy5tYXhXaWR0aCApICl7XG4gICAgICBtYXhTY2FsZVcgPSBzY2FsZSAqIG9wdGlvbnMubWF4V2lkdGggLyB3aWR0aDtcbiAgICB9XG5cbiAgICBpZiggaXMubnVtYmVyKCBvcHRpb25zLm1heEhlaWdodCApICl7XG4gICAgICBtYXhTY2FsZUggPSBzY2FsZSAqIG9wdGlvbnMubWF4SGVpZ2h0IC8gaGVpZ2h0O1xuICAgIH1cblxuICAgIHNjYWxlID0gTWF0aC5taW4oIG1heFNjYWxlVywgbWF4U2NhbGVIICk7XG5cbiAgICB3aWR0aCAqPSBzY2FsZTtcbiAgICBoZWlnaHQgKj0gc2NhbGU7XG4gIH1cblxuICBpZiggIXNwZWNkTWF4RGltcyApe1xuICAgIHdpZHRoICo9IHB4UmF0aW87XG4gICAgaGVpZ2h0ICo9IHB4UmF0aW87XG4gICAgc2NhbGUgKj0gcHhSYXRpbztcbiAgfVxuXG4gIHZhciBidWZmQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2NhbnZhcycgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4gIGJ1ZmZDYW52YXMud2lkdGggPSB3aWR0aDtcbiAgYnVmZkNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgYnVmZkNhbnZhcy5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcbiAgYnVmZkNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuXG4gIHZhciBidWZmQ3h0ID0gYnVmZkNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XG5cbiAgLy8gUmFzdGVyaXplIHRoZSBsYXllcnMsIGJ1dCBvbmx5IGlmIGNvbnRhaW5lciBoYXMgbm9uemVybyBzaXplXG4gIGlmKCB3aWR0aCA+IDAgJiYgaGVpZ2h0ID4gMCApe1xuXG4gICAgYnVmZkN4dC5jbGVhclJlY3QoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuICAgIGlmKCBvcHRpb25zLmJnICl7XG4gICAgICBidWZmQ3h0LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmc7XG4gICAgICBidWZmQ3h0LnJlY3QoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcbiAgICAgIGJ1ZmZDeHQuZmlsbCgpO1xuICAgIH1cblxuICAgIGJ1ZmZDeHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ3NvdXJjZS1vdmVyJztcblxuICAgIHZhciB6c29ydGVkRWxlcyA9IHRoaXMuZ2V0Q2FjaGVkWlNvcnRlZEVsZXMoKTtcblxuICAgIGlmKCBvcHRpb25zLmZ1bGwgKXsgLy8gZHJhdyB0aGUgZnVsbCBib3VuZHMgb2YgdGhlIGdyYXBoXG4gICAgICBidWZmQ3h0LnRyYW5zbGF0ZSggLWJiLngxICogc2NhbGUsIC1iYi55MSAqIHNjYWxlICk7XG4gICAgICBidWZmQ3h0LnNjYWxlKCBzY2FsZSwgc2NhbGUgKTtcblxuICAgICAgdGhpcy5kcmF3RWxlbWVudHMoIGJ1ZmZDeHQsIHpzb3J0ZWRFbGVzICk7XG4gICAgfSBlbHNlIHsgLy8gZHJhdyB0aGUgY3VycmVudCB2aWV3XG4gICAgICB2YXIgcGFuID0gY3kucGFuKCk7XG5cbiAgICAgIHZhciB0cmFuc2xhdGlvbiA9IHtcbiAgICAgICAgeDogcGFuLnggKiBzY2FsZSxcbiAgICAgICAgeTogcGFuLnkgKiBzY2FsZVxuICAgICAgfTtcblxuICAgICAgc2NhbGUgKj0gY3kuem9vbSgpO1xuXG4gICAgICBidWZmQ3h0LnRyYW5zbGF0ZSggdHJhbnNsYXRpb24ueCwgdHJhbnNsYXRpb24ueSApO1xuICAgICAgYnVmZkN4dC5zY2FsZSggc2NhbGUsIHNjYWxlICk7XG5cbiAgICAgIHRoaXMuZHJhd0VsZW1lbnRzKCBidWZmQ3h0LCB6c29ydGVkRWxlcyApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWZmQ2FudmFzO1xufTtcblxuZnVuY3Rpb24gYjY0VG9CbG9iKCBiNjQsIG1pbWVUeXBlICl7XG4gIHZhciBieXRlcyA9IGF0b2IoIGI2NCApO1xuICB2YXIgYnVmZiA9IG5ldyBBcnJheUJ1ZmZlciggYnl0ZXMubGVuZ3RoICk7XG4gIHZhciBidWZmVWludDggPSBuZXcgVWludDhBcnJheSggYnVmZiApO1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKysgKXtcbiAgICBidWZmVWludDhbaV0gPSBieXRlcy5jaGFyQ29kZUF0KGkpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBCbG9iKCBbYnVmZl0sIHsgdHlwZTogbWltZVR5cGUgfSApO1xufVxuXG5mdW5jdGlvbiBiNjRVcmlUb0I2NCggYjY0dXJpICl7XG4gIHZhciBpID0gYjY0dXJpLmluZGV4T2YoJywnKTtcblxuICByZXR1cm4gYjY0dXJpLnN1YnN0ciggaSArIDEgKTtcbn07XG5cbmZ1bmN0aW9uIG91dHB1dCggb3B0aW9ucywgY2FudmFzLCBtaW1lVHlwZSApe1xuICB2YXIgYjY0VXJpID0gY2FudmFzLnRvRGF0YVVSTCggbWltZVR5cGUsIG9wdGlvbnMucXVhbGl0eSApO1xuXG4gIHN3aXRjaCggb3B0aW9ucy5vdXRwdXQgKXtcbiAgICBjYXNlICdibG9iJzpcbiAgICAgIHJldHVybiBiNjRUb0Jsb2IoIGI2NFVyaVRvQjY0KCBiNjRVcmkgKSwgbWltZVR5cGUgKTtcblxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICByZXR1cm4gYjY0VXJpVG9CNjQoIGI2NFVyaSApO1xuXG4gICAgY2FzZSAnYmFzZTY0dXJpJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGI2NFVyaTtcbiAgfVxufVxuXG5DUnAucG5nID0gZnVuY3Rpb24oIG9wdGlvbnMgKXtcbiAgcmV0dXJuIG91dHB1dCggb3B0aW9ucywgdGhpcy5idWZmZXJDYW52YXNJbWFnZSggb3B0aW9ucyApLCAnaW1hZ2UvcG5nJyApO1xufTtcblxuQ1JwLmpwZyA9IGZ1bmN0aW9uKCBvcHRpb25zICl7XG4gIHJldHVybiBvdXRwdXQoIG9wdGlvbnMsIHRoaXMuYnVmZmVyQ2FudmFzSW1hZ2UoIG9wdGlvbnMgKSwgJ2ltYWdlL2pwZWcnICk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENScDtcbiIsIi8qXG5UaGUgY2FudmFzIHJlbmRlcmVyIHdhcyB3cml0dGVuIGJ5IFl1ZSBEb25nLlxuXG5Nb2RpZmljYXRpb25zIHRyYWNrZWQgb24gR2l0aHViLlxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoICcuLi8uLi8uLi91dGlsJyApO1xudmFyIGlzID0gcmVxdWlyZSggJy4uLy4uLy4uL2lzJyApO1xudmFyIEVsZW1lbnRUZXh0dXJlQ2FjaGUgPSByZXF1aXJlKCcuL2VsZS10ZXh0dXJlLWNhY2hlJyk7XG52YXIgTGF5ZXJlZFRleHR1cmVDYWNoZSA9IHJlcXVpcmUoJy4vbGF5ZXJlZC10ZXh0dXJlLWNhY2hlJyk7XG5cbnZhciBDUiA9IENhbnZhc1JlbmRlcmVyO1xudmFyIENScCA9IENhbnZhc1JlbmRlcmVyLnByb3RvdHlwZTtcblxuQ1JwLkNBTlZBU19MQVlFUlMgPSAzO1xuLy9cbkNScC5TRUxFQ1RfQk9YID0gMDtcbkNScC5EUkFHID0gMTtcbkNScC5OT0RFID0gMjtcblxuQ1JwLkJVRkZFUl9DT1VOVCA9IDM7XG4vL1xuQ1JwLlRFWFRVUkVfQlVGRkVSID0gMDtcbkNScC5NT1RJT05CTFVSX0JVRkZFUl9OT0RFID0gMTtcbkNScC5NT1RJT05CTFVSX0JVRkZFUl9EUkFHID0gMjtcblxuZnVuY3Rpb24gQ2FudmFzUmVuZGVyZXIoIG9wdGlvbnMgKXtcbiAgdmFyIHIgPSB0aGlzO1xuXG4gIHIuZGF0YSA9IHtcbiAgICBjYW52YXNlczogbmV3IEFycmF5KCBDUnAuQ0FOVkFTX0xBWUVSUyApLFxuICAgIGNvbnRleHRzOiBuZXcgQXJyYXkoIENScC5DQU5WQVNfTEFZRVJTICksXG4gICAgY2FudmFzTmVlZHNSZWRyYXc6IG5ldyBBcnJheSggQ1JwLkNBTlZBU19MQVlFUlMgKSxcblxuICAgIGJ1ZmZlckNhbnZhc2VzOiBuZXcgQXJyYXkoIENScC5CVUZGRVJfQ09VTlQgKSxcbiAgICBidWZmZXJDb250ZXh0czogbmV3IEFycmF5KCBDUnAuQ0FOVkFTX0xBWUVSUyApLFxuICB9O1xuXG4gIHIuZGF0YS5jYW52YXNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gIHZhciBjb250YWluZXJTdHlsZSA9IHIuZGF0YS5jYW52YXNDb250YWluZXIuc3R5bGU7XG4gIHIuZGF0YS5jYW52YXNDb250YWluZXIuc2V0QXR0cmlidXRlKCAnc3R5bGUnLCAnLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsMCwwLDApOycgKTtcbiAgY29udGFpbmVyU3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICBjb250YWluZXJTdHlsZS56SW5kZXggPSAnMCc7XG4gIGNvbnRhaW5lclN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG5cbiAgdmFyIGNvbnRhaW5lciA9IG9wdGlvbnMuY3kuY29udGFpbmVyKCk7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZCggci5kYXRhLmNhbnZhc0NvbnRhaW5lciApO1xuICBjb250YWluZXIuc2V0QXR0cmlidXRlKCAnc3R5bGUnLCAoIGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoICdzdHlsZScgKSB8fCAnJyApICsgJy13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLDAsMCwwKTsnICk7XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBDUnAuQ0FOVkFTX0xBWUVSUzsgaSsrICl7XG4gICAgdmFyIGNhbnZhcyA9IHIuZGF0YS5jYW52YXNlc1sgaSBdID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2NhbnZhcycgKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICByLmRhdGEuY29udGV4dHNbIGkgXSA9IGNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XG4gICAgY2FudmFzLnNldEF0dHJpYnV0ZSggJ3N0eWxlJywgJy13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IC1tb3otdXNlci1zZWxlY3Q6IC1tb3otbm9uZTsgdXNlci1zZWxlY3Q6IG5vbmU7IC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLDAsMCwwKTsgb3V0bGluZS1zdHlsZTogbm9uZTsnICsgKCBpcy5tcygpID8gJyAtbXMtdG91Y2gtYWN0aW9uOiBub25lOyB0b3VjaC1hY3Rpb246IG5vbmU7ICcgOiAnJyApICk7XG4gICAgY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICBjYW52YXMuc2V0QXR0cmlidXRlKCAnZGF0YS1pZCcsICdsYXllcicgKyBpICk7XG4gICAgY2FudmFzLnN0eWxlLnpJbmRleCA9IFN0cmluZyggQ1JwLkNBTlZBU19MQVlFUlMgLSBpICk7XG4gICAgci5kYXRhLmNhbnZhc0NvbnRhaW5lci5hcHBlbmRDaGlsZCggY2FudmFzICk7XG5cbiAgICByLmRhdGEuY2FudmFzTmVlZHNSZWRyYXdbIGkgXSA9IGZhbHNlO1xuICB9XG4gIHIuZGF0YS50b3BDYW52YXMgPSByLmRhdGEuY2FudmFzZXNbMF07XG5cbiAgci5kYXRhLmNhbnZhc2VzWyBDUnAuTk9ERSBdLnNldEF0dHJpYnV0ZSggJ2RhdGEtaWQnLCAnbGF5ZXInICsgQ1JwLk5PREUgKyAnLW5vZGUnICk7XG4gIHIuZGF0YS5jYW52YXNlc1sgQ1JwLlNFTEVDVF9CT1ggXS5zZXRBdHRyaWJ1dGUoICdkYXRhLWlkJywgJ2xheWVyJyArIENScC5TRUxFQ1RfQk9YICsgJy1zZWxlY3Rib3gnICk7XG4gIHIuZGF0YS5jYW52YXNlc1sgQ1JwLkRSQUcgXS5zZXRBdHRyaWJ1dGUoICdkYXRhLWlkJywgJ2xheWVyJyArIENScC5EUkFHICsgJy1kcmFnJyApO1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgQ1JwLkJVRkZFUl9DT1VOVDsgaSsrICl7XG4gICAgci5kYXRhLmJ1ZmZlckNhbnZhc2VzWyBpIF0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnY2FudmFzJyApOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgIHIuZGF0YS5idWZmZXJDb250ZXh0c1sgaSBdID0gci5kYXRhLmJ1ZmZlckNhbnZhc2VzWyBpIF0uZ2V0Q29udGV4dCggJzJkJyApO1xuICAgIHIuZGF0YS5idWZmZXJDYW52YXNlc1sgaSBdLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICByLmRhdGEuYnVmZmVyQ2FudmFzZXNbIGkgXS5zZXRBdHRyaWJ1dGUoICdkYXRhLWlkJywgJ2J1ZmZlcicgKyBpICk7XG4gICAgci5kYXRhLmJ1ZmZlckNhbnZhc2VzWyBpIF0uc3R5bGUuekluZGV4ID0gU3RyaW5nKCAtaSAtIDEgKTtcbiAgICByLmRhdGEuYnVmZmVyQ2FudmFzZXNbIGkgXS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgLy9yLmRhdGEuY2FudmFzQ29udGFpbmVyLmFwcGVuZENoaWxkKHIuZGF0YS5idWZmZXJDYW52YXNlc1tpXSk7XG4gIH1cblxuICByLnBhdGhzRW5hYmxlZCA9IHRydWU7XG5cbiAgci5kYXRhLmVsZVR4ckNhY2hlID0gbmV3IEVsZW1lbnRUZXh0dXJlQ2FjaGUoIHIgKTtcbiAgci5kYXRhLmx5clR4ckNhY2hlID0gbmV3IExheWVyZWRUZXh0dXJlQ2FjaGUoIHIsIHIuZGF0YS5lbGVUeHJDYWNoZSApO1xuXG4gIHIub25VcGRhdGVFbGVDYWxjcyhmdW5jdGlvbiBpbnZhbGlkYXRlVGV4dHVyZUNhY2hlcyggd2lsbERyYXcsIGVsZXMgKXtcbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBlbGUgPSBlbGVzW2ldO1xuICAgICAgdmFyIHJzID0gZWxlLl9wcml2YXRlLnJzdHlsZTtcbiAgICAgIHZhciBkZSA9IHJzLmRpcnR5RXZlbnRzO1xuXG4gICAgICBpZiggZWxlLmlzTm9kZSgpICYmIGRlICYmIGRlLmxlbmd0aCA9PT0gMSAmJiBkZVsncG9zaXRpb24nXSApe1xuICAgICAgICAvLyB0aGVuIGtlZXAgY2FjaGVkIGVsZSB0ZXh0dXJlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByLmRhdGEuZWxlVHhyQ2FjaGUuaW52YWxpZGF0ZUVsZW1lbnQoIGVsZSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmKCBlbGVzLmxlbmd0aCA+IDAgKXtcbiAgICAgIHIuZGF0YS5seXJUeHJDYWNoZS5pbnZhbGlkYXRlRWxlbWVudHMoIGVsZXMgKTtcbiAgICB9XG4gIH0pO1xufVxuXG5DUnAucmVkcmF3SGludCA9IGZ1bmN0aW9uKCBncm91cCwgYm9vbCApe1xuICB2YXIgciA9IHRoaXM7XG5cbiAgc3dpdGNoKCBncm91cCApe1xuICAgIGNhc2UgJ2VsZXMnOlxuICAgICAgci5kYXRhLmNhbnZhc05lZWRzUmVkcmF3WyBDUnAuTk9ERSBdID0gYm9vbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2RyYWcnOlxuICAgICAgci5kYXRhLmNhbnZhc05lZWRzUmVkcmF3WyBDUnAuRFJBRyBdID0gYm9vbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICByLmRhdGEuY2FudmFzTmVlZHNSZWRyYXdbIENScC5TRUxFQ1RfQk9YIF0gPSBib29sO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbi8vIHdoZXRoZXIgdG8gdXNlIFBhdGgyRCBjYWNoaW5nIGZvciBkcmF3aW5nXG52YXIgcGF0aHNJbXBsZCA9IHR5cGVvZiBQYXRoMkQgIT09ICd1bmRlZmluZWQnO1xuXG5DUnAucGF0aDJkRW5hYmxlZCA9IGZ1bmN0aW9uKCBvbiApe1xuICBpZiggb24gPT09IHVuZGVmaW5lZCApe1xuICAgIHJldHVybiB0aGlzLnBhdGhzRW5hYmxlZDtcbiAgfVxuXG4gIHRoaXMucGF0aHNFbmFibGVkID0gb24gPyB0cnVlIDogZmFsc2U7XG59O1xuXG5DUnAudXNlUGF0aHMgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gZmFsc2U7XG59O1xuXG5bXG4gIHJlcXVpcmUoICcuL2Fycm93LXNoYXBlcycgKSxcbiAgcmVxdWlyZSggJy4vZHJhd2luZy1lbGVtZW50cycgKSxcbiAgcmVxdWlyZSggJy4vZHJhd2luZy1lZGdlcycgKSxcbiAgcmVxdWlyZSggJy4vZHJhd2luZy1pbWFnZXMnICksXG4gIHJlcXVpcmUoICcuL2RyYXdpbmctbGFiZWwtdGV4dCcgKSxcbiAgcmVxdWlyZSggJy4vZHJhd2luZy1ub2RlcycgKSxcbiAgcmVxdWlyZSggJy4vZHJhd2luZy1yZWRyYXcnICksXG4gIHJlcXVpcmUoICcuL2RyYXdpbmctc2hhcGVzJyApLFxuICByZXF1aXJlKCAnLi9leHBvcnQtaW1hZ2UnICksXG4gIHJlcXVpcmUoICcuL25vZGUtc2hhcGVzJyApXG5dLmZvckVhY2goIGZ1bmN0aW9uKCBwcm9wcyApe1xuICB1dGlsLmV4dGVuZCggQ1JwLCBwcm9wcyApO1xufSApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENSO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoICcuLi8uLi8uLi91dGlsJyApO1xudmFyIG1hdGggPSByZXF1aXJlKCAnLi4vLi4vLi4vbWF0aCcgKTtcbnZhciBIZWFwID0gcmVxdWlyZSggJy4uLy4uLy4uL2hlYXAnICk7XG52YXIgaXMgPSByZXF1aXJlKCAnLi4vLi4vLi4vaXMnICk7XG52YXIgZGVmcyA9IHJlcXVpcmUoICcuL3RleHR1cmUtY2FjaGUtZGVmcycgKTtcblxudmFyIGRlZk51bUxheWVycyA9IDE7IC8vIGRlZmF1bHQgbnVtYmVyIG9mIGxheWVycyB0byB1c2VcbnZhciBtaW5MdmwgPSAtNDsgLy8gd2hlbiBzY2FsaW5nIHNtYWxsZXIgdGhhbiB0aGF0IHdlIGRvbid0IG5lZWQgdG8gcmUtcmVuZGVyXG52YXIgbWF4THZsID0gMjsgLy8gd2hlbiBsYXJnZXIgdGhhbiB0aGlzIHNjYWxlIGp1c3QgcmVuZGVyIGRpcmVjdGx5IChjYWNoaW5nIGlzIG5vdCBoZWxwZnVsKVxudmFyIG1heFpvb20gPSAzLjk5OyAvLyBiZXlvbmQgdGhpcyB6b29tIGxldmVsLCBsYXllcmVkIHRleHR1cmVzIGFyZSBub3QgdXNlZFxudmFyIGRlcVJlZHJhd1RocmVzaG9sZCA9IDUwOyAvLyB0aW1lIHRvIGJhdGNoIHJlZHJhd3MgdG9nZXRoZXIgZnJvbSBkZXF1ZXVlaW5nIHRvIGFsbG93IG1vcmUgZGVxdWV1ZWluZyBjYWxjcyB0byBoYXBwZW4gaW4gdGhlIG1lYW53aGlsZVxudmFyIHJlZmluZUVsZURlYm91bmNlVGltZSA9IDUwOyAvLyB0aW1lIHRvIGRlYm91bmNlIHNoYXJwZXIgZWxlIHRleHR1cmUgdXBkYXRlc1xudmFyIGRpc2FibGVFbGVJbWdTbW9vdGhpbmcgPSB0cnVlOyAvLyB3aGVuIGRyYXdpbmcgZWxlcyBvbiBsYXllcnMgZnJvbSBhbiBlbGUgY2FjaGUgOyBjcmlzcGVyIGFuZCBtb3JlIHBlcmZvcm1hbnQgd2hlbiB0cnVlXG52YXIgZGVxQ29zdCA9IDAuMTU7IC8vICUgb2YgYWRkJ2wgcmVuZGVyaW5nIGNvc3QgYWxsb3dlZCBmb3IgZGVxdWV1aW5nIGVsZSBjYWNoZXMgZWFjaCBmcmFtZVxudmFyIGRlcUF2Z0Nvc3QgPSAwLjE7IC8vICUgb2YgYWRkJ2wgcmVuZGVyaW5nIGNvc3QgY29tcGFyZWQgdG8gYXZlcmFnZSBvdmVyYWxsIHJlZHJhdyB0aW1lXG52YXIgZGVxTm9EcmF3Q29zdCA9IDAuOTsgLy8gJSBvZiBhdmcgZnJhbWUgdGltZSB0aGF0IGNhbiBiZSB1c2VkIGZvciBkZXF1ZXVlaW5nIHdoZW4gbm90IGRyYXdpbmdcbnZhciBkZXFGYXN0Q29zdCA9IDAuOTsgLy8gJSBvZiBmcmFtZSB0aW1lIHRvIGJlIHVzZWQgd2hlbiA+NjBmcHNcbnZhciBtYXhEZXFTaXplID0gMTsgLy8gbnVtYmVyIG9mIGVsZXMgdG8gZGVxdWV1ZSBhbmQgcmVuZGVyIGF0IGhpZ2hlciB0ZXh0dXJlIGluIGVhY2ggYmF0Y2hcbnZhciBpbnZhbGlkVGhyZXNob2xkID0gMjUwOyAvLyB0aW1lIHRocmVzaG9sZCBmb3IgZGlzYWJsaW5nIGIvYyBvZiBpbnZhbGlkYXRpb25zXG52YXIgbWF4TGF5ZXJBcmVhID0gNDAwMCAqIDQwMDA7IC8vIGxheWVycyBjYW4ndCBiZSBiaWdnZXIgdGhhbiB0aGlzXG52YXIgYWx3YXlzUXVldWUgPSB0cnVlOyAvLyBuZXZlciBkcmF3IGFsbCB0aGUgbGF5ZXJzIGluIGEgbGV2ZWwgb24gYSBmcmFtZTsgZHJhdyBkaXJlY3RseSB1bnRpbCBhbGwgZGVxdWV1ZWRcbnZhciB1c2VIaWdoUXVhbGl0eUVsZVR4clJlcXMgPSB0cnVlOyAvLyB3aGV0aGVyIHRvIHVzZSBoaWdoIHF1YWxpdHkgZWxlIHR4ciByZXF1ZXN0cyAoZ2VuZXJhbGx5IGZhc3RlciBhbmQgY2hlYXBlciBpbiB0aGUgbG9uZ3Rlcm0pXG5cbnZhciB1c2VFbGVUeHJDYWNoaW5nID0gdHJ1ZTsgLy8gd2hldGhlciB0byB1c2UgaW5kaXZpZHVhbCBlbGUgdGV4dHVyZSBjYWNoaW5nIHVuZGVybmVhdGggdGhpcyBjYWNoZVxuXG4vLyB2YXIgbG9nID0gZnVuY3Rpb24oKXsgY29uc29sZS5sb2cuYXBwbHkoIGNvbnNvbGUsIGFyZ3VtZW50cyApOyB9O1xuXG52YXIgTGF5ZXJlZFRleHR1cmVDYWNoZSA9IGZ1bmN0aW9uKCByZW5kZXJlciwgZWxlVHhyQ2FjaGUgKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciByID0gc2VsZi5yZW5kZXJlciA9IHJlbmRlcmVyO1xuXG4gIHNlbGYubGF5ZXJzQnlMZXZlbCA9IHt9OyAvLyBlLmcuIDIgPT4gWyBsYXllcjEsIGxheWVyMiwgLi4uLCBsYXllck4gXVxuXG4gIHNlbGYuZmlyc3RHZXQgPSB0cnVlO1xuXG4gIHNlbGYubGFzdEludmFsaWRhdGlvblRpbWUgPSB1dGlsLnBlcmZvcm1hbmNlTm93KCkgLSAyKmludmFsaWRUaHJlc2hvbGQ7XG5cbiAgc2VsZi5za2lwcGluZyA9IGZhbHNlO1xuXG4gIHIuYmVmb3JlUmVuZGVyKGZ1bmN0aW9uKCB3aWxsRHJhdywgbm93ICl7XG4gICAgaWYoIG5vdyAtIHNlbGYubGFzdEludmFsaWRhdGlvblRpbWUgPD0gaW52YWxpZFRocmVzaG9sZCApe1xuICAgICAgc2VsZi5za2lwcGluZyA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuc2tpcHBpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBxU29ydCA9IGZ1bmN0aW9uKGEsIGIpe1xuICAgIHJldHVybiBiLnJlcXMgLSBhLnJlcXM7XG4gIH07XG5cbiAgc2VsZi5sYXllcnNRdWV1ZSA9IG5ldyBIZWFwKCBxU29ydCApO1xuXG4gIHNlbGYuZWxlVHhyQ2FjaGUgPSBlbGVUeHJDYWNoZTtcblxuICBzZWxmLnNldHVwRWxlQ2FjaGVJbnZhbGlkYXRpb24oKTtcblxuICBzZWxmLnNldHVwRGVxdWV1ZWluZygpO1xufTtcblxudmFyIExUQ3AgPSBMYXllcmVkVGV4dHVyZUNhY2hlLnByb3RvdHlwZTtcblxudmFyIGxheWVySWRQb29sID0gMDtcbnZhciBNQVhfSU5UID0gTWF0aC5wb3coMiwgNTMpIC0gMTtcblxuTFRDcC5tYWtlTGF5ZXIgPSBmdW5jdGlvbiggYmIsIGx2bCApe1xuICB2YXIgc2NhbGUgPSBNYXRoLnBvdyggMiwgbHZsICk7XG5cbiAgdmFyIHcgPSBNYXRoLmNlaWwoIGJiLncgKiBzY2FsZSApO1xuICB2YXIgaCA9IE1hdGguY2VpbCggYmIuaCAqIHNjYWxlICk7XG5cbiAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbiAgY2FudmFzLndpZHRoID0gdztcbiAgY2FudmFzLmhlaWdodCA9IGg7XG5cbiAgdmFyIGxheWVyID0ge1xuICAgIGlkOiAobGF5ZXJJZFBvb2wgPSArK2xheWVySWRQb29sICUgTUFYX0lOVCApLFxuICAgIGJiOiBiYixcbiAgICBsZXZlbDogbHZsLFxuICAgIHdpZHRoOiB3LFxuICAgIGhlaWdodDogaCxcbiAgICBjYW52YXM6IGNhbnZhcyxcbiAgICBjb250ZXh0OiBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSxcbiAgICBlbGVzOiBbXSxcbiAgICBlbGVzUXVldWU6IFtdLFxuICAgIHJlcXM6IDBcbiAgfTtcblxuICAvLyBsb2coJ21ha2UgbGF5ZXIgJXMgd2l0aCB3ICVzIGFuZCBoICVzIGFuZCBsdmwgJXMnLCBsYXllci5pZCwgbGF5ZXIud2lkdGgsIGxheWVyLmhlaWdodCwgbGF5ZXIubGV2ZWwpO1xuXG4gIHZhciBjeHQgPSBsYXllci5jb250ZXh0O1xuICB2YXIgZHggPSAtbGF5ZXIuYmIueDE7XG4gIHZhciBkeSA9IC1sYXllci5iYi55MTtcblxuICAvLyBkbyB0aGUgdHJhbnNmb3JtIG9uIGNyZWF0aW9uIHRvIHNhdmUgY3ljbGVzIChpdCdzIHRoZSBzYW1lIGZvciBhbGwgZWxlcylcbiAgY3h0LnNjYWxlKCBzY2FsZSwgc2NhbGUgKTtcbiAgY3h0LnRyYW5zbGF0ZSggZHgsIGR5ICk7XG5cbiAgcmV0dXJuIGxheWVyO1xufTtcblxuTFRDcC5nZXRMYXllcnMgPSBmdW5jdGlvbiggZWxlcywgcHhSYXRpbywgbHZsICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHIgPSBzZWxmLnJlbmRlcmVyO1xuICB2YXIgY3kgPSByLmN5O1xuICB2YXIgem9vbSA9IGN5Lnpvb20oKTtcbiAgdmFyIGZpcnN0R2V0ID0gc2VsZi5maXJzdEdldDtcblxuICBzZWxmLmZpcnN0R2V0ID0gZmFsc2U7XG5cbiAgLy8gbG9nKCctLVxcbmdldCBsYXllcnMgd2l0aCAlcyBlbGVzJywgZWxlcy5sZW5ndGgpO1xuICAvL2xvZyBlbGVzLm1hcChmdW5jdGlvbihlbGUpeyByZXR1cm4gZWxlLmlkKCkgfSkgKTtcblxuICBpZiggbHZsID09IG51bGwgKXtcbiAgICBsdmwgPSBNYXRoLmNlaWwoIG1hdGgubG9nMiggem9vbSAqIHB4UmF0aW8gKSApO1xuXG4gICAgaWYoIGx2bCA8IG1pbkx2bCApe1xuICAgICAgbHZsID0gbWluTHZsO1xuICAgIH0gZWxzZSBpZiggem9vbSA+PSBtYXhab29tIHx8IGx2bCA+IG1heEx2bCApe1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgc2VsZi52YWxpZGF0ZUxheWVyc0VsZXNPcmRlcmluZyggbHZsLCBlbGVzICk7XG5cbiAgdmFyIGxheWVyc0J5THZsID0gc2VsZi5sYXllcnNCeUxldmVsO1xuICB2YXIgc2NhbGUgPSBNYXRoLnBvdyggMiwgbHZsICk7XG4gIHZhciBsYXllcnMgPSBsYXllcnNCeUx2bFsgbHZsIF0gPSBsYXllcnNCeUx2bFsgbHZsIF0gfHwgW107XG4gIHZhciBiYjtcblxuICB2YXIgbHZsQ29tcGxldGUgPSBzZWxmLmxldmVsSXNDb21wbGV0ZSggbHZsLCBlbGVzICk7XG4gIHZhciB0bXBMYXllcnM7XG5cbiAgdmFyIGNoZWNrVGVtcExldmVscyA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGNhblVzZUFzVG1wTHZsID0gZnVuY3Rpb24oIGwgKXtcbiAgICAgIHNlbGYudmFsaWRhdGVMYXllcnNFbGVzT3JkZXJpbmcoIGwsIGVsZXMgKTtcblxuICAgICAgaWYoIHNlbGYubGV2ZWxJc0NvbXBsZXRlKCBsLCBlbGVzICkgKXtcbiAgICAgICAgdG1wTGF5ZXJzID0gbGF5ZXJzQnlMdmxbbF07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgY2hlY2tMdmxzID0gZnVuY3Rpb24oIGRpciApe1xuICAgICAgaWYoIHRtcExheWVycyApeyByZXR1cm47IH1cblxuICAgICAgZm9yKCB2YXIgbCA9IGx2bCArIGRpcjsgbWluTHZsIDw9IGwgJiYgbCA8PSBtYXhMdmw7IGwgKz0gZGlyICl7XG4gICAgICAgIGlmKCBjYW5Vc2VBc1RtcEx2bChsKSApeyBicmVhazsgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBjaGVja0x2bHMoICsxICk7XG4gICAgY2hlY2tMdmxzKCAtMSApO1xuXG4gICAgLy8gcmVtb3ZlIHRoZSBpbnZhbGlkIGxheWVyczsgdGhleSB3aWxsIGJlIHJlcGxhY2VkIGFzIG5lZWRlZCBsYXRlciBpbiB0aGlzIGZ1bmN0aW9uXG4gICAgZm9yKCB2YXIgaSA9IGxheWVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApe1xuICAgICAgdmFyIGxheWVyID0gbGF5ZXJzW2ldO1xuXG4gICAgICBpZiggbGF5ZXIuaW52YWxpZCApe1xuICAgICAgICB1dGlsLnJlbW92ZUZyb21BcnJheSggbGF5ZXJzLCBsYXllciApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBpZiggIWx2bENvbXBsZXRlICl7XG4gICAgLy8gaWYgdGhlIGN1cnJlbnQgbGV2ZWwgaXMgaW5jb21wbGV0ZSwgdGhlbiB1c2UgdGhlIGNsb3Nlc3QsIGJlc3QgcXVhbGl0eSBsYXllcnNldCB0ZW1wb3JhcmlseVxuICAgIC8vIGFuZCBsYXRlciBxdWV1ZSB0aGUgY3VycmVudCBsYXllcnNldCBzbyB3ZSBjYW4gZ2V0IHRoZSBwcm9wZXIgcXVhbGl0eSBsZXZlbCBzb29uXG5cbiAgICBjaGVja1RlbXBMZXZlbHMoKTtcblxuICB9IGVsc2Uge1xuICAgIC8vIGxvZygnbGV2ZWwgY29tcGxldGUsIHVzaW5nIGV4aXN0aW5nIGxheWVyc1xcbi0tJyk7XG4gICAgcmV0dXJuIGxheWVycztcbiAgfVxuXG4gIHZhciBnZXRCYiA9IGZ1bmN0aW9uKCl7XG4gICAgaWYoICFiYiApe1xuICAgICAgYmIgPSBtYXRoLm1ha2VCb3VuZGluZ0JveCgpO1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgbWF0aC51cGRhdGVCb3VuZGluZ0JveCggYmIsIGVsZXNbaV0uYm91bmRpbmdCb3goKSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBiYjtcbiAgfTtcblxuICB2YXIgbWFrZUxheWVyID0gZnVuY3Rpb24oIG9wdHMgKXtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICAgIHZhciBhZnRlciA9IG9wdHMuYWZ0ZXI7XG5cbiAgICBnZXRCYigpO1xuXG4gICAgdmFyIGFyZWEgPSAoIGJiLncgKiBzY2FsZSApICogKCBiYi5oICogc2NhbGUgKTtcblxuICAgIGlmKCBhcmVhID4gbWF4TGF5ZXJBcmVhICl7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbGF5ZXIgPSBzZWxmLm1ha2VMYXllciggYmIsIGx2bCApO1xuXG4gICAgaWYoIGFmdGVyICE9IG51bGwgKXtcbiAgICAgIHZhciBpbmRleCA9IGxheWVycy5pbmRleE9mKCBhZnRlciApICsgMTtcblxuICAgICAgbGF5ZXJzLnNwbGljZSggaW5kZXgsIDAsIGxheWVyICk7XG4gICAgfSBlbHNlIGlmKCBvcHRzLmluc2VydCA9PT0gdW5kZWZpbmVkIHx8IG9wdHMuaW5zZXJ0ICl7XG4gICAgICAvLyBubyBhZnRlciBzcGVjaWZpZWQgPT4gZmlyc3QgbGF5ZXIgbWFkZSBzbyBwdXQgYXQgc3RhcnRcbiAgICAgIGxheWVycy51bnNoaWZ0KCBsYXllciApO1xuICAgIH1cblxuICAgIC8vIGlmKCB0bXBMYXllcnMgKXtcbiAgICAgIC8vc2VsZi5xdWV1ZUxheWVyKCBsYXllciApO1xuICAgIC8vIH1cblxuICAgIHJldHVybiBsYXllcjtcbiAgfTtcblxuICBpZiggc2VsZi5za2lwcGluZyAmJiAhZmlyc3RHZXQgKXtcbiAgICAvLyBsb2coJ3NraXAgbGF5ZXJzJyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBsb2coJ2RvIGxheWVycycpO1xuXG4gIHZhciBsYXllciA9IG51bGw7XG4gIHZhciBtYXhFbGVzUGVyTGF5ZXIgPSBlbGVzLmxlbmd0aCAvIGRlZk51bUxheWVycztcbiAgdmFyIGFsbG93TGF6eVF1ZXVlaW5nID0gYWx3YXlzUXVldWUgJiYgIWZpcnN0R2V0O1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKyApe1xuICAgIHZhciBlbGUgPSBlbGVzW2ldO1xuICAgIHZhciBycyA9IGVsZS5fcHJpdmF0ZS5yc2NyYXRjaDtcbiAgICB2YXIgY2FjaGVzID0gcnMuaW1nTGF5ZXJDYWNoZXMgPSBycy5pbWdMYXllckNhY2hlcyB8fCB7fTtcblxuICAgIC8vIGxvZygnbG9vayBhdCBlbGUnLCBlbGUuaWQoKSk7XG5cbiAgICB2YXIgZXhpc3RpbmdMYXllciA9IGNhY2hlc1sgbHZsIF07XG5cbiAgICBpZiggZXhpc3RpbmdMYXllciApe1xuICAgICAgLy8gcmV1c2UgbGF5ZXIgZm9yIGxhdGVyIGVsZXNcbiAgICAgIC8vIGxvZygncmV1c2UgbGF5ZXIgZm9yJywgZWxlLmlkKCkpO1xuICAgICAgbGF5ZXIgPSBleGlzdGluZ0xheWVyO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYoXG4gICAgICAhbGF5ZXJcbiAgICAgIHx8IGxheWVyLmVsZXMubGVuZ3RoID49IG1heEVsZXNQZXJMYXllclxuICAgICAgfHwgIW1hdGguYm91bmRpbmdCb3hJbkJvdW5kaW5nQm94KCBsYXllci5iYiwgZWxlLmJvdW5kaW5nQm94KCkgKVxuICAgICl7XG4gICAgICAvLyBsb2coJ21ha2UgbmV3IGxheWVyIGZvciBlbGUgJXMnLCBlbGUuaWQoKSk7XG5cbiAgICAgIGxheWVyID0gbWFrZUxheWVyKHsgaW5zZXJ0OiB0cnVlLCBhZnRlcjogbGF5ZXIgfSk7XG5cbiAgICAgIC8vIGlmIG5vdyBsYXllciBjYW4gYmUgYnVpbHQgdGhlbiB3ZSBjYW4ndCB1c2UgbGF5ZXJzIGF0IHRoaXMgbGV2ZWxcbiAgICAgIGlmKCAhbGF5ZXIgKXsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgLy8gbG9nKCduZXcgbGF5ZXIgd2l0aCBpZCAlcycsIGxheWVyLmlkKTtcbiAgICB9XG5cbiAgICBpZiggdG1wTGF5ZXJzIHx8IGFsbG93TGF6eVF1ZXVlaW5nICl7XG4gICAgICAvLyBsb2coJ3F1ZXVlIGVsZSAlcyBpbiBsYXllciAlcycsIGVsZS5pZCgpLCBsYXllci5pZCk7XG4gICAgICBzZWxmLnF1ZXVlTGF5ZXIoIGxheWVyLCBlbGUgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbG9nKCdkcmF3IGVsZSAlcyBpbiBsYXllciAlcycsIGVsZS5pZCgpLCBsYXllci5pZCk7XG4gICAgICBzZWxmLmRyYXdFbGVJbkxheWVyKCBsYXllciwgZWxlLCBsdmwsIHB4UmF0aW8gKTtcbiAgICB9XG5cbiAgICBsYXllci5lbGVzLnB1c2goIGVsZSApO1xuXG4gICAgY2FjaGVzWyBsdmwgXSA9IGxheWVyO1xuICB9XG5cbiAgLy8gbG9nKCctLScpO1xuXG4gIGlmKCB0bXBMYXllcnMgKXsgLy8gdGhlbiB3ZSBvbmx5IHF1ZXVlZCB0aGUgY3VycmVudCBsYXllcnNldCBhbmQgY2FuJ3QgZHJhdyBpdCB5ZXRcbiAgICByZXR1cm4gdG1wTGF5ZXJzO1xuICB9XG5cbiAgaWYoIGFsbG93TGF6eVF1ZXVlaW5nICl7XG4gICAgLy8gbG9nKCdsYXp5IHF1ZXVlIGxldmVsJywgbHZsKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBsYXllcnM7XG59O1xuXG4vLyBhIGxheWVyIG1heSB3YW50IHRvIHVzZSBhbiBlbGUgY2FjaGUgb2YgYSBoaWdoZXIgbGV2ZWwgdG8gYXZvaWQgYmx1cnJpbmVzc1xuLy8gc28gdGhlIGxheWVyIGxldmVsIG1pZ2h0IG5vdCBlcXVhbCB0aGUgZWxlIGxldmVsXG5MVENwLmdldEVsZUxldmVsRm9yTGF5ZXJMZXZlbCA9IGZ1bmN0aW9uKCBsdmwsIHB4UmF0aW8gKXtcbiAgcmV0dXJuIGx2bDtcbn07XG5cbmZ1bmN0aW9uIGltZ1Ntb290aGluZyggY29udGV4dCwgYm9vbCApe1xuICBpZiggY29udGV4dC5pbWFnZVNtb290aGluZ0VuYWJsZWQgIT0gbnVsbCApe1xuICAgIGNvbnRleHQuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gYm9vbDtcbiAgfSBlbHNlIHtcbiAgICBjb250ZXh0LndlYmtpdEltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGJvb2w7XG4gICAgY29udGV4dC5tb3pJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBib29sO1xuICAgIGNvbnRleHQubXNJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBib29sO1xuICB9XG59XG5cbkxUQ3AuZHJhd0VsZUluTGF5ZXIgPSBmdW5jdGlvbiggbGF5ZXIsIGVsZSwgbHZsLCBweFJhdGlvICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHIgPSB0aGlzLnJlbmRlcmVyO1xuICB2YXIgY29udGV4dCA9IGxheWVyLmNvbnRleHQ7XG4gIHZhciBiYiA9IGVsZS5ib3VuZGluZ0JveCgpO1xuXG4gIGlmKCBiYi53ID09PSAwIHx8IGJiLmggPT09IDAgKXsgcmV0dXJuOyB9XG5cbiAgdmFyIGVsZUNhY2hlID0gc2VsZi5lbGVUeHJDYWNoZTtcbiAgdmFyIHJlYXNvbiA9IHVzZUhpZ2hRdWFsaXR5RWxlVHhyUmVxcyA/IGVsZUNhY2hlLnJlYXNvbnMuaGlnaFF1YWxpdHkgOiB1bmRlZmluZWQ7XG5cbiAgbHZsID0gc2VsZi5nZXRFbGVMZXZlbEZvckxheWVyTGV2ZWwoIGx2bCwgcHhSYXRpbyApO1xuXG4gIHZhciBjYWNoZSA9IHVzZUVsZVR4ckNhY2hpbmcgPyBlbGVDYWNoZS5nZXRFbGVtZW50KCBlbGUsIGJiLCBudWxsLCBsdmwsIHJlYXNvbiApIDogbnVsbDtcblxuICBpZiggY2FjaGUgKXtcbiAgICBpZiggZGlzYWJsZUVsZUltZ1Ntb290aGluZyApeyBpbWdTbW9vdGhpbmcoIGNvbnRleHQsIGZhbHNlICk7IH1cblxuICAgIGNvbnRleHQuZHJhd0ltYWdlKCBjYWNoZS50ZXh0dXJlLmNhbnZhcywgY2FjaGUueCwgMCwgY2FjaGUud2lkdGgsIGNhY2hlLmhlaWdodCwgYmIueDEsIGJiLnkxLCBiYi53LCBiYi5oICk7XG5cbiAgICBpZiggZGlzYWJsZUVsZUltZ1Ntb290aGluZyApeyBpbWdTbW9vdGhpbmcoIGNvbnRleHQsIHRydWUgKTsgfVxuICB9IGVsc2UgeyAvLyBpZiB0aGUgZWxlbWVudCBpcyBub3QgY2FjaGVhYmxlLCB0aGVuIGRyYXcgZGlyZWN0bHlcbiAgICByLmRyYXdFbGVtZW50KCBjb250ZXh0LCBlbGUgKTtcbiAgfVxufTtcblxuTFRDcC5sZXZlbElzQ29tcGxldGUgPSBmdW5jdGlvbiggbHZsLCBlbGVzICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGxheWVycyA9IHNlbGYubGF5ZXJzQnlMZXZlbFsgbHZsIF07XG5cbiAgaWYoICFsYXllcnMgfHwgbGF5ZXJzLmxlbmd0aCA9PT0gMCApeyByZXR1cm4gZmFsc2U7IH1cblxuICB2YXIgbnVtRWxlc0luTGF5ZXJzID0gMDtcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IGxheWVycy5sZW5ndGg7IGkrKyApe1xuICAgIHZhciBsYXllciA9IGxheWVyc1tpXTtcblxuICAgIC8vIGlmIHRoZXJlIGFyZSBhbnkgZWxlcyBuZWVkZWQgdG8gYmUgZHJhd24geWV0LCB0aGUgbGV2ZWwgaXMgbm90IGNvbXBsZXRlXG4gICAgaWYoIGxheWVyLnJlcXMgPiAwICl7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgLy8gaWYgdGhlIGxheWVyIGlzIGludmFsaWQsIHRoZSBsZXZlbCBpcyBub3QgY29tcGxldGVcbiAgICBpZiggbGF5ZXIuaW52YWxpZCApeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIG51bUVsZXNJbkxheWVycyArPSBsYXllci5lbGVzLmxlbmd0aDtcbiAgfVxuXG4gIC8vIHdlIHNob3VsZCBoYXZlIGV4YWN0bHkgdGhlIG51bWJlciBvZiBlbGVzIHBhc3NlZCBpbiB0byBiZSBjb21wbGV0ZVxuICBpZiggbnVtRWxlc0luTGF5ZXJzICE9PSBlbGVzLmxlbmd0aCApeyByZXR1cm4gZmFsc2U7IH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkxUQ3AudmFsaWRhdGVMYXllcnNFbGVzT3JkZXJpbmcgPSBmdW5jdGlvbiggbHZsLCBlbGVzICl7XG4gIHZhciBsYXllcnMgPSB0aGlzLmxheWVyc0J5TGV2ZWxbIGx2bCBdO1xuXG4gIGlmKCAhbGF5ZXJzICl7IHJldHVybjsgfVxuXG4gIC8vIGlmIGluIGEgbGF5ZXIgdGhlIGVsZXMgYXJlIG5vdCBpbiB0aGUgc2FtZSBvcmRlciwgdGhlbiB0aGUgbGF5ZXIgaXMgaW52YWxpZFxuICAvLyAoaS5lLiB0aGVyZSBpcyBhbiBlbGUgaW4gYmV0d2VlbiB0aGUgZWxlcyBpbiB0aGUgbGF5ZXIpXG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgbGF5ZXIgPSBsYXllcnNbaV07XG4gICAgdmFyIG9mZnNldCA9IC0xO1xuXG4gICAgLy8gZmluZCB0aGUgb2Zmc2V0XG4gICAgZm9yKCB2YXIgaiA9IDA7IGogPCBlbGVzLmxlbmd0aDsgaisrICl7XG4gICAgICBpZiggbGF5ZXIuZWxlc1swXSA9PT0gZWxlc1tqXSApe1xuICAgICAgICBvZmZzZXQgPSBqO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiggb2Zmc2V0IDwgMCApe1xuICAgICAgLy8gdGhlbiB0aGUgbGF5ZXIgaGFzIG5vbmV4aXN0YW50IGVsZW1lbnRzIGFuZCBpcyBpbnZhbGlkXG4gICAgICB0aGlzLmludmFsaWRhdGVMYXllciggbGF5ZXIgKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRoZSBlbGVzIGluIHRoZSBsYXllciBtdXN0IGJlIGluIHRoZSBzYW1lIGNvbnRpbnVvdXMgb3JkZXIsIGVsc2UgdGhlIGxheWVyIGlzIGludmFsaWRcblxuICAgIHZhciBvID0gb2Zmc2V0O1xuXG4gICAgZm9yKCB2YXIgaiA9IDA7IGogPCBsYXllci5lbGVzLmxlbmd0aDsgaisrICl7XG4gICAgICBpZiggbGF5ZXIuZWxlc1tqXSAhPT0gZWxlc1tvK2pdICl7XG4gICAgICAgIC8vIGxvZygnaW52YWxpZGF0ZSBiYXNlZCBvbiBvcmRlcmluZycsIGxheWVyLmlkKTtcblxuICAgICAgICB0aGlzLmludmFsaWRhdGVMYXllciggbGF5ZXIgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5MVENwLnVwZGF0ZUVsZW1lbnRzSW5MYXllcnMgPSBmdW5jdGlvbiggZWxlcywgdXBkYXRlICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGlzRWxlcyA9IGlzLmVsZW1lbnQoIGVsZXNbMF0gKTtcblxuICAvLyBjb2xsZWN0IHVkcGF0ZWQgZWxlbWVudHMgKGNhc2NhZGVkIGZyb20gdGhlIGxheWVycykgYW5kIHVwZGF0ZSBlYWNoXG4gIC8vIGxheWVyIGl0c2VsZiBhbG9uZyB0aGUgd2F5XG4gIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKyApe1xuICAgIHZhciByZXEgPSBpc0VsZXMgPyBudWxsIDogZWxlc1tpXTtcbiAgICB2YXIgZWxlID0gaXNFbGVzID8gZWxlc1tpXSA6IGVsZXNbaV0uZWxlO1xuICAgIHZhciBycyA9IGVsZS5fcHJpdmF0ZS5yc2NyYXRjaDtcbiAgICB2YXIgY2FjaGVzID0gcnMuaW1nTGF5ZXJDYWNoZXMgPSBycy5pbWdMYXllckNhY2hlcyB8fCB7fTtcblxuICAgIGZvciggdmFyIGwgPSBtaW5Mdmw7IGwgPD0gbWF4THZsOyBsKysgKXtcbiAgICAgIHZhciBsYXllciA9IGNhY2hlc1tsXTtcblxuICAgICAgaWYoICFsYXllciApeyBjb250aW51ZTsgfVxuXG4gICAgICAvLyBpZiB1cGRhdGUgaXMgYSByZXF1ZXN0IGZyb20gdGhlIGVsZSBjYWNoZSwgdGhlbiBpdCBhZmZlY3RzIG9ubHlcbiAgICAgIC8vIHRoZSBtYXRjaGluZyBsZXZlbFxuICAgICAgaWYoIHJlcSAmJiBzZWxmLmdldEVsZUxldmVsRm9yTGF5ZXJMZXZlbCggbGF5ZXIubGV2ZWwgKSAhPT0gcmVxLmxldmVsICl7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUoIGxheWVyLCBlbGUsIHJlcSApO1xuICAgIH1cbiAgfVxufTtcblxuTFRDcC5oYXZlTGF5ZXJzID0gZnVuY3Rpb24oKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgaGF2ZUxheWVycyA9IGZhbHNlO1xuXG4gIGZvciggdmFyIGwgPSBtaW5Mdmw7IGwgPD0gbWF4THZsOyBsKysgKXtcbiAgICB2YXIgbGF5ZXJzID0gc2VsZi5sYXllcnNCeUxldmVsW2xdO1xuXG4gICAgaWYoIGxheWVycyAmJiBsYXllcnMubGVuZ3RoID4gMCApe1xuICAgICAgaGF2ZUxheWVycyA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaGF2ZUxheWVycztcbn07XG5cbkxUQ3AuaW52YWxpZGF0ZUVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZXMgKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHNlbGYubGFzdEludmFsaWRhdGlvblRpbWUgPSB1dGlsLnBlcmZvcm1hbmNlTm93KCk7XG5cbiAgLy8gbG9nKCd1cGRhdGUgaW52YWxpZGF0ZSBsYXllciB0aW1lIGZyb20gZWxlcycpO1xuXG4gIGlmKCBlbGVzLmxlbmd0aCA9PT0gMCB8fCAhc2VsZi5oYXZlTGF5ZXJzKCkgKXsgcmV0dXJuOyB9XG5cbiAgc2VsZi51cGRhdGVFbGVtZW50c0luTGF5ZXJzKCBlbGVzLCBmdW5jdGlvbiBpbnZhbEFzc29jTGF5ZXJzKCBsYXllciwgZWxlLCByZXEgKXtcbiAgICBzZWxmLmludmFsaWRhdGVMYXllciggbGF5ZXIgKTtcbiAgfSApO1xufTtcblxuTFRDcC5pbnZhbGlkYXRlTGF5ZXIgPSBmdW5jdGlvbiggbGF5ZXIgKXtcbiAgLy8gbG9nKCd1cGRhdGUgaW52YWxpZGF0ZSBsYXllciB0aW1lJyk7XG5cbiAgdGhpcy5sYXN0SW52YWxpZGF0aW9uVGltZSA9IHV0aWwucGVyZm9ybWFuY2VOb3coKTtcblxuICBpZiggbGF5ZXIuaW52YWxpZCApeyByZXR1cm47IH0gLy8gc2F2ZSBjeWNsZXNcblxuICB2YXIgbHZsID0gbGF5ZXIubGV2ZWw7XG4gIHZhciBlbGVzID0gbGF5ZXIuZWxlcztcbiAgdmFyIGxheWVycyA9IHRoaXMubGF5ZXJzQnlMZXZlbFsgbHZsIF07XG5cbiAgIC8vIGxvZygnaW52YWxpZGF0ZSBsYXllcicsIGxheWVyLmlkICk7XG5cbiAgdXRpbC5yZW1vdmVGcm9tQXJyYXkoIGxheWVycywgbGF5ZXIgKTtcbiAgLy8gbGF5ZXIuZWxlcyA9IFtdO1xuXG4gIGxheWVyLmVsZXNRdWV1ZSA9IFtdO1xuXG4gIGxheWVyLmludmFsaWQgPSB0cnVlO1xuXG4gIGlmKCBsYXllci5yZXBsYWNlbWVudCApe1xuICAgIGxheWVyLnJlcGxhY2VtZW50LmludmFsaWQgPSB0cnVlO1xuICB9XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGNhY2hlcyA9IGVsZXNbaV0uX3ByaXZhdGUucnNjcmF0Y2guaW1nTGF5ZXJDYWNoZXM7XG5cbiAgICBpZiggY2FjaGVzICl7XG4gICAgICBjYWNoZXNbIGx2bCBdID0gbnVsbDtcbiAgICB9XG4gIH1cbn07XG5cbkxUQ3AucmVmaW5lRWxlbWVudFRleHR1cmVzID0gZnVuY3Rpb24oIGVsZXMgKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIGxvZygncmVmaW5lJywgZWxlcy5sZW5ndGgpO1xuXG4gIHNlbGYudXBkYXRlRWxlbWVudHNJbkxheWVycyggZWxlcywgZnVuY3Rpb24gcmVmaW5lRWFjaEVsZSggbGF5ZXIsIGVsZSwgcmVxICl7XG4gICAgdmFyIHJMeXIgPSBsYXllci5yZXBsYWNlbWVudDtcblxuICAgIGlmKCAhckx5ciApe1xuICAgICAgckx5ciA9IGxheWVyLnJlcGxhY2VtZW50ID0gc2VsZi5tYWtlTGF5ZXIoIGxheWVyLmJiLCBsYXllci5sZXZlbCApO1xuICAgICAgckx5ci5yZXBsYWNlcyA9IGxheWVyO1xuICAgICAgckx5ci5lbGVzID0gbGF5ZXIuZWxlcztcblxuICAgICAgIC8vIGxvZygnbWFrZSByZXBsYWNlbWVudCBsYXllciAlcyBmb3IgJXMgd2l0aCBsZXZlbCAlcycsIHJMeXIuaWQsIGxheWVyLmlkLCByTHlyLmxldmVsKTtcbiAgICB9XG5cbiAgICBpZiggIXJMeXIucmVxcyApe1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCByTHlyLmVsZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgc2VsZi5xdWV1ZUxheWVyKCByTHlyLCByTHlyLmVsZXNbaV0gKTtcbiAgICAgIH1cblxuICAgICAgIC8vIGxvZygncXVldWUgcmVwbGFjZW1lbnQgbGF5ZXIgcmVmaW5lbWVudCcsIHJMeXIuaWQpO1xuICAgIH1cbiAgfSApO1xufTtcblxuTFRDcC5zZXR1cEVsZUNhY2hlSW52YWxpZGF0aW9uID0gZnVuY3Rpb24oKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZWxlRGVxcyA9IFtdO1xuXG4gIGlmKCAhdXNlRWxlVHhyQ2FjaGluZyApeyByZXR1cm47IH1cblxuICB2YXIgdXBkYXRlZEVsZXNJbkxheWVycyA9IHV0aWwuZGVib3VuY2UoIGZ1bmN0aW9uKCl7XG4gICAgc2VsZi5yZWZpbmVFbGVtZW50VGV4dHVyZXMoIGVsZURlcXMgKTtcblxuICAgIGVsZURlcXMgPSBbXTtcbiAgfSwgcmVmaW5lRWxlRGVib3VuY2VUaW1lICk7XG5cbiAgc2VsZi5lbGVUeHJDYWNoZS5vbkRlcXVldWUoZnVuY3Rpb24oIHJlcXMgKXtcbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IHJlcXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIGVsZURlcXMucHVzaCggcmVxc1tpXSApO1xuICAgIH1cblxuICAgIHVwZGF0ZWRFbGVzSW5MYXllcnMoKTtcbiAgfSk7XG59O1xuXG5MVENwLnF1ZXVlTGF5ZXIgPSBmdW5jdGlvbiggbGF5ZXIsIGVsZSApe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBxID0gc2VsZi5sYXllcnNRdWV1ZTtcbiAgdmFyIGVsZXNRID0gbGF5ZXIuZWxlc1F1ZXVlO1xuICB2YXIgaGFzSWQgPSBlbGVzUS5oYXNJZCA9IGVsZXNRLmhhc0lkIHx8IHt9O1xuXG4gIC8vIGlmIGEgbGF5ZXIgaXMgZ29pbmcgdG8gYmUgcmVwbGFjZWQsIHF1ZXVpbmcgaXMgYSB3YXN0ZSBvZiB0aW1lXG4gIGlmKCBsYXllci5yZXBsYWNlbWVudCApeyByZXR1cm47IH1cblxuICBpZiggZWxlICl7XG4gICAgaWYoIGhhc0lkWyBlbGUuaWQoKSBdICl7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZWxlc1EucHVzaCggZWxlICk7XG4gICAgaGFzSWRbIGVsZS5pZCgpIF0gPSB0cnVlO1xuICB9XG5cbiAgaWYoIGxheWVyLnJlcXMgKXtcbiAgICBsYXllci5yZXFzKys7XG5cbiAgICBxLnVwZGF0ZUl0ZW0oIGxheWVyICk7XG4gIH0gZWxzZSB7XG4gICAgbGF5ZXIucmVxcyA9IDE7XG5cbiAgICBxLnB1c2goIGxheWVyICk7XG4gIH1cbn07XG5cbkxUQ3AuZGVxdWV1ZSA9IGZ1bmN0aW9uKCBweFJhdGlvICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHEgPSBzZWxmLmxheWVyc1F1ZXVlO1xuICB2YXIgZGVxZCA9IFtdO1xuICB2YXIgZWxlRGVxcyA9IDA7XG5cbiAgd2hpbGUoIGVsZURlcXMgPCBtYXhEZXFTaXplICl7XG4gICAgaWYoIHEuc2l6ZSgpID09PSAwICl7IGJyZWFrOyB9XG5cbiAgICB2YXIgbGF5ZXIgPSBxLnBlZWsoKTtcblxuICAgIC8vIGlmIGEgbGF5ZXIgaGFzIGJlZW4gb3Igd2lsbCBiZSByZXBsYWNlZCwgdGhlbiBkb24ndCB3YXN0ZSB0aW1lIHdpdGggaXRcbiAgICBpZiggbGF5ZXIucmVwbGFjZW1lbnQgKXtcbiAgICAgICAvLyBsb2coJ2xheWVyICVzIGluIHF1ZXVlIHNraXBwZWQgYi9jIGl0IGFscmVhZHkgaGFzIGEgcmVwbGFjZW1lbnQnLCBsYXllci5pZCk7XG4gICAgICBxLnBvcCgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gaWYgdGhpcyBpcyBhIHJlcGxhY2VtZW50IGxheWVyIHRoYXQgaGFzIGJlZW4gc3VwZXJjZWRlZCwgdGhlbiBmb3JnZXQgaXRcbiAgICBpZiggbGF5ZXIucmVwbGFjZXMgJiYgbGF5ZXIgIT09IGxheWVyLnJlcGxhY2VzLnJlcGxhY2VtZW50ICl7XG4gICAgICAgLy8gbG9nKCdsYXllciBpcyBubyBsb25nZXIgdGhlIG1vc3QgdXB0b2RhdGUgcmVwbGFjZW1lbnQ7IGRlcXVldWVkJywgbGF5ZXIuaWQpXG4gICAgICBxLnBvcCgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYoIGxheWVyLmludmFsaWQgKXtcbiAgICAgICAvLyBsb2coJ3JlcGxhY2VtZW50IGxheWVyICVzIGlzIGludmFsaWQ7IGRlcXVldWVkJywgbGF5ZXIuaWQpO1xuICAgICAgcS5wb3AoKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBlbGUgPSBsYXllci5lbGVzUXVldWUuc2hpZnQoKTtcblxuICAgIGlmKCBlbGUgKXtcbiAgICAgICAvLyBsb2coJ2RlcXVldWUgbGF5ZXIgJXMnLCBsYXllci5pZCk7XG5cbiAgICAgIHNlbGYuZHJhd0VsZUluTGF5ZXIoIGxheWVyLCBlbGUsIGxheWVyLmxldmVsLCBweFJhdGlvICk7XG5cbiAgICAgIGVsZURlcXMrKztcbiAgICB9XG5cbiAgICBpZiggZGVxZC5sZW5ndGggPT09IDAgKXtcbiAgICAgIC8vIHdlIG5lZWQgb25seSBvbmUgZW50cnkgaW4gZGVxZCB0byBxdWV1ZSByZWRyYXdpbmcgZXRjXG4gICAgICBkZXFkLnB1c2goIHRydWUgKTtcbiAgICB9XG5cbiAgICAvLyBpZiB0aGUgbGF5ZXIgaGFzIGFsbCBpdHMgZWxlcyBkb25lLCB0aGVuIHJlbW92ZSBmcm9tIHRoZSBxdWV1ZVxuICAgIGlmKCBsYXllci5lbGVzUXVldWUubGVuZ3RoID09PSAwICl7XG4gICAgICBxLnBvcCgpO1xuXG4gICAgICBsYXllci5yZXFzID0gMDtcblxuICAgICAgIC8vIGxvZygnZGVxdWV1ZSBvZiBsYXllciAlcyBjb21wbGV0ZScsIGxheWVyLmlkKTtcblxuICAgICAgLy8gd2hlbiBhIHJlcGxhY2VtZW50IGxheWVyIGlzIGRlcXVldWVkLCBpdCByZXBsYWNlcyB0aGUgb2xkIGxheWVyIGluIHRoZSBsZXZlbFxuICAgICAgaWYoIGxheWVyLnJlcGxhY2VzICl7XG4gICAgICAgIHNlbGYuYXBwbHlMYXllclJlcGxhY2VtZW50KCBsYXllciApO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnJlcXVlc3RSZWRyYXcoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGVxZDtcbn07XG5cbkxUQ3AuYXBwbHlMYXllclJlcGxhY2VtZW50ID0gZnVuY3Rpb24oIGxheWVyICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGxheWVyc0luTGV2ZWwgPSBzZWxmLmxheWVyc0J5TGV2ZWxbIGxheWVyLmxldmVsIF07XG4gIHZhciByZXBsYWNlZCA9IGxheWVyLnJlcGxhY2VzO1xuICB2YXIgaW5kZXggPSBsYXllcnNJbkxldmVsLmluZGV4T2YoIHJlcGxhY2VkICk7XG5cbiAgLy8gaWYgdGhlIHJlcGxhY2VkIGxheWVyIGlzIG5vdCBpbiB0aGUgYWN0aXZlIGxpc3QgZm9yIHRoZSBsZXZlbCwgdGhlbiByZXBsYWNpbmdcbiAgLy8gcmVmcyB3b3VsZCBiZSBhIG1pc3Rha2UgKGkuZS4gb3ZlcndyaXRpbmcgdGhlIHRydWUgYWN0aXZlIGxheWVyKVxuICBpZiggaW5kZXggPCAwIHx8IHJlcGxhY2VkLmludmFsaWQgKXtcbiAgICAgLy8gbG9nKCdyZXBsYWNlbWVudCBsYXllciB3b3VsZCBoYXZlIG5vIGVmZmVjdCcsIGxheWVyLmlkKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsYXllcnNJbkxldmVsWyBpbmRleCBdID0gbGF5ZXI7IC8vIHJlcGxhY2UgbGV2ZWwgcmVmXG5cbiAgLy8gcmVwbGFjZSByZWZzIGluIGVsZXNcbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBsYXllci5lbGVzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIF9wID0gbGF5ZXIuZWxlc1tpXS5fcHJpdmF0ZTtcbiAgICB2YXIgY2FjaGUgPSBfcC5pbWdMYXllckNhY2hlcyA9IF9wLmltZ0xheWVyQ2FjaGVzIHx8IHt9O1xuXG4gICAgaWYoIGNhY2hlICl7XG4gICAgICBjYWNoZVsgbGF5ZXIubGV2ZWwgXSA9IGxheWVyO1xuICAgIH1cbiAgfVxuXG4gICAvLyBsb2coJ2FwcGx5IHJlcGxhY2VtZW50IGxheWVyICVzIG92ZXIgJXMnLCBsYXllci5pZCwgcmVwbGFjZWQuaWQpO1xuXG4gIHNlbGYucmVxdWVzdFJlZHJhdygpO1xufTtcblxuTFRDcC5yZXF1ZXN0UmVkcmF3ID0gdXRpbC5kZWJvdW5jZSggZnVuY3Rpb24oKXtcbiAgdmFyIHIgPSB0aGlzLnJlbmRlcmVyO1xuXG4gIHIucmVkcmF3SGludCggJ2VsZXMnLCB0cnVlICk7XG4gIHIucmVkcmF3SGludCggJ2RyYWcnLCB0cnVlICk7XG4gIHIucmVkcmF3KCk7XG59LCAxMDAgKTtcblxuTFRDcC5zZXR1cERlcXVldWVpbmcgPSBkZWZzLnNldHVwRGVxdWV1ZWluZyh7XG4gIGRlcVJlZHJhd1RocmVzaG9sZDogZGVxUmVkcmF3VGhyZXNob2xkLFxuICBkZXFDb3N0OiBkZXFDb3N0LFxuICBkZXFBdmdDb3N0OiBkZXFBdmdDb3N0LFxuICBkZXFOb0RyYXdDb3N0OiBkZXFOb0RyYXdDb3N0LFxuICBkZXFGYXN0Q29zdDogZGVxRmFzdENvc3QsXG4gIGRlcTogZnVuY3Rpb24oIHNlbGYsIHB4UmF0aW8gKXtcbiAgICByZXR1cm4gc2VsZi5kZXF1ZXVlKCBweFJhdGlvICk7XG4gIH0sXG4gIG9uRGVxZDogdXRpbC5ub29wLFxuICBzaG91bGRSZWRyYXc6IHV0aWwudHJ1ZWlmeSxcbiAgcHJpb3JpdHk6IGZ1bmN0aW9uKCBzZWxmICl7XG4gICAgcmV0dXJuIHNlbGYucmVuZGVyZXIuYmVmb3JlUmVuZGVyUHJpb3JpdGllcy5seXJUeHJEZXE7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExheWVyZWRUZXh0dXJlQ2FjaGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDUnAgPSB7fTtcblxuQ1JwLm5vZGVTaGFwZUltcGwgPSBmdW5jdGlvbiggbmFtZSwgY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsIGhlaWdodCwgcG9pbnRzICl7XG4gIHN3aXRjaCggbmFtZSApe1xuICAgIGNhc2UgJ2VsbGlwc2UnOlxuICAgICAgcmV0dXJuIHRoaXMuZHJhd0VsbGlwc2VQYXRoKCBjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLCB3aWR0aCwgaGVpZ2h0ICk7XG4gICAgY2FzZSAncG9seWdvbic6XG4gICAgICByZXR1cm4gdGhpcy5kcmF3UG9seWdvblBhdGgoIGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclksIHdpZHRoLCBoZWlnaHQsIHBvaW50cyApO1xuICAgIGNhc2UgJ3JvdW5kcmVjdGFuZ2xlJzpcbiAgICAgIHJldHVybiB0aGlzLmRyYXdSb3VuZFJlY3RhbmdsZVBhdGgoIGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclksIHdpZHRoLCBoZWlnaHQgKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDUnA7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSggJy4uLy4uLy4uL3V0aWwnICk7XG5cbnZhciBmdWxsRnBzVGltZSA9IDEwMDAvNjA7IC8vIGFzc3VtZSA2MCBmcmFtZXMgcGVyIHNlY29uZFxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0dXBEZXF1ZXVlaW5nOiBmdW5jdGlvbiggb3B0cyApe1xuICAgIHJldHVybiBmdW5jdGlvbiBzZXR1cERlcXVldWVpbmdJbXBsKCl7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgciA9IHRoaXMucmVuZGVyZXI7XG5cbiAgICAgIGlmKCBzZWxmLmRlcXVldWVpbmdTZXR1cCApe1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLmRlcXVldWVpbmdTZXR1cCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBxdWV1ZVJlZHJhdyA9IHV0aWwuZGVib3VuY2UoIGZ1bmN0aW9uKCl7XG4gICAgICAgIHIucmVkcmF3SGludCggJ2VsZXMnLCB0cnVlICk7XG4gICAgICAgIHIucmVkcmF3SGludCggJ2RyYWcnLCB0cnVlICk7XG5cbiAgICAgICAgci5yZWRyYXcoKTtcbiAgICAgIH0sIG9wdHMuZGVxUmVkcmF3VGhyZXNob2xkICk7XG5cbiAgICAgIHZhciBkZXF1ZXVlID0gZnVuY3Rpb24oIHdpbGxEcmF3LCBmcmFtZVN0YXJ0VGltZSApe1xuICAgICAgICB2YXIgc3RhcnRUaW1lID0gdXRpbC5wZXJmb3JtYW5jZU5vdygpO1xuICAgICAgICB2YXIgYXZnUmVuZGVyVGltZSA9IHIuYXZlcmFnZVJlZHJhd1RpbWU7XG4gICAgICAgIHZhciByZW5kZXJUaW1lID0gci5sYXN0UmVkcmF3VGltZTtcbiAgICAgICAgdmFyIGRlcWQgPSBbXTtcbiAgICAgICAgdmFyIGV4dGVudCA9IHIuY3kuZXh0ZW50KCk7XG4gICAgICAgIHZhciBwaXhlbFJhdGlvID0gci5nZXRQaXhlbFJhdGlvKCk7XG5cbiAgICAgICAgd2hpbGUoIHRydWUgKXtcbiAgICAgICAgICB2YXIgbm93ID0gdXRpbC5wZXJmb3JtYW5jZU5vdygpO1xuICAgICAgICAgIHZhciBkdXJhdGlvbiA9IG5vdyAtIHN0YXJ0VGltZTtcbiAgICAgICAgICB2YXIgZnJhbWVEdXJhdGlvbiA9IG5vdyAtIGZyYW1lU3RhcnRUaW1lO1xuXG4gICAgICAgICAgaWYoIHJlbmRlclRpbWUgPCBmdWxsRnBzVGltZSApe1xuICAgICAgICAgICAgLy8gaWYgd2UncmUgcmVuZGVyaW5nIGZhc3RlciB0aGFuIHRoZSBpZGVhbCBmcHMsIHRoZW4gZG8gZGVxdWV1ZWluZ1xuICAgICAgICAgICAgLy8gZHVyaW5nIGFsbCBvZiB0aGUgcmVtYWluaW5nIGZyYW1lIHRpbWVcblxuICAgICAgICAgICAgdmFyIHRpbWVBdmFpbGFibGUgPSBmdWxsRnBzVGltZSAtICggd2lsbERyYXcgPyBhdmdSZW5kZXJUaW1lIDogMCApO1xuXG4gICAgICAgICAgICBpZiggZnJhbWVEdXJhdGlvbiA+PSBvcHRzLmRlcUZhc3RDb3N0ICogdGltZUF2YWlsYWJsZSApe1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYoIHdpbGxEcmF3ICl7XG4gICAgICAgICAgICAgIGlmKFxuICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID49IG9wdHMuZGVxQ29zdCAqIHJlbmRlclRpbWVcbiAgICAgICAgICAgICAgICB8fCBkdXJhdGlvbiA+PSBvcHRzLmRlcUF2Z0Nvc3QgKiBhdmdSZW5kZXJUaW1lXG4gICAgICAgICAgICAgICl7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiggZnJhbWVEdXJhdGlvbiA+PSBvcHRzLmRlcU5vRHJhd0Nvc3QgKiBmdWxsRnBzVGltZSApe1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgdGhpc0RlcWQgPSBvcHRzLmRlcSggc2VsZiwgcGl4ZWxSYXRpbywgZXh0ZW50ICk7XG5cbiAgICAgICAgICBpZiggdGhpc0RlcWQubGVuZ3RoID4gMCApe1xuICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCB0aGlzRGVxZC5sZW5ndGg7IGkrKyApe1xuICAgICAgICAgICAgICBkZXFkLnB1c2goIHRoaXNEZXFkW2ldICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNhbGxiYWNrcyBvbiBkZXF1ZXVlXG4gICAgICAgIGlmKCBkZXFkLmxlbmd0aCA+IDAgKXtcbiAgICAgICAgICBvcHRzLm9uRGVxZCggc2VsZiwgZGVxZCApO1xuXG4gICAgICAgICAgaWYoICF3aWxsRHJhdyAmJiBvcHRzLnNob3VsZFJlZHJhdyggc2VsZiwgZGVxZCwgcGl4ZWxSYXRpbywgZXh0ZW50ICkgKXtcbiAgICAgICAgICAgIHF1ZXVlUmVkcmF3KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgcHJpb3JpdHkgPSBvcHRzLnByaW9yaXR5IHx8IHV0aWwubm9vcDtcblxuICAgICAgci5iZWZvcmVSZW5kZXIoIGRlcXVldWUsIHByaW9yaXR5KCBzZWxmICkgKTtcbiAgICB9O1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgeyBuYW1lOiAnbnVsbCcsIGltcGw6IHJlcXVpcmUoICcuL251bGwnICkgfSxcbiAgeyBuYW1lOiAnYmFzZScsIGltcGw6IHJlcXVpcmUoICcuL2Jhc2UnICkgfSxcbiAgeyBuYW1lOiAnY2FudmFzJywgaW1wbDogcmVxdWlyZSggJy4vY2FudmFzJyApIH1cbl07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIE51bGxSZW5kZXJlciggb3B0aW9ucyApe1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLm5vdGlmaWNhdGlvbnMgPSAwOyAvLyBmb3IgdGVzdGluZ1xufVxuXG52YXIgbm9vcCA9IGZ1bmN0aW9uKCl7fTtcblxuTnVsbFJlbmRlcmVyLnByb3RvdHlwZSA9IHtcbiAgcmVjYWxjdWxhdGVSZW5kZXJlZFN0eWxlOiBub29wLFxuICBub3RpZnk6IGZ1bmN0aW9uKCl7IHRoaXMubm90aWZpY2F0aW9ucysrOyB9LFxuICBpbml0OiBub29wXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE51bGxSZW5kZXJlcjtcbiIsIi8qISBXZWF2ZXIgbGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL3RsZHJsZWdhbC5jb20vbGljZW5zZS9taXQtbGljZW5zZSksIGNvcHlyaWdodCBNYXggRnJhbnogKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXMgPSByZXF1aXJlKCcuL2lzJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIFRocmVhZCA9IHJlcXVpcmUoJy4vdGhyZWFkJyk7XG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJy4vcHJvbWlzZScpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJy4vZGVmaW5lJyk7XG5cbnZhciBGYWJyaWMgPSBmdW5jdGlvbiggTiApe1xuICBpZiggISh0aGlzIGluc3RhbmNlb2YgRmFicmljKSApe1xuICAgIHJldHVybiBuZXcgRmFicmljKCBOICk7XG4gIH1cblxuICB0aGlzLl9wcml2YXRlID0ge1xuICAgIHBhc3M6IFtdXG4gIH07XG5cbiAgdmFyIGRlZk4gPSA0O1xuXG4gIGlmKCBpcy5udW1iZXIoTikgKXtcbiAgICAvLyB0aGVuIHVzZSB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiB0aHJlYWRzXG4gIH0gaWYoIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5ICE9IG51bGwgKXtcbiAgICBOID0gbmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3k7XG4gIH0gZWxzZSB7XG4gICAgdHJ5e1xuICAgICAgTiA9IHJlcXVpcmUoJ29zJykuY3B1cygpLmxlbmd0aDtcbiAgICB9IGNhdGNoKCBlcnIgKXtcbiAgICAgIE4gPSBkZWZOO1xuICAgIH1cbiAgfSAvLyBUT0RPIGNvdWxkIHVzZSBhbiBlc3RpbWF0aW9uIGhlcmUgYnV0IHdvdWxkIHRoZSBhZGRpdGlvbmFsIGV4cGVuc2UgYmUgd29ydGggaXQ/XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBOOyBpKysgKXtcbiAgICB0aGlzW2ldID0gbmV3IFRocmVhZCgpO1xuICB9XG5cbiAgdGhpcy5sZW5ndGggPSBOO1xufTtcblxudmFyIGZhYmZuID0gRmFicmljLnByb3RvdHlwZTsgLy8gc2hvcnQgYWxpYXNcblxudXRpbC5leHRlbmQoZmFiZm4sIHtcblxuICBpbnN0YW5jZVN0cmluZzogZnVuY3Rpb24oKXsgcmV0dXJuICdmYWJyaWMnOyB9LFxuXG4gIC8vIHJlcXVpcmUgZm4gaW4gYWxsIHRocmVhZHNcbiAgcmVxdWlyZTogZnVuY3Rpb24oIGZuLCBhcyApe1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIHRocmVhZCA9IHRoaXNbaV07XG5cbiAgICAgIHRocmVhZC5yZXF1aXJlKCBmbiwgYXMgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvLyBnZXQgYSByYW5kb20gdGhyZWFkXG4gIHJhbmRvbTogZnVuY3Rpb24oKXtcbiAgICB2YXIgaSA9IE1hdGgucm91bmQoICh0aGlzLmxlbmd0aCAtIDEpICogTWF0aC5yYW5kb20oKSApO1xuICAgIHZhciB0aHJlYWQgPSB0aGlzW2ldO1xuXG4gICAgcmV0dXJuIHRocmVhZDtcbiAgfSxcblxuICAvLyBydW4gb24gcmFuZG9tIHRocmVhZFxuICBydW46IGZ1bmN0aW9uKCBmbiApe1xuICAgIHZhciBwYXNzID0gdGhpcy5fcHJpdmF0ZS5wYXNzLnNoaWZ0KCk7XG5cbiAgICByZXR1cm4gdGhpcy5yYW5kb20oKS5wYXNzKCBwYXNzICkucnVuKCBmbiApO1xuICB9LFxuXG4gIC8vIHNlbmRzIGEgcmFuZG9tIHRocmVhZCBhIG1lc3NhZ2VcbiAgbWVzc2FnZTogZnVuY3Rpb24oIG0gKXtcbiAgICByZXR1cm4gdGhpcy5yYW5kb20oKS5tZXNzYWdlKCBtICk7XG4gIH0sXG5cbiAgLy8gc2VuZCBhbGwgdGhyZWFkcyBhIG1lc3NhZ2VcbiAgYnJvYWRjYXN0OiBmdW5jdGlvbiggbSApe1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIHRocmVhZCA9IHRoaXNbaV07XG5cbiAgICAgIHRocmVhZC5tZXNzYWdlKCBtICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG4gIH0sXG5cbiAgLy8gc3RvcCBhbGwgdGhyZWFkc1xuICBzdG9wOiBmdW5jdGlvbigpe1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIHRocmVhZCA9IHRoaXNbaV07XG5cbiAgICAgIHRocmVhZC5zdG9wKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG4gIH0sXG5cbiAgLy8gcGFzcyBkYXRhIHRvIGJlIHVzZWQgd2l0aCAuc3ByZWFkKCkgZXRjLlxuICBwYXNzOiBmdW5jdGlvbiggZGF0YSApe1xuICAgIHZhciBwYXNzID0gdGhpcy5fcHJpdmF0ZS5wYXNzO1xuXG4gICAgaWYoIGlzLmFycmF5KGRhdGEpICl7XG4gICAgICBwYXNzLnB1c2goIGRhdGEgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgJ09ubHkgYXJyYXlzIG1heSBiZSB1c2VkIHdpdGggZmFicmljLnBhc3MoKSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG4gIH0sXG5cbiAgc3ByZWFkU2l6ZTogZnVuY3Rpb24oKXtcbiAgICB2YXIgc3Vic2l6ZSA9ICBNYXRoLmNlaWwoIHRoaXMuX3ByaXZhdGUucGFzc1swXS5sZW5ndGggLyB0aGlzLmxlbmd0aCApO1xuXG4gICAgc3Vic2l6ZSA9IE1hdGgubWF4KCAxLCBzdWJzaXplICk7IC8vIGRvbid0IHBhc3MgbGVzcyB0aGFuIG9uZSBlbGUgdG8gZWFjaCB0aHJlYWRcblxuICAgIHJldHVybiBzdWJzaXplO1xuICB9LFxuXG4gIC8vIHNwbGl0IHRoZSBkYXRhIGludG8gc2xpY2VzIHRvIHNwcmVhZCB0aGUgZGF0YSBlcXVhbGx5IGFtb25nIHRocmVhZHNcbiAgc3ByZWFkOiBmdW5jdGlvbiggZm4gKXtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIF9wID0gc2VsZi5fcHJpdmF0ZTtcbiAgICB2YXIgc3Vic2l6ZSA9IHNlbGYuc3ByZWFkU2l6ZSgpOyAvLyBudW1iZXIgb2YgcGFzcyBlbGVzIHRvIGhhbmRsZSBpbiBlYWNoIHRocmVhZFxuICAgIHZhciBwYXNzID0gX3AucGFzcy5zaGlmdCgpLmNvbmNhdChbXSk7IC8vIGtlZXAgYSBjb3B5XG4gICAgdmFyIHJ1blBzID0gW107XG5cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciB0aHJlYWQgPSB0aGlzW2ldO1xuICAgICAgdmFyIHNsaWNlID0gcGFzcy5zcGxpY2UoIDAsIHN1YnNpemUgKTtcblxuICAgICAgdmFyIHJ1blAgPSB0aHJlYWQucGFzcyggc2xpY2UgKS5ydW4oIGZuICk7XG5cbiAgICAgIHJ1blBzLnB1c2goIHJ1blAgKTtcblxuICAgICAgdmFyIGRvbmVFYXJseSA9IHBhc3MubGVuZ3RoID09PSAwO1xuICAgICAgaWYoIGRvbmVFYXJseSApeyBicmVhazsgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbCggcnVuUHMgKS50aGVuKGZ1bmN0aW9uKCB0aGVucyApe1xuICAgICAgdmFyIHBvc3RwYXNzID0gW107XG4gICAgICB2YXIgcCA9IDA7XG5cbiAgICAgIC8vIGZpbGwgcG9zdHBhc3Mgd2l0aCB0aGUgdG90YWwgcmVzdWx0IGpvaW5lZCBmcm9tIGFsbCB0aHJlYWRzXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IHRoZW5zLmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciB0aGVuID0gdGhlbnNbaV07IC8vIGFycmF5IHJlc3VsdCBmcm9tIHRocmVhZCBpXG5cbiAgICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCB0aGVuLmxlbmd0aDsgaisrICl7XG4gICAgICAgICAgdmFyIHQgPSB0aGVuW2pdOyAvLyBhcnJheSBlbGVtZW50XG5cbiAgICAgICAgICBwb3N0cGFzc1sgcCsrIF0gPSB0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwb3N0cGFzcztcbiAgICB9KTtcbiAgfSxcblxuICAvLyBwYXJhbGxlbCB2ZXJzaW9uIG9mIGFycmF5Lm1hcCgpXG4gIG1hcDogZnVuY3Rpb24oIGZuICl7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgc2VsZi5yZXF1aXJlKCBmbiwgJ18kXyRfZmFibWFwJyApO1xuXG4gICAgcmV0dXJuIHNlbGYuc3ByZWFkKGZ1bmN0aW9uKCBzcGxpdCApe1xuICAgICAgdmFyIG1hcHBlZCA9IFtdO1xuICAgICAgdmFyIG9yaWdSZXNvbHZlID0gcmVzb2x2ZTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cbiAgICAgIHJlc29sdmUgPSBmdW5jdGlvbiggdmFsICl7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgICBtYXBwZWQucHVzaCggdmFsICk7XG4gICAgICB9O1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IHNwbGl0Lmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBvbGRMZW4gPSBtYXBwZWQubGVuZ3RoO1xuICAgICAgICB2YXIgcmV0ID0gXyRfJF9mYWJtYXAoIHNwbGl0W2ldICk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgICB2YXIgbm90aGluZ0luc2RCeVJlc29sdmUgPSBvbGRMZW4gPT09IG1hcHBlZC5sZW5ndGg7XG5cbiAgICAgICAgaWYoIG5vdGhpbmdJbnNkQnlSZXNvbHZlICl7XG4gICAgICAgICAgbWFwcGVkLnB1c2goIHJldCApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlc29sdmUgPSBvcmlnUmVzb2x2ZTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cbiAgICAgIHJldHVybiBtYXBwZWQ7XG4gICAgfSk7XG5cbiAgfSxcblxuICAvLyBwYXJhbGxlbCB2ZXJzaW9uIG9mIGFycmF5LmZpbHRlcigpXG4gIGZpbHRlcjogZnVuY3Rpb24oIGZuICl7XG4gICAgdmFyIF9wID0gdGhpcy5fcHJpdmF0ZTtcbiAgICB2YXIgcGFzcyA9IF9wLnBhc3NbMF07XG5cbiAgICByZXR1cm4gdGhpcy5tYXAoIGZuICkudGhlbihmdW5jdGlvbiggaW5jbHVkZSApe1xuICAgICAgdmFyIHJldCA9IFtdO1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IHBhc3MubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIGRhdHVtID0gcGFzc1tpXTtcbiAgICAgICAgdmFyIGluY0RhdHVtID0gaW5jbHVkZVtpXTtcblxuICAgICAgICBpZiggaW5jRGF0dW0gKXtcbiAgICAgICAgICByZXQucHVzaCggZGF0dW0gKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0pO1xuICB9LFxuXG4gIC8vIHNvcnRzIHRoZSBwYXNzZWQgYXJyYXkgdXNpbmcgYSBkaXZpZGUgYW5kIGNvbnF1ZXIgc3RyYXRlZ3lcbiAgc29ydDogZnVuY3Rpb24oIGNtcCApe1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgUCA9IHRoaXMuX3ByaXZhdGUucGFzc1swXS5sZW5ndGg7XG4gICAgdmFyIHN1YnNpemUgPSB0aGlzLnNwcmVhZFNpemUoKTtcblxuICAgIGNtcCA9IGNtcCB8fCBmdW5jdGlvbiggYSwgYiApeyAvLyBkZWZhdWx0IGNvbXBhcmlzb24gZnVuY3Rpb25cbiAgICAgIGlmKCBhIDwgYiApe1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2UgaWYoIGEgPiBiICl7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gMDtcbiAgICB9O1xuXG4gICAgc2VsZi5yZXF1aXJlKCBjbXAsICdfJF8kX2NtcCcgKTtcblxuICAgIHJldHVybiBzZWxmLnNwcmVhZChmdW5jdGlvbiggc3BsaXQgKXsgLy8gc29ydCBlYWNoIHNwbGl0IG5vcm1hbGx5XG4gICAgICB2YXIgc29ydGVkU3BsaXQgPSBzcGxpdC5zb3J0KCBfJF8kX2NtcCApOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgIHJlc29sdmUoIHNvcnRlZFNwbGl0ICk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuXG4gICAgfSkudGhlbihmdW5jdGlvbiggam9pbmVkICl7XG4gICAgICAvLyBkbyBhbGwgdGhlIG1lcmdpbmcgaW4gdGhlIG1haW4gdGhyZWFkIHRvIG1pbmltaXNlIGRhdGEgdHJhbnNmZXJcblxuICAgICAgLy8gVE9ETyBjb3VsZCBkbyBtZXJnaW5nIGluIHNlcGFyYXRlIHRocmVhZHMgYnV0IHdvdWxkIGluY3VyIGFkZCdsIGNvc3Qgb2YgZGF0YSB0cmFuc2ZlclxuICAgICAgLy8gZm9yIGVhY2ggbGV2ZWwgb2YgdGhlIG1lcmdlXG5cbiAgICAgIHZhciBtZXJnZSA9IGZ1bmN0aW9uKCBpLCBqLCBtYXggKXtcbiAgICAgICAgLy8gZG9uJ3Qgb3ZlcmZsb3cgYXJyYXlcbiAgICAgICAgaiA9IE1hdGgubWluKCBqLCBQICk7XG4gICAgICAgIG1heCA9IE1hdGgubWluKCBtYXgsIFAgKTtcblxuICAgICAgICAvLyBsZWZ0IGFuZCByaWdodCBzaWRlcyBvZiBtZXJnZVxuICAgICAgICB2YXIgbCA9IGk7XG4gICAgICAgIHZhciByID0gajtcblxuICAgICAgICB2YXIgc29ydGVkID0gW107XG5cbiAgICAgICAgZm9yKCB2YXIgayA9IGw7IGsgPCBtYXg7IGsrKyApe1xuXG4gICAgICAgICAgdmFyIGVsZUkgPSBqb2luZWRbaV07XG4gICAgICAgICAgdmFyIGVsZUogPSBqb2luZWRbal07XG5cbiAgICAgICAgICBpZiggaSA8IHIgJiYgKCBqID49IG1heCB8fCBjbXAoZWxlSSwgZWxlSikgPD0gMCApICl7XG4gICAgICAgICAgICBzb3J0ZWQucHVzaCggZWxlSSApO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzb3J0ZWQucHVzaCggZWxlSiApO1xuICAgICAgICAgICAgaisrO1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW4gdGhlIGFycmF5IHByb3BlciwgcHV0IHRoZSBzb3J0ZWQgdmFsdWVzXG4gICAgICAgIGZvciggdmFyIGsgPSAwOyBrIDwgc29ydGVkLmxlbmd0aDsgaysrICl7IC8vIGt0aCBzb3J0ZWQgaXRlbVxuICAgICAgICAgIHZhciBpbmRleCA9IGwgKyBrO1xuXG4gICAgICAgICAgam9pbmVkWyBpbmRleCBdID0gc29ydGVkW2tdO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IoIHZhciBzcGxpdEwgPSBzdWJzaXplOyBzcGxpdEwgPCBQOyBzcGxpdEwgKj0gMiApeyAvLyBtZXJnZSB1bnRpbCBhcnJheSBpcyBcInNwbGl0XCIgYXMgMVxuXG4gICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgUDsgaSArPSAyKnNwbGl0TCApe1xuICAgICAgICAgIG1lcmdlKCBpLCBpICsgc3BsaXRMLCBpICsgMipzcGxpdEwgKTtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBqb2luZWQ7XG4gICAgfSk7XG4gIH1cblxuXG59KTtcblxudmFyIGRlZmluZVJhbmRvbVBhc3NlciA9IGZ1bmN0aW9uKCBvcHRzICl7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIHJldHVybiBmdW5jdGlvbiggZm4sIGFyZzEgKXtcbiAgICB2YXIgcGFzcyA9IHRoaXMuX3ByaXZhdGUucGFzcy5zaGlmdCgpO1xuXG4gICAgcmV0dXJuIHRoaXMucmFuZG9tKCkucGFzcyggcGFzcyApWyBvcHRzLnRocmVhZEZuIF0oIGZuLCBhcmcxICk7XG4gIH07XG59O1xuXG51dGlsLmV4dGVuZChmYWJmbiwge1xuICByYW5kb21NYXA6IGRlZmluZVJhbmRvbVBhc3Nlcih7IHRocmVhZEZuOiAnbWFwJyB9KSxcblxuICByZWR1Y2U6IGRlZmluZVJhbmRvbVBhc3Nlcih7IHRocmVhZEZuOiAncmVkdWNlJyB9KSxcblxuICByZWR1Y2VSaWdodDogZGVmaW5lUmFuZG9tUGFzc2VyKHsgdGhyZWFkRm46ICdyZWR1Y2VSaWdodCcgfSlcbn0pO1xuXG4vLyBhbGlhc2VzXG52YXIgZm4gPSBmYWJmbjtcbmZuLnByb21pc2UgPSBmbi5ydW47XG5mbi50ZXJtaW5hdGUgPSBmbi5oYWx0ID0gZm4uc3RvcDtcbmZuLmluY2x1ZGUgPSBmbi5yZXF1aXJlO1xuXG4vLyBwdWxsIGluIGV2ZW50IGFwaXNcbnV0aWwuZXh0ZW5kKGZhYmZuLCB7XG4gIG9uOiBkZWZpbmUub24oKSxcbiAgb25lOiBkZWZpbmUub24oeyB1bmJpbmRTZWxmT25UcmlnZ2VyOiB0cnVlIH0pLFxuICBvZmY6IGRlZmluZS5vZmYoKSxcbiAgdHJpZ2dlcjogZGVmaW5lLnRyaWdnZXIoKVxufSk7XG5cbmRlZmluZS5ldmVudEFsaWFzZXNPbiggZmFiZm4gKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGYWJyaWM7XG4iLCIvKiFcblBvcnRlZCBieSBYdWVxaWFvIFh1IDx4dWVxaWFveHVAZ21haWwuY29tPjtcblxuUFNGIExJQ0VOU0UgQUdSRUVNRU5UIEZPUiBQWVRIT04gMi43LjJcblxuMS4gVGhpcyBMSUNFTlNFIEFHUkVFTUVOVCBpcyBiZXR3ZWVuIHRoZSBQeXRob24gU29mdHdhcmUgRm91bmRhdGlvbiAo4oCcUFNG4oCdKSwgYW5kIHRoZSBJbmRpdmlkdWFsIG9yIE9yZ2FuaXphdGlvbiAo4oCcTGljZW5zZWXigJ0pIGFjY2Vzc2luZyBhbmQgb3RoZXJ3aXNlIHVzaW5nIFB5dGhvbiAyLjcuMiBzb2Z0d2FyZSBpbiBzb3VyY2Ugb3IgYmluYXJ5IGZvcm0gYW5kIGl0cyBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24uXG4yLiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50LCBQU0YgaGVyZWJ5IGdyYW50cyBMaWNlbnNlZSBhIG5vbmV4Y2x1c2l2ZSwgcm95YWx0eS1mcmVlLCB3b3JsZC13aWRlIGxpY2Vuc2UgdG8gcmVwcm9kdWNlLCBhbmFseXplLCB0ZXN0LCBwZXJmb3JtIGFuZC9vciBkaXNwbGF5IHB1YmxpY2x5LCBwcmVwYXJlIGRlcml2YXRpdmUgd29ya3MsIGRpc3RyaWJ1dGUsIGFuZCBvdGhlcndpc2UgdXNlIFB5dGhvbiAyLjcuMiBhbG9uZSBvciBpbiBhbnkgZGVyaXZhdGl2ZSB2ZXJzaW9uLCBwcm92aWRlZCwgaG93ZXZlciwgdGhhdCBQU0bigJlzIExpY2Vuc2UgQWdyZWVtZW50IGFuZCBQU0bigJlzIG5vdGljZSBvZiBjb3B5cmlnaHQsIGkuZS4sIOKAnENvcHlyaWdodCDCqSAyMDAxLTIwMTIgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb247IEFsbCBSaWdodHMgUmVzZXJ2ZWTigJ0gYXJlIHJldGFpbmVkIGluIFB5dGhvbiAyLjcuMiBhbG9uZSBvciBpbiBhbnkgZGVyaXZhdGl2ZSB2ZXJzaW9uIHByZXBhcmVkIGJ5IExpY2Vuc2VlLlxuMy4gSW4gdGhlIGV2ZW50IExpY2Vuc2VlIHByZXBhcmVzIGEgZGVyaXZhdGl2ZSB3b3JrIHRoYXQgaXMgYmFzZWQgb24gb3IgaW5jb3Jwb3JhdGVzIFB5dGhvbiAyLjcuMiBvciBhbnkgcGFydCB0aGVyZW9mLCBhbmQgd2FudHMgdG8gbWFrZSB0aGUgZGVyaXZhdGl2ZSB3b3JrIGF2YWlsYWJsZSB0byBvdGhlcnMgYXMgcHJvdmlkZWQgaGVyZWluLCB0aGVuIExpY2Vuc2VlIGhlcmVieSBhZ3JlZXMgdG8gaW5jbHVkZSBpbiBhbnkgc3VjaCB3b3JrIGEgYnJpZWYgc3VtbWFyeSBvZiB0aGUgY2hhbmdlcyBtYWRlIHRvIFB5dGhvbiAyLjcuMi5cbjQuIFBTRiBpcyBtYWtpbmcgUHl0aG9uIDIuNy4yIGF2YWlsYWJsZSB0byBMaWNlbnNlZSBvbiBhbiDigJxBUyBJU+KAnSBiYXNpcy4gUFNGIE1BS0VTIE5PIFJFUFJFU0VOVEFUSU9OUyBPUiBXQVJSQU5USUVTLCBFWFBSRVNTIE9SIElNUExJRUQuIEJZIFdBWSBPRiBFWEFNUExFLCBCVVQgTk9UIExJTUlUQVRJT04sIFBTRiBNQUtFUyBOTyBBTkQgRElTQ0xBSU1TIEFOWSBSRVBSRVNFTlRBVElPTiBPUiBXQVJSQU5UWSBPRiBNRVJDSEFOVEFCSUxJVFkgT1IgRklUTkVTUyBGT1IgQU5ZIFBBUlRJQ1VMQVIgUFVSUE9TRSBPUiBUSEFUIFRIRSBVU0UgT0YgUFlUSE9OIDIuNy4yIFdJTEwgTk9UIElORlJJTkdFIEFOWSBUSElSRCBQQVJUWSBSSUdIVFMuXG41LiBQU0YgU0hBTEwgTk9UIEJFIExJQUJMRSBUTyBMSUNFTlNFRSBPUiBBTlkgT1RIRVIgVVNFUlMgT0YgUFlUSE9OIDIuNy4yIEZPUiBBTlkgSU5DSURFTlRBTCwgU1BFQ0lBTCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIExPU1MgQVMgQSBSRVNVTFQgT0YgTU9ESUZZSU5HLCBESVNUUklCVVRJTkcsIE9SIE9USEVSV0lTRSBVU0lORyBQWVRIT04gMi43LjIsIE9SIEFOWSBERVJJVkFUSVZFIFRIRVJFT0YsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgVEhFUkVPRi5cbjYuIFRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgd2lsbCBhdXRvbWF0aWNhbGx5IHRlcm1pbmF0ZSB1cG9uIGEgbWF0ZXJpYWwgYnJlYWNoIG9mIGl0cyB0ZXJtcyBhbmQgY29uZGl0aW9ucy5cbjcuIE5vdGhpbmcgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBzaGFsbCBiZSBkZWVtZWQgdG8gY3JlYXRlIGFueSByZWxhdGlvbnNoaXAgb2YgYWdlbmN5LCBwYXJ0bmVyc2hpcCwgb3Igam9pbnQgdmVudHVyZSBiZXR3ZWVuIFBTRiBhbmQgTGljZW5zZWUuIFRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgZG9lcyBub3QgZ3JhbnQgcGVybWlzc2lvbiB0byB1c2UgUFNGIHRyYWRlbWFya3Mgb3IgdHJhZGUgbmFtZSBpbiBhIHRyYWRlbWFyayBzZW5zZSB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgb3Igc2VydmljZXMgb2YgTGljZW5zZWUsIG9yIGFueSB0aGlyZCBwYXJ0eS5cbjguIEJ5IGNvcHlpbmcsIGluc3RhbGxpbmcgb3Igb3RoZXJ3aXNlIHVzaW5nIFB5dGhvbiAyLjcuMiwgTGljZW5zZWUgYWdyZWVzIHRvIGJlIGJvdW5kIGJ5IHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50LlxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjguMFxuXG52YXIgSGVhcCwgZGVmYXVsdENtcCwgZmxvb3IsIGhlYXBpZnksIGhlYXBwb3AsIGhlYXBwdXNoLCBoZWFwcHVzaHBvcCwgaGVhcHJlcGxhY2UsIGluc29ydCwgbWluLCBubGFyZ2VzdCwgbnNtYWxsZXN0LCB1cGRhdGVJdGVtLCBfc2lmdGRvd24sIF9zaWZ0dXA7XG5cbmZsb29yID0gTWF0aC5mbG9vciwgbWluID0gTWF0aC5taW47XG5cblxuLypcbkRlZmF1bHQgY29tcGFyaXNvbiBmdW5jdGlvbiB0byBiZSB1c2VkXG4gKi9cblxuZGVmYXVsdENtcCA9IGZ1bmN0aW9uKCB4LCB5ICl7XG4gIGlmKCB4IDwgeSApe1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiggeCA+IHkgKXtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cblxuLypcbkluc2VydCBpdGVtIHggaW4gbGlzdCBhLCBhbmQga2VlcCBpdCBzb3J0ZWQgYXNzdW1pbmcgYSBpcyBzb3J0ZWQuXG5cbklmIHggaXMgYWxyZWFkeSBpbiBhLCBpbnNlcnQgaXQgdG8gdGhlIHJpZ2h0IG9mIHRoZSByaWdodG1vc3QgeC5cblxuT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgYS5sZW5ndGgpIGJvdW5kIHRoZSBzbGljZVxub2YgYSB0byBiZSBzZWFyY2hlZC5cbiAqL1xuXG5pbnNvcnQgPSBmdW5jdGlvbiggYSwgeCwgbG8sIGhpLCBjbXAgKXtcbiAgdmFyIG1pZDtcbiAgaWYoIGxvID09IG51bGwgKXtcbiAgICBsbyA9IDA7XG4gIH1cbiAgaWYoIGNtcCA9PSBudWxsICl7XG4gICAgY21wID0gZGVmYXVsdENtcDtcbiAgfVxuICBpZiggbG8gPCAwICl7XG4gICAgdGhyb3cgbmV3IEVycm9yKCAnbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnICk7XG4gIH1cbiAgaWYoIGhpID09IG51bGwgKXtcbiAgICBoaSA9IGEubGVuZ3RoO1xuICB9XG4gIHdoaWxlKCBsbyA8IGhpICl7XG4gICAgbWlkID0gZmxvb3IoIChsbyArIGhpKSAvIDIgKTtcbiAgICBpZiggY21wKCB4LCBhWyBtaWQgXSApIDwgMCApe1xuICAgICAgaGkgPSBtaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvID0gbWlkICsgMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIChbXS5zcGxpY2UuYXBwbHkoIGEsIFsgbG8sIGxvIC0gbG8gXS5jb25jYXQoIHggKSApLCB4KTtcbn07XG5cblxuLypcblB1c2ggaXRlbSBvbnRvIGhlYXAsIG1haW50YWluaW5nIHRoZSBoZWFwIGludmFyaWFudC5cbiAqL1xuXG5oZWFwcHVzaCA9IGZ1bmN0aW9uKCBhcnJheSwgaXRlbSwgY21wICl7XG4gIGlmKCBjbXAgPT0gbnVsbCApe1xuICAgIGNtcCA9IGRlZmF1bHRDbXA7XG4gIH1cbiAgYXJyYXkucHVzaCggaXRlbSApO1xuICByZXR1cm4gX3NpZnRkb3duKCBhcnJheSwgMCwgYXJyYXkubGVuZ3RoIC0gMSwgY21wICk7XG59O1xuXG5cbi8qXG5Qb3AgdGhlIHNtYWxsZXN0IGl0ZW0gb2ZmIHRoZSBoZWFwLCBtYWludGFpbmluZyB0aGUgaGVhcCBpbnZhcmlhbnQuXG4gKi9cblxuaGVhcHBvcCA9IGZ1bmN0aW9uKCBhcnJheSwgY21wICl7XG4gIHZhciBsYXN0ZWx0LCByZXR1cm5pdGVtO1xuICBpZiggY21wID09IG51bGwgKXtcbiAgICBjbXAgPSBkZWZhdWx0Q21wO1xuICB9XG4gIGxhc3RlbHQgPSBhcnJheS5wb3AoKTtcbiAgaWYoIGFycmF5Lmxlbmd0aCApe1xuICAgIHJldHVybml0ZW0gPSBhcnJheVswXTtcbiAgICBhcnJheVswXSA9IGxhc3RlbHQ7XG4gICAgX3NpZnR1cCggYXJyYXksIDAsIGNtcCApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybml0ZW0gPSBsYXN0ZWx0O1xuICB9XG4gIHJldHVybiByZXR1cm5pdGVtO1xufTtcblxuXG4vKlxuUG9wIGFuZCByZXR1cm4gdGhlIGN1cnJlbnQgc21hbGxlc3QgdmFsdWUsIGFuZCBhZGQgdGhlIG5ldyBpdGVtLlxuXG5UaGlzIGlzIG1vcmUgZWZmaWNpZW50IHRoYW4gaGVhcHBvcCgpIGZvbGxvd2VkIGJ5IGhlYXBwdXNoKCksIGFuZCBjYW4gYmVcbm1vcmUgYXBwcm9wcmlhdGUgd2hlbiB1c2luZyBhIGZpeGVkIHNpemUgaGVhcC4gTm90ZSB0aGF0IHRoZSB2YWx1ZVxucmV0dXJuZWQgbWF5IGJlIGxhcmdlciB0aGFuIGl0ZW0hIFRoYXQgY29uc3RyYWlucyByZWFzb25hYmxlIHVzZSBvZlxudGhpcyByb3V0aW5lIHVubGVzcyB3cml0dGVuIGFzIHBhcnQgb2YgYSBjb25kaXRpb25hbCByZXBsYWNlbWVudDpcbiAgICBpZiBpdGVtID4gYXJyYXlbMF1cbiAgICAgIGl0ZW0gPSBoZWFwcmVwbGFjZShhcnJheSwgaXRlbSlcbiAqL1xuXG5oZWFwcmVwbGFjZSA9IGZ1bmN0aW9uKCBhcnJheSwgaXRlbSwgY21wICl7XG4gIHZhciByZXR1cm5pdGVtO1xuICBpZiggY21wID09IG51bGwgKXtcbiAgICBjbXAgPSBkZWZhdWx0Q21wO1xuICB9XG4gIHJldHVybml0ZW0gPSBhcnJheVswXTtcbiAgYXJyYXlbMF0gPSBpdGVtO1xuICBfc2lmdHVwKCBhcnJheSwgMCwgY21wICk7XG4gIHJldHVybiByZXR1cm5pdGVtO1xufTtcblxuXG4vKlxuRmFzdCB2ZXJzaW9uIG9mIGEgaGVhcHB1c2ggZm9sbG93ZWQgYnkgYSBoZWFwcG9wLlxuICovXG5cbmhlYXBwdXNocG9wID0gZnVuY3Rpb24oIGFycmF5LCBpdGVtLCBjbXAgKXtcbiAgdmFyIF9yZWY7XG4gIGlmKCBjbXAgPT0gbnVsbCApe1xuICAgIGNtcCA9IGRlZmF1bHRDbXA7XG4gIH1cbiAgaWYoIGFycmF5Lmxlbmd0aCAmJiBjbXAoIGFycmF5WzBdLCBpdGVtICkgPCAwICl7XG4gICAgX3JlZiA9IFsgYXJyYXlbMF0sIGl0ZW0gXSwgaXRlbSA9IF9yZWZbMF0sIGFycmF5WzBdID0gX3JlZlsxXTtcbiAgICBfc2lmdHVwKCBhcnJheSwgMCwgY21wICk7XG4gIH1cbiAgcmV0dXJuIGl0ZW07XG59O1xuXG5cbi8qXG5UcmFuc2Zvcm0gbGlzdCBpbnRvIGEgaGVhcCwgaW4tcGxhY2UsIGluIE8oYXJyYXkubGVuZ3RoKSB0aW1lLlxuICovXG5cbmhlYXBpZnkgPSBmdW5jdGlvbiggYXJyYXksIGNtcCApe1xuICB2YXIgaSwgX2ksIF9qLCBfbGVuLCBfcmVmLCBfcmVmMSwgX3Jlc3VsdHMsIF9yZXN1bHRzMTtcbiAgaWYoIGNtcCA9PSBudWxsICl7XG4gICAgY21wID0gZGVmYXVsdENtcDtcbiAgfVxuICBfcmVmMSA9IChmdW5jdGlvbigpe1xuICAgIF9yZXN1bHRzMSA9IFtdO1xuICAgIGZvciggdmFyIF9qID0gMCwgX3JlZiA9IGZsb29yKCBhcnJheS5sZW5ndGggLyAyICk7IDAgPD0gX3JlZiA/IF9qIDwgX3JlZiA6IF9qID4gX3JlZjsgMCA8PSBfcmVmID8gX2orKyA6IF9qLS0gKXsgX3Jlc3VsdHMxLnB1c2goIF9qICk7IH1cbiAgICByZXR1cm4gX3Jlc3VsdHMxO1xuICB9KS5hcHBseSggdGhpcyApLnJldmVyc2UoKTtcbiAgX3Jlc3VsdHMgPSBbXTtcbiAgZm9yKCBfaSA9IDAsIF9sZW4gPSBfcmVmMS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKyApe1xuICAgIGkgPSBfcmVmMVsgX2kgXTtcbiAgICBfcmVzdWx0cy5wdXNoKCBfc2lmdHVwKCBhcnJheSwgaSwgY21wICkgKTtcbiAgfVxuICByZXR1cm4gX3Jlc3VsdHM7XG59O1xuXG5cbi8qXG5VcGRhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBnaXZlbiBpdGVtIGluIHRoZSBoZWFwLlxuVGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIGV2ZXJ5IHRpbWUgdGhlIGl0ZW0gaXMgYmVpbmcgbW9kaWZpZWQuXG4gKi9cblxudXBkYXRlSXRlbSA9IGZ1bmN0aW9uKCBhcnJheSwgaXRlbSwgY21wICl7XG4gIHZhciBwb3M7XG4gIGlmKCBjbXAgPT0gbnVsbCApe1xuICAgIGNtcCA9IGRlZmF1bHRDbXA7XG4gIH1cbiAgcG9zID0gYXJyYXkuaW5kZXhPZiggaXRlbSApO1xuICBpZiggcG9zID09PSAtMSApe1xuICAgIHJldHVybjtcbiAgfVxuICBfc2lmdGRvd24oIGFycmF5LCAwLCBwb3MsIGNtcCApO1xuICByZXR1cm4gX3NpZnR1cCggYXJyYXksIHBvcywgY21wICk7XG59O1xuXG5cbi8qXG5GaW5kIHRoZSBuIGxhcmdlc3QgZWxlbWVudHMgaW4gYSBkYXRhc2V0LlxuICovXG5cbm5sYXJnZXN0ID0gZnVuY3Rpb24oIGFycmF5LCBuLCBjbXAgKXtcbiAgdmFyIGVsZW0sIHJlc3VsdCwgX2ksIF9sZW4sIF9yZWY7XG4gIGlmKCBjbXAgPT0gbnVsbCApe1xuICAgIGNtcCA9IGRlZmF1bHRDbXA7XG4gIH1cbiAgcmVzdWx0ID0gYXJyYXkuc2xpY2UoIDAsIG4gKTtcbiAgaWYoICFyZXN1bHQubGVuZ3RoICl7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBoZWFwaWZ5KCByZXN1bHQsIGNtcCApO1xuICBfcmVmID0gYXJyYXkuc2xpY2UoIG4gKTtcbiAgZm9yKCBfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrICl7XG4gICAgZWxlbSA9IF9yZWZbIF9pIF07XG4gICAgaGVhcHB1c2hwb3AoIHJlc3VsdCwgZWxlbSwgY21wICk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC5zb3J0KCBjbXAgKS5yZXZlcnNlKCk7XG59O1xuXG5cbi8qXG5GaW5kIHRoZSBuIHNtYWxsZXN0IGVsZW1lbnRzIGluIGEgZGF0YXNldC5cbiAqL1xuXG5uc21hbGxlc3QgPSBmdW5jdGlvbiggYXJyYXksIG4sIGNtcCApe1xuICB2YXIgZWxlbSwgaSwgbG9zLCByZXN1bHQsIF9pLCBfaiwgX2xlbiwgX3JlZiwgX3JlZjEsIF9yZXN1bHRzO1xuICBpZiggY21wID09IG51bGwgKXtcbiAgICBjbXAgPSBkZWZhdWx0Q21wO1xuICB9XG4gIGlmKCBuICogMTAgPD0gYXJyYXkubGVuZ3RoICl7XG4gICAgcmVzdWx0ID0gYXJyYXkuc2xpY2UoIDAsIG4gKS5zb3J0KCBjbXAgKTtcbiAgICBpZiggIXJlc3VsdC5sZW5ndGggKXtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGxvcyA9IHJlc3VsdFsgcmVzdWx0Lmxlbmd0aCAtIDFdO1xuICAgIF9yZWYgPSBhcnJheS5zbGljZSggbiApO1xuICAgIGZvciggX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKyApe1xuICAgICAgZWxlbSA9IF9yZWZbIF9pIF07XG4gICAgICBpZiggY21wKCBlbGVtLCBsb3MgKSA8IDAgKXtcbiAgICAgICAgaW5zb3J0KCByZXN1bHQsIGVsZW0sIDAsIG51bGwsIGNtcCApO1xuICAgICAgICByZXN1bHQucG9wKCk7XG4gICAgICAgIGxvcyA9IHJlc3VsdFsgcmVzdWx0Lmxlbmd0aCAtIDFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGhlYXBpZnkoIGFycmF5LCBjbXAgKTtcbiAgX3Jlc3VsdHMgPSBbXTtcbiAgZm9yKCBpID0gX2ogPSAwLCBfcmVmMSA9IG1pbiggbiwgYXJyYXkubGVuZ3RoICk7IDAgPD0gX3JlZjEgPyBfaiA8IF9yZWYxIDogX2ogPiBfcmVmMTsgaSA9IDAgPD0gX3JlZjEgPyArK19qIDogLS1faiApe1xuICAgIF9yZXN1bHRzLnB1c2goIGhlYXBwb3AoIGFycmF5LCBjbXAgKSApO1xuICB9XG4gIHJldHVybiBfcmVzdWx0cztcbn07XG5cbl9zaWZ0ZG93biA9IGZ1bmN0aW9uKCBhcnJheSwgc3RhcnRwb3MsIHBvcywgY21wICl7XG4gIHZhciBuZXdpdGVtLCBwYXJlbnQsIHBhcmVudHBvcztcbiAgaWYoIGNtcCA9PSBudWxsICl7XG4gICAgY21wID0gZGVmYXVsdENtcDtcbiAgfVxuICBuZXdpdGVtID0gYXJyYXlbIHBvcyBdO1xuICB3aGlsZSggcG9zID4gc3RhcnRwb3MgKXtcbiAgICBwYXJlbnRwb3MgPSAocG9zIC0gMSkgPj4gMTtcbiAgICBwYXJlbnQgPSBhcnJheVsgcGFyZW50cG9zIF07XG4gICAgaWYoIGNtcCggbmV3aXRlbSwgcGFyZW50ICkgPCAwICl7XG4gICAgICBhcnJheVsgcG9zIF0gPSBwYXJlbnQ7XG4gICAgICBwb3MgPSBwYXJlbnRwb3M7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIGFycmF5WyBwb3MgXSA9IG5ld2l0ZW07XG59O1xuXG5fc2lmdHVwID0gZnVuY3Rpb24oIGFycmF5LCBwb3MsIGNtcCApe1xuICB2YXIgY2hpbGRwb3MsIGVuZHBvcywgbmV3aXRlbSwgcmlnaHRwb3MsIHN0YXJ0cG9zO1xuICBpZiggY21wID09IG51bGwgKXtcbiAgICBjbXAgPSBkZWZhdWx0Q21wO1xuICB9XG4gIGVuZHBvcyA9IGFycmF5Lmxlbmd0aDtcbiAgc3RhcnRwb3MgPSBwb3M7XG4gIG5ld2l0ZW0gPSBhcnJheVsgcG9zIF07XG4gIGNoaWxkcG9zID0gMiAqIHBvcyArIDE7XG4gIHdoaWxlKCBjaGlsZHBvcyA8IGVuZHBvcyApe1xuICAgIHJpZ2h0cG9zID0gY2hpbGRwb3MgKyAxO1xuICAgIGlmKCByaWdodHBvcyA8IGVuZHBvcyAmJiAhKGNtcCggYXJyYXlbIGNoaWxkcG9zIF0sIGFycmF5WyByaWdodHBvcyBdICkgPCAwKSApe1xuICAgICAgY2hpbGRwb3MgPSByaWdodHBvcztcbiAgICB9XG4gICAgYXJyYXlbIHBvcyBdID0gYXJyYXlbIGNoaWxkcG9zIF07XG4gICAgcG9zID0gY2hpbGRwb3M7XG4gICAgY2hpbGRwb3MgPSAyICogcG9zICsgMTtcbiAgfVxuICBhcnJheVsgcG9zIF0gPSBuZXdpdGVtO1xuICByZXR1cm4gX3NpZnRkb3duKCBhcnJheSwgc3RhcnRwb3MsIHBvcywgY21wICk7XG59O1xuXG5IZWFwID0gKGZ1bmN0aW9uKCl7XG4gIEhlYXAucHVzaCA9IGhlYXBwdXNoO1xuXG4gIEhlYXAucG9wID0gaGVhcHBvcDtcblxuICBIZWFwLnJlcGxhY2UgPSBoZWFwcmVwbGFjZTtcblxuICBIZWFwLnB1c2hwb3AgPSBoZWFwcHVzaHBvcDtcblxuICBIZWFwLmhlYXBpZnkgPSBoZWFwaWZ5O1xuXG4gIEhlYXAudXBkYXRlSXRlbSA9IHVwZGF0ZUl0ZW07XG5cbiAgSGVhcC5ubGFyZ2VzdCA9IG5sYXJnZXN0O1xuXG4gIEhlYXAubnNtYWxsZXN0ID0gbnNtYWxsZXN0O1xuXG4gIGZ1bmN0aW9uIEhlYXAoIGNtcCApe1xuICAgIHRoaXMuY21wID0gY21wICE9IG51bGwgPyBjbXAgOiBkZWZhdWx0Q21wO1xuICAgIHRoaXMubm9kZXMgPSBbXTtcbiAgfVxuXG4gIEhlYXAucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiggeCApe1xuICAgIHJldHVybiBoZWFwcHVzaCggdGhpcy5ub2RlcywgeCwgdGhpcy5jbXAgKTtcbiAgfTtcblxuICBIZWFwLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiBoZWFwcG9wKCB0aGlzLm5vZGVzLCB0aGlzLmNtcCApO1xuICB9O1xuXG4gIEhlYXAucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLm5vZGVzWzBdO1xuICB9O1xuXG4gIEhlYXAucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24oIHggKXtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5pbmRleE9mKCB4ICkgIT09IC0xO1xuICB9O1xuXG4gIEhlYXAucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiggeCApe1xuICAgIHJldHVybiBoZWFwcmVwbGFjZSggdGhpcy5ub2RlcywgeCwgdGhpcy5jbXAgKTtcbiAgfTtcblxuICBIZWFwLnByb3RvdHlwZS5wdXNocG9wID0gZnVuY3Rpb24oIHggKXtcbiAgICByZXR1cm4gaGVhcHB1c2hwb3AoIHRoaXMubm9kZXMsIHgsIHRoaXMuY21wICk7XG4gIH07XG5cbiAgSGVhcC5wcm90b3R5cGUuaGVhcGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGhlYXBpZnkoIHRoaXMubm9kZXMsIHRoaXMuY21wICk7XG4gIH07XG5cbiAgSGVhcC5wcm90b3R5cGUudXBkYXRlSXRlbSA9IGZ1bmN0aW9uKCB4ICl7XG4gICAgcmV0dXJuIHVwZGF0ZUl0ZW0oIHRoaXMubm9kZXMsIHgsIHRoaXMuY21wICk7XG4gIH07XG5cbiAgSGVhcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLm5vZGVzID0gW107XG4gIH07XG5cbiAgSGVhcC5wcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLm5vZGVzLmxlbmd0aCA9PT0gMDtcbiAgfTtcblxuICBIZWFwLnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5sZW5ndGg7XG4gIH07XG5cbiAgSGVhcC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpe1xuICAgIHZhciBoZWFwO1xuICAgIGhlYXAgPSBuZXcgSGVhcCgpO1xuICAgIGhlYXAubm9kZXMgPSB0aGlzLm5vZGVzLnNsaWNlKCAwICk7XG4gICAgcmV0dXJuIGhlYXA7XG4gIH07XG5cbiAgSGVhcC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMuc2xpY2UoIDAgKTtcbiAgfTtcblxuICBIZWFwLnByb3RvdHlwZS5pbnNlcnQgPSBIZWFwLnByb3RvdHlwZS5wdXNoO1xuXG4gIEhlYXAucHJvdG90eXBlLnRvcCA9IEhlYXAucHJvdG90eXBlLnBlZWs7XG5cbiAgSGVhcC5wcm90b3R5cGUuZnJvbnQgPSBIZWFwLnByb3RvdHlwZS5wZWVrO1xuXG4gIEhlYXAucHJvdG90eXBlLmhhcyA9IEhlYXAucHJvdG90eXBlLmNvbnRhaW5zO1xuXG4gIEhlYXAucHJvdG90eXBlLmNvcHkgPSBIZWFwLnByb3RvdHlwZS5jbG9uZTtcblxuICByZXR1cm4gSGVhcDtcblxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBIZWFwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuLy1wcmVhbWJsZScpO1xuXG52YXIgd2luZG93ID0gcmVxdWlyZSggJy4vd2luZG93JyApO1xudmFyIGlzID0gcmVxdWlyZSggJy4vaXMnICk7XG52YXIgQ29yZSA9IHJlcXVpcmUoICcuL2NvcmUnICk7XG52YXIgZXh0ZW5zaW9uID0gcmVxdWlyZSggJy4vZXh0ZW5zaW9uJyApO1xudmFyIHJlZ2lzdGVySnF1ZXJ5ID0gcmVxdWlyZSggJy4vanF1ZXJ5LXBsdWdpbicgKTtcbnZhciBTdHlsZXNoZWV0ID0gcmVxdWlyZSggJy4vc3R5bGVzaGVldCcgKTtcbnZhciBUaHJlYWQgPSByZXF1aXJlKCAnLi90aHJlYWQnICk7XG52YXIgRmFicmljID0gcmVxdWlyZSggJy4vZmFicmljJyApO1xuXG52YXIgYmFzZU5vZGVTaGFwZXMgPSByZXF1aXJlKCcuL2V4dGVuc2lvbnMvcmVuZGVyZXIvYmFzZS9ub2RlLXNoYXBlcycpLm5vZGVTaGFwZXM7XG52YXIgbWF0aCA9IHJlcXVpcmUoJy4vbWF0aCcpO1xudmFyIHN0eWxlUHJvcGVydGllcyA9IHJlcXVpcmUoJy4vc3R5bGUvcHJvcGVydGllcycpO1xudmFyIGJhc2VBcnJvd1NoYXBlcyA9IHJlcXVpcmUoJy4vZXh0ZW5zaW9ucy9yZW5kZXJlci9iYXNlL2Fycm93LXNoYXBlcycpLmFycm93U2hhcGVzO1xudmFyIHNiZ24gPSByZXF1aXJlKCAnLi9zYmduJyApO1xuXG52YXIgY3l0b3NjYXBlID0gZnVuY3Rpb24oIG9wdGlvbnMgKXsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gIC8vIGlmIG5vIG9wdGlvbnMgc3BlY2lmaWVkLCB1c2UgZGVmYXVsdFxuICBpZiggb3B0aW9ucyA9PT0gdW5kZWZpbmVkICl7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgLy8gY3JlYXRlIGluc3RhbmNlXG4gIGlmKCBpcy5wbGFpbk9iamVjdCggb3B0aW9ucyApICl7XG4gICAgcmV0dXJuIG5ldyBDb3JlKCBvcHRpb25zICk7XG4gIH1cblxuICAvLyBhbGxvdyBmb3IgcmVnaXN0cmF0aW9uIG9mIGV4dGVuc2lvbnNcbiAgZWxzZSBpZiggaXMuc3RyaW5nKCBvcHRpb25zICkgKXtcbiAgICByZXR1cm4gZXh0ZW5zaW9uLmFwcGx5KCBleHRlbnNpb24sIGFyZ3VtZW50cyApO1xuICB9XG59O1xuXG4vLyByZXBsYWNlZCBieSBidWlsZCBzeXN0ZW1cbmN5dG9zY2FwZS52ZXJzaW9uID0gcmVxdWlyZSgnLi92ZXJzaW9uLmpzb24nKTtcblxuLy8gdHJ5IHRvIHJlZ2lzdGVyIHcvIGpxdWVyeVxuaWYoIHdpbmRvdyAmJiB3aW5kb3cualF1ZXJ5ICl7XG4gIHJlZ2lzdGVySnF1ZXJ5KCB3aW5kb3cualF1ZXJ5LCBjeXRvc2NhcGUgKTtcbn1cblxuLy8gZXhwb3NlIHJlZ2lzdGVyIGFwaVxuY3l0b3NjYXBlLnJlZ2lzdGVySnF1ZXJ5ID0gZnVuY3Rpb24oIGpRdWVyeSApe1xuICByZWdpc3RlckpxdWVyeSggalF1ZXJ5LCBjeXRvc2NhcGUgKTtcbn07XG5cbi8vIGV4cG9zZSBwdWJsaWMgYXBpcyAobW9zdGx5IGZvciBleHRlbnNpb25zKVxuY3l0b3NjYXBlLnN0eWxlc2hlZXQgPSBjeXRvc2NhcGUuU3R5bGVzaGVldCA9IFN0eWxlc2hlZXQ7XG5jeXRvc2NhcGUudGhyZWFkID0gY3l0b3NjYXBlLlRocmVhZCA9IFRocmVhZDtcbmN5dG9zY2FwZS5mYWJyaWMgPSBjeXRvc2NhcGUuRmFicmljID0gRmFicmljO1xuXG4vLyBleHBvc2UgdGhlc2UgYXBpJ3MgZm9yIHNiZ252aXpcbmN5dG9zY2FwZS5iYXNlTm9kZVNoYXBlcyA9IGJhc2VOb2RlU2hhcGVzO1xuY3l0b3NjYXBlLm1hdGggPSBtYXRoO1xuY3l0b3NjYXBlLnN0eWxlUHJvcGVydGllcyA9IHN0eWxlUHJvcGVydGllcztcbmN5dG9zY2FwZS5iYXNlQXJyb3dTaGFwZXMgPSBiYXNlQXJyb3dTaGFwZXM7XG5jeXRvc2NhcGUuc2JnbiA9IHNiZ247XG5cbm1vZHVsZS5leHBvcnRzID0gY3l0b3NjYXBlOyIsIid1c2Ugc3RyaWN0JztcblxuLypnbG9iYWwgSFRNTEVsZW1lbnQgRG9jdW1lbnRUb3VjaCAqL1xuXG52YXIgd2luZG93ID0gcmVxdWlyZSggJy4vd2luZG93JyApO1xudmFyIG5hdmlnYXRvciA9IHdpbmRvdyA/IHdpbmRvdy5uYXZpZ2F0b3IgOiBudWxsO1xudmFyIGRvY3VtZW50ID0gd2luZG93ID8gd2luZG93LmRvY3VtZW50IDogbnVsbDtcblxudmFyIHR5cGVvZnN0ciA9IHR5cGVvZiAnJztcbnZhciB0eXBlb2ZvYmogPSB0eXBlb2Yge307XG52YXIgdHlwZW9mZm4gPSB0eXBlb2YgZnVuY3Rpb24oKXt9O1xudmFyIHR5cGVvZmh0bWxlbGUgPSB0eXBlb2YgSFRNTEVsZW1lbnQ7XG5cbnZhciBpbnN0YW5jZVN0ciA9IGZ1bmN0aW9uKCBvYmogKXtcbiAgcmV0dXJuIG9iaiAmJiBvYmouaW5zdGFuY2VTdHJpbmcgJiYgaXMuZm4oIG9iai5pbnN0YW5jZVN0cmluZyApID8gb2JqLmluc3RhbmNlU3RyaW5nKCkgOiBudWxsO1xufTtcblxudmFyIGlzID0ge1xuICBkZWZpbmVkOiBmdW5jdGlvbiggb2JqICl7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsOyAvLyBub3QgdW5kZWZpbmVkIG9yIG51bGxcbiAgfSxcblxuICBzdHJpbmc6IGZ1bmN0aW9uKCBvYmogKXtcbiAgICByZXR1cm4gb2JqICE9IG51bGwgJiYgdHlwZW9mIG9iaiA9PSB0eXBlb2ZzdHI7XG4gIH0sXG5cbiAgZm46IGZ1bmN0aW9uKCBvYmogKXtcbiAgICByZXR1cm4gb2JqICE9IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gdHlwZW9mZm47XG4gIH0sXG5cbiAgYXJyYXk6IGZ1bmN0aW9uKCBvYmogKXtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSA/IEFycmF5LmlzQXJyYXkoIG9iaiApIDogb2JqICE9IG51bGwgJiYgb2JqIGluc3RhbmNlb2YgQXJyYXk7XG4gIH0sXG5cbiAgcGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKXtcbiAgICByZXR1cm4gb2JqICE9IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gdHlwZW9mb2JqICYmICFpcy5hcnJheSggb2JqICkgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG4gIH0sXG5cbiAgb2JqZWN0OiBmdW5jdGlvbiggb2JqICl7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIHR5cGVvZiBvYmogPT09IHR5cGVvZm9iajtcbiAgfSxcblxuICBudW1iZXI6IGZ1bmN0aW9uKCBvYmogKXtcbiAgICByZXR1cm4gb2JqICE9IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gdHlwZW9mIDEgJiYgIWlzTmFOKCBvYmogKTtcbiAgfSxcblxuICBpbnRlZ2VyOiBmdW5jdGlvbiggb2JqICl7XG4gICAgcmV0dXJuIGlzLm51bWJlciggb2JqICkgJiYgTWF0aC5mbG9vciggb2JqICkgPT09IG9iajtcbiAgfSxcblxuICBib29sOiBmdW5jdGlvbiggb2JqICl7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIHR5cGVvZiBvYmogPT09IHR5cGVvZiB0cnVlO1xuICB9LFxuXG4gIGh0bWxFbGVtZW50OiBmdW5jdGlvbiggb2JqICl7XG4gICAgaWYoICd1bmRlZmluZWQnID09PSB0eXBlb2ZodG1sZWxlICl7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbCAhPSBvYmogJiYgb2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gICAgfVxuICB9LFxuXG4gIGVsZW1lbnRPckNvbGxlY3Rpb246IGZ1bmN0aW9uKCBvYmogKXtcbiAgICByZXR1cm4gaXMuZWxlbWVudCggb2JqICkgfHwgaXMuY29sbGVjdGlvbiggb2JqICk7XG4gIH0sXG5cbiAgZWxlbWVudDogZnVuY3Rpb24oIG9iaiApe1xuICAgIHJldHVybiBpbnN0YW5jZVN0ciggb2JqICkgPT09ICdjb2xsZWN0aW9uJyAmJiBvYmouX3ByaXZhdGUuc2luZ2xlO1xuICB9LFxuXG4gIGNvbGxlY3Rpb246IGZ1bmN0aW9uKCBvYmogKXtcbiAgICByZXR1cm4gaW5zdGFuY2VTdHIoIG9iaiApID09PSAnY29sbGVjdGlvbicgJiYgIW9iai5fcHJpdmF0ZS5zaW5nbGU7XG4gIH0sXG5cbiAgY29yZTogZnVuY3Rpb24oIG9iaiApe1xuICAgIHJldHVybiBpbnN0YW5jZVN0ciggb2JqICkgPT09ICdjb3JlJztcbiAgfSxcblxuICBzdHlsZTogZnVuY3Rpb24oIG9iaiApe1xuICAgIHJldHVybiBpbnN0YW5jZVN0ciggb2JqICkgPT09ICdzdHlsZSc7XG4gIH0sXG5cbiAgc3R5bGVzaGVldDogZnVuY3Rpb24oIG9iaiApe1xuICAgIHJldHVybiBpbnN0YW5jZVN0ciggb2JqICkgPT09ICdzdHlsZXNoZWV0JztcbiAgfSxcblxuICBldmVudDogZnVuY3Rpb24oIG9iaiApe1xuICAgIHJldHVybiBpbnN0YW5jZVN0ciggb2JqICkgPT09ICdldmVudCc7XG4gIH0sXG5cbiAgdGhyZWFkOiBmdW5jdGlvbiggb2JqICl7XG4gICAgcmV0dXJuIGluc3RhbmNlU3RyKCBvYmogKSA9PT0gJ3RocmVhZCc7XG4gIH0sXG5cbiAgZmFicmljOiBmdW5jdGlvbiggb2JqICl7XG4gICAgcmV0dXJuIGluc3RhbmNlU3RyKCBvYmogKSA9PT0gJ2ZhYnJpYyc7XG4gIH0sXG5cbiAgZW1wdHlTdHJpbmc6IGZ1bmN0aW9uKCBvYmogKXtcbiAgICBpZiggb2JqID09PSB1bmRlZmluZWQgfHwgb2JqID09PSBudWxsICl7IC8vIG51bGwgaXMgZW1wdHlcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiggb2JqID09PSAnJyB8fCBvYmoubWF0Y2goIC9eXFxzKyQvICkgKXtcbiAgICAgIHJldHVybiB0cnVlOyAvLyBlbXB0eSBzdHJpbmcgaXMgZW1wdHlcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7IC8vIG90aGVyd2lzZSwgd2UgZG9uJ3Qga25vdyB3aGF0IHdlJ3ZlIGdvdFxuICB9LFxuXG4gIG5vbmVtcHR5U3RyaW5nOiBmdW5jdGlvbiggb2JqICl7XG4gICAgaWYoIG9iaiAmJiBpcy5zdHJpbmcoIG9iaiApICYmIG9iaiAhPT0gJycgJiYgIW9iai5tYXRjaCggL15cXHMrJC8gKSApe1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGRvbUVsZW1lbnQ6IGZ1bmN0aW9uKCBvYmogKXtcbiAgICBpZiggdHlwZW9mIEhUTUxFbGVtZW50ID09PSAndW5kZWZpbmVkJyApe1xuICAgICAgcmV0dXJuIGZhbHNlOyAvLyB3ZSdyZSBub3QgaW4gYSBicm93c2VyIHNvIGl0IGRvZXNuJ3QgbWF0dGVyXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgICB9XG4gIH0sXG5cbiAgYm91bmRpbmdCb3g6IGZ1bmN0aW9uKCBvYmogKXtcbiAgICByZXR1cm4gaXMucGxhaW5PYmplY3QoIG9iaiApICYmXG4gICAgICBpcy5udW1iZXIoIG9iai54MSApICYmIGlzLm51bWJlciggb2JqLngyICkgJiZcbiAgICAgIGlzLm51bWJlciggb2JqLnkxICkgJiYgaXMubnVtYmVyKCBvYmoueTIgKVxuICAgIDtcbiAgfSxcblxuICBwcm9taXNlOiBmdW5jdGlvbiggb2JqICl7XG4gICAgcmV0dXJuIGlzLm9iamVjdCggb2JqICkgJiYgaXMuZm4oIG9iai50aGVuICk7XG4gIH0sXG5cbiAgdG91Y2g6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHdpbmRvdyAmJiAoICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpIHx8IHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2YgRG9jdW1lbnRUb3VjaCApO1xuICB9LFxuXG4gIGdlY2tvOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB3aW5kb3cgJiYgKCB0eXBlb2YgSW5zdGFsbFRyaWdnZXIgIT09ICd1bmRlZmluZWQnIHx8ICgnTW96QXBwZWFyYW5jZScgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSApO1xuICB9LFxuXG4gIHdlYmtpdDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gd2luZG93ICYmICggdHlwZW9mIHdlYmtpdFVSTCAhPT0gJ3VuZGVmaW5lZCcgfHwgKCdXZWJraXRBcHBlYXJhbmNlJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpICk7XG4gIH0sXG5cbiAgY2hyb21pdW06IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHdpbmRvdyAmJiAoIHR5cGVvZiBjaHJvbWUgIT09ICd1bmRlZmluZWQnICk7XG4gIH0sXG5cbiAga2h0bWw6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudmVuZG9yLm1hdGNoKCAva2RlL2kgKTsgLy8gcHJvYmFibHkgYSBiZXR0ZXIgd2F5IHRvIGRldGVjdCB0aGlzLi4uXG4gIH0sXG5cbiAga2h0bWxFdGM6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGlzLmtodG1sKCkgfHwgaXMud2Via2l0KCkgfHwgaXMuY2hyb21pdW0oKTtcbiAgfSxcblxuICBtczogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goIC9tc2llfHRyaWRlbnR8ZWRnZS9pICk7IC8vIHByb2JhYmx5IGEgYmV0dGVyIHdheSB0byBkZXRlY3QgdGhpcy4uLlxuICB9LFxuXG4gIHdpbmRvd3M6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaCggL1dpbi9pICk7XG4gIH0sXG5cbiAgbWFjOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLmFwcFZlcnNpb24ubWF0Y2goIC9NYWMvaSApO1xuICB9LFxuXG4gIGxpbnV4OiBmdW5jdGlvbigpe1xuICAgIHJldHVybiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLmFwcFZlcnNpb24ubWF0Y2goIC9MaW51eC9pICk7XG4gIH0sXG5cbiAgdW5peDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gbmF2aWdhdG9yICYmIG5hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKCAvWDExL2kgKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzID0gcmVxdWlyZSggJy4vaXMnICk7XG5cbnZhciBjeVJlZyA9IGZ1bmN0aW9uKCAkZWxlICl7XG4gIHZhciBkID0gJGVsZVswXS5fY3lyZWcgPSAkZWxlWzBdLl9jeXJlZyB8fCB7fTtcblxuICByZXR1cm4gZDtcbn07XG5cbnZhciByZWdpc3RlckpxdWVyeSA9IGZ1bmN0aW9uKCAkLCBjeXRvc2NhcGUgKXtcbiAgaWYoICEkICl7IHJldHVybjsgfSAvLyBubyBqcXVlcnkgPT4gZG9uJ3QgbmVlZCB0aGlzXG5cbiAgaWYoICQuZm4uY3l0b3NjYXBlICl7IHJldHVybjsgfSAvLyBhbHJlYWR5IHJlZ2lzdGVyZWRcblxuICAvLyBhbGxvdyBjYWxscyBvbiBhIGpRdWVyeSBzZWxlY3RvciBieSBwcm94eWluZyBjYWxscyB0byAkLmN5dG9zY2FwZVxuICAvLyBlLmcuICQoXCIjZm9vXCIpLmN5dG9zY2FwZShvcHRpb25zKSA9PiAkLmN5dG9zY2FwZShvcHRpb25zKSBvbiAjZm9vXG4gICQuZm4uY3l0b3NjYXBlID0gZnVuY3Rpb24oIG9wdHMgKXtcbiAgICB2YXIgJHRoaXMgPSAkKCB0aGlzICk7XG5cbiAgICAvLyBnZXQgb2JqZWN0XG4gICAgaWYoIG9wdHMgPT09ICdnZXQnICl7XG4gICAgICByZXR1cm4gY3lSZWcoICR0aGlzICkuY3k7XG4gICAgfVxuXG4gICAgLy8gYmluZCB0byByZWFkeVxuICAgIGVsc2UgaWYoIGlzLmZuKCBvcHRzICkgKXtcblxuICAgICAgdmFyIHJlYWR5ID0gb3B0cztcbiAgICAgIHZhciBjeSA9IGN5UmVnKCAkdGhpcyApLmN5O1xuXG4gICAgICBpZiggY3kgJiYgY3kuaXNSZWFkeSgpICl7IC8vIGFscmVhZHkgcmVhZHkgc28ganVzdCB0cmlnZ2VyIG5vd1xuICAgICAgICBjeS50cmlnZ2VyKCAncmVhZHknLCBbXSwgcmVhZHkgKTtcblxuICAgICAgfSBlbHNlIHsgLy8gbm90IHlldCByZWFkeSwgc28gYWRkIHRvIHJlYWRpZXMgbGlzdFxuICAgICAgICB2YXIgZGF0YSA9IGN5UmVnKCAkdGhpcyApO1xuICAgICAgICB2YXIgcmVhZGllcyA9IGRhdGEucmVhZGllcyA9IGRhdGEucmVhZGllcyB8fCBbXTtcblxuICAgICAgICByZWFkaWVzLnB1c2goIHJlYWR5ICk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICAvLyBwcm94eSB0byBjcmVhdGUgaW5zdGFuY2VcbiAgICBlbHNlIGlmKCBpcy5wbGFpbk9iamVjdCggb3B0cyApICl7XG4gICAgICByZXR1cm4gJHRoaXMuZWFjaCggZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCgge30sIG9wdHMsIHtcbiAgICAgICAgICBjb250YWluZXI6ICQoIHRoaXMgKVswXVxuICAgICAgICB9ICk7XG5cbiAgICAgICAgY3l0b3NjYXBlKCBvcHRpb25zICk7XG4gICAgICB9ICk7XG4gICAgfVxuICB9O1xuXG4gIC8vIGFsbG93IGFjY2VzcyB0byB0aGUgZ2xvYmFsIGN5dG9zY2FwZSBvYmplY3QgdW5kZXIganF1ZXJ5IGZvciBsZWdhY3kgcmVhc29uc1xuICAkLmN5dG9zY2FwZSA9IGN5dG9zY2FwZTtcblxuICAvLyB1c2Ugc2hvcnQgYWxpYXMgKGN5KSBpZiBub3QgYWxyZWFkeSBkZWZpbmVkXG4gIGlmKCAkLmZuLmN5ID09IG51bGwgJiYgJC5jeSA9PSBudWxsICl7XG4gICAgJC5mbi5jeSA9ICQuZm4uY3l0b3NjYXBlO1xuICAgICQuY3kgPSAkLmN5dG9zY2FwZTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSByZWdpc3RlckpxdWVyeTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG1hdGggPSB7fTtcblxubWF0aC5hcmVQb3NpdGlvbnNTYW1lID0gZnVuY3Rpb24oIHAxLCBwMiApe1xuICByZXR1cm4gcDEueCA9PT0gcDIueCAmJiBwMS55ID09PSBwMi55O1xufTtcblxubWF0aC5jb3B5UG9zaXRpb24gPSBmdW5jdGlvbiggcCApe1xuICByZXR1cm4geyB4OiBwLngsIHk6IHAueSB9O1xufTtcblxubWF0aC5hcnJheTJwb2ludCA9IGZ1bmN0aW9uKCBhcnIgKXtcbiAgcmV0dXJuIHtcbiAgICB4OiBhcnJbMF0sXG4gICAgeTogYXJyWzFdXG4gIH07XG59O1xuXG5tYXRoLmRlZzJyYWQgPSBmdW5jdGlvbiggZGVnICl7XG4gIHJldHVybiBNYXRoLlBJICogZGVnIC8gMTgwO1xufTtcblxubWF0aC5sb2cyID0gTWF0aC5sb2cyIHx8IGZ1bmN0aW9uKCBuICl7XG4gIHJldHVybiBNYXRoLmxvZyggbiApIC8gTWF0aC5sb2coIDIgKTtcbn07XG5cbm1hdGguc2lnbnVtID0gZnVuY3Rpb24oIHggKXtcbiAgaWYoIHggPiAwICl7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSBpZiggeCA8IDAgKXtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn07XG5cbm1hdGguZGlzdCA9IGZ1bmN0aW9uKCBwMSwgcDIgKXtcbiAgcmV0dXJuIE1hdGguc3FydCggbWF0aC5zcWRpc3QoIHAxLCBwMiApICk7XG59O1xuXG5tYXRoLnNxZGlzdCA9IGZ1bmN0aW9uKCBwMSwgcDIgKXtcbiAgdmFyIGR4ID0gcDIueCAtIHAxLng7XG4gIHZhciBkeSA9IHAyLnkgLSBwMS55O1xuXG4gIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcbn07XG5cbi8vIGZyb20gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Cw6l6aWVyX2N1cnZlI1F1YWRyYXRpY19jdXJ2ZXNcbm1hdGgucWJlemllckF0ID0gZnVuY3Rpb24oIHAwLCBwMSwgcDIsIHQgKXtcbiAgcmV0dXJuICgxIC0gdCkgKiAoMSAtIHQpICogcDAgKyAyICogKDEgLSB0KSAqIHQgKiBwMSArIHQgKiB0ICogcDI7XG59O1xuXG5tYXRoLnFiZXppZXJQdEF0ID0gZnVuY3Rpb24oIHAwLCBwMSwgcDIsIHQgKXtcbiAgcmV0dXJuIHtcbiAgICB4OiBtYXRoLnFiZXppZXJBdCggcDAueCwgcDEueCwgcDIueCwgdCApLFxuICAgIHk6IG1hdGgucWJlemllckF0KCBwMC55LCBwMS55LCBwMi55LCB0IClcbiAgfTtcbn07XG5cbm1hdGgubGluZUF0ID0gZnVuY3Rpb24oIHAwLCBwMSwgdCwgZCApe1xuICB2YXIgdmVjID0ge1xuICAgIHg6IHAxLnggLSBwMC54LFxuICAgIHk6IHAxLnkgLSBwMC55XG4gIH07XG5cbiAgdmFyIHZlY0Rpc3QgPSBtYXRoLmRpc3QoIHAwLCBwMSApO1xuXG4gIHZhciBub3JtVmVjID0ge1xuICAgIHg6IHZlYy54IC8gdmVjRGlzdCxcbiAgICB5OiB2ZWMueSAvIHZlY0Rpc3RcbiAgfTtcblxuICB0ID0gdCA9PSBudWxsID8gMCA6IHQ7XG5cbiAgdmFyIGQgPSBkICE9IG51bGwgPyBkIDogdCAqIHZlY0Rpc3Q7XG5cbiAgcmV0dXJuIHtcbiAgICB4OiBwMC54ICsgbm9ybVZlYy54ICogZCxcbiAgICB5OiBwMC55ICsgbm9ybVZlYy55ICogZFxuICB9O1xufTtcblxubWF0aC5saW5lQXREaXN0ID0gZnVuY3Rpb24oIHAwLCBwMSwgZCApe1xuICByZXR1cm4gbWF0aC5saW5lQXQoIHAwLCBwMSwgdW5kZWZpbmVkLCBkICk7XG59O1xuXG4vLyBnZXQgYW5nbGUgYXQgQSB2aWEgY29zaW5lIGxhd1xubWF0aC50cmlhbmdsZUFuZ2xlID0gZnVuY3Rpb24oIEEsIEIsIEMgKXtcbiAgdmFyIGEgPSBtYXRoLmRpc3QoIEIsIEMgKTtcbiAgdmFyIGIgPSBtYXRoLmRpc3QoIEEsIEMgKTtcbiAgdmFyIGMgPSBtYXRoLmRpc3QoIEEsIEIgKTtcblxuICByZXR1cm4gTWF0aC5hY29zKCAoYSphICsgYipiIC0gYypjKS8oMiphKmIpICk7XG59O1xuXG5tYXRoLmJvdW5kID0gZnVuY3Rpb24oIG1pbiwgdmFsLCBtYXggKXtcbiAgcmV0dXJuIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIHZhbCApICk7XG59O1xuXG4vLyBtYWtlcyBhIGZ1bGwgYmIgKHgxLCB5MSwgeDIsIHkyLCB3LCBoKSBmcm9tIGltcGxpY2l0IHBhcmFtc1xubWF0aC5tYWtlQm91bmRpbmdCb3ggPSBmdW5jdGlvbiggYmIgKXtcbiAgaWYoIGJiID09IG51bGwgKXtcbiAgICByZXR1cm4ge1xuICAgICAgeDE6IEluZmluaXR5LFxuICAgICAgeTE6IEluZmluaXR5LFxuICAgICAgeDI6IC1JbmZpbml0eSxcbiAgICAgIHkyOiAtSW5maW5pdHksXG4gICAgICB3OiAwLFxuICAgICAgaDogMFxuICAgIH07XG4gIH0gZWxzZSBpZiggYmIueDEgIT0gbnVsbCAmJiBiYi55MSAhPSBudWxsICl7XG4gICAgaWYoIGJiLngyICE9IG51bGwgJiYgYmIueTIgIT0gbnVsbCAmJiBiYi54MiA+PSBiYi54MSAmJiBiYi55MiA+PSBiYi55MSApe1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDE6IGJiLngxLFxuICAgICAgICB5MTogYmIueTEsXG4gICAgICAgIHgyOiBiYi54MixcbiAgICAgICAgeTI6IGJiLnkyLFxuICAgICAgICB3OiBiYi54MiAtIGJiLngxLFxuICAgICAgICBoOiBiYi55MiAtIGJiLnkxXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiggYmIudyAhPSBudWxsICYmIGJiLmggIT0gbnVsbCAmJiBiYi53ID49IDAgJiYgYmIuaCA+PSAwICl7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB4MTogYmIueDEsXG4gICAgICAgIHkxOiBiYi55MSxcbiAgICAgICAgeDI6IGJiLngxICsgYmIudyxcbiAgICAgICAgeTI6IGJiLnkxICsgYmIuaCxcbiAgICAgICAgdzogYmIudyxcbiAgICAgICAgaDogYmIuaFxuICAgICAgfTtcbiAgICB9XG4gIH1cbn07XG5cbm1hdGgudXBkYXRlQm91bmRpbmdCb3ggPSBmdW5jdGlvbiggYmIxLCBiYjIgKXtcbiAgLy8gdXBkYXRlIGJiMSB3aXRoIGJiMiBib3VuZHNcblxuICBiYjEueDEgPSBNYXRoLm1pbiggYmIxLngxLCBiYjIueDEgKTtcbiAgYmIxLngyID0gTWF0aC5tYXgoIGJiMS54MiwgYmIyLngyICk7XG4gIGJiMS53ID0gYmIxLngyIC0gYmIxLngxO1xuXG4gIGJiMS55MSA9IE1hdGgubWluKCBiYjEueTEsIGJiMi55MSApO1xuICBiYjEueTIgPSBNYXRoLm1heCggYmIxLnkyLCBiYjIueTIgKTtcbiAgYmIxLmggPSBiYjEueTIgLSBiYjEueTE7XG59O1xuXG5tYXRoLmV4cGFuZEJvdW5kaW5nQm94ID0gZnVuY3Rpb24oIGJiLCBwYWRkaW5nICl7XG4gIGJiLngxIC09IHBhZGRpbmc7XG4gIGJiLngyICs9IHBhZGRpbmc7XG4gIGJiLnkxIC09IHBhZGRpbmc7XG4gIGJiLnkyICs9IHBhZGRpbmc7XG4gIGJiLncgPSBiYi54MiAtIGJiLngxO1xuICBiYi5oID0gYmIueTIgLSBiYi55MTtcblxuICByZXR1cm4gYmI7XG59O1xuXG5tYXRoLmJvdW5kaW5nQm94ZXNJbnRlcnNlY3QgPSBmdW5jdGlvbiggYmIxLCBiYjIgKXtcbiAgLy8gY2FzZTogb25lIGJiIHRvIHJpZ2h0IG9mIG90aGVyXG4gIGlmKCBiYjEueDEgPiBiYjIueDIgKXsgcmV0dXJuIGZhbHNlOyB9XG4gIGlmKCBiYjIueDEgPiBiYjEueDIgKXsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgLy8gY2FzZTogb25lIGJiIHRvIGxlZnQgb2Ygb3RoZXJcbiAgaWYoIGJiMS54MiA8IGJiMi54MSApeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYoIGJiMi54MiA8IGJiMS54MSApeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyBjYXNlOiBvbmUgYmIgYWJvdmUgb3RoZXJcbiAgaWYoIGJiMS55MiA8IGJiMi55MSApeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYoIGJiMi55MiA8IGJiMS55MSApeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyBjYXNlOiBvbmUgYmIgYmVsb3cgb3RoZXJcbiAgaWYoIGJiMS55MSA+IGJiMi55MiApeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYoIGJiMi55MSA+IGJiMS55MiApeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyBvdGhlcndpc2UsIG11c3QgaGF2ZSBzb21lIG92ZXJsYXBcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5tYXRoLmluQm91bmRpbmdCb3ggPSBmdW5jdGlvbiggYmIsIHgsIHkgKXtcbiAgcmV0dXJuIGJiLngxIDw9IHggJiYgeCA8PSBiYi54MiAmJiBiYi55MSA8PSB5ICYmIHkgPD0gYmIueTI7XG59O1xuXG5tYXRoLnBvaW50SW5Cb3VuZGluZ0JveCA9IGZ1bmN0aW9uKCBiYiwgcHQgKXtcbiAgcmV0dXJuIHRoaXMuaW5Cb3VuZGluZ0JveCggYmIsIHB0LngsIHB0LnkgKTtcbn07XG5cbm1hdGguYm91bmRpbmdCb3hJbkJvdW5kaW5nQm94ID0gZnVuY3Rpb24oIGJiMSwgYmIyICl7XG4gIHJldHVybiAoXG4gICAgICAgbWF0aC5pbkJvdW5kaW5nQm94KCBiYjEsIGJiMi54MSwgYmIyLnkxIClcbiAgICAmJiBtYXRoLmluQm91bmRpbmdCb3goIGJiMSwgYmIyLngyLCBiYjIueTIgKVxuICApO1xufTtcblxubWF0aC5yb3VuZFJlY3RhbmdsZUludGVyc2VjdExpbmUgPSBmdW5jdGlvbihcbiAgeCwgeSwgbm9kZVgsIG5vZGVZLCB3aWR0aCwgaGVpZ2h0LCBwYWRkaW5nICl7XG5cbiAgdmFyIGNvcm5lclJhZGl1cyA9IHRoaXMuZ2V0Um91bmRSZWN0YW5nbGVSYWRpdXMoIHdpZHRoLCBoZWlnaHQgKTtcblxuICB2YXIgaGFsZldpZHRoID0gd2lkdGggLyAyO1xuICB2YXIgaGFsZkhlaWdodCA9IGhlaWdodCAvIDI7XG5cbiAgLy8gQ2hlY2sgaW50ZXJzZWN0aW9ucyB3aXRoIHN0cmFpZ2h0IGxpbmUgc2VnbWVudHNcbiAgdmFyIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnM7XG5cbiAgLy8gVG9wIHNlZ21lbnQsIGxlZnQgdG8gcmlnaHRcbiAge1xuICAgIHZhciB0b3BTdGFydFggPSBub2RlWCAtIGhhbGZXaWR0aCArIGNvcm5lclJhZGl1cyAtIHBhZGRpbmc7XG4gICAgdmFyIHRvcFN0YXJ0WSA9IG5vZGVZIC0gaGFsZkhlaWdodCAtIHBhZGRpbmc7XG4gICAgdmFyIHRvcEVuZFggPSBub2RlWCArIGhhbGZXaWR0aCAtIGNvcm5lclJhZGl1cyArIHBhZGRpbmc7XG4gICAgdmFyIHRvcEVuZFkgPSB0b3BTdGFydFk7XG5cbiAgICBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zID0gdGhpcy5maW5pdGVMaW5lc0ludGVyc2VjdChcbiAgICAgIHgsIHksIG5vZGVYLCBub2RlWSwgdG9wU3RhcnRYLCB0b3BTdGFydFksIHRvcEVuZFgsIHRvcEVuZFksIGZhbHNlICk7XG5cbiAgICBpZiggc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwICl7XG4gICAgICByZXR1cm4gc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucztcbiAgICB9XG4gIH1cblxuICAvLyBSaWdodCBzZWdtZW50LCB0b3AgdG8gYm90dG9tXG4gIHtcbiAgICB2YXIgcmlnaHRTdGFydFggPSBub2RlWCArIGhhbGZXaWR0aCArIHBhZGRpbmc7XG4gICAgdmFyIHJpZ2h0U3RhcnRZID0gbm9kZVkgLSBoYWxmSGVpZ2h0ICsgY29ybmVyUmFkaXVzIC0gcGFkZGluZztcbiAgICB2YXIgcmlnaHRFbmRYID0gcmlnaHRTdGFydFg7XG4gICAgdmFyIHJpZ2h0RW5kWSA9IG5vZGVZICsgaGFsZkhlaWdodCAtIGNvcm5lclJhZGl1cyArIHBhZGRpbmc7XG5cbiAgICBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zID0gdGhpcy5maW5pdGVMaW5lc0ludGVyc2VjdChcbiAgICAgIHgsIHksIG5vZGVYLCBub2RlWSwgcmlnaHRTdGFydFgsIHJpZ2h0U3RhcnRZLCByaWdodEVuZFgsIHJpZ2h0RW5kWSwgZmFsc2UgKTtcblxuICAgIGlmKCBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDAgKXtcbiAgICAgIHJldHVybiBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zO1xuICAgIH1cbiAgfVxuXG4gIC8vIEJvdHRvbSBzZWdtZW50LCBsZWZ0IHRvIHJpZ2h0XG4gIHtcbiAgICB2YXIgYm90dG9tU3RhcnRYID0gbm9kZVggLSBoYWxmV2lkdGggKyBjb3JuZXJSYWRpdXMgLSBwYWRkaW5nO1xuICAgIHZhciBib3R0b21TdGFydFkgPSBub2RlWSArIGhhbGZIZWlnaHQgKyBwYWRkaW5nO1xuICAgIHZhciBib3R0b21FbmRYID0gbm9kZVggKyBoYWxmV2lkdGggLSBjb3JuZXJSYWRpdXMgKyBwYWRkaW5nO1xuICAgIHZhciBib3R0b21FbmRZID0gYm90dG9tU3RhcnRZO1xuXG4gICAgc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucyA9IHRoaXMuZmluaXRlTGluZXNJbnRlcnNlY3QoXG4gICAgICB4LCB5LCBub2RlWCwgbm9kZVksIGJvdHRvbVN0YXJ0WCwgYm90dG9tU3RhcnRZLCBib3R0b21FbmRYLCBib3R0b21FbmRZLCBmYWxzZSApO1xuXG4gICAgaWYoIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMubGVuZ3RoID4gMCApe1xuICAgICAgcmV0dXJuIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnM7XG4gICAgfVxuICB9XG5cbiAgLy8gTGVmdCBzZWdtZW50LCB0b3AgdG8gYm90dG9tXG4gIHtcbiAgICB2YXIgbGVmdFN0YXJ0WCA9IG5vZGVYIC0gaGFsZldpZHRoIC0gcGFkZGluZztcbiAgICB2YXIgbGVmdFN0YXJ0WSA9IG5vZGVZIC0gaGFsZkhlaWdodCArIGNvcm5lclJhZGl1cyAtIHBhZGRpbmc7XG4gICAgdmFyIGxlZnRFbmRYID0gbGVmdFN0YXJ0WDtcbiAgICB2YXIgbGVmdEVuZFkgPSBub2RlWSArIGhhbGZIZWlnaHQgLSBjb3JuZXJSYWRpdXMgKyBwYWRkaW5nO1xuXG4gICAgc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucyA9IHRoaXMuZmluaXRlTGluZXNJbnRlcnNlY3QoXG4gICAgICB4LCB5LCBub2RlWCwgbm9kZVksIGxlZnRTdGFydFgsIGxlZnRTdGFydFksIGxlZnRFbmRYLCBsZWZ0RW5kWSwgZmFsc2UgKTtcblxuICAgIGlmKCBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDAgKXtcbiAgICAgIHJldHVybiBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zO1xuICAgIH1cbiAgfVxuXG4gIC8vIENoZWNrIGludGVyc2VjdGlvbnMgd2l0aCBhcmMgc2VnbWVudHNcbiAgdmFyIGFyY0ludGVyc2VjdGlvbnM7XG5cbiAgLy8gVG9wIExlZnRcbiAge1xuICAgIHZhciB0b3BMZWZ0Q2VudGVyWCA9IG5vZGVYIC0gaGFsZldpZHRoICsgY29ybmVyUmFkaXVzO1xuICAgIHZhciB0b3BMZWZ0Q2VudGVyWSA9IG5vZGVZIC0gaGFsZkhlaWdodCArIGNvcm5lclJhZGl1cztcbiAgICBhcmNJbnRlcnNlY3Rpb25zID0gdGhpcy5pbnRlcnNlY3RMaW5lQ2lyY2xlKFxuICAgICAgeCwgeSwgbm9kZVgsIG5vZGVZLFxuICAgICAgdG9wTGVmdENlbnRlclgsIHRvcExlZnRDZW50ZXJZLCBjb3JuZXJSYWRpdXMgKyBwYWRkaW5nICk7XG5cbiAgICAvLyBFbnN1cmUgdGhlIGludGVyc2VjdGlvbiBpcyBvbiB0aGUgZGVzaXJlZCBxdWFydGVyIG9mIHRoZSBjaXJjbGVcbiAgICBpZiggYXJjSW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwXG4gICAgICAmJiBhcmNJbnRlcnNlY3Rpb25zWzBdIDw9IHRvcExlZnRDZW50ZXJYXG4gICAgICAmJiBhcmNJbnRlcnNlY3Rpb25zWzFdIDw9IHRvcExlZnRDZW50ZXJZICl7XG4gICAgICByZXR1cm4gWyBhcmNJbnRlcnNlY3Rpb25zWzBdLCBhcmNJbnRlcnNlY3Rpb25zWzFdIF07XG4gICAgfVxuICB9XG5cbiAgLy8gVG9wIFJpZ2h0XG4gIHtcbiAgICB2YXIgdG9wUmlnaHRDZW50ZXJYID0gbm9kZVggKyBoYWxmV2lkdGggLSBjb3JuZXJSYWRpdXM7XG4gICAgdmFyIHRvcFJpZ2h0Q2VudGVyWSA9IG5vZGVZIC0gaGFsZkhlaWdodCArIGNvcm5lclJhZGl1cztcbiAgICBhcmNJbnRlcnNlY3Rpb25zID0gdGhpcy5pbnRlcnNlY3RMaW5lQ2lyY2xlKFxuICAgICAgeCwgeSwgbm9kZVgsIG5vZGVZLFxuICAgICAgdG9wUmlnaHRDZW50ZXJYLCB0b3BSaWdodENlbnRlclksIGNvcm5lclJhZGl1cyArIHBhZGRpbmcgKTtcblxuICAgIC8vIEVuc3VyZSB0aGUgaW50ZXJzZWN0aW9uIGlzIG9uIHRoZSBkZXNpcmVkIHF1YXJ0ZXIgb2YgdGhlIGNpcmNsZVxuICAgIGlmKCBhcmNJbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDBcbiAgICAgICYmIGFyY0ludGVyc2VjdGlvbnNbMF0gPj0gdG9wUmlnaHRDZW50ZXJYXG4gICAgICAmJiBhcmNJbnRlcnNlY3Rpb25zWzFdIDw9IHRvcFJpZ2h0Q2VudGVyWSApe1xuICAgICAgcmV0dXJuIFsgYXJjSW50ZXJzZWN0aW9uc1swXSwgYXJjSW50ZXJzZWN0aW9uc1sxXSBdO1xuICAgIH1cbiAgfVxuXG4gIC8vIEJvdHRvbSBSaWdodFxuICB7XG4gICAgdmFyIGJvdHRvbVJpZ2h0Q2VudGVyWCA9IG5vZGVYICsgaGFsZldpZHRoIC0gY29ybmVyUmFkaXVzO1xuICAgIHZhciBib3R0b21SaWdodENlbnRlclkgPSBub2RlWSArIGhhbGZIZWlnaHQgLSBjb3JuZXJSYWRpdXM7XG4gICAgYXJjSW50ZXJzZWN0aW9ucyA9IHRoaXMuaW50ZXJzZWN0TGluZUNpcmNsZShcbiAgICAgIHgsIHksIG5vZGVYLCBub2RlWSxcbiAgICAgIGJvdHRvbVJpZ2h0Q2VudGVyWCwgYm90dG9tUmlnaHRDZW50ZXJZLCBjb3JuZXJSYWRpdXMgKyBwYWRkaW5nICk7XG5cbiAgICAvLyBFbnN1cmUgdGhlIGludGVyc2VjdGlvbiBpcyBvbiB0aGUgZGVzaXJlZCBxdWFydGVyIG9mIHRoZSBjaXJjbGVcbiAgICBpZiggYXJjSW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwXG4gICAgICAmJiBhcmNJbnRlcnNlY3Rpb25zWzBdID49IGJvdHRvbVJpZ2h0Q2VudGVyWFxuICAgICAgJiYgYXJjSW50ZXJzZWN0aW9uc1sxXSA+PSBib3R0b21SaWdodENlbnRlclkgKXtcbiAgICAgIHJldHVybiBbIGFyY0ludGVyc2VjdGlvbnNbMF0sIGFyY0ludGVyc2VjdGlvbnNbMV0gXTtcbiAgICB9XG4gIH1cblxuICAvLyBCb3R0b20gTGVmdFxuICB7XG4gICAgdmFyIGJvdHRvbUxlZnRDZW50ZXJYID0gbm9kZVggLSBoYWxmV2lkdGggKyBjb3JuZXJSYWRpdXM7XG4gICAgdmFyIGJvdHRvbUxlZnRDZW50ZXJZID0gbm9kZVkgKyBoYWxmSGVpZ2h0IC0gY29ybmVyUmFkaXVzO1xuICAgIGFyY0ludGVyc2VjdGlvbnMgPSB0aGlzLmludGVyc2VjdExpbmVDaXJjbGUoXG4gICAgICB4LCB5LCBub2RlWCwgbm9kZVksXG4gICAgICBib3R0b21MZWZ0Q2VudGVyWCwgYm90dG9tTGVmdENlbnRlclksIGNvcm5lclJhZGl1cyArIHBhZGRpbmcgKTtcblxuICAgIC8vIEVuc3VyZSB0aGUgaW50ZXJzZWN0aW9uIGlzIG9uIHRoZSBkZXNpcmVkIHF1YXJ0ZXIgb2YgdGhlIGNpcmNsZVxuICAgIGlmKCBhcmNJbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDBcbiAgICAgICYmIGFyY0ludGVyc2VjdGlvbnNbMF0gPD0gYm90dG9tTGVmdENlbnRlclhcbiAgICAgICYmIGFyY0ludGVyc2VjdGlvbnNbMV0gPj0gYm90dG9tTGVmdENlbnRlclkgKXtcbiAgICAgIHJldHVybiBbIGFyY0ludGVyc2VjdGlvbnNbMF0sIGFyY0ludGVyc2VjdGlvbnNbMV0gXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW107IC8vIGlmIG5vdGhpbmdcbn07XG5cbm1hdGguaW5MaW5lVmljaW5pdHkgPSBmdW5jdGlvbiggeCwgeSwgbHgxLCBseTEsIGx4MiwgbHkyLCB0b2xlcmFuY2UgKXtcbiAgdmFyIHQgPSB0b2xlcmFuY2U7XG5cbiAgdmFyIHgxID0gTWF0aC5taW4oIGx4MSwgbHgyICk7XG4gIHZhciB4MiA9IE1hdGgubWF4KCBseDEsIGx4MiApO1xuICB2YXIgeTEgPSBNYXRoLm1pbiggbHkxLCBseTIgKTtcbiAgdmFyIHkyID0gTWF0aC5tYXgoIGx5MSwgbHkyICk7XG5cbiAgcmV0dXJuIHgxIC0gdCA8PSB4ICYmIHggPD0geDIgKyB0XG4gICAgJiYgeTEgLSB0IDw9IHkgJiYgeSA8PSB5MiArIHQ7XG59O1xuXG5tYXRoLmluQmV6aWVyVmljaW5pdHkgPSBmdW5jdGlvbihcbiAgeCwgeSwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgdG9sZXJhbmNlICl7XG5cbiAgdmFyIGJiID0ge1xuICAgIHgxOiBNYXRoLm1pbiggeDEsIHgzLCB4MiApIC0gdG9sZXJhbmNlLFxuICAgIHgyOiBNYXRoLm1heCggeDEsIHgzLCB4MiApICsgdG9sZXJhbmNlLFxuICAgIHkxOiBNYXRoLm1pbiggeTEsIHkzLCB5MiApIC0gdG9sZXJhbmNlLFxuICAgIHkyOiBNYXRoLm1heCggeTEsIHkzLCB5MiApICsgdG9sZXJhbmNlXG4gIH07XG5cbiAgLy8gaWYgb3V0c2lkZSB0aGUgcm91Z2ggYm91bmRpbmcgYm94IGZvciB0aGUgYmV6aWVyLCB0aGVuIGl0IGNhbid0IGJlIGEgaGl0XG4gIGlmKCB4IDwgYmIueDEgfHwgeCA+IGJiLngyIHx8IHkgPCBiYi55MSB8fCB5ID4gYmIueTIgKXtcbiAgICAvLyBjb25zb2xlLmxvZygnYmV6aWVyIG91dCBvZiByb3VnaCBiYicpXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIC8vIGNvbnNvbGUubG9nKCdkbyBtb3JlIGV4cGVuc2l2ZSBjaGVjaycpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbn07XG5cbm1hdGguc29sdmVDdWJpYyA9IGZ1bmN0aW9uKCBhLCBiLCBjLCBkLCByZXN1bHQgKXtcblxuICAvLyBTb2x2ZXMgYSBjdWJpYyBmdW5jdGlvbiwgcmV0dXJucyByb290IGluIGZvcm0gW3IxLCBpMSwgcjIsIGkyLCByMywgaTNdLCB3aGVyZVxuICAvLyByIGlzIHRoZSByZWFsIGNvbXBvbmVudCwgaSBpcyB0aGUgaW1hZ2luYXJ5IGNvbXBvbmVudFxuXG4gIC8vIEFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBDYXJkYW5vIG1ldGhvZCBmcm9tIHRoZSB5ZWFyIDE1NDVcbiAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DdWJpY19mdW5jdGlvbiNUaGVfbmF0dXJlX29mX3RoZV9yb290c1xuXG4gIGIgLz0gYTtcbiAgYyAvPSBhO1xuICBkIC89IGE7XG5cbiAgdmFyIGRpc2NyaW1pbmFudCwgcSwgciwgZHVtMSwgcywgdCwgdGVybTEsIHIxMztcblxuICBxID0gKDMuMCAqIGMgLSAoYiAqIGIpKSAvIDkuMDtcbiAgciA9IC0oMjcuMCAqIGQpICsgYiAqICg5LjAgKiBjIC0gMi4wICogKGIgKiBiKSk7XG4gIHIgLz0gNTQuMDtcblxuICBkaXNjcmltaW5hbnQgPSBxICogcSAqIHEgKyByICogcjtcbiAgcmVzdWx0WzFdID0gMDtcbiAgdGVybTEgPSAoYiAvIDMuMCk7XG5cbiAgaWYoIGRpc2NyaW1pbmFudCA+IDAgKXtcbiAgICBzID0gciArIE1hdGguc3FydCggZGlzY3JpbWluYW50ICk7XG4gICAgcyA9ICgocyA8IDApID8gLU1hdGgucG93KCAtcywgKDEuMCAvIDMuMCkgKSA6IE1hdGgucG93KCBzLCAoMS4wIC8gMy4wKSApKTtcbiAgICB0ID0gciAtIE1hdGguc3FydCggZGlzY3JpbWluYW50ICk7XG4gICAgdCA9ICgodCA8IDApID8gLU1hdGgucG93KCAtdCwgKDEuMCAvIDMuMCkgKSA6IE1hdGgucG93KCB0LCAoMS4wIC8gMy4wKSApKTtcbiAgICByZXN1bHRbMF0gPSAtdGVybTEgKyBzICsgdDtcbiAgICB0ZXJtMSArPSAocyArIHQpIC8gMi4wO1xuICAgIHJlc3VsdFs0XSA9IHJlc3VsdFsyXSA9IC10ZXJtMTtcbiAgICB0ZXJtMSA9IE1hdGguc3FydCggMy4wICkgKiAoLXQgKyBzKSAvIDI7XG4gICAgcmVzdWx0WzNdID0gdGVybTE7XG4gICAgcmVzdWx0WzVdID0gLXRlcm0xO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJlc3VsdFs1XSA9IHJlc3VsdFszXSA9IDA7XG5cbiAgaWYoIGRpc2NyaW1pbmFudCA9PT0gMCApe1xuICAgIHIxMyA9ICgociA8IDApID8gLU1hdGgucG93KCAtciwgKDEuMCAvIDMuMCkgKSA6IE1hdGgucG93KCByLCAoMS4wIC8gMy4wKSApKTtcbiAgICByZXN1bHRbMF0gPSAtdGVybTEgKyAyLjAgKiByMTM7XG4gICAgcmVzdWx0WzRdID0gcmVzdWx0WzJdID0gLShyMTMgKyB0ZXJtMSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcSA9IC1xO1xuICBkdW0xID0gcSAqIHEgKiBxO1xuICBkdW0xID0gTWF0aC5hY29zKCByIC8gTWF0aC5zcXJ0KCBkdW0xICkgKTtcbiAgcjEzID0gMi4wICogTWF0aC5zcXJ0KCBxICk7XG4gIHJlc3VsdFswXSA9IC10ZXJtMSArIHIxMyAqIE1hdGguY29zKCBkdW0xIC8gMy4wICk7XG4gIHJlc3VsdFsyXSA9IC10ZXJtMSArIHIxMyAqIE1hdGguY29zKCAoZHVtMSArIDIuMCAqIE1hdGguUEkpIC8gMy4wICk7XG4gIHJlc3VsdFs0XSA9IC10ZXJtMSArIHIxMyAqIE1hdGguY29zKCAoZHVtMSArIDQuMCAqIE1hdGguUEkpIC8gMy4wICk7XG5cbiAgcmV0dXJuO1xufTtcblxubWF0aC5zcWRpc3RUb1F1YWRyYXRpY0JlemllciA9IGZ1bmN0aW9uKFxuICB4LCB5LCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzICl7XG5cbiAgLy8gRmluZCBtaW5pbXVtIGRpc3RhbmNlIGJ5IHVzaW5nIHRoZSBtaW5pbXVtIG9mIHRoZSBkaXN0YW5jZVxuICAvLyBmdW5jdGlvbiBiZXR3ZWVuIHRoZSBnaXZlbiBwb2ludCBhbmQgdGhlIGN1cnZlXG5cbiAgLy8gVGhpcyBnaXZlcyB0aGUgY29lZmZpY2llbnRzIG9mIHRoZSByZXN1bHRpbmcgY3ViaWMgZXF1YXRpb25cbiAgLy8gd2hvc2Ugcm9vdHMgdGVsbCB1cyB3aGVyZSBhIHBvc3NpYmxlIG1pbmltdW0gaXNcbiAgLy8gKENvZWZmaWNpZW50cyBhcmUgZGl2aWRlZCBieSA0KVxuXG4gIHZhciBhID0gMS4wICogeDEgKiB4MSAtIDQgKiB4MSAqIHgyICsgMiAqIHgxICogeDMgKyA0ICogeDIgKiB4MiAtIDQgKiB4MiAqIHgzICsgeDMgKiB4M1xuICAgICsgeTEgKiB5MSAtIDQgKiB5MSAqIHkyICsgMiAqIHkxICogeTMgKyA0ICogeTIgKiB5MiAtIDQgKiB5MiAqIHkzICsgeTMgKiB5MztcblxuICB2YXIgYiA9IDEuMCAqIDkgKiB4MSAqIHgyIC0gMyAqIHgxICogeDEgLSAzICogeDEgKiB4MyAtIDYgKiB4MiAqIHgyICsgMyAqIHgyICogeDNcbiAgICArIDkgKiB5MSAqIHkyIC0gMyAqIHkxICogeTEgLSAzICogeTEgKiB5MyAtIDYgKiB5MiAqIHkyICsgMyAqIHkyICogeTM7XG5cbiAgdmFyIGMgPSAxLjAgKiAzICogeDEgKiB4MSAtIDYgKiB4MSAqIHgyICsgeDEgKiB4MyAtIHgxICogeCArIDIgKiB4MiAqIHgyICsgMiAqIHgyICogeCAtIHgzICogeFxuICAgICsgMyAqIHkxICogeTEgLSA2ICogeTEgKiB5MiArIHkxICogeTMgLSB5MSAqIHkgKyAyICogeTIgKiB5MiArIDIgKiB5MiAqIHkgLSB5MyAqIHk7XG5cbiAgdmFyIGQgPSAxLjAgKiB4MSAqIHgyIC0geDEgKiB4MSArIHgxICogeCAtIHgyICogeFxuICAgICsgeTEgKiB5MiAtIHkxICogeTEgKyB5MSAqIHkgLSB5MiAqIHk7XG5cbiAgLy8gZGVidWcoXCJjb2VmZmljaWVudHM6IFwiICsgYSAvIGEgKyBcIiwgXCIgKyBiIC8gYSArIFwiLCBcIiArIGMgLyBhICsgXCIsIFwiICsgZCAvIGEpO1xuXG4gIHZhciByb290cyA9IFtdO1xuXG4gIC8vIFVzZSB0aGUgY3ViaWMgc29sdmluZyBhbGdvcml0aG1cbiAgdGhpcy5zb2x2ZUN1YmljKCBhLCBiLCBjLCBkLCByb290cyApO1xuXG4gIHZhciB6ZXJvVGhyZXNob2xkID0gMC4wMDAwMDAxO1xuXG4gIHZhciBwYXJhbXMgPSBbXTtcblxuICBmb3IoIHZhciBpbmRleCA9IDA7IGluZGV4IDwgNjsgaW5kZXggKz0gMiApe1xuICAgIGlmKCBNYXRoLmFicyggcm9vdHNbIGluZGV4ICsgMV0gKSA8IHplcm9UaHJlc2hvbGRcbiAgICAgICAgJiYgcm9vdHNbIGluZGV4IF0gPj0gMFxuICAgICAgICAmJiByb290c1sgaW5kZXggXSA8PSAxLjAgKXtcbiAgICAgIHBhcmFtcy5wdXNoKCByb290c1sgaW5kZXggXSApO1xuICAgIH1cbiAgfVxuXG4gIHBhcmFtcy5wdXNoKCAxLjAgKTtcbiAgcGFyYW1zLnB1c2goIDAuMCApO1xuXG4gIHZhciBtaW5EaXN0YW5jZVNxdWFyZWQgPSAtMTtcbiAgdmFyIGNsb3Nlc3RQYXJhbTtcblxuICB2YXIgY3VyWCwgY3VyWSwgZGlzdFNxdWFyZWQ7XG4gIGZvciggdmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrICl7XG4gICAgY3VyWCA9IE1hdGgucG93KCAxLjAgLSBwYXJhbXNbIGkgXSwgMi4wICkgKiB4MVxuICAgICAgKyAyLjAgKiAoMSAtIHBhcmFtc1sgaSBdKSAqIHBhcmFtc1sgaSBdICogeDJcbiAgICAgICsgcGFyYW1zWyBpIF0gKiBwYXJhbXNbIGkgXSAqIHgzO1xuXG4gICAgY3VyWSA9IE1hdGgucG93KCAxIC0gcGFyYW1zWyBpIF0sIDIuMCApICogeTFcbiAgICAgICsgMiAqICgxLjAgLSBwYXJhbXNbIGkgXSkgKiBwYXJhbXNbIGkgXSAqIHkyXG4gICAgICArIHBhcmFtc1sgaSBdICogcGFyYW1zWyBpIF0gKiB5MztcblxuICAgIGRpc3RTcXVhcmVkID0gTWF0aC5wb3coIGN1clggLSB4LCAyICkgKyBNYXRoLnBvdyggY3VyWSAtIHksIDIgKTtcbiAgICAvLyBkZWJ1ZygnZGlzdGFuY2UgZm9yIHBhcmFtICcgKyBwYXJhbXNbaV0gKyBcIjogXCIgKyBNYXRoLnNxcnQoZGlzdFNxdWFyZWQpKTtcbiAgICBpZiggbWluRGlzdGFuY2VTcXVhcmVkID49IDAgKXtcbiAgICAgIGlmKCBkaXN0U3F1YXJlZCA8IG1pbkRpc3RhbmNlU3F1YXJlZCApe1xuICAgICAgICBtaW5EaXN0YW5jZVNxdWFyZWQgPSBkaXN0U3F1YXJlZDtcbiAgICAgICAgY2xvc2VzdFBhcmFtID0gcGFyYW1zWyBpIF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1pbkRpc3RhbmNlU3F1YXJlZCA9IGRpc3RTcXVhcmVkO1xuICAgICAgY2xvc2VzdFBhcmFtID0gcGFyYW1zWyBpIF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1pbkRpc3RhbmNlU3F1YXJlZDtcbn07XG5cbm1hdGguc3FkaXN0VG9GaW5pdGVMaW5lID0gZnVuY3Rpb24oIHgsIHksIHgxLCB5MSwgeDIsIHkyICl7XG4gIHZhciBvZmZzZXQgPSBbIHggLSB4MSwgeSAtIHkxIF07XG4gIHZhciBsaW5lID0gWyB4MiAtIHgxLCB5MiAtIHkxIF07XG5cbiAgdmFyIGxpbmVTcSA9IGxpbmVbMF0gKiBsaW5lWzBdICsgbGluZVsxXSAqIGxpbmVbMV07XG4gIHZhciBoeXBTcSA9IG9mZnNldFswXSAqIG9mZnNldFswXSArIG9mZnNldFsxXSAqIG9mZnNldFsxXTtcblxuICB2YXIgZG90UHJvZHVjdCA9IG9mZnNldFswXSAqIGxpbmVbMF0gKyBvZmZzZXRbMV0gKiBsaW5lWzFdO1xuICB2YXIgYWRqU3EgPSBkb3RQcm9kdWN0ICogZG90UHJvZHVjdCAvIGxpbmVTcTtcblxuICBpZiggZG90UHJvZHVjdCA8IDAgKXtcbiAgICByZXR1cm4gaHlwU3E7XG4gIH1cblxuICBpZiggYWRqU3EgPiBsaW5lU3EgKXtcbiAgICByZXR1cm4gKHggLSB4MikgKiAoeCAtIHgyKSArICh5IC0geTIpICogKHkgLSB5Mik7XG4gIH1cblxuICByZXR1cm4gaHlwU3EgLSBhZGpTcTtcbn07XG5cbm1hdGgucG9pbnRJbnNpZGVQb2x5Z29uUG9pbnRzID0gZnVuY3Rpb24oIHgsIHksIHBvaW50cyApe1xuICB2YXIgeDEsIHkxLCB4MiwgeTI7XG4gIHZhciB5MztcblxuICAvLyBJbnRlcnNlY3Qgd2l0aCB2ZXJ0aWNhbCBsaW5lIHRocm91Z2ggKHgsIHkpXG4gIHZhciB1cCA9IDA7XG4gIHZhciBkb3duID0gMDtcbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoIC8gMjsgaSsrICl7XG5cbiAgICB4MSA9IHBvaW50c1sgaSAqIDJdO1xuICAgIHkxID0gcG9pbnRzWyBpICogMiArIDFdO1xuXG4gICAgaWYoIGkgKyAxIDwgcG9pbnRzLmxlbmd0aCAvIDIgKXtcbiAgICAgIHgyID0gcG9pbnRzWyAoaSArIDEpICogMl07XG4gICAgICB5MiA9IHBvaW50c1sgKGkgKyAxKSAqIDIgKyAxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgeDIgPSBwb2ludHNbIChpICsgMSAtIHBvaW50cy5sZW5ndGggLyAyKSAqIDJdO1xuICAgICAgeTIgPSBwb2ludHNbIChpICsgMSAtIHBvaW50cy5sZW5ndGggLyAyKSAqIDIgKyAxXTtcbiAgICB9XG5cbiAgICBpZiggeDEgPT0geCAmJiB4MiA9PSB4ICl7XG4gICAgICAvLyB0aGVuIGlnbm9yZVxuICAgIH0gZWxzZSBpZiggKHgxID49IHggJiYgeCA+PSB4MilcbiAgICAgIHx8ICh4MSA8PSB4ICYmIHggPD0geDIpICl7XG5cbiAgICAgIHkzID0gKHggLSB4MSkgLyAoeDIgLSB4MSkgKiAoeTIgLSB5MSkgKyB5MTtcblxuICAgICAgaWYoIHkzID4geSApe1xuICAgICAgICB1cCsrO1xuICAgICAgfVxuXG4gICAgICBpZiggeTMgPCB5ICl7XG4gICAgICAgIGRvd24rKztcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgfVxuXG4gIGlmKCB1cCAlIDIgPT09IDAgKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbm1hdGgucG9pbnRJbnNpZGVQb2x5Z29uID0gZnVuY3Rpb24oXG4gIHgsIHksIGJhc2VQb2ludHMsIGNlbnRlclgsIGNlbnRlclksIHdpZHRoLCBoZWlnaHQsIGRpcmVjdGlvbiwgcGFkZGluZyApe1xuXG4gIC8vdmFyIGRpcmVjdGlvbiA9IGFyZ3VtZW50c1s2XTtcbiAgdmFyIHRyYW5zZm9ybWVkUG9pbnRzID0gbmV3IEFycmF5KCBiYXNlUG9pbnRzLmxlbmd0aCApO1xuXG4gIC8vIEdpdmVzIG5lZ2F0aXZlIGFuZ2xlXG4gIHZhciBhbmdsZTtcblxuICBpZiggZGlyZWN0aW9uWzBdICE9IG51bGwgKXtcbiAgICBhbmdsZSA9IE1hdGguYXRhbiggZGlyZWN0aW9uWzFdIC8gZGlyZWN0aW9uWzBdICk7XG5cbiAgICBpZiggZGlyZWN0aW9uWzBdIDwgMCApe1xuICAgICAgYW5nbGUgPSBhbmdsZSArIE1hdGguUEkgLyAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbmdsZSA9IC1hbmdsZSAtIE1hdGguUEkgLyAyO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhbmdsZSA9IGRpcmVjdGlvbjtcbiAgfVxuXG4gIHZhciBjb3MgPSBNYXRoLmNvcyggLWFuZ2xlICk7XG4gIHZhciBzaW4gPSBNYXRoLnNpbiggLWFuZ2xlICk7XG5cbiAgLy8gICAgY29uc29sZS5sb2coXCJiYXNlOiBcIiArIGJhc2VQb2ludHMpO1xuICBmb3IoIHZhciBpID0gMDsgaSA8IHRyYW5zZm9ybWVkUG9pbnRzLmxlbmd0aCAvIDI7IGkrKyApe1xuICAgIHRyYW5zZm9ybWVkUG9pbnRzWyBpICogMl0gPVxuICAgICAgd2lkdGggLyAyICogKGJhc2VQb2ludHNbIGkgKiAyXSAqIGNvc1xuICAgICAgICAtIGJhc2VQb2ludHNbIGkgKiAyICsgMV0gKiBzaW4pO1xuXG4gICAgdHJhbnNmb3JtZWRQb2ludHNbIGkgKiAyICsgMV0gPVxuICAgICAgaGVpZ2h0IC8gMiAqIChiYXNlUG9pbnRzWyBpICogMiArIDFdICogY29zXG4gICAgICAgICsgYmFzZVBvaW50c1sgaSAqIDJdICogc2luKTtcblxuICAgIHRyYW5zZm9ybWVkUG9pbnRzWyBpICogMl0gKz0gY2VudGVyWDtcbiAgICB0cmFuc2Zvcm1lZFBvaW50c1sgaSAqIDIgKyAxXSArPSBjZW50ZXJZO1xuICB9XG5cbiAgdmFyIHBvaW50cztcblxuICBpZiggcGFkZGluZyA+IDAgKXtcbiAgICB2YXIgZXhwYW5kZWRMaW5lU2V0ID0gdGhpcy5leHBhbmRQb2x5Z29uKFxuICAgICAgdHJhbnNmb3JtZWRQb2ludHMsXG4gICAgICAtcGFkZGluZyApO1xuXG4gICAgcG9pbnRzID0gdGhpcy5qb2luTGluZXMoIGV4cGFuZGVkTGluZVNldCApO1xuICB9IGVsc2Uge1xuICAgIHBvaW50cyA9IHRyYW5zZm9ybWVkUG9pbnRzO1xuICB9XG5cbiAgcmV0dXJuIG1hdGgucG9pbnRJbnNpZGVQb2x5Z29uUG9pbnRzKCB4LCB5LCBwb2ludHMgKTtcbn07XG5cbm1hdGguam9pbkxpbmVzID0gZnVuY3Rpb24oIGxpbmVTZXQgKXtcblxuICB2YXIgdmVydGljZXMgPSBuZXcgQXJyYXkoIGxpbmVTZXQubGVuZ3RoIC8gMiApO1xuXG4gIHZhciBjdXJyZW50TGluZVN0YXJ0WCwgY3VycmVudExpbmVTdGFydFksIGN1cnJlbnRMaW5lRW5kWCwgY3VycmVudExpbmVFbmRZO1xuICB2YXIgbmV4dExpbmVTdGFydFgsIG5leHRMaW5lU3RhcnRZLCBuZXh0TGluZUVuZFgsIG5leHRMaW5lRW5kWTtcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IGxpbmVTZXQubGVuZ3RoIC8gNDsgaSsrICl7XG4gICAgY3VycmVudExpbmVTdGFydFggPSBsaW5lU2V0WyBpICogNF07XG4gICAgY3VycmVudExpbmVTdGFydFkgPSBsaW5lU2V0WyBpICogNCArIDFdO1xuICAgIGN1cnJlbnRMaW5lRW5kWCA9IGxpbmVTZXRbIGkgKiA0ICsgMl07XG4gICAgY3VycmVudExpbmVFbmRZID0gbGluZVNldFsgaSAqIDQgKyAzXTtcblxuICAgIGlmKCBpIDwgbGluZVNldC5sZW5ndGggLyA0IC0gMSApe1xuICAgICAgbmV4dExpbmVTdGFydFggPSBsaW5lU2V0WyAoaSArIDEpICogNF07XG4gICAgICBuZXh0TGluZVN0YXJ0WSA9IGxpbmVTZXRbIChpICsgMSkgKiA0ICsgMV07XG4gICAgICBuZXh0TGluZUVuZFggPSBsaW5lU2V0WyAoaSArIDEpICogNCArIDJdO1xuICAgICAgbmV4dExpbmVFbmRZID0gbGluZVNldFsgKGkgKyAxKSAqIDQgKyAzXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dExpbmVTdGFydFggPSBsaW5lU2V0WzBdO1xuICAgICAgbmV4dExpbmVTdGFydFkgPSBsaW5lU2V0WzFdO1xuICAgICAgbmV4dExpbmVFbmRYID0gbGluZVNldFsyXTtcbiAgICAgIG5leHRMaW5lRW5kWSA9IGxpbmVTZXRbM107XG4gICAgfVxuXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IHRoaXMuZmluaXRlTGluZXNJbnRlcnNlY3QoXG4gICAgICBjdXJyZW50TGluZVN0YXJ0WCwgY3VycmVudExpbmVTdGFydFksXG4gICAgICBjdXJyZW50TGluZUVuZFgsIGN1cnJlbnRMaW5lRW5kWSxcbiAgICAgIG5leHRMaW5lU3RhcnRYLCBuZXh0TGluZVN0YXJ0WSxcbiAgICAgIG5leHRMaW5lRW5kWCwgbmV4dExpbmVFbmRZLFxuICAgICAgdHJ1ZSApO1xuXG4gICAgdmVydGljZXNbIGkgKiAyXSA9IGludGVyc2VjdGlvblswXTtcbiAgICB2ZXJ0aWNlc1sgaSAqIDIgKyAxXSA9IGludGVyc2VjdGlvblsxXTtcbiAgfVxuXG4gIHJldHVybiB2ZXJ0aWNlcztcbn07XG5cbm1hdGguZXhwYW5kUG9seWdvbiA9IGZ1bmN0aW9uKCBwb2ludHMsIHBhZCApe1xuXG4gIHZhciBleHBhbmRlZExpbmVTZXQgPSBuZXcgQXJyYXkoIHBvaW50cy5sZW5ndGggKiAyICk7XG5cbiAgdmFyIGN1cnJlbnRQb2ludFgsIGN1cnJlbnRQb2ludFksIG5leHRQb2ludFgsIG5leHRQb2ludFk7XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoIC8gMjsgaSsrICl7XG4gICAgY3VycmVudFBvaW50WCA9IHBvaW50c1sgaSAqIDJdO1xuICAgIGN1cnJlbnRQb2ludFkgPSBwb2ludHNbIGkgKiAyICsgMV07XG5cbiAgICBpZiggaSA8IHBvaW50cy5sZW5ndGggLyAyIC0gMSApe1xuICAgICAgbmV4dFBvaW50WCA9IHBvaW50c1sgKGkgKyAxKSAqIDJdO1xuICAgICAgbmV4dFBvaW50WSA9IHBvaW50c1sgKGkgKyAxKSAqIDIgKyAxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dFBvaW50WCA9IHBvaW50c1swXTtcbiAgICAgIG5leHRQb2ludFkgPSBwb2ludHNbMV07XG4gICAgfVxuXG4gICAgLy8gQ3VycmVudCBsaW5lOiBbY3VycmVudFBvaW50WCwgY3VycmVudFBvaW50WV0gdG8gW25leHRQb2ludFgsIG5leHRQb2ludFldXG5cbiAgICAvLyBBc3N1bWUgQ0NXIHBvbHlnb24gd2luZGluZ1xuXG4gICAgdmFyIG9mZnNldFggPSAobmV4dFBvaW50WSAtIGN1cnJlbnRQb2ludFkpO1xuICAgIHZhciBvZmZzZXRZID0gLShuZXh0UG9pbnRYIC0gY3VycmVudFBvaW50WCk7XG5cbiAgICAvLyBOb3JtYWxpemVcbiAgICB2YXIgb2Zmc2V0TGVuZ3RoID0gTWF0aC5zcXJ0KCBvZmZzZXRYICogb2Zmc2V0WCArIG9mZnNldFkgKiBvZmZzZXRZICk7XG4gICAgdmFyIG5vcm1hbGl6ZWRPZmZzZXRYID0gb2Zmc2V0WCAvIG9mZnNldExlbmd0aDtcbiAgICB2YXIgbm9ybWFsaXplZE9mZnNldFkgPSBvZmZzZXRZIC8gb2Zmc2V0TGVuZ3RoO1xuXG4gICAgZXhwYW5kZWRMaW5lU2V0WyBpICogNF0gPSBjdXJyZW50UG9pbnRYICsgbm9ybWFsaXplZE9mZnNldFggKiBwYWQ7XG4gICAgZXhwYW5kZWRMaW5lU2V0WyBpICogNCArIDFdID0gY3VycmVudFBvaW50WSArIG5vcm1hbGl6ZWRPZmZzZXRZICogcGFkO1xuICAgIGV4cGFuZGVkTGluZVNldFsgaSAqIDQgKyAyXSA9IG5leHRQb2ludFggKyBub3JtYWxpemVkT2Zmc2V0WCAqIHBhZDtcbiAgICBleHBhbmRlZExpbmVTZXRbIGkgKiA0ICsgM10gPSBuZXh0UG9pbnRZICsgbm9ybWFsaXplZE9mZnNldFkgKiBwYWQ7XG4gIH1cblxuICByZXR1cm4gZXhwYW5kZWRMaW5lU2V0O1xufTtcblxubWF0aC5pbnRlcnNlY3RMaW5lRWxsaXBzZSA9IGZ1bmN0aW9uKFxuICB4LCB5LCBjZW50ZXJYLCBjZW50ZXJZLCBlbGxpcHNlV3JhZGl1cywgZWxsaXBzZUhyYWRpdXMgKXtcblxuICB2YXIgZGlzcFggPSBjZW50ZXJYIC0geDtcbiAgdmFyIGRpc3BZID0gY2VudGVyWSAtIHk7XG5cbiAgZGlzcFggLz0gZWxsaXBzZVdyYWRpdXM7XG4gIGRpc3BZIC89IGVsbGlwc2VIcmFkaXVzO1xuXG4gIHZhciBsZW4gPSBNYXRoLnNxcnQoIGRpc3BYICogZGlzcFggKyBkaXNwWSAqIGRpc3BZICk7XG5cbiAgdmFyIG5ld0xlbmd0aCA9IGxlbiAtIDE7XG5cbiAgaWYoIG5ld0xlbmd0aCA8IDAgKXtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgbGVuUHJvcG9ydGlvbiA9IG5ld0xlbmd0aCAvIGxlbjtcblxuICByZXR1cm4gWyAoY2VudGVyWCAtIHgpICogbGVuUHJvcG9ydGlvbiArIHgsIChjZW50ZXJZIC0geSkgKiBsZW5Qcm9wb3J0aW9uICsgeSBdO1xufTtcblxuLy8gUmV0dXJucyBpbnRlcnNlY3Rpb25zIG9mIGluY3JlYXNpbmcgZGlzdGFuY2UgZnJvbSBsaW5lJ3Mgc3RhcnQgcG9pbnRcbm1hdGguaW50ZXJzZWN0TGluZUNpcmNsZSA9IGZ1bmN0aW9uKFxuICB4MSwgeTEsIHgyLCB5MiwgY2VudGVyWCwgY2VudGVyWSwgcmFkaXVzICl7XG5cbiAgLy8gQ2FsY3VsYXRlIGQsIGRpcmVjdGlvbiB2ZWN0b3Igb2YgbGluZVxuICB2YXIgZCA9IFsgeDIgLSB4MSwgeTIgLSB5MSBdOyAvLyBEaXJlY3Rpb24gdmVjdG9yIG9mIGxpbmVcbiAgdmFyIGMgPSBbIGNlbnRlclgsIGNlbnRlclkgXTsgLy8gQ2VudGVyIG9mIGNpcmNsZVxuICB2YXIgZiA9IFsgeDEgLSBjZW50ZXJYLCB5MSAtIGNlbnRlclkgXTtcblxuICB2YXIgYSA9IGRbMF0gKiBkWzBdICsgZFsxXSAqIGRbMV07XG4gIHZhciBiID0gMiAqIChmWzBdICogZFswXSArIGZbMV0gKiBkWzFdKTtcbiAgdmFyIGMgPSAoZlswXSAqIGZbMF0gKyBmWzFdICogZlsxXSkgLSByYWRpdXMgKiByYWRpdXMgO1xuXG4gIHZhciBkaXNjcmltaW5hbnQgPSBiICogYiAtIDQgKiBhICogYztcblxuICBpZiggZGlzY3JpbWluYW50IDwgMCApe1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciB0MSA9ICgtYiArIE1hdGguc3FydCggZGlzY3JpbWluYW50ICkpIC8gKDIgKiBhKTtcbiAgdmFyIHQyID0gKC1iIC0gTWF0aC5zcXJ0KCBkaXNjcmltaW5hbnQgKSkgLyAoMiAqIGEpO1xuXG4gIHZhciB0TWluID0gTWF0aC5taW4oIHQxLCB0MiApO1xuICB2YXIgdE1heCA9IE1hdGgubWF4KCB0MSwgdDIgKTtcbiAgdmFyIGluUmFuZ2VQYXJhbXMgPSBbXTtcblxuICBpZiggdE1pbiA+PSAwICYmIHRNaW4gPD0gMSApe1xuICAgIGluUmFuZ2VQYXJhbXMucHVzaCggdE1pbiApO1xuICB9XG5cbiAgaWYoIHRNYXggPj0gMCAmJiB0TWF4IDw9IDEgKXtcbiAgICBpblJhbmdlUGFyYW1zLnB1c2goIHRNYXggKTtcbiAgfVxuXG4gIGlmKCBpblJhbmdlUGFyYW1zLmxlbmd0aCA9PT0gMCApe1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBuZWFySW50ZXJzZWN0aW9uWCA9IGluUmFuZ2VQYXJhbXNbMF0gKiBkWzBdICsgeDE7XG4gIHZhciBuZWFySW50ZXJzZWN0aW9uWSA9IGluUmFuZ2VQYXJhbXNbMF0gKiBkWzFdICsgeTE7XG5cbiAgaWYoIGluUmFuZ2VQYXJhbXMubGVuZ3RoID4gMSApe1xuXG4gICAgaWYoIGluUmFuZ2VQYXJhbXNbMF0gPT0gaW5SYW5nZVBhcmFtc1sxXSApe1xuICAgICAgcmV0dXJuIFsgbmVhckludGVyc2VjdGlvblgsIG5lYXJJbnRlcnNlY3Rpb25ZIF07XG4gICAgfSBlbHNlIHtcblxuICAgICAgdmFyIGZhckludGVyc2VjdGlvblggPSBpblJhbmdlUGFyYW1zWzFdICogZFswXSArIHgxO1xuICAgICAgdmFyIGZhckludGVyc2VjdGlvblkgPSBpblJhbmdlUGFyYW1zWzFdICogZFsxXSArIHkxO1xuXG4gICAgICByZXR1cm4gWyBuZWFySW50ZXJzZWN0aW9uWCwgbmVhckludGVyc2VjdGlvblksIGZhckludGVyc2VjdGlvblgsIGZhckludGVyc2VjdGlvblkgXTtcbiAgICB9XG5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gWyBuZWFySW50ZXJzZWN0aW9uWCwgbmVhckludGVyc2VjdGlvblkgXTtcbiAgfVxuXG59O1xuXG5tYXRoLmZpbmRDaXJjbGVOZWFyUG9pbnQgPSBmdW5jdGlvbiggY2VudGVyWCwgY2VudGVyWSxcbiAgcmFkaXVzLCBmYXJYLCBmYXJZICl7XG5cbiAgdmFyIGRpc3BsYWNlbWVudFggPSBmYXJYIC0gY2VudGVyWDtcbiAgdmFyIGRpc3BsYWNlbWVudFkgPSBmYXJZIC0gY2VudGVyWTtcbiAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KCBkaXNwbGFjZW1lbnRYICogZGlzcGxhY2VtZW50WFxuICAgICsgZGlzcGxhY2VtZW50WSAqIGRpc3BsYWNlbWVudFkgKTtcblxuICB2YXIgdW5pdERpc3BsYWNlbWVudFggPSBkaXNwbGFjZW1lbnRYIC8gZGlzdGFuY2U7XG4gIHZhciB1bml0RGlzcGxhY2VtZW50WSA9IGRpc3BsYWNlbWVudFkgLyBkaXN0YW5jZTtcblxuICByZXR1cm4gWyBjZW50ZXJYICsgdW5pdERpc3BsYWNlbWVudFggKiByYWRpdXMsXG4gICAgY2VudGVyWSArIHVuaXREaXNwbGFjZW1lbnRZICogcmFkaXVzIF07XG59O1xuXG5tYXRoLmZpbmRNYXhTcURpc3RhbmNlVG9PcmlnaW4gPSBmdW5jdGlvbiggcG9pbnRzICl7XG4gIHZhciBtYXhTcURpc3RhbmNlID0gMC4wMDAwMDE7XG4gIHZhciBzcURpc3RhbmNlO1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aCAvIDI7IGkrKyApe1xuXG4gICAgc3FEaXN0YW5jZSA9IHBvaW50c1sgaSAqIDJdICogcG9pbnRzWyBpICogMl1cbiAgICAgICsgcG9pbnRzWyBpICogMiArIDFdICogcG9pbnRzWyBpICogMiArIDFdO1xuXG4gICAgaWYoIHNxRGlzdGFuY2UgPiBtYXhTcURpc3RhbmNlICl7XG4gICAgICBtYXhTcURpc3RhbmNlID0gc3FEaXN0YW5jZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF4U3FEaXN0YW5jZTtcbn07XG5cbm1hdGgubWlkT2ZUaHJlZSA9IGZ1bmN0aW9uKCBhLCBiLCBjICl7XG4gIGlmKCAoYiA8PSBhICYmIGEgPD0gYykgfHwgKGMgPD0gYSAmJiBhIDw9IGIpICl7XG4gICAgcmV0dXJuIGE7XG4gIH0gZWxzZSBpZiggKGEgPD0gYiAmJiBiIDw9IGMpIHx8IChjIDw9IGIgJiYgYiA8PSBhKSApe1xuICAgIHJldHVybiBiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjO1xuICB9XG59O1xuXG5tYXRoLmZpbml0ZUxpbmVzSW50ZXJzZWN0ID0gZnVuY3Rpb24oIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMsIHg0LCB5NCwgaW5maW5pdGVMaW5lcyApe1xuXG4gIHZhciBkeDEzID0geDEgLSB4MztcbiAgdmFyIGR4MjEgPSB4MiAtIHgxO1xuICB2YXIgZHg0MyA9IHg0IC0geDM7XG5cbiAgdmFyIGR5MTMgPSB5MSAtIHkzO1xuICB2YXIgZHkyMSA9IHkyIC0geTE7XG4gIHZhciBkeTQzID0geTQgLSB5MztcblxuICB2YXIgdWFfdCA9IGR4NDMgKiBkeTEzIC0gZHk0MyAqIGR4MTM7XG4gIHZhciB1Yl90ID0gZHgyMSAqIGR5MTMgLSBkeTIxICogZHgxMztcbiAgdmFyIHVfYiAgPSBkeTQzICogZHgyMSAtIGR4NDMgKiBkeTIxO1xuXG4gIGlmKCB1X2IgIT09IDAgKXtcbiAgICB2YXIgdWEgPSB1YV90IC8gdV9iO1xuICAgIHZhciB1YiA9IHViX3QgLyB1X2I7XG5cbiAgICB2YXIgZmxwdFRocmVzaG9sZCA9IDAuMDAxO1xuICAgIHZhciBtaW4gPSAwIC0gZmxwdFRocmVzaG9sZDtcbiAgICB2YXIgbWF4ID0gMSArIGZscHRUaHJlc2hvbGQ7XG5cbiAgICBpZiggbWluIDw9IHVhICYmIHVhIDw9IG1heCAmJiBtaW4gPD0gdWIgJiYgdWIgPD0gbWF4ICl7XG4gICAgICByZXR1cm4gWyB4MSArIHVhICogZHgyMSwgeTEgKyB1YSAqIGR5MjEgXTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBpZiggIWluZmluaXRlTGluZXMgKXtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFsgeDEgKyB1YSAqIGR4MjEsIHkxICsgdWEgKiBkeTIxIF07XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmKCB1YV90ID09PSAwIHx8IHViX3QgPT09IDAgKXtcblxuICAgICAgLy8gUGFyYWxsZWwsIGNvaW5jaWRlbnQgbGluZXMuIENoZWNrIGlmIG92ZXJsYXBcblxuICAgICAgLy8gQ2hlY2sgZW5kcG9pbnQgb2Ygc2Vjb25kIGxpbmVcbiAgICAgIGlmKCB0aGlzLm1pZE9mVGhyZWUoIHgxLCB4MiwgeDQgKSA9PT0geDQgKXtcbiAgICAgICAgcmV0dXJuIFsgeDQsIHk0IF07XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIHN0YXJ0IHBvaW50IG9mIHNlY29uZCBsaW5lXG4gICAgICBpZiggdGhpcy5taWRPZlRocmVlKCB4MSwgeDIsIHgzICkgPT09IHgzICl7XG4gICAgICAgIHJldHVybiBbIHgzLCB5MyBdO1xuICAgICAgfVxuXG4gICAgICAvLyBFbmRwb2ludCBvZiBmaXJzdCBsaW5lXG4gICAgICBpZiggdGhpcy5taWRPZlRocmVlKCB4MywgeDQsIHgyICkgPT09IHgyICl7XG4gICAgICAgIHJldHVybiBbIHgyLCB5MiBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW107XG4gICAgfSBlbHNlIHtcblxuICAgICAgLy8gUGFyYWxsZWwsIG5vbi1jb2luY2lkZW50XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG59O1xuXG5tYXRoLnBvbHlnb25JbnRlcnNlY3RMaW5lID0gZnVuY3Rpb24oXG4gIHgsIHksIGJhc2VQb2ludHMsIGNlbnRlclgsIGNlbnRlclksIHdpZHRoLCBoZWlnaHQsIHBhZGRpbmcgKXtcblxuICB2YXIgaW50ZXJzZWN0aW9ucyA9IFtdO1xuICB2YXIgaW50ZXJzZWN0aW9uO1xuXG4gIHZhciB0cmFuc2Zvcm1lZFBvaW50cyA9IG5ldyBBcnJheSggYmFzZVBvaW50cy5sZW5ndGggKTtcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IHRyYW5zZm9ybWVkUG9pbnRzLmxlbmd0aCAvIDI7IGkrKyApe1xuICAgIHRyYW5zZm9ybWVkUG9pbnRzWyBpICogMl0gPSBiYXNlUG9pbnRzWyBpICogMl0gKiB3aWR0aCArIGNlbnRlclg7XG4gICAgdHJhbnNmb3JtZWRQb2ludHNbIGkgKiAyICsgMV0gPSBiYXNlUG9pbnRzWyBpICogMiArIDFdICogaGVpZ2h0ICsgY2VudGVyWTtcbiAgfVxuXG4gIHZhciBwb2ludHM7XG5cbiAgaWYoIHBhZGRpbmcgPiAwICl7XG4gICAgdmFyIGV4cGFuZGVkTGluZVNldCA9IG1hdGguZXhwYW5kUG9seWdvbihcbiAgICAgIHRyYW5zZm9ybWVkUG9pbnRzLFxuICAgICAgLXBhZGRpbmcgKTtcblxuICAgIHBvaW50cyA9IG1hdGguam9pbkxpbmVzKCBleHBhbmRlZExpbmVTZXQgKTtcbiAgfSBlbHNlIHtcbiAgICBwb2ludHMgPSB0cmFuc2Zvcm1lZFBvaW50cztcbiAgfVxuICAvLyB2YXIgcG9pbnRzID0gdHJhbnNmb3JtZWRQb2ludHM7XG5cbiAgdmFyIGN1cnJlbnRYLCBjdXJyZW50WSwgbmV4dFgsIG5leHRZO1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aCAvIDI7IGkrKyApe1xuXG4gICAgY3VycmVudFggPSBwb2ludHNbIGkgKiAyXTtcbiAgICBjdXJyZW50WSA9IHBvaW50c1sgaSAqIDIgKyAxXTtcblxuICAgIGlmKCBpIDwgcG9pbnRzLmxlbmd0aCAvIDIgLSAxICl7XG4gICAgICBuZXh0WCA9IHBvaW50c1sgKGkgKyAxKSAqIDJdO1xuICAgICAgbmV4dFkgPSBwb2ludHNbIChpICsgMSkgKiAyICsgMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRYID0gcG9pbnRzWzBdO1xuICAgICAgbmV4dFkgPSBwb2ludHNbMV07XG4gICAgfVxuXG4gICAgaW50ZXJzZWN0aW9uID0gdGhpcy5maW5pdGVMaW5lc0ludGVyc2VjdChcbiAgICAgIHgsIHksIGNlbnRlclgsIGNlbnRlclksXG4gICAgICBjdXJyZW50WCwgY3VycmVudFksXG4gICAgICBuZXh0WCwgbmV4dFkgKTtcblxuICAgIGlmKCBpbnRlcnNlY3Rpb24ubGVuZ3RoICE9PSAwICl7XG4gICAgICBpbnRlcnNlY3Rpb25zLnB1c2goIGludGVyc2VjdGlvblswXSwgaW50ZXJzZWN0aW9uWzFdICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGludGVyc2VjdGlvbnM7XG59O1xuXG5tYXRoLnNob3J0ZW5JbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihcbiAgaW50ZXJzZWN0aW9uLCBvZmZzZXQsIGFtb3VudCApe1xuXG4gIHZhciBkaXNwID0gWyBpbnRlcnNlY3Rpb25bMF0gLSBvZmZzZXRbMF0sIGludGVyc2VjdGlvblsxXSAtIG9mZnNldFsxXSBdO1xuXG4gIHZhciBsZW5ndGggPSBNYXRoLnNxcnQoIGRpc3BbMF0gKiBkaXNwWzBdICsgZGlzcFsxXSAqIGRpc3BbMV0gKTtcblxuICB2YXIgbGVuUmF0aW8gPSAobGVuZ3RoIC0gYW1vdW50KSAvIGxlbmd0aDtcblxuICBpZiggbGVuUmF0aW8gPCAwICl7XG4gICAgbGVuUmF0aW8gPSAwLjAwMDAxO1xuICB9XG5cbiAgcmV0dXJuIFsgb2Zmc2V0WzBdICsgbGVuUmF0aW8gKiBkaXNwWzBdLCBvZmZzZXRbMV0gKyBsZW5SYXRpbyAqIGRpc3BbMV0gXTtcbn07XG5cbm1hdGguZ2VuZXJhdGVVbml0TmdvblBvaW50c0ZpdFRvU3F1YXJlID0gZnVuY3Rpb24oIHNpZGVzLCByb3RhdGlvblJhZGlhbnMgKXtcbiAgdmFyIHBvaW50cyA9IG1hdGguZ2VuZXJhdGVVbml0TmdvblBvaW50cyggc2lkZXMsIHJvdGF0aW9uUmFkaWFucyApO1xuICBwb2ludHMgPSBtYXRoLmZpdFBvbHlnb25Ub1NxdWFyZSggcG9pbnRzICk7XG5cbiAgcmV0dXJuIHBvaW50cztcbn07XG5cbm1hdGguZml0UG9seWdvblRvU3F1YXJlID0gZnVuY3Rpb24oIHBvaW50cyApe1xuICB2YXIgeCwgeTtcbiAgdmFyIHNpZGVzID0gcG9pbnRzLmxlbmd0aCAvIDI7XG4gIHZhciBtaW5YID0gSW5maW5pdHksIG1pblkgPSBJbmZpbml0eSwgbWF4WCA9IC1JbmZpbml0eSwgbWF4WSA9IC1JbmZpbml0eTtcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IHNpZGVzOyBpKysgKXtcbiAgICB4ID0gcG9pbnRzWzIgKiBpIF07XG4gICAgeSA9IHBvaW50c1syICogaSArIDFdO1xuXG4gICAgbWluWCA9IE1hdGgubWluKCBtaW5YLCB4ICk7XG4gICAgbWF4WCA9IE1hdGgubWF4KCBtYXhYLCB4ICk7XG4gICAgbWluWSA9IE1hdGgubWluKCBtaW5ZLCB5ICk7XG4gICAgbWF4WSA9IE1hdGgubWF4KCBtYXhZLCB5ICk7XG4gIH1cblxuICAvLyBzdHJldGNoIGZhY3RvcnNcbiAgdmFyIHN4ID0gMiAvIChtYXhYIC0gbWluWCk7XG4gIHZhciBzeSA9IDIgLyAobWF4WSAtIG1pblkpO1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgc2lkZXM7IGkrKyApe1xuICAgIHggPSBwb2ludHNbMiAqIGkgXSA9IHBvaW50c1syICogaSBdICogc3g7XG4gICAgeSA9IHBvaW50c1syICogaSArIDFdID0gcG9pbnRzWzIgKiBpICsgMV0gKiBzeTtcblxuICAgIG1pblggPSBNYXRoLm1pbiggbWluWCwgeCApO1xuICAgIG1heFggPSBNYXRoLm1heCggbWF4WCwgeCApO1xuICAgIG1pblkgPSBNYXRoLm1pbiggbWluWSwgeSApO1xuICAgIG1heFkgPSBNYXRoLm1heCggbWF4WSwgeSApO1xuICB9XG5cbiAgaWYoIG1pblkgPCAtMSApe1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgc2lkZXM7IGkrKyApe1xuICAgICAgeSA9IHBvaW50c1syICogaSArIDFdID0gcG9pbnRzWzIgKiBpICsgMV0gKyAoLTEgLSBtaW5ZKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcG9pbnRzO1xufTtcblxubWF0aC5nZW5lcmF0ZVVuaXROZ29uUG9pbnRzID0gZnVuY3Rpb24oIHNpZGVzLCByb3RhdGlvblJhZGlhbnMgKXtcblxuICB2YXIgaW5jcmVtZW50ID0gMS4wIC8gc2lkZXMgKiAyICogTWF0aC5QSTtcbiAgdmFyIHN0YXJ0QW5nbGUgPSBzaWRlcyAlIDIgPT09IDAgP1xuICAgIE1hdGguUEkgLyAyLjAgKyBpbmNyZW1lbnQgLyAyLjAgOiBNYXRoLlBJIC8gMi4wO1xuICAvLyAgICBjb25zb2xlLmxvZyhub2RlU2hhcGVzWydzcXVhcmUnXSk7XG4gIHN0YXJ0QW5nbGUgKz0gcm90YXRpb25SYWRpYW5zO1xuXG4gIHZhciBwb2ludHMgPSBuZXcgQXJyYXkoIHNpZGVzICogMiApO1xuXG4gIHZhciBjdXJyZW50QW5nbGUsIHgsIHk7XG4gIGZvciggdmFyIGkgPSAwOyBpIDwgc2lkZXM7IGkrKyApe1xuICAgIGN1cnJlbnRBbmdsZSA9IGkgKiBpbmNyZW1lbnQgKyBzdGFydEFuZ2xlO1xuXG4gICAgeCA9IHBvaW50c1syICogaSBdID0gTWF0aC5jb3MoIGN1cnJlbnRBbmdsZSApOy8vICogKDEgKyBpLzIpO1xuICAgIHkgPSBwb2ludHNbMiAqIGkgKyAxXSA9IE1hdGguc2luKCAtY3VycmVudEFuZ2xlICk7Ly8gICogKDEgKyBpLzIpO1xuICB9XG5cbiAgcmV0dXJuIHBvaW50cztcbn07XG5cbm1hdGguZ2V0Um91bmRSZWN0YW5nbGVSYWRpdXMgPSBmdW5jdGlvbiggd2lkdGgsIGhlaWdodCApe1xuXG4gIC8vIFNldCB0aGUgZGVmYXVsdCByYWRpdXMsIHVubGVzcyBoYWxmIG9mIHdpZHRoIG9yIGhlaWdodCBpcyBzbWFsbGVyIHRoYW4gZGVmYXVsdFxuICByZXR1cm4gTWF0aC5taW4oIHdpZHRoIC8gNCwgaGVpZ2h0IC8gNCwgOCApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtYXRoO1xuIiwiLyohXG5FbWJlZGRhYmxlIE1pbmltdW0gU3RyaWN0bHktQ29tcGxpYW50IFByb21pc2VzL0ErIDEuMS4xIFRoZW5hYmxlXG5Db3B5cmlnaHQgKGMpIDIwMTMtMjAxNCBSYWxmIFMuIEVuZ2Vsc2NoYWxsIChodHRwOi8vZW5nZWxzY2hhbGwuY29tKVxuTGljZW5zZWQgdW5kZXIgVGhlIE1JVCBMaWNlbnNlIChodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUKVxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKiAgcHJvbWlzZSBzdGF0ZXMgW1Byb21pc2VzL0ErIDIuMV0gICovXG52YXIgU1RBVEVfUEVORElORyAgID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICBbUHJvbWlzZXMvQSsgMi4xLjFdICAqL1xudmFyIFNUQVRFX0ZVTEZJTExFRCA9IDE7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgW1Byb21pc2VzL0ErIDIuMS4yXSAgKi9cbnZhciBTVEFURV9SRUpFQ1RFRCAgPSAyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogIFtQcm9taXNlcy9BKyAyLjEuM10gICovXG5cbi8qICBwcm9taXNlIG9iamVjdCBjb25zdHJ1Y3RvciAgKi9cbnZhciBhcGkgPSBmdW5jdGlvbiggZXhlY3V0b3IgKXtcbiAgLyogIG9wdGlvbmFsbHkgc3VwcG9ydCBub24tY29uc3RydWN0b3IvcGxhaW4tZnVuY3Rpb24gY2FsbCAgKi9cbiAgaWYoICEodGhpcyBpbnN0YW5jZW9mIGFwaSkgKVxuICAgIHJldHVybiBuZXcgYXBpKCBleGVjdXRvciApO1xuXG4gIC8qICBpbml0aWFsaXplIG9iamVjdCAgKi9cbiAgdGhpcy5pZCAgICAgICAgICAgPSAnVGhlbmFibGUvMS4wLjcnO1xuICB0aGlzLnN0YXRlICAgICAgICA9IFNUQVRFX1BFTkRJTkc7IC8qICBpbml0aWFsIHN0YXRlICAqL1xuICB0aGlzLmZ1bGZpbGxWYWx1ZSA9IHVuZGVmaW5lZDsgICAgIC8qICBpbml0aWFsIHZhbHVlICAqLyAgICAgLyogIFtQcm9taXNlcy9BKyAxLjMsIDIuMS4yLjJdICAqL1xuICB0aGlzLnJlamVjdFJlYXNvbiA9IHVuZGVmaW5lZDsgICAgIC8qICBpbml0aWFsIHJlYXNvbiAqLyAgICAgLyogIFtQcm9taXNlcy9BKyAxLjUsIDIuMS4zLjJdICAqL1xuICB0aGlzLm9uRnVsZmlsbGVkICA9IFtdOyAgICAgICAgICAgIC8qICBpbml0aWFsIGhhbmRsZXJzICAqL1xuICB0aGlzLm9uUmVqZWN0ZWQgICA9IFtdOyAgICAgICAgICAgIC8qICBpbml0aWFsIGhhbmRsZXJzICAqL1xuXG4gIC8qICBwcm92aWRlIG9wdGlvbmFsIGluZm9ybWF0aW9uLWhpZGluZyBwcm94eSAgKi9cbiAgdGhpcy5wcm94eSA9IHtcbiAgICB0aGVuOiB0aGlzLnRoZW4uYmluZCggdGhpcyApXG4gIH07XG5cbiAgLyogIHN1cHBvcnQgb3B0aW9uYWwgZXhlY3V0b3IgZnVuY3Rpb24gICovXG4gIGlmKCB0eXBlb2YgZXhlY3V0b3IgPT09ICdmdW5jdGlvbicgKVxuICAgIGV4ZWN1dG9yLmNhbGwoIHRoaXMsIHRoaXMuZnVsZmlsbC5iaW5kKCB0aGlzICksIHRoaXMucmVqZWN0LmJpbmQoIHRoaXMgKSApO1xufTtcblxuLyogIHByb21pc2UgQVBJIG1ldGhvZHMgICovXG5hcGkucHJvdG90eXBlID0ge1xuICAvKiAgcHJvbWlzZSByZXNvbHZpbmcgbWV0aG9kcyAgKi9cbiAgZnVsZmlsbDogZnVuY3Rpb24oIHZhbHVlICl7IHJldHVybiBkZWxpdmVyKCB0aGlzLCBTVEFURV9GVUxGSUxMRUQsICdmdWxmaWxsVmFsdWUnLCB2YWx1ZSApOyB9LFxuICByZWplY3Q6ICBmdW5jdGlvbiggdmFsdWUgKXsgcmV0dXJuIGRlbGl2ZXIoIHRoaXMsIFNUQVRFX1JFSkVDVEVELCAgJ3JlamVjdFJlYXNvbicsIHZhbHVlICk7IH0sXG5cbiAgLyogIFwiVGhlIHRoZW4gTWV0aG9kXCIgW1Byb21pc2VzL0ErIDEuMSwgMS4yLCAyLjJdICAqL1xuICB0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQgKXtcbiAgICB2YXIgY3VyciA9IHRoaXM7XG4gICAgdmFyIG5leHQgPSBuZXcgYXBpKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogIFtQcm9taXNlcy9BKyAyLjIuN10gICovXG4gICAgY3Vyci5vbkZ1bGZpbGxlZC5wdXNoKFxuICAgICAgcmVzb2x2ZXIoIG9uRnVsZmlsbGVkLCBuZXh0LCAnZnVsZmlsbCcgKSApOyAgICAgICAgICAgICAvKiAgW1Byb21pc2VzL0ErIDIuMi4yLzIuMi42XSAgKi9cbiAgICBjdXJyLm9uUmVqZWN0ZWQucHVzaChcbiAgICAgIHJlc29sdmVyKCBvblJlamVjdGVkLCAgbmV4dCwgJ3JlamVjdCcgKSApOyAgICAgICAgICAgICAvKiAgW1Byb21pc2VzL0ErIDIuMi4zLzIuMi42XSAgKi9cbiAgICBleGVjdXRlKCBjdXJyICk7XG4gICAgcmV0dXJuIG5leHQucHJveHk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogIFtQcm9taXNlcy9BKyAyLjIuNywgMy4zXSAgKi9cbiAgfVxufTtcblxuLyogIGRlbGl2ZXIgYW4gYWN0aW9uICAqL1xudmFyIGRlbGl2ZXIgPSBmdW5jdGlvbiggY3Vyciwgc3RhdGUsIG5hbWUsIHZhbHVlICl7XG4gIGlmKCBjdXJyLnN0YXRlID09PSBTVEFURV9QRU5ESU5HICl7XG4gICAgY3Vyci5zdGF0ZSA9IHN0YXRlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogIFtQcm9taXNlcy9BKyAyLjEuMi4xLCAyLjEuMy4xXSAgKi9cbiAgICBjdXJyWyBuYW1lIF0gPSB2YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICBbUHJvbWlzZXMvQSsgMi4xLjIuMiwgMi4xLjMuMl0gICovXG4gICAgZXhlY3V0ZSggY3VyciApO1xuICB9XG4gIHJldHVybiBjdXJyO1xufTtcblxuLyogIGV4ZWN1dGUgYWxsIGhhbmRsZXJzICAqL1xudmFyIGV4ZWN1dGUgPSBmdW5jdGlvbiggY3VyciApe1xuICBpZiggY3Vyci5zdGF0ZSA9PT0gU1RBVEVfRlVMRklMTEVEIClcbiAgICBleGVjdXRlX2hhbmRsZXJzKCBjdXJyLCAnb25GdWxmaWxsZWQnLCBjdXJyLmZ1bGZpbGxWYWx1ZSApO1xuICBlbHNlIGlmKCBjdXJyLnN0YXRlID09PSBTVEFURV9SRUpFQ1RFRCApXG4gICAgZXhlY3V0ZV9oYW5kbGVycyggY3VyciwgJ29uUmVqZWN0ZWQnLCAgY3Vyci5yZWplY3RSZWFzb24gKTtcbn07XG5cbi8qICBleGVjdXRlIHBhcnRpY3VsYXIgc2V0IG9mIGhhbmRsZXJzICAqL1xudmFyIGV4ZWN1dGVfaGFuZGxlcnMgPSBmdW5jdGlvbiggY3VyciwgbmFtZSwgdmFsdWUgKXtcbiAgLyogZ2xvYmFsIHNldEltbWVkaWF0ZTogdHJ1ZSAqL1xuICAvKiBnbG9iYWwgc2V0VGltZW91dDogdHJ1ZSAqL1xuXG4gIC8qICBzaG9ydC1jaXJjdWl0IHByb2Nlc3NpbmcgICovXG4gIGlmKCBjdXJyWyBuYW1lIF0ubGVuZ3RoID09PSAwIClcbiAgICByZXR1cm47XG5cbiAgLyogIGl0ZXJhdGUgb3ZlciBhbGwgaGFuZGxlcnMsIGV4YWN0bHkgb25jZSAgKi9cbiAgdmFyIGhhbmRsZXJzID0gY3VyclsgbmFtZSBdO1xuICBjdXJyWyBuYW1lIF0gPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgW1Byb21pc2VzL0ErIDIuMi4yLjMsIDIuMi4zLjNdICAqL1xuICB2YXIgZnVuYyA9IGZ1bmN0aW9uKCl7XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBoYW5kbGVycy5sZW5ndGg7IGkrKyApXG4gICAgICBoYW5kbGVyc1sgaSBdKCB2YWx1ZSApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgW1Byb21pc2VzL0ErIDIuMi41XSAgKi9cbiAgfTtcblxuICAvKiAgZXhlY3V0ZSBwcm9jZWR1cmUgYXN5bmNocm9ub3VzbHkgICovICAgICAgICAgICAgICAgICAgICAgLyogIFtQcm9taXNlcy9BKyAyLjIuNCwgMy4xXSAgKi9cbiAgaWYoIHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicgKVxuICAgIHNldEltbWVkaWF0ZSggZnVuYyApO1xuICBlbHNlXG4gICAgc2V0VGltZW91dCggZnVuYywgMCApO1xufTtcblxuLyogIGdlbmVyYXRlIGEgcmVzb2x2ZXIgZnVuY3Rpb24gICovXG52YXIgcmVzb2x2ZXIgPSBmdW5jdGlvbiggY2IsIG5leHQsIG1ldGhvZCApe1xuICByZXR1cm4gZnVuY3Rpb24oIHZhbHVlICl7XG4gICAgaWYoIHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJyApICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICBbUHJvbWlzZXMvQSsgMi4yLjEsIDIuMi43LjMsIDIuMi43LjRdICAqL1xuICAgICAgbmV4dFsgbWV0aG9kIF0uY2FsbCggbmV4dCwgdmFsdWUgKTsgICAgICAgICAgICAgICAgICAgICAgLyogIFtQcm9taXNlcy9BKyAyLjIuNy4zLCAyLjIuNy40XSAgKi9cbiAgICBlbHNlIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB0cnkgeyByZXN1bHQgPSBjYiggdmFsdWUgKTsgfSAgICAgICAgICAgICAgICAgICAgICAgICAgLyogIFtQcm9taXNlcy9BKyAyLjIuMi4xLCAyLjIuMy4xLCAyLjIuNSwgMy4yXSAgKi9cbiAgICAgIGNhdGNoKCBlICl7XG4gICAgICAgIG5leHQucmVqZWN0KCBlICk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICBbUHJvbWlzZXMvQSsgMi4yLjcuMl0gICovXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoIG5leHQsIHJlc3VsdCApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgW1Byb21pc2VzL0ErIDIuMi43LjFdICAqL1xuICAgIH1cbiAgfTtcbn07XG5cbi8qICBcIlByb21pc2UgUmVzb2x1dGlvbiBQcm9jZWR1cmVcIiAgKi8gICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgW1Byb21pc2VzL0ErIDIuM10gICovXG52YXIgcmVzb2x2ZSA9IGZ1bmN0aW9uKCBwcm9taXNlLCB4ICl7XG4gIC8qICBzYW5pdHkgY2hlY2sgYXJndW1lbnRzICAqLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgW1Byb21pc2VzL0ErIDIuMy4xXSAgKi9cbiAgaWYoIHByb21pc2UgPT09IHggfHwgcHJvbWlzZS5wcm94eSA9PT0geCApe1xuICAgIHByb21pc2UucmVqZWN0KCBuZXcgVHlwZUVycm9yKCAnY2Fubm90IHJlc29sdmUgcHJvbWlzZSB3aXRoIGl0c2VsZicgKSApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qICBzdXJnaWNhbGx5IGNoZWNrIGZvciBhIFwidGhlblwiIG1ldGhvZFxuICAgIChtYWlubHkgdG8ganVzdCBjYWxsIHRoZSBcImdldHRlclwiIG9mIFwidGhlblwiIG9ubHkgb25jZSkgICovXG4gIHZhciB0aGVuO1xuICBpZiggKHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiB4ICE9PSBudWxsKSB8fCB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJyApe1xuICAgIHRyeSB7IHRoZW4gPSB4LnRoZW47IH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICBbUHJvbWlzZXMvQSsgMi4zLjMuMSwgMy41XSAgKi9cbiAgICBjYXRjaCggZSApe1xuICAgICAgcHJvbWlzZS5yZWplY3QoIGUgKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICBbUHJvbWlzZXMvQSsgMi4zLjMuMl0gICovXG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgLyogIGhhbmRsZSBvd24gVGhlbmFibGVzICAgIFtQcm9taXNlcy9BKyAyLjMuMl1cbiAgICBhbmQgc2ltaWxhciBcInRoZW5hYmxlc1wiIFtQcm9taXNlcy9BKyAyLjMuM10gICovXG4gIGlmKCB0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJyApe1xuICAgIHZhciByZXNvbHZlZCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAvKiAgY2FsbCByZXRyaWV2ZWQgXCJ0aGVuXCIgbWV0aG9kICovICAgICAgICAgICAgICAgICAgLyogIFtQcm9taXNlcy9BKyAyLjMuMy4zXSAgKi9cbiAgICAgIHRoZW4uY2FsbCggeCxcbiAgICAgICAgLyogIHJlc29sdmVQcm9taXNlICAqLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICBbUHJvbWlzZXMvQSsgMi4zLjMuMy4xXSAgKi9cbiAgICAgICAgZnVuY3Rpb24oIHkgKXtcbiAgICAgICAgICBpZiggcmVzb2x2ZWQgKSByZXR1cm47IHJlc29sdmVkID0gdHJ1ZTsgICAgICAgLyogIFtQcm9taXNlcy9BKyAyLjMuMy4zLjNdICAqL1xuICAgICAgICAgIGlmKCB5ID09PSB4ICkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgW1Byb21pc2VzL0ErIDMuNl0gICovXG4gICAgICAgICAgICBwcm9taXNlLnJlamVjdCggbmV3IFR5cGVFcnJvciggJ2NpcmN1bGFyIHRoZW5hYmxlIGNoYWluJyApICk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmVzb2x2ZSggcHJvbWlzZSwgeSApO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qICByZWplY3RQcm9taXNlICAqLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgW1Byb21pc2VzL0ErIDIuMy4zLjMuMl0gICovXG4gICAgICAgIGZ1bmN0aW9uKCByICl7XG4gICAgICAgICAgaWYoIHJlc29sdmVkICkgcmV0dXJuOyByZXNvbHZlZCA9IHRydWU7ICAgICAgIC8qICBbUHJvbWlzZXMvQSsgMi4zLjMuMy4zXSAgKi9cbiAgICAgICAgICBwcm9taXNlLnJlamVjdCggciApO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cbiAgICBjYXRjaCggZSApe1xuICAgICAgaWYoICFyZXNvbHZlZCApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogIFtQcm9taXNlcy9BKyAyLjMuMy4zLjNdICAqL1xuICAgICAgICBwcm9taXNlLnJlamVjdCggZSApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgW1Byb21pc2VzL0ErIDIuMy4zLjMuNF0gICovXG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qICBoYW5kbGUgb3RoZXIgdmFsdWVzICAqL1xuICBwcm9taXNlLmZ1bGZpbGwoIHggKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgW1Byb21pc2VzL0ErIDIuMy40LCAyLjMuMy40XSAgKi9cbn07XG5cbi8vIHNvIHdlIGFsd2F5cyBoYXZlIFByb21pc2UuYWxsKClcbmFwaS5hbGwgPSBmdW5jdGlvbiggcHMgKXtcbiAgcmV0dXJuIG5ldyBhcGkoZnVuY3Rpb24oIHJlc29sdmVBbGwsIHJlamVjdEFsbCApe1xuICAgIHZhciB2YWxzID0gbmV3IEFycmF5KCBwcy5sZW5ndGggKTtcbiAgICB2YXIgZG9uZUNvdW50ID0gMDtcblxuICAgIHZhciBmdWxmaWxsID0gZnVuY3Rpb24oIGksIHZhbCApe1xuICAgICAgdmFsc1sgaSBdID0gdmFsO1xuICAgICAgZG9uZUNvdW50Kys7XG5cbiAgICAgIGlmKCBkb25lQ291bnQgPT09IHBzLmxlbmd0aCApe1xuICAgICAgICByZXNvbHZlQWxsKCB2YWxzICk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgcHMubGVuZ3RoOyBpKysgKXtcbiAgICAgIChmdW5jdGlvbiggaSApe1xuICAgICAgICB2YXIgcCA9IHBzW2ldO1xuICAgICAgICB2YXIgaXNQcm9taXNlID0gcCAhPSBudWxsICYmIHAudGhlbiAhPSBudWxsO1xuXG4gICAgICAgIGlmKCBpc1Byb21pc2UgKXtcbiAgICAgICAgICBwLnRoZW4oIGZ1bmN0aW9uKCB2YWwgKXtcbiAgICAgICAgICAgIGZ1bGZpbGwoIGksIHZhbCApO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCBlcnIgKXtcbiAgICAgICAgICAgIHJlamVjdEFsbCggZXJyICk7XG4gICAgICAgICAgfSApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB2YWwgPSBwO1xuICAgICAgICAgIGZ1bGZpbGwoIGksIHZhbCApO1xuICAgICAgICB9XG4gICAgICB9KSggaSApO1xuICAgIH1cblxuICB9ICk7XG59O1xuXG5hcGkucmVzb2x2ZSA9IGZ1bmN0aW9uKCB2YWwgKXtcbiAgcmV0dXJuIG5ldyBhcGkoZnVuY3Rpb24oIHJlc29sdmUsIHJlamVjdCApeyByZXNvbHZlKCB2YWwgKTsgfSk7XG59O1xuXG5hcGkucmVqZWN0ID0gZnVuY3Rpb24oIHZhbCApe1xuICByZXR1cm4gbmV3IGFwaShmdW5jdGlvbiggcmVzb2x2ZSwgcmVqZWN0ICl7IHJlamVjdCggdmFsICk7IH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgPyBQcm9taXNlIDogYXBpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvLyBzYmduIHNoYXBlcyBub3Qgc3VwcG9ydGVkIGJ5IGN5dG9zY2FwZS5qcyB0aGlzIG9iamVjdCB3aWxsIGJlIGV4cG9zZWQgaW4gY3l0b3NjYXBlLmpzXG4vLyBhbmQgd2lsbCBiZSBmaWxsZWQgaW4gc2JnbnZpei5qc1xuLy8gVE9ETyBjb25zaWRlciBmaWxsaW5nIHRoaXMgb2JqZWN0IGhlcmUgYW5kIHJlbW92ZSByZWxhdGVkIHRoaW5ncyBmcm9tIHNiZ252aXpcbnZhciBzYmduID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gc2JnbjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBpcyA9IHJlcXVpcmUoICcuL2lzJyApO1xudmFyIHV0aWwgPSByZXF1aXJlKCAnLi91dGlsJyApO1xuXG52YXIgU2VsZWN0b3IgPSBmdW5jdGlvbiggc2VsZWN0b3IgKXtcblxuICBpZiggISh0aGlzIGluc3RhbmNlb2YgU2VsZWN0b3IpICl7XG4gICAgcmV0dXJuIG5ldyBTZWxlY3Rvciggc2VsZWN0b3IgKTtcbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBzZWxmLl9wcml2YXRlID0ge1xuICAgIHNlbGVjdG9yVGV4dDogbnVsbCxcbiAgICBpbnZhbGlkOiB0cnVlXG4gIH07XG5cbiAgLy8gc3RvcmFnZSBmb3IgcGFyc2VkIHF1ZXJpZXNcbiAgdmFyIG5ld1F1ZXJ5ID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4ge1xuICAgICAgY2xhc3NlczogW10sXG4gICAgICBjb2xvblNlbGVjdG9yczogW10sXG4gICAgICBkYXRhOiBbXSxcbiAgICAgIGdyb3VwOiBudWxsLFxuICAgICAgaWRzOiBbXSxcbiAgICAgIG1ldGE6IFtdLFxuXG4gICAgICAvLyBmYWtlIHNlbGVjdG9yc1xuICAgICAgY29sbGVjdGlvbjogbnVsbCwgLy8gYSBjb2xsZWN0aW9uIHRvIG1hdGNoIGFnYWluc3RcbiAgICAgIGZpbHRlcjogbnVsbCwgLy8gZmlsdGVyIGZ1bmN0aW9uXG5cbiAgICAgIC8vIHRoZXNlIGFyZSBkZWZpbmVkIGluIHRoZSB1cHdhcmQgZGlyZWN0aW9uIHJhdGhlciB0aGFuIGRvd24gKGUuZy4gY2hpbGQpXG4gICAgICAvLyBiZWNhdXNlIHdlIG5lZWQgdG8gZ28gdXAgaW4gU2VsZWN0b3IuZmlsdGVyKClcbiAgICAgIHBhcmVudDogbnVsbCwgLy8gcGFyZW50IHF1ZXJ5IG9ialxuICAgICAgYW5jZXN0b3I6IG51bGwsIC8vIGFuY2VzdG9yIHF1ZXJ5IG9ialxuICAgICAgc3ViamVjdDogbnVsbCwgLy8gZGVmaW5lcyBzdWJqZWN0IGluIGNvbXBvdW5kIHF1ZXJ5IChzdWJqZWN0IHF1ZXJ5IG9iajsgcG9pbnRzIHRvIHNlbGYgaWYgc3ViamVjdClcblxuICAgICAgLy8gdXNlIHRoZXNlIG9ubHkgd2hlbiBzdWJqZWN0IGhhcyBiZWVuIGRlZmluZWRcbiAgICAgIGNoaWxkOiBudWxsLFxuICAgICAgZGVzY2VuZGFudDogbnVsbFxuICAgIH07XG4gIH07XG5cbiAgaWYoICFzZWxlY3RvciB8fCAoIGlzLnN0cmluZyggc2VsZWN0b3IgKSAmJiBzZWxlY3Rvci5tYXRjaCggL15cXHMqJC8gKSApICl7XG5cbiAgICBzZWxmLmxlbmd0aCA9IDA7XG5cbiAgfSBlbHNlIGlmKCBzZWxlY3RvciA9PT0gJyonIHx8IHNlbGVjdG9yID09PSAnZWRnZScgfHwgc2VsZWN0b3IgPT09ICdub2RlJyApe1xuXG4gICAgLy8gbWFrZSBzaW5nbGUsIGdyb3VwLW9ubHkgc2VsZWN0b3JzIGNoZWFwIHRvIG1ha2UgYW5kIGNoZWFwIHRvIGZpbHRlclxuXG4gICAgc2VsZlswXSA9IG5ld1F1ZXJ5KCk7XG4gICAgc2VsZlswXS5ncm91cCA9IHNlbGVjdG9yID09PSAnKicgPyBzZWxlY3RvciA6IHNlbGVjdG9yICsgJ3MnO1xuICAgIHNlbGZbMF0uZ3JvdXBPbmx5ID0gdHJ1ZTtcbiAgICBzZWxmLl9wcml2YXRlLmludmFsaWQgPSBmYWxzZTtcbiAgICBzZWxmLl9wcml2YXRlLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yO1xuICAgIHNlbGYubGVuZ3RoID0gMTtcblxuICB9IGVsc2UgaWYoIGlzLmVsZW1lbnRPckNvbGxlY3Rpb24oIHNlbGVjdG9yICkgKXtcblxuICAgIHZhciBjb2xsZWN0aW9uID0gc2VsZWN0b3IuY29sbGVjdGlvbigpO1xuXG4gICAgc2VsZlswXSA9IG5ld1F1ZXJ5KCk7XG4gICAgc2VsZlswXS5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICBzZWxmLmxlbmd0aCA9IDE7XG5cbiAgfSBlbHNlIGlmKCBpcy5mbiggc2VsZWN0b3IgKSApe1xuXG4gICAgc2VsZlswXSA9IG5ld1F1ZXJ5KCk7XG4gICAgc2VsZlswXS5maWx0ZXIgPSBzZWxlY3RvcjtcbiAgICBzZWxmLmxlbmd0aCA9IDE7XG5cbiAgfSBlbHNlIGlmKCBpcy5zdHJpbmcoIHNlbGVjdG9yICkgKXtcblxuICAgIC8vIHRoZSBjdXJyZW50IHN1YmplY3QgaW4gdGhlIHF1ZXJ5XG4gICAgdmFyIGN1cnJlbnRTdWJqZWN0ID0gbnVsbDtcblxuICAgIC8vIHRva2VucyBpbiB0aGUgcXVlcnkgbGFuZ3VhZ2VcbiAgICB2YXIgdG9rZW5zID0ge1xuICAgICAgbWV0YUNoYXI6ICdbXFxcXCFcXFxcXCJcXFxcI1xcXFwkXFxcXCVcXFxcJlxcXFxcXCdcXFxcKFxcXFwpXFxcXCpcXFxcK1xcXFwsXFxcXC5cXFxcL1xcXFw6XFxcXDtcXFxcPFxcXFw9XFxcXD5cXFxcP1xcXFxAXFxcXFtcXFxcXVxcXFxeXFxcXGBcXFxce1xcXFx8XFxcXH1cXFxcfl0nLCAvLyBjaGFycyB3ZSBuZWVkIHRvIGVzY2FwZSBpbiB2YXIgbmFtZXMsIGV0Y1xuICAgICAgY29tcGFyYXRvck9wOiAnPXxcXFxcIT18Pnw+PXw8fDw9fFxcXFwkPXxcXFxcXj18XFxcXCo9JywgLy8gYmluYXJ5IGNvbXBhcmlzb24gb3AgKHVzZWQgaW4gZGF0YSBzZWxlY3RvcnMpXG4gICAgICBib29sT3A6ICdcXFxcP3xcXFxcIXxcXFxcXicsIC8vIGJvb2xlYW4gKHVuYXJ5KSBvcGVyYXRvcnMgKHVzZWQgaW4gZGF0YSBzZWxlY3RvcnMpXG4gICAgICBzdHJpbmc6ICdcIig/OlxcXFxcXFxcXCJ8W15cIl0pK1wiJyArICd8JyArIFwiJyg/OlxcXFxcXFxcJ3xbXiddKSsnXCIsIC8vIHN0cmluZyBsaXRlcmFscyAodXNlZCBpbiBkYXRhIHNlbGVjdG9ycykgLS0gZG91YmxlcXVvdGVzIHwgc2luZ2xlcXVvdGVzXG4gICAgICBudW1iZXI6IHV0aWwucmVnZXgubnVtYmVyLCAvLyBudW1iZXIgbGl0ZXJhbCAodXNlZCBpbiBkYXRhIHNlbGVjdG9ycykgLS0tIGUuZy4gMC4xMjM0LCAxMjM0LCAxMmUxMjNcbiAgICAgIG1ldGE6ICdkZWdyZWV8aW5kZWdyZWV8b3V0ZGVncmVlJywgLy8gYWxsb3dlZCBtZXRhZGF0YSBmaWVsZHMgKGkuZS4gYWxsb3dlZCBmdW5jdGlvbnMgdG8gdXNlIGZyb20gQ29sbGVjdGlvbilcbiAgICAgIHNlcGFyYXRvcjogJ1xcXFxzKixcXFxccyonLCAvLyBxdWVyaWVzIGFyZSBzZXBhcmF0ZWQgYnkgY29tbWFzLCBlLmcuIGVkZ2VbZm9vID0gJ2JhciddLCBub2RlLnNvbWVDbGFzc1xuICAgICAgZGVzY2VuZGFudDogJ1xcXFxzKycsXG4gICAgICBjaGlsZDogJ1xcXFxzKz5cXFxccysnLFxuICAgICAgc3ViamVjdDogJ1xcXFwkJ1xuICAgIH07XG4gICAgdG9rZW5zLnZhcmlhYmxlID0gJyg/OltcXFxcdy1dfCg/OlxcXFxcXFxcJyArIHRva2Vucy5tZXRhQ2hhciArICcpKSsnOyAvLyBhIHZhcmlhYmxlIG5hbWVcbiAgICB0b2tlbnMudmFsdWUgPSB0b2tlbnMuc3RyaW5nICsgJ3wnICsgdG9rZW5zLm51bWJlcjsgLy8gYSB2YWx1ZSBsaXRlcmFsLCBlaXRoZXIgYSBzdHJpbmcgb3IgbnVtYmVyXG4gICAgdG9rZW5zLmNsYXNzTmFtZSA9IHRva2Vucy52YXJpYWJsZTsgLy8gYSBjbGFzcyBuYW1lIChmb2xsb3dzIHZhcmlhYmxlIGNvbnZlbnRpb25zKVxuICAgIHRva2Vucy5pZCA9IHRva2Vucy52YXJpYWJsZTsgLy8gYW4gZWxlbWVudCBpZCAoZm9sbG93cyB2YXJpYWJsZSBjb252ZW50aW9ucylcblxuICAgIC8vIHdoZW4gYSB0b2tlbiBsaWtlIGEgdmFyaWFibGUgaGFzIGVzY2FwZWQgbWV0YSBjaGFyYWN0ZXJzLCB3ZSBuZWVkIHRvIGNsZWFuIHRoZSBiYWNrc2xhc2hlcyBvdXRcbiAgICAvLyBzbyB0aGF0IHZhbHVlcyBnZXQgY29tcGFyZWQgcHJvcGVybHkgaW4gU2VsZWN0b3IuZmlsdGVyKClcbiAgICB2YXIgY2xlYW5NZXRhQ2hhcnMgPSBmdW5jdGlvbiggc3RyICl7XG4gICAgICByZXR1cm4gc3RyLnJlcGxhY2UoIG5ldyBSZWdFeHAoICdcXFxcXFxcXCgnICsgdG9rZW5zLm1ldGFDaGFyICsgJyknLCAnZycgKSwgZnVuY3Rpb24oIG1hdGNoLCAkMSwgb2Zmc2V0LCBvcmlnaW5hbCApe1xuICAgICAgICByZXR1cm4gJDE7XG4gICAgICB9ICk7XG4gICAgfTtcblxuICAgIC8vIGFkZCBAIHZhcmlhbnRzIHRvIGNvbXBhcmF0b3JPcFxuICAgIHZhciBvcHMgPSB0b2tlbnMuY29tcGFyYXRvck9wLnNwbGl0KCAnfCcgKTtcbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IG9wcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIG9wID0gb3BzWyBpIF07XG4gICAgICB0b2tlbnMuY29tcGFyYXRvck9wICs9ICd8QCcgKyBvcDtcbiAgICB9XG5cbiAgICAvLyBhZGQgISB2YXJpYW50cyB0byBjb21wYXJhdG9yT3BcbiAgICB2YXIgb3BzID0gdG9rZW5zLmNvbXBhcmF0b3JPcC5zcGxpdCggJ3wnICk7XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBvcHMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBvcCA9IG9wc1sgaSBdO1xuXG4gICAgICBpZiggb3AuaW5kZXhPZiggJyEnICkgPj0gMCApeyBjb250aW51ZTsgfSAvLyBza2lwIG9wcyB0aGF0IGV4cGxpY2l0bHkgY29udGFpbiAhXG4gICAgICBpZiggb3AgPT09ICc9JyApeyBjb250aW51ZTsgfSAvLyBza2lwID0gYi9jICE9IGlzIGV4cGxpY2l0bHkgZGVmaW5lZFxuXG4gICAgICB0b2tlbnMuY29tcGFyYXRvck9wICs9ICd8XFxcXCEnICsgb3A7XG4gICAgfVxuXG4gICAgLy8gTk9URTogYWRkIG5ldyBleHByZXNzaW9uIHN5bnRheCBoZXJlIHRvIGhhdmUgaXQgcmVjb2duaXNlZCBieSB0aGUgcGFyc2VyO1xuICAgIC8vIC0gYSBxdWVyeSBjb250YWlucyBhbGwgYWRqYWNlbnQgKGkuZS4gbm8gc2VwYXJhdG9yIGluIGJldHdlZW4pIGV4cHJlc3Npb25zO1xuICAgIC8vIC0gdGhlIGN1cnJlbnQgcXVlcnkgaXMgc3RvcmVkIGluIHNlbGZbaV0gLS0tIHlvdSBjYW4gdXNlIHRoZSByZWZlcmVuY2UgdG8gYHRoaXNgIGluIHRoZSBwb3B1bGF0ZSBmdW5jdGlvbjtcbiAgICAvLyAtIHlvdSBuZWVkIHRvIGNoZWNrIHRoZSBxdWVyeSBvYmplY3RzIGluIFNlbGVjdG9yLmZpbHRlcigpIGZvciBpdCBhY3R1YWxseSBmaWx0ZXIgcHJvcGVybHksIGJ1dCB0aGF0J3MgcHJldHR5IHN0cmFpZ2h0IGZvcndhcmRcbiAgICAvLyAtIHdoZW4geW91IGFkZCBzb21ldGhpbmcgaGVyZSwgYWxzbyBhZGQgdG8gU2VsZWN0b3IudG9TdHJpbmcoKVxuICAgIHZhciBleHBycyA9IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ2dyb3VwJyxcbiAgICAgICAgcXVlcnk6IHRydWUsXG4gICAgICAgIHJlZ2V4OiAnKG5vZGV8ZWRnZXxcXFxcKiknLFxuICAgICAgICBwb3B1bGF0ZTogZnVuY3Rpb24oIGdyb3VwICl7XG4gICAgICAgICAgdGhpcy5ncm91cCA9IGdyb3VwID09PSAnKicgPyBncm91cCA6IGdyb3VwICsgJ3MnO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdzdGF0ZScsXG4gICAgICAgIHF1ZXJ5OiB0cnVlLFxuICAgICAgICAvLyBOQjogaWYgb25lIGNvbG9uIHNlbGVjdG9yIGlzIGEgc3Vic3RyaW5nIG9mIGFub3RoZXIgZnJvbSBpdHMgc3RhcnQsIHBsYWNlIHRoZSBsb25nZXIgb25lIGZpcnN0XG4gICAgICAgIC8vIGUuZy4gOmZvb2Jhcnw6Zm9vXG4gICAgICAgIHJlZ2V4OiAnKDpzZWxlY3RlZHw6dW5zZWxlY3RlZHw6bG9ja2VkfDp1bmxvY2tlZHw6dmlzaWJsZXw6aGlkZGVufDp0cmFuc3BhcmVudHw6Z3JhYmJlZHw6ZnJlZXw6cmVtb3ZlZHw6aW5zaWRlfDpncmFiYmFibGV8OnVuZ3JhYmJhYmxlfDphbmltYXRlZHw6dW5hbmltYXRlZHw6c2VsZWN0YWJsZXw6dW5zZWxlY3RhYmxlfDpvcnBoYW58Om5vbm9ycGhhbnw6cGFyZW50fDpjaGlsZHw6bG9vcHw6c2ltcGxlfDphY3RpdmV8OmluYWN0aXZlfDp0b3VjaHw6YmFja2dyb3VuZGluZ3w6bm9uYmFja2dyb3VuZGluZyknLFxuICAgICAgICBwb3B1bGF0ZTogZnVuY3Rpb24oIHN0YXRlICl7XG4gICAgICAgICAgdGhpcy5jb2xvblNlbGVjdG9ycy5wdXNoKCBzdGF0ZSApO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdpZCcsXG4gICAgICAgIHF1ZXJ5OiB0cnVlLFxuICAgICAgICByZWdleDogJ1xcXFwjKCcgKyB0b2tlbnMuaWQgKyAnKScsXG4gICAgICAgIHBvcHVsYXRlOiBmdW5jdGlvbiggaWQgKXtcbiAgICAgICAgICB0aGlzLmlkcy5wdXNoKCBjbGVhbk1ldGFDaGFycyggaWQgKSApO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdjbGFzc05hbWUnLFxuICAgICAgICBxdWVyeTogdHJ1ZSxcbiAgICAgICAgcmVnZXg6ICdcXFxcLignICsgdG9rZW5zLmNsYXNzTmFtZSArICcpJyxcbiAgICAgICAgcG9wdWxhdGU6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKXtcbiAgICAgICAgICB0aGlzLmNsYXNzZXMucHVzaCggY2xlYW5NZXRhQ2hhcnMoIGNsYXNzTmFtZSApICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ2RhdGFFeGlzdHMnLFxuICAgICAgICBxdWVyeTogdHJ1ZSxcbiAgICAgICAgcmVnZXg6ICdcXFxcW1xcXFxzKignICsgdG9rZW5zLnZhcmlhYmxlICsgJylcXFxccypcXFxcXScsXG4gICAgICAgIHBvcHVsYXRlOiBmdW5jdGlvbiggdmFyaWFibGUgKXtcbiAgICAgICAgICB0aGlzLmRhdGEucHVzaCgge1xuICAgICAgICAgICAgZmllbGQ6IGNsZWFuTWV0YUNoYXJzKCB2YXJpYWJsZSApXG4gICAgICAgICAgfSApO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdkYXRhQ29tcGFyZScsXG4gICAgICAgIHF1ZXJ5OiB0cnVlLFxuICAgICAgICByZWdleDogJ1xcXFxbXFxcXHMqKCcgKyB0b2tlbnMudmFyaWFibGUgKyAnKVxcXFxzKignICsgdG9rZW5zLmNvbXBhcmF0b3JPcCArICcpXFxcXHMqKCcgKyB0b2tlbnMudmFsdWUgKyAnKVxcXFxzKlxcXFxdJyxcbiAgICAgICAgcG9wdWxhdGU6IGZ1bmN0aW9uKCB2YXJpYWJsZSwgY29tcGFyYXRvck9wLCB2YWx1ZSApe1xuICAgICAgICAgIHZhciB2YWx1ZUlzU3RyaW5nID0gbmV3IFJlZ0V4cCggJ14nICsgdG9rZW5zLnN0cmluZyArICckJyApLmV4ZWMoIHZhbHVlICkgIT0gbnVsbDtcblxuICAgICAgICAgIGlmKCB2YWx1ZUlzU3RyaW5nICl7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZyggMSwgdmFsdWUubGVuZ3RoIC0gMSApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5kYXRhLnB1c2goIHtcbiAgICAgICAgICAgIGZpZWxkOiBjbGVhbk1ldGFDaGFycyggdmFyaWFibGUgKSxcbiAgICAgICAgICAgIG9wZXJhdG9yOiBjb21wYXJhdG9yT3AsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICB9ICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ2RhdGFCb29sJyxcbiAgICAgICAgcXVlcnk6IHRydWUsXG4gICAgICAgIHJlZ2V4OiAnXFxcXFtcXFxccyooJyArIHRva2Vucy5ib29sT3AgKyAnKVxcXFxzKignICsgdG9rZW5zLnZhcmlhYmxlICsgJylcXFxccypcXFxcXScsXG4gICAgICAgIHBvcHVsYXRlOiBmdW5jdGlvbiggYm9vbE9wLCB2YXJpYWJsZSApe1xuICAgICAgICAgIHRoaXMuZGF0YS5wdXNoKCB7XG4gICAgICAgICAgICBmaWVsZDogY2xlYW5NZXRhQ2hhcnMoIHZhcmlhYmxlICksXG4gICAgICAgICAgICBvcGVyYXRvcjogYm9vbE9wXG4gICAgICAgICAgfSApO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdtZXRhQ29tcGFyZScsXG4gICAgICAgIHF1ZXJ5OiB0cnVlLFxuICAgICAgICByZWdleDogJ1xcXFxbXFxcXFtcXFxccyooJyArIHRva2Vucy5tZXRhICsgJylcXFxccyooJyArIHRva2Vucy5jb21wYXJhdG9yT3AgKyAnKVxcXFxzKignICsgdG9rZW5zLm51bWJlciArICcpXFxcXHMqXFxcXF1cXFxcXScsXG4gICAgICAgIHBvcHVsYXRlOiBmdW5jdGlvbiggbWV0YSwgY29tcGFyYXRvck9wLCBudW1iZXIgKXtcbiAgICAgICAgICB0aGlzLm1ldGEucHVzaCgge1xuICAgICAgICAgICAgZmllbGQ6IGNsZWFuTWV0YUNoYXJzKCBtZXRhICksXG4gICAgICAgICAgICBvcGVyYXRvcjogY29tcGFyYXRvck9wLFxuICAgICAgICAgICAgdmFsdWU6IHBhcnNlRmxvYXQoIG51bWJlciApXG4gICAgICAgICAgfSApO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICduZXh0UXVlcnknLFxuICAgICAgICBzZXBhcmF0b3I6IHRydWUsXG4gICAgICAgIHJlZ2V4OiB0b2tlbnMuc2VwYXJhdG9yLFxuICAgICAgICBwb3B1bGF0ZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAvLyBnbyBvbiB0byBuZXh0IHF1ZXJ5XG4gICAgICAgICAgc2VsZlsgKytpIF0gPSBuZXdRdWVyeSgpO1xuICAgICAgICAgIGN1cnJlbnRTdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAge1xuICAgICAgICBuYW1lOiAnY2hpbGQnLFxuICAgICAgICBzZXBhcmF0b3I6IHRydWUsXG4gICAgICAgIHJlZ2V4OiB0b2tlbnMuY2hpbGQsXG4gICAgICAgIHBvcHVsYXRlOiBmdW5jdGlvbigpe1xuICAgICAgICAgIC8vIHRoaXMgcXVlcnkgaXMgdGhlIHBhcmVudCBvZiB0aGUgZm9sbG93aW5nIHF1ZXJ5XG4gICAgICAgICAgdmFyIGNoaWxkUXVlcnkgPSBuZXdRdWVyeSgpO1xuICAgICAgICAgIGNoaWxkUXVlcnkucGFyZW50ID0gdGhpcztcbiAgICAgICAgICBjaGlsZFF1ZXJ5LnN1YmplY3QgPSBjdXJyZW50U3ViamVjdDtcblxuICAgICAgICAgIC8vIHdlJ3JlIG5vdyBwb3B1bGF0aW5nIHRoZSBjaGlsZCBxdWVyeSB3aXRoIGV4cHJlc3Npb25zIHRoYXQgZm9sbG93XG4gICAgICAgICAgc2VsZlsgaSBdID0gY2hpbGRRdWVyeTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAge1xuICAgICAgICBuYW1lOiAnZGVzY2VuZGFudCcsXG4gICAgICAgIHNlcGFyYXRvcjogdHJ1ZSxcbiAgICAgICAgcmVnZXg6IHRva2Vucy5kZXNjZW5kYW50LFxuICAgICAgICBwb3B1bGF0ZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAvLyB0aGlzIHF1ZXJ5IGlzIHRoZSBhbmNlc3RvciBvZiB0aGUgZm9sbG93aW5nIHF1ZXJ5XG4gICAgICAgICAgdmFyIGRlc2NlbmRhbnRRdWVyeSA9IG5ld1F1ZXJ5KCk7XG4gICAgICAgICAgZGVzY2VuZGFudFF1ZXJ5LmFuY2VzdG9yID0gdGhpcztcbiAgICAgICAgICBkZXNjZW5kYW50UXVlcnkuc3ViamVjdCA9IGN1cnJlbnRTdWJqZWN0O1xuXG4gICAgICAgICAgLy8gd2UncmUgbm93IHBvcHVsYXRpbmcgdGhlIGRlc2NlbmRhbnQgcXVlcnkgd2l0aCBleHByZXNzaW9ucyB0aGF0IGZvbGxvd1xuICAgICAgICAgIHNlbGZbIGkgXSA9IGRlc2NlbmRhbnRRdWVyeTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAge1xuICAgICAgICBuYW1lOiAnc3ViamVjdCcsXG4gICAgICAgIG1vZGlmaWVyOiB0cnVlLFxuICAgICAgICByZWdleDogdG9rZW5zLnN1YmplY3QsXG4gICAgICAgIHBvcHVsYXRlOiBmdW5jdGlvbigpe1xuICAgICAgICAgIGlmKCBjdXJyZW50U3ViamVjdCAhPSBudWxsICYmIHRoaXMuc3ViamVjdCAhPSB0aGlzICl7XG4gICAgICAgICAgICB1dGlsLmVycm9yKCAnUmVkZWZpbml0aW9uIG9mIHN1YmplY3QgaW4gc2VsZWN0b3IgYCcgKyBzZWxlY3RvciArICdgJyApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnRTdWJqZWN0ID0gdGhpcztcbiAgICAgICAgICB0aGlzLnN1YmplY3QgPSB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICBdO1xuXG4gICAgc2VsZi5fcHJpdmF0ZS5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICB2YXIgcmVtYWluaW5nID0gc2VsZWN0b3I7XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgLy8gb2YgYWxsIHRoZSBleHByZXNzaW9ucywgZmluZCB0aGUgZmlyc3QgbWF0Y2ggaW4gdGhlIHJlbWFpbmluZyB0ZXh0XG4gICAgdmFyIGNvbnN1bWVFeHByID0gZnVuY3Rpb24oIGV4cGVjdGF0aW9uICl7XG4gICAgICB2YXIgZXhwcjtcbiAgICAgIHZhciBtYXRjaDtcbiAgICAgIHZhciBuYW1lO1xuXG4gICAgICBmb3IoIHZhciBqID0gMDsgaiA8IGV4cHJzLmxlbmd0aDsgaisrICl7XG4gICAgICAgIHZhciBlID0gZXhwcnNbIGogXTtcbiAgICAgICAgdmFyIG4gPSBlLm5hbWU7XG5cbiAgICAgICAgLy8gaWdub3JlIHRoaXMgZXhwcmVzc2lvbiBpZiBpdCBkb2Vzbid0IG1lZXQgdGhlIGV4cGVjdGF0aW9uIGZ1bmN0aW9uXG4gICAgICAgIGlmKCBpcy5mbiggZXhwZWN0YXRpb24gKSAmJiAhZXhwZWN0YXRpb24oIG4sIGUgKSApeyBjb250aW51ZTsgfVxuXG4gICAgICAgIHZhciBtID0gcmVtYWluaW5nLm1hdGNoKCBuZXcgUmVnRXhwKCAnXicgKyBlLnJlZ2V4ICkgKTtcblxuICAgICAgICBpZiggbSAhPSBudWxsICl7XG4gICAgICAgICAgbWF0Y2ggPSBtO1xuICAgICAgICAgIGV4cHIgPSBlO1xuICAgICAgICAgIG5hbWUgPSBuO1xuXG4gICAgICAgICAgdmFyIGNvbnN1bWVkID0gbVswXTtcbiAgICAgICAgICByZW1haW5pbmcgPSByZW1haW5pbmcuc3Vic3RyaW5nKCBjb25zdW1lZC5sZW5ndGggKTtcblxuICAgICAgICAgIGJyZWFrOyAvLyB3ZSd2ZSBjb25zdW1lZCBvbmUgZXhwciwgc28gd2UgY2FuIHJldHVybiBub3dcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBleHByOiBleHByLFxuICAgICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICAgIG5hbWU6IG5hbWVcbiAgICAgIH07XG4gICAgfTtcblxuICAgIC8vIGNvbnN1bWUgYWxsIGxlYWRpbmcgd2hpdGVzcGFjZVxuICAgIHZhciBjb25zdW1lV2hpdGVzcGFjZSA9IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgbWF0Y2ggPSByZW1haW5pbmcubWF0Y2goIC9eXFxzKy8gKTtcblxuICAgICAgaWYoIG1hdGNoICl7XG4gICAgICAgIHZhciBjb25zdW1lZCA9IG1hdGNoWzBdO1xuICAgICAgICByZW1haW5pbmcgPSByZW1haW5pbmcuc3Vic3RyaW5nKCBjb25zdW1lZC5sZW5ndGggKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZlswXSA9IG5ld1F1ZXJ5KCk7IC8vIGdldCBzdGFydGVkXG5cbiAgICBjb25zdW1lV2hpdGVzcGFjZSgpOyAvLyBnZXQgcmlkIG9mIGxlYWRpbmcgd2hpdGVzcGFjZVxuICAgIGZvciggOzsgKXtcbiAgICAgIHZhciBjaGVjayA9IGNvbnN1bWVFeHByKCk7XG5cbiAgICAgIGlmKCBjaGVjay5leHByID09IG51bGwgKXtcbiAgICAgICAgdXRpbC5lcnJvciggJ1RoZSBzZWxlY3RvciBgJyArIHNlbGVjdG9yICsgJ2BpcyBpbnZhbGlkJyApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IoIHZhciBqID0gMTsgaiA8IGNoZWNrLm1hdGNoLmxlbmd0aDsgaisrICl7XG4gICAgICAgICAgYXJncy5wdXNoKCBjaGVjay5tYXRjaFsgaiBdICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsZXQgdGhlIHRva2VuIHBvcHVsYXRlIHRoZSBzZWxlY3RvciBvYmplY3QgKGkuZS4gaW4gc2VsZltpXSlcbiAgICAgICAgdmFyIHJldCA9IGNoZWNrLmV4cHIucG9wdWxhdGUuYXBwbHkoIHNlbGZbIGkgXSwgYXJncyApO1xuXG4gICAgICAgIGlmKCByZXQgPT09IGZhbHNlICl7IHJldHVybjsgfSAvLyBleGl0IGlmIHBvcHVsYXRpb24gZmFpbGVkXG4gICAgICB9XG5cbiAgICAgIC8vIHdlJ3JlIGRvbmUgd2hlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byBwYXJzZVxuICAgICAgaWYoIHJlbWFpbmluZy5tYXRjaCggL15cXHMqJC8gKSApe1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmLmxlbmd0aCA9IGkgKyAxO1xuXG4gICAgLy8gYWRqdXN0IHJlZmVyZW5jZXMgZm9yIHN1YmplY3RcbiAgICBmb3IoIHZhciBqID0gMDsgaiA8IHNlbGYubGVuZ3RoOyBqKysgKXtcbiAgICAgIHZhciBxdWVyeSA9IHNlbGZbIGogXTtcblxuICAgICAgaWYoIHF1ZXJ5LnN1YmplY3QgIT0gbnVsbCApe1xuICAgICAgICAvLyBnbyB1cCB0aGUgdHJlZSB1bnRpbCB3ZSByZWFjaCB0aGUgc3ViamVjdFxuICAgICAgICBmb3IoIDs7ICl7XG4gICAgICAgICAgaWYoIHF1ZXJ5LnN1YmplY3QgPT0gcXVlcnkgKXsgYnJlYWs7IH0gLy8gZG9uZSBpZiBzdWJqZWN0IGlzIHNlbGZcblxuICAgICAgICAgIGlmKCBxdWVyeS5wYXJlbnQgIT0gbnVsbCApeyAvLyBzd2FwIHBhcmVudC9jaGlsZCByZWZlcmVuY2VcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBxdWVyeS5wYXJlbnQ7XG4gICAgICAgICAgICB2YXIgY2hpbGQgPSBxdWVyeTtcblxuICAgICAgICAgICAgY2hpbGQucGFyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHBhcmVudC5jaGlsZCA9IGNoaWxkO1xuXG4gICAgICAgICAgICBxdWVyeSA9IHBhcmVudDsgLy8gZ28gdXAgdGhlIHRyZWVcbiAgICAgICAgICB9IGVsc2UgaWYoIHF1ZXJ5LmFuY2VzdG9yICE9IG51bGwgKXsgLy8gc3dhcCBhbmNlc3Rvci9kZXNjZW5kYW50XG4gICAgICAgICAgICB2YXIgYW5jZXN0b3IgPSBxdWVyeS5hbmNlc3RvcjtcbiAgICAgICAgICAgIHZhciBkZXNjZW5kYW50ID0gcXVlcnk7XG5cbiAgICAgICAgICAgIGRlc2NlbmRhbnQuYW5jZXN0b3IgPSBudWxsO1xuICAgICAgICAgICAgYW5jZXN0b3IuZGVzY2VuZGFudCA9IGRlc2NlbmRhbnQ7XG5cbiAgICAgICAgICAgIHF1ZXJ5ID0gYW5jZXN0b3I7IC8vIGdvIHVwIHRoZSB0cmVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHV0aWwuZXJyb3IoICdXaGVuIGFkanVzdGluZyByZWZlcmVuY2VzIGZvciB0aGUgc2VsZWN0b3IgYCcgKyBxdWVyeSArICdgLCBuZWl0aGVyIHBhcmVudCBub3IgYW5jZXN0b3Igd2FzIGZvdW5kJyApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGZvclxuXG4gICAgICAgIHNlbGZbIGogXSA9IHF1ZXJ5LnN1YmplY3Q7IC8vIHN1YmplY3Qgc2hvdWxkIGJlIHRoZSByb290IHF1ZXJ5XG4gICAgICB9IC8vIGlmXG4gICAgfSAvLyBmb3JcblxuICB9IGVsc2Uge1xuICAgIHV0aWwuZXJyb3IoICdBIHNlbGVjdG9yIG11c3QgYmUgY3JlYXRlZCBmcm9tIGEgc3RyaW5nOyBmb3VuZCAnICsgc2VsZWN0b3IgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBzZWxmLl9wcml2YXRlLmludmFsaWQgPSBmYWxzZTtcblxufTtcblxudmFyIHNlbGZuID0gU2VsZWN0b3IucHJvdG90eXBlO1xuXG5zZWxmbi5zaXplID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMubGVuZ3RoO1xufTtcblxuc2VsZm4uZXEgPSBmdW5jdGlvbiggaSApe1xuICByZXR1cm4gdGhpc1sgaSBdO1xufTtcblxudmFyIHF1ZXJ5TWF0Y2hlcyA9IGZ1bmN0aW9uKCBxdWVyeSwgZWxlICl7XG4gIHZhciBlbGVfcCA9IGVsZS5fcHJpdmF0ZTtcblxuICAvLyBtYWtlIHNpbmdsZSBncm91cC1vbmx5IHNlbGVjdG9ycyByZWFsbHkgY2hlYXAgdG8gY2hlY2sgc2luY2UgdGhleSdyZSB0aGUgbW9zdCBjb21tb24gb25lc1xuICBpZiggcXVlcnkuZ3JvdXBPbmx5ICl7XG4gICAgcmV0dXJuIHF1ZXJ5Lmdyb3VwID09PSAnKicgfHwgcXVlcnkuZ3JvdXAgPT09IGVsZV9wLmdyb3VwO1xuICB9XG5cbiAgLy8gY2hlY2sgZ3JvdXBcbiAgaWYoIHF1ZXJ5Lmdyb3VwICE9IG51bGwgJiYgcXVlcnkuZ3JvdXAgIT0gJyonICYmIHF1ZXJ5Lmdyb3VwICE9IGVsZV9wLmdyb3VwICl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGN5ID0gZWxlLmN5KCk7XG5cbiAgLy8gY2hlY2sgY29sb24gc2VsZWN0b3JzXG4gIHZhciBhbGxDb2xvblNlbGVjdG9yc01hdGNoID0gdHJ1ZTtcbiAgZm9yKCB2YXIgayA9IDA7IGsgPCBxdWVyeS5jb2xvblNlbGVjdG9ycy5sZW5ndGg7IGsrKyApe1xuICAgIHZhciBzZWwgPSBxdWVyeS5jb2xvblNlbGVjdG9yc1sgayBdO1xuXG4gICAgc3dpdGNoKCBzZWwgKXtcbiAgICAgIGNhc2UgJzpzZWxlY3RlZCc6XG4gICAgICAgIGFsbENvbG9uU2VsZWN0b3JzTWF0Y2ggPSBlbGUuc2VsZWN0ZWQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc6dW5zZWxlY3RlZCc6XG4gICAgICAgIGFsbENvbG9uU2VsZWN0b3JzTWF0Y2ggPSAhZWxlLnNlbGVjdGVkKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnOnNlbGVjdGFibGUnOlxuICAgICAgICBhbGxDb2xvblNlbGVjdG9yc01hdGNoID0gZWxlLnNlbGVjdGFibGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc6dW5zZWxlY3RhYmxlJzpcbiAgICAgICAgYWxsQ29sb25TZWxlY3RvcnNNYXRjaCA9ICFlbGUuc2VsZWN0YWJsZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzpsb2NrZWQnOlxuICAgICAgICBhbGxDb2xvblNlbGVjdG9yc01hdGNoID0gZWxlLmxvY2tlZCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzp1bmxvY2tlZCc6XG4gICAgICAgIGFsbENvbG9uU2VsZWN0b3JzTWF0Y2ggPSAhZWxlLmxvY2tlZCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzp2aXNpYmxlJzpcbiAgICAgICAgYWxsQ29sb25TZWxlY3RvcnNNYXRjaCA9IGVsZS52aXNpYmxlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnOmhpZGRlbic6XG4gICAgICAgIGFsbENvbG9uU2VsZWN0b3JzTWF0Y2ggPSAhZWxlLnZpc2libGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc6dHJhbnNwYXJlbnQnOlxuICAgICAgICBhbGxDb2xvblNlbGVjdG9yc01hdGNoID0gZWxlLnRyYW5zcGFyZW50KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnOmdyYWJiZWQnOlxuICAgICAgICBhbGxDb2xvblNlbGVjdG9yc01hdGNoID0gZWxlLmdyYWJiZWQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc6ZnJlZSc6XG4gICAgICAgIGFsbENvbG9uU2VsZWN0b3JzTWF0Y2ggPSAhZWxlLmdyYWJiZWQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc6cmVtb3ZlZCc6XG4gICAgICAgIGFsbENvbG9uU2VsZWN0b3JzTWF0Y2ggPSBlbGUucmVtb3ZlZCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzppbnNpZGUnOlxuICAgICAgICBhbGxDb2xvblNlbGVjdG9yc01hdGNoID0gIWVsZS5yZW1vdmVkKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnOmdyYWJiYWJsZSc6XG4gICAgICAgIGFsbENvbG9uU2VsZWN0b3JzTWF0Y2ggPSBlbGUuZ3JhYmJhYmxlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnOnVuZ3JhYmJhYmxlJzpcbiAgICAgICAgYWxsQ29sb25TZWxlY3RvcnNNYXRjaCA9ICFlbGUuZ3JhYmJhYmxlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnOmFuaW1hdGVkJzpcbiAgICAgICAgYWxsQ29sb25TZWxlY3RvcnNNYXRjaCA9IGVsZS5hbmltYXRlZCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzp1bmFuaW1hdGVkJzpcbiAgICAgICAgYWxsQ29sb25TZWxlY3RvcnNNYXRjaCA9ICFlbGUuYW5pbWF0ZWQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc6cGFyZW50JzpcbiAgICAgICAgYWxsQ29sb25TZWxlY3RvcnNNYXRjaCA9IGVsZS5pc05vZGUoKSAmJiBlbGUuY2hpbGRyZW4oKS5ub25lbXB0eSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzpjaGlsZCc6XG4gICAgICBjYXNlICc6bm9ub3JwaGFuJzpcbiAgICAgICAgYWxsQ29sb25TZWxlY3RvcnNNYXRjaCA9IGVsZS5pc05vZGUoKSAmJiBlbGUucGFyZW50KCkubm9uZW1wdHkoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc6b3JwaGFuJzpcbiAgICAgICAgYWxsQ29sb25TZWxlY3RvcnNNYXRjaCA9IGVsZS5pc05vZGUoKSAmJiBlbGUucGFyZW50KCkuZW1wdHkoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc6bG9vcCc6XG4gICAgICAgIGFsbENvbG9uU2VsZWN0b3JzTWF0Y2ggPSBlbGUuaXNFZGdlKCkgJiYgZWxlLmRhdGEoICdzb3VyY2UnICkgPT09IGVsZS5kYXRhKCAndGFyZ2V0JyApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzpzaW1wbGUnOlxuICAgICAgICBhbGxDb2xvblNlbGVjdG9yc01hdGNoID0gZWxlLmlzRWRnZSgpICYmIGVsZS5kYXRhKCAnc291cmNlJyApICE9PSBlbGUuZGF0YSggJ3RhcmdldCcgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc6YWN0aXZlJzpcbiAgICAgICAgYWxsQ29sb25TZWxlY3RvcnNNYXRjaCA9IGVsZS5hY3RpdmUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc6aW5hY3RpdmUnOlxuICAgICAgICBhbGxDb2xvblNlbGVjdG9yc01hdGNoID0gIWVsZS5hY3RpdmUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc6dG91Y2gnOlxuICAgICAgICBhbGxDb2xvblNlbGVjdG9yc01hdGNoID0gaXMudG91Y2goKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc6YmFja2dyb3VuZGluZyc6XG4gICAgICAgIGFsbENvbG9uU2VsZWN0b3JzTWF0Y2ggPSBlbGUuYmFja2dyb3VuZGluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzpub25iYWNrZ3JvdW5kaW5nJzpcbiAgICAgICAgYWxsQ29sb25TZWxlY3RvcnNNYXRjaCA9ICFlbGUuYmFja2dyb3VuZGluZygpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiggIWFsbENvbG9uU2VsZWN0b3JzTWF0Y2ggKSBicmVhaztcbiAgfVxuICBpZiggIWFsbENvbG9uU2VsZWN0b3JzTWF0Y2ggKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gY2hlY2sgaWRcbiAgdmFyIGFsbElkc01hdGNoID0gdHJ1ZTtcbiAgZm9yKCB2YXIgayA9IDA7IGsgPCBxdWVyeS5pZHMubGVuZ3RoOyBrKysgKXtcbiAgICB2YXIgaWQgPSBxdWVyeS5pZHNbIGsgXTtcbiAgICB2YXIgYWN0dWFsSWQgPSBlbGVfcC5kYXRhLmlkO1xuXG4gICAgYWxsSWRzTWF0Y2ggPSBhbGxJZHNNYXRjaCAmJiAoaWQgPT0gYWN0dWFsSWQpO1xuXG4gICAgaWYoICFhbGxJZHNNYXRjaCApIGJyZWFrO1xuICB9XG4gIGlmKCAhYWxsSWRzTWF0Y2ggKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gY2hlY2sgY2xhc3Nlc1xuICB2YXIgYWxsQ2xhc3Nlc01hdGNoID0gdHJ1ZTtcbiAgZm9yKCB2YXIgayA9IDA7IGsgPCBxdWVyeS5jbGFzc2VzLmxlbmd0aDsgaysrICl7XG4gICAgdmFyIGNscyA9IHF1ZXJ5LmNsYXNzZXNbIGsgXTtcblxuICAgIGFsbENsYXNzZXNNYXRjaCA9IGFsbENsYXNzZXNNYXRjaCAmJiBlbGUuaGFzQ2xhc3MoIGNscyApO1xuXG4gICAgaWYoICFhbGxDbGFzc2VzTWF0Y2ggKSBicmVhaztcbiAgfVxuICBpZiggIWFsbENsYXNzZXNNYXRjaCApIHJldHVybiBmYWxzZTtcblxuICAvLyBnZW5lcmljIGNoZWNraW5nIGZvciBkYXRhL21ldGFkYXRhXG4gIHZhciBvcGVyYW5kc01hdGNoID0gZnVuY3Rpb24oIHBhcmFtcyApe1xuICAgIHZhciBhbGxEYXRhTWF0Y2hlcyA9IHRydWU7XG4gICAgZm9yKCB2YXIgayA9IDA7IGsgPCBxdWVyeVsgcGFyYW1zLm5hbWUgXS5sZW5ndGg7IGsrKyApe1xuICAgICAgdmFyIGRhdGEgPSBxdWVyeVsgcGFyYW1zLm5hbWUgXVsgayBdO1xuICAgICAgdmFyIG9wZXJhdG9yID0gZGF0YS5vcGVyYXRvcjtcbiAgICAgIHZhciB2YWx1ZSA9IGRhdGEudmFsdWU7XG4gICAgICB2YXIgZmllbGQgPSBkYXRhLmZpZWxkO1xuICAgICAgdmFyIG1hdGNoZXM7XG5cbiAgICAgIGlmKCBvcGVyYXRvciAhPSBudWxsICYmIHZhbHVlICE9IG51bGwgKXtcblxuICAgICAgICB2YXIgZmllbGRWYWwgPSBwYXJhbXMuZmllbGRWYWx1ZSggZmllbGQgKTtcbiAgICAgICAgdmFyIGZpZWxkU3RyID0gIWlzLnN0cmluZyggZmllbGRWYWwgKSAmJiAhaXMubnVtYmVyKCBmaWVsZFZhbCApID8gJycgOiAnJyArIGZpZWxkVmFsO1xuICAgICAgICB2YXIgdmFsU3RyID0gJycgKyB2YWx1ZTtcblxuICAgICAgICB2YXIgY2FzZUluc2Vuc2l0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmKCBvcGVyYXRvci5pbmRleE9mKCAnQCcgKSA+PSAwICl7XG4gICAgICAgICAgZmllbGRTdHIgPSBmaWVsZFN0ci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIHZhbFN0ciA9IHZhbFN0ci50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgb3BlcmF0b3IgPSBvcGVyYXRvci5yZXBsYWNlKCAnQCcsICcnICk7XG4gICAgICAgICAgY2FzZUluc2Vuc2l0aXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBub3RFeHByID0gZmFsc2U7XG4gICAgICAgIGlmKCBvcGVyYXRvci5pbmRleE9mKCAnIScgKSA+PSAwICl7XG4gICAgICAgICAgb3BlcmF0b3IgPSBvcGVyYXRvci5yZXBsYWNlKCAnIScsICcnICk7XG4gICAgICAgICAgbm90RXhwciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB3ZSdyZSBkb2luZyBhIGNhc2UgaW5zZW5zaXRpdmUgY29tcGFyaXNvbiwgdGhlbiB3ZSdyZSB1c2luZyBhIFNUUklORyBjb21wYXJpc29uXG4gICAgICAgIC8vIGV2ZW4gaWYgd2UncmUgY29tcGFyaW5nIG51bWJlcnNcbiAgICAgICAgaWYoIGNhc2VJbnNlbnNpdGl2ZSApe1xuICAgICAgICAgIHZhbHVlID0gdmFsU3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgZmllbGRWYWwgPSBmaWVsZFN0ci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzSW5lcUNtcCA9IGZhbHNlO1xuXG4gICAgICAgIHN3aXRjaCggb3BlcmF0b3IgKXtcbiAgICAgICAgY2FzZSAnKj0nOlxuICAgICAgICAgIG1hdGNoZXMgPSBmaWVsZFN0ci5pbmRleE9mKCB2YWxTdHIgKSA+PSAwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICckPSc6XG4gICAgICAgICAgbWF0Y2hlcyA9IGZpZWxkU3RyLmluZGV4T2YoIHZhbFN0ciwgZmllbGRTdHIubGVuZ3RoIC0gdmFsU3RyLmxlbmd0aCApID49IDA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ149JzpcbiAgICAgICAgICBtYXRjaGVzID0gZmllbGRTdHIuaW5kZXhPZiggdmFsU3RyICkgPT09IDA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJz0nOlxuICAgICAgICAgIG1hdGNoZXMgPSBmaWVsZFZhbCA9PT0gdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgIGlzSW5lcUNtcCA9IHRydWU7XG4gICAgICAgICAgbWF0Y2hlcyA9IGZpZWxkVmFsID4gdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJz49JzpcbiAgICAgICAgICBpc0luZXFDbXAgPSB0cnVlO1xuICAgICAgICAgIG1hdGNoZXMgPSBmaWVsZFZhbCA+PSB2YWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgaXNJbmVxQ21wID0gdHJ1ZTtcbiAgICAgICAgICBtYXRjaGVzID0gZmllbGRWYWwgPCB2YWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnPD0nOlxuICAgICAgICAgIGlzSW5lcUNtcCA9IHRydWU7XG4gICAgICAgICAgbWF0Y2hlcyA9IGZpZWxkVmFsIDw9IHZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIG1hdGNoZXMgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFwcGx5IHRoZSBub3Qgb3AsIGJ1dCBudWxsIHZhbHMgZm9yIGluZXF1YWxpdGllcyBzaG91bGQgYWx3YXlzIHN0YXkgbm9uLW1hdGNoaW5nXG4gICAgICAgIGlmKCBub3RFeHByICYmICggZmllbGRWYWwgIT0gbnVsbCB8fCAhaXNJbmVxQ21wICkgKXtcbiAgICAgICAgICBtYXRjaGVzID0gIW1hdGNoZXM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiggb3BlcmF0b3IgIT0gbnVsbCApe1xuICAgICAgICBzd2l0Y2goIG9wZXJhdG9yICl7XG4gICAgICAgIGNhc2UgJz8nOlxuICAgICAgICAgIG1hdGNoZXMgPSBwYXJhbXMuZmllbGRUcnV0aHkoIGZpZWxkICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJyEnOlxuICAgICAgICAgIG1hdGNoZXMgPSAhcGFyYW1zLmZpZWxkVHJ1dGh5KCBmaWVsZCApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdeJzpcbiAgICAgICAgICBtYXRjaGVzID0gcGFyYW1zLmZpZWxkVW5kZWZpbmVkKCBmaWVsZCApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXRjaGVzID0gIXBhcmFtcy5maWVsZFVuZGVmaW5lZCggZmllbGQgKTtcbiAgICAgIH1cblxuICAgICAgaWYoICFtYXRjaGVzICl7XG4gICAgICAgIGFsbERhdGFNYXRjaGVzID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gLy8gZm9yXG5cbiAgICByZXR1cm4gYWxsRGF0YU1hdGNoZXM7XG4gIH07IC8vIG9wZXJhbmRzTWF0Y2hcblxuICAvLyBjaGVjayBkYXRhIG1hdGNoZXNcbiAgdmFyIGFsbERhdGFNYXRjaGVzID0gb3BlcmFuZHNNYXRjaCgge1xuICAgIG5hbWU6ICdkYXRhJyxcbiAgICBmaWVsZFZhbHVlOiBmdW5jdGlvbiggZmllbGQgKXtcbiAgICAgIHJldHVybiBlbGVfcC5kYXRhWyBmaWVsZCBdO1xuICAgIH0sXG4gICAgZmllbGRVbmRlZmluZWQ6IGZ1bmN0aW9uKCBmaWVsZCApe1xuICAgICAgcmV0dXJuIGVsZV9wLmRhdGFbIGZpZWxkIF0gPT09IHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIGZpZWxkVHJ1dGh5OiBmdW5jdGlvbiggZmllbGQgKXtcbiAgICAgIGlmKCBlbGVfcC5kYXRhWyBmaWVsZCBdICl7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSApO1xuXG4gIGlmKCAhYWxsRGF0YU1hdGNoZXMgKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBjaGVjayBtZXRhZGF0YSBtYXRjaGVzXG4gIHZhciBhbGxNZXRhTWF0Y2hlcyA9IG9wZXJhbmRzTWF0Y2goIHtcbiAgICBuYW1lOiAnbWV0YScsXG4gICAgZmllbGRWYWx1ZTogZnVuY3Rpb24oIGZpZWxkICl7XG4gICAgICByZXR1cm4gZWxlWyBmaWVsZCBdKCk7XG4gICAgfSxcbiAgICBmaWVsZFVuZGVmaW5lZDogZnVuY3Rpb24oIGZpZWxkICl7XG4gICAgICByZXR1cm4gZWxlWyBmaWVsZCBdKCkgPT0gbnVsbDtcbiAgICB9LFxuICAgIGZpZWxkVHJ1dGh5OiBmdW5jdGlvbiggZmllbGQgKXtcbiAgICAgIGlmKCBlbGVbIGZpZWxkIF0oKSApe1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gKTtcblxuICBpZiggIWFsbE1ldGFNYXRjaGVzICl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gY2hlY2sgY29sbGVjdGlvblxuICBpZiggcXVlcnkuY29sbGVjdGlvbiAhPSBudWxsICl7XG4gICAgdmFyIG1hdGNoZXNBbnkgPSBxdWVyeS5jb2xsZWN0aW9uLmhhc0VsZW1lbnRXaXRoSWQoIGVsZS5pZCgpICk7XG5cbiAgICBpZiggIW1hdGNoZXNBbnkgKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBjaGVjayBmaWx0ZXIgZnVuY3Rpb25cbiAgaWYoIHF1ZXJ5LmZpbHRlciAhPSBudWxsICYmIGVsZS5jb2xsZWN0aW9uKCkuZmlsdGVyKCBxdWVyeS5maWx0ZXIgKS5zaXplKCkgPT09IDAgKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBjaGVjayBwYXJlbnQvY2hpbGQgcmVsYXRpb25zXG4gIHZhciBjb25maXJtUmVsYXRpb25zID0gZnVuY3Rpb24oIHF1ZXJ5LCBlbGVzICl7XG4gICAgaWYoIHF1ZXJ5ICE9IG51bGwgKXtcbiAgICAgIHZhciBtYXRjaGVzID0gZmFsc2U7XG5cbiAgICAgIGlmKCAhY3kuaGFzQ29tcG91bmROb2RlcygpICl7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZWxlcyA9IGVsZXMoKTsgLy8gc2F2ZSBjeWNsZXMgaWYgcXVlcnkgPT0gbnVsbFxuXG4gICAgICAvLyBxdWVyeSBtdXN0IG1hdGNoIGZvciBhdCBsZWFzdCBvbmUgZWxlbWVudCAobWF5IGJlIHJlY3Vyc2l2ZSlcbiAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZWxlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgICBpZiggcXVlcnlNYXRjaGVzKCBxdWVyeSwgZWxlc1sgaSBdICkgKXtcbiAgICAgICAgICBtYXRjaGVzID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuXG4gIGlmKCAhY29uZmlybVJlbGF0aW9ucyggcXVlcnkucGFyZW50LCBmdW5jdGlvbigpe1xuICAgIHJldHVybiBlbGUucGFyZW50KCk7XG4gIH0gKSApeyByZXR1cm4gZmFsc2U7IH1cblxuICBpZiggIWNvbmZpcm1SZWxhdGlvbnMoIHF1ZXJ5LmFuY2VzdG9yLCBmdW5jdGlvbigpe1xuICAgIHJldHVybiBlbGUucGFyZW50cygpO1xuICB9ICkgKXsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYoICFjb25maXJtUmVsYXRpb25zKCBxdWVyeS5jaGlsZCwgZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZWxlLmNoaWxkcmVuKCk7XG4gIH0gKSApeyByZXR1cm4gZmFsc2U7IH1cblxuICBpZiggIWNvbmZpcm1SZWxhdGlvbnMoIHF1ZXJ5LmRlc2NlbmRhbnQsIGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGVsZS5kZXNjZW5kYW50cygpO1xuICB9ICkgKXsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgLy8gd2UndmUgcmVhY2hlZCB0aGUgZW5kLCBzbyB3ZSd2ZSBtYXRjaGVkIGV2ZXJ5dGhpbmcgZm9yIHRoaXMgcXVlcnlcbiAgcmV0dXJuIHRydWU7XG59OyAvLyBxdWVyeU1hdGNoZXNcblxuLy8gZmlsdGVyIGFuIGV4aXN0aW5nIGNvbGxlY3Rpb25cbnNlbGZuLmZpbHRlciA9IGZ1bmN0aW9uKCBjb2xsZWN0aW9uICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGN5ID0gY29sbGVjdGlvbi5jeSgpO1xuXG4gIC8vIGRvbid0IGJvdGhlciB0cnlpbmcgaWYgaXQncyBpbnZhbGlkXG4gIGlmKCBzZWxmLl9wcml2YXRlLmludmFsaWQgKXtcbiAgICByZXR1cm4gY3kuY29sbGVjdGlvbigpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiggaSwgZWxlbWVudCApe1xuICAgIGZvciggdmFyIGogPSAwOyBqIDwgc2VsZi5sZW5ndGg7IGorKyApe1xuICAgICAgdmFyIHF1ZXJ5ID0gc2VsZlsgaiBdO1xuXG4gICAgICBpZiggcXVlcnlNYXRjaGVzKCBxdWVyeSwgZWxlbWVudCApICl7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBpZiggc2VsZi5fcHJpdmF0ZS5zZWxlY3RvclRleHQgPT0gbnVsbCApe1xuICAgIHNlbGVjdG9yRnVuY3Rpb24gPSBmdW5jdGlvbigpeyByZXR1cm4gdHJ1ZTsgfTtcbiAgfVxuXG4gIHZhciBmaWx0ZXJlZENvbGxlY3Rpb24gPSBjb2xsZWN0aW9uLmZpbHRlciggc2VsZWN0b3JGdW5jdGlvbiApO1xuXG4gIHJldHVybiBmaWx0ZXJlZENvbGxlY3Rpb247XG59OyAvLyBmaWx0ZXJcblxuLy8gZG9lcyBzZWxlY3RvciBtYXRjaCBhIHNpbmdsZSBlbGVtZW50P1xuc2VsZm4ubWF0Y2hlcyA9IGZ1bmN0aW9uKCBlbGUgKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIGRvbid0IGJvdGhlciB0cnlpbmcgaWYgaXQncyBpbnZhbGlkXG4gIGlmKCBzZWxmLl9wcml2YXRlLmludmFsaWQgKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IoIHZhciBqID0gMDsgaiA8IHNlbGYubGVuZ3RoOyBqKysgKXtcbiAgICB2YXIgcXVlcnkgPSBzZWxmWyBqIF07XG5cbiAgICBpZiggcXVlcnlNYXRjaGVzKCBxdWVyeSwgZWxlICkgKXtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07IC8vIGZpbHRlclxuXG4vLyBpdGggcXVlcnkgdG8gc3RyaW5nXG5zZWxmbi50b1N0cmluZyA9IHNlbGZuLnNlbGVjdG9yID0gZnVuY3Rpb24oKXtcblxuICB2YXIgc3RyID0gJyc7XG5cbiAgdmFyIGNsZWFuID0gZnVuY3Rpb24oIG9iaiApe1xuICAgIGlmKCBvYmogPT0gbnVsbCApe1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY2xlYW5WYWwgPSBmdW5jdGlvbiggdmFsICl7XG4gICAgaWYoIGlzLnN0cmluZyggdmFsICkgKXtcbiAgICAgIHJldHVybiAnXCInICsgdmFsICsgJ1wiJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNsZWFuKCB2YWwgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNwYWNlID0gZnVuY3Rpb24oIHZhbCApe1xuICAgIHJldHVybiAnICcgKyB2YWwgKyAnICc7XG4gIH07XG5cbiAgdmFyIHF1ZXJ5VG9TdHJpbmcgPSBmdW5jdGlvbiggcXVlcnkgKXtcbiAgICB2YXIgc3RyID0gJyc7XG5cbiAgICBpZiggcXVlcnkuc3ViamVjdCA9PT0gcXVlcnkgKXtcbiAgICAgIHN0ciArPSAnJCc7XG4gICAgfVxuXG4gICAgdmFyIGdyb3VwID0gY2xlYW4oIHF1ZXJ5Lmdyb3VwICk7XG4gICAgc3RyICs9IGdyb3VwLnN1YnN0cmluZyggMCwgZ3JvdXAubGVuZ3RoIC0gMSApO1xuXG4gICAgZm9yKCB2YXIgaiA9IDA7IGogPCBxdWVyeS5kYXRhLmxlbmd0aDsgaisrICl7XG4gICAgICB2YXIgZGF0YSA9IHF1ZXJ5LmRhdGFbIGogXTtcblxuICAgICAgaWYoIGRhdGEudmFsdWUgKXtcbiAgICAgICAgc3RyICs9ICdbJyArIGRhdGEuZmllbGQgKyBzcGFjZSggY2xlYW4oIGRhdGEub3BlcmF0b3IgKSApICsgY2xlYW5WYWwoIGRhdGEudmFsdWUgKSArICddJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciArPSAnWycgKyBjbGVhbiggZGF0YS5vcGVyYXRvciApICsgZGF0YS5maWVsZCArICddJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IoIHZhciBqID0gMDsgaiA8IHF1ZXJ5Lm1ldGEubGVuZ3RoOyBqKysgKXtcbiAgICAgIHZhciBtZXRhID0gcXVlcnkubWV0YVsgaiBdO1xuICAgICAgc3RyICs9ICdbWycgKyBtZXRhLmZpZWxkICsgc3BhY2UoIGNsZWFuKCBtZXRhLm9wZXJhdG9yICkgKSArIGNsZWFuVmFsKCBtZXRhLnZhbHVlICkgKyAnXV0nO1xuICAgIH1cblxuICAgIGZvciggdmFyIGogPSAwOyBqIDwgcXVlcnkuY29sb25TZWxlY3RvcnMubGVuZ3RoOyBqKysgKXtcbiAgICAgIHZhciBzZWwgPSBxdWVyeS5jb2xvblNlbGVjdG9yc1sgaSBdO1xuICAgICAgc3RyICs9IHNlbDtcbiAgICB9XG5cbiAgICBmb3IoIHZhciBqID0gMDsgaiA8IHF1ZXJ5Lmlkcy5sZW5ndGg7IGorKyApe1xuICAgICAgdmFyIHNlbCA9ICcjJyArIHF1ZXJ5Lmlkc1sgaSBdO1xuICAgICAgc3RyICs9IHNlbDtcbiAgICB9XG5cbiAgICBmb3IoIHZhciBqID0gMDsgaiA8IHF1ZXJ5LmNsYXNzZXMubGVuZ3RoOyBqKysgKXtcbiAgICAgIHZhciBzZWwgPSAnLicgKyBxdWVyeS5jbGFzc2VzWyBqIF07XG4gICAgICBzdHIgKz0gc2VsO1xuICAgIH1cblxuICAgIGlmKCBxdWVyeS5wYXJlbnQgIT0gbnVsbCApe1xuICAgICAgc3RyID0gcXVlcnlUb1N0cmluZyggcXVlcnkucGFyZW50ICkgKyAnID4gJyArIHN0cjtcbiAgICB9XG5cbiAgICBpZiggcXVlcnkuYW5jZXN0b3IgIT0gbnVsbCApe1xuICAgICAgc3RyID0gcXVlcnlUb1N0cmluZyggcXVlcnkuYW5jZXN0b3IgKSArICcgJyArIHN0cjtcbiAgICB9XG5cbiAgICBpZiggcXVlcnkuY2hpbGQgIT0gbnVsbCApe1xuICAgICAgc3RyICs9ICcgPiAnICsgcXVlcnlUb1N0cmluZyggcXVlcnkuY2hpbGQgKTtcbiAgICB9XG5cbiAgICBpZiggcXVlcnkuZGVzY2VuZGFudCAhPSBudWxsICl7XG4gICAgICBzdHIgKz0gJyAnICsgcXVlcnlUb1N0cmluZyggcXVlcnkuZGVzY2VuZGFudCApO1xuICAgIH1cblxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIHF1ZXJ5ID0gdGhpc1sgaSBdO1xuXG4gICAgc3RyICs9IHF1ZXJ5VG9TdHJpbmcoIHF1ZXJ5ICk7XG5cbiAgICBpZiggdGhpcy5sZW5ndGggPiAxICYmIGkgPCB0aGlzLmxlbmd0aCAtIDEgKXtcbiAgICAgIHN0ciArPSAnLCAnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdG9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoICcuLi91dGlsJyApO1xudmFyIGlzID0gcmVxdWlyZSggJy4uL2lzJyApO1xuXG52YXIgc3R5Zm4gPSB7fTtcblxuLy8gKHBvdGVudGlhbGx5IGV4cGVuc2l2ZSBjYWxjdWxhdGlvbilcbi8vIGFwcGx5IHRoZSBzdHlsZSB0byB0aGUgZWxlbWVudCBiYXNlZCBvblxuLy8gLSBpdHMgYnlwYXNzXG4vLyAtIHdoYXQgc2VsZWN0b3JzIG1hdGNoIGl0XG5zdHlmbi5hcHBseSA9IGZ1bmN0aW9uKCBlbGVzICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIF9wID0gc2VsZi5fcHJpdmF0ZTtcblxuICBpZiggX3AubmV3U3R5bGUgKXsgLy8gY2xlYXIgc3R5bGUgY2FjaGVzXG4gICAgX3AuY29udGV4dFN0eWxlcyA9IHt9O1xuICAgIF9wLnByb3BEaWZmcyA9IHt9O1xuXG4gICAgc2VsZi5jbGVhbkVsZW1lbnRzKCBlbGVzLCB0cnVlICk7XG4gIH1cblxuICBmb3IoIHZhciBpZSA9IDA7IGllIDwgZWxlcy5sZW5ndGg7IGllKysgKXtcbiAgICB2YXIgZWxlID0gZWxlc1sgaWUgXTtcblxuICAgIHZhciBjeHRNZXRhID0gc2VsZi5nZXRDb250ZXh0TWV0YSggZWxlICk7XG4gICAgdmFyIGN4dFN0eWxlID0gc2VsZi5nZXRDb250ZXh0U3R5bGUoIGN4dE1ldGEgKTtcbiAgICB2YXIgYXBwID0gc2VsZi5hcHBseUNvbnRleHRTdHlsZSggY3h0TWV0YSwgY3h0U3R5bGUsIGVsZSApO1xuXG4gICAgc2VsZi51cGRhdGVUcmFuc2l0aW9ucyggZWxlLCBhcHAuZGlmZlByb3BzICk7XG4gICAgc2VsZi51cGRhdGVTdHlsZUhpbnRzKCBlbGUgKTtcblxuICB9IC8vIGZvciBlbGVtZW50c1xuXG4gIF9wLm5ld1N0eWxlID0gZmFsc2U7XG59O1xuXG5zdHlmbi5nZXRQcm9wZXJ0aWVzRGlmZiA9IGZ1bmN0aW9uKCBvbGRDeHRLZXksIG5ld0N4dEtleSApe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjYWNoZSA9IHNlbGYuX3ByaXZhdGUucHJvcERpZmZzID0gc2VsZi5fcHJpdmF0ZS5wcm9wRGlmZnMgfHwge307XG4gIHZhciBkdWFsQ3h0S2V5ID0gb2xkQ3h0S2V5ICsgJy0nICsgbmV3Q3h0S2V5O1xuICB2YXIgY2FjaGVkVmFsID0gY2FjaGVbIGR1YWxDeHRLZXkgXTtcblxuICBpZiggY2FjaGVkVmFsICl7XG4gICAgcmV0dXJuIGNhY2hlZFZhbDtcbiAgfVxuXG4gIHZhciBkaWZmUHJvcHMgPSBbXTtcbiAgdmFyIGFkZGVkUHJvcCA9IHt9O1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgc2VsZi5sZW5ndGg7IGkrKyApe1xuICAgIHZhciBjeHQgPSBzZWxmWyBpIF07XG4gICAgdmFyIG9sZEhhc0N4dCA9IG9sZEN4dEtleVsgaSBdID09PSAndCc7XG4gICAgdmFyIG5ld0hhc0N4dCA9IG5ld0N4dEtleVsgaSBdID09PSAndCc7XG4gICAgdmFyIGN4dEhhc0RpZmZlZCA9IG9sZEhhc0N4dCAhPT0gbmV3SGFzQ3h0O1xuICAgIHZhciBjeHRIYXNNYXBwZWRQcm9wcyA9IGN4dC5tYXBwZWRQcm9wZXJ0aWVzLmxlbmd0aCA+IDA7XG5cbiAgICBpZiggY3h0SGFzRGlmZmVkIHx8IGN4dEhhc01hcHBlZFByb3BzICl7XG4gICAgICB2YXIgcHJvcHM7XG5cbiAgICAgIGlmKCBjeHRIYXNEaWZmZWQgJiYgY3h0SGFzTWFwcGVkUHJvcHMgKXtcbiAgICAgICAgcHJvcHMgPSBjeHQucHJvcGVydGllczsgLy8gc3VmZmljZXMgYi9jIG1hcHBlZFByb3BlcnRpZXMgaXMgYSBzdWJzZXQgb2YgcHJvcGVydGllc1xuICAgICAgfSBlbHNlIGlmKCBjeHRIYXNEaWZmZWQgKXtcbiAgICAgICAgcHJvcHMgPSBjeHQucHJvcGVydGllczsgLy8gbmVlZCB0byBjaGVjayB0aGVtIGFsbFxuICAgICAgfSBlbHNlIGlmKCBjeHRIYXNNYXBwZWRQcm9wcyApe1xuICAgICAgICBwcm9wcyA9IGN4dC5tYXBwZWRQcm9wZXJ0aWVzOyAvLyBvbmx5IG5lZWQgdG8gY2hlY2sgbWFwcGVkXG4gICAgICB9XG5cbiAgICAgIGZvciggdmFyIGogPSAwOyBqIDwgcHJvcHMubGVuZ3RoOyBqKysgKXtcbiAgICAgICAgdmFyIHByb3AgPSBwcm9wc1sgaiBdO1xuICAgICAgICB2YXIgbmFtZSA9IHByb3AubmFtZTtcblxuICAgICAgICAvLyBpZiBhIGxhdGVyIGNvbnRleHQgb3ZlcnJpZGVzIHRoaXMgcHJvcGVydHksIHRoZW4gdGhlIGZhY3QgdGhhdCB0aGlzIGNvbnRleHQgaGFzIHN3aXRjaGVkL2RpZmZlZCBkb2Vzbid0IG1hdHRlclxuICAgICAgICAvLyAoc2VtaSBleHBlbnNpdmUgY2hlY2sgc2luY2UgaXQgbWFrZXMgdGhpcyBmdW5jdGlvbiBPKG5eMikgb24gY29udGV4dCBsZW5ndGgsIGJ1dCB3b3J0aCBpdCBzaW5jZSBvdmVyYWxsIHJlc3VsdFxuICAgICAgICAvLyBpcyBjYWNoZWQpXG4gICAgICAgIHZhciBsYXRlckN4dE92ZXJyaWRlcyA9IGZhbHNlO1xuICAgICAgICBmb3IoIHZhciBrID0gaSArIDE7IGsgPCBzZWxmLmxlbmd0aDsgaysrICl7XG4gICAgICAgICAgdmFyIGxhdGVyQ3h0ID0gc2VsZlsgayBdO1xuICAgICAgICAgIHZhciBoYXNMYXRlckN4dCA9IG5ld0N4dEtleVsgayBdID09PSAndCc7XG5cbiAgICAgICAgICBpZiggIWhhc0xhdGVyQ3h0ICl7IGNvbnRpbnVlOyB9IC8vIGNhbid0IG92ZXJyaWRlIHVubGVzcyB0aGUgY29udGV4dCBpcyBhY3RpdmVcblxuICAgICAgICAgIGxhdGVyQ3h0T3ZlcnJpZGVzID0gbGF0ZXJDeHQucHJvcGVydGllc1sgcHJvcC5uYW1lIF0gIT0gbnVsbDtcblxuICAgICAgICAgIGlmKCBsYXRlckN4dE92ZXJyaWRlcyApeyBicmVhazsgfSAvLyBleGl0IGVhcmx5IGFzIGxvbmcgYXMgb25lIGxhdGVyIGNvbnRleHQgb3ZlcnJpZGVzXG4gICAgICAgIH1cblxuICAgICAgICBpZiggIWFkZGVkUHJvcFsgbmFtZSBdICYmICFsYXRlckN4dE92ZXJyaWRlcyApe1xuICAgICAgICAgIGFkZGVkUHJvcFsgbmFtZSBdID0gdHJ1ZTtcbiAgICAgICAgICBkaWZmUHJvcHMucHVzaCggbmFtZSApO1xuICAgICAgICB9XG4gICAgICB9IC8vIGZvciBwcm9wc1xuICAgIH0gLy8gaWZcblxuICB9IC8vIGZvciBjb250ZXh0c1xuXG4gIGNhY2hlWyBkdWFsQ3h0S2V5IF0gPSBkaWZmUHJvcHM7XG4gIHJldHVybiBkaWZmUHJvcHM7XG59O1xuXG5zdHlmbi5nZXRDb250ZXh0TWV0YSA9IGZ1bmN0aW9uKCBlbGUgKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY3h0S2V5ID0gJyc7XG4gIHZhciBkaWZmUHJvcHM7XG4gIHZhciBwcmV2S2V5ID0gZWxlLl9wcml2YXRlLnN0eWxlQ3h0S2V5IHx8ICcnO1xuXG4gIGlmKCBzZWxmLl9wcml2YXRlLm5ld1N0eWxlICl7XG4gICAgcHJldktleSA9ICcnOyAvLyBzaW5jZSB3ZSBuZWVkIHRvIGFwcGx5IGFsbCBzdHlsZSBpZiBhIGZyZXNoIHN0eWxlc2hlZXRcbiAgfVxuXG4gIC8vIGdldCB0aGUgY3h0IGtleVxuICBmb3IoIHZhciBpID0gMDsgaSA8IHNlbGYubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgY29udGV4dCA9IHNlbGZbIGkgXTtcbiAgICB2YXIgY29udGV4dFNlbGVjdG9yTWF0Y2hlcyA9IGNvbnRleHQuc2VsZWN0b3IgJiYgY29udGV4dC5zZWxlY3Rvci5tYXRjaGVzKCBlbGUgKTsgLy8gTkI6IGNvbnRleHQuc2VsZWN0b3IgbWF5IGJlIG51bGwgZm9yICdjb3JlJ1xuXG4gICAgaWYoIGNvbnRleHRTZWxlY3Rvck1hdGNoZXMgKXtcbiAgICAgIGN4dEtleSArPSAndCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN4dEtleSArPSAnZic7XG4gICAgfVxuICB9IC8vIGZvciBjb250ZXh0XG5cbiAgZGlmZlByb3BzID0gc2VsZi5nZXRQcm9wZXJ0aWVzRGlmZiggcHJldktleSwgY3h0S2V5ICk7XG5cbiAgZWxlLl9wcml2YXRlLnN0eWxlQ3h0S2V5ID0gY3h0S2V5O1xuXG4gIHJldHVybiB7XG4gICAga2V5OiBjeHRLZXksXG4gICAgZGlmZlByb3BOYW1lczogZGlmZlByb3BzXG4gIH07XG59O1xuXG4vLyBnZXRzIGEgY29tcHV0ZWQgZWxlIHN0eWxlIG9iamVjdCBiYXNlZCBvbiBtYXRjaGVkIGNvbnRleHRzXG5zdHlmbi5nZXRDb250ZXh0U3R5bGUgPSBmdW5jdGlvbiggY3h0TWV0YSApe1xuICB2YXIgY3h0S2V5ID0gY3h0TWV0YS5rZXk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGN4dFN0eWxlcyA9IHRoaXMuX3ByaXZhdGUuY29udGV4dFN0eWxlcyA9IHRoaXMuX3ByaXZhdGUuY29udGV4dFN0eWxlcyB8fCB7fTtcblxuICAvLyBpZiBhbHJlYWR5IGNvbXB1dGVkIHN0eWxlLCByZXR1cm5lZCBjYWNoZWQgY29weVxuICBpZiggY3h0U3R5bGVzWyBjeHRLZXkgXSApeyByZXR1cm4gY3h0U3R5bGVzWyBjeHRLZXkgXTsgfVxuXG4gIHZhciBzdHlsZSA9IHtcbiAgICBfcHJpdmF0ZToge1xuICAgICAga2V5OiBjeHRLZXlcbiAgICB9XG4gIH07XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBzZWxmLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGN4dCA9IHNlbGZbIGkgXTtcbiAgICB2YXIgaGFzQ3h0ID0gY3h0S2V5WyBpIF0gPT09ICd0JztcblxuICAgIGlmKCAhaGFzQ3h0ICl7IGNvbnRpbnVlOyB9XG5cbiAgICBmb3IoIHZhciBqID0gMDsgaiA8IGN4dC5wcm9wZXJ0aWVzLmxlbmd0aDsgaisrICl7XG4gICAgICB2YXIgcHJvcCA9IGN4dC5wcm9wZXJ0aWVzWyBqIF07XG5cbiAgICAgIHN0eWxlWyBwcm9wLm5hbWUgXSA9IHByb3A7XG4gICAgfVxuICB9XG5cbiAgY3h0U3R5bGVzWyBjeHRLZXkgXSA9IHN0eWxlO1xuICByZXR1cm4gc3R5bGU7XG59O1xuXG5zdHlmbi5hcHBseUNvbnRleHRTdHlsZSA9IGZ1bmN0aW9uKCBjeHRNZXRhLCBjeHRTdHlsZSwgZWxlICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGRpZmZQcm9wcyA9IGN4dE1ldGEuZGlmZlByb3BOYW1lcztcbiAgdmFyIHJldERpZmZQcm9wcyA9IHt9O1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgZGlmZlByb3BzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGRpZmZQcm9wTmFtZSA9IGRpZmZQcm9wc1sgaSBdO1xuICAgIHZhciBjeHRQcm9wID0gY3h0U3R5bGVbIGRpZmZQcm9wTmFtZSBdO1xuICAgIHZhciBlbGVQcm9wID0gZWxlLnBzdHlsZSggZGlmZlByb3BOYW1lICk7XG5cbiAgICBpZiggIWN4dFByb3AgKXsgLy8gbm8gY29udGV4dCBwcm9wIG1lYW5zIGRlbGV0ZVxuICAgICAgaWYoICFlbGVQcm9wICl7XG4gICAgICAgIGNvbnRpbnVlOyAvLyBubyBleGlzdGluZyBwcm9wIG1lYW5zIG5vdGhpbmcgbmVlZHMgdG8gYmUgcmVtb3ZlZFxuICAgICAgICAvLyBuYiBhZmZlY3RzIGluaXRpYWwgYXBwbGljYXRpb24gb24gbWFwcGVkIHZhbHVlcyBsaWtlIGNvbnRyb2wtcG9pbnQtZGlzdGFuY2VzXG4gICAgICB9IGVsc2UgaWYoIGVsZVByb3AuYnlwYXNzICl7XG4gICAgICAgIGN4dFByb3AgPSB7IG5hbWU6IGRpZmZQcm9wTmFtZSwgZGVsZXRlQnlwYXNzZWQ6IHRydWUgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN4dFByb3AgPSB7IG5hbWU6IGRpZmZQcm9wTmFtZSwgZGVsZXRlOiB0cnVlIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2F2ZSBjeWNsZXMgd2hlbiB0aGUgY29udGV4dCBwcm9wIGRvZXNuJ3QgbmVlZCB0byBiZSBhcHBsaWVkXG4gICAgaWYoIGVsZVByb3AgPT09IGN4dFByb3AgKXsgY29udGludWU7IH1cblxuICAgIHZhciByZXREaWZmUHJvcCA9IHJldERpZmZQcm9wc1sgZGlmZlByb3BOYW1lIF0gPSB7XG4gICAgICBwcmV2OiBlbGVQcm9wXG4gICAgfTtcblxuICAgIHNlbGYuYXBwbHlQYXJzZWRQcm9wZXJ0eSggZWxlLCBjeHRQcm9wICk7XG5cbiAgICByZXREaWZmUHJvcC5uZXh0ID0gZWxlLnBzdHlsZSggZGlmZlByb3BOYW1lICk7XG5cbiAgICBpZiggcmV0RGlmZlByb3AubmV4dCAmJiByZXREaWZmUHJvcC5uZXh0LmJ5cGFzcyApe1xuICAgICAgcmV0RGlmZlByb3AubmV4dCA9IHJldERpZmZQcm9wLm5leHQuYnlwYXNzZWQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBkaWZmUHJvcHM6IHJldERpZmZQcm9wc1xuICB9O1xufTtcblxuc3R5Zm4udXBkYXRlU3R5bGVIaW50cyA9IGZ1bmN0aW9uKGVsZSl7XG4gIHZhciBfcCA9IGVsZS5fcHJpdmF0ZTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmKCBlbGUucmVtb3ZlZCgpICl7IHJldHVybjsgfVxuXG4gIC8vIHNldCB3aGV0aGVyIGhhcyBwaWUgb3Igbm90OyBmb3IgZ3JlYXRlciBlZmZpY2llbmN5XG4gIHZhciBoYXNQaWUgPSBmYWxzZTtcbiAgaWYoIF9wLmdyb3VwID09PSAnbm9kZXMnICl7XG4gICAgZm9yKCB2YXIgaSA9IDE7IGkgPD0gc2VsZi5waWVCYWNrZ3JvdW5kTjsgaSsrICl7IC8vIDEuLk5cbiAgICAgIHZhciBzaXplID0gZWxlLnBzdHlsZSggJ3BpZS0nICsgaSArICctYmFja2dyb3VuZC1zaXplJyApLnZhbHVlO1xuXG4gICAgICBpZiggc2l6ZSA+IDAgKXtcbiAgICAgICAgaGFzUGllID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3AuaGFzUGllID0gaGFzUGllO1xuXG4gIHZhciB0cmFuc2Zvcm0gPSBlbGUucHN0eWxlKCAndGV4dC10cmFuc2Zvcm0nICkuc3RyVmFsdWU7XG4gIHZhciBjb250ZW50ID0gZWxlLnBzdHlsZSggJ2xhYmVsJyApLnN0clZhbHVlO1xuICB2YXIgc3JjQ29udGVudCA9IGVsZS5wc3R5bGUoICdzb3VyY2UtbGFiZWwnICkuc3RyVmFsdWU7XG4gIHZhciB0Z3RDb250ZW50ID0gZWxlLnBzdHlsZSggJ3RhcmdldC1sYWJlbCcgKS5zdHJWYWx1ZTtcbiAgdmFyIGZTdHlsZSA9IGVsZS5wc3R5bGUoICdmb250LXN0eWxlJyApLnN0clZhbHVlO1xuICB2YXIgc2l6ZSA9IGVsZS5wc3R5bGUoICdmb250LXNpemUnICkucGZWYWx1ZSArICdweCc7XG4gIHZhciBmYW1pbHkgPSBlbGUucHN0eWxlKCAnZm9udC1mYW1pbHknICkuc3RyVmFsdWU7XG4gIC8vIHZhciB2YXJpYW50ID0gc3R5bGVbJ2ZvbnQtdmFyaWFudCddLnN0clZhbHVlO1xuICB2YXIgd2VpZ2h0ID0gZWxlLnBzdHlsZSggJ2ZvbnQtd2VpZ2h0JyApLnN0clZhbHVlO1xuICB2YXIgdmFsaWduID0gZWxlLnBzdHlsZSggJ3RleHQtdmFsaWduJyApLnN0clZhbHVlO1xuICB2YXIgaGFsaWduID0gZWxlLnBzdHlsZSggJ3RleHQtdmFsaWduJyApLnN0clZhbHVlO1xuICB2YXIgb1dpZHRoID0gZWxlLnBzdHlsZSggJ3RleHQtb3V0bGluZS13aWR0aCcgKS5wZlZhbHVlO1xuICB2YXIgd3JhcCA9IGVsZS5wc3R5bGUoICd0ZXh0LXdyYXAnICkuc3RyVmFsdWU7XG4gIHZhciB3cmFwVyA9IGVsZS5wc3R5bGUoICd0ZXh0LW1heC13aWR0aCcgKS5wZlZhbHVlO1xuICB2YXIgbGFiZWxTdHlsZUtleSA9IGZTdHlsZSArICckJyArIHNpemUgKyAnJCcgKyBmYW1pbHkgKyAnJCcgKyB3ZWlnaHQgKyAnJCcgKyB0cmFuc2Zvcm0gKyAnJCcgKyB2YWxpZ24gKyAnJCcgKyBoYWxpZ24gKyAnJCcgKyBvV2lkdGggKyAnJCcgKyB3cmFwICsgJyQnICsgd3JhcFc7XG4gIF9wLmxhYmVsU3R5bGVLZXkgPSBsYWJlbFN0eWxlS2V5O1xuICBfcC5zb3VyY2VMYWJlbEtleSA9IGxhYmVsU3R5bGVLZXkgKyAnJCcgKyBzcmNDb250ZW50O1xuICBfcC50YXJnZXRMYWJlbEtleSA9IGxhYmVsU3R5bGVLZXkgKyAnJCcgKyB0Z3RDb250ZW50O1xuICBfcC5sYWJlbEtleSA9IGxhYmVsU3R5bGVLZXkgKyAnJCcgKyBjb250ZW50O1xuICBfcC5mb250S2V5ID0gZlN0eWxlICsgJyQnICsgd2VpZ2h0ICsgJyQnICsgc2l6ZSArICckJyArIGZhbWlseTtcblxuICBfcC5zdHlsZUtleSA9IERhdGUubm93KCk7XG59O1xuXG4vLyBhcHBseSBhIHByb3BlcnR5IHRvIHRoZSBzdHlsZSAoZm9yIGludGVybmFsIHVzZSlcbi8vIHJldHVybnMgd2hldGhlciBhcHBsaWNhdGlvbiB3YXMgc3VjY2Vzc2Z1bFxuLy9cbi8vIG5vdywgdGhpcyBmdW5jdGlvbiBmbGF0dGVucyB0aGUgcHJvcGVydHksIGFuZCBoZXJlJ3MgaG93OlxuLy9cbi8vIGZvciBwYXJzZWRQcm9wOnsgYnlwYXNzOiB0cnVlLCBkZWxldGVCeXBhc3M6IHRydWUgfVxuLy8gbm8gcHJvcGVydHkgaXMgZ2VuZXJhdGVkLCBpbnN0ZWFkIHRoZSBieXBhc3MgcHJvcGVydHkgaW4gdGhlXG4vLyBlbGVtZW50J3Mgc3R5bGUgaXMgcmVwbGFjZWQgYnkgd2hhdCdzIHBvaW50ZWQgdG8gYnkgdGhlIGBieXBhc3NlZGBcbi8vIGZpZWxkIGluIHRoZSBieXBhc3MgcHJvcGVydHkgKGkuZS4gcmVzdG9yaW5nIHRoZSBwcm9wZXJ0eSB0aGVcbi8vIGJ5cGFzcyB3YXMgb3ZlcnJpZGluZylcbi8vXG4vLyBmb3IgcGFyc2VkUHJvcDp7IG1hcHBlZDogdHJ1dGh5IH1cbi8vIHRoZSBnZW5lcmF0ZWQgZmxhdHRlbmVkUHJvcDp7IG1hcHBpbmc6IHByb3AgfVxuLy9cbi8vIGZvciBwYXJzZWRQcm9wOnsgYnlwYXNzOiB0cnVlIH1cbi8vIHRoZSBnZW5lcmF0ZWQgZmxhdHRlbmVkUHJvcDp7IGJ5cGFzc2VkOiBwYXJzZWRQcm9wIH1cbnN0eWZuLmFwcGx5UGFyc2VkUHJvcGVydHkgPSBmdW5jdGlvbiggZWxlLCBwYXJzZWRQcm9wICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHByb3AgPSBwYXJzZWRQcm9wO1xuICB2YXIgc3R5bGUgPSBlbGUuX3ByaXZhdGUuc3R5bGU7XG4gIHZhciBmaWVsZFZhbCwgZmxhdFByb3A7XG4gIHZhciB0eXBlcyA9IHNlbGYudHlwZXM7XG4gIHZhciB0eXBlID0gc2VsZi5wcm9wZXJ0aWVzWyBwcm9wLm5hbWUgXS50eXBlO1xuICB2YXIgcHJvcElzQnlwYXNzID0gcHJvcC5ieXBhc3M7XG4gIHZhciBvcmlnUHJvcCA9IHN0eWxlWyBwcm9wLm5hbWUgXTtcbiAgdmFyIG9yaWdQcm9wSXNCeXBhc3MgPSBvcmlnUHJvcCAmJiBvcmlnUHJvcC5ieXBhc3M7XG4gIHZhciBfcCA9IGVsZS5fcHJpdmF0ZTtcbiAgdmFyIGZsYXRQcm9wTWFwcGluZyA9ICdtYXBwaW5nJztcblxuICAvLyBlZGdlcyBjb25uZWN0ZWQgdG8gY29tcG91bmQgbm9kZXMgY2FuIG5vdCBiZSBoYXlzdGFja3NcbiAgaWYoXG4gICAgcGFyc2VkUHJvcC5uYW1lID09PSAnY3VydmUtc3R5bGUnXG4gICAgJiYgcGFyc2VkUHJvcC52YWx1ZSA9PT0gJ2hheXN0YWNrJ1xuICAgICYmIGVsZS5pc0VkZ2UoKVxuICAgICYmICggZWxlLmlzTG9vcCgpIHx8IGVsZS5zb3VyY2UoKS5pc1BhcmVudCgpIHx8IGVsZS50YXJnZXQoKS5pc1BhcmVudCgpIClcbiAgKXtcbiAgICBwcm9wID0gcGFyc2VkUHJvcCA9IHRoaXMucGFyc2UoIHBhcnNlZFByb3AubmFtZSwgJ2JlemllcicsIHByb3BJc0J5cGFzcyApO1xuICB9XG5cbiAgaWYoIHByb3AuZGVsZXRlICl7IC8vIGRlbGV0ZSB0aGUgcHJvcGVydHkgYW5kIHVzZSB0aGUgZGVmYXVsdCB2YWx1ZSBvbiBmYWxzZXkgdmFsdWVcbiAgICBzdHlsZVsgcHJvcC5uYW1lIF0gPSB1bmRlZmluZWQ7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmKCBwcm9wLmRlbGV0ZUJ5cGFzc2VkICl7IC8vIGRlbGV0ZSB0aGUgcHJvcGVydHkgdGhhdCB0aGVcbiAgICBpZiggIW9yaWdQcm9wICl7XG4gICAgICByZXR1cm4gdHJ1ZTsgLy8gY2FuJ3QgZGVsZXRlIGlmIG5vIHByb3BcblxuICAgIH0gZWxzZSBpZiggb3JpZ1Byb3AuYnlwYXNzICl7IC8vIGRlbGV0ZSBieXBhc3NlZFxuICAgICAgb3JpZ1Byb3AuYnlwYXNzZWQgPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7IC8vIHdlJ3JlIHVuc3VjY2Vzc2Z1bCBkZWxldGluZyB0aGUgYnlwYXNzZWRcbiAgICB9XG4gIH1cblxuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIGRlbGV0ZSB0aGUgY3VycmVudCBieXBhc3NcbiAgaWYoIHByb3AuZGVsZXRlQnlwYXNzICl7IC8vIHRoZW4gdGhpcyBwcm9wZXJ0eSBpcyBqdXN0IGhlcmUgdG8gaW5kaWNhdGUgd2UgbmVlZCB0byBkZWxldGVcbiAgICBpZiggIW9yaWdQcm9wICl7XG4gICAgICByZXR1cm4gdHJ1ZTsgLy8gcHJvcGVydHkgaXMgYWxyZWFkeSBub3QgZGVmaW5lZFxuXG4gICAgfSBlbHNlIGlmKCBvcmlnUHJvcC5ieXBhc3MgKXsgLy8gdGhlbiByZXBsYWNlIHRoZSBieXBhc3MgcHJvcGVydHkgd2l0aCB0aGUgb3JpZ2luYWxcbiAgICAgIC8vIGJlY2F1c2UgdGhlIGJ5cGFzc2VkIHByb3BlcnR5IHdhcyBhbHJlYWR5IGFwcGxpZWQgKGFuZCB0aGVyZWZvcmUgcGFyc2VkKSwgd2UgY2FuIGp1c3QgcmVwbGFjZSBpdCAobm8gcmVhcHBseWluZyBuZWNlc3NhcnkpXG4gICAgICBzdHlsZVsgcHJvcC5uYW1lIF0gPSBvcmlnUHJvcC5ieXBhc3NlZDtcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTsgLy8gd2UncmUgdW5zdWNjZXNzZnVsIGRlbGV0aW5nIHRoZSBieXBhc3NcbiAgICB9XG4gIH1cblxuICB2YXIgcHJpbnRNYXBwaW5nRXJyID0gZnVuY3Rpb24oKXtcbiAgICB1dGlsLmVycm9yKCAnRG8gbm90IGFzc2lnbiBtYXBwaW5ncyB0byBlbGVtZW50cyB3aXRob3V0IGNvcnJlc3BvbmRpbmcgZGF0YSAoZS5nLiBlbGUgYCcgKyBlbGUuaWQoKSArICdgIGZvciBwcm9wZXJ0eSBgJyArIHByb3AubmFtZSArICdgIHdpdGggZGF0YSBmaWVsZCBgJyArIHByb3AuZmllbGQgKyAnYCk7IHRyeSBhIGBbJyArIHByb3AuZmllbGQgKyAnXWAgc2VsZWN0b3IgdG8gbGltaXQgc2NvcGUgdG8gZWxlbWVudHMgd2l0aCBgJyArIHByb3AuZmllbGQgKyAnYCBkZWZpbmVkJyApO1xuICB9O1xuXG4gIC8vIHB1dCB0aGUgcHJvcGVydHkgaW4gdGhlIHN0eWxlIG9iamVjdHNcbiAgc3dpdGNoKCBwcm9wLm1hcHBlZCApeyAvLyBmbGF0dGVuIHRoZSBwcm9wZXJ0eSBpZiBtYXBwZWRcbiAgY2FzZSB0eXBlcy5tYXBEYXRhOlxuICBjYXNlIHR5cGVzLm1hcExheW91dERhdGE6XG4gIGNhc2UgdHlwZXMubWFwU2NyYXRjaDpcblxuICAgIHZhciBpc0xheW91dCA9IHByb3AubWFwcGVkID09PSB0eXBlcy5tYXBMYXlvdXREYXRhO1xuICAgIHZhciBpc1NjcmF0Y2ggPSBwcm9wLm1hcHBlZCA9PT0gdHlwZXMubWFwU2NyYXRjaDtcblxuICAgIC8vIGZsYXR0ZW4gdGhlIGZpZWxkIChlLmcuIGRhdGEuZm9vLmJhcilcbiAgICB2YXIgZmllbGRzID0gcHJvcC5maWVsZC5zcGxpdCggJy4nICk7XG4gICAgdmFyIGZpZWxkVmFsO1xuXG4gICAgaWYoIGlzU2NyYXRjaCB8fCBpc0xheW91dCApe1xuICAgICAgZmllbGRWYWwgPSBfcC5zY3JhdGNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaWVsZFZhbCA9IF9wLmRhdGE7XG4gICAgfVxuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoICYmIGZpZWxkVmFsOyBpKysgKXtcbiAgICAgIHZhciBmaWVsZCA9IGZpZWxkc1sgaSBdO1xuICAgICAgZmllbGRWYWwgPSBmaWVsZFZhbFsgZmllbGQgXTtcbiAgICB9XG5cbiAgICB2YXIgcGVyY2VudDtcbiAgICBpZiggIWlzLm51bWJlciggZmllbGRWYWwgKSApeyAvLyB0aGVuIGtlZXAgdGhlIG1hcHBpbmcgYnV0IGFzc3VtZSAwJSBmb3Igbm93XG4gICAgICBwZXJjZW50ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcGVyY2VudCA9IChmaWVsZFZhbCAtIHByb3AuZmllbGRNaW4pIC8gKHByb3AuZmllbGRNYXggLSBwcm9wLmZpZWxkTWluKTtcbiAgICB9XG5cbiAgICAvLyBtYWtlIHN1cmUgdG8gYm91bmQgcGVyY2VudCB2YWx1ZVxuICAgIGlmKCBwZXJjZW50IDwgMCApe1xuICAgICAgcGVyY2VudCA9IDA7XG4gICAgfSBlbHNlIGlmKCBwZXJjZW50ID4gMSApe1xuICAgICAgcGVyY2VudCA9IDE7XG4gICAgfVxuXG4gICAgaWYoIHR5cGUuY29sb3IgKXtcbiAgICAgIHZhciByMSA9IHByb3AudmFsdWVNaW5bMF07XG4gICAgICB2YXIgcjIgPSBwcm9wLnZhbHVlTWF4WzBdO1xuICAgICAgdmFyIGcxID0gcHJvcC52YWx1ZU1pblsxXTtcbiAgICAgIHZhciBnMiA9IHByb3AudmFsdWVNYXhbMV07XG4gICAgICB2YXIgYjEgPSBwcm9wLnZhbHVlTWluWzJdO1xuICAgICAgdmFyIGIyID0gcHJvcC52YWx1ZU1heFsyXTtcbiAgICAgIHZhciBhMSA9IHByb3AudmFsdWVNaW5bM10gPT0gbnVsbCA/IDEgOiBwcm9wLnZhbHVlTWluWzNdO1xuICAgICAgdmFyIGEyID0gcHJvcC52YWx1ZU1heFszXSA9PSBudWxsID8gMSA6IHByb3AudmFsdWVNYXhbM107XG5cbiAgICAgIHZhciBjbHIgPSBbXG4gICAgICAgIE1hdGgucm91bmQoIHIxICsgKHIyIC0gcjEpICogcGVyY2VudCApLFxuICAgICAgICBNYXRoLnJvdW5kKCBnMSArIChnMiAtIGcxKSAqIHBlcmNlbnQgKSxcbiAgICAgICAgTWF0aC5yb3VuZCggYjEgKyAoYjIgLSBiMSkgKiBwZXJjZW50ICksXG4gICAgICAgIE1hdGgucm91bmQoIGExICsgKGEyIC0gYTEpICogcGVyY2VudCApXG4gICAgICBdO1xuXG4gICAgICBmbGF0UHJvcCA9IHsgLy8gY29sb3VycyBhcmUgc2ltcGxlLCBzbyBqdXN0IGNyZWF0ZSB0aGUgZmxhdCBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGV4cGVuc2l2ZSBzdHJpbmcgcGFyc2luZ1xuICAgICAgICBieXBhc3M6IHByb3AuYnlwYXNzLCAvLyB3ZSdyZSBhIGJ5cGFzcyBpZiB0aGUgbWFwcGluZyBwcm9wZXJ0eSBpcyBhIGJ5cGFzc1xuICAgICAgICBuYW1lOiBwcm9wLm5hbWUsXG4gICAgICAgIHZhbHVlOiBjbHIsXG4gICAgICAgIHN0clZhbHVlOiAncmdiKCcgKyBjbHJbMF0gKyAnLCAnICsgY2xyWzFdICsgJywgJyArIGNsclsyXSArICcpJ1xuICAgICAgfTtcblxuICAgIH0gZWxzZSBpZiggdHlwZS5udW1iZXIgKXtcbiAgICAgIHZhciBjYWxjVmFsdWUgPSBwcm9wLnZhbHVlTWluICsgKHByb3AudmFsdWVNYXggLSBwcm9wLnZhbHVlTWluKSAqIHBlcmNlbnQ7XG4gICAgICBmbGF0UHJvcCA9IHRoaXMucGFyc2UoIHByb3AubmFtZSwgY2FsY1ZhbHVlLCBwcm9wLmJ5cGFzcywgZmxhdFByb3BNYXBwaW5nICk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlOyAvLyBjYW4gb25seSBtYXAgdG8gY29sb3VycyBhbmQgbnVtYmVyc1xuICAgIH1cblxuICAgIGlmKCAhZmxhdFByb3AgKXsgLy8gaWYgd2UgY2FuJ3QgZmxhdHRlbiB0aGUgcHJvcGVydHksIHRoZW4gdXNlIHRoZSBvcmlnUHJvcCBzbyB3ZSBzdGlsbCBrZWVwIHRoZSBtYXBwaW5nIGl0c2VsZlxuICAgICAgZmxhdFByb3AgPSB0aGlzLnBhcnNlKCBwcm9wLm5hbWUsIG9yaWdQcm9wLnN0clZhbHVlLCBwcm9wLmJ5cGFzcywgZmxhdFByb3BNYXBwaW5nICk7XG4gICAgfVxuXG4gICAgaWYoICFmbGF0UHJvcCApeyBwcmludE1hcHBpbmdFcnIoKTsgfVxuICAgIGZsYXRQcm9wLm1hcHBpbmcgPSBwcm9wOyAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBtYXBwaW5nXG4gICAgcHJvcCA9IGZsYXRQcm9wOyAvLyB0aGUgZmxhdHRlbmVkIChtYXBwZWQpIHByb3BlcnR5IGlzIHRoZSBvbmUgd2Ugd2FudFxuXG4gICAgYnJlYWs7XG5cbiAgLy8gZGlyZWN0IG1hcHBpbmdcbiAgY2FzZSB0eXBlcy5kYXRhOlxuICBjYXNlIHR5cGVzLmxheW91dERhdGE6XG4gIGNhc2UgdHlwZXMuc2NyYXRjaDpcbiAgICB2YXIgaXNMYXlvdXQgPSBwcm9wLm1hcHBlZCA9PT0gdHlwZXMubGF5b3V0RGF0YTtcbiAgICB2YXIgaXNTY3JhdGNoID0gcHJvcC5tYXBwZWQgPT09IHR5cGVzLnNjcmF0Y2g7XG5cbiAgICAvLyBmbGF0dGVuIHRoZSBmaWVsZCAoZS5nLiBkYXRhLmZvby5iYXIpXG4gICAgdmFyIGZpZWxkcyA9IHByb3AuZmllbGQuc3BsaXQoICcuJyApO1xuICAgIHZhciBmaWVsZFZhbDtcblxuICAgIGlmKCBpc1NjcmF0Y2ggfHwgaXNMYXlvdXQgKXtcbiAgICAgIGZpZWxkVmFsID0gX3Auc2NyYXRjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgZmllbGRWYWwgPSBfcC5kYXRhO1xuICAgIH1cblxuICAgIGlmKCBmaWVsZFZhbCApeyBmb3IoIHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIGZpZWxkID0gZmllbGRzWyBpIF07XG4gICAgICBmaWVsZFZhbCA9IGZpZWxkVmFsWyBmaWVsZCBdO1xuICAgIH0gfVxuXG4gICAgZmxhdFByb3AgPSB0aGlzLnBhcnNlKCBwcm9wLm5hbWUsIGZpZWxkVmFsLCBwcm9wLmJ5cGFzcywgZmxhdFByb3BNYXBwaW5nICk7XG5cbiAgICBpZiggIWZsYXRQcm9wICl7IC8vIGlmIHdlIGNhbid0IGZsYXR0ZW4gdGhlIHByb3BlcnR5LCB0aGVuIHVzZSB0aGUgb3JpZ1Byb3Agc28gd2Ugc3RpbGwga2VlcCB0aGUgbWFwcGluZyBpdHNlbGZcbiAgICAgIHZhciBmbGF0UHJvcFZhbCA9IG9yaWdQcm9wID8gb3JpZ1Byb3Auc3RyVmFsdWUgOiAnJztcblxuICAgICAgZmxhdFByb3AgPSB0aGlzLnBhcnNlKCBwcm9wLm5hbWUsIGZsYXRQcm9wVmFsLCBwcm9wLmJ5cGFzcywgZmxhdFByb3BNYXBwaW5nICk7XG4gICAgfVxuXG4gICAgaWYoICFmbGF0UHJvcCApeyBwcmludE1hcHBpbmdFcnIoKTsgfVxuICAgIGZsYXRQcm9wLm1hcHBpbmcgPSBwcm9wOyAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBtYXBwaW5nXG4gICAgcHJvcCA9IGZsYXRQcm9wOyAvLyB0aGUgZmxhdHRlbmVkIChtYXBwZWQpIHByb3BlcnR5IGlzIHRoZSBvbmUgd2Ugd2FudFxuXG4gICAgYnJlYWs7XG5cbiAgY2FzZSB0eXBlcy5mbjpcbiAgICB2YXIgZm4gPSBwcm9wLnZhbHVlO1xuICAgIHZhciBmblJldFZhbCA9IGZuKCBlbGUgKTtcblxuICAgIGZsYXRQcm9wID0gdGhpcy5wYXJzZSggcHJvcC5uYW1lLCBmblJldFZhbCwgcHJvcC5ieXBhc3MsIGZsYXRQcm9wTWFwcGluZyApO1xuICAgIGZsYXRQcm9wLm1hcHBpbmcgPSBwcm9wOyAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBtYXBwaW5nXG4gICAgcHJvcCA9IGZsYXRQcm9wOyAvLyB0aGUgZmxhdHRlbmVkIChtYXBwZWQpIHByb3BlcnR5IGlzIHRoZSBvbmUgd2Ugd2FudFxuXG4gICAgYnJlYWs7XG5cbiAgY2FzZSB1bmRlZmluZWQ6XG4gICAgYnJlYWs7IC8vIGp1c3Qgc2V0IHRoZSBwcm9wZXJ0eVxuXG4gIGRlZmF1bHQ6XG4gICAgcmV0dXJuIGZhbHNlOyAvLyBub3QgYSB2YWxpZCBtYXBwaW5nXG4gIH1cblxuICAvLyBpZiB0aGUgcHJvcGVydHkgaXMgYSBieXBhc3MgcHJvcGVydHksIHRoZW4gbGluayB0aGUgcmVzdWx0YW50IHByb3BlcnR5IHRvIHRoZSBvcmlnaW5hbCBvbmVcbiAgaWYoIHByb3BJc0J5cGFzcyApe1xuICAgIGlmKCBvcmlnUHJvcElzQnlwYXNzICl7IC8vIHRoZW4gdGhpcyBieXBhc3Mgb3ZlcnJpZGVzIHRoZSBleGlzdGluZyBvbmVcbiAgICAgIHByb3AuYnlwYXNzZWQgPSBvcmlnUHJvcC5ieXBhc3NlZDsgLy8gc3RlYWwgYnlwYXNzZWQgcHJvcCBmcm9tIG9sZCBieXBhc3NcbiAgICB9IGVsc2UgeyAvLyB0aGVuIGxpbmsgdGhlIG9yaWcgcHJvcCB0byB0aGUgbmV3IGJ5cGFzc1xuICAgICAgcHJvcC5ieXBhc3NlZCA9IG9yaWdQcm9wO1xuICAgIH1cblxuICAgIHN0eWxlWyBwcm9wLm5hbWUgXSA9IHByb3A7IC8vIGFuZCBzZXRcblxuICB9IGVsc2UgeyAvLyBwcm9wIGlzIG5vdCBieXBhc3NcbiAgICBpZiggb3JpZ1Byb3BJc0J5cGFzcyApeyAvLyB0aGVuIGtlZXAgdGhlIG9yaWcgcHJvcCAoc2luY2UgaXQncyBhIGJ5cGFzcykgYW5kIGxpbmsgdG8gdGhlIG5ldyBwcm9wXG4gICAgICBvcmlnUHJvcC5ieXBhc3NlZCA9IHByb3A7XG4gICAgfSBlbHNlIHsgLy8gdGhlbiBqdXN0IHJlcGxhY2UgdGhlIG9sZCBwcm9wIHdpdGggdGhlIG5ldyBvbmVcbiAgICAgIHN0eWxlWyBwcm9wLm5hbWUgXSA9IHByb3A7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5jaGVja1pPcmRlclRyaWdnZXIoIGVsZSwgcHJvcC5uYW1lLCBvcmlnUHJvcCA/IG9yaWdQcm9wLnZhbHVlIDogbnVsbCwgcHJvcC52YWx1ZSApO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuc3R5Zm4uY2xlYW5FbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVzLCBrZWVwQnlwYXNzZXMgKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgcHJvcHMgPSBzZWxmLnByb3BlcnRpZXM7XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGVsZSA9IGVsZXNbaV07XG5cbiAgICBpZiggIWtlZXBCeXBhc3NlcyApe1xuICAgICAgZWxlLl9wcml2YXRlLnN0eWxlID0ge307XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdHlsZSA9IGVsZS5fcHJpdmF0ZS5zdHlsZTtcblxuICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBwcm9wcy5sZW5ndGg7IGorKyApe1xuICAgICAgICB2YXIgcHJvcCA9IHByb3BzW2pdO1xuICAgICAgICB2YXIgZWxlUHJvcCA9IHN0eWxlWyBwcm9wLm5hbWUgXTtcblxuICAgICAgICBpZiggZWxlUHJvcCApe1xuICAgICAgICAgIGlmKCBlbGVQcm9wLmJ5cGFzcyApe1xuICAgICAgICAgICAgZWxlUHJvcC5ieXBhc3NlZCA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0eWxlWyBwcm9wLm5hbWUgXSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vLyB1cGRhdGVzIHRoZSB2aXN1YWwgc3R5bGUgZm9yIGFsbCBlbGVtZW50cyAodXNlZnVsIGZvciBtYW51YWwgc3R5bGUgbW9kaWZpY2F0aW9uIGFmdGVyIGluaXQpXG5zdHlmbi51cGRhdGUgPSBmdW5jdGlvbigpe1xuICB2YXIgY3kgPSB0aGlzLl9wcml2YXRlLmN5O1xuICB2YXIgZWxlcyA9IGN5Lm11dGFibGVFbGVtZW50cygpO1xuXG4gIGVsZXMudXBkYXRlU3R5bGUoKTtcbn07XG5cbi8vIGp1c3QgdXBkYXRlIHRoZSBmdW5jdGlvbmFsIHByb3BlcnRpZXMgKGkuZS4gbWFwcGluZ3MpIGluIHRoZSBlbGVtZW50cydcbi8vIHN0eWxlcyAobGVzcyBleHBlbnNpdmUgdGhhbiByZWNhbGN1bGF0aW9uKVxuc3R5Zm4udXBkYXRlTWFwcGVycyA9IGZ1bmN0aW9uKCBlbGVzICl7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKysgKXsgLy8gZm9yIGVhY2ggZWxlXG4gICAgdmFyIGVsZSA9IGVsZXNbIGkgXTtcbiAgICB2YXIgc3R5bGUgPSBlbGUuX3ByaXZhdGUuc3R5bGU7XG5cbiAgICBmb3IoIHZhciBqID0gMDsgaiA8IHNlbGYucHJvcGVydGllcy5sZW5ndGg7IGorKyApeyAvLyBmb3IgZWFjaCBwcm9wXG4gICAgICB2YXIgcHJvcCA9IHNlbGYucHJvcGVydGllc1sgaiBdO1xuICAgICAgdmFyIHByb3BJblN0eWxlID0gc3R5bGVbIHByb3AubmFtZSBdO1xuXG4gICAgICBpZiggcHJvcEluU3R5bGUgJiYgcHJvcEluU3R5bGUubWFwcGluZyApe1xuICAgICAgICB2YXIgbWFwcGluZyA9IHByb3BJblN0eWxlLm1hcHBpbmc7XG4gICAgICAgIHRoaXMuYXBwbHlQYXJzZWRQcm9wZXJ0eSggZWxlLCBtYXBwaW5nICk7IC8vIHJlYXBwbHkgdGhlIG1hcHBpbmcgcHJvcGVydHlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVN0eWxlSGludHMoIGVsZSApO1xuICB9XG59O1xuXG4vLyBkaWZmUHJvcHMgOiB7IG5hbWUgPT4geyBwcmV2LCBuZXh0IH0gfVxuc3R5Zm4udXBkYXRlVHJhbnNpdGlvbnMgPSBmdW5jdGlvbiggZWxlLCBkaWZmUHJvcHMsIGlzQnlwYXNzICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIF9wID0gZWxlLl9wcml2YXRlO1xuICB2YXIgcHJvcHMgPSBlbGUucHN0eWxlKCAndHJhbnNpdGlvbi1wcm9wZXJ0eScgKS52YWx1ZTtcbiAgdmFyIGR1cmF0aW9uID0gZWxlLnBzdHlsZSggJ3RyYW5zaXRpb24tZHVyYXRpb24nICkucGZWYWx1ZTtcbiAgdmFyIGRlbGF5ID0gZWxlLnBzdHlsZSggJ3RyYW5zaXRpb24tZGVsYXknICkucGZWYWx1ZTtcblxuICBpZiggcHJvcHMubGVuZ3RoID4gMCAmJiBkdXJhdGlvbiA+IDAgKXtcblxuICAgIHZhciBjc3MgPSB7fTtcblxuICAgIC8vIGJ1aWxkIHVwIHRoZSBzdHlsZSB0byBhbmltYXRlIHRvd2FyZHNcbiAgICB2YXIgYW55UHJldiA9IGZhbHNlO1xuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBwcm9wID0gcHJvcHNbIGkgXTtcbiAgICAgIHZhciBzdHlQcm9wID0gZWxlLnBzdHlsZSggcHJvcCApO1xuICAgICAgdmFyIGRpZmZQcm9wID0gZGlmZlByb3BzWyBwcm9wIF07XG5cbiAgICAgIGlmKCAhZGlmZlByb3AgKXsgY29udGludWU7IH1cblxuICAgICAgdmFyIHByZXZQcm9wID0gZGlmZlByb3AucHJldjtcbiAgICAgIHZhciBmcm9tUHJvcCA9IHByZXZQcm9wO1xuICAgICAgdmFyIHRvUHJvcCA9IGRpZmZQcm9wLm5leHQgIT0gbnVsbCA/IGRpZmZQcm9wLm5leHQgOiBzdHlQcm9wO1xuICAgICAgdmFyIGRpZmYgPSBmYWxzZTtcbiAgICAgIHZhciBpbml0VmFsO1xuICAgICAgdmFyIGluaXREdCA9IDAuMDAwMDAxOyAvLyBkZWx0YSB0aW1lICUgdmFsdWUgZm9yIGluaXRWYWwgKGFsbG93cyBhbmltYXRpbmcgb3V0IG9mIGluaXQgemVybyBvcGFjaXR5KVxuXG4gICAgICBpZiggIWZyb21Qcm9wICl7IGNvbnRpbnVlOyB9XG5cbiAgICAgIC8vIGNvbnNpZGVyIHB4IHZhbHVlc1xuICAgICAgaWYoIGlzLm51bWJlciggZnJvbVByb3AucGZWYWx1ZSApICYmIGlzLm51bWJlciggdG9Qcm9wLnBmVmFsdWUgKSApe1xuICAgICAgICBkaWZmID0gdG9Qcm9wLnBmVmFsdWUgLSBmcm9tUHJvcC5wZlZhbHVlOyAvLyBub256ZXJvIGlzIHRydXRoeVxuICAgICAgICBpbml0VmFsID0gZnJvbVByb3AucGZWYWx1ZSArIGluaXREdCAqIGRpZmY7XG5cbiAgICAgIC8vIGNvbnNpZGVyIG51bWVyaWNhbCB2YWx1ZXNcbiAgICAgIH0gZWxzZSBpZiggaXMubnVtYmVyKCBmcm9tUHJvcC52YWx1ZSApICYmIGlzLm51bWJlciggdG9Qcm9wLnZhbHVlICkgKXtcbiAgICAgICAgZGlmZiA9IHRvUHJvcC52YWx1ZSAtIGZyb21Qcm9wLnZhbHVlOyAvLyBub256ZXJvIGlzIHRydXRoeVxuICAgICAgICBpbml0VmFsID0gZnJvbVByb3AudmFsdWUgKyBpbml0RHQgKiBkaWZmO1xuXG4gICAgICAvLyBjb25zaWRlciBjb2xvdXIgdmFsdWVzXG4gICAgICB9IGVsc2UgaWYoIGlzLmFycmF5KCBmcm9tUHJvcC52YWx1ZSApICYmIGlzLmFycmF5KCB0b1Byb3AudmFsdWUgKSApe1xuICAgICAgICBkaWZmID0gZnJvbVByb3AudmFsdWVbMF0gIT09IHRvUHJvcC52YWx1ZVswXVxuICAgICAgICAgIHx8IGZyb21Qcm9wLnZhbHVlWzFdICE9PSB0b1Byb3AudmFsdWVbMV1cbiAgICAgICAgICB8fCBmcm9tUHJvcC52YWx1ZVsyXSAhPT0gdG9Qcm9wLnZhbHVlWzJdXG4gICAgICAgIDtcblxuICAgICAgICBpbml0VmFsID0gZnJvbVByb3Auc3RyVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHRoZSBwcmV2aW91cyB2YWx1ZSBpcyBnb29kIGZvciBhbiBhbmltYXRpb24gb25seSBpZiBpdCdzIGRpZmZlcmVudFxuICAgICAgaWYoIGRpZmYgKXtcbiAgICAgICAgY3NzWyBwcm9wIF0gPSB0b1Byb3Auc3RyVmFsdWU7IC8vIHRvIHZhbFxuICAgICAgICB0aGlzLmFwcGx5QnlwYXNzKCBlbGUsIHByb3AsIGluaXRWYWwgKTsgLy8gZnJvbSB2YWxcbiAgICAgICAgYW55UHJldiA9IHRydWU7XG4gICAgICB9XG5cbiAgICB9IC8vIGVuZCBpZiBwcm9wcyBhbGxvdyBhbmlcblxuICAgIC8vIGNhbid0IHRyYW5zaXRpb24gaWYgdGhlcmUncyBub3RoaW5nIHByZXZpb3VzIHRvIHRyYW5zaXRpb24gZnJvbVxuICAgIGlmKCAhYW55UHJldiApeyByZXR1cm47IH1cblxuICAgIF9wLnRyYW5zaXRpb25pbmcgPSB0cnVlO1xuXG4gICAgZWxlLnN0b3AoKTtcblxuICAgIGlmKCBkZWxheSA+IDAgKXtcbiAgICAgIGVsZS5kZWxheSggZGVsYXkgKTtcbiAgICB9XG5cbiAgICBlbGUuYW5pbWF0ZSgge1xuICAgICAgY3NzOiBjc3NcbiAgICB9LCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBlYXNpbmc6IGVsZS5wc3R5bGUoICd0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbicgKS52YWx1ZSxcbiAgICAgIHF1ZXVlOiBmYWxzZSxcbiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpe1xuICAgICAgICBpZiggIWlzQnlwYXNzICl7XG4gICAgICAgICAgc2VsZi5yZW1vdmVCeXBhc3NlcyggZWxlLCBwcm9wcyApO1xuICAgICAgICB9XG5cbiAgICAgICAgX3AudHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gKTtcblxuICB9IGVsc2UgaWYoIF9wLnRyYW5zaXRpb25pbmcgKXtcbiAgICBlbGUuc3RvcCgpO1xuXG4gICAgdGhpcy5yZW1vdmVCeXBhc3NlcyggZWxlLCBwcm9wcyApO1xuXG4gICAgX3AudHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICB9XG59O1xuXG5zdHlmbi5jaGVja1pPcmRlclRyaWdnZXIgPSBmdW5jdGlvbiggZWxlLCBuYW1lLCBmcm9tVmFsdWUsIHRvVmFsdWUgKXtcbiAgdmFyIHByb3AgPSB0aGlzLnByb3BlcnRpZXNbIG5hbWUgXTtcblxuICBpZiggcHJvcC50cmlnZ2Vyc1pPcmRlciAmJiAoIGZyb21WYWx1ZSA9PSBudWxsIHx8IHByb3AudHJpZ2dlcnNaT3JkZXIoIGZyb21WYWx1ZSwgdG9WYWx1ZSApICkgKXtcbiAgICB0aGlzLl9wcml2YXRlLmN5Lm5vdGlmeSh7XG4gICAgICB0eXBlOiAnem9yZGVyJyxcbiAgICAgIGVsZXM6IGVsZVxuICAgIH0pO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXMgPSByZXF1aXJlKCAnLi4vaXMnICk7XG52YXIgdXRpbCA9IHJlcXVpcmUoICcuLi91dGlsJyApO1xuXG52YXIgc3R5Zm4gPSB7fTtcblxuLy8gYnlwYXNzZXMgYXJlIGFwcGxpZWQgdG8gYW4gZXhpc3Rpbmcgc3R5bGUgb24gYW4gZWxlbWVudCwgYW5kIGp1c3QgdGFja2VkIG9uIHRlbXBvcmFyaWx5XG4vLyByZXR1cm5zIHRydWUgaWZmIGFwcGxpY2F0aW9uIHdhcyBzdWNjZXNzZnVsIGZvciBhdCBsZWFzdCAxIHNwZWNpZmllZCBwcm9wZXJ0eVxuc3R5Zm4uYXBwbHlCeXBhc3MgPSBmdW5jdGlvbiggZWxlcywgbmFtZSwgdmFsdWUsIHVwZGF0ZVRyYW5zaXRpb25zICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHByb3BzID0gW107XG4gIHZhciBpc0J5cGFzcyA9IHRydWU7XG5cbiAgLy8gcHV0IGFsbCB0aGUgcHJvcGVydGllcyAoY2FuIHNwZWNpZnkgb25lIG9yIG1hbnkpIGluIGFuIGFycmF5IGFmdGVyIHBhcnNpbmcgdGhlbVxuICBpZiggbmFtZSA9PT0gJyonIHx8IG5hbWUgPT09ICcqKicgKXsgLy8gYXBwbHkgdG8gYWxsIHByb3BlcnR5IG5hbWVzXG5cbiAgICBpZiggdmFsdWUgIT09IHVuZGVmaW5lZCApe1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBzZWxmLnByb3BlcnRpZXMubGVuZ3RoOyBpKysgKXtcbiAgICAgICAgdmFyIHByb3AgPSBzZWxmLnByb3BlcnRpZXNbIGkgXTtcbiAgICAgICAgdmFyIG5hbWUgPSBwcm9wLm5hbWU7XG5cbiAgICAgICAgdmFyIHBhcnNlZFByb3AgPSB0aGlzLnBhcnNlKCBuYW1lLCB2YWx1ZSwgdHJ1ZSApO1xuXG4gICAgICAgIGlmKCBwYXJzZWRQcm9wICl7XG4gICAgICAgICAgcHJvcHMucHVzaCggcGFyc2VkUHJvcCApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gIH0gZWxzZSBpZiggaXMuc3RyaW5nKCBuYW1lICkgKXsgLy8gdGhlbiBwYXJzZSB0aGUgc2luZ2xlIHByb3BlcnR5XG4gICAgdmFyIHBhcnNlZFByb3AgPSB0aGlzLnBhcnNlKCBuYW1lLCB2YWx1ZSwgdHJ1ZSApO1xuXG4gICAgaWYoIHBhcnNlZFByb3AgKXtcbiAgICAgIHByb3BzLnB1c2goIHBhcnNlZFByb3AgKTtcbiAgICB9XG4gIH0gZWxzZSBpZiggaXMucGxhaW5PYmplY3QoIG5hbWUgKSApeyAvLyB0aGVuIHBhcnNlIGVhY2ggcHJvcGVydHlcbiAgICB2YXIgc3BlY2lmaWVkUHJvcHMgPSBuYW1lO1xuICAgIHVwZGF0ZVRyYW5zaXRpb25zID0gdmFsdWU7XG5cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IHNlbGYucHJvcGVydGllcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIHByb3AgPSBzZWxmLnByb3BlcnRpZXNbIGkgXTtcbiAgICAgIHZhciBuYW1lID0gcHJvcC5uYW1lO1xuICAgICAgdmFyIHZhbHVlID0gc3BlY2lmaWVkUHJvcHNbIG5hbWUgXTtcblxuICAgICAgaWYoIHZhbHVlID09PSB1bmRlZmluZWQgKXsgLy8gdHJ5IGNhbWVsIGNhc2UgbmFtZSB0b29cbiAgICAgICAgdmFsdWUgPSBzcGVjaWZpZWRQcm9wc1sgdXRpbC5kYXNoMmNhbWVsKCBuYW1lICkgXTtcbiAgICAgIH1cblxuICAgICAgaWYoIHZhbHVlICE9PSB1bmRlZmluZWQgKXtcbiAgICAgICAgdmFyIHBhcnNlZFByb3AgPSB0aGlzLnBhcnNlKCBuYW1lLCB2YWx1ZSwgdHJ1ZSApO1xuXG4gICAgICAgIGlmKCBwYXJzZWRQcm9wICl7XG4gICAgICAgICAgcHJvcHMucHVzaCggcGFyc2VkUHJvcCApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgeyAvLyBjYW4ndCBkbyBhbnl0aGluZyB3aXRob3V0IHdlbGwgZGVmaW5lZCBwcm9wZXJ0aWVzXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gd2UndmUgZmFpbGVkIGlmIHRoZXJlIGFyZSBubyB2YWxpZCBwcm9wZXJ0aWVzXG4gIGlmKCBwcm9wcy5sZW5ndGggPT09IDAgKXsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgLy8gbm93LCBhcHBseSB0aGUgYnlwYXNzIHByb3BlcnRpZXMgb24gdGhlIGVsZW1lbnRzXG4gIHZhciByZXQgPSBmYWxzZTsgLy8gcmV0dXJuIHRydWUgaWYgYXQgbGVhc3Qgb25lIHN1Y2Nlc2Z1bCBieXBhc3MgYXBwbGllZFxuICBmb3IoIHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKysgKXsgLy8gZm9yIGVhY2ggZWxlXG4gICAgdmFyIGVsZSA9IGVsZXNbIGkgXTtcbiAgICB2YXIgZGlmZlByb3BzID0ge307XG4gICAgdmFyIGRpZmZQcm9wO1xuXG4gICAgZm9yKCB2YXIgaiA9IDA7IGogPCBwcm9wcy5sZW5ndGg7IGorKyApeyAvLyBmb3IgZWFjaCBwcm9wXG4gICAgICB2YXIgcHJvcCA9IHByb3BzWyBqIF07XG5cbiAgICAgIGlmKCB1cGRhdGVUcmFuc2l0aW9ucyApe1xuICAgICAgICB2YXIgcHJldlByb3AgPSBlbGUucHN0eWxlKCBwcm9wLm5hbWUgKTtcbiAgICAgICAgZGlmZlByb3AgPSBkaWZmUHJvcHNbIHByb3AubmFtZSBdID0geyBwcmV2OiBwcmV2UHJvcCB9O1xuICAgICAgfVxuXG4gICAgICByZXQgPSB0aGlzLmFwcGx5UGFyc2VkUHJvcGVydHkoIGVsZSwgcHJvcCApIHx8IHJldDtcblxuICAgICAgaWYoIHVwZGF0ZVRyYW5zaXRpb25zICl7XG4gICAgICAgIGRpZmZQcm9wLm5leHQgPSBlbGUucHN0eWxlKCBwcm9wLm5hbWUgKTtcbiAgICAgIH1cblxuICAgIH0gLy8gZm9yIHByb3BzXG5cbiAgICBpZiggcmV0ICl7XG4gICAgICB0aGlzLnVwZGF0ZVN0eWxlSGludHMoIGVsZSApO1xuICAgIH1cblxuICAgIGlmKCB1cGRhdGVUcmFuc2l0aW9ucyApe1xuICAgICAgdGhpcy51cGRhdGVUcmFuc2l0aW9ucyggZWxlLCBkaWZmUHJvcHMsIGlzQnlwYXNzICk7XG4gICAgfVxuICB9IC8vIGZvciBlbGVzXG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbi8vIG9ubHkgdXNlZnVsIGluIHNwZWNpZmljIGNhc2VzIGxpa2UgYW5pbWF0aW9uXG5zdHlmbi5vdmVycmlkZUJ5cGFzcyA9IGZ1bmN0aW9uKCBlbGVzLCBuYW1lLCB2YWx1ZSApe1xuICBuYW1lID0gdXRpbC5jYW1lbDJkYXNoKCBuYW1lICk7XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGVsZSA9IGVsZXNbIGkgXTtcbiAgICB2YXIgcHJvcCA9IGVsZS5fcHJpdmF0ZS5zdHlsZVsgbmFtZSBdO1xuICAgIHZhciB0eXBlID0gdGhpcy5wcm9wZXJ0aWVzWyBuYW1lIF0udHlwZTtcbiAgICB2YXIgaXNDb2xvciA9IHR5cGUuY29sb3I7XG4gICAgdmFyIGlzTXVsdGkgPSB0eXBlLm11dGlwbGU7XG5cbiAgICBpZiggIXByb3AgfHwgIXByb3AuYnlwYXNzICl7IC8vIG5lZWQgYSBieXBhc3MgaWYgb25lIGRvZXNuJ3QgZXhpc3RcbiAgICAgIHRoaXMuYXBwbHlCeXBhc3MoIGVsZSwgbmFtZSwgdmFsdWUgKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBvbGRWYWx1ZSA9IHByb3AucGZWYWx1ZSAhPSBudWxsID8gcHJvcC5wZlZhbHVlIDogcHJvcC52YWx1ZTtcblxuICAgIHByb3AudmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmKCBwcm9wLnBmVmFsdWUgIT0gbnVsbCApe1xuICAgICAgcHJvcC5wZlZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYoIGlzQ29sb3IgKXtcbiAgICAgIHByb3Auc3RyVmFsdWUgPSAncmdiKCcgKyB2YWx1ZS5qb2luKCAnLCcgKSArICcpJztcbiAgICB9IGVsc2UgaWYoIGlzTXVsdGkgKXtcbiAgICAgIHByb3Auc3RyVmFsdWUgPSB2YWx1ZS5qb2luKCAnICcgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcC5zdHJWYWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgfVxuXG4gICAgdGhpcy5jaGVja1pPcmRlclRyaWdnZXIoIGVsZSwgbmFtZSwgb2xkVmFsdWUsIHZhbHVlICk7XG4gIH1cbn07XG5cbnN0eWZuLnJlbW92ZUFsbEJ5cGFzc2VzID0gZnVuY3Rpb24oIGVsZXMsIHVwZGF0ZVRyYW5zaXRpb25zICl7XG4gIHJldHVybiB0aGlzLnJlbW92ZUJ5cGFzc2VzKCBlbGVzLCB0aGlzLnByb3BlcnR5TmFtZXMsIHVwZGF0ZVRyYW5zaXRpb25zICk7XG59O1xuXG5zdHlmbi5yZW1vdmVCeXBhc3NlcyA9IGZ1bmN0aW9uKCBlbGVzLCBwcm9wcywgdXBkYXRlVHJhbnNpdGlvbnMgKXtcbiAgdmFyIGlzQnlwYXNzID0gdHJ1ZTtcblxuICBmb3IoIHZhciBqID0gMDsgaiA8IGVsZXMubGVuZ3RoOyBqKysgKXtcbiAgICB2YXIgZWxlID0gZWxlc1sgaiBdO1xuICAgIHZhciBkaWZmUHJvcHMgPSB7fTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBuYW1lID0gcHJvcHNbIGkgXTtcbiAgICAgIHZhciBwcm9wID0gdGhpcy5wcm9wZXJ0aWVzWyBuYW1lIF07XG4gICAgICB2YXIgcHJldlByb3AgPSBlbGUucHN0eWxlKCBwcm9wLm5hbWUgKTtcblxuICAgICAgaWYoICFwcmV2UHJvcCB8fCAhcHJldlByb3AuYnlwYXNzICl7XG4gICAgICAgIC8vIGlmIGEgYnlwYXNzIGRvZXNuJ3QgZXhpc3QgZm9yIHRoZSBwcm9wLCBub3RoaW5nIG5lZWRzIHRvIGJlIHJlbW92ZWRcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9ICcnOyAvLyBlbXB0eSA9PiByZW1vdmUgYnlwYXNzXG4gICAgICB2YXIgcGFyc2VkUHJvcCA9IHRoaXMucGFyc2UoIG5hbWUsIHZhbHVlLCB0cnVlICk7XG4gICAgICB2YXIgZGlmZlByb3AgPSBkaWZmUHJvcHNbIHByb3AubmFtZSBdID0geyBwcmV2OiBwcmV2UHJvcCB9O1xuXG4gICAgICB0aGlzLmFwcGx5UGFyc2VkUHJvcGVydHkoIGVsZSwgcGFyc2VkUHJvcCApO1xuXG4gICAgICBkaWZmUHJvcC5uZXh0ID0gZWxlLnBzdHlsZSggcHJvcC5uYW1lICk7XG4gICAgfSAvLyBmb3IgcHJvcHNcblxuICAgIHRoaXMudXBkYXRlU3R5bGVIaW50cyggZWxlICk7XG5cbiAgICBpZiggdXBkYXRlVHJhbnNpdGlvbnMgKXtcbiAgICAgIHRoaXMudXBkYXRlVHJhbnNpdGlvbnMoIGVsZSwgZGlmZlByb3BzLCBpc0J5cGFzcyApO1xuICAgIH1cbiAgfSAvLyBmb3IgZWxlc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHlmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdpbmRvdyA9IHJlcXVpcmUoICcuLi93aW5kb3cnICk7XG5cbnZhciBzdHlmbiA9IHt9O1xuXG4vLyBnZXRzIHdoYXQgYW4gZW0gc2l6ZSBjb3JyZXNwb25kcyB0byBpbiBwaXhlbHMgcmVsYXRpdmUgdG8gYSBkb20gZWxlbWVudFxuc3R5Zm4uZ2V0RW1TaXplSW5QaXhlbHMgPSBmdW5jdGlvbigpe1xuICB2YXIgcHggPSB0aGlzLmNvbnRhaW5lckNzcyggJ2ZvbnQtc2l6ZScgKTtcblxuICBpZiggcHggIT0gbnVsbCApe1xuICAgIHJldHVybiBwYXJzZUZsb2F0KCBweCApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAxOyAvLyBmb3IgaGVhZGxlc3NcbiAgfVxufTtcblxuLy8gZ2V0cyBjc3MgcHJvcGVydHkgZnJvbSB0aGUgY29yZSBjb250YWluZXJcbnN0eWZuLmNvbnRhaW5lckNzcyA9IGZ1bmN0aW9uKCBwcm9wTmFtZSApe1xuICB2YXIgY3kgPSB0aGlzLl9wcml2YXRlLmN5O1xuICB2YXIgZG9tRWxlbWVudCA9IGN5LmNvbnRhaW5lcigpO1xuXG4gIGlmKCB3aW5kb3cgJiYgZG9tRWxlbWVudCAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSApe1xuICAgIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZG9tRWxlbWVudCApLmdldFByb3BlcnR5VmFsdWUoIHByb3BOYW1lICk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5Zm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSggJy4uL3V0aWwnICk7XG52YXIgaXMgPSByZXF1aXJlKCAnLi4vaXMnICk7XG5cbnZhciBzdHlmbiA9IHt9O1xuXG4vLyBnZXRzIHRoZSByZW5kZXJlZCBzdHlsZSBmb3IgYW4gZWxlbWVudFxuc3R5Zm4uZ2V0UmVuZGVyZWRTdHlsZSA9IGZ1bmN0aW9uKCBlbGUsIHByb3AgKXtcbiAgaWYoIHByb3AgKXtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHlsZVByb3BlcnR5VmFsdWUoIGVsZSwgcHJvcCwgdHJ1ZSApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLmdldFJhd1N0eWxlKCBlbGUsIHRydWUgKTtcbiAgfVxufTtcblxuLy8gZ2V0cyB0aGUgcmF3IHN0eWxlIGZvciBhbiBlbGVtZW50XG5zdHlmbi5nZXRSYXdTdHlsZSA9IGZ1bmN0aW9uKCBlbGUsIGlzUmVuZGVyZWRWYWwgKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZWxlID0gZWxlWzBdOyAvLyBpbnN1cmUgaXQncyBhbiBlbGVtZW50XG5cbiAgaWYoIGVsZSApe1xuICAgIHZhciByc3R5bGUgPSB7fTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgc2VsZi5wcm9wZXJ0aWVzLmxlbmd0aDsgaSsrICl7XG4gICAgICB2YXIgcHJvcCA9IHNlbGYucHJvcGVydGllc1sgaSBdO1xuICAgICAgdmFyIHZhbCA9IHNlbGYuZ2V0U3R5bGVQcm9wZXJ0eVZhbHVlKCBlbGUsIHByb3AubmFtZSwgaXNSZW5kZXJlZFZhbCApO1xuXG4gICAgICBpZiggdmFsICE9IG51bGwgKXtcbiAgICAgICAgcnN0eWxlWyBwcm9wLm5hbWUgXSA9IHZhbDtcbiAgICAgICAgcnN0eWxlWyB1dGlsLmRhc2gyY2FtZWwoIHByb3AubmFtZSApIF0gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJzdHlsZTtcbiAgfVxufTtcblxuc3R5Zm4uZ2V0U3R5bGVQcm9wZXJ0eVZhbHVlID0gZnVuY3Rpb24oIGVsZSwgcHJvcE5hbWUsIGlzUmVuZGVyZWRWYWwgKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZWxlID0gZWxlWzBdOyAvLyBpbnN1cmUgaXQncyBhbiBlbGVtZW50XG5cbiAgaWYoIGVsZSApe1xuICAgIHZhciBwcm9wID0gc2VsZi5wcm9wZXJ0aWVzWyBwcm9wTmFtZSBdO1xuICAgIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICAgIHZhciBzdHlsZVByb3AgPSBlbGUucHN0eWxlKCBwcm9wLm5hbWUgKTtcbiAgICB2YXIgem9vbSA9IGVsZS5jeSgpLnpvb20oKTtcblxuICAgIGlmKCBzdHlsZVByb3AgKXtcbiAgICAgIHZhciB1bml0cyA9IHN0eWxlUHJvcC51bml0cyA/IHR5cGUuaW1wbGljaXRVbml0cyB8fCAncHgnIDogbnVsbDtcbiAgICAgIHZhciB2YWwgPSB1bml0cyA/IFtdLmNvbmNhdCggc3R5bGVQcm9wLnBmVmFsdWUgKS5tYXAoIGZ1bmN0aW9uKCBwZlZhbHVlICl7XG4gICAgICAgIHJldHVybiAoIHBmVmFsdWUgKiAoaXNSZW5kZXJlZFZhbCA/IHpvb20gOiAxKSApICsgdW5pdHM7XG4gICAgICB9ICkuam9pbiggJyAnICkgOiBzdHlsZVByb3Auc3RyVmFsdWU7XG5cbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG59O1xuXG5zdHlmbi5nZXRBbmltYXRpb25TdGFydFN0eWxlID0gZnVuY3Rpb24oIGVsZSwgYW5pUHJvcHMgKXtcbiAgdmFyIHJzdHlsZSA9IHt9O1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgYW5pUHJvcHMubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgYW5pUHJvcCA9IGFuaVByb3BzWyBpIF07XG4gICAgdmFyIG5hbWUgPSBhbmlQcm9wLm5hbWU7XG5cbiAgICB2YXIgc3R5bGVQcm9wID0gZWxlLnBzdHlsZSggbmFtZSApO1xuXG4gICAgaWYoIHN0eWxlUHJvcCAhPT0gdW5kZWZpbmVkICl7IC8vIHRoZW4gbWFrZSBhIHByb3Agb2YgaXRcbiAgICAgIGlmKCBpcy5wbGFpbk9iamVjdCggc3R5bGVQcm9wICkgKXtcbiAgICAgICAgc3R5bGVQcm9wID0gdGhpcy5wYXJzZSggbmFtZSwgc3R5bGVQcm9wLnN0clZhbHVlICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZVByb3AgPSB0aGlzLnBhcnNlKCBuYW1lLCBzdHlsZVByb3AgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiggc3R5bGVQcm9wICl7XG4gICAgICByc3R5bGVbIG5hbWUgXSA9IHN0eWxlUHJvcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcnN0eWxlO1xufTtcblxuc3R5Zm4uZ2V0UHJvcHNMaXN0ID0gZnVuY3Rpb24oIHByb3BzT2JqICl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHJzdHlsZSA9IFtdO1xuICB2YXIgc3R5bGUgPSBwcm9wc09iajtcbiAgdmFyIHByb3BzID0gc2VsZi5wcm9wZXJ0aWVzO1xuXG4gIGlmKCBzdHlsZSApe1xuICAgIHZhciBuYW1lcyA9IE9iamVjdC5rZXlzKCBzdHlsZSApO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIG5hbWUgPSBuYW1lc1tpXTtcbiAgICAgIHZhciB2YWwgPSBzdHlsZVsgbmFtZSBdO1xuICAgICAgdmFyIHByb3AgPSBwcm9wc1sgbmFtZSBdIHx8IHByb3BzWyB1dGlsLmNhbWVsMmRhc2goIG5hbWUgKSBdO1xuICAgICAgdmFyIHN0eWxlUHJvcCA9IHRoaXMucGFyc2UoIHByb3AubmFtZSwgdmFsICk7XG5cbiAgICAgIHJzdHlsZS5wdXNoKCBzdHlsZVByb3AgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcnN0eWxlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHlmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzID0gcmVxdWlyZSggJy4uL2lzJyApO1xudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vdXRpbCcgKTtcbnZhciBTZWxlY3RvciA9IHJlcXVpcmUoICcuLi9zZWxlY3RvcicgKTtcblxudmFyIFN0eWxlID0gZnVuY3Rpb24oIGN5ICl7XG5cbiAgaWYoICEodGhpcyBpbnN0YW5jZW9mIFN0eWxlKSApe1xuICAgIHJldHVybiBuZXcgU3R5bGUoIGN5ICk7XG4gIH1cblxuICBpZiggIWlzLmNvcmUoIGN5ICkgKXtcbiAgICB1dGlsLmVycm9yKCAnQSBzdHlsZSBtdXN0IGhhdmUgYSBjb3JlIHJlZmVyZW5jZScgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9wcml2YXRlID0ge1xuICAgIGN5OiBjeSxcbiAgICBjb3JlU3R5bGU6IHt9XG4gIH07XG5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIHRoaXMucmVzZXRUb0RlZmF1bHQoKTtcbn07XG5cbnZhciBzdHlmbiA9IFN0eWxlLnByb3RvdHlwZTtcblxuc3R5Zm4uaW5zdGFuY2VTdHJpbmcgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gJ3N0eWxlJztcbn07XG5cbi8vIHJlbW92ZSBhbGwgY29udGV4dHNcbnN0eWZuLmNsZWFyID0gZnVuY3Rpb24oKXtcbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrICl7XG4gICAgdGhpc1sgaSBdID0gdW5kZWZpbmVkO1xuICB9XG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICB2YXIgX3AgPSB0aGlzLl9wcml2YXRlO1xuXG4gIF9wLm5ld1N0eWxlID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbn07XG5cbnN0eWZuLnJlc2V0VG9EZWZhdWx0ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5jbGVhcigpO1xuICB0aGlzLmFkZERlZmF1bHRTdHlsZXNoZWV0KCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBidWlsZHMgYSBzdHlsZSBvYmplY3QgZm9yIHRoZSAnY29yZScgc2VsZWN0b3JcbnN0eWZuLmNvcmUgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5fcHJpdmF0ZS5jb3JlU3R5bGU7XG59O1xuXG4vLyBjcmVhdGUgYSBuZXcgY29udGV4dCBmcm9tIHRoZSBzcGVjaWZpZWQgc2VsZWN0b3Igc3RyaW5nIGFuZCBzd2l0Y2ggdG8gdGhhdCBjb250ZXh0XG5zdHlmbi5zZWxlY3RvciA9IGZ1bmN0aW9uKCBzZWxlY3RvclN0ciApe1xuICAvLyAnY29yZScgaXMgYSBzcGVjaWFsIGNhc2UgYW5kIGRvZXMgbm90IG5lZWQgYSBzZWxlY3RvclxuICB2YXIgc2VsZWN0b3IgPSBzZWxlY3RvclN0ciA9PT0gJ2NvcmUnID8gbnVsbCA6IG5ldyBTZWxlY3Rvciggc2VsZWN0b3JTdHIgKTtcblxuICB2YXIgaSA9IHRoaXMubGVuZ3RoKys7IC8vIG5ldyBjb250ZXh0IG1lYW5zIG5ldyBpbmRleFxuICB0aGlzWyBpIF0gPSB7XG4gICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgIHByb3BlcnRpZXM6IFtdLFxuICAgIG1hcHBlZFByb3BlcnRpZXM6IFtdLFxuICAgIGluZGV4OiBpXG4gIH07XG5cbiAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG59O1xuXG4vLyBhZGQgb25lIG9yIG1hbnkgY3NzIHJ1bGVzIHRvIHRoZSBjdXJyZW50IGNvbnRleHRcbnN0eWZuLmNzcyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgc3dpdGNoKCBhcmdzLmxlbmd0aCApe1xuICBjYXNlIDE6XG4gICAgdmFyIG1hcCA9IGFyZ3NbMF07XG5cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IHNlbGYucHJvcGVydGllcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIHByb3AgPSBzZWxmLnByb3BlcnRpZXNbIGkgXTtcbiAgICAgIHZhciBtYXBWYWwgPSBtYXBbIHByb3AubmFtZSBdO1xuXG4gICAgICBpZiggbWFwVmFsID09PSB1bmRlZmluZWQgKXtcbiAgICAgICAgbWFwVmFsID0gbWFwWyB1dGlsLmRhc2gyY2FtZWwoIHByb3AubmFtZSApIF07XG4gICAgICB9XG5cbiAgICAgIGlmKCBtYXBWYWwgIT09IHVuZGVmaW5lZCApe1xuICAgICAgICB0aGlzLmNzc1J1bGUoIHByb3AubmFtZSwgbWFwVmFsICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYnJlYWs7XG5cbiAgY2FzZSAyOlxuICAgIHRoaXMuY3NzUnVsZSggYXJnc1swXSwgYXJnc1sxXSApO1xuICAgIGJyZWFrO1xuXG4gIGRlZmF1bHQ6XG4gICAgYnJlYWs7IC8vIGRvIG5vdGhpbmcgaWYgYXJncyBhcmUgaW52YWxpZFxuICB9XG5cbiAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG59O1xuc3R5Zm4uc3R5bGUgPSBzdHlmbi5jc3M7XG5cbi8vIGFkZCBhIHNpbmdsZSBjc3MgcnVsZSB0byB0aGUgY3VycmVudCBjb250ZXh0XG5zdHlmbi5jc3NSdWxlID0gZnVuY3Rpb24oIG5hbWUsIHZhbHVlICl7XG4gIC8vIG5hbWUtdmFsdWUgcGFpclxuICB2YXIgcHJvcGVydHkgPSB0aGlzLnBhcnNlKCBuYW1lLCB2YWx1ZSApO1xuXG4gIC8vIGFkZCBwcm9wZXJ0eSB0byBjdXJyZW50IGNvbnRleHQgaWYgdmFsaWRcbiAgaWYoIHByb3BlcnR5ICl7XG4gICAgdmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7XG4gICAgdGhpc1sgaSBdLnByb3BlcnRpZXMucHVzaCggcHJvcGVydHkgKTtcbiAgICB0aGlzWyBpIF0ucHJvcGVydGllc1sgcHJvcGVydHkubmFtZSBdID0gcHJvcGVydHk7IC8vIGFsbG93IGFjY2VzcyBieSBuYW1lIGFzIHdlbGxcblxuICAgIGlmKCBwcm9wZXJ0eS5uYW1lLm1hdGNoKCAvcGllLShcXGQrKS1iYWNrZ3JvdW5kLXNpemUvICkgJiYgcHJvcGVydHkudmFsdWUgKXtcbiAgICAgIHRoaXMuX3ByaXZhdGUuaGFzUGllID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiggcHJvcGVydHkubWFwcGVkICl7XG4gICAgICB0aGlzWyBpIF0ubWFwcGVkUHJvcGVydGllcy5wdXNoKCBwcm9wZXJ0eSApO1xuICAgIH1cblxuICAgIC8vIGFkZCB0byBjb3JlIHN0eWxlIGlmIG5lY2Vzc2FyeVxuICAgIHZhciBjdXJyZW50U2VsZWN0b3JJc0NvcmUgPSAhdGhpc1sgaSBdLnNlbGVjdG9yO1xuICAgIGlmKCBjdXJyZW50U2VsZWN0b3JJc0NvcmUgKXtcbiAgICAgIHRoaXMuX3ByaXZhdGUuY29yZVN0eWxlWyBwcm9wZXJ0eS5uYW1lIF0gPSBwcm9wZXJ0eTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbn07XG5cbi8vIHN0YXRpYyBmdW5jdGlvblxuU3R5bGUuZnJvbUpzb24gPSBmdW5jdGlvbiggY3ksIGpzb24gKXtcbiAgdmFyIHN0eWxlID0gbmV3IFN0eWxlKCBjeSApO1xuXG4gIHN0eWxlLmZyb21Kc29uKCBqc29uICk7XG5cbiAgcmV0dXJuIHN0eWxlO1xufTtcblxuU3R5bGUuZnJvbVN0cmluZyA9IGZ1bmN0aW9uKCBjeSwgc3RyaW5nICl7XG4gIHJldHVybiBuZXcgU3R5bGUoIGN5ICkuZnJvbVN0cmluZyggc3RyaW5nICk7XG59O1xuXG5bXG4gIHJlcXVpcmUoICcuL2FwcGx5JyApLFxuICByZXF1aXJlKCAnLi9ieXBhc3MnICksXG4gIHJlcXVpcmUoICcuL2NvbnRhaW5lcicgKSxcbiAgcmVxdWlyZSggJy4vZ2V0LWZvci1lbGUnICksXG4gIHJlcXVpcmUoICcuL2pzb24nICksXG4gIHJlcXVpcmUoICcuL3N0cmluZy1zaGVldCcgKSxcbiAgcmVxdWlyZSggJy4vcHJvcGVydGllcycgKSxcbiAgcmVxdWlyZSggJy4vcGFyc2UnIClcbl0uZm9yRWFjaCggZnVuY3Rpb24oIHByb3BzICl7XG4gIHV0aWwuZXh0ZW5kKCBzdHlmbiwgcHJvcHMgKTtcbn0gKTtcblxuXG5TdHlsZS50eXBlcyA9IHN0eWZuLnR5cGVzO1xuU3R5bGUucHJvcGVydGllcyA9IHN0eWZuLnByb3BlcnRpZXM7XG5cbm1vZHVsZS5leHBvcnRzID0gU3R5bGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdHlmbiA9IHt9O1xuXG5zdHlmbi5hcHBseUZyb21Kc29uID0gZnVuY3Rpb24oIGpzb24gKXtcbiAgdmFyIHN0eWxlID0gdGhpcztcblxuICBmb3IoIHZhciBpID0gMDsgaSA8IGpzb24ubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgY29udGV4dCA9IGpzb25bIGkgXTtcbiAgICB2YXIgc2VsZWN0b3IgPSBjb250ZXh0LnNlbGVjdG9yO1xuICAgIHZhciBwcm9wcyA9IGNvbnRleHQuc3R5bGUgfHwgY29udGV4dC5jc3M7XG4gICAgdmFyIG5hbWVzID0gT2JqZWN0LmtleXMoIHByb3BzICk7XG5cbiAgICBzdHlsZS5zZWxlY3Rvciggc2VsZWN0b3IgKTsgLy8gYXBwbHkgc2VsZWN0b3JcblxuICAgIGZvciggdmFyIGogPSAwOyBqIDwgbmFtZXMubGVuZ3RoOyBqKysgKXtcbiAgICAgIHZhciBuYW1lID0gbmFtZXNbal07XG4gICAgICB2YXIgdmFsdWUgPSBwcm9wc1sgbmFtZSBdO1xuXG4gICAgICBzdHlsZS5jc3MoIG5hbWUsIHZhbHVlICk7IC8vIGFwcGx5IHByb3BlcnR5XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufTtcblxuLy8gYWNjZXNzaWJsZSBjeS5zdHlsZSgpIGZ1bmN0aW9uXG5zdHlmbi5mcm9tSnNvbiA9IGZ1bmN0aW9uKCBqc29uICl7XG4gIHZhciBzdHlsZSA9IHRoaXM7XG5cbiAgc3R5bGUucmVzZXRUb0RlZmF1bHQoKTtcbiAgc3R5bGUuYXBwbHlGcm9tSnNvbigganNvbiApO1xuXG4gIHJldHVybiBzdHlsZTtcbn07XG5cbi8vIGdldCBqc29uIGZyb20gY3kuc3R5bGUoKSBhcGlcbnN0eWZuLmpzb24gPSBmdW5jdGlvbigpe1xuICB2YXIganNvbiA9IFtdO1xuXG4gIGZvciggdmFyIGkgPSB0aGlzLmRlZmF1bHRMZW5ndGg7IGkgPCB0aGlzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGN4dCA9IHRoaXNbIGkgXTtcbiAgICB2YXIgc2VsZWN0b3IgPSBjeHQuc2VsZWN0b3I7XG4gICAgdmFyIHByb3BzID0gY3h0LnByb3BlcnRpZXM7XG4gICAgdmFyIGNzcyA9IHt9O1xuXG4gICAgZm9yKCB2YXIgaiA9IDA7IGogPCBwcm9wcy5sZW5ndGg7IGorKyApe1xuICAgICAgdmFyIHByb3AgPSBwcm9wc1sgaiBdO1xuICAgICAgY3NzWyBwcm9wLm5hbWUgXSA9IHByb3Auc3RyVmFsdWU7XG4gICAgfVxuXG4gICAganNvbi5wdXNoKCB7XG4gICAgICBzZWxlY3RvcjogIXNlbGVjdG9yID8gJ2NvcmUnIDogc2VsZWN0b3IudG9TdHJpbmcoKSxcbiAgICAgIHN0eWxlOiBjc3NcbiAgICB9ICk7XG4gIH1cblxuICByZXR1cm4ganNvbjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5Zm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSggJy4uL3V0aWwnICk7XG52YXIgaXMgPSByZXF1aXJlKCAnLi4vaXMnICk7XG52YXIgbWF0aCA9IHJlcXVpcmUoICcuLi9tYXRoJyApO1xuXG52YXIgc3R5Zm4gPSB7fTtcblxuLy8gYSBjYWNoaW5nIGxheWVyIGZvciBwcm9wZXJ0eSBwYXJzaW5nXG5zdHlmbi5wYXJzZSA9IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSwgcHJvcElzQnlwYXNzLCBwcm9wSXNGbGF0ICl7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyBmdW5jdGlvbiB2YWx1ZXMgY2FuJ3QgYmUgY2FjaGVkIGluIGFsbCBjYXNlcywgYW5kIHRoZXJlIGlzbid0IG11Y2ggYmVuZWZpdCBvZiBjYWNoaW5nIHRoZW0gYW55d2F5XG4gIGlmKCBpcy5mbiggdmFsdWUgKSApe1xuICAgIHJldHVybiBzZWxmLnBhcnNlSW1wbFdhcm4oIG5hbWUsIHZhbHVlLCBwcm9wSXNCeXBhc3MsIHByb3BJc0ZsYXQgKTtcbiAgfVxuXG4gIHZhciBmbGF0S2V5ID0gKCBwcm9wSXNGbGF0ID09PSAnbWFwcGluZycgfHwgcHJvcElzRmxhdCA9PT0gdHJ1ZSB8fCBwcm9wSXNGbGF0ID09PSBmYWxzZSB8fCBwcm9wSXNGbGF0ID09IG51bGwgKSA/ICdkb250Y2FyZScgOiBwcm9wSXNGbGF0O1xuICB2YXIgYXJnSGFzaCA9IFsgbmFtZSwgdmFsdWUsIHByb3BJc0J5cGFzcywgZmxhdEtleSBdLmpvaW4oICckJyApO1xuICB2YXIgcHJvcENhY2hlID0gc2VsZi5wcm9wQ2FjaGUgPSBzZWxmLnByb3BDYWNoZSB8fCB7fTtcbiAgdmFyIHJldDtcblxuICBpZiggIShyZXQgPSBwcm9wQ2FjaGVbIGFyZ0hhc2ggXSkgKXtcbiAgICByZXQgPSBwcm9wQ2FjaGVbIGFyZ0hhc2ggXSA9IHNlbGYucGFyc2VJbXBsV2FybiggbmFtZSwgdmFsdWUsIHByb3BJc0J5cGFzcywgcHJvcElzRmxhdCApO1xuICB9XG5cbiAgLy8gLSBieXBhc3NlcyBjYW4ndCBiZSBzaGFyZWQgYi9jIHRoZSB2YWx1ZSBjYW4gYmUgY2hhbmdlZCBieSBhbmltYXRpb25zIG9yIG90aGVyd2lzZSBvdmVycmlkZGVuXG4gIC8vIC0gbWFwcGluZ3MgY2FuJ3QgYmUgc2hhcmVkIGIvYyBtYXBwaW5ncyBhcmUgcGVyLWVsZW1lbnRcbiAgaWYoIHByb3BJc0J5cGFzcyB8fCBwcm9wSXNGbGF0ID09PSAnbWFwcGluZycgKXtcbiAgICAvLyBuZWVkIGEgY29weSBzaW5jZSBwcm9wcyBhcmUgbXV0YXRlZCBsYXRlciBpbiB0aGVpciBsaWZlY3ljbGVzXG4gICAgcmV0ID0gdXRpbC5jb3B5KCByZXQgKTtcblxuICAgIGlmKCByZXQgKXtcbiAgICAgIHJldC52YWx1ZSA9IHV0aWwuY29weSggcmV0LnZhbHVlICk7IC8vIGJlY2F1c2UgaXQgY291bGQgYmUgYW4gYXJyYXksIGUuZy4gY29sb3VyXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbnN0eWZuLnBhcnNlSW1wbFdhcm4gPSBmdW5jdGlvbiggbmFtZSwgdmFsdWUsIHByb3BJc0J5cGFzcywgcHJvcElzRmxhdCApe1xuICB2YXIgcHJvcCA9IHRoaXMucGFyc2VJbXBsKCBuYW1lLCB2YWx1ZSwgcHJvcElzQnlwYXNzLCBwcm9wSXNGbGF0ICk7XG5cbiAgaWYoICFwcm9wICYmIHZhbHVlICE9IG51bGwgKXtcbiAgICB1dGlsLmVycm9yKCdUaGUgc3R5bGUgcHJvcGVydHkgYCVzOiAlc2AgaXMgaW52YWxpZCcsIG5hbWUsIHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBwcm9wO1xufTtcblxuLy8gcGFyc2UgYSBwcm9wZXJ0eTsgcmV0dXJuIG51bGwgb24gaW52YWxpZDsgcmV0dXJuIHBhcnNlZCBwcm9wZXJ0eSBvdGhlcndpc2Vcbi8vIGZpZWxkcyA6XG4vLyAtIG5hbWUgOiB0aGUgbmFtZSBvZiB0aGUgcHJvcGVydHlcbi8vIC0gdmFsdWUgOiB0aGUgcGFyc2VkLCBuYXRpdmUtdHlwZWQgdmFsdWUgb2YgdGhlIHByb3BlcnR5XG4vLyAtIHN0clZhbHVlIDogYSBzdHJpbmcgdmFsdWUgdGhhdCByZXByZXNlbnRzIHRoZSBwcm9wZXJ0eSB2YWx1ZSBpbiB2YWxpZCBjc3Ncbi8vIC0gYnlwYXNzIDogdHJ1ZSBpZmYgdGhlIHByb3BlcnR5IGlzIGEgYnlwYXNzIHByb3BlcnR5XG5zdHlmbi5wYXJzZUltcGwgPSBmdW5jdGlvbiggbmFtZSwgdmFsdWUsIHByb3BJc0J5cGFzcywgcHJvcElzRmxhdCApe1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgbmFtZSA9IHV0aWwuY2FtZWwyZGFzaCggbmFtZSApOyAvLyBtYWtlIHN1cmUgdGhlIHByb3BlcnR5IG5hbWUgaXMgaW4gZGFzaCBmb3JtIChlLmcuICdwcm9wZXJ0eS1uYW1lJyBub3QgJ3Byb3BlcnR5TmFtZScpXG5cbiAgdmFyIHByb3BlcnR5ID0gc2VsZi5wcm9wZXJ0aWVzWyBuYW1lIF07XG4gIHZhciBwYXNzZWRWYWx1ZSA9IHZhbHVlO1xuICB2YXIgdHlwZXMgPSBzZWxmLnR5cGVzO1xuXG4gIGlmKCAhcHJvcGVydHkgKXsgcmV0dXJuIG51bGw7IH0gLy8gcmV0dXJuIG51bGwgb24gcHJvcGVydHkgb2YgdW5rbm93biBuYW1lXG4gIGlmKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsICl7IHJldHVybiBudWxsOyB9IC8vIGNhbid0IGFzc2lnbiBudWxsXG5cbiAgLy8gdGhlIHByb3BlcnR5IG1heSBiZSBhbiBhbGlhc1xuICBpZiggcHJvcGVydHkuYWxpYXMgKXtcbiAgICBwcm9wZXJ0eSA9IHByb3BlcnR5LnBvaW50c1RvO1xuICAgIG5hbWUgPSBwcm9wZXJ0eS5uYW1lO1xuICB9XG5cbiAgdmFyIHZhbHVlSXNTdHJpbmcgPSBpcy5zdHJpbmcoIHZhbHVlICk7XG4gIGlmKCB2YWx1ZUlzU3RyaW5nICl7IC8vIHRyaW0gdGhlIHZhbHVlIHRvIG1ha2UgcGFyc2luZyBlYXNpZXJcbiAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgfVxuXG4gIHZhciB0eXBlID0gcHJvcGVydHkudHlwZTtcbiAgaWYoICF0eXBlICl7IHJldHVybiBudWxsOyB9IC8vIG5vIHR5cGUsIG5vIGx1Y2tcblxuICAvLyBjaGVjayBpZiBieXBhc3MgaXMgbnVsbCBvciBlbXB0eSBzdHJpbmcgKGkuZS4gaW5kaWNhdGlvbiB0byBkZWxldGUgYnlwYXNzIHByb3BlcnR5KVxuICBpZiggcHJvcElzQnlwYXNzICYmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IG51bGwpICl7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBieXBhc3M6IHRydWUsXG4gICAgICBkZWxldGVCeXBhc3M6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgLy8gY2hlY2sgaWYgdmFsdWUgaXMgYSBmdW5jdGlvbiB1c2VkIGFzIGEgbWFwcGVyXG4gIGlmKCBpcy5mbiggdmFsdWUgKSApe1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgc3RyVmFsdWU6ICdmbicsXG4gICAgICBtYXBwZWQ6IHR5cGVzLmZuLFxuICAgICAgYnlwYXNzOiBwcm9wSXNCeXBhc3NcbiAgICB9O1xuICB9XG5cbiAgLy8gY2hlY2sgaWYgdmFsdWUgaXMgbWFwcGVkXG4gIHZhciBkYXRhLCBtYXBEYXRhLCBsYXlvdXREYXRhLCBtYXBMYXlvdXREYXRhLCBzY3JhdGNoLCBtYXBTY3JhdGNoO1xuICBpZiggIXZhbHVlSXNTdHJpbmcgfHwgcHJvcElzRmxhdCApe1xuICAgIC8vIHRoZW4gZG9uJ3QgYm90aGVyIHRvIGRvIHRoZSBleHBlbnNpdmUgcmVnZXggY2hlY2tzXG5cbiAgfSBlbHNlIGlmKFxuICAgICggZGF0YSA9IG5ldyBSZWdFeHAoIHR5cGVzLmRhdGEucmVnZXggKS5leGVjKCB2YWx1ZSApICkgfHxcbiAgICAoIGxheW91dERhdGEgPSBuZXcgUmVnRXhwKCB0eXBlcy5sYXlvdXREYXRhLnJlZ2V4ICkuZXhlYyggdmFsdWUgKSApIHx8XG4gICAgKCBzY3JhdGNoID0gbmV3IFJlZ0V4cCggdHlwZXMuc2NyYXRjaC5yZWdleCApLmV4ZWMoIHZhbHVlICkgKVxuICApe1xuICAgIGlmKCBwcm9wSXNCeXBhc3MgKXsgcmV0dXJuIGZhbHNlOyB9IC8vIG1hcHBlcnMgbm90IGFsbG93ZWQgaW4gYnlwYXNzXG5cbiAgICB2YXIgbWFwcGVkO1xuICAgIGlmKCBkYXRhICl7XG4gICAgICBtYXBwZWQgPSB0eXBlcy5kYXRhO1xuICAgIH0gZWxzZSBpZiggbGF5b3V0RGF0YSApe1xuICAgICAgbWFwcGVkID0gdHlwZXMubGF5b3V0RGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWFwcGVkID0gdHlwZXMuc2NyYXRjaDtcbiAgICB9XG5cbiAgICBkYXRhID0gZGF0YSB8fCBsYXlvdXREYXRhIHx8IHNjcmF0Y2g7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHZhbHVlOiBkYXRhLFxuICAgICAgc3RyVmFsdWU6ICcnICsgdmFsdWUsXG4gICAgICBtYXBwZWQ6IG1hcHBlZCxcbiAgICAgIGZpZWxkOiBkYXRhWzFdLFxuICAgICAgYnlwYXNzOiBwcm9wSXNCeXBhc3NcbiAgICB9O1xuXG4gIH0gZWxzZSBpZihcbiAgICAoIG1hcERhdGEgPSBuZXcgUmVnRXhwKCB0eXBlcy5tYXBEYXRhLnJlZ2V4ICkuZXhlYyggdmFsdWUgKSApIHx8XG4gICAgKCBtYXBMYXlvdXREYXRhID0gbmV3IFJlZ0V4cCggdHlwZXMubWFwTGF5b3V0RGF0YS5yZWdleCApLmV4ZWMoIHZhbHVlICkgKSB8fFxuICAgICggbWFwU2NyYXRjaCA9IG5ldyBSZWdFeHAoIHR5cGVzLm1hcFNjcmF0Y2gucmVnZXggKS5leGVjKCB2YWx1ZSApIClcbiAgKXtcbiAgICBpZiggcHJvcElzQnlwYXNzICl7IHJldHVybiBmYWxzZTsgfSAvLyBtYXBwZXJzIG5vdCBhbGxvd2VkIGluIGJ5cGFzc1xuICAgIGlmKCB0eXBlLm11bHRpcGxlICl7IHJldHVybiBmYWxzZTsgfSAvLyBpbXBvc3NpYmxlIHRvIG1hcCB0byBudW1cblxuICAgIHZhciBtYXBwZWQ7XG4gICAgaWYoIG1hcERhdGEgKXtcbiAgICAgIG1hcHBlZCA9IHR5cGVzLm1hcERhdGE7XG4gICAgfSBlbHNlIGlmKCBtYXBMYXlvdXREYXRhICl7XG4gICAgICBtYXBwZWQgPSB0eXBlcy5tYXBMYXlvdXREYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYXBwZWQgPSB0eXBlcy5tYXBTY3JhdGNoO1xuICAgIH1cblxuICAgIG1hcERhdGEgPSBtYXBEYXRhIHx8IG1hcExheW91dERhdGEgfHwgbWFwU2NyYXRjaDtcblxuICAgIC8vIHdlIGNhbiBtYXAgb25seSBpZiB0aGUgdHlwZSBpcyBhIGNvbG91ciBvciBhIG51bWJlclxuICAgIGlmKCAhKHR5cGUuY29sb3IgfHwgdHlwZS5udW1iZXIpICl7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgdmFyIHZhbHVlTWluID0gdGhpcy5wYXJzZSggbmFtZSwgbWFwRGF0YVs0XSApOyAvLyBwYXJzZSB0byB2YWxpZGF0ZVxuICAgIGlmKCAhdmFsdWVNaW4gfHwgdmFsdWVNaW4ubWFwcGVkICl7IHJldHVybiBmYWxzZTsgfSAvLyBjYW4ndCBiZSBpbnZhbGlkIG9yIG1hcHBlZFxuXG4gICAgdmFyIHZhbHVlTWF4ID0gdGhpcy5wYXJzZSggbmFtZSwgbWFwRGF0YVs1XSApOyAvLyBwYXJzZSB0byB2YWxpZGF0ZVxuICAgIGlmKCAhdmFsdWVNYXggfHwgdmFsdWVNYXgubWFwcGVkICl7IHJldHVybiBmYWxzZTsgfSAvLyBjYW4ndCBiZSBpbnZhbGlkIG9yIG1hcHBlZFxuXG4gICAgLy8gY2hlY2sgaWYgdmFsdWVNaW4gYW5kIHZhbHVlTWF4IGFyZSB0aGUgc2FtZVxuICAgIGlmKCB2YWx1ZU1pbi52YWx1ZSA9PT0gdmFsdWVNYXgudmFsdWUgKXtcbiAgICAgIHJldHVybiBmYWxzZTsgLy8gY2FuJ3QgbWFrZSBtdWNoIG9mIGEgbWFwcGVyIHdpdGhvdXQgYSByYW5nZVxuXG4gICAgfSBlbHNlIGlmKCB0eXBlLmNvbG9yICl7XG4gICAgICB2YXIgYzEgPSB2YWx1ZU1pbi52YWx1ZTtcbiAgICAgIHZhciBjMiA9IHZhbHVlTWF4LnZhbHVlO1xuXG4gICAgICB2YXIgc2FtZSA9IGMxWzBdID09PSBjMlswXSAvLyByZWRcbiAgICAgICAgJiYgYzFbMV0gPT09IGMyWzFdIC8vIGdyZWVuXG4gICAgICAgICYmIGMxWzJdID09PSBjMlsyXSAvLyBibHVlXG4gICAgICAgICYmICggLy8gb3B0aW9uYWwgYWxwaGFcbiAgICAgICAgICBjMVszXSA9PT0gYzJbM10gLy8gc2FtZSBhbHBoYSBvdXRyaWdodFxuICAgICAgICAgIHx8IChcbiAgICAgICAgICAgIChjMVszXSA9PSBudWxsIHx8IGMxWzNdID09PSAxKSAvLyBmdWxsIG9wYWNpdHkgZm9yIGNvbG91ciAxP1xuICAgICAgICAgICAgJiZcbiAgICAgICAgICAgIChjMlszXSA9PSBudWxsIHx8IGMyWzNdID09PSAxKSAvLyBmdWxsIG9wYWNpdHkgZm9yIGNvbG91ciAyP1xuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgO1xuXG4gICAgICBpZiggc2FtZSApeyByZXR1cm4gZmFsc2U7IH0gLy8gY2FuJ3QgbWFrZSBhIG1hcHBlciB3aXRob3V0IGEgcmFuZ2VcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHZhbHVlOiBtYXBEYXRhLFxuICAgICAgc3RyVmFsdWU6ICcnICsgdmFsdWUsXG4gICAgICBtYXBwZWQ6IG1hcHBlZCxcbiAgICAgIGZpZWxkOiBtYXBEYXRhWzFdLFxuICAgICAgZmllbGRNaW46IHBhcnNlRmxvYXQoIG1hcERhdGFbMl0gKSwgLy8gbWluICYgbWF4IGFyZSBudW1lcmljXG4gICAgICBmaWVsZE1heDogcGFyc2VGbG9hdCggbWFwRGF0YVszXSApLFxuICAgICAgdmFsdWVNaW46IHZhbHVlTWluLnZhbHVlLFxuICAgICAgdmFsdWVNYXg6IHZhbHVlTWF4LnZhbHVlLFxuICAgICAgYnlwYXNzOiBwcm9wSXNCeXBhc3NcbiAgICB9O1xuICB9XG5cbiAgaWYoIHR5cGUubXVsdGlwbGUgJiYgcHJvcElzRmxhdCAhPT0gJ211bHRpcGxlJyApe1xuICAgIHZhciB2YWxzO1xuXG4gICAgaWYoIHZhbHVlSXNTdHJpbmcgKXtcbiAgICAgIHZhbHMgPSB2YWx1ZS5zcGxpdCggL1xccysvICk7XG4gICAgfSBlbHNlIGlmKCBpcy5hcnJheSggdmFsdWUgKSApe1xuICAgICAgdmFscyA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWxzID0gWyB2YWx1ZSBdO1xuICAgIH1cblxuICAgIGlmKCB0eXBlLmV2ZW5NdWx0aXBsZSAmJiB2YWxzLmxlbmd0aCAlIDIgIT09IDAgKXsgcmV0dXJuIG51bGw7IH1cblxuICAgIHZhciB2YWxBcnIgPSB2YWxzLm1hcCggZnVuY3Rpb24oIHYgKXtcbiAgICAgIHZhciBwID0gc2VsZi5wYXJzZSggbmFtZSwgdiwgcHJvcElzQnlwYXNzLCAnbXVsdGlwbGUnICk7XG5cbiAgICAgIGlmKCBwLnBmVmFsdWUgIT0gbnVsbCApe1xuICAgICAgICByZXR1cm4gcC5wZlZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHAudmFsdWU7XG4gICAgICB9XG4gICAgfSApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB2YWx1ZTogdmFsQXJyLFxuICAgICAgcGZWYWx1ZTogdmFsQXJyLFxuICAgICAgc3RyVmFsdWU6IHZhbEFyci5qb2luKCAnICcgKSxcbiAgICAgIGJ5cGFzczogcHJvcElzQnlwYXNzLFxuICAgICAgdW5pdHM6IHR5cGUubnVtYmVyICYmICF0eXBlLnVuaXRsZXNzID8gdHlwZS5pbXBsaWNpdFVuaXRzIHx8ICdweCcgOiB1bmRlZmluZWRcbiAgICB9O1xuICB9XG5cbiAgLy8gc2V2ZXJhbCB0eXBlcyBhbHNvIGFsbG93IGVudW1zXG4gIHZhciBjaGVja0VudW1zID0gZnVuY3Rpb24oKXtcbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IHR5cGUuZW51bXMubGVuZ3RoOyBpKysgKXtcbiAgICAgIHZhciBlbiA9IHR5cGUuZW51bXNbIGkgXTtcblxuICAgICAgaWYoIGVuID09PSB2YWx1ZSApe1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIHN0clZhbHVlOiAnJyArIHZhbHVlLFxuICAgICAgICAgIGJ5cGFzczogcHJvcElzQnlwYXNzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLy8gY2hlY2sgdGhlIHR5cGUgYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgb2JqZWN0XG4gIGlmKCB0eXBlLm51bWJlciApe1xuICAgIHZhciB1bml0cztcbiAgICB2YXIgaW1wbGljaXRVbml0cyA9ICdweCc7IC8vIG5vdCBzZXQgPT4gcHhcblxuICAgIGlmKCB0eXBlLnVuaXRzICl7IC8vIHVzZSBzcGVjaWZpZWQgdW5pdHMgaWYgc2V0XG4gICAgICB1bml0cyA9IHR5cGUudW5pdHM7XG4gICAgfVxuXG4gICAgaWYoIHR5cGUuaW1wbGljaXRVbml0cyApe1xuICAgICAgaW1wbGljaXRVbml0cyA9IHR5cGUuaW1wbGljaXRVbml0cztcbiAgICB9XG5cbiAgICBpZiggIXR5cGUudW5pdGxlc3MgKXtcbiAgICAgIGlmKCB2YWx1ZUlzU3RyaW5nICl7XG4gICAgICAgIHZhciB1bml0c1JlZ2V4ID0gJ3B4fGVtJyArICh0eXBlLmFsbG93UGVyY2VudCA/ICd8XFxcXCUnIDogJycpO1xuICAgICAgICBpZiggdW5pdHMgKXsgdW5pdHNSZWdleCA9IHVuaXRzOyB9IC8vIG9ubHkgYWxsb3cgZXhwbGljaXQgdW5pdHMgaWYgc28gc2V0XG4gICAgICAgIHZhciBtYXRjaCA9IHZhbHVlLm1hdGNoKCAnXignICsgdXRpbC5yZWdleC5udW1iZXIgKyAnKSgnICsgdW5pdHNSZWdleCArICcpPycgKyAnJCcgKTtcblxuICAgICAgICBpZiggbWF0Y2ggKXtcbiAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzFdO1xuICAgICAgICAgIHVuaXRzID0gbWF0Y2hbMl0gfHwgaW1wbGljaXRVbml0cztcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYoICF1bml0cyB8fCB0eXBlLmltcGxpY2l0VW5pdHMgKXtcbiAgICAgICAgdW5pdHMgPSBpbXBsaWNpdFVuaXRzOyAvLyBpbXBsaWNpdGx5IHB4IGlmIHVuc3BlY2lmaWVkXG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsdWUgPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuXG4gICAgLy8gaWYgbm90IGEgbnVtYmVyIGFuZCBlbnVtcyBub3QgYWxsb3dlZCwgdGhlbiB0aGUgdmFsdWUgaXMgaW52YWxpZFxuICAgIGlmKCBpc05hTiggdmFsdWUgKSAmJiB0eXBlLmVudW1zID09PSB1bmRlZmluZWQgKXtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIHRoaXMgbnVtYmVyIHR5cGUgYWxzbyBhY2NlcHRzIHNwZWNpYWwga2V5d29yZHMgaW4gcGxhY2Ugb2YgbnVtYmVyc1xuICAgIC8vIChpLmUuIGBsZWZ0YCwgYGF1dG9gLCBldGMpXG4gICAgaWYoIGlzTmFOKCB2YWx1ZSApICYmIHR5cGUuZW51bXMgIT09IHVuZGVmaW5lZCApe1xuICAgICAgdmFsdWUgPSBwYXNzZWRWYWx1ZTtcblxuICAgICAgcmV0dXJuIGNoZWNrRW51bXMoKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiB2YWx1ZSBtdXN0IGJlIGFuIGludGVnZXJcbiAgICBpZiggdHlwZS5pbnRlZ2VyICYmICFpcy5pbnRlZ2VyKCB2YWx1ZSApICl7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBjaGVjayB2YWx1ZSBpcyB3aXRoaW4gcmFuZ2VcbiAgICBpZiggKHR5cGUubWluICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgPCB0eXBlLm1pbilcbiAgICB8fCAodHlwZS5tYXggIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+IHR5cGUubWF4KVxuICAgICl7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcmV0ID0ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHN0clZhbHVlOiAnJyArIHZhbHVlICsgKHVuaXRzID8gdW5pdHMgOiAnJyksXG4gICAgICB1bml0czogdW5pdHMsXG4gICAgICBieXBhc3M6IHByb3BJc0J5cGFzc1xuICAgIH07XG5cbiAgICAvLyBub3JtYWxpc2UgdmFsdWUgaW4gcGl4ZWxzXG4gICAgaWYoIHR5cGUudW5pdGxlc3MgfHwgKHVuaXRzICE9PSAncHgnICYmIHVuaXRzICE9PSAnZW0nKSApe1xuICAgICAgcmV0LnBmVmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0LnBmVmFsdWUgPSAoIHVuaXRzID09PSAncHgnIHx8ICF1bml0cyA/ICh2YWx1ZSkgOiAodGhpcy5nZXRFbVNpemVJblBpeGVscygpICogdmFsdWUpICk7XG4gICAgfVxuXG4gICAgLy8gbm9ybWFsaXNlIHZhbHVlIGluIG1zXG4gICAgaWYoIHVuaXRzID09PSAnbXMnIHx8IHVuaXRzID09PSAncycgKXtcbiAgICAgIHJldC5wZlZhbHVlID0gdW5pdHMgPT09ICdtcycgPyB2YWx1ZSA6IDEwMDAgKiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBub3JtYWxpc2UgdmFsdWUgaW4gcmFkXG4gICAgaWYoIHVuaXRzID09PSAnZGVnJyB8fCB1bml0cyA9PT0gJ3JhZCcgKXtcbiAgICAgIHJldC5wZlZhbHVlID0gdW5pdHMgPT09ICdyYWQnID8gdmFsdWUgOiBtYXRoLmRlZzJyYWQoIHZhbHVlICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcblxuICB9IGVsc2UgaWYoIHR5cGUucHJvcExpc3QgKXtcblxuICAgIHZhciBwcm9wcyA9IFtdO1xuICAgIHZhciBwcm9wc1N0ciA9ICcnICsgdmFsdWU7XG5cbiAgICBpZiggcHJvcHNTdHIgPT09ICdub25lJyApe1xuICAgICAgLy8gbGVhdmUgZW1wdHlcblxuICAgIH0gZWxzZSB7IC8vIGdvIG92ZXIgZWFjaCBwcm9wXG5cbiAgICAgIHZhciBwcm9wc1NwbGl0ID0gcHJvcHNTdHIuc3BsaXQoICcsJyApO1xuICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBwcm9wc1NwbGl0Lmxlbmd0aDsgaSsrICl7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IHByb3BzU3BsaXRbIGkgXS50cmltKCk7XG5cbiAgICAgICAgaWYoIHNlbGYucHJvcGVydGllc1sgcHJvcE5hbWUgXSApe1xuICAgICAgICAgIHByb3BzLnB1c2goIHByb3BOYW1lICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYoIHByb3BzLmxlbmd0aCA9PT0gMCApeyByZXR1cm4gbnVsbDsgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgdmFsdWU6IHByb3BzLFxuICAgICAgc3RyVmFsdWU6IHByb3BzLmxlbmd0aCA9PT0gMCA/ICdub25lJyA6IHByb3BzLmpvaW4oICcsICcgKSxcbiAgICAgIGJ5cGFzczogcHJvcElzQnlwYXNzXG4gICAgfTtcblxuICB9IGVsc2UgaWYoIHR5cGUuY29sb3IgKXtcbiAgICB2YXIgdHVwbGUgPSB1dGlsLmNvbG9yMnR1cGxlKCB2YWx1ZSApO1xuXG4gICAgaWYoICF0dXBsZSApeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB2YWx1ZTogdHVwbGUsXG4gICAgICBzdHJWYWx1ZTogJycgKyB2YWx1ZSxcbiAgICAgIGJ5cGFzczogcHJvcElzQnlwYXNzLFxuICAgICAgcm91bmRWYWx1ZTogdHJ1ZVxuICAgIH07XG5cbiAgfSBlbHNlIGlmKCB0eXBlLnJlZ2V4IHx8IHR5cGUucmVnZXhlcyApe1xuXG4gICAgLy8gZmlyc3QgY2hlY2sgZW51bXNcbiAgICBpZiggdHlwZS5lbnVtcyApe1xuICAgICAgdmFyIGVudW1Qcm9wID0gY2hlY2tFbnVtcygpO1xuXG4gICAgICBpZiggZW51bVByb3AgKXsgcmV0dXJuIGVudW1Qcm9wOyB9XG4gICAgfVxuXG4gICAgdmFyIHJlZ2V4ZXMgPSB0eXBlLnJlZ2V4ZXMgPyB0eXBlLnJlZ2V4ZXMgOiBbIHR5cGUucmVnZXggXTtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgcmVnZXhlcy5sZW5ndGg7IGkrKyApe1xuICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCggcmVnZXhlc1sgaSBdICk7IC8vIG1ha2UgYSByZWdleCBmcm9tIHRoZSB0eXBlIHN0cmluZ1xuICAgICAgdmFyIG0gPSByZWdleC5leGVjKCB2YWx1ZSApO1xuXG4gICAgICBpZiggbSApeyAvLyByZWdleCBtYXRjaGVzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICB2YWx1ZTogbSxcbiAgICAgICAgICBzdHJWYWx1ZTogJycgKyB2YWx1ZSxcbiAgICAgICAgICBieXBhc3M6IHByb3BJc0J5cGFzc1xuICAgICAgICB9O1xuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7IC8vIGRpZG4ndCBtYXRjaCBhbnlcblxuICB9IGVsc2UgaWYoIHR5cGUuc3RyaW5nICl7XG4gICAgLy8ganVzdCByZXR1cm5cbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHZhbHVlOiAnJyArIHZhbHVlLFxuICAgICAgc3RyVmFsdWU6ICcnICsgdmFsdWUsXG4gICAgICBieXBhc3M6IHByb3BJc0J5cGFzc1xuICAgIH07XG5cbiAgfSBlbHNlIGlmKCB0eXBlLmVudW1zICl7IC8vIGNoZWNrIGVudW1zIGxhc3QgYmVjYXVzZSBpdCdzIGEgY29tYm8gdHlwZSBpbiBvdGhlcnNcbiAgICByZXR1cm4gY2hlY2tFbnVtcygpO1xuXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7IC8vIG5vdCBhIHR5cGUgd2UgY2FuIGhhbmRsZVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5Zm47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSggJy4uL3V0aWwnICk7XG5cbnZhciBzdHlmbiA9IHt9O1xuXG4oZnVuY3Rpb24oKXtcbiAgdmFyIG51bWJlciA9IHV0aWwucmVnZXgubnVtYmVyO1xuICB2YXIgcmdiYSA9IHV0aWwucmVnZXgucmdiYU5vQmFja1JlZnM7XG4gIHZhciBoc2xhID0gdXRpbC5yZWdleC5oc2xhTm9CYWNrUmVmcztcbiAgdmFyIGhleDMgPSB1dGlsLnJlZ2V4LmhleDM7XG4gIHZhciBoZXg2ID0gdXRpbC5yZWdleC5oZXg2O1xuICB2YXIgZGF0YSA9IGZ1bmN0aW9uKCBwcmVmaXggKXsgcmV0dXJuICdeJyArIHByZWZpeCArICdcXFxccypcXFxcKFxcXFxzKihbXFxcXHdcXFxcLl0rKVxcXFxzKlxcXFwpJCc7IH07XG4gIHZhciBtYXBEYXRhID0gZnVuY3Rpb24oIHByZWZpeCApe1xuICAgIHZhciBtYXBBcmcgPSBudW1iZXIgKyAnfFxcXFx3K3wnICsgcmdiYSArICd8JyArIGhzbGEgKyAnfCcgKyBoZXgzICsgJ3wnICsgaGV4NjtcbiAgICByZXR1cm4gJ14nICsgcHJlZml4ICsgJ1xcXFxzKlxcXFwoKFtcXFxcd1xcXFwuXSspXFxcXHMqXFxcXCxcXFxccyooJyArIG51bWJlciArICcpXFxcXHMqXFxcXCxcXFxccyooJyArIG51bWJlciArICcpXFxcXHMqLFxcXFxzKignICsgbWFwQXJnICsgJylcXFxccypcXFxcLFxcXFxzKignICsgbWFwQXJnICsgJylcXFxcKSQnO1xuICB9O1xuXG4gIC8vIGVhY2ggdmlzdWFsIHN0eWxlIHByb3BlcnR5IGhhcyBhIHR5cGUgYW5kIG5lZWRzIHRvIGJlIHZhbGlkYXRlZCBhY2NvcmRpbmcgdG8gaXRcbiAgc3R5Zm4udHlwZXMgPSB7XG4gICAgdGltZTogeyBudW1iZXI6IHRydWUsIG1pbjogMCwgdW5pdHM6ICdzfG1zJywgaW1wbGljaXRVbml0czogJ21zJyB9LFxuICAgIHBlcmNlbnQ6IHsgbnVtYmVyOiB0cnVlLCBtaW46IDAsIG1heDogMTAwLCB1bml0czogJyUnLCBpbXBsaWNpdFVuaXRzOiAnJScgfSxcbiAgICB6ZXJvT25lTnVtYmVyOiB7IG51bWJlcjogdHJ1ZSwgbWluOiAwLCBtYXg6IDEsIHVuaXRsZXNzOiB0cnVlIH0sXG4gICAgbk9uZU9uZU51bWJlcjogeyBudW1iZXI6IHRydWUsIG1pbjogLTEsIG1heDogMSwgdW5pdGxlc3M6IHRydWUgfSxcbiAgICBub25OZWdhdGl2ZUludDogeyBudW1iZXI6IHRydWUsIG1pbjogMCwgaW50ZWdlcjogdHJ1ZSwgdW5pdGxlc3M6IHRydWUgfSxcbiAgICBwb3NpdGlvbjogeyBlbnVtczogWyAncGFyZW50JywgJ29yaWdpbicgXSB9LFxuICAgIG5vZGVTaXplOiB7IG51bWJlcjogdHJ1ZSwgbWluOiAwLCBlbnVtczogWyAnbGFiZWwnIF0gfSxcbiAgICBudW1iZXI6IHsgbnVtYmVyOiB0cnVlLCB1bml0bGVzczogdHJ1ZSB9LFxuICAgIG51bWJlcnM6IHsgbnVtYmVyOiB0cnVlLCB1bml0bGVzczogdHJ1ZSwgbXVsdGlwbGU6IHRydWUgfSxcbiAgICBzaXplOiB7IG51bWJlcjogdHJ1ZSwgbWluOiAwIH0sXG4gICAgYmlkaXJlY3Rpb25hbFNpemU6IHsgbnVtYmVyOiB0cnVlIH0sIC8vIGFsbG93cyBuZWdhdGl2ZVxuICAgIGJpZGlyZWN0aW9uYWxTaXplczogeyBudW1iZXI6IHRydWUsIG11bHRpcGxlOiB0cnVlIH0sIC8vIGFsbG93cyBuZWdhdGl2ZVxuICAgIGJnU2l6ZTogeyBudW1iZXI6IHRydWUsIG1pbjogMCwgYWxsb3dQZXJjZW50OiB0cnVlIH0sXG4gICAgYmdXSDogeyBudW1iZXI6IHRydWUsIG1pbjogMCwgYWxsb3dQZXJjZW50OiB0cnVlLCBlbnVtczogWyAnYXV0bycgXSB9LFxuICAgIGJnUG9zOiB7IG51bWJlcjogdHJ1ZSwgYWxsb3dQZXJjZW50OiB0cnVlIH0sXG4gICAgYmdSZXBlYXQ6IHsgZW51bXM6IFsgJ3JlcGVhdCcsICdyZXBlYXQteCcsICdyZXBlYXQteScsICduby1yZXBlYXQnIF0gfSxcbiAgICBiZ0ZpdDogeyBlbnVtczogWyAnbm9uZScsICdjb250YWluJywgJ2NvdmVyJyBdIH0sXG4gICAgYmdDcm9zc09yaWdpbjogeyBlbnVtczogWyAnYW5vbnltb3VzJywgJ3VzZS1jcmVkZW50aWFscycgXSB9LFxuICAgIGJnQ2xpcDogeyBlbnVtczogWyAnbm9uZScsICdub2RlJyBdIH0sXG4gICAgY29sb3I6IHsgY29sb3I6IHRydWUgfSxcbiAgICBib29sOiB7IGVudW1zOiBbICd5ZXMnLCAnbm8nIF0gfSxcbiAgICBsaW5lU3R5bGU6IHsgZW51bXM6IFsgJ3NvbGlkJywgJ2RvdHRlZCcsICdkYXNoZWQnIF0gfSxcbiAgICBib3JkZXJTdHlsZTogeyBlbnVtczogWyAnc29saWQnLCAnZG90dGVkJywgJ2Rhc2hlZCcsICdkb3VibGUnIF0gfSxcbiAgICBjdXJ2ZVN0eWxlOiB7IGVudW1zOiBbICdiZXppZXInLCAndW5idW5kbGVkLWJlemllcicsICdoYXlzdGFjaycsICdzZWdtZW50cycgXSB9LFxuICAgIGZvbnRGYW1pbHk6IHsgcmVnZXg6ICdeKFtcXFxcdy0gXFxcXFwiXSsoPzpcXFxccyosXFxcXHMqW1xcXFx3LSBcXFxcXCJdKykqKSQnIH0sXG4gICAgZm9udFZhcmlhbnQ6IHsgZW51bXM6IFsgJ3NtYWxsLWNhcHMnLCAnbm9ybWFsJyBdIH0sXG4gICAgZm9udFN0eWxlOiB7IGVudW1zOiBbICdpdGFsaWMnLCAnbm9ybWFsJywgJ29ibGlxdWUnIF0gfSxcbiAgICBmb250V2VpZ2h0OiB7IGVudW1zOiBbICdub3JtYWwnLCAnYm9sZCcsICdib2xkZXInLCAnbGlnaHRlcicsICcxMDAnLCAnMjAwJywgJzMwMCcsICc0MDAnLCAnNTAwJywgJzYwMCcsICc4MDAnLCAnOTAwJywgMTAwLCAyMDAsIDMwMCwgNDAwLCA1MDAsIDYwMCwgNzAwLCA4MDAsIDkwMCBdIH0sXG4gICAgdGV4dERlY29yYXRpb246IHsgZW51bXM6IFsgJ25vbmUnLCAndW5kZXJsaW5lJywgJ292ZXJsaW5lJywgJ2xpbmUtdGhyb3VnaCcgXSB9LFxuICAgIHRleHRUcmFuc2Zvcm06IHsgZW51bXM6IFsgJ25vbmUnLCAndXBwZXJjYXNlJywgJ2xvd2VyY2FzZScgXSB9LFxuICAgIHRleHRXcmFwOiB7IGVudW1zOiBbICdub25lJywgJ3dyYXAnLCAnZWxsaXBzaXMnIF0gfSxcbiAgICB0ZXh0QmFja2dyb3VuZFNoYXBlOiB7IGVudW1zOiBbICdyZWN0YW5nbGUnLCAncm91bmRyZWN0YW5nbGUnIF19LFxuICAgIG5vZGVTaGFwZTogeyBlbnVtczogWyAncmVjdGFuZ2xlJywgJ3JvdW5kcmVjdGFuZ2xlJywgJ2VsbGlwc2UnLCAndHJpYW5nbGUnLCAnc3F1YXJlJywgJ3BlbnRhZ29uJywgJ2hleGFnb24nLCAnaGVwdGFnb24nLCAnb2N0YWdvbicsICdzdGFyJywgJ2RpYW1vbmQnLCAndmVlJywgJ3Job21ib2lkJywgJ3BvbHlnb24nIF0gfSxcbiAgICBjb21wb3VuZEluY2x1ZGVMYWJlbHM6IHsgZW51bXM6IFsgJ2luY2x1ZGUnLCAnZXhjbHVkZScgXSB9LFxuICAgIGFycm93U2hhcGU6IHsgZW51bXM6IFsgJ3RlZScsICd0cmlhbmdsZScsICd0cmlhbmdsZS10ZWUnLCAndHJpYW5nbGUtYmFja2N1cnZlJywgJ2hhbGYtdHJpYW5nbGUtb3ZlcnNob3QnLCAndmVlJywgJ3NxdWFyZScsICdjaXJjbGUnLCAnZGlhbW9uZCcsICdub25lJyBdIH0sXG4gICAgYXJyb3dGaWxsOiB7IGVudW1zOiBbICdmaWxsZWQnLCAnaG9sbG93JyBdIH0sXG4gICAgZGlzcGxheTogeyBlbnVtczogWyAnZWxlbWVudCcsICdub25lJyBdIH0sXG4gICAgdmlzaWJpbGl0eTogeyBlbnVtczogWyAnaGlkZGVuJywgJ3Zpc2libGUnIF0gfSxcbiAgICB6Q29tcG91bmREZXB0aDogeyBlbnVtczogWyAnYm90dG9tJywgJ29ycGhhbicsICdhdXRvJywgJ3RvcCcgXSB9LFxuICAgIHpJbmRleENvbXBhcmU6IHsgZW51bXM6IFsgJ2F1dG8nLCAnbWFudWFsJyBdIH0sXG4gICAgdmFsaWduOiB7IGVudW1zOiBbICd0b3AnLCAnY2VudGVyJywgJ2JvdHRvbScgXSB9LFxuICAgIGhhbGlnbjogeyBlbnVtczogWyAnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnIF0gfSxcbiAgICB0ZXh0OiB7IHN0cmluZzogdHJ1ZSB9LFxuICAgIGRhdGE6IHsgbWFwcGluZzogdHJ1ZSwgcmVnZXg6IGRhdGEoICdkYXRhJyApIH0sXG4gICAgbGF5b3V0RGF0YTogeyBtYXBwaW5nOiB0cnVlLCByZWdleDogZGF0YSggJ2xheW91dERhdGEnICkgfSxcbiAgICBzY3JhdGNoOiB7IG1hcHBpbmc6IHRydWUsIHJlZ2V4OiBkYXRhKCAnc2NyYXRjaCcgKSB9LFxuICAgIG1hcERhdGE6IHsgbWFwcGluZzogdHJ1ZSwgcmVnZXg6IG1hcERhdGEoICdtYXBEYXRhJyApIH0sXG4gICAgbWFwTGF5b3V0RGF0YTogeyBtYXBwaW5nOiB0cnVlLCByZWdleDogbWFwRGF0YSggJ21hcExheW91dERhdGEnICkgfSxcbiAgICBtYXBTY3JhdGNoOiB7IG1hcHBpbmc6IHRydWUsIHJlZ2V4OiBtYXBEYXRhKCAnbWFwU2NyYXRjaCcgKSB9LFxuICAgIGZuOiB7IG1hcHBpbmc6IHRydWUsIGZuOiB0cnVlIH0sXG4gICAgdXJsOiB7IHJlZ2V4OiAndXJsXFxcXHMqXFxcXChcXFxccypbXFwnXCJdPyguKz8pW1xcJ1wiXT9cXFxccypcXFxcKXxub25lfCguKykkJyB9LFxuICAgIHByb3BMaXN0OiB7IHByb3BMaXN0OiB0cnVlIH0sXG4gICAgYW5nbGU6IHsgbnVtYmVyOiB0cnVlLCB1bml0czogJ2RlZ3xyYWQnLCBpbXBsaWNpdFVuaXRzOiAncmFkJyB9LFxuICAgIHRleHRSb3RhdGlvbjogeyBudW1iZXI6IHRydWUsIHVuaXRzOiAnZGVnfHJhZCcsIGltcGxpY2l0VW5pdHM6ICdyYWQnLCBlbnVtczogWyAnbm9uZScsICdhdXRvcm90YXRlJyBdIH0sXG4gICAgcG9seWdvblBvaW50TGlzdDogeyBudW1iZXI6IHRydWUsIG11bHRpcGxlOiB0cnVlLCBldmVuTXVsdGlwbGU6IHRydWUsIG1pbjogLTEsIG1heDogMSwgdW5pdGxlc3M6IHRydWUgfSxcbiAgICBlZGdlRGlzdGFuY2VzOiB7IGVudW1zOiBbJ2ludGVyc2VjdGlvbicsICdub2RlLXBvc2l0aW9uJ10gfSxcbiAgICBlZGdlRGlyZWN0aW9uczogeyBlbnVtczogWydvdXRzaWRlJywgJ2luc2lkZSddIH0sXG4gICAgZWFzaW5nOiB7XG4gICAgICByZWdleGVzOiBbXG4gICAgICAgICdeKHNwcmluZylcXFxccypcXFxcKFxcXFxzKignICsgbnVtYmVyICsgJylcXFxccyosXFxcXHMqKCcgKyBudW1iZXIgKyAnKVxcXFxzKlxcXFwpJCcsXG4gICAgICAgICdeKGN1YmljLWJlemllcilcXFxccypcXFxcKFxcXFxzKignICsgbnVtYmVyICsgJylcXFxccyosXFxcXHMqKCcgKyBudW1iZXIgKyAnKVxcXFxzKixcXFxccyooJyArIG51bWJlciArICcpXFxcXHMqLFxcXFxzKignICsgbnVtYmVyICsgJylcXFxccypcXFxcKSQnXG4gICAgICBdLFxuICAgICAgZW51bXM6IFtcbiAgICAgICAgJ2xpbmVhcicsXG4gICAgICAgICdlYXNlJywgJ2Vhc2UtaW4nLCAnZWFzZS1vdXQnLCAnZWFzZS1pbi1vdXQnLFxuICAgICAgICAnZWFzZS1pbi1zaW5lJywgJ2Vhc2Utb3V0LXNpbmUnLCAnZWFzZS1pbi1vdXQtc2luZScsXG4gICAgICAgICdlYXNlLWluLXF1YWQnLCAnZWFzZS1vdXQtcXVhZCcsICdlYXNlLWluLW91dC1xdWFkJyxcbiAgICAgICAgJ2Vhc2UtaW4tY3ViaWMnLCAnZWFzZS1vdXQtY3ViaWMnLCAnZWFzZS1pbi1vdXQtY3ViaWMnLFxuICAgICAgICAnZWFzZS1pbi1xdWFydCcsICdlYXNlLW91dC1xdWFydCcsICdlYXNlLWluLW91dC1xdWFydCcsXG4gICAgICAgICdlYXNlLWluLXF1aW50JywgJ2Vhc2Utb3V0LXF1aW50JywgJ2Vhc2UtaW4tb3V0LXF1aW50JyxcbiAgICAgICAgJ2Vhc2UtaW4tZXhwbycsICdlYXNlLW91dC1leHBvJywgJ2Vhc2UtaW4tb3V0LWV4cG8nLFxuICAgICAgICAnZWFzZS1pbi1jaXJjJywgJ2Vhc2Utb3V0LWNpcmMnLCAnZWFzZS1pbi1vdXQtY2lyYydcbiAgICAgIF1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHpPcmRlckRpZmYgPSB7XG4gICAgemVyb05vblplcm86IGZ1bmN0aW9uKCB2YWwxLCB2YWwyICl7XG4gICAgICBpZiggdmFsMSA9PT0gMCAmJiB2YWwyICE9PSAwICl7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIGlmKCB2YWwxICE9PSAwICYmIHZhbDIgPT09IDAgKXtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBhbnlEaWZmOiBmdW5jdGlvbiggdmFsMSwgdmFsMiApe1xuICAgICAgcmV0dXJuIHZhbDEgIT09IHZhbDI7XG4gICAgfVxuICB9O1xuXG4gIHZhciB6ZCA9IHpPcmRlckRpZmY7XG5cbiAgLy8gZGVmaW5lIHZpc3VhbCBzdHlsZSBwcm9wZXJ0aWVzXG4gIHZhciB0ID0gc3R5Zm4udHlwZXM7XG4gIHZhciBwcm9wcyA9IHN0eWZuLnByb3BlcnRpZXMgPSBbXG4gICAgLy8gbWFpbiBsYWJlbFxuICAgIHsgbmFtZTogJ2xhYmVsJywgdHlwZTogdC50ZXh0IH0sXG4gICAgeyBuYW1lOiAndGV4dC1yb3RhdGlvbicsIHR5cGU6IHQudGV4dFJvdGF0aW9uIH0sXG4gICAgeyBuYW1lOiAndGV4dC1tYXJnaW4teCcsIHR5cGU6IHQuYmlkaXJlY3Rpb25hbFNpemUgfSxcbiAgICB7IG5hbWU6ICd0ZXh0LW1hcmdpbi15JywgdHlwZTogdC5iaWRpcmVjdGlvbmFsU2l6ZSB9LFxuXG4gICAgLy8gc291cmNlIGxhYmVsXG4gICAgeyBuYW1lOiAnc291cmNlLWxhYmVsJywgdHlwZTogdC50ZXh0IH0sXG4gICAgeyBuYW1lOiAnc291cmNlLXRleHQtcm90YXRpb24nLCB0eXBlOiB0LnRleHRSb3RhdGlvbiB9LFxuICAgIHsgbmFtZTogJ3NvdXJjZS10ZXh0LW1hcmdpbi14JywgdHlwZTogdC5iaWRpcmVjdGlvbmFsU2l6ZSB9LFxuICAgIHsgbmFtZTogJ3NvdXJjZS10ZXh0LW1hcmdpbi15JywgdHlwZTogdC5iaWRpcmVjdGlvbmFsU2l6ZSB9LFxuICAgIHsgbmFtZTogJ3NvdXJjZS10ZXh0LW9mZnNldCcsIHR5cGU6IHQuc2l6ZSB9LFxuXG4gICAgLy8gdGFyZ2V0IGxhYmVsXG4gICAgeyBuYW1lOiAndGFyZ2V0LWxhYmVsJywgdHlwZTogdC50ZXh0IH0sXG4gICAgeyBuYW1lOiAndGFyZ2V0LXRleHQtcm90YXRpb24nLCB0eXBlOiB0LnRleHRSb3RhdGlvbiB9LFxuICAgIHsgbmFtZTogJ3RhcmdldC10ZXh0LW1hcmdpbi14JywgdHlwZTogdC5iaWRpcmVjdGlvbmFsU2l6ZSB9LFxuICAgIHsgbmFtZTogJ3RhcmdldC10ZXh0LW1hcmdpbi15JywgdHlwZTogdC5iaWRpcmVjdGlvbmFsU2l6ZSB9LFxuICAgIHsgbmFtZTogJ3RhcmdldC10ZXh0LW9mZnNldCcsIHR5cGU6IHQuc2l6ZSB9LFxuXG4gICAgLy8gY29tbW9uIGxhYmVsIHN0eWxlXG4gICAgeyBuYW1lOiAndGV4dC12YWxpZ24nLCB0eXBlOiB0LnZhbGlnbiB9LFxuICAgIHsgbmFtZTogJ3RleHQtaGFsaWduJywgdHlwZTogdC5oYWxpZ24gfSxcbiAgICB7IG5hbWU6ICdjb2xvcicsIHR5cGU6IHQuY29sb3IgfSxcbiAgICB7IG5hbWU6ICd0ZXh0LW91dGxpbmUtY29sb3InLCB0eXBlOiB0LmNvbG9yIH0sXG4gICAgeyBuYW1lOiAndGV4dC1vdXRsaW5lLXdpZHRoJywgdHlwZTogdC5zaXplIH0sXG4gICAgeyBuYW1lOiAndGV4dC1vdXRsaW5lLW9wYWNpdHknLCB0eXBlOiB0Lnplcm9PbmVOdW1iZXIgfSxcbiAgICB7IG5hbWU6ICd0ZXh0LW9wYWNpdHknLCB0eXBlOiB0Lnplcm9PbmVOdW1iZXIgfSxcbiAgICB7IG5hbWU6ICd0ZXh0LWJhY2tncm91bmQtY29sb3InLCB0eXBlOiB0LmNvbG9yIH0sXG4gICAgeyBuYW1lOiAndGV4dC1iYWNrZ3JvdW5kLW9wYWNpdHknLCB0eXBlOiB0Lnplcm9PbmVOdW1iZXIgfSxcbiAgICB7IG5hbWU6ICd0ZXh0LWJhY2tncm91bmQtcGFkZGluZycsIHR5cGU6IHQuc2l6ZSB9LFxuICAgIHsgbmFtZTogJ3RleHQtYm9yZGVyLW9wYWNpdHknLCB0eXBlOiB0Lnplcm9PbmVOdW1iZXIgfSxcbiAgICB7IG5hbWU6ICd0ZXh0LWJvcmRlci1jb2xvcicsIHR5cGU6IHQuY29sb3IgfSxcbiAgICB7IG5hbWU6ICd0ZXh0LWJvcmRlci13aWR0aCcsIHR5cGU6IHQuc2l6ZSB9LFxuICAgIHsgbmFtZTogJ3RleHQtYm9yZGVyLXN0eWxlJywgdHlwZTogdC5ib3JkZXJTdHlsZSB9LFxuICAgIHsgbmFtZTogJ3RleHQtYmFja2dyb3VuZC1zaGFwZScsIHR5cGU6IHQudGV4dEJhY2tncm91bmRTaGFwZX0sXG4gICAgLy8geyBuYW1lOiAndGV4dC1kZWNvcmF0aW9uJywgdHlwZTogdC50ZXh0RGVjb3JhdGlvbiB9LCAvLyBub3Qgc3VwcG9ydGVkIGluIGNhbnZhc1xuICAgIHsgbmFtZTogJ3RleHQtdHJhbnNmb3JtJywgdHlwZTogdC50ZXh0VHJhbnNmb3JtIH0sXG4gICAgeyBuYW1lOiAndGV4dC13cmFwJywgdHlwZTogdC50ZXh0V3JhcCB9LFxuICAgIHsgbmFtZTogJ3RleHQtbWF4LXdpZHRoJywgdHlwZTogdC5zaXplIH0sXG4gICAgeyBuYW1lOiAndGV4dC1ldmVudHMnLCB0eXBlOiB0LmJvb2wgfSxcbiAgICB7IG5hbWU6ICdmb250LWZhbWlseScsIHR5cGU6IHQuZm9udEZhbWlseSB9LFxuICAgIHsgbmFtZTogJ2ZvbnQtc3R5bGUnLCB0eXBlOiB0LmZvbnRTdHlsZSB9LFxuICAgIC8vIHsgbmFtZTogJ2ZvbnQtdmFyaWFudCcsIHR5cGU6IHQuZm9udFZhcmlhbnQgfSwgLy8gbm90IHVzZWZ1bFxuICAgIHsgbmFtZTogJ2ZvbnQtd2VpZ2h0JywgdHlwZTogdC5mb250V2VpZ2h0IH0sXG4gICAgeyBuYW1lOiAnZm9udC1zaXplJywgdHlwZTogdC5zaXplIH0sXG4gICAgeyBuYW1lOiAnbWluLXpvb21lZC1mb250LXNpemUnLCB0eXBlOiB0LnNpemUgfSxcblxuICAgIC8vIGJlaGF2aW91clxuICAgIHsgbmFtZTogJ2V2ZW50cycsIHR5cGU6IHQuYm9vbCB9LFxuXG4gICAgLy8gdmlzaWJpbGl0eVxuICAgIHsgbmFtZTogJ2Rpc3BsYXknLCB0eXBlOiB0LmRpc3BsYXksIHRyaWdnZXJzWk9yZGVyOiB6ZC5hbnlEaWZmIH0sXG4gICAgeyBuYW1lOiAndmlzaWJpbGl0eScsIHR5cGU6IHQudmlzaWJpbGl0eSwgdHJpZ2dlcnNaT3JkZXI6IHpkLmFueURpZmYgfSxcbiAgICB7IG5hbWU6ICdvcGFjaXR5JywgdHlwZTogdC56ZXJvT25lTnVtYmVyLCB0cmlnZ2Vyc1pPcmRlcjogemQuemVyb05vblplcm8gfSxcbiAgICB7IG5hbWU6ICd6LWNvbXBvdW5kLWRlcHRoJywgdHlwZTogdC56Q29tcG91bmREZXB0aCwgdHJpZ2dlcnNaT3JkZXI6IHpkLmFueURpZmYgfSxcbiAgICB7IG5hbWU6ICd6LWluZGV4LWNvbXBhcmUnLCB0eXBlOiB0LnpJbmRleENvbXBhcmUsIHRyaWdnZXJzWk9yZGVyOiB6ZC5hbnlEaWZmIH0sXG4gICAgeyBuYW1lOiAnei1pbmRleCcsIHR5cGU6IHQubm9uTmVnYXRpdmVJbnQsIHRyaWdnZXJzWk9yZGVyOiB6ZC5hbnlEaWZmIH0sXG5cbiAgICAvLyBvdmVybGF5c1xuICAgIHsgbmFtZTogJ292ZXJsYXktcGFkZGluZycsIHR5cGU6IHQuc2l6ZSB9LFxuICAgIHsgbmFtZTogJ292ZXJsYXktY29sb3InLCB0eXBlOiB0LmNvbG9yIH0sXG4gICAgeyBuYW1lOiAnb3ZlcmxheS1vcGFjaXR5JywgdHlwZTogdC56ZXJvT25lTnVtYmVyIH0sXG5cbiAgICAvLyBzaGFkb3dzXG4gICAgeyBuYW1lOiAnc2hhZG93LWJsdXInLCB0eXBlOiB0LnNpemUgfSxcbiAgICB7IG5hbWU6ICdzaGFkb3ctY29sb3InLCB0eXBlOiB0LmNvbG9yIH0sXG4gICAgeyBuYW1lOiAnc2hhZG93LW9wYWNpdHknLCB0eXBlOiB0Lnplcm9PbmVOdW1iZXIgfSxcbiAgICB7IG5hbWU6ICdzaGFkb3ctb2Zmc2V0LXgnLCB0eXBlOiB0LmJpZGlyZWN0aW9uYWxTaXplIH0sXG4gICAgeyBuYW1lOiAnc2hhZG93LW9mZnNldC15JywgdHlwZTogdC5iaWRpcmVjdGlvbmFsU2l6ZSB9LFxuXG4gICAgLy8gbGFiZWwgc2hhZG93c1xuICAgIHsgbmFtZTogJ3RleHQtc2hhZG93LWJsdXInLCB0eXBlOiB0LnNpemUgfSxcbiAgICB7IG5hbWU6ICd0ZXh0LXNoYWRvdy1jb2xvcicsIHR5cGU6IHQuY29sb3IgfSxcbiAgICB7IG5hbWU6ICd0ZXh0LXNoYWRvdy1vcGFjaXR5JywgdHlwZTogdC56ZXJvT25lTnVtYmVyIH0sXG4gICAgeyBuYW1lOiAndGV4dC1zaGFkb3ctb2Zmc2V0LXgnLCB0eXBlOiB0LmJpZGlyZWN0aW9uYWxTaXplIH0sXG4gICAgeyBuYW1lOiAndGV4dC1zaGFkb3ctb2Zmc2V0LXknLCB0eXBlOiB0LmJpZGlyZWN0aW9uYWxTaXplIH0sXG5cbiAgICAvLyB0cmFuc2l0aW9uIGFuaXNcbiAgICB7IG5hbWU6ICd0cmFuc2l0aW9uLXByb3BlcnR5JywgdHlwZTogdC5wcm9wTGlzdCB9LFxuICAgIHsgbmFtZTogJ3RyYW5zaXRpb24tZHVyYXRpb24nLCB0eXBlOiB0LnRpbWUgfSxcbiAgICB7IG5hbWU6ICd0cmFuc2l0aW9uLWRlbGF5JywgdHlwZTogdC50aW1lIH0sXG4gICAgeyBuYW1lOiAndHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24nLCB0eXBlOiB0LmVhc2luZyB9LFxuXG4gICAgLy8gbm9kZSBib2R5XG4gICAgeyBuYW1lOiAnaGVpZ2h0JywgdHlwZTogdC5ub2RlU2l6ZSB9LFxuICAgIHsgbmFtZTogJ3dpZHRoJywgdHlwZTogdC5ub2RlU2l6ZSB9LFxuICAgIHsgbmFtZTogJ3NoYXBlJywgdHlwZTogdC5ub2RlU2hhcGUgfSxcbiAgICB7IG5hbWU6ICdzaGFwZS1wb2x5Z29uLXBvaW50cycsIHR5cGU6IHQucG9seWdvblBvaW50TGlzdCB9LFxuICAgIHsgbmFtZTogJ2JhY2tncm91bmQtY29sb3InLCB0eXBlOiB0LmNvbG9yIH0sXG4gICAgeyBuYW1lOiAnYmFja2dyb3VuZC1vcGFjaXR5JywgdHlwZTogdC56ZXJvT25lTnVtYmVyIH0sXG4gICAgeyBuYW1lOiAnYmFja2dyb3VuZC1ibGFja2VuJywgdHlwZTogdC5uT25lT25lTnVtYmVyIH0sXG4gICAgeyBuYW1lOiAncGFkZGluZy1sZWZ0JywgdHlwZTogdC5zaXplIH0sXG4gICAgeyBuYW1lOiAncGFkZGluZy1yaWdodCcsIHR5cGU6IHQuc2l6ZSB9LFxuICAgIHsgbmFtZTogJ3BhZGRpbmctdG9wJywgdHlwZTogdC5zaXplIH0sXG4gICAgeyBuYW1lOiAncGFkZGluZy1ib3R0b20nLCB0eXBlOiB0LnNpemUgfSxcblxuICAgIC8vIG5vZGUgYm9yZGVyXG4gICAgeyBuYW1lOiAnYm9yZGVyLWNvbG9yJywgdHlwZTogdC5jb2xvciB9LFxuICAgIHsgbmFtZTogJ2JvcmRlci1vcGFjaXR5JywgdHlwZTogdC56ZXJvT25lTnVtYmVyIH0sXG4gICAgeyBuYW1lOiAnYm9yZGVyLXdpZHRoJywgdHlwZTogdC5zaXplIH0sXG4gICAgeyBuYW1lOiAnYm9yZGVyLXN0eWxlJywgdHlwZTogdC5ib3JkZXJTdHlsZSB9LFxuXG4gICAgLy8gbm9kZSBiYWNrZ3JvdW5kIGltYWdlc1xuICAgIHsgbmFtZTogJ2JhY2tncm91bmQtaW1hZ2UnLCB0eXBlOiB0LnVybCB9LFxuICAgIHsgbmFtZTogJ2JhY2tncm91bmQtaW1hZ2UtY3Jvc3NvcmlnaW4nLCB0eXBlOiB0LmJnQ3Jvc3NPcmlnaW4gfSxcbiAgICB7IG5hbWU6ICdiYWNrZ3JvdW5kLWltYWdlLW9wYWNpdHknLCB0eXBlOiB0Lnplcm9PbmVOdW1iZXIgfSxcbiAgICB7IG5hbWU6ICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXgnLCB0eXBlOiB0LmJnUG9zIH0sXG4gICAgeyBuYW1lOiAnYmFja2dyb3VuZC1wb3NpdGlvbi15JywgdHlwZTogdC5iZ1BvcyB9LFxuICAgIHsgbmFtZTogJ2JhY2tncm91bmQtcmVwZWF0JywgdHlwZTogdC5iZ1JlcGVhdCB9LFxuICAgIHsgbmFtZTogJ2JhY2tncm91bmQtZml0JywgdHlwZTogdC5iZ0ZpdCB9LFxuICAgIHsgbmFtZTogJ2JhY2tncm91bmQtY2xpcCcsIHR5cGU6IHQuYmdDbGlwIH0sXG4gICAgeyBuYW1lOiAnYmFja2dyb3VuZC13aWR0aCcsIHR5cGU6IHQuYmdXSCB9LFxuICAgIHsgbmFtZTogJ2JhY2tncm91bmQtaGVpZ2h0JywgdHlwZTogdC5iZ1dIIH0sXG5cbiAgICAvLyBjb21wb3VuZCBwcm9wc1xuICAgIHsgbmFtZTogJ3Bvc2l0aW9uJywgdHlwZTogdC5wb3NpdGlvbiB9LFxuICAgIHsgbmFtZTogJ2NvbXBvdW5kLXNpemluZy13cnQtbGFiZWxzJywgdHlwZTogdC5jb21wb3VuZEluY2x1ZGVMYWJlbHMgfSxcblxuICAgIC8vIGVkZ2UgbGluZVxuICAgIHsgbmFtZTogJ2xpbmUtc3R5bGUnLCB0eXBlOiB0LmxpbmVTdHlsZSB9LFxuICAgIHsgbmFtZTogJ2xpbmUtY29sb3InLCB0eXBlOiB0LmNvbG9yIH0sXG4gICAgeyBuYW1lOiAnY3VydmUtc3R5bGUnLCB0eXBlOiB0LmN1cnZlU3R5bGUgfSxcbiAgICB7IG5hbWU6ICdoYXlzdGFjay1yYWRpdXMnLCB0eXBlOiB0Lnplcm9PbmVOdW1iZXIgfSxcbiAgICB7IG5hbWU6ICdjb250cm9sLXBvaW50LXN0ZXAtc2l6ZScsIHR5cGU6IHQuc2l6ZSB9LFxuICAgIHsgbmFtZTogJ2NvbnRyb2wtcG9pbnQtZGlzdGFuY2VzJywgdHlwZTogdC5iaWRpcmVjdGlvbmFsU2l6ZXMgfSxcbiAgICB7IG5hbWU6ICdjb250cm9sLXBvaW50LXdlaWdodHMnLCB0eXBlOiB0Lm51bWJlcnMgfSxcbiAgICB7IG5hbWU6ICdzZWdtZW50LWRpc3RhbmNlcycsIHR5cGU6IHQuYmlkaXJlY3Rpb25hbFNpemVzIH0sXG4gICAgeyBuYW1lOiAnc2VnbWVudC13ZWlnaHRzJywgdHlwZTogdC5udW1iZXJzIH0sXG4gICAgeyBuYW1lOiAnZWRnZS1kaXN0YW5jZXMnLCB0eXBlOiB0LmVkZ2VEaXN0YW5jZXMgfSxcbiAgICB7IG5hbWU6ICdlZGdlLXBvaW50aW5nLWRpcmVjdGlvbicsIHR5cGU6IHQuZWRnZURpcmVjdGlvbnMgfSxcbiAgICB7IG5hbWU6ICdsb29wLWRpcmVjdGlvbicsIHR5cGU6IHQuYW5nbGUgfSxcbiAgICB7IG5hbWU6ICdsb29wLXN3ZWVwJywgdHlwZTogdC5hbmdsZSB9LFxuICAgIHsgbmFtZTogJ3NvdXJjZS1kaXN0YW5jZS1mcm9tLW5vZGUnLCB0eXBlOiB0LnNpemUgfSxcbiAgICB7IG5hbWU6ICd0YXJnZXQtZGlzdGFuY2UtZnJvbS1ub2RlJywgdHlwZTogdC5zaXplIH0sXG5cbiAgICAvLyB0aGVzZSBhcmUganVzdCBmb3IgdGhlIGNvcmVcbiAgICB7IG5hbWU6ICdzZWxlY3Rpb24tYm94LWNvbG9yJywgdHlwZTogdC5jb2xvciB9LFxuICAgIHsgbmFtZTogJ3NlbGVjdGlvbi1ib3gtb3BhY2l0eScsIHR5cGU6IHQuemVyb09uZU51bWJlciB9LFxuICAgIHsgbmFtZTogJ3NlbGVjdGlvbi1ib3gtYm9yZGVyLWNvbG9yJywgdHlwZTogdC5jb2xvciB9LFxuICAgIHsgbmFtZTogJ3NlbGVjdGlvbi1ib3gtYm9yZGVyLXdpZHRoJywgdHlwZTogdC5zaXplIH0sXG4gICAgeyBuYW1lOiAnYWN0aXZlLWJnLWNvbG9yJywgdHlwZTogdC5jb2xvciB9LFxuICAgIHsgbmFtZTogJ2FjdGl2ZS1iZy1vcGFjaXR5JywgdHlwZTogdC56ZXJvT25lTnVtYmVyIH0sXG4gICAgeyBuYW1lOiAnYWN0aXZlLWJnLXNpemUnLCB0eXBlOiB0LnNpemUgfSxcbiAgICB7IG5hbWU6ICdvdXRzaWRlLXRleHR1cmUtYmctY29sb3InLCB0eXBlOiB0LmNvbG9yIH0sXG4gICAgeyBuYW1lOiAnb3V0c2lkZS10ZXh0dXJlLWJnLW9wYWNpdHknLCB0eXBlOiB0Lnplcm9PbmVOdW1iZXIgfVxuICBdO1xuXG4gIC8vIGRlZmluZSBhbGlhc2VzXG4gIHZhciBhbGlhc2VzID0gc3R5Zm4uYWxpYXNlcyA9IFtcbiAgICB7IG5hbWU6ICdjb250ZW50JywgcG9pbnRzVG86ICdsYWJlbCcgfSxcbiAgICB7IG5hbWU6ICdjb250cm9sLXBvaW50LWRpc3RhbmNlJywgcG9pbnRzVG86ICdjb250cm9sLXBvaW50LWRpc3RhbmNlcycgfSxcbiAgICB7IG5hbWU6ICdjb250cm9sLXBvaW50LXdlaWdodCcsIHBvaW50c1RvOiAnY29udHJvbC1wb2ludC13ZWlnaHRzJyB9LFxuICAgIHsgbmFtZTogJ2VkZ2UtdGV4dC1yb3RhdGlvbicsIHBvaW50c1RvOiAndGV4dC1yb3RhdGlvbicgfVxuICBdO1xuXG4gIC8vIHBpZSBiYWNrZ3JvdW5kcyBmb3Igbm9kZXNcbiAgc3R5Zm4ucGllQmFja2dyb3VuZE4gPSAxNjsgLy8gYmVjYXVzZSB0aGUgcGllIHByb3BlcnRpZXMgYXJlIG51bWJlcmVkLCBnaXZlIGFjY2VzcyB0byBhIGNvbnN0YW50IE4gKGZvciByZW5kZXJlciB1c2UpXG4gIHByb3BzLnB1c2goIHsgbmFtZTogJ3BpZS1zaXplJywgdHlwZTogdC5iZ1NpemUgfSApO1xuICBmb3IoIHZhciBpID0gMTsgaSA8PSBzdHlmbi5waWVCYWNrZ3JvdW5kTjsgaSsrICl7XG4gICAgcHJvcHMucHVzaCggeyBuYW1lOiAncGllLScgKyBpICsgJy1iYWNrZ3JvdW5kLWNvbG9yJywgdHlwZTogdC5jb2xvciB9ICk7XG4gICAgcHJvcHMucHVzaCggeyBuYW1lOiAncGllLScgKyBpICsgJy1iYWNrZ3JvdW5kLXNpemUnLCB0eXBlOiB0LnBlcmNlbnQgfSApO1xuICAgIHByb3BzLnB1c2goIHsgbmFtZTogJ3BpZS0nICsgaSArICctYmFja2dyb3VuZC1vcGFjaXR5JywgdHlwZTogdC56ZXJvT25lTnVtYmVyIH0gKTtcbiAgfVxuXG4gIC8vIGVkZ2UgYXJyb3dzXG4gIHZhciBhcnJvd1ByZWZpeGVzID0gc3R5Zm4uYXJyb3dQcmVmaXhlcyA9IFsgJ3NvdXJjZScsICdtaWQtc291cmNlJywgJ3RhcmdldCcsICdtaWQtdGFyZ2V0JyBdO1xuICBbXG4gICAgeyBuYW1lOiAnYXJyb3ctc2hhcGUnLCB0eXBlOiB0LmFycm93U2hhcGUgfSxcbiAgICB7IG5hbWU6ICdhcnJvdy1jb2xvcicsIHR5cGU6IHQuY29sb3IgfSxcbiAgICB7IG5hbWU6ICdhcnJvdy1maWxsJywgdHlwZTogdC5hcnJvd0ZpbGwgfVxuICBdLmZvckVhY2goIGZ1bmN0aW9uKCBwcm9wICl7XG4gICAgYXJyb3dQcmVmaXhlcy5mb3JFYWNoKCBmdW5jdGlvbiggcHJlZml4ICl7XG4gICAgICB2YXIgbmFtZSA9IHByZWZpeCArICctJyArIHByb3AubmFtZTtcbiAgICAgIHZhciB0eXBlID0gcHJvcC50eXBlO1xuXG4gICAgICBwcm9wcy5wdXNoKCB7IG5hbWU6IG5hbWUsIHR5cGU6IHR5cGUgfSApO1xuICAgIH0gKTtcbiAgfSwge30gKTtcblxuICAvLyBsaXN0IG9mIHByb3BlcnR5IG5hbWVzXG4gIHN0eWZuLnByb3BlcnR5TmFtZXMgPSBwcm9wcy5tYXAoIGZ1bmN0aW9uKCBwICl7IHJldHVybiBwLm5hbWU7IH0gKTtcblxuICAvLyBhbGxvdyBhY2Nlc3Mgb2YgcHJvcGVydGllcyBieSBuYW1lICggZS5nLiBzdHlsZS5wcm9wZXJ0aWVzLmhlaWdodCApXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgcHJvcCA9IHByb3BzWyBpIF07XG5cbiAgICBwcm9wc1sgcHJvcC5uYW1lIF0gPSBwcm9wOyAvLyBhbGxvdyBsb29rdXAgYnkgbmFtZVxuICB9XG5cbiAgLy8gbWFwIGFsaWFzZXNcbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCBhbGlhc2VzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGFsaWFzID0gYWxpYXNlc1sgaSBdO1xuICAgIHZhciBwb2ludHNUb1Byb3AgPSBwcm9wc1sgYWxpYXMucG9pbnRzVG8gXTtcbiAgICB2YXIgYWxpYXNQcm9wID0ge1xuICAgICAgbmFtZTogYWxpYXMubmFtZSxcbiAgICAgIGFsaWFzOiB0cnVlLFxuICAgICAgcG9pbnRzVG86IHBvaW50c1RvUHJvcFxuICAgIH07XG5cbiAgICAvLyBhZGQgYWxpYXMgcHJvcCBmb3IgcGFyc2luZ1xuICAgIHByb3BzLnB1c2goIGFsaWFzUHJvcCApO1xuXG4gICAgcHJvcHNbIGFsaWFzLm5hbWUgXSA9IGFsaWFzUHJvcDsgLy8gYWxsb3cgbG9va3VwIGJ5IG5hbWVcbiAgfVxufSkoKTtcblxuc3R5Zm4uZ2V0RGVmYXVsdFByb3BlcnR5ID0gZnVuY3Rpb24oIG5hbWUgKXtcbiAgcmV0dXJuIHRoaXMuZ2V0RGVmYXVsdFByb3BlcnRpZXMoKVsgbmFtZSBdO1xufTtcblxuc3R5Zm4uZ2V0RGVmYXVsdFByb3BlcnRpZXMgPSB1dGlsLm1lbW9pemUoIGZ1bmN0aW9uKCl7XG4gIHZhciByYXdQcm9wcyA9IHV0aWwuZXh0ZW5kKCB7XG4gICAgJ2V2ZW50cyc6ICd5ZXMnLFxuICAgICd0ZXh0LWV2ZW50cyc6ICdubycsXG4gICAgJ3RleHQtdmFsaWduJzogJ3RvcCcsXG4gICAgJ3RleHQtaGFsaWduJzogJ2NlbnRlcicsXG4gICAgJ2NvbG9yJzogJyMwMDAnLFxuICAgICd0ZXh0LW91dGxpbmUtY29sb3InOiAnIzAwMCcsXG4gICAgJ3RleHQtb3V0bGluZS13aWR0aCc6IDAsXG4gICAgJ3RleHQtb3V0bGluZS1vcGFjaXR5JzogMSxcbiAgICAndGV4dC1vcGFjaXR5JzogMSxcbiAgICAndGV4dC1kZWNvcmF0aW9uJzogJ25vbmUnLFxuICAgICd0ZXh0LXRyYW5zZm9ybSc6ICdub25lJyxcbiAgICAndGV4dC13cmFwJzogJ25vbmUnLFxuICAgICd0ZXh0LW1heC13aWR0aCc6IDk5OTksXG4gICAgJ3RleHQtYmFja2dyb3VuZC1jb2xvcic6ICcjMDAwJyxcbiAgICAndGV4dC1iYWNrZ3JvdW5kLW9wYWNpdHknOiAwLFxuICAgICd0ZXh0LWJhY2tncm91bmQtc2hhcGUnOiAncmVjdGFuZ2xlJyxcbiAgICAndGV4dC1iYWNrZ3JvdW5kLXBhZGRpbmcnOiAwLFxuICAgICd0ZXh0LWJvcmRlci1vcGFjaXR5JzogMCxcbiAgICAndGV4dC1ib3JkZXItd2lkdGgnOiAwLFxuICAgICd0ZXh0LWJvcmRlci1zdHlsZSc6ICdzb2xpZCcsXG4gICAgJ3RleHQtYm9yZGVyLWNvbG9yJzogJyMwMDAnLFxuICAgICdmb250LWZhbWlseSc6ICdIZWx2ZXRpY2EgTmV1ZSwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmJyxcbiAgICAnZm9udC1zdHlsZSc6ICdub3JtYWwnLFxuICAgIC8vICdmb250LXZhcmlhbnQnOiBmb250VmFyaWFudCxcbiAgICAnZm9udC13ZWlnaHQnOiAnbm9ybWFsJyxcbiAgICAnZm9udC1zaXplJzogMTYsXG4gICAgJ21pbi16b29tZWQtZm9udC1zaXplJzogMCxcbiAgICAndGV4dC1yb3RhdGlvbic6ICdub25lJyxcbiAgICAnc291cmNlLXRleHQtcm90YXRpb24nOiAnbm9uZScsXG4gICAgJ3RhcmdldC10ZXh0LXJvdGF0aW9uJzogJ25vbmUnLFxuICAgICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLFxuICAgICdkaXNwbGF5JzogJ2VsZW1lbnQnLFxuICAgICdvcGFjaXR5JzogMSxcbiAgICAnei1jb21wb3VuZC1kZXB0aCc6ICdhdXRvJyxcbiAgICAnei1pbmRleC1jb21wYXJlJzogJ2F1dG8nLFxuICAgICd6LWluZGV4JzogMCxcbiAgICAnbGFiZWwnOiAnJyxcbiAgICAndGV4dC1tYXJnaW4teCc6IDAsXG4gICAgJ3RleHQtbWFyZ2luLXknOiAwLFxuICAgICdzb3VyY2UtbGFiZWwnOiAnJyxcbiAgICAnc291cmNlLXRleHQtb2Zmc2V0JzogMCxcbiAgICAnc291cmNlLXRleHQtbWFyZ2luLXgnOiAwLFxuICAgICdzb3VyY2UtdGV4dC1tYXJnaW4teSc6IDAsXG4gICAgJ3RhcmdldC1sYWJlbCc6ICcnLFxuICAgICd0YXJnZXQtdGV4dC1vZmZzZXQnOiAwLFxuICAgICd0YXJnZXQtdGV4dC1tYXJnaW4teCc6IDAsXG4gICAgJ3RhcmdldC10ZXh0LW1hcmdpbi15JzogMCxcbiAgICAnb3ZlcmxheS1vcGFjaXR5JzogMCxcbiAgICAnb3ZlcmxheS1jb2xvcic6ICcjMDAwJyxcbiAgICAnb3ZlcmxheS1wYWRkaW5nJzogMTAsXG4gICAgJ3NoYWRvdy1vcGFjaXR5JzogMCxcbiAgICAnc2hhZG93LWNvbG9yJzogJyMwMDAnLFxuICAgICdzaGFkb3ctYmx1cic6IDEwLFxuICAgICdzaGFkb3ctb2Zmc2V0LXgnOiAwLFxuICAgICdzaGFkb3ctb2Zmc2V0LXknOiAwLFxuICAgICd0ZXh0LXNoYWRvdy1vcGFjaXR5JzogMCxcbiAgICAndGV4dC1zaGFkb3ctY29sb3InOiAnIzAwMCcsXG4gICAgJ3RleHQtc2hhZG93LWJsdXInOiA1LFxuICAgICd0ZXh0LXNoYWRvdy1vZmZzZXQteCc6IDAsXG4gICAgJ3RleHQtc2hhZG93LW9mZnNldC15JzogMCxcbiAgICAndHJhbnNpdGlvbi1wcm9wZXJ0eSc6ICdub25lJyxcbiAgICAndHJhbnNpdGlvbi1kdXJhdGlvbic6IDAsXG4gICAgJ3RyYW5zaXRpb24tZGVsYXknOiAwLFxuICAgICd0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbic6ICdsaW5lYXInLFxuICAgICdsb29wLWRpcmVjdGlvbic6ICctMTM1ZGVnJyxcbiAgICAnbG9vcC1zd2VlcCc6ICctOTBkZWcnLFxuICAgICdzb3VyY2UtZGlzdGFuY2UtZnJvbS1ub2RlJzogMCxcbiAgICAndGFyZ2V0LWRpc3RhbmNlLWZyb20tbm9kZSc6IDAsXG5cbiAgICAvLyBub2RlIHByb3BzXG4gICAgJ2JhY2tncm91bmQtYmxhY2tlbic6IDAsXG4gICAgJ2JhY2tncm91bmQtY29sb3InOiAnIzk5OScsXG4gICAgJ2JhY2tncm91bmQtb3BhY2l0eSc6IDEsXG4gICAgJ2JhY2tncm91bmQtaW1hZ2UnOiAnbm9uZScsXG4gICAgJ2JhY2tncm91bmQtaW1hZ2UtY3Jvc3NvcmlnaW4nOiAnYW5vbnltb3VzJyxcbiAgICAnYmFja2dyb3VuZC1pbWFnZS1vcGFjaXR5JzogMSxcbiAgICAnYmFja2dyb3VuZC1wb3NpdGlvbi14JzogJzUwJScsXG4gICAgJ2JhY2tncm91bmQtcG9zaXRpb24teSc6ICc1MCUnLFxuICAgICdiYWNrZ3JvdW5kLXJlcGVhdCc6ICduby1yZXBlYXQnLFxuICAgICdiYWNrZ3JvdW5kLWZpdCc6ICdub25lJyxcbiAgICAnYmFja2dyb3VuZC1jbGlwJzogJ25vZGUnLFxuICAgICdiYWNrZ3JvdW5kLXdpZHRoJzogJ2F1dG8nLFxuICAgICdiYWNrZ3JvdW5kLWhlaWdodCc6ICdhdXRvJyxcbiAgICAnYm9yZGVyLWNvbG9yJzogJyMwMDAnLFxuICAgICdib3JkZXItb3BhY2l0eSc6IDEsXG4gICAgJ2JvcmRlci13aWR0aCc6IDAsXG4gICAgJ2JvcmRlci1zdHlsZSc6ICdzb2xpZCcsXG4gICAgJ2hlaWdodCc6IDMwLFxuICAgICd3aWR0aCc6IDMwLFxuICAgICdzaGFwZSc6ICdlbGxpcHNlJyxcbiAgICAnc2hhcGUtcG9seWdvbi1wb2ludHMnOiAnLTEsIC0xLCAgIDEsIC0xLCAgIDEsIDEsICAgLTEsIDEnLFxuXG4gICAgLy8gY29tcG91bmQgcHJvcHNcbiAgICAncGFkZGluZy10b3AnOiAwLFxuICAgICdwYWRkaW5nLWJvdHRvbSc6IDAsXG4gICAgJ3BhZGRpbmctbGVmdCc6IDAsXG4gICAgJ3BhZGRpbmctcmlnaHQnOiAwLFxuICAgICdwb3NpdGlvbic6ICdvcmlnaW4nLFxuICAgICdjb21wb3VuZC1zaXppbmctd3J0LWxhYmVscyc6ICdpbmNsdWRlJ1xuICB9LCB7XG4gICAgLy8gbm9kZSBwaWUgYmdcbiAgICAncGllLXNpemUnOiAnMTAwJSdcbiAgfSwgW1xuICAgIHsgbmFtZTogJ3BpZS17e2l9fS1iYWNrZ3JvdW5kLWNvbG9yJywgdmFsdWU6ICdibGFjaycgfSxcbiAgICB7IG5hbWU6ICdwaWUte3tpfX0tYmFja2dyb3VuZC1zaXplJywgdmFsdWU6ICcwJScgfSxcbiAgICB7IG5hbWU6ICdwaWUte3tpfX0tYmFja2dyb3VuZC1vcGFjaXR5JywgdmFsdWU6IDEgfVxuICBdLnJlZHVjZSggZnVuY3Rpb24oIGNzcywgcHJvcCApe1xuICAgIGZvciggdmFyIGkgPSAxOyBpIDw9IHN0eWZuLnBpZUJhY2tncm91bmROOyBpKysgKXtcbiAgICAgIHZhciBuYW1lID0gcHJvcC5uYW1lLnJlcGxhY2UoICd7e2l9fScsIGkgKTtcbiAgICAgIHZhciB2YWwgPSBwcm9wLnZhbHVlO1xuXG4gICAgICBjc3NbIG5hbWUgXSA9IHZhbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY3NzO1xuICB9LCB7fSApLCB7XG4gICAgLy8gZWRnZSBwcm9wc1xuICAgICdsaW5lLXN0eWxlJzogJ3NvbGlkJyxcbiAgICAnbGluZS1jb2xvcic6ICcjOTk5JyxcbiAgICAnY29udHJvbC1wb2ludC1zdGVwLXNpemUnOiA0MCxcbiAgICAnY29udHJvbC1wb2ludC13ZWlnaHRzJzogMC41LFxuICAgICdzZWdtZW50LXdlaWdodHMnOiAwLjUsXG4gICAgJ3NlZ21lbnQtZGlzdGFuY2VzJzogMjAsXG4gICAgJ2VkZ2UtZGlzdGFuY2VzJzogJ2ludGVyc2VjdGlvbicsXG4gICAgJ2VkZ2UtcG9pbnRpbmctZGlyZWN0aW9uJzogJ2luc2lkZScsXG4gICAgJ2N1cnZlLXN0eWxlJzogJ2JlemllcicsXG4gICAgJ2hheXN0YWNrLXJhZGl1cyc6IDBcbiAgfSwgW1xuICAgIHsgbmFtZTogJ2Fycm93LXNoYXBlJywgdmFsdWU6ICdub25lJyB9LFxuICAgIHsgbmFtZTogJ2Fycm93LWNvbG9yJywgdmFsdWU6ICcjOTk5JyB9LFxuICAgIHsgbmFtZTogJ2Fycm93LWZpbGwnLCB2YWx1ZTogJ2ZpbGxlZCcgfVxuICBdLnJlZHVjZSggZnVuY3Rpb24oIGNzcywgcHJvcCApe1xuICAgIHN0eWZuLmFycm93UHJlZml4ZXMuZm9yRWFjaCggZnVuY3Rpb24oIHByZWZpeCApe1xuICAgICAgdmFyIG5hbWUgPSBwcmVmaXggKyAnLScgKyBwcm9wLm5hbWU7XG4gICAgICB2YXIgdmFsID0gcHJvcC52YWx1ZTtcblxuICAgICAgY3NzWyBuYW1lIF0gPSB2YWw7XG4gICAgfSApO1xuXG4gICAgcmV0dXJuIGNzcztcbiAgfSwge30gKSApO1xuXG4gIHZhciBwYXJzZWRQcm9wcyA9IHt9O1xuXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgdGhpcy5wcm9wZXJ0aWVzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIHByb3AgPSB0aGlzLnByb3BlcnRpZXNbaV07XG5cbiAgICBpZiggcHJvcC5wb2ludHNUbyApeyBjb250aW51ZTsgfVxuXG4gICAgdmFyIG5hbWUgPSBwcm9wLm5hbWU7XG4gICAgdmFyIHZhbCA9IHJhd1Byb3BzWyBuYW1lIF07XG4gICAgdmFyIHBhcnNlZFByb3AgPSB0aGlzLnBhcnNlKCBuYW1lLCB2YWwgKTtcblxuICAgIHBhcnNlZFByb3BzWyBuYW1lIF0gPSBwYXJzZWRQcm9wO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlZFByb3BzO1xufSApO1xuXG5zdHlmbi5hZGREZWZhdWx0U3R5bGVzaGVldCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXNcbiAgICAuc2VsZWN0b3IoICckbm9kZSA+IG5vZGUnICkgLy8gY29tcG91bmQgKHBhcmVudCkgbm9kZSBwcm9wZXJ0aWVzXG4gICAgICAuY3NzKCB7XG4gICAgICAgICdzaGFwZSc6ICdyZWN0YW5nbGUnLFxuICAgICAgICAncGFkZGluZy10b3AnOiAxMCxcbiAgICAgICAgJ3BhZGRpbmctcmlnaHQnOiAxMCxcbiAgICAgICAgJ3BhZGRpbmctbGVmdCc6IDEwLFxuICAgICAgICAncGFkZGluZy1ib3R0b20nOiAxMCxcbiAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiAnI2VlZScsXG4gICAgICAgICdib3JkZXItY29sb3InOiAnI2NjYycsXG4gICAgICAgICdib3JkZXItd2lkdGgnOiAxXG4gICAgICB9IClcbiAgICAuc2VsZWN0b3IoICdlZGdlJyApIC8vIGp1c3QgZWRnZSBwcm9wZXJ0aWVzXG4gICAgICAuY3NzKCB7XG4gICAgICAgICd3aWR0aCc6IDMsXG4gICAgICAgICdjdXJ2ZS1zdHlsZSc6ICdoYXlzdGFjaydcbiAgICAgIH0gKVxuICAgIC5zZWxlY3RvciggJzpzZWxlY3RlZCcgKVxuICAgICAgLmNzcygge1xuICAgICAgICAnYmFja2dyb3VuZC1jb2xvcic6ICcjMDE2OUQ5JyxcbiAgICAgICAgJ2xpbmUtY29sb3InOiAnIzAxNjlEOScsXG4gICAgICAgICdzb3VyY2UtYXJyb3ctY29sb3InOiAnIzAxNjlEOScsXG4gICAgICAgICd0YXJnZXQtYXJyb3ctY29sb3InOiAnIzAxNjlEOScsXG4gICAgICAgICdtaWQtc291cmNlLWFycm93LWNvbG9yJzogJyMwMTY5RDknLFxuICAgICAgICAnbWlkLXRhcmdldC1hcnJvdy1jb2xvcic6ICcjMDE2OUQ5J1xuICAgICAgfSApXG4gICAgLnNlbGVjdG9yKCAnbm9kZTpwYXJlbnQ6c2VsZWN0ZWQnIClcbiAgICAgIC5jc3MoIHtcbiAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiAnI0NDRTFGOScsXG4gICAgICAgICdib3JkZXItY29sb3InOiAnI2FlYzhlNSdcbiAgICAgIH0gKVxuICAgIC5zZWxlY3RvciggJzphY3RpdmUnIClcbiAgICAgIC5jc3MoIHtcbiAgICAgICAgJ292ZXJsYXktY29sb3InOiAnYmxhY2snLFxuICAgICAgICAnb3ZlcmxheS1wYWRkaW5nJzogMTAsXG4gICAgICAgICdvdmVybGF5LW9wYWNpdHknOiAwLjI1XG4gICAgICB9IClcbiAgICAuc2VsZWN0b3IoICdjb3JlJyApIC8vIGp1c3QgY29yZSBwcm9wZXJ0aWVzXG4gICAgICAuY3NzKCB7XG4gICAgICAgICdzZWxlY3Rpb24tYm94LWNvbG9yJzogJyNkZGQnLFxuICAgICAgICAnc2VsZWN0aW9uLWJveC1vcGFjaXR5JzogMC42NSxcbiAgICAgICAgJ3NlbGVjdGlvbi1ib3gtYm9yZGVyLWNvbG9yJzogJyNhYWEnLFxuICAgICAgICAnc2VsZWN0aW9uLWJveC1ib3JkZXItd2lkdGgnOiAxLFxuICAgICAgICAnYWN0aXZlLWJnLWNvbG9yJzogJ2JsYWNrJyxcbiAgICAgICAgJ2FjdGl2ZS1iZy1vcGFjaXR5JzogMC4xNSxcbiAgICAgICAgJ2FjdGl2ZS1iZy1zaXplJzogMzAsXG4gICAgICAgICdvdXRzaWRlLXRleHR1cmUtYmctY29sb3InOiAnIzAwMCcsXG4gICAgICAgICdvdXRzaWRlLXRleHR1cmUtYmctb3BhY2l0eSc6IDAuMTI1XG4gICAgICB9IClcbiAgO1xuXG4gIHRoaXMuZGVmYXVsdExlbmd0aCA9IHRoaXMubGVuZ3RoO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHlmbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCAnLi4vdXRpbCcgKTtcbnZhciBTZWxlY3RvciA9IHJlcXVpcmUoICcuLi9zZWxlY3RvcicgKTtcblxudmFyIHN0eWZuID0ge307XG5cbnN0eWZuLmFwcGx5RnJvbVN0cmluZyA9IGZ1bmN0aW9uKCBzdHJpbmcgKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc3R5bGUgPSB0aGlzO1xuICB2YXIgcmVtYWluaW5nID0gJycgKyBzdHJpbmc7XG4gIHZhciBzZWxBbmRCbG9ja1N0cjtcbiAgdmFyIGJsb2NrUmVtO1xuICB2YXIgcHJvcEFuZFZhbFN0cjtcblxuICAvLyByZW1vdmUgY29tbWVudHMgZnJvbSB0aGUgc3R5bGUgc3RyaW5nXG4gIHJlbWFpbmluZyA9IHJlbWFpbmluZy5yZXBsYWNlKCAvWy9dWypdKFxcc3wuKSs/WypdWy9dL2csICcnICk7XG5cbiAgZnVuY3Rpb24gcmVtb3ZlU2VsQW5kQmxvY2tGcm9tUmVtYWluaW5nKCl7XG4gICAgLy8gcmVtb3ZlIHRoZSBwYXJzZWQgc2VsZWN0b3IgYW5kIGJsb2NrIGZyb20gdGhlIHJlbWFpbmluZyB0ZXh0IHRvIHBhcnNlXG4gICAgaWYoIHJlbWFpbmluZy5sZW5ndGggPiBzZWxBbmRCbG9ja1N0ci5sZW5ndGggKXtcbiAgICAgIHJlbWFpbmluZyA9IHJlbWFpbmluZy5zdWJzdHIoIHNlbEFuZEJsb2NrU3RyLmxlbmd0aCApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1haW5pbmcgPSAnJztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVQcm9wQW5kVmFsRnJvbVJlbSgpe1xuICAgIC8vIHJlbW92ZSB0aGUgcGFyc2VkIHByb3BlcnR5IGFuZCB2YWx1ZSBmcm9tIHRoZSByZW1haW5pbmcgYmxvY2sgdGV4dCB0byBwYXJzZVxuICAgIGlmKCBibG9ja1JlbS5sZW5ndGggPiBwcm9wQW5kVmFsU3RyLmxlbmd0aCApe1xuICAgICAgYmxvY2tSZW0gPSBibG9ja1JlbS5zdWJzdHIoIHByb3BBbmRWYWxTdHIubGVuZ3RoICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJsb2NrUmVtID0gJyc7XG4gICAgfVxuICB9XG5cbiAgd2hpbGUoIHRydWUgKXtcbiAgICB2YXIgbm90aGluZ0xlZnRUb1BhcnNlID0gcmVtYWluaW5nLm1hdGNoKCAvXlxccyokLyApO1xuICAgIGlmKCBub3RoaW5nTGVmdFRvUGFyc2UgKXsgYnJlYWs7IH1cblxuICAgIHZhciBzZWxBbmRCbG9jayA9IHJlbWFpbmluZy5tYXRjaCggL15cXHMqKCg/Oi58XFxzKSs/KVxccypcXHsoKD86LnxcXHMpKz8pXFx9LyApO1xuXG4gICAgaWYoICFzZWxBbmRCbG9jayApe1xuICAgICAgdXRpbC5lcnJvciggJ0hhbHRpbmcgc3R5bGVzaGVldCBwYXJzaW5nOiBTdHJpbmcgc3R5bGVzaGVldCBjb250YWlucyBtb3JlIHRvIHBhcnNlIGJ1dCBubyBzZWxlY3RvciBhbmQgYmxvY2sgZm91bmQgaW46ICcgKyByZW1haW5pbmcgKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHNlbEFuZEJsb2NrU3RyID0gc2VsQW5kQmxvY2tbMF07XG5cbiAgICAvLyBwYXJzZSB0aGUgc2VsZWN0b3JcbiAgICB2YXIgc2VsZWN0b3JTdHIgPSBzZWxBbmRCbG9ja1sxXTtcbiAgICBpZiggc2VsZWN0b3JTdHIgIT09ICdjb3JlJyApe1xuICAgICAgdmFyIHNlbGVjdG9yID0gbmV3IFNlbGVjdG9yKCBzZWxlY3RvclN0ciApO1xuICAgICAgaWYoIHNlbGVjdG9yLl9wcml2YXRlLmludmFsaWQgKXtcbiAgICAgICAgdXRpbC5lcnJvciggJ1NraXBwaW5nIHBhcnNpbmcgb2YgYmxvY2s6IEludmFsaWQgc2VsZWN0b3IgZm91bmQgaW4gc3RyaW5nIHN0eWxlc2hlZXQ6ICcgKyBzZWxlY3RvclN0ciApO1xuXG4gICAgICAgIC8vIHNraXAgdGhpcyBzZWxlY3RvciBhbmQgYmxvY2tcbiAgICAgICAgcmVtb3ZlU2VsQW5kQmxvY2tGcm9tUmVtYWluaW5nKCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHBhcnNlIHRoZSBibG9jayBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXNcbiAgICB2YXIgYmxvY2tTdHIgPSBzZWxBbmRCbG9ja1syXTtcbiAgICB2YXIgaW52YWxpZEJsb2NrID0gZmFsc2U7XG4gICAgYmxvY2tSZW0gPSBibG9ja1N0cjtcbiAgICB2YXIgcHJvcHMgPSBbXTtcblxuICAgIHdoaWxlKCB0cnVlICl7XG4gICAgICB2YXIgbm90aGluZ0xlZnRUb1BhcnNlID0gYmxvY2tSZW0ubWF0Y2goIC9eXFxzKiQvICk7XG4gICAgICBpZiggbm90aGluZ0xlZnRUb1BhcnNlICl7IGJyZWFrOyB9XG5cbiAgICAgIHZhciBwcm9wQW5kVmFsID0gYmxvY2tSZW0ubWF0Y2goIC9eXFxzKiguKz8pXFxzKjpcXHMqKC4rPylcXHMqOy8gKTtcblxuICAgICAgaWYoICFwcm9wQW5kVmFsICl7XG4gICAgICAgIHV0aWwuZXJyb3IoICdTa2lwcGluZyBwYXJzaW5nIG9mIGJsb2NrOiBJbnZhbGlkIGZvcm1hdHRpbmcgb2Ygc3R5bGUgcHJvcGVydHkgYW5kIHZhbHVlIGRlZmluaXRpb25zIGZvdW5kIGluOicgKyBibG9ja1N0ciApO1xuICAgICAgICBpbnZhbGlkQmxvY2sgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcHJvcEFuZFZhbFN0ciA9IHByb3BBbmRWYWxbMF07XG4gICAgICB2YXIgcHJvcFN0ciA9IHByb3BBbmRWYWxbMV07XG4gICAgICB2YXIgdmFsU3RyID0gcHJvcEFuZFZhbFsyXTtcblxuICAgICAgdmFyIHByb3AgPSBzZWxmLnByb3BlcnRpZXNbIHByb3BTdHIgXTtcbiAgICAgIGlmKCAhcHJvcCApe1xuICAgICAgICB1dGlsLmVycm9yKCAnU2tpcHBpbmcgcHJvcGVydHk6IEludmFsaWQgcHJvcGVydHkgbmFtZSBpbjogJyArIHByb3BBbmRWYWxTdHIgKTtcblxuICAgICAgICAvLyBza2lwIHRoaXMgcHJvcGVydHkgaW4gdGhlIGJsb2NrXG4gICAgICAgIHJlbW92ZVByb3BBbmRWYWxGcm9tUmVtKCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFyc2VkUHJvcCA9IHN0eWxlLnBhcnNlKCBwcm9wU3RyLCB2YWxTdHIgKTtcblxuICAgICAgaWYoICFwYXJzZWRQcm9wICl7XG4gICAgICAgIHV0aWwuZXJyb3IoICdTa2lwcGluZyBwcm9wZXJ0eTogSW52YWxpZCBwcm9wZXJ0eSBkZWZpbml0aW9uIGluOiAnICsgcHJvcEFuZFZhbFN0ciApO1xuXG4gICAgICAgIC8vIHNraXAgdGhpcyBwcm9wZXJ0eSBpbiB0aGUgYmxvY2tcbiAgICAgICAgcmVtb3ZlUHJvcEFuZFZhbEZyb21SZW0oKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHByb3BzLnB1c2goIHtcbiAgICAgICAgbmFtZTogcHJvcFN0cixcbiAgICAgICAgdmFsOiB2YWxTdHJcbiAgICAgIH0gKTtcbiAgICAgIHJlbW92ZVByb3BBbmRWYWxGcm9tUmVtKCk7XG4gICAgfVxuXG4gICAgaWYoIGludmFsaWRCbG9jayApe1xuICAgICAgcmVtb3ZlU2VsQW5kQmxvY2tGcm9tUmVtYWluaW5nKCk7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBwdXQgdGhlIHBhcnNlZCBibG9jayBpbiB0aGUgc3R5bGVcbiAgICBzdHlsZS5zZWxlY3Rvciggc2VsZWN0b3JTdHIgKTtcbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrICl7XG4gICAgICB2YXIgcHJvcCA9IHByb3BzWyBpIF07XG4gICAgICBzdHlsZS5jc3MoIHByb3AubmFtZSwgcHJvcC52YWwgKTtcbiAgICB9XG5cbiAgICByZW1vdmVTZWxBbmRCbG9ja0Zyb21SZW1haW5pbmcoKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn07XG5cbnN0eWZuLmZyb21TdHJpbmcgPSBmdW5jdGlvbiggc3RyaW5nICl7XG4gIHZhciBzdHlsZSA9IHRoaXM7XG5cbiAgc3R5bGUucmVzZXRUb0RlZmF1bHQoKTtcbiAgc3R5bGUuYXBwbHlGcm9tU3RyaW5nKCBzdHJpbmcgKTtcblxuICByZXR1cm4gc3R5bGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWZuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXMgPSByZXF1aXJlKCAnLi9pcycgKTtcbnZhciB1dGlsID0gcmVxdWlyZSggJy4vdXRpbCcgKTtcbnZhciBTdHlsZSA9IHJlcXVpcmUoICcuL3N0eWxlJyApO1xuXG4vLyBhIGR1bW15IHN0eWxlc2hlZXQgb2JqZWN0IHRoYXQgZG9lc24ndCBuZWVkIGEgcmVmZXJlbmNlIHRvIHRoZSBjb3JlXG4vLyAodXNlZnVsIGZvciBpbml0KVxudmFyIFN0eWxlc2hlZXQgPSBmdW5jdGlvbigpe1xuICBpZiggISh0aGlzIGluc3RhbmNlb2YgU3R5bGVzaGVldCkgKXtcbiAgICByZXR1cm4gbmV3IFN0eWxlc2hlZXQoKTtcbiAgfVxuXG4gIHRoaXMubGVuZ3RoID0gMDtcbn07XG5cbnZhciBzaGVldGZuID0gU3R5bGVzaGVldC5wcm90b3R5cGU7XG5cbnNoZWV0Zm4uaW5zdGFuY2VTdHJpbmcgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gJ3N0eWxlc2hlZXQnO1xufTtcblxuLy8ganVzdCBzdG9yZSB0aGUgc2VsZWN0b3IgdG8gYmUgcGFyc2VkIGxhdGVyXG5zaGVldGZuLnNlbGVjdG9yID0gZnVuY3Rpb24oIHNlbGVjdG9yICl7XG4gIHZhciBpID0gdGhpcy5sZW5ndGgrKztcblxuICB0aGlzWyBpIF0gPSB7XG4gICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgIHByb3BlcnRpZXM6IFtdXG4gIH07XG5cbiAgcmV0dXJuIHRoaXM7IC8vIGNoYWluaW5nXG59O1xuXG4vLyBqdXN0IHN0b3JlIHRoZSBwcm9wZXJ0eSB0byBiZSBwYXJzZWQgbGF0ZXJcbnNoZWV0Zm4uY3NzID0gZnVuY3Rpb24oIG5hbWUsIHZhbHVlICl7XG4gIHZhciBpID0gdGhpcy5sZW5ndGggLSAxO1xuXG4gIGlmKCBpcy5zdHJpbmcoIG5hbWUgKSApe1xuICAgIHRoaXNbIGkgXS5wcm9wZXJ0aWVzLnB1c2goIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9ICk7XG4gIH0gZWxzZSBpZiggaXMucGxhaW5PYmplY3QoIG5hbWUgKSApe1xuICAgIHZhciBtYXAgPSBuYW1lO1xuXG4gICAgZm9yKCB2YXIgaiA9IDA7IGogPCBTdHlsZS5wcm9wZXJ0aWVzLmxlbmd0aDsgaisrICl7XG4gICAgICB2YXIgcHJvcCA9IFN0eWxlLnByb3BlcnRpZXNbIGogXTtcbiAgICAgIHZhciBtYXBWYWwgPSBtYXBbIHByb3AubmFtZSBdO1xuXG4gICAgICBpZiggbWFwVmFsID09PSB1bmRlZmluZWQgKXsgLy8gYWxzbyB0cnkgY2FtZWwgY2FzZSBuYW1lXG4gICAgICAgIG1hcFZhbCA9IG1hcFsgdXRpbC5kYXNoMmNhbWVsKCBwcm9wLm5hbWUgKSBdO1xuICAgICAgfVxuXG4gICAgICBpZiggbWFwVmFsICE9PSB1bmRlZmluZWQgKXtcbiAgICAgICAgdmFyIG5hbWUgPSBwcm9wLm5hbWU7XG4gICAgICAgIHZhciB2YWx1ZSA9IG1hcFZhbDtcblxuICAgICAgICB0aGlzWyBpIF0ucHJvcGVydGllcy5wdXNoKCB7XG4gICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfSApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzOyAvLyBjaGFpbmluZ1xufTtcblxuc2hlZXRmbi5zdHlsZSA9IHNoZWV0Zm4uY3NzO1xuXG4vLyBnZW5lcmF0ZSBhIHJlYWwgc3R5bGUgb2JqZWN0IGZyb20gdGhlIGR1bW15IHN0eWxlc2hlZXRcbnNoZWV0Zm4uZ2VuZXJhdGVTdHlsZSA9IGZ1bmN0aW9uKCBjeSApe1xuICB2YXIgc3R5bGUgPSBuZXcgU3R5bGUoIGN5ICk7XG5cbiAgZm9yKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrICl7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzWyBpIF07XG4gICAgdmFyIHNlbGVjdG9yID0gY29udGV4dC5zZWxlY3RvcjtcbiAgICB2YXIgcHJvcHMgPSBjb250ZXh0LnByb3BlcnRpZXM7XG5cbiAgICBzdHlsZS5zZWxlY3Rvciggc2VsZWN0b3IgKTsgLy8gYXBwbHkgc2VsZWN0b3JcblxuICAgIGZvciggdmFyIGogPSAwOyBqIDwgcHJvcHMubGVuZ3RoOyBqKysgKXtcbiAgICAgIHZhciBwcm9wID0gcHJvcHNbIGogXTtcblxuICAgICAgc3R5bGUuY3NzKCBwcm9wLm5hbWUsIHByb3AudmFsdWUgKTsgLy8gYXBwbHkgcHJvcGVydHlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0eWxlc2hlZXQ7XG4iLCIvKiEgV2VhdmVyIGxpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly90bGRybGVnYWwuY29tL2xpY2Vuc2UvbWl0LWxpY2Vuc2UpLCBjb3B5cmlnaHQgTWF4IEZyYW56ICovXG5cbi8vIGNyb3NzLWVudiB0aHJlYWQvd29ya2VyXG4vLyBOQiA6IHVzZXMgKGhlYXZ5d2VpZ2h0KSBwcm9jZXNzZXMgb24gbm9kZWpzIHNvIGJlc3Qgbm90IHRvIGNyZWF0ZSB0b28gbWFueSB0aHJlYWRzXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHdpbmRvdyA9IHJlcXVpcmUoJy4vd2luZG93Jyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIFByb21pc2UgPSByZXF1aXJlKCcuL3Byb21pc2UnKTtcbnZhciBFdmVudCA9IHJlcXVpcmUoJy4vZXZlbnQnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCcuL2RlZmluZScpO1xudmFyIGlzID0gcmVxdWlyZSgnLi9pcycpO1xuXG52YXIgVGhyZWFkID0gZnVuY3Rpb24oIG9wdHMgKXtcbiAgaWYoICEodGhpcyBpbnN0YW5jZW9mIFRocmVhZCkgKXtcbiAgICByZXR1cm4gbmV3IFRocmVhZCggb3B0cyApO1xuICB9XG5cbiAgdmFyIF9wID0gdGhpcy5fcHJpdmF0ZSA9IHtcbiAgICByZXF1aXJlczogW10sXG4gICAgZmlsZXM6IFtdLFxuICAgIHF1ZXVlOiBudWxsLFxuICAgIHBhc3M6IFtdLFxuICAgIGRpc2FibGVkOiBmYWxzZVxuICB9O1xuXG4gIGlmKCBpcy5wbGFpbk9iamVjdChvcHRzKSApe1xuICAgIGlmKCBvcHRzLmRpc2FibGVkICE9IG51bGwgKXtcbiAgICAgIF9wLmRpc2FibGVkID0gISFvcHRzLmRpc2FibGVkO1xuICAgIH1cbiAgfVxuXG59O1xuXG52YXIgdGhkZm4gPSBUaHJlYWQucHJvdG90eXBlOyAvLyBzaG9ydCBhbGlhc1xuXG52YXIgc3RyaW5naWZ5RmllbGRWYWwgPSBmdW5jdGlvbiggdmFsICl7XG4gIHZhciB2YWxTdHIgPSBpcy5mbiggdmFsICkgPyB2YWwudG9TdHJpbmcoKSA6IFwiSlNPTi5wYXJzZSgnXCIgKyBKU09OLnN0cmluZ2lmeSh2YWwpICsgXCInKVwiO1xuXG4gIHJldHVybiB2YWxTdHI7XG59O1xuXG4vLyBhbGxvd3MgZm9yIHJlcXVpcmVzIHdpdGggcHJvdG90eXBlcyBhbmQgc3Vib2JqcyBldGNcbnZhciBmbkFzUmVxdWlyZSA9IGZ1bmN0aW9uKCBmbiApe1xuICB2YXIgcmVxO1xuICB2YXIgZm5OYW1lO1xuXG4gIGlmKCBpcy5vYmplY3QoZm4pICYmIGZuLmZuICl7IC8vIG1hbnVhbCBmblxuICAgIHJlcSA9IGZuQXMoIGZuLmZuLCBmbi5uYW1lICk7XG4gICAgZm5OYW1lID0gZm4ubmFtZTtcbiAgICBmbiA9IGZuLmZuO1xuICB9IGVsc2UgaWYoIGlzLmZuKGZuKSApeyAvLyBhdXRvIGZuXG4gICAgcmVxID0gZm4udG9TdHJpbmcoKTtcbiAgICBmbk5hbWUgPSBmbi5uYW1lO1xuICB9IGVsc2UgaWYoIGlzLnN0cmluZyhmbikgKXsgLy8gc3RyaW5naWZpZWQgZm5cbiAgICByZXEgPSBmbjtcbiAgfSBlbHNlIGlmKCBpcy5vYmplY3QoZm4pICl7IC8vIHBsYWluIG9iamVjdFxuICAgIGlmKCBmbi5wcm90byApe1xuICAgICAgcmVxID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcSA9IGZuLm5hbWUgKyAnID0ge307JztcbiAgICB9XG5cbiAgICBmbk5hbWUgPSBmbi5uYW1lO1xuICAgIGZuID0gZm4ub2JqO1xuICB9XG5cbiAgcmVxICs9ICdcXG4nO1xuXG4gIHZhciBwcm90b3JlcSA9IGZ1bmN0aW9uKCB2YWwsIHN1Ym5hbWUgKXtcbiAgICBpZiggdmFsLnByb3RvdHlwZSApe1xuICAgICAgdmFyIHByb3RvTm9uZW1wdHkgPSBmYWxzZTtcbiAgICAgIGZvciggdmFyIHByb3AgaW4gdmFsLnByb3RvdHlwZSApeyBwcm90b05vbmVtcHR5ID0gdHJ1ZTsgYnJlYWs7IH0gLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cbiAgICAgIGlmKCBwcm90b05vbmVtcHR5ICl7XG4gICAgICAgIHJlcSArPSBmbkFzUmVxdWlyZSgge1xuICAgICAgICAgIG5hbWU6IHN1Ym5hbWUsXG4gICAgICAgICAgb2JqOiB2YWwsXG4gICAgICAgICAgcHJvdG86IHRydWVcbiAgICAgICAgfSwgdmFsICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIHB1bGwgaW4gcHJvdG90eXBlXG4gIGlmKCBmbi5wcm90b3R5cGUgJiYgZm5OYW1lICE9IG51bGwgKXtcblxuICAgIGZvciggdmFyIG5hbWUgaW4gZm4ucHJvdG90eXBlICl7XG4gICAgICB2YXIgcHJvdG9TdHIgPSAnJztcblxuICAgICAgdmFyIHZhbCA9IGZuLnByb3RvdHlwZVsgbmFtZSBdO1xuICAgICAgdmFyIHZhbFN0ciA9IHN0cmluZ2lmeUZpZWxkVmFsKCB2YWwgKTtcbiAgICAgIHZhciBzdWJuYW1lID0gZm5OYW1lICsgJy5wcm90b3R5cGUuJyArIG5hbWU7XG5cbiAgICAgIHByb3RvU3RyICs9IHN1Ym5hbWUgKyAnID0gJyArIHZhbFN0ciArICc7XFxuJztcblxuICAgICAgaWYoIHByb3RvU3RyICl7XG4gICAgICAgIHJlcSArPSBwcm90b1N0cjtcbiAgICAgIH1cblxuICAgICAgcHJvdG9yZXEoIHZhbCwgc3VibmFtZSApOyAvLyBzdWJvYmplY3Qgd2l0aCBwcm90b3R5cGVcbiAgICB9XG5cbiAgfVxuXG4gIC8vIHB1bGwgaW4gcHJvcGVydGllcyBmb3Igb2JqL2Zuc1xuICBpZiggIWlzLnN0cmluZyhmbikgKXsgZm9yKCB2YXIgbmFtZSBpbiBmbiApe1xuICAgIHZhciBwcm9wc1N0ciA9ICcnO1xuXG4gICAgaWYoIGZuLmhhc093blByb3BlcnR5KG5hbWUpICl7XG4gICAgICB2YXIgdmFsID0gZm5bIG5hbWUgXTtcbiAgICAgIHZhciB2YWxTdHIgPSBzdHJpbmdpZnlGaWVsZFZhbCggdmFsICk7XG4gICAgICB2YXIgc3VibmFtZSA9IGZuTmFtZSArICdbXCInICsgbmFtZSArICdcIl0nO1xuXG4gICAgICBwcm9wc1N0ciArPSBzdWJuYW1lICsgJyA9ICcgKyB2YWxTdHIgKyAnO1xcbic7XG4gICAgfVxuXG4gICAgaWYoIHByb3BzU3RyICl7XG4gICAgICByZXEgKz0gcHJvcHNTdHI7XG4gICAgfVxuXG4gICAgcHJvdG9yZXEoIHZhbCwgc3VibmFtZSApOyAvLyBzdWJvYmplY3Qgd2l0aCBwcm90b3R5cGVcbiAgfSB9XG5cbiAgcmV0dXJuIHJlcTtcbn07XG5cbnZhciBpc1BhdGhTdHIgPSBmdW5jdGlvbiggc3RyICl7XG4gIHJldHVybiBpcy5zdHJpbmcoc3RyKSAmJiBzdHIubWF0Y2goL1xcLmpzJC8pO1xufTtcblxudXRpbC5leHRlbmQodGhkZm4sIHtcblxuICBpbnN0YW5jZVN0cmluZzogZnVuY3Rpb24oKXsgcmV0dXJuICd0aHJlYWQnOyB9LFxuXG4gIHJlcXVpcmU6IGZ1bmN0aW9uKCBmbiwgYXMgKXtcbiAgICB2YXIgcmVxdWlyZXMgPSB0aGlzLl9wcml2YXRlLnJlcXVpcmVzO1xuXG4gICAgaWYoIGlzUGF0aFN0cihmbikgKXtcbiAgICAgIHRoaXMuX3ByaXZhdGUuZmlsZXMucHVzaCggZm4gKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYoIGFzICl7XG4gICAgICBpZiggaXMuZm4oZm4pICl7XG4gICAgICAgIGZuID0geyBuYW1lOiBhcywgZm46IGZuIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbiA9IHsgbmFtZTogYXMsIG9iajogZm4gfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYoIGlzLmZuKGZuKSApe1xuICAgICAgICBpZiggIWZuLm5hbWUgKXtcbiAgICAgICAgICB0aHJvdyAnVGhlIGZ1bmN0aW9uIG5hbWUgY291bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgZGV0ZXJtaW5lZC4gIFVzZSB0aHJlYWQucmVxdWlyZSggc29tZUZ1bmN0aW9uLCBcInNvbWVGdW5jdGlvblwiICknO1xuICAgICAgICB9XG5cbiAgICAgICAgZm4gPSB7IG5hbWU6IGZuLm5hbWUsIGZuOiBmbiB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlcXVpcmVzLnB1c2goIGZuICk7XG5cbiAgICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbiAgfSxcblxuICBwYXNzOiBmdW5jdGlvbiggZGF0YSApe1xuICAgIHRoaXMuX3ByaXZhdGUucGFzcy5wdXNoKCBkYXRhICk7XG5cbiAgICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbiAgfSxcblxuICBydW46IGZ1bmN0aW9uKCBmbiwgcGFzcyApeyAvLyBmbiB1c2VkIGxpa2UgbWFpbigpXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBfcCA9IHRoaXMuX3ByaXZhdGU7XG4gICAgcGFzcyA9IHBhc3MgfHwgX3AucGFzcy5zaGlmdCgpO1xuXG4gICAgaWYoIF9wLnN0b3BwZWQgKXtcbiAgICAgIHRocm93ICdBdHRlbXB0ZWQgdG8gcnVuIGEgc3RvcHBlZCB0aHJlYWQhICBTdGFydCBhIG5ldyB0aHJlYWQgb3IgZG8gbm90IHN0b3AgdGhlIGV4aXN0aW5nIHRocmVhZCBhbmQgcmV1c2UgaXQuJztcbiAgICB9XG5cbiAgICBpZiggX3AucnVubmluZyApe1xuICAgICAgcmV0dXJuICggX3AucXVldWUgPSBfcC5xdWV1ZS50aGVuKGZ1bmN0aW9uKCl7IC8vIGluZHVjdGl2ZSBzdGVwXG4gICAgICAgIHJldHVybiBzZWxmLnJ1biggZm4sIHBhc3MgKTtcbiAgICAgIH0pICk7XG4gICAgfVxuXG4gICAgdmFyIHVzZVdXID0gd2luZG93ICE9IG51bGwgJiYgIV9wLmRpc2FibGVkO1xuICAgIHZhciB1c2VOb2RlID0gIXdpbmRvdyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiAhX3AuZGlzYWJsZWQ7XG5cbiAgICBzZWxmLnRyaWdnZXIoJ3J1bicpO1xuXG4gICAgdmFyIHJ1blAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiggcmVzb2x2ZSwgcmVqZWN0ICl7XG5cbiAgICAgIF9wLnJ1bm5pbmcgPSB0cnVlO1xuXG4gICAgICB2YXIgdGhyZWFkVGVjaEFscmVhZHlFeGlzdHMgPSBfcC5yYW47XG5cbiAgICAgIHZhciBmbkltcGxTdHIgPSBpcy5zdHJpbmcoIGZuICkgPyBmbiA6IGZuLnRvU3RyaW5nKCk7XG5cbiAgICAgIC8vIHdvcmtlciBjb2RlIHRvIGV4ZWNcbiAgICAgIHZhciBmblN0ciA9ICdcXG4nICsgKCBfcC5yZXF1aXJlcy5tYXAoZnVuY3Rpb24oIHIgKXtcbiAgICAgICAgcmV0dXJuIGZuQXNSZXF1aXJlKCByICk7XG4gICAgICB9KSApLmNvbmNhdCggX3AuZmlsZXMubWFwKGZ1bmN0aW9uKCBmICl7XG4gICAgICAgIGlmKCB1c2VXVyApe1xuICAgICAgICAgIHZhciB3d2lmeUZpbGUgPSBmdW5jdGlvbiggZmlsZSApe1xuICAgICAgICAgICAgaWYoIGZpbGUubWF0Y2goL15cXC5cXC8vKSB8fCBmaWxlLm1hdGNoKC9eXFwuXFwuLykgKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyBmaWxlO1xuICAgICAgICAgICAgfSBlbHNlIGlmKCBmaWxlLm1hdGNoKC9eXFwvLykgKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyAnLycgKyBmaWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZpbGU7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiAnaW1wb3J0U2NyaXB0cyhcIicgKyB3d2lmeUZpbGUoZikgKyAnXCIpOyc7XG4gICAgICAgIH0gZWxzZSBpZiggdXNlTm9kZSApIHtcbiAgICAgICAgICByZXR1cm4gJ2V2YWwoIHJlcXVpcmUoXCJmc1wiKS5yZWFkRmlsZVN5bmMoXCInICsgZiArICdcIiwgeyBlbmNvZGluZzogXCJ1dGY4XCIgfSkgKTsnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93ICdFeHRlcm5hbCBmaWxlIGAnICsgZiArICdgIGNhbiBub3QgYmUgcmVxdWlyZWQgd2l0aG91dCBhbnkgdGhyZWFkaW5nIHRlY2hub2xvZ3kuJztcbiAgICAgICAgfVxuICAgICAgfSkgKS5jb25jYXQoW1xuICAgICAgICAnKCBmdW5jdGlvbigpeycsXG4gICAgICAgICAgJ3ZhciByZXQgPSAoJyArIGZuSW1wbFN0ciArICcpKCcgKyBKU09OLnN0cmluZ2lmeShwYXNzKSArICcpOycsXG4gICAgICAgICAgJ2lmKCByZXQgIT09IHVuZGVmaW5lZCApeyByZXNvbHZlKHJldCk7IH0nLCAvLyBhc3N1bWUgaWYgcmFuIGZuIHJldHVybnMgZGVmaW5lZCB2YWx1ZSAoaW5jbC4gbnVsbCksIHRoYXQgd2Ugd2FudCB0byByZXNvbHZlIHRvIGl0XG4gICAgICAgICd9ICkoKVxcbidcbiAgICAgIF0pLmpvaW4oJ1xcbicpO1xuXG4gICAgICAvLyBiZWNhdXNlIHdlJ3ZlIG5vdyBjb25zdW1lZCB0aGUgcmVxdWlyZXMsIGVtcHR5IHRoZSBsaXN0IHNvIHdlIGRvbid0IGR1cGUgb24gbmV4dCBydW4oKVxuICAgICAgX3AucmVxdWlyZXMgPSBbXTtcbiAgICAgIF9wLmZpbGVzID0gW107XG5cbiAgICAgIGlmKCB1c2VXVyApe1xuICAgICAgICB2YXIgZm5CbG9iLCBmblVybDtcblxuICAgICAgICAvLyBhZGQgbm9ybWFsaXNlZCB0aHJlYWQgYXBpIGZ1bmN0aW9uc1xuICAgICAgICBpZiggIXRocmVhZFRlY2hBbHJlYWR5RXhpc3RzICl7XG4gICAgICAgICAgdmFyIGZuUHJlID0gZm5TdHIgKyAnJztcblxuICAgICAgICAgIGZuU3RyID0gW1xuICAgICAgICAgICAgJ2Z1bmN0aW9uIF9yZWZfKG8peyByZXR1cm4gZXZhbChvKTsgfTsnLFxuICAgICAgICAgICAgJ2Z1bmN0aW9uIGJyb2FkY2FzdChtKXsgcmV0dXJuIG1lc3NhZ2UobSk7IH07JywgLy8gYWxpYXNcbiAgICAgICAgICAgICdmdW5jdGlvbiBtZXNzYWdlKG0peyBwb3N0TWVzc2FnZShtKTsgfTsnLFxuICAgICAgICAgICAgJ2Z1bmN0aW9uIGxpc3Rlbihmbil7JyxcbiAgICAgICAgICAgICcgIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgZnVuY3Rpb24obSl7ICcsXG4gICAgICAgICAgICAnICAgIGlmKCB0eXBlb2YgbSA9PT0gXCJvYmplY3RcIiAmJiAobS5kYXRhLiQkZXZhbCB8fCBtLmRhdGEgPT09IFwiJCRzdGFydFwiKSApeycsXG4gICAgICAgICAgICAnICAgIH0gZWxzZSB7ICcsXG4gICAgICAgICAgICAnICAgICAgZm4oIG0uZGF0YSApOycsXG4gICAgICAgICAgICAnICAgIH0nLFxuICAgICAgICAgICAgJyAgfSk7JyxcbiAgICAgICAgICAgICd9OycsXG4gICAgICAgICAgICAnc2VsZi5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBmdW5jdGlvbihtKXsgIGlmKCBtLmRhdGEuJCRldmFsICl7IGV2YWwoIG0uZGF0YS4kJGV2YWwgKTsgfSAgfSk7JyxcbiAgICAgICAgICAgICdmdW5jdGlvbiByZXNvbHZlKHYpeyBwb3N0TWVzc2FnZSh7ICQkcmVzb2x2ZTogdiB9KTsgfTsnLFxuICAgICAgICAgICAgJ2Z1bmN0aW9uIHJlamVjdCh2KXsgcG9zdE1lc3NhZ2UoeyAkJHJlamVjdDogdiB9KTsgfTsnXG4gICAgICAgICAgXS5qb2luKCdcXG4nKTtcblxuICAgICAgICAgIGZuU3RyICs9IGZuUHJlO1xuXG4gICAgICAgICAgZm5CbG9iID0gbmV3IEJsb2IoWyBmblN0ciBdLCB7XG4gICAgICAgICAgICB0eXBlOiAnYXBwbGljYXRpb24vamF2YXNjcmlwdCdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmblVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKCBmbkJsb2IgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjcmVhdGUgd2Vid29ya2VyIGFuZCBsZXQgaXQgZXhlYyB0aGUgc2VyaWFsaXNlZCBjb2RlXG4gICAgICAgIHZhciB3dyA9IF9wLndlYndvcmtlciA9IF9wLndlYndvcmtlciB8fCBuZXcgV29ya2VyKCBmblVybCApO1xuXG4gICAgICAgIGlmKCB0aHJlYWRUZWNoQWxyZWFkeUV4aXN0cyApeyAvLyB0aGVuIGp1c3QgZXhlYyBuZXcgcnVuKCkgY29kZVxuICAgICAgICAgIHd3LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICQkZXZhbDogZm5TdHJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdvcmtlciBtZXNzYWdlcyA9PiBldmVudHNcbiAgICAgICAgdmFyIGNiO1xuICAgICAgICB3dy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgY2IgPSBmdW5jdGlvbiggbSApe1xuICAgICAgICAgIHZhciBpc09iamVjdCA9IGlzLm9iamVjdChtKSAmJiBpcy5vYmplY3QoIG0uZGF0YSApO1xuXG4gICAgICAgICAgaWYoIGlzT2JqZWN0ICYmICgnJCRyZXNvbHZlJyBpbiBtLmRhdGEpICl7XG4gICAgICAgICAgICB3dy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgY2IpOyAvLyBkb25lIGxpc3RlbmluZyBiL2MgcmVzb2x2ZSgpXG5cbiAgICAgICAgICAgIHJlc29sdmUoIG0uZGF0YS4kJHJlc29sdmUgKTtcbiAgICAgICAgICB9IGVsc2UgaWYoIGlzT2JqZWN0ICYmICgnJCRyZWplY3QnIGluIG0uZGF0YSkgKXtcbiAgICAgICAgICAgIHd3LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBjYik7IC8vIGRvbmUgbGlzdGVuaW5nIGIvYyByZWplY3QoKVxuXG4gICAgICAgICAgICByZWplY3QoIG0uZGF0YS4kJHJlamVjdCApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLnRyaWdnZXIoIG5ldyBFdmVudChtLCB7IHR5cGU6ICdtZXNzYWdlJywgbWVzc2FnZTogbS5kYXRhIH0pICk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgaWYoICF0aHJlYWRUZWNoQWxyZWFkeUV4aXN0cyApe1xuICAgICAgICAgIHd3LnBvc3RNZXNzYWdlKCckJHN0YXJ0Jyk7IC8vIHN0YXJ0IHVwIHRoZSB3b3JrZXJcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYoIHVzZU5vZGUgKXtcbiAgICAgICAgLy8gY3JlYXRlIGEgbmV3IHByb2Nlc3NcblxuICAgICAgICBpZiggIV9wLmNoaWxkICl7XG4gICAgICAgICAgX3AuY2hpbGQgPSAoIHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKS5mb3JrKCByZXF1aXJlKCdwYXRoJykuam9pbihfX2Rpcm5hbWUsICd0aHJlYWQtbm9kZS1mb3JrJykgKSApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNoaWxkID0gX3AuY2hpbGQ7XG5cbiAgICAgICAgLy8gY2hpbGQgcHJvY2VzcyBtZXNzYWdlcyA9PiBldmVudHNcbiAgICAgICAgdmFyIGNiO1xuICAgICAgICBjaGlsZC5vbignbWVzc2FnZScsIGNiID0gZnVuY3Rpb24oIG0gKXtcbiAgICAgICAgICBpZiggaXMub2JqZWN0KG0pICYmICgnJCRyZXNvbHZlJyBpbiBtKSApe1xuICAgICAgICAgICAgY2hpbGQucmVtb3ZlTGlzdGVuZXIoJ21lc3NhZ2UnLCBjYik7IC8vIGRvbmUgbGlzdGVuaW5nIGIvYyByZXNvbHZlKClcblxuICAgICAgICAgICAgcmVzb2x2ZSggbS4kJHJlc29sdmUgKTtcbiAgICAgICAgICB9IGVsc2UgaWYoIGlzLm9iamVjdChtKSAmJiAoJyQkcmVqZWN0JyBpbiBtKSApe1xuICAgICAgICAgICAgY2hpbGQucmVtb3ZlTGlzdGVuZXIoJ21lc3NhZ2UnLCBjYik7IC8vIGRvbmUgbGlzdGVuaW5nIGIvYyByZWplY3QoKVxuXG4gICAgICAgICAgICByZWplY3QoIG0uJCRyZWplY3QgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCBuZXcgRXZlbnQoe30sIHsgdHlwZTogJ21lc3NhZ2UnLCBtZXNzYWdlOiBtIH0pICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhc2sgdGhlIGNoaWxkIHByb2Nlc3MgdG8gZXZhbCB0aGUgd29ya2VyIGNvZGVcbiAgICAgICAgY2hpbGQuc2VuZCh7XG4gICAgICAgICAgJCRldmFsOiBmblN0clxuICAgICAgICB9KTtcblxuICAgICAgfSBlbHNlIHsgLy8gdXNlIGEgZmFsbGJhY2sgbWVjaGFuaXNtIHVzaW5nIGEgdGltZW91dFxuXG4gICAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIHZhciBwcm9taXNlUmVqZWN0ID0gcmVqZWN0O1xuXG4gICAgICAgIHZhciB0aW1lciA9IF9wLnRpbWVyID0gX3AudGltZXIgfHwge1xuXG4gICAgICAgICAgbGlzdGVuZXJzOiBbXSxcblxuICAgICAgICAgIGV4ZWM6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyBhcyBhIHN0cmluZyBzbyBpdCBjYW4ndCBiZSBtYW5nbGVkIGJ5IG1pbmlmaWVycyBhbmQgcHJvY2Vzc29yc1xuICAgICAgICAgICAgZm5TdHIgPSBbXG4gICAgICAgICAgICAgICdmdW5jdGlvbiBfcmVmXyhvKXsgcmV0dXJuIGV2YWwobyk7IH07JyxcbiAgICAgICAgICAgICAgJ2Z1bmN0aW9uIGJyb2FkY2FzdChtKXsgcmV0dXJuIG1lc3NhZ2UobSk7IH07JyxcbiAgICAgICAgICAgICAgJ2Z1bmN0aW9uIG1lc3NhZ2UobSl7IHNlbGYudHJpZ2dlciggbmV3IEV2ZW50KHt9LCB7IHR5cGU6IFwibWVzc2FnZVwiLCBtZXNzYWdlOiBtIH0pICk7IH07JyxcbiAgICAgICAgICAgICAgJ2Z1bmN0aW9uIGxpc3Rlbihmbil7IHRpbWVyLmxpc3RlbmVycy5wdXNoKCBmbiApOyB9OycsXG4gICAgICAgICAgICAgICdmdW5jdGlvbiByZXNvbHZlKHYpeyBwcm9taXNlUmVzb2x2ZSh2KTsgfTsnLFxuICAgICAgICAgICAgICAnZnVuY3Rpb24gcmVqZWN0KHYpeyBwcm9taXNlUmVqZWN0KHYpOyB9OydcbiAgICAgICAgICAgIF0uam9pbignXFxuJykgKyBmblN0cjtcblxuICAgICAgICAgICAgLy8gdGhlIC5ydW4oKSBjb2RlXG4gICAgICAgICAgICBldmFsKCBmblN0ciApOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgbWVzc2FnZTogZnVuY3Rpb24oIG0gKXtcbiAgICAgICAgICAgIHZhciBscyA9IHRpbWVyLmxpc3RlbmVycztcblxuICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBscy5sZW5ndGg7IGkrKyApe1xuICAgICAgICAgICAgICB2YXIgZm4gPSBsc1tpXTtcblxuICAgICAgICAgICAgICBmbiggbSApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgICAgIHRpbWVyLmV4ZWMoKTtcbiAgICAgIH1cblxuICAgIH0pLnRoZW4oZnVuY3Rpb24oIHYgKXtcbiAgICAgIF9wLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgIF9wLnJhbiA9IHRydWU7XG5cbiAgICAgIHNlbGYudHJpZ2dlcigncmFuJyk7XG5cbiAgICAgIHJldHVybiB2O1xuICAgIH0pO1xuXG4gICAgaWYoIF9wLnF1ZXVlID09IG51bGwgKXtcbiAgICAgIF9wLnF1ZXVlID0gcnVuUDsgLy8gaS5lLiBmaXJzdCBzdGVwIG9mIGluZHVjdGl2ZSBwcm9taXNlIGNoYWluIChmb3IgcXVldWUpXG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1blA7XG4gIH0sXG5cbiAgLy8gc2VuZCB0aGUgdGhyZWFkIGEgbWVzc2FnZVxuICBtZXNzYWdlOiBmdW5jdGlvbiggbSApe1xuICAgIHZhciBfcCA9IHRoaXMuX3ByaXZhdGU7XG5cbiAgICBpZiggX3Aud2Vid29ya2VyICl7XG4gICAgICBfcC53ZWJ3b3JrZXIucG9zdE1lc3NhZ2UoIG0gKTtcbiAgICB9XG5cbiAgICBpZiggX3AuY2hpbGQgKXtcbiAgICAgIF9wLmNoaWxkLnNlbmQoIG0gKTtcbiAgICB9XG5cbiAgICBpZiggX3AudGltZXIgKXtcbiAgICAgIF9wLnRpbWVyLm1lc3NhZ2UoIG0gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpczsgLy8gY2hhaW5pbmdcbiAgfSxcblxuICBzdG9wOiBmdW5jdGlvbigpe1xuICAgIHZhciBfcCA9IHRoaXMuX3ByaXZhdGU7XG5cbiAgICBpZiggX3Aud2Vid29ya2VyICl7XG4gICAgICBfcC53ZWJ3b3JrZXIudGVybWluYXRlKCk7XG4gICAgfVxuXG4gICAgaWYoIF9wLmNoaWxkICl7XG4gICAgICBfcC5jaGlsZC5raWxsKCk7XG4gICAgfVxuXG4gICAgaWYoIF9wLnRpbWVyICl7XG4gICAgICAvLyBub3RoaW5nIHdlIGNhbiBkbyBpZiB3ZSd2ZSBydW4gYSB0aW1lb3V0XG4gICAgfVxuXG4gICAgX3Auc3RvcHBlZCA9IHRydWU7XG5cbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKCdzdG9wJyk7IC8vIGNoYWluaW5nXG4gIH0sXG5cbiAgc3RvcHBlZDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZS5zdG9wcGVkO1xuICB9XG5cbn0pO1xuXG4vLyB0dXJucyBhIHN0cmluZ2lmaWVkIGZ1bmN0aW9uIGludG8gYSAocmUpbmFtZWQgZnVuY3Rpb25cbnZhciBmbkFzID0gZnVuY3Rpb24oIGZuLCBuYW1lICl7XG4gIHZhciBmblN0ciA9IGZuLnRvU3RyaW5nKCk7XG4gIGZuU3RyID0gZm5TdHIucmVwbGFjZSgvZnVuY3Rpb25cXHMqP1xcUyo/XFxzKj9cXCgvLCAnZnVuY3Rpb24gJyArIG5hbWUgKyAnKCcpO1xuXG4gIHJldHVybiBmblN0cjtcbn07XG5cbnZhciBkZWZpbmVGbmFsID0gZnVuY3Rpb24oIG9wdHMgKXtcbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGZuYWxJbXBsKCBmbiwgYXJnMSApe1xuICAgIHZhciBmblN0ciA9IGZuQXMoIGZuLCAnXyRfJF8nICsgb3B0cy5uYW1lICk7XG5cbiAgICB0aGlzLnJlcXVpcmUoIGZuU3RyICk7XG5cbiAgICByZXR1cm4gdGhpcy5ydW4oIFtcbiAgICAgICdmdW5jdGlvbiggZGF0YSApeycsXG4gICAgICAnICB2YXIgb3JpZ1Jlc29sdmUgPSByZXNvbHZlOycsXG4gICAgICAnICB2YXIgcmVzID0gW107JyxcbiAgICAgICcgICcsXG4gICAgICAnICByZXNvbHZlID0gZnVuY3Rpb24oIHZhbCApeycsXG4gICAgICAnICAgIHJlcy5wdXNoKCB2YWwgKTsnLFxuICAgICAgJyAgfTsnLFxuICAgICAgJyAgJyxcbiAgICAgICcgIHZhciByZXQgPSBkYXRhLicgKyBvcHRzLm5hbWUgKyAnKCBfJF8kXycgKyBvcHRzLm5hbWUgKyAoIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gJywgJyArIEpTT04uc3RyaW5naWZ5KGFyZzEpIDogJycgKSArICcgKTsnLFxuICAgICAgJyAgJyxcbiAgICAgICcgIHJlc29sdmUgPSBvcmlnUmVzb2x2ZTsnLFxuICAgICAgJyAgcmVzb2x2ZSggcmVzLmxlbmd0aCA+IDAgPyByZXMgOiByZXQgKTsnLFxuICAgICAgJ30nXG4gICAgXS5qb2luKCdcXG4nKSApO1xuICB9O1xufTtcblxudXRpbC5leHRlbmQodGhkZm4sIHtcbiAgcmVkdWNlOiBkZWZpbmVGbmFsKHsgbmFtZTogJ3JlZHVjZScgfSksXG5cbiAgcmVkdWNlUmlnaHQ6IGRlZmluZUZuYWwoeyBuYW1lOiAncmVkdWNlUmlnaHQnIH0pLFxuXG4gIG1hcDogZGVmaW5lRm5hbCh7IG5hbWU6ICdtYXAnIH0pXG59KTtcblxuLy8gYWxpYXNlc1xudmFyIGZuID0gdGhkZm47XG5mbi5wcm9taXNlID0gZm4ucnVuO1xuZm4udGVybWluYXRlID0gZm4uaGFsdCA9IGZuLnN0b3A7XG5mbi5pbmNsdWRlID0gZm4ucmVxdWlyZTtcblxuLy8gcHVsbCBpbiBldmVudCBhcGlzXG51dGlsLmV4dGVuZCh0aGRmbiwge1xuICBvbjogZGVmaW5lLm9uKCksXG4gIG9uZTogZGVmaW5lLm9uKHsgdW5iaW5kU2VsZk9uVHJpZ2dlcjogdHJ1ZSB9KSxcbiAgb2ZmOiBkZWZpbmUub2ZmKCksXG4gIHRyaWdnZXI6IGRlZmluZS50cmlnZ2VyKClcbn0pO1xuXG5kZWZpbmUuZXZlbnRBbGlhc2VzT24oIHRoZGZuICk7XG5cbm1vZHVsZS5leHBvcnRzID0gVGhyZWFkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXMgPSByZXF1aXJlKCAnLi4vaXMnICk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBnZXQgW3IsIGcsIGJdIGZyb20gI2FiYyBvciAjYWFiYmNjXG4gIGhleDJ0dXBsZTogZnVuY3Rpb24oIGhleCApe1xuICAgIGlmKCAhKGhleC5sZW5ndGggPT09IDQgfHwgaGV4Lmxlbmd0aCA9PT0gNykgfHwgaGV4WzBdICE9PSAnIycgKXsgcmV0dXJuOyB9XG5cbiAgICB2YXIgc2hvcnRIZXggPSBoZXgubGVuZ3RoID09PSA0O1xuICAgIHZhciByLCBnLCBiO1xuICAgIHZhciBiYXNlID0gMTY7XG5cbiAgICBpZiggc2hvcnRIZXggKXtcbiAgICAgIHIgPSBwYXJzZUludCggaGV4WzFdICsgaGV4WzFdLCBiYXNlICk7XG4gICAgICBnID0gcGFyc2VJbnQoIGhleFsyXSArIGhleFsyXSwgYmFzZSApO1xuICAgICAgYiA9IHBhcnNlSW50KCBoZXhbM10gKyBoZXhbM10sIGJhc2UgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgciA9IHBhcnNlSW50KCBoZXhbMV0gKyBoZXhbMl0sIGJhc2UgKTtcbiAgICAgIGcgPSBwYXJzZUludCggaGV4WzNdICsgaGV4WzRdLCBiYXNlICk7XG4gICAgICBiID0gcGFyc2VJbnQoIGhleFs1XSArIGhleFs2XSwgYmFzZSApO1xuICAgIH1cblxuICAgIHJldHVybiBbIHIsIGcsIGIgXTtcbiAgfSxcblxuICAvLyBnZXQgW3IsIGcsIGIsIGFdIGZyb20gaHNsKDAsIDAsIDApIG9yIGhzbGEoMCwgMCwgMCwgMClcbiAgaHNsMnR1cGxlOiBmdW5jdGlvbiggaHNsICl7XG4gICAgdmFyIHJldDtcbiAgICB2YXIgaCwgcywgbCwgYSwgciwgZywgYjtcbiAgICBmdW5jdGlvbiBodWUycmdiKCBwLCBxLCB0ICl7XG4gICAgICBpZiggdCA8IDAgKSB0ICs9IDE7XG4gICAgICBpZiggdCA+IDEgKSB0IC09IDE7XG4gICAgICBpZiggdCA8IDEgLyA2ICkgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gICAgICBpZiggdCA8IDEgLyAyICkgcmV0dXJuIHE7XG4gICAgICBpZiggdCA8IDIgLyAzICkgcmV0dXJuIHAgKyAocSAtIHApICogKDIgLyAzIC0gdCkgKiA2O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuXG4gICAgdmFyIG0gPSBuZXcgUmVnRXhwKCAnXicgKyB0aGlzLnJlZ2V4LmhzbGEgKyAnJCcgKS5leGVjKCBoc2wgKTtcbiAgICBpZiggbSApe1xuXG4gICAgICAvLyBnZXQgaHVlXG4gICAgICBoID0gcGFyc2VJbnQoIG1bMV0gKTtcbiAgICAgIGlmKCBoIDwgMCApe1xuICAgICAgICBoID0gKCAzNjAgLSAoLTEgKiBoICUgMzYwKSApICUgMzYwO1xuICAgICAgfSBlbHNlIGlmKCBoID4gMzYwICl7XG4gICAgICAgIGggPSBoICUgMzYwO1xuICAgICAgfVxuICAgICAgaCAvPSAzNjA7IC8vIG5vcm1hbGlzZSBvbiBbMCwgMV1cblxuICAgICAgcyA9IHBhcnNlRmxvYXQoIG1bMl0gKTtcbiAgICAgIGlmKCBzIDwgMCB8fCBzID4gMTAwICl7IHJldHVybjsgfSAvLyBzYXR1cmF0aW9uIGlzIFswLCAxMDBdXG4gICAgICBzID0gcyAvIDEwMDsgLy8gbm9ybWFsaXNlIG9uIFswLCAxXVxuXG4gICAgICBsID0gcGFyc2VGbG9hdCggbVszXSApO1xuICAgICAgaWYoIGwgPCAwIHx8IGwgPiAxMDAgKXsgcmV0dXJuOyB9IC8vIGxpZ2h0bmVzcyBpcyBbMCwgMTAwXVxuICAgICAgbCA9IGwgLyAxMDA7IC8vIG5vcm1hbGlzZSBvbiBbMCwgMV1cblxuICAgICAgYSA9IG1bNF07XG4gICAgICBpZiggYSAhPT0gdW5kZWZpbmVkICl7XG4gICAgICAgIGEgPSBwYXJzZUZsb2F0KCBhICk7XG5cbiAgICAgICAgaWYoIGEgPCAwIHx8IGEgPiAxICl7IHJldHVybjsgfSAvLyBhbHBoYSBpcyBbMCwgMV1cbiAgICAgIH1cblxuICAgICAgLy8gbm93LCBjb252ZXJ0IHRvIHJnYlxuICAgICAgLy8gY29kZSBmcm9tIGh0dHA6Ly9tamlqYWNrc29uLmNvbS8yMDA4LzAyL3JnYi10by1oc2wtYW5kLXJnYi10by1oc3YtY29sb3ItbW9kZWwtY29udmVyc2lvbi1hbGdvcml0aG1zLWluLWphdmFzY3JpcHRcbiAgICAgIGlmKCBzID09PSAwICl7XG4gICAgICAgIHIgPSBnID0gYiA9IE1hdGgucm91bmQoIGwgKiAyNTUgKTsgLy8gYWNocm9tYXRpY1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHEgPSBsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICB2YXIgcCA9IDIgKiBsIC0gcTtcbiAgICAgICAgciA9IE1hdGgucm91bmQoIDI1NSAqIGh1ZTJyZ2IoIHAsIHEsIGggKyAxIC8gMyApICk7XG4gICAgICAgIGcgPSBNYXRoLnJvdW5kKCAyNTUgKiBodWUycmdiKCBwLCBxLCBoICkgKTtcbiAgICAgICAgYiA9IE1hdGgucm91bmQoIDI1NSAqIGh1ZTJyZ2IoIHAsIHEsIGggLSAxIC8gMyApICk7XG4gICAgICB9XG5cbiAgICAgIHJldCA9IFsgciwgZywgYiwgYSBdO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgLy8gZ2V0IFtyLCBnLCBiLCBhXSBmcm9tIHJnYigwLCAwLCAwKSBvciByZ2JhKDAsIDAsIDAsIDApXG4gIHJnYjJ0dXBsZTogZnVuY3Rpb24oIHJnYiApe1xuICAgIHZhciByZXQ7XG5cbiAgICB2YXIgbSA9IG5ldyBSZWdFeHAoICdeJyArIHRoaXMucmVnZXgucmdiYSArICckJyApLmV4ZWMoIHJnYiApO1xuICAgIGlmKCBtICl7XG4gICAgICByZXQgPSBbXTtcblxuICAgICAgdmFyIGlzUGN0ID0gW107XG4gICAgICBmb3IoIHZhciBpID0gMTsgaSA8PSAzOyBpKysgKXtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBtWyBpIF07XG5cbiAgICAgICAgaWYoIGNoYW5uZWxbIGNoYW5uZWwubGVuZ3RoIC0gMSBdID09PSAnJScgKXtcbiAgICAgICAgICBpc1BjdFsgaSBdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjaGFubmVsID0gcGFyc2VGbG9hdCggY2hhbm5lbCApO1xuXG4gICAgICAgIGlmKCBpc1BjdFsgaSBdICl7XG4gICAgICAgICAgY2hhbm5lbCA9IGNoYW5uZWwgLyAxMDAgKiAyNTU7IC8vIG5vcm1hbGlzZSB0byBbMCwgMjU1XVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIGNoYW5uZWwgPCAwIHx8IGNoYW5uZWwgPiAyNTUgKXsgcmV0dXJuOyB9IC8vIGludmFsaWQgY2hhbm5lbCB2YWx1ZVxuXG4gICAgICAgIHJldC5wdXNoKCBNYXRoLmZsb29yKCBjaGFubmVsICkgKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGF0TGVhc3RPbmVJc1BjdCA9IGlzUGN0WzFdIHx8IGlzUGN0WzJdIHx8IGlzUGN0WzNdO1xuICAgICAgdmFyIGFsbEFyZVBjdCA9IGlzUGN0WzFdICYmIGlzUGN0WzJdICYmIGlzUGN0WzNdO1xuICAgICAgaWYoIGF0TGVhc3RPbmVJc1BjdCAmJiAhYWxsQXJlUGN0ICl7IHJldHVybjsgfSAvLyBtdXN0IGFsbCBiZSBwZXJjZW50IHZhbHVlcyBpZiBvbmUgaXNcblxuICAgICAgdmFyIGFscGhhID0gbVs0XTtcbiAgICAgIGlmKCBhbHBoYSAhPT0gdW5kZWZpbmVkICl7XG4gICAgICAgIGFscGhhID0gcGFyc2VGbG9hdCggYWxwaGEgKTtcblxuICAgICAgICBpZiggYWxwaGEgPCAwIHx8IGFscGhhID4gMSApeyByZXR1cm47IH0gLy8gaW52YWxpZCBhbHBoYSB2YWx1ZVxuXG4gICAgICAgIHJldC5wdXNoKCBhbHBoYSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgY29sb3JuYW1lMnR1cGxlOiBmdW5jdGlvbiggY29sb3IgKXtcbiAgICByZXR1cm4gdGhpcy5jb2xvcnNbIGNvbG9yLnRvTG93ZXJDYXNlKCkgXTtcbiAgfSxcblxuICBjb2xvcjJ0dXBsZTogZnVuY3Rpb24oIGNvbG9yICl7XG4gICAgcmV0dXJuICggaXMuYXJyYXkoIGNvbG9yICkgPyBjb2xvciA6IG51bGwgKVxuICAgICAgfHwgdGhpcy5jb2xvcm5hbWUydHVwbGUoIGNvbG9yIClcbiAgICAgIHx8IHRoaXMuaGV4MnR1cGxlKCBjb2xvciApXG4gICAgICB8fCB0aGlzLnJnYjJ0dXBsZSggY29sb3IgKVxuICAgICAgfHwgdGhpcy5oc2wydHVwbGUoIGNvbG9yICk7XG4gIH0sXG5cbiAgY29sb3JzOiB7XG4gICAgLy8gc3BlY2lhbCBjb2xvdXIgbmFtZXNcbiAgICB0cmFuc3BhcmVudDogWzAsIDAsIDAsIDBdLCAvLyBOQiBhbHBoYSA9PT0gMFxuXG4gICAgLy8gcmVndWxhciBjb2xvdXJzXG4gICAgYWxpY2VibHVlOiBbIDI0MCwgMjQ4LCAyNTUgXSxcbiAgICBhbnRpcXVld2hpdGU6IFsgMjUwLCAyMzUsIDIxNSBdLFxuICAgIGFxdWE6IFswLCAyNTUsIDI1NSBdLFxuICAgIGFxdWFtYXJpbmU6IFsgMTI3LCAyNTUsIDIxMiBdLFxuICAgIGF6dXJlOiBbIDI0MCwgMjU1LCAyNTUgXSxcbiAgICBiZWlnZTogWyAyNDUsIDI0NSwgMjIwIF0sXG4gICAgYmlzcXVlOiBbIDI1NSwgMjI4LCAxOTYgXSxcbiAgICBibGFjazogWzAsIDAsIDBdLFxuICAgIGJsYW5jaGVkYWxtb25kOiBbIDI1NSwgMjM1LCAyMDUgXSxcbiAgICBibHVlOiBbMCwgMCwgMjU1IF0sXG4gICAgYmx1ZXZpb2xldDogWyAxMzgsIDQzLCAyMjYgXSxcbiAgICBicm93bjogWyAxNjUsIDQyLCA0MiBdLFxuICAgIGJ1cmx5d29vZDogWyAyMjIsIDE4NCwgMTM1IF0sXG4gICAgY2FkZXRibHVlOiBbIDk1LCAxNTgsIDE2MCBdLFxuICAgIGNoYXJ0cmV1c2U6IFsgMTI3LCAyNTUsIDBdLFxuICAgIGNob2NvbGF0ZTogWyAyMTAsIDEwNSwgMzAgXSxcbiAgICBjb3JhbDogWyAyNTUsIDEyNywgODAgXSxcbiAgICBjb3JuZmxvd2VyYmx1ZTogWyAxMDAsIDE0OSwgMjM3IF0sXG4gICAgY29ybnNpbGs6IFsgMjU1LCAyNDgsIDIyMCBdLFxuICAgIGNyaW1zb246IFsgMjIwLCAyMCwgNjAgXSxcbiAgICBjeWFuOiBbMCwgMjU1LCAyNTUgXSxcbiAgICBkYXJrYmx1ZTogWzAsIDAsIDEzOSBdLFxuICAgIGRhcmtjeWFuOiBbMCwgMTM5LCAxMzkgXSxcbiAgICBkYXJrZ29sZGVucm9kOiBbIDE4NCwgMTM0LCAxMSBdLFxuICAgIGRhcmtncmF5OiBbIDE2OSwgMTY5LCAxNjkgXSxcbiAgICBkYXJrZ3JlZW46IFswLCAxMDAsIDBdLFxuICAgIGRhcmtncmV5OiBbIDE2OSwgMTY5LCAxNjkgXSxcbiAgICBkYXJra2hha2k6IFsgMTg5LCAxODMsIDEwNyBdLFxuICAgIGRhcmttYWdlbnRhOiBbIDEzOSwgMCwgMTM5IF0sXG4gICAgZGFya29saXZlZ3JlZW46IFsgODUsIDEwNywgNDcgXSxcbiAgICBkYXJrb3JhbmdlOiBbIDI1NSwgMTQwLCAwXSxcbiAgICBkYXJrb3JjaGlkOiBbIDE1MywgNTAsIDIwNCBdLFxuICAgIGRhcmtyZWQ6IFsgMTM5LCAwLCAwXSxcbiAgICBkYXJrc2FsbW9uOiBbIDIzMywgMTUwLCAxMjIgXSxcbiAgICBkYXJrc2VhZ3JlZW46IFsgMTQzLCAxODgsIDE0MyBdLFxuICAgIGRhcmtzbGF0ZWJsdWU6IFsgNzIsIDYxLCAxMzkgXSxcbiAgICBkYXJrc2xhdGVncmF5OiBbIDQ3LCA3OSwgNzkgXSxcbiAgICBkYXJrc2xhdGVncmV5OiBbIDQ3LCA3OSwgNzkgXSxcbiAgICBkYXJrdHVycXVvaXNlOiBbMCwgMjA2LCAyMDkgXSxcbiAgICBkYXJrdmlvbGV0OiBbIDE0OCwgMCwgMjExIF0sXG4gICAgZGVlcHBpbms6IFsgMjU1LCAyMCwgMTQ3IF0sXG4gICAgZGVlcHNreWJsdWU6IFswLCAxOTEsIDI1NSBdLFxuICAgIGRpbWdyYXk6IFsgMTA1LCAxMDUsIDEwNSBdLFxuICAgIGRpbWdyZXk6IFsgMTA1LCAxMDUsIDEwNSBdLFxuICAgIGRvZGdlcmJsdWU6IFsgMzAsIDE0NCwgMjU1IF0sXG4gICAgZmlyZWJyaWNrOiBbIDE3OCwgMzQsIDM0IF0sXG4gICAgZmxvcmFsd2hpdGU6IFsgMjU1LCAyNTAsIDI0MCBdLFxuICAgIGZvcmVzdGdyZWVuOiBbIDM0LCAxMzksIDM0IF0sXG4gICAgZnVjaHNpYTogWyAyNTUsIDAsIDI1NSBdLFxuICAgIGdhaW5zYm9ybzogWyAyMjAsIDIyMCwgMjIwIF0sXG4gICAgZ2hvc3R3aGl0ZTogWyAyNDgsIDI0OCwgMjU1IF0sXG4gICAgZ29sZDogWyAyNTUsIDIxNSwgMF0sXG4gICAgZ29sZGVucm9kOiBbIDIxOCwgMTY1LCAzMiBdLFxuICAgIGdyYXk6IFsgMTI4LCAxMjgsIDEyOCBdLFxuICAgIGdyZXk6IFsgMTI4LCAxMjgsIDEyOCBdLFxuICAgIGdyZWVuOiBbMCwgMTI4LCAwXSxcbiAgICBncmVlbnllbGxvdzogWyAxNzMsIDI1NSwgNDcgXSxcbiAgICBob25leWRldzogWyAyNDAsIDI1NSwgMjQwIF0sXG4gICAgaG90cGluazogWyAyNTUsIDEwNSwgMTgwIF0sXG4gICAgaW5kaWFucmVkOiBbIDIwNSwgOTIsIDkyIF0sXG4gICAgaW5kaWdvOiBbIDc1LCAwLCAxMzAgXSxcbiAgICBpdm9yeTogWyAyNTUsIDI1NSwgMjQwIF0sXG4gICAga2hha2k6IFsgMjQwLCAyMzAsIDE0MCBdLFxuICAgIGxhdmVuZGVyOiBbIDIzMCwgMjMwLCAyNTAgXSxcbiAgICBsYXZlbmRlcmJsdXNoOiBbIDI1NSwgMjQwLCAyNDUgXSxcbiAgICBsYXduZ3JlZW46IFsgMTI0LCAyNTIsIDBdLFxuICAgIGxlbW9uY2hpZmZvbjogWyAyNTUsIDI1MCwgMjA1IF0sXG4gICAgbGlnaHRibHVlOiBbIDE3MywgMjE2LCAyMzAgXSxcbiAgICBsaWdodGNvcmFsOiBbIDI0MCwgMTI4LCAxMjggXSxcbiAgICBsaWdodGN5YW46IFsgMjI0LCAyNTUsIDI1NSBdLFxuICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiBbIDI1MCwgMjUwLCAyMTAgXSxcbiAgICBsaWdodGdyYXk6IFsgMjExLCAyMTEsIDIxMSBdLFxuICAgIGxpZ2h0Z3JlZW46IFsgMTQ0LCAyMzgsIDE0NCBdLFxuICAgIGxpZ2h0Z3JleTogWyAyMTEsIDIxMSwgMjExIF0sXG4gICAgbGlnaHRwaW5rOiBbIDI1NSwgMTgyLCAxOTMgXSxcbiAgICBsaWdodHNhbG1vbjogWyAyNTUsIDE2MCwgMTIyIF0sXG4gICAgbGlnaHRzZWFncmVlbjogWyAzMiwgMTc4LCAxNzAgXSxcbiAgICBsaWdodHNreWJsdWU6IFsgMTM1LCAyMDYsIDI1MCBdLFxuICAgIGxpZ2h0c2xhdGVncmF5OiBbIDExOSwgMTM2LCAxNTMgXSxcbiAgICBsaWdodHNsYXRlZ3JleTogWyAxMTksIDEzNiwgMTUzIF0sXG4gICAgbGlnaHRzdGVlbGJsdWU6IFsgMTc2LCAxOTYsIDIyMiBdLFxuICAgIGxpZ2h0eWVsbG93OiBbIDI1NSwgMjU1LCAyMjQgXSxcbiAgICBsaW1lOiBbMCwgMjU1LCAwXSxcbiAgICBsaW1lZ3JlZW46IFsgNTAsIDIwNSwgNTAgXSxcbiAgICBsaW5lbjogWyAyNTAsIDI0MCwgMjMwIF0sXG4gICAgbWFnZW50YTogWyAyNTUsIDAsIDI1NSBdLFxuICAgIG1hcm9vbjogWyAxMjgsIDAsIDBdLFxuICAgIG1lZGl1bWFxdWFtYXJpbmU6IFsgMTAyLCAyMDUsIDE3MCBdLFxuICAgIG1lZGl1bWJsdWU6IFswLCAwLCAyMDUgXSxcbiAgICBtZWRpdW1vcmNoaWQ6IFsgMTg2LCA4NSwgMjExIF0sXG4gICAgbWVkaXVtcHVycGxlOiBbIDE0NywgMTEyLCAyMTkgXSxcbiAgICBtZWRpdW1zZWFncmVlbjogWyA2MCwgMTc5LCAxMTMgXSxcbiAgICBtZWRpdW1zbGF0ZWJsdWU6IFsgMTIzLCAxMDQsIDIzOCBdLFxuICAgIG1lZGl1bXNwcmluZ2dyZWVuOiBbMCwgMjUwLCAxNTQgXSxcbiAgICBtZWRpdW10dXJxdW9pc2U6IFsgNzIsIDIwOSwgMjA0IF0sXG4gICAgbWVkaXVtdmlvbGV0cmVkOiBbIDE5OSwgMjEsIDEzMyBdLFxuICAgIG1pZG5pZ2h0Ymx1ZTogWyAyNSwgMjUsIDExMiBdLFxuICAgIG1pbnRjcmVhbTogWyAyNDUsIDI1NSwgMjUwIF0sXG4gICAgbWlzdHlyb3NlOiBbIDI1NSwgMjI4LCAyMjUgXSxcbiAgICBtb2NjYXNpbjogWyAyNTUsIDIyOCwgMTgxIF0sXG4gICAgbmF2YWpvd2hpdGU6IFsgMjU1LCAyMjIsIDE3MyBdLFxuICAgIG5hdnk6IFswLCAwLCAxMjggXSxcbiAgICBvbGRsYWNlOiBbIDI1MywgMjQ1LCAyMzAgXSxcbiAgICBvbGl2ZTogWyAxMjgsIDEyOCwgMF0sXG4gICAgb2xpdmVkcmFiOiBbIDEwNywgMTQyLCAzNSBdLFxuICAgIG9yYW5nZTogWyAyNTUsIDE2NSwgMF0sXG4gICAgb3JhbmdlcmVkOiBbIDI1NSwgNjksIDBdLFxuICAgIG9yY2hpZDogWyAyMTgsIDExMiwgMjE0IF0sXG4gICAgcGFsZWdvbGRlbnJvZDogWyAyMzgsIDIzMiwgMTcwIF0sXG4gICAgcGFsZWdyZWVuOiBbIDE1MiwgMjUxLCAxNTIgXSxcbiAgICBwYWxldHVycXVvaXNlOiBbIDE3NSwgMjM4LCAyMzggXSxcbiAgICBwYWxldmlvbGV0cmVkOiBbIDIxOSwgMTEyLCAxNDcgXSxcbiAgICBwYXBheWF3aGlwOiBbIDI1NSwgMjM5LCAyMTMgXSxcbiAgICBwZWFjaHB1ZmY6IFsgMjU1LCAyMTgsIDE4NSBdLFxuICAgIHBlcnU6IFsgMjA1LCAxMzMsIDYzIF0sXG4gICAgcGluazogWyAyNTUsIDE5MiwgMjAzIF0sXG4gICAgcGx1bTogWyAyMjEsIDE2MCwgMjIxIF0sXG4gICAgcG93ZGVyYmx1ZTogWyAxNzYsIDIyNCwgMjMwIF0sXG4gICAgcHVycGxlOiBbIDEyOCwgMCwgMTI4IF0sXG4gICAgcmVkOiBbIDI1NSwgMCwgMF0sXG4gICAgcm9zeWJyb3duOiBbIDE4OCwgMTQzLCAxNDMgXSxcbiAgICByb3lhbGJsdWU6IFsgNjUsIDEwNSwgMjI1IF0sXG4gICAgc2FkZGxlYnJvd246IFsgMTM5LCA2OSwgMTkgXSxcbiAgICBzYWxtb246IFsgMjUwLCAxMjgsIDExNCBdLFxuICAgIHNhbmR5YnJvd246IFsgMjQ0LCAxNjQsIDk2IF0sXG4gICAgc2VhZ3JlZW46IFsgNDYsIDEzOSwgODcgXSxcbiAgICBzZWFzaGVsbDogWyAyNTUsIDI0NSwgMjM4IF0sXG4gICAgc2llbm5hOiBbIDE2MCwgODIsIDQ1IF0sXG4gICAgc2lsdmVyOiBbIDE5MiwgMTkyLCAxOTIgXSxcbiAgICBza3libHVlOiBbIDEzNSwgMjA2LCAyMzUgXSxcbiAgICBzbGF0ZWJsdWU6IFsgMTA2LCA5MCwgMjA1IF0sXG4gICAgc2xhdGVncmF5OiBbIDExMiwgMTI4LCAxNDQgXSxcbiAgICBzbGF0ZWdyZXk6IFsgMTEyLCAxMjgsIDE0NCBdLFxuICAgIHNub3c6IFsgMjU1LCAyNTAsIDI1MCBdLFxuICAgIHNwcmluZ2dyZWVuOiBbMCwgMjU1LCAxMjcgXSxcbiAgICBzdGVlbGJsdWU6IFsgNzAsIDEzMCwgMTgwIF0sXG4gICAgdGFuOiBbIDIxMCwgMTgwLCAxNDAgXSxcbiAgICB0ZWFsOiBbMCwgMTI4LCAxMjggXSxcbiAgICB0aGlzdGxlOiBbIDIxNiwgMTkxLCAyMTYgXSxcbiAgICB0b21hdG86IFsgMjU1LCA5OSwgNzEgXSxcbiAgICB0dXJxdW9pc2U6IFsgNjQsIDIyNCwgMjA4IF0sXG4gICAgdmlvbGV0OiBbIDIzOCwgMTMwLCAyMzggXSxcbiAgICB3aGVhdDogWyAyNDUsIDIyMiwgMTc5IF0sXG4gICAgd2hpdGU6IFsgMjU1LCAyNTUsIDI1NSBdLFxuICAgIHdoaXRlc21va2U6IFsgMjQ1LCAyNDUsIDI0NSBdLFxuICAgIHllbGxvdzogWyAyNTUsIDI1NSwgMF0sXG4gICAgeWVsbG93Z3JlZW46IFsgMTU0LCAyMDUsIDUwIF1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLypnbG9iYWwgY29uc29sZSAqL1xuXG52YXIgaXMgPSByZXF1aXJlKCAnLi4vaXMnICk7XG52YXIgbWF0aCA9IHJlcXVpcmUoICcuLi9tYXRoJyApO1xuXG52YXIgdXRpbCA9IHtcblxuICB0cnVlaWZ5OiBmdW5jdGlvbigpeyByZXR1cm4gdHJ1ZTsgfSxcblxuICBmYWxzaWZ5OiBmdW5jdGlvbigpeyByZXR1cm4gZmFsc2U7IH0sXG5cbiAgemVyb2lmeTogZnVuY3Rpb24oKXsgcmV0dXJuIDA7IH0sXG5cbiAgbm9vcDogZnVuY3Rpb24oKXt9LFxuXG4gIGVycm9yOiBmdW5jdGlvbiggbXNnICl7XG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICBpZiggY29uc29sZS5lcnJvciApe1xuICAgICAgY29uc29sZS5lcnJvci5hcHBseSggY29uc29sZSwgYXJndW1lbnRzICk7XG5cbiAgICAgIGlmKCBjb25zb2xlLnRyYWNlICl7IGNvbnNvbGUudHJhY2UoKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZy5hcHBseSggY29uc29sZSwgYXJndW1lbnRzICk7XG5cbiAgICAgIGlmKCBjb25zb2xlLnRyYWNlICl7IGNvbnNvbGUudHJhY2UoKTsgfVxuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gIH0sXG5cbiAgY2xvbmU6IGZ1bmN0aW9uKCBvYmogKXtcbiAgICByZXR1cm4gdGhpcy5leHRlbmQoIHt9LCBvYmogKTtcbiAgfSxcblxuICAvLyBnZXRzIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBhcmd1bWVudFxuICBjb3B5OiBmdW5jdGlvbiggb2JqICl7XG4gICAgaWYoIG9iaiA9PSBudWxsICl7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0gaWYoIGlzLmFycmF5KCBvYmogKSApe1xuICAgICAgcmV0dXJuIG9iai5zbGljZSgpO1xuICAgIH0gZWxzZSBpZiggaXMucGxhaW5PYmplY3QoIG9iaiApICl7XG4gICAgICByZXR1cm4gdGhpcy5jbG9uZSggb2JqICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICB9LFxuXG4gIHV1aWQ6IGZ1bmN0aW9uKFxuICAgICAgYSxiICAgICAgICAgICAgICAgIC8vIHBsYWNlaG9sZGVyc1xuICApe1xuICAgICAgZm9yKCAgICAgICAgICAgICAgIC8vIGxvb3AgOilcbiAgICAgICAgICBiPWE9Jyc7ICAgICAgICAvLyBiIC0gcmVzdWx0ICwgYSAtIG51bWVyaWMgdmFyaWFibGVcbiAgICAgICAgICBhKys8MzY7ICAgICAgICAvL1xuICAgICAgICAgIGIrPWEqNTEmNTIgIC8vIGlmIFwiYVwiIGlzIG5vdCA5IG9yIDE0IG9yIDE5IG9yIDI0XG4gICAgICAgICAgICAgICAgICAgICAgPyAgLy8gIHJldHVybiBhIHJhbmRvbSBudW1iZXIgb3IgNFxuICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgIGFeMTUgICAgICAvLyBpZiBcImFcIiBpcyBub3QgMTVcbiAgICAgICAgICAgICAgICAgID8gICAgICAvLyBnZW5ldGF0ZSBhIHJhbmRvbSBudW1iZXIgZnJvbSAwIHRvIDE1XG4gICAgICAgICAgICAgICA4Xk1hdGgucmFuZG9tKCkqXG4gICAgICAgICAgICAgICAoYV4yMD8xNjo0KSAgLy8gdW5sZXNzIFwiYVwiIGlzIDIwLCBpbiB3aGljaCBjYXNlIGEgcmFuZG9tIG51bWJlciBmcm9tIDggdG8gMTFcbiAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgIDQgICAgICAgICAgICAvLyAgb3RoZXJ3aXNlIDRcbiAgICAgICAgICAgICAgICkudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICctJyAgICAgICAgICAgIC8vICBpbiBvdGhlciBjYXNlcyAoaWYgXCJhXCIgaXMgOSwxNCwxOSwyNCkgaW5zZXJ0IFwiLVwiXG4gICAgICAgICAgKTtcbiAgICAgIHJldHVybiBiO1xuICB9XG5cbn07XG5cbnV0aWwubWFrZUJvdW5kaW5nQm94ID0gbWF0aC5tYWtlQm91bmRpbmdCb3guYmluZCggbWF0aCApO1xuXG51dGlsLl9zdGF0aWNFbXB0eU9iamVjdCA9IHt9O1xuXG51dGlsLnN0YXRpY0VtcHR5T2JqZWN0ID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHV0aWwuX3N0YXRpY0VtcHR5T2JqZWN0O1xufTtcblxudXRpbC5leHRlbmQgPSBPYmplY3QuYXNzaWduICE9IG51bGwgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24oIHRndCApe1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICBmb3IoIHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKysgKXtcbiAgICB2YXIgb2JqID0gYXJnc1sgaSBdO1xuXG4gICAgaWYoICFvYmogKXsgY29udGludWU7IH1cblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoIG9iaiApO1xuXG4gICAgZm9yKCB2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgaisrICl7XG4gICAgICB2YXIgayA9IGtleXNbal07XG5cbiAgICAgIHRndFsgayBdID0gb2JqWyBrIF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRndDtcbn07XG5cbnV0aWwuZGVmYXVsdCA9IGZ1bmN0aW9uKCB2YWwsIGRlZiApe1xuICBpZiggdmFsID09PSB1bmRlZmluZWQgKXtcbiAgICByZXR1cm4gZGVmO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbn07XG5cbnV0aWwucmVtb3ZlRnJvbUFycmF5ID0gZnVuY3Rpb24oIGFyciwgZWxlLCBtYW55Q29waWVzICl7XG4gIGZvciggdmFyIGkgPSBhcnIubGVuZ3RoOyBpID49IDA7IGktLSApe1xuICAgIGlmKCBhcnJbaV0gPT09IGVsZSApe1xuICAgICAgYXJyLnNwbGljZSggaSwgMSApO1xuXG4gICAgICBpZiggIW1hbnlDb3BpZXMgKXsgYnJlYWs7IH1cbiAgICB9XG4gIH1cbn07XG5cbnV0aWwuY2xlYXJBcnJheSA9IGZ1bmN0aW9uKCBhcnIgKXtcbiAgYXJyLnNwbGljZSggMCwgYXJyLmxlbmd0aCApO1xufTtcblxudXRpbC5nZXRQcmVmaXhlZFByb3BlcnR5ID0gZnVuY3Rpb24oIG9iaiwgcHJvcE5hbWUsIHByZWZpeCApe1xuICBpZiggcHJlZml4ICl7XG4gICAgcHJvcE5hbWUgPSB0aGlzLnByZXBlbmRDYW1lbCggcHJlZml4LCBwcm9wTmFtZSApOyAvLyBlLmcuIChsYWJlbFdpZHRoLCBzb3VyY2UpID0+IHNvdXJjZUxhYmVsV2lkdGhcbiAgfVxuXG4gIHJldHVybiBvYmpbIHByb3BOYW1lIF07XG59O1xuXG51dGlsLnNldFByZWZpeGVkUHJvcGVydHkgPSBmdW5jdGlvbiggb2JqLCBwcm9wTmFtZSwgcHJlZml4LCB2YWx1ZSApe1xuICBpZiggcHJlZml4ICl7XG4gICAgcHJvcE5hbWUgPSB0aGlzLnByZXBlbmRDYW1lbCggcHJlZml4LCBwcm9wTmFtZSApOyAvLyBlLmcuIChsYWJlbFdpZHRoLCBzb3VyY2UpID0+IHNvdXJjZUxhYmVsV2lkdGhcbiAgfVxuXG4gIG9ialsgcHJvcE5hbWUgXSA9IHZhbHVlO1xufTtcblxuW1xuICByZXF1aXJlKCAnLi9jb2xvcnMnICksXG4gIHJlcXVpcmUoICcuL21hcHMnICksXG4gIHsgbWVtb2l6ZTogcmVxdWlyZSggJy4vbWVtb2l6ZScgKSB9LFxuICByZXF1aXJlKCAnLi9yZWdleCcgKSxcbiAgcmVxdWlyZSggJy4vc3RyaW5ncycgKSxcbiAgcmVxdWlyZSggJy4vdGltaW5nJyApXG5dLmZvckVhY2goIGZ1bmN0aW9uKCByZXEgKXtcbiAgdXRpbC5leHRlbmQoIHV0aWwsIHJlcSApO1xufSApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHV0aWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpcyA9IHJlcXVpcmUoICcuLi9pcycgKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGhhcyBhbnl0aGluZyBiZWVuIHNldCBpbiB0aGUgbWFwXG4gIG1hcEVtcHR5OiBmdW5jdGlvbiggbWFwICl7XG4gICAgdmFyIGVtcHR5ID0gdHJ1ZTtcblxuICAgIGlmKCBtYXAgIT0gbnVsbCApe1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKCBtYXAgKS5sZW5ndGggPT09IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVtcHR5O1xuICB9LFxuXG4gIC8vIHB1c2hlcyB0byB0aGUgYXJyYXkgYXQgdGhlIGVuZCBvZiBhIG1hcCAobWFwIG1heSBub3QgYmUgYnVpbHQpXG4gIHB1c2hNYXA6IGZ1bmN0aW9uKCBvcHRpb25zICl7XG4gICAgdmFyIGFycmF5ID0gdGhpcy5nZXRNYXAoIG9wdGlvbnMgKTtcblxuICAgIGlmKCBhcnJheSA9PSBudWxsICl7IC8vIGlmIGVtcHR5LCBwdXQgaW5pdGlhbCBhcnJheVxuICAgICAgdGhpcy5zZXRNYXAoIHRoaXMuZXh0ZW5kKCB7fSwgb3B0aW9ucywge1xuICAgICAgICB2YWx1ZTogWyBvcHRpb25zLnZhbHVlIF1cbiAgICAgIH0gKSApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcnJheS5wdXNoKCBvcHRpb25zLnZhbHVlICk7XG4gICAgfVxuICB9LFxuXG4gIC8vIHNldHMgdGhlIHZhbHVlIGluIGEgbWFwIChtYXAgbWF5IG5vdCBiZSBidWlsdClcbiAgc2V0TWFwOiBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAgIHZhciBvYmogPSBvcHRpb25zLm1hcDtcbiAgICB2YXIga2V5O1xuICAgIHZhciBrZXlzID0gb3B0aW9ucy5rZXlzO1xuICAgIHZhciBsID0ga2V5cy5sZW5ndGg7XG5cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IGw7IGkrKyApe1xuICAgICAgdmFyIGtleSA9IGtleXNbIGkgXTtcblxuICAgICAgaWYoIGlzLnBsYWluT2JqZWN0KCBrZXkgKSApe1xuICAgICAgICB0aGlzLmVycm9yKCAnVHJpZWQgdG8gc2V0IG1hcCB3aXRoIG9iamVjdCBrZXknICk7XG4gICAgICB9XG5cbiAgICAgIGlmKCBpIDwga2V5cy5sZW5ndGggLSAxICl7XG5cbiAgICAgICAgLy8gZXh0ZW5kIHRoZSBtYXAgaWYgbmVjZXNzYXJ5XG4gICAgICAgIGlmKCBvYmpbIGtleSBdID09IG51bGwgKXtcbiAgICAgICAgICBvYmpbIGtleSBdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBvYmogPSBvYmpbIGtleSBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZVxuICAgICAgICBvYmpbIGtleSBdID0gb3B0aW9ucy52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gZ2V0cyB0aGUgdmFsdWUgaW4gYSBtYXAgZXZlbiBpZiBpdCdzIG5vdCBidWlsdCBpbiBwbGFjZXNcbiAgZ2V0TWFwOiBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAgIHZhciBvYmogPSBvcHRpb25zLm1hcDtcbiAgICB2YXIga2V5cyA9IG9wdGlvbnMua2V5cztcbiAgICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBsOyBpKysgKXtcbiAgICAgIHZhciBrZXkgPSBrZXlzWyBpIF07XG5cbiAgICAgIGlmKCBpcy5wbGFpbk9iamVjdCgga2V5ICkgKXtcbiAgICAgICAgdGhpcy5lcnJvciggJ1RyaWVkIHRvIGdldCBtYXAgd2l0aCBvYmplY3Qga2V5JyApO1xuICAgICAgfVxuXG4gICAgICBvYmogPSBvYmpbIGtleSBdO1xuXG4gICAgICBpZiggb2JqID09IG51bGwgKXtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9LFxuXG4gIC8vIGRlbGV0ZXMgdGhlIGVudHJ5IGluIHRoZSBtYXBcbiAgZGVsZXRlTWFwOiBmdW5jdGlvbiggb3B0aW9ucyApe1xuICAgIHZhciBvYmogPSBvcHRpb25zLm1hcDtcbiAgICB2YXIga2V5cyA9IG9wdGlvbnMua2V5cztcbiAgICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBrZWVwQ2hpbGRyZW4gPSBvcHRpb25zLmtlZXBDaGlsZHJlbjtcblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgbDsgaSsrICl7XG4gICAgICB2YXIga2V5ID0ga2V5c1sgaSBdO1xuXG4gICAgICBpZiggaXMucGxhaW5PYmplY3QoIGtleSApICl7XG4gICAgICAgIHRoaXMuZXJyb3IoICdUcmllZCB0byBkZWxldGUgbWFwIHdpdGggb2JqZWN0IGtleScgKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxhc3RLZXkgPSBpID09PSBvcHRpb25zLmtleXMubGVuZ3RoIC0gMTtcbiAgICAgIGlmKCBsYXN0S2V5ICl7XG5cbiAgICAgICAgaWYoIGtlZXBDaGlsZHJlbiApeyAvLyB0aGVuIG9ubHkgZGVsZXRlIGNoaWxkIGZpZWxkcyBub3QgaW4ga2VlcENoaWxkcmVuXG4gICAgICAgICAgdmFyIGNoaWxkcmVuID0gT2JqZWN0LmtleXMoIG9iaiApO1xuXG4gICAgICAgICAgZm9yKCB2YXIgaiA9IDA7IGogPCBjaGlsZHJlbi5sZW5ndGg7IGorKyApe1xuICAgICAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5bal07XG5cbiAgICAgICAgICAgIGlmKCAha2VlcENoaWxkcmVuWyBjaGlsZCBdICl7XG4gICAgICAgICAgICAgIG9ialsgY2hpbGQgXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JqWyBrZXkgXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmogPSBvYmpbIGtleSBdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZW1vaXplKCBmbiwga2V5Rm4gKXtcbiAgaWYoICFrZXlGbiApe1xuICAgIGtleUZuID0gZnVuY3Rpb24oKXtcbiAgICAgIGlmKCBhcmd1bWVudHMubGVuZ3RoID09PSAxICl7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9IGVsc2UgaWYoIGFyZ3VtZW50cy5sZW5ndGggPT09IDAgKXtcbiAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXJncyA9IFtdO1xuXG4gICAgICBmb3IoIHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApe1xuICAgICAgICBhcmdzLnB1c2goIGFyZ3VtZW50c1sgaSBdICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcmdzLmpvaW4oICckJyApO1xuICAgIH07XG4gIH1cblxuICB2YXIgbWVtb2l6ZWRGbiA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciByZXQ7XG4gICAgdmFyIGsgPSBrZXlGbi5hcHBseSggc2VsZiwgYXJncyApO1xuICAgIHZhciBjYWNoZSA9IG1lbW9pemVkRm4uY2FjaGU7XG5cbiAgICBpZiggIShyZXQgPSBjYWNoZVsgayBdKSApe1xuICAgICAgcmV0ID0gY2FjaGVbIGsgXSA9IGZuLmFwcGx5KCBzZWxmLCBhcmdzICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBtZW1vaXplZEZuLmNhY2hlID0ge307XG5cbiAgcmV0dXJuIG1lbW9pemVkRm47XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbnVtYmVyID0gJyg/OlstK10/KD86KD86XFxcXGQrfFxcXFxkKlxcXFwuXFxcXGQrKSg/OltFZV1bKy1dP1xcXFxkKyk/KSknO1xuXG52YXIgcmdiYSA9ICdyZ2JbYV0/XFxcXCgoJyArIG51bWJlciArICdbJV0/KVxcXFxzKixcXFxccyooJyArIG51bWJlciArICdbJV0/KVxcXFxzKixcXFxccyooJyArIG51bWJlciArICdbJV0/KSg/OlxcXFxzKixcXFxccyooJyArIG51bWJlciArICcpKT9cXFxcKSc7XG52YXIgcmdiYU5vQmFja1JlZnMgPSAncmdiW2FdP1xcXFwoKD86JyArIG51bWJlciArICdbJV0/KVxcXFxzKixcXFxccyooPzonICsgbnVtYmVyICsgJ1slXT8pXFxcXHMqLFxcXFxzKig/OicgKyBudW1iZXIgKyAnWyVdPykoPzpcXFxccyosXFxcXHMqKD86JyArIG51bWJlciArICcpKT9cXFxcKSc7XG5cbnZhciBoc2xhID0gJ2hzbFthXT9cXFxcKCgnICsgbnVtYmVyICsgJylcXFxccyosXFxcXHMqKCcgKyBudW1iZXIgKyAnWyVdKVxcXFxzKixcXFxccyooJyArIG51bWJlciArICdbJV0pKD86XFxcXHMqLFxcXFxzKignICsgbnVtYmVyICsgJykpP1xcXFwpJztcbnZhciBoc2xhTm9CYWNrUmVmcyA9ICdoc2xbYV0/XFxcXCgoPzonICsgbnVtYmVyICsgJylcXFxccyosXFxcXHMqKD86JyArIG51bWJlciArICdbJV0pXFxcXHMqLFxcXFxzKig/OicgKyBudW1iZXIgKyAnWyVdKSg/OlxcXFxzKixcXFxccyooPzonICsgbnVtYmVyICsgJykpP1xcXFwpJztcblxudmFyIGhleDMgPSAnXFxcXCNbMC05YS1mQS1GXXszfSc7XG52YXIgaGV4NiA9ICdcXFxcI1swLTlhLWZBLUZdezZ9JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlZ2V4OiB7XG4gICAgbnVtYmVyOiBudW1iZXIsXG4gICAgcmdiYTogcmdiYSxcbiAgICByZ2JhTm9CYWNrUmVmczogcmdiYU5vQmFja1JlZnMsXG4gICAgaHNsYTogaHNsYSxcbiAgICBoc2xhTm9CYWNrUmVmczogaHNsYU5vQmFja1JlZnMsXG4gICAgaGV4MzogaGV4MyxcbiAgICBoZXg2OiBoZXg2XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtZW1vaXplID0gcmVxdWlyZSggJy4vbWVtb2l6ZScgKTtcbnZhciBpcyA9IHJlcXVpcmUoICcuLi9pcycgKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgY2FtZWwyZGFzaDogbWVtb2l6ZSggZnVuY3Rpb24oIHN0ciApe1xuICAgIHJldHVybiBzdHIucmVwbGFjZSggLyhbQS1aXSkvZywgZnVuY3Rpb24oIHYgKXtcbiAgICAgIHJldHVybiAnLScgKyB2LnRvTG93ZXJDYXNlKCk7XG4gICAgfSApO1xuICB9ICksXG5cbiAgZGFzaDJjYW1lbDogbWVtb2l6ZSggZnVuY3Rpb24oIHN0ciApe1xuICAgIHJldHVybiBzdHIucmVwbGFjZSggLygtXFx3KS9nLCBmdW5jdGlvbiggdiApe1xuICAgICAgcmV0dXJuIHZbMV0udG9VcHBlckNhc2UoKTtcbiAgICB9ICk7XG4gIH0gKSxcblxuICBwcmVwZW5kQ2FtZWw6IG1lbW9pemUoIGZ1bmN0aW9uKCBwcmVmaXgsIHN0ciApe1xuICAgIHJldHVybiBwcmVmaXggKyBzdHJbMF0udG9VcHBlckNhc2UoKSArIHN0ci5zdWJzdHJpbmcoMSk7XG4gIH0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN0ciApe1xuICAgIHJldHVybiBwcmVmaXggKyAnJCcgKyBzdHI7XG4gIH0gKSxcblxuICBjYXBpdGFsaXplOiBmdW5jdGlvbiggc3RyICl7XG4gICAgaWYoIGlzLmVtcHR5U3RyaW5nKCBzdHIgKSApe1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyaW5nKCAxICk7XG4gIH1cblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdpbmRvdyA9IHJlcXVpcmUoICcuLi93aW5kb3cnICk7XG52YXIgaXMgPSByZXF1aXJlKCAnLi4vaXMnICk7XG52YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cgPyB3aW5kb3cucGVyZm9ybWFuY2UgOiBudWxsO1xuXG52YXIgdXRpbCA9IHt9O1xuXG52YXIgcmFmID0gIXdpbmRvdyA/IGZ1bmN0aW9uKCBmbiApe1xuICBpZiggZm4gKXtcbiAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpe1xuICAgICAgZm4oIHBub3coKSApO1xuICAgIH0sIDEwMDAgLyA2MCApO1xuICB9XG59IDogKGZ1bmN0aW9uKCl7XG4gIGlmKCB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCBmbiApeyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBmbiApOyB9O1xuICB9IGVsc2UgaWYoIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKXtcbiAgICByZXR1cm4gZnVuY3Rpb24oIGZuICl7IHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIGZuICk7IH1cbiAgfSBlbHNlIGlmKCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lICl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCBmbiApeyB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBmbiApOyB9XG4gIH0gZWxzZSBpZiggd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lICl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCBmbiApeyB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIGZuICk7IH1cbiAgfVxufSkoKTtcblxudXRpbC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiggZm4gKXtcbiAgcmFmKCBmbiApO1xufTtcblxudmFyIHBub3cgPSBwZXJmb3JtYW5jZSAmJiBwZXJmb3JtYW5jZS5ub3cgPyBmdW5jdGlvbigpeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH0gOiBmdW5jdGlvbigpeyByZXR1cm4gRGF0ZS5ub3coKTsgfTtcblxudXRpbC5wZXJmb3JtYW5jZU5vdyA9IHBub3c7XG5cbi8vIHBvcnRlZCBsb2Rhc2ggdGhyb3R0bGUgZnVuY3Rpb25cbnV0aWwudGhyb3R0bGUgPSBmdW5jdGlvbiggZnVuYywgd2FpdCwgb3B0aW9ucyApe1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYoIG9wdGlvbnMgPT09IGZhbHNlICl7XG4gICAgbGVhZGluZyA9IGZhbHNlO1xuICB9IGVsc2UgaWYoIGlzLnBsYWluT2JqZWN0KCBvcHRpb25zICkgKXtcbiAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyBvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmxlYWRpbmcgPSBsZWFkaW5nO1xuICBvcHRpb25zLm1heFdhaXQgPSB3YWl0O1xuICBvcHRpb25zLnRyYWlsaW5nID0gdHJhaWxpbmc7XG5cbiAgcmV0dXJuIHV0aWwuZGVib3VuY2UoIGZ1bmMsIHdhaXQsIG9wdGlvbnMgKTtcbn07XG5cbnV0aWwubm93ID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIERhdGUubm93KCk7XG59O1xuXG51dGlsLmRlYm91bmNlID0gZnVuY3Rpb24oIGZ1bmMsIHdhaXQsIG9wdGlvbnMgKXsgLy8gcG9ydGVkIGxvZGFzaCBkZWJvdW5jZSBmdW5jdGlvblxuICB2YXIgdXRpbCA9IHRoaXM7XG4gIHZhciBhcmdzLFxuICAgICAgbWF4VGltZW91dElkLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhbXAsXG4gICAgICB0aGlzQXJnLFxuICAgICAgdGltZW91dElkLFxuICAgICAgdHJhaWxpbmdDYWxsLFxuICAgICAgbGFzdENhbGxlZCA9IDAsXG4gICAgICBtYXhXYWl0ID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYoICFpcy5mbiggZnVuYyApICl7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdhaXQgPSBNYXRoLm1heCggMCwgd2FpdCApIHx8IDA7XG4gIGlmKCBvcHRpb25zID09PSB0cnVlICl7XG4gICAgdmFyIGxlYWRpbmcgPSB0cnVlO1xuICAgIHRyYWlsaW5nID0gZmFsc2U7XG4gIH0gZWxzZSBpZiggaXMucGxhaW5PYmplY3QoIG9wdGlvbnMgKSApe1xuICAgIGxlYWRpbmcgPSBvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4V2FpdCA9ICdtYXhXYWl0JyBpbiBvcHRpb25zICYmIChNYXRoLm1heCggd2FpdCwgb3B0aW9ucy5tYXhXYWl0ICkgfHwgMCk7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyBvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgdmFyIGRlbGF5ZWQgPSBmdW5jdGlvbigpe1xuICAgIHZhciByZW1haW5pbmcgPSB3YWl0IC0gKHV0aWwubm93KCkgLSBzdGFtcCk7XG4gICAgaWYoIHJlbWFpbmluZyA8PSAwICl7XG4gICAgICBpZiggbWF4VGltZW91dElkICl7XG4gICAgICAgIGNsZWFyVGltZW91dCggbWF4VGltZW91dElkICk7XG4gICAgICB9XG4gICAgICB2YXIgaXNDYWxsZWQgPSB0cmFpbGluZ0NhbGw7XG4gICAgICBtYXhUaW1lb3V0SWQgPSB0aW1lb3V0SWQgPSB0cmFpbGluZ0NhbGwgPSB1bmRlZmluZWQ7XG4gICAgICBpZiggaXNDYWxsZWQgKXtcbiAgICAgICAgbGFzdENhbGxlZCA9IHV0aWwubm93KCk7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoIHRoaXNBcmcsIGFyZ3MgKTtcbiAgICAgICAgaWYoICF0aW1lb3V0SWQgJiYgIW1heFRpbWVvdXRJZCApe1xuICAgICAgICAgIGFyZ3MgPSB0aGlzQXJnID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCBkZWxheWVkLCByZW1haW5pbmcgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG1heERlbGF5ZWQgPSBmdW5jdGlvbigpe1xuICAgIGlmKCB0aW1lb3V0SWQgKXtcbiAgICAgIGNsZWFyVGltZW91dCggdGltZW91dElkICk7XG4gICAgfVxuICAgIG1heFRpbWVvdXRJZCA9IHRpbWVvdXRJZCA9IHRyYWlsaW5nQ2FsbCA9IHVuZGVmaW5lZDtcbiAgICBpZiggdHJhaWxpbmcgfHwgKG1heFdhaXQgIT09IHdhaXQpICl7XG4gICAgICBsYXN0Q2FsbGVkID0gdXRpbC5ub3coKTtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoIHRoaXNBcmcsIGFyZ3MgKTtcbiAgICAgIGlmKCAhdGltZW91dElkICYmICFtYXhUaW1lb3V0SWQgKXtcbiAgICAgICAgYXJncyA9IHRoaXNBcmcgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHN0YW1wID0gdXRpbC5ub3coKTtcbiAgICB0aGlzQXJnID0gdGhpcztcbiAgICB0cmFpbGluZ0NhbGwgPSB0cmFpbGluZyAmJiAodGltZW91dElkIHx8ICFsZWFkaW5nKTtcblxuICAgIGlmKCBtYXhXYWl0ID09PSBmYWxzZSApe1xuICAgICAgdmFyIGxlYWRpbmdDYWxsID0gbGVhZGluZyAmJiAhdGltZW91dElkO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiggIW1heFRpbWVvdXRJZCAmJiAhbGVhZGluZyApe1xuICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICB9XG4gICAgICB2YXIgcmVtYWluaW5nID0gbWF4V2FpdCAtIChzdGFtcCAtIGxhc3RDYWxsZWQpLFxuICAgICAgICAgIGlzQ2FsbGVkID0gcmVtYWluaW5nIDw9IDA7XG5cbiAgICAgIGlmKCBpc0NhbGxlZCApe1xuICAgICAgICBpZiggbWF4VGltZW91dElkICl7XG4gICAgICAgICAgbWF4VGltZW91dElkID0gY2xlYXJUaW1lb3V0KCBtYXhUaW1lb3V0SWQgKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoIHRoaXNBcmcsIGFyZ3MgKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYoICFtYXhUaW1lb3V0SWQgKXtcbiAgICAgICAgbWF4VGltZW91dElkID0gc2V0VGltZW91dCggbWF4RGVsYXllZCwgcmVtYWluaW5nICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmKCBpc0NhbGxlZCAmJiB0aW1lb3V0SWQgKXtcbiAgICAgIHRpbWVvdXRJZCA9IGNsZWFyVGltZW91dCggdGltZW91dElkICk7XG4gICAgfVxuICAgIGVsc2UgaWYoICF0aW1lb3V0SWQgJiYgd2FpdCAhPT0gbWF4V2FpdCApe1xuICAgICAgdGltZW91dElkID0gc2V0VGltZW91dCggZGVsYXllZCwgd2FpdCApO1xuICAgIH1cbiAgICBpZiggbGVhZGluZ0NhbGwgKXtcbiAgICAgIGlzQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoIHRoaXNBcmcsIGFyZ3MgKTtcbiAgICB9XG4gICAgaWYoIGlzQ2FsbGVkICYmICF0aW1lb3V0SWQgJiYgIW1heFRpbWVvdXRJZCApe1xuICAgICAgYXJncyA9IHRoaXNBcmcgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB1dGlsO1xuIiwibW9kdWxlLmV4cG9ydHM9XCIyLjcuMTJcIiIsIm1vZHVsZS5leHBvcnRzID0gKCB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiB3aW5kb3cgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBpc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheShhcnIpIHtcblx0aWYgKHR5cGVvZiBBcnJheS5pc0FycmF5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKTtcblx0fVxuXG5cdHJldHVybiB0b1N0ci5jYWxsKGFycikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG52YXIgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG5cdGlmICghb2JqIHx8IHRvU3RyLmNhbGwob2JqKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgaGFzT3duQ29uc3RydWN0b3IgPSBoYXNPd24uY2FsbChvYmosICdjb25zdHJ1Y3RvcicpO1xuXHR2YXIgaGFzSXNQcm90b3R5cGVPZiA9IG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IucHJvdG90eXBlICYmIGhhc093bi5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdpc1Byb3RvdHlwZU9mJyk7XG5cdC8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3Rcblx0aWYgKG9iai5jb25zdHJ1Y3RvciAmJiAhaGFzT3duQ29uc3RydWN0b3IgJiYgIWhhc0lzUHJvdG90eXBlT2YpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCxcblx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uXG5cdHZhciBrZXk7XG5cdGZvciAoa2V5IGluIG9iaikgey8qKi99XG5cblx0cmV0dXJuIHR5cGVvZiBrZXkgPT09ICd1bmRlZmluZWQnIHx8IGhhc093bi5jYWxsKG9iaiwga2V5KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXh0ZW5kKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzBdLFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKHR5cGVvZiB0YXJnZXQgPT09ICdib29sZWFuJykge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuXHRcdC8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHRpID0gMjtcblx0fSBlbHNlIGlmICgodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJykgfHwgdGFyZ2V0ID09IG51bGwpIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdGZvciAoOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRvcHRpb25zID0gYXJndW1lbnRzW2ldO1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAob3B0aW9ucyAhPSBudWxsKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbbmFtZV07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zW25hbWVdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKHRhcmdldCAhPT0gY29weSkge1xuXHRcdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRcdGlmIChkZWVwICYmIGNvcHkgJiYgKGlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0gaXNBcnJheShjb3B5KSkpKSB7XG5cdFx0XHRcdFx0XHRpZiAoY29weUlzQXJyYXkpIHtcblx0XHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNBcnJheShzcmMpID8gc3JjIDogW107XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0XHR0YXJnZXRbbmFtZV0gPSBleHRlbmQoZGVlcCwgY2xvbmUsIGNvcHkpO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGNvcHkgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHR0YXJnZXRbbmFtZV0gPSBjb3B5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG4iLCIvKiBGaWxlU2F2ZXIuanNcbiAqIEEgc2F2ZUFzKCkgRmlsZVNhdmVyIGltcGxlbWVudGF0aW9uLlxuICogMS4zLjJcbiAqIDIwMTYtMDYtMTYgMTg6MjU6MTlcbiAqXG4gKiBCeSBFbGkgR3JleSwgaHR0cDovL2VsaWdyZXkuY29tXG4gKiBMaWNlbnNlOiBNSVRcbiAqICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGlncmV5L0ZpbGVTYXZlci5qcy9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG4gKi9cblxuLypnbG9iYWwgc2VsZiAqL1xuLypqc2xpbnQgYml0d2lzZTogdHJ1ZSwgaW5kZW50OiA0LCBsYXhicmVhazogdHJ1ZSwgbGF4Y29tbWE6IHRydWUsIHNtYXJ0dGFiczogdHJ1ZSwgcGx1c3BsdXM6IHRydWUgKi9cblxuLyohIEBzb3VyY2UgaHR0cDovL3B1cmwuZWxpZ3JleS5jb20vZ2l0aHViL0ZpbGVTYXZlci5qcy9ibG9iL21hc3Rlci9GaWxlU2F2ZXIuanMgKi9cblxudmFyIHNhdmVBcyA9IHNhdmVBcyB8fCAoZnVuY3Rpb24odmlldykge1xuXHRcInVzZSBzdHJpY3RcIjtcblx0Ly8gSUUgPDEwIGlzIGV4cGxpY2l0bHkgdW5zdXBwb3J0ZWRcblx0aWYgKHR5cGVvZiB2aWV3ID09PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiYgL01TSUUgWzEtOV1cXC4vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyXG5cdFx0ICBkb2MgPSB2aWV3LmRvY3VtZW50XG5cdFx0ICAvLyBvbmx5IGdldCBVUkwgd2hlbiBuZWNlc3NhcnkgaW4gY2FzZSBCbG9iLmpzIGhhc24ndCBvdmVycmlkZGVuIGl0IHlldFxuXHRcdCwgZ2V0X1VSTCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHZpZXcuVVJMIHx8IHZpZXcud2Via2l0VVJMIHx8IHZpZXc7XG5cdFx0fVxuXHRcdCwgc2F2ZV9saW5rID0gZG9jLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiwgXCJhXCIpXG5cdFx0LCBjYW5fdXNlX3NhdmVfbGluayA9IFwiZG93bmxvYWRcIiBpbiBzYXZlX2xpbmtcblx0XHQsIGNsaWNrID0gZnVuY3Rpb24obm9kZSkge1xuXHRcdFx0dmFyIGV2ZW50ID0gbmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiKTtcblx0XHRcdG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdFx0fVxuXHRcdCwgaXNfc2FmYXJpID0gL2NvbnN0cnVjdG9yL2kudGVzdCh2aWV3LkhUTUxFbGVtZW50KSB8fCB2aWV3LnNhZmFyaVxuXHRcdCwgaXNfY2hyb21lX2lvcyA9L0NyaU9TXFwvW1xcZF0rLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpXG5cdFx0LCB0aHJvd19vdXRzaWRlID0gZnVuY3Rpb24oZXgpIHtcblx0XHRcdCh2aWV3LnNldEltbWVkaWF0ZSB8fCB2aWV3LnNldFRpbWVvdXQpKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aHJvdyBleDtcblx0XHRcdH0sIDApO1xuXHRcdH1cblx0XHQsIGZvcmNlX3NhdmVhYmxlX3R5cGUgPSBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiXG5cdFx0Ly8gdGhlIEJsb2IgQVBJIGlzIGZ1bmRhbWVudGFsbHkgYnJva2VuIGFzIHRoZXJlIGlzIG5vIFwiZG93bmxvYWRmaW5pc2hlZFwiIGV2ZW50IHRvIHN1YnNjcmliZSB0b1xuXHRcdCwgYXJiaXRyYXJ5X3Jldm9rZV90aW1lb3V0ID0gMTAwMCAqIDQwIC8vIGluIG1zXG5cdFx0LCByZXZva2UgPSBmdW5jdGlvbihmaWxlKSB7XG5cdFx0XHR2YXIgcmV2b2tlciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAodHlwZW9mIGZpbGUgPT09IFwic3RyaW5nXCIpIHsgLy8gZmlsZSBpcyBhbiBvYmplY3QgVVJMXG5cdFx0XHRcdFx0Z2V0X1VSTCgpLnJldm9rZU9iamVjdFVSTChmaWxlKTtcblx0XHRcdFx0fSBlbHNlIHsgLy8gZmlsZSBpcyBhIEZpbGVcblx0XHRcdFx0XHRmaWxlLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0c2V0VGltZW91dChyZXZva2VyLCBhcmJpdHJhcnlfcmV2b2tlX3RpbWVvdXQpO1xuXHRcdH1cblx0XHQsIGRpc3BhdGNoID0gZnVuY3Rpb24oZmlsZXNhdmVyLCBldmVudF90eXBlcywgZXZlbnQpIHtcblx0XHRcdGV2ZW50X3R5cGVzID0gW10uY29uY2F0KGV2ZW50X3R5cGVzKTtcblx0XHRcdHZhciBpID0gZXZlbnRfdHlwZXMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHR2YXIgbGlzdGVuZXIgPSBmaWxlc2F2ZXJbXCJvblwiICsgZXZlbnRfdHlwZXNbaV1dO1xuXHRcdFx0XHRpZiAodHlwZW9mIGxpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0bGlzdGVuZXIuY2FsbChmaWxlc2F2ZXIsIGV2ZW50IHx8IGZpbGVzYXZlcik7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZXgpIHtcblx0XHRcdFx0XHRcdHRocm93X291dHNpZGUoZXgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHQsIGF1dG9fYm9tID0gZnVuY3Rpb24oYmxvYikge1xuXHRcdFx0Ly8gcHJlcGVuZCBCT00gZm9yIFVURi04IFhNTCBhbmQgdGV4dC8qIHR5cGVzIChpbmNsdWRpbmcgSFRNTClcblx0XHRcdC8vIG5vdGU6IHlvdXIgYnJvd3NlciB3aWxsIGF1dG9tYXRpY2FsbHkgY29udmVydCBVVEYtMTYgVStGRUZGIHRvIEVGIEJCIEJGXG5cdFx0XHRpZiAoL15cXHMqKD86dGV4dFxcL1xcUyp8YXBwbGljYXRpb25cXC94bWx8XFxTKlxcL1xcUypcXCt4bWwpXFxzKjsuKmNoYXJzZXRcXHMqPVxccyp1dGYtOC9pLnRlc3QoYmxvYi50eXBlKSkge1xuXHRcdFx0XHRyZXR1cm4gbmV3IEJsb2IoW1N0cmluZy5mcm9tQ2hhckNvZGUoMHhGRUZGKSwgYmxvYl0sIHt0eXBlOiBibG9iLnR5cGV9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBibG9iO1xuXHRcdH1cblx0XHQsIEZpbGVTYXZlciA9IGZ1bmN0aW9uKGJsb2IsIG5hbWUsIG5vX2F1dG9fYm9tKSB7XG5cdFx0XHRpZiAoIW5vX2F1dG9fYm9tKSB7XG5cdFx0XHRcdGJsb2IgPSBhdXRvX2JvbShibG9iKTtcblx0XHRcdH1cblx0XHRcdC8vIEZpcnN0IHRyeSBhLmRvd25sb2FkLCB0aGVuIHdlYiBmaWxlc3lzdGVtLCB0aGVuIG9iamVjdCBVUkxzXG5cdFx0XHR2YXJcblx0XHRcdFx0ICBmaWxlc2F2ZXIgPSB0aGlzXG5cdFx0XHRcdCwgdHlwZSA9IGJsb2IudHlwZVxuXHRcdFx0XHQsIGZvcmNlID0gdHlwZSA9PT0gZm9yY2Vfc2F2ZWFibGVfdHlwZVxuXHRcdFx0XHQsIG9iamVjdF91cmxcblx0XHRcdFx0LCBkaXNwYXRjaF9hbGwgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkaXNwYXRjaChmaWxlc2F2ZXIsIFwid3JpdGVzdGFydCBwcm9ncmVzcyB3cml0ZSB3cml0ZWVuZFwiLnNwbGl0KFwiIFwiKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gb24gYW55IGZpbGVzeXMgZXJyb3JzIHJldmVydCB0byBzYXZpbmcgd2l0aCBvYmplY3QgVVJMc1xuXHRcdFx0XHQsIGZzX2Vycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKChpc19jaHJvbWVfaW9zIHx8IChmb3JjZSAmJiBpc19zYWZhcmkpKSAmJiB2aWV3LkZpbGVSZWFkZXIpIHtcblx0XHRcdFx0XHRcdC8vIFNhZmFyaSBkb2Vzbid0IGFsbG93IGRvd25sb2FkaW5nIG9mIGJsb2IgdXJsc1xuXHRcdFx0XHRcdFx0dmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cdFx0XHRcdFx0XHRyZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB1cmwgPSBpc19jaHJvbWVfaW9zID8gcmVhZGVyLnJlc3VsdCA6IHJlYWRlci5yZXN1bHQucmVwbGFjZSgvXmRhdGE6W147XSo7LywgJ2RhdGE6YXR0YWNobWVudC9maWxlOycpO1xuXHRcdFx0XHRcdFx0XHR2YXIgcG9wdXAgPSB2aWV3Lm9wZW4odXJsLCAnX2JsYW5rJyk7XG5cdFx0XHRcdFx0XHRcdGlmKCFwb3B1cCkgdmlldy5sb2NhdGlvbi5ocmVmID0gdXJsO1xuXHRcdFx0XHRcdFx0XHR1cmw9dW5kZWZpbmVkOyAvLyByZWxlYXNlIHJlZmVyZW5jZSBiZWZvcmUgZGlzcGF0Y2hpbmdcblx0XHRcdFx0XHRcdFx0ZmlsZXNhdmVyLnJlYWR5U3RhdGUgPSBmaWxlc2F2ZXIuRE9ORTtcblx0XHRcdFx0XHRcdFx0ZGlzcGF0Y2hfYWxsKCk7XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0cmVhZGVyLnJlYWRBc0RhdGFVUkwoYmxvYik7XG5cdFx0XHRcdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5JTklUO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBkb24ndCBjcmVhdGUgbW9yZSBvYmplY3QgVVJMcyB0aGFuIG5lZWRlZFxuXHRcdFx0XHRcdGlmICghb2JqZWN0X3VybCkge1xuXHRcdFx0XHRcdFx0b2JqZWN0X3VybCA9IGdldF9VUkwoKS5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChmb3JjZSkge1xuXHRcdFx0XHRcdFx0dmlldy5sb2NhdGlvbi5ocmVmID0gb2JqZWN0X3VybDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dmFyIG9wZW5lZCA9IHZpZXcub3BlbihvYmplY3RfdXJsLCBcIl9ibGFua1wiKTtcblx0XHRcdFx0XHRcdGlmICghb3BlbmVkKSB7XG5cdFx0XHRcdFx0XHRcdC8vIEFwcGxlIGRvZXMgbm90IGFsbG93IHdpbmRvdy5vcGVuLCBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvc2FmYXJpL2RvY3VtZW50YXRpb24vVG9vbHMvQ29uY2VwdHVhbC9TYWZhcmlFeHRlbnNpb25HdWlkZS9Xb3JraW5nd2l0aFdpbmRvd3NhbmRUYWJzL1dvcmtpbmd3aXRoV2luZG93c2FuZFRhYnMuaHRtbFxuXHRcdFx0XHRcdFx0XHR2aWV3LmxvY2F0aW9uLmhyZWYgPSBvYmplY3RfdXJsO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5ET05FO1xuXHRcdFx0XHRcdGRpc3BhdGNoX2FsbCgpO1xuXHRcdFx0XHRcdHJldm9rZShvYmplY3RfdXJsKTtcblx0XHRcdFx0fVxuXHRcdFx0O1xuXHRcdFx0ZmlsZXNhdmVyLnJlYWR5U3RhdGUgPSBmaWxlc2F2ZXIuSU5JVDtcblxuXHRcdFx0aWYgKGNhbl91c2Vfc2F2ZV9saW5rKSB7XG5cdFx0XHRcdG9iamVjdF91cmwgPSBnZXRfVVJMKCkuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHNhdmVfbGluay5ocmVmID0gb2JqZWN0X3VybDtcblx0XHRcdFx0XHRzYXZlX2xpbmsuZG93bmxvYWQgPSBuYW1lO1xuXHRcdFx0XHRcdGNsaWNrKHNhdmVfbGluayk7XG5cdFx0XHRcdFx0ZGlzcGF0Y2hfYWxsKCk7XG5cdFx0XHRcdFx0cmV2b2tlKG9iamVjdF91cmwpO1xuXHRcdFx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGZzX2Vycm9yKCk7XG5cdFx0fVxuXHRcdCwgRlNfcHJvdG8gPSBGaWxlU2F2ZXIucHJvdG90eXBlXG5cdFx0LCBzYXZlQXMgPSBmdW5jdGlvbihibG9iLCBuYW1lLCBub19hdXRvX2JvbSkge1xuXHRcdFx0cmV0dXJuIG5ldyBGaWxlU2F2ZXIoYmxvYiwgbmFtZSB8fCBibG9iLm5hbWUgfHwgXCJkb3dubG9hZFwiLCBub19hdXRvX2JvbSk7XG5cdFx0fVxuXHQ7XG5cdC8vIElFIDEwKyAobmF0aXZlIHNhdmVBcylcblx0aWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiYgbmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oYmxvYiwgbmFtZSwgbm9fYXV0b19ib20pIHtcblx0XHRcdG5hbWUgPSBuYW1lIHx8IGJsb2IubmFtZSB8fCBcImRvd25sb2FkXCI7XG5cblx0XHRcdGlmICghbm9fYXV0b19ib20pIHtcblx0XHRcdFx0YmxvYiA9IGF1dG9fYm9tKGJsb2IpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKGJsb2IsIG5hbWUpO1xuXHRcdH07XG5cdH1cblxuXHRGU19wcm90by5hYm9ydCA9IGZ1bmN0aW9uKCl7fTtcblx0RlNfcHJvdG8ucmVhZHlTdGF0ZSA9IEZTX3Byb3RvLklOSVQgPSAwO1xuXHRGU19wcm90by5XUklUSU5HID0gMTtcblx0RlNfcHJvdG8uRE9ORSA9IDI7XG5cblx0RlNfcHJvdG8uZXJyb3IgPVxuXHRGU19wcm90by5vbndyaXRlc3RhcnQgPVxuXHRGU19wcm90by5vbnByb2dyZXNzID1cblx0RlNfcHJvdG8ub253cml0ZSA9XG5cdEZTX3Byb3RvLm9uYWJvcnQgPVxuXHRGU19wcm90by5vbmVycm9yID1cblx0RlNfcHJvdG8ub253cml0ZWVuZCA9XG5cdFx0bnVsbDtcblxuXHRyZXR1cm4gc2F2ZUFzO1xufShcblx0ICAgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZlxuXHR8fCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvd1xuXHR8fCB0aGlzLmNvbnRlbnRcbikpO1xuLy8gYHNlbGZgIGlzIHVuZGVmaW5lZCBpbiBGaXJlZm94IGZvciBBbmRyb2lkIGNvbnRlbnQgc2NyaXB0IGNvbnRleHRcbi8vIHdoaWxlIGB0aGlzYCBpcyBuc0lDb250ZW50RnJhbWVNZXNzYWdlTWFuYWdlclxuLy8gd2l0aCBhbiBhdHRyaWJ1dGUgYGNvbnRlbnRgIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIHdpbmRvd1xuXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cy5zYXZlQXMgPSBzYXZlQXM7XG59IGVsc2UgaWYgKCh0eXBlb2YgZGVmaW5lICE9PSBcInVuZGVmaW5lZFwiICYmIGRlZmluZSAhPT0gbnVsbCkgJiYgKGRlZmluZS5hbWQgIT09IG51bGwpKSB7XG4gIGRlZmluZShcIkZpbGVTYXZlci5qc1wiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2F2ZUFzO1xuICB9KTtcbn1cbiIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbnZhciBjbG9uZWFibGVUYWdzID0ge307XG5jbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG5jbG9uZWFibGVUYWdzW2Jvb2xUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9XG5jbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW21hcFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbmNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPSBjbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbmNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG5jbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIEFkZHMgdGhlIGtleS12YWx1ZSBgcGFpcmAgdG8gYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSBwYWlyIFRoZSBrZXktdmFsdWUgcGFpciB0byBhZGQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBtYXBgLlxuICovXG5mdW5jdGlvbiBhZGRNYXBFbnRyeShtYXAsIHBhaXIpIHtcbiAgLy8gRG9uJ3QgcmV0dXJuIGBtYXAuc2V0YCBiZWNhdXNlIGl0J3Mgbm90IGNoYWluYWJsZSBpbiBJRSAxMS5cbiAgbWFwLnNldChwYWlyWzBdLCBwYWlyWzFdKTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gYHNldGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBtb2RpZnkuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhZGQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBzZXRgLlxuICovXG5mdW5jdGlvbiBhZGRTZXRFbnRyeShzZXQsIHZhbHVlKSB7XG4gIC8vIERvbid0IHJldHVybiBgc2V0LmFkZGAgYmVjYXVzZSBpdCdzIG5vdCBjaGFpbmFibGUgaW4gSUUgMTEuXG4gIHNldC5hZGQodmFsdWUpO1xuICByZXR1cm4gc2V0O1xufVxuXG4vKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5mdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0IGluIElFIDwgOS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSG9zdE9iamVjdCh2YWx1ZSkge1xuICAvLyBNYW55IGhvc3Qgb2JqZWN0cyBhcmUgYE9iamVjdGAgb2JqZWN0cyB0aGF0IGNhbiBjb2VyY2UgdG8gc3RyaW5nc1xuICAvLyBkZXNwaXRlIGhhdmluZyBpbXByb3Blcmx5IGRlZmluZWQgYHRvU3RyaW5nYCBtZXRob2RzLlxuICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gIGlmICh2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9ICEhKHZhbHVlICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIFN5bWJvbCA9IHJvb3QuU3ltYm9sLFxuICAgIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXksXG4gICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKSxcbiAgICBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKSxcbiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLFxuICAgIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyBkYXRhW2tleV0gIT09IHVuZGVmaW5lZCA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIGdldE1hcERhdGEodGhpcywga2V5KS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fWydkZWxldGUnXShrZXkpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGNhY2hlID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGNhY2hlIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gY2FjaGUuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGNhY2hlID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICAvLyBTYWZhcmkgOSBtYWtlcyBgYXJndW1lbnRzLmxlbmd0aGAgZW51bWVyYWJsZSBpbiBzdHJpY3QgbW9kZS5cbiAgdmFyIHJlc3VsdCA9IChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpXG4gICAgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpXG4gICAgOiBbXTtcblxuICB2YXIgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aCxcbiAgICAgIHNraXBJbmRleGVzID0gISFsZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoa2V5ID09ICdsZW5ndGgnIHx8IGlzSW5kZXgoa2V5LCBsZW5ndGgpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAodHlwZW9mIGtleSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNGdWxsXSBTcGVjaWZ5IGEgY2xvbmUgaW5jbHVkaW5nIHN5bWJvbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGlzRGVlcCwgaXNGdWxsLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gIH1cbiAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgaWYgKGlzQXJyKSB7XG4gICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgIGlmICghaXNEZWVwKSB7XG4gICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgaWYgKGlzSG9zdE9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBpbml0Q2xvbmVPYmplY3QoaXNGdW5jID8ge30gOiB2YWx1ZSk7XG4gICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICByZXR1cm4gY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGJhc2VDbG9uZSwgaXNEZWVwKTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICBpZiAoc3RhY2tlZCkge1xuICAgIHJldHVybiBzdGFja2VkO1xuICB9XG4gIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICBpZiAoIWlzQXJyKSB7XG4gICAgdmFyIHByb3BzID0gaXNGdWxsID8gZ2V0QWxsS2V5cyh2YWx1ZSkgOiBrZXlzKHZhbHVlKTtcbiAgfVxuICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICBpZiAocHJvcHMpIHtcbiAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGlzRGVlcCwgaXNGdWxsLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDcmVhdGUocHJvdG8pIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHByb3RvKSA/IG9iamVjdENyZWF0ZShwcm90bykgOiB7fTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgaXNIb3N0T2JqZWN0KHZhbHVlKSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSldO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgfVxuICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAqICBjb3VudGVycGFydHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIShpc0FycmF5KHNvdXJjZSkgfHwgaXNUeXBlZEFycmF5KHNvdXJjZSkpKSB7XG4gICAgdmFyIHByb3BzID0gYmFzZUtleXNJbihzb3VyY2UpO1xuICB9XG4gIGFycmF5RWFjaChwcm9wcyB8fCBzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICBpZiAocHJvcHMpIHtcbiAgICAgIGtleSA9IHNyY1ZhbHVlO1xuICAgICAgc3JjVmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAqICBjb3VudGVycGFydHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICBzcmNWYWx1ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgaWYgKHN0YWNrZWQpIHtcbiAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICA6IHVuZGVmaW5lZDtcblxuICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gIGlmIChpc0NvbW1vbikge1xuICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgaWYgKGlzQXJyYXkoc3JjVmFsdWUpIHx8IGlzVHlwZWRBcnJheShzcmNWYWx1ZSkpIHtcbiAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBuZXdWYWx1ZSA9IGJhc2VDbG9uZShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCAoc3JjSW5kZXggJiYgaXNGdW5jdGlvbihvYmpWYWx1ZSkpKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gYmFzZUNsb25lKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChpc0NvbW1vbikge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgfVxuICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgIH1cbiAgICBpbmRleCA9IC0xO1xuICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICB9XG4gICAgb3RoZXJBcmdzW3N0YXJ0XSA9IGFycmF5O1xuICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciByZXN1bHQgPSBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGJ1ZmZlci5sZW5ndGgpO1xuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjbG9uZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNsb25lIHZhbHVlcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgbWFwLlxuICovXG5mdW5jdGlvbiBjbG9uZU1hcChtYXAsIGlzRGVlcCwgY2xvbmVGdW5jKSB7XG4gIHZhciBhcnJheSA9IGlzRGVlcCA/IGNsb25lRnVuYyhtYXBUb0FycmF5KG1hcCksIHRydWUpIDogbWFwVG9BcnJheShtYXApO1xuICByZXR1cm4gYXJyYXlSZWR1Y2UoYXJyYXksIGFkZE1hcEVudHJ5LCBuZXcgbWFwLmNvbnN0cnVjdG9yKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgc2V0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNsb25lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2xvbmVGdW5jIFRoZSBmdW5jdGlvbiB0byBjbG9uZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHNldC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTZXQoc2V0LCBpc0RlZXAsIGNsb25lRnVuYykge1xuICB2YXIgYXJyYXkgPSBpc0RlZXAgPyBjbG9uZUZ1bmMoc2V0VG9BcnJheShzZXQpLCB0cnVlKSA6IHNldFRvQXJyYXkoc2V0KTtcbiAgcmV0dXJuIGFycmF5UmVkdWNlKGFycmF5LCBhZGRTZXRFbnRyeSwgbmV3IHNldC5jb25zdHJ1Y3Rvcik7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgPyBzb3VyY2Vba2V5XSA6IG5ld1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG4vKipcbiAqIENvcGllcyBvd24gc3ltYm9sIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgIGxlbmd0aCA9IDE7XG4gICAgfVxuICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9sIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSBuYXRpdmVHZXRTeW1ib2xzID8gb3ZlckFyZyhuYXRpdmVHZXRTeW1ib2xzLCBPYmplY3QpIDogc3R1YkFycmF5O1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEsXG4vLyBmb3IgZGF0YSB2aWV3cyBpbiBFZGdlIDwgMTQsIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzLlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNsb25lRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2xvbmUgdmFsdWVzLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgY2xvbmVGdW5jLCBpc0RlZXApIHtcbiAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHJldHVybiBjbG9uZU1hcChvYmplY3QsIGlzRGVlcCwgY2xvbmVGdW5jKTtcblxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICByZXR1cm4gY2xvbmVTZXQob2JqZWN0LCBpc0RlZXAsIGNsb25lRnVuYyk7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVlKSkgJiZcbiAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICApIHtcbiAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtZXJnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHBhcmVudCBvYmplY3Qgb2YgYHNyY1ZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gKiAgY291bnRlcnBhcnRzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEZWZhdWx0cyhvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gIGlmIChpc09iamVjdChvYmpWYWx1ZSkgJiYgaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgYmFzZU1lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwgdW5kZWZpbmVkLCBtZXJnZURlZmF1bHRzLCBzdGFjayk7XG4gICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gb2JqVmFsdWU7XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICghcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpIHx8IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IGFyZ3NUYWcpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICogaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDgtOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8XG4gICAgICBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSAhPSBvYmplY3RUYWcgfHwgaXNIb3N0T2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiZcbiAgICBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJiBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAqL1xuZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICogZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4xMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAc2VlIF8uZGVmYXVsdHNcbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZhdWx0c0RlZXAoeyAnYSc6IHsgJ2InOiAyIH0gfSwgeyAnYSc6IHsgJ2InOiAxLCAnYyc6IDMgfSB9KTtcbiAqIC8vID0+IHsgJ2EnOiB7ICdiJzogMiwgJ2MnOiAzIH0gfVxuICovXG52YXIgZGVmYXVsdHNEZWVwID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICBhcmdzLnB1c2godW5kZWZpbmVkLCBtZXJnZURlZmF1bHRzKTtcbiAgcmV0dXJuIGFwcGx5KG1lcmdlV2l0aCwgdW5kZWZpbmVkLCBhcmdzKTtcbn0pO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZXJnZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kIHNvdXJjZVxuICogcHJvcGVydGllcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIG1lcmdpbmcgaXMgaGFuZGxlZCBieSB0aGVcbiAqIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBzZXZlbiBhcmd1bWVudHM6XG4gKiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gKiAgIGlmIChfLmlzQXJyYXkob2JqVmFsdWUpKSB7XG4gKiAgICAgcmV0dXJuIG9ialZhbHVlLmNvbmNhdChzcmNWYWx1ZSk7XG4gKiAgIH1cbiAqIH1cbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFsxXSwgJ2InOiBbMl0gfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiBbM10sICdiJzogWzRdIH07XG4gKlxuICogXy5tZXJnZVdpdGgob2JqZWN0LCBvdGhlciwgY3VzdG9taXplcik7XG4gKiAvLyA9PiB7ICdhJzogWzEsIDNdLCAnYic6IFsyLCA0XSB9XG4gKi9cbnZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcik7XG59KTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzRGVlcDtcbiIsImV4cG9ydHMuZW5kaWFubmVzcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdMRScgfTtcblxuZXhwb3J0cy5ob3N0bmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gbG9jYXRpb24uaG9zdG5hbWVcbiAgICB9XG4gICAgZWxzZSByZXR1cm4gJyc7XG59O1xuXG5leHBvcnRzLmxvYWRhdmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXSB9O1xuXG5leHBvcnRzLnVwdGltZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDAgfTtcblxuZXhwb3J0cy5mcmVlbWVtID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBOdW1iZXIuTUFYX1ZBTFVFO1xufTtcblxuZXhwb3J0cy50b3RhbG1lbSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTnVtYmVyLk1BWF9WQUxVRTtcbn07XG5cbmV4cG9ydHMuY3B1cyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdIH07XG5cbmV4cG9ydHMudHlwZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdCcm93c2VyJyB9O1xuXG5leHBvcnRzLnJlbGVhc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IuYXBwVmVyc2lvbjtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xufTtcblxuZXhwb3J0cy5uZXR3b3JrSW50ZXJmYWNlc1xuPSBleHBvcnRzLmdldE5ldHdvcmtJbnRlcmZhY2VzXG49IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHt9IH07XG5cbmV4cG9ydHMuYXJjaCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdqYXZhc2NyaXB0JyB9O1xuXG5leHBvcnRzLnBsYXRmb3JtID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ2Jyb3dzZXInIH07XG5cbmV4cG9ydHMudG1wZGlyID0gZXhwb3J0cy50bXBEaXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcvdG1wJztcbn07XG5cbmV4cG9ydHMuRU9MID0gJ1xcbic7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gcmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIGFycmF5IHdpdGggZGlyZWN0b3J5IG5hbWVzIHRoZXJlXG4vLyBtdXN0IGJlIG5vIHNsYXNoZXMsIGVtcHR5IGVsZW1lbnRzLCBvciBkZXZpY2UgbmFtZXMgKGM6XFwpIGluIHRoZSBhcnJheVxuLy8gKHNvIGFsc28gbm8gbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlcyAtIGl0IGRvZXMgbm90IGRpc3Rpbmd1aXNoXG4vLyByZWxhdGl2ZSBhbmQgYWJzb2x1dGUgcGF0aHMpXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheShwYXJ0cywgYWxsb3dBYm92ZVJvb3QpIHtcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGxhc3QgPSBwYXJ0c1tpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG4vLyBTcGxpdCBhIGZpbGVuYW1lIGludG8gW3Jvb3QsIGRpciwgYmFzZW5hbWUsIGV4dF0sIHVuaXggdmVyc2lvblxuLy8gJ3Jvb3QnIGlzIGp1c3QgYSBzbGFzaCwgb3Igbm90aGluZy5cbnZhciBzcGxpdFBhdGhSZSA9XG4gICAgL14oXFwvP3wpKFtcXHNcXFNdKj8pKCg/OlxcLnsxLDJ9fFteXFwvXSs/fCkoXFwuW14uXFwvXSp8KSkoPzpbXFwvXSopJC87XG52YXIgc3BsaXRQYXRoID0gZnVuY3Rpb24oZmlsZW5hbWUpIHtcbiAgcmV0dXJuIHNwbGl0UGF0aFJlLmV4ZWMoZmlsZW5hbWUpLnNsaWNlKDEpO1xufTtcblxuLy8gcGF0aC5yZXNvbHZlKFtmcm9tIC4uLl0sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNvbHZlZFBhdGggPSAnJyxcbiAgICAgIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gLTEgJiYgIXJlc29sdmVkQWJzb2x1dGU7IGktLSkge1xuICAgIHZhciBwYXRoID0gKGkgPj0gMCkgPyBhcmd1bWVudHNbaV0gOiBwcm9jZXNzLmN3ZCgpO1xuXG4gICAgLy8gU2tpcCBlbXB0eSBhbmQgaW52YWxpZCBlbnRyaWVzXG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9IGVsc2UgaWYgKCFwYXRoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgIHJlc29sdmVkQWJzb2x1dGUgPSBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xuICB9XG5cbiAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsIGJ1dFxuICAvLyBoYW5kbGUgcmVsYXRpdmUgcGF0aHMgdG8gYmUgc2FmZSAobWlnaHQgaGFwcGVuIHdoZW4gcHJvY2Vzcy5jd2QoKSBmYWlscylcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHJlc29sdmVkUGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFyZXNvbHZlZEFic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgcmV0dXJuICgocmVzb2x2ZWRBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHJlc29sdmVkUGF0aCkgfHwgJy4nO1xufTtcblxuLy8gcGF0aC5ub3JtYWxpemUocGF0aClcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMubm9ybWFsaXplID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKSxcbiAgICAgIHRyYWlsaW5nU2xhc2ggPSBzdWJzdHIocGF0aCwgLTEpID09PSAnLyc7XG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFpc0Fic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgaWYgKCFwYXRoICYmICFpc0Fic29sdXRlKSB7XG4gICAgcGF0aCA9ICcuJztcbiAgfVxuICBpZiAocGF0aCAmJiB0cmFpbGluZ1NsYXNoKSB7XG4gICAgcGF0aCArPSAnLyc7XG4gIH1cblxuICByZXR1cm4gKGlzQWJzb2x1dGUgPyAnLycgOiAnJykgKyBwYXRoO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5pc0Fic29sdXRlID0gZnVuY3Rpb24ocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuam9pbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGF0aHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICByZXR1cm4gZXhwb3J0cy5ub3JtYWxpemUoZmlsdGVyKHBhdGhzLCBmdW5jdGlvbihwLCBpbmRleCkge1xuICAgIGlmICh0eXBlb2YgcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICAgIHJldHVybiBwO1xuICB9KS5qb2luKCcvJykpO1xufTtcblxuXG4vLyBwYXRoLnJlbGF0aXZlKGZyb20sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZWxhdGl2ZSA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG4gIGZyb20gPSBleHBvcnRzLnJlc29sdmUoZnJvbSkuc3Vic3RyKDEpO1xuICB0byA9IGV4cG9ydHMucmVzb2x2ZSh0bykuc3Vic3RyKDEpO1xuXG4gIGZ1bmN0aW9uIHRyaW0oYXJyKSB7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBmb3IgKDsgc3RhcnQgPCBhcnIubGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoYXJyW3N0YXJ0XSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBlbmQgPSBhcnIubGVuZ3RoIC0gMTtcbiAgICBmb3IgKDsgZW5kID49IDA7IGVuZC0tKSB7XG4gICAgICBpZiAoYXJyW2VuZF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPiBlbmQpIHJldHVybiBbXTtcbiAgICByZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCArIDEpO1xuICB9XG5cbiAgdmFyIGZyb21QYXJ0cyA9IHRyaW0oZnJvbS5zcGxpdCgnLycpKTtcbiAgdmFyIHRvUGFydHMgPSB0cmltKHRvLnNwbGl0KCcvJykpO1xuXG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihmcm9tUGFydHMubGVuZ3RoLCB0b1BhcnRzLmxlbmd0aCk7XG4gIHZhciBzYW1lUGFydHNMZW5ndGggPSBsZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZnJvbVBhcnRzW2ldICE9PSB0b1BhcnRzW2ldKSB7XG4gICAgICBzYW1lUGFydHNMZW5ndGggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIG91dHB1dFBhcnRzID0gW107XG4gIGZvciAodmFyIGkgPSBzYW1lUGFydHNMZW5ndGg7IGkgPCBmcm9tUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRQYXJ0cy5wdXNoKCcuLicpO1xuICB9XG5cbiAgb3V0cHV0UGFydHMgPSBvdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtcblxuICByZXR1cm4gb3V0cHV0UGFydHMuam9pbignLycpO1xufTtcblxuZXhwb3J0cy5zZXAgPSAnLyc7XG5leHBvcnRzLmRlbGltaXRlciA9ICc6JztcblxuZXhwb3J0cy5kaXJuYW1lID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgcmVzdWx0ID0gc3BsaXRQYXRoKHBhdGgpLFxuICAgICAgcm9vdCA9IHJlc3VsdFswXSxcbiAgICAgIGRpciA9IHJlc3VsdFsxXTtcblxuICBpZiAoIXJvb3QgJiYgIWRpcikge1xuICAgIC8vIE5vIGRpcm5hbWUgd2hhdHNvZXZlclxuICAgIHJldHVybiAnLic7XG4gIH1cblxuICBpZiAoZGlyKSB7XG4gICAgLy8gSXQgaGFzIGEgZGlybmFtZSwgc3RyaXAgdHJhaWxpbmcgc2xhc2hcbiAgICBkaXIgPSBkaXIuc3Vic3RyKDAsIGRpci5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIHJldHVybiByb290ICsgZGlyO1xufTtcblxuXG5leHBvcnRzLmJhc2VuYW1lID0gZnVuY3Rpb24ocGF0aCwgZXh0KSB7XG4gIHZhciBmID0gc3BsaXRQYXRoKHBhdGgpWzJdO1xuICAvLyBUT0RPOiBtYWtlIHRoaXMgY29tcGFyaXNvbiBjYXNlLWluc2Vuc2l0aXZlIG9uIHdpbmRvd3M/XG4gIGlmIChleHQgJiYgZi5zdWJzdHIoLTEgKiBleHQubGVuZ3RoKSA9PT0gZXh0KSB7XG4gICAgZiA9IGYuc3Vic3RyKDAsIGYubGVuZ3RoIC0gZXh0Lmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIGY7XG59O1xuXG5cbmV4cG9ydHMuZXh0bmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHNwbGl0UGF0aChwYXRoKVszXTtcbn07XG5cbmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHtcbiAgICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGYpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxudmFyIHN1YnN0ciA9ICdhYicuc3Vic3RyKC0xKSA9PT0gJ2InXG4gICAgPyBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7IHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pIH1cbiAgICA6IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHtcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICAgIH1cbjtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgY29udmVydGVyID0gcmVxdWlyZSgnLi9zYmdubWxDb252ZXJ0ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGV4dCkge1xuICByZXR1cm4gY29udmVydGVyLmNvbnZlcnQodGV4dCk7XG59O1xuIiwiLyoganNsaW50IGJyb3dzZXI6IHRydWUgKi9cbi8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0OiBmYWxzZSAqL1xuXG52YXIgc2Jnbm1sQ29udmVydGVyID0ge1xuICBsb2FkWE1MRnJvbVN0cmluZzogZnVuY3Rpb24gKHRleHQpIHtcbiAgICB2YXIgZG9jO1xuICAgIGlmICh3aW5kb3cuQWN0aXZlWE9iamVjdCkge1xuICAgICAgZG9jID0gbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxET00nKTtcbiAgICAgIGRvYy5hc3luYyA9ICdmYWxzZSc7XG4gICAgICBkb2MubG9hZFhNTCh0ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgIGRvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcodGV4dCwgJ3RleHQveG1sJyk7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlRXJyb3IgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3BhcnNlcmVycm9yJyk7XG4gICAgaWYgKHBhcnNlRXJyb3IubGVuZ3RoID4gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgY29udmVydCB0aGUgZm9sbG93aW5nIHRleHQgdG8geG1sOiAnICsgSlNPTi5zdHJpbmdpZnkodGV4dCkpO1xuICAgIH1cblxuICAgIHJldHVybiBkb2M7XG4gIH0sXG4gIHNiZ25tbFRhZ3M6IHtcbiAgICAndW5zcGVjaWZpZWQgZW50aXR5JzogdHJ1ZSxcbiAgICAnc2ltcGxlIGNoZW1pY2FsJzogdHJ1ZSxcbiAgICAnbWFjcm9tb2xlY3VsZSc6IHRydWUsXG4gICAgJ251Y2xlaWMgYWNpZCBmZWF0dXJlJzogdHJ1ZSxcbiAgICAncGVydHVyYmluZyBhZ2VudCc6IHRydWUsXG4gICAgJ3NvdXJjZSBhbmQgc2luayc6IHRydWUsXG4gICAgJ2NvbXBsZXgnOiB0cnVlLFxuICAgICdwcm9jZXNzJzogdHJ1ZSxcbiAgICAnb21pdHRlZCBwcm9jZXNzJzogdHJ1ZSxcbiAgICAndW5jZXJ0YWluIHByb2Nlc3MnOiB0cnVlLFxuICAgICdhc3NvY2lhdGlvbic6IHRydWUsXG4gICAgJ2Rpc3NvY2lhdGlvbic6IHRydWUsXG4gICAgJ3BoZW5vdHlwZSc6IHRydWUsXG4gICAgJ3RhZyc6IHRydWUsXG4gICAgJ2NvbnN1bXB0aW9uJzogdHJ1ZSxcbiAgICAncHJvZHVjdGlvbic6IHRydWUsXG4gICAgJ21vZHVsYXRpb24nOiB0cnVlLFxuICAgICdzdGltdWxhdGlvbic6IHRydWUsXG4gICAgJ2NhdGFseXNpcyc6IHRydWUsXG4gICAgJ2luaGliaXRpb24nOiB0cnVlLFxuICAgICduZWNlc3Nhcnkgc3RpbXVsYXRpb24nOiB0cnVlLFxuICAgICdsb2dpYyBhcmMnOiB0cnVlLFxuICAgICdlcXVpdmFsZW5jZSBhcmMnOiB0cnVlLFxuICAgICdhbmQgb3BlcmF0b3InOiB0cnVlLFxuICAgICdvciBvcGVyYXRvcic6IHRydWUsXG4gICAgJ25vdCBvcGVyYXRvcic6IHRydWUsXG4gICAgJ2FuZCc6IHRydWUsXG4gICAgJ29yJzogdHJ1ZSxcbiAgICAnbm90JzogdHJ1ZSxcbiAgICAnbnVjbGVpYyBhY2lkIGZlYXR1cmUgbXVsdGltZXInOiB0cnVlLFxuICAgICdtYWNyb21vbGVjdWxlIG11bHRpbWVyJzogdHJ1ZSxcbiAgICAnc2ltcGxlIGNoZW1pY2FsIG11bHRpbWVyJzogdHJ1ZSxcbiAgICAnY29tcGxleCBtdWx0aW1lcic6IHRydWUsXG4gICAgJ2NvbXBhcnRtZW50JzogdHJ1ZVxuICB9LFxuICBpbnNlcnRlZE5vZGVzOiB7fSxcbiAgZ2V0QWxsQ29tcGFydG1lbnRzOiBmdW5jdGlvbiAoeG1sT2JqZWN0KSB7XG4gICAgdmFyIGNvbXBhcnRtZW50cyA9IFtdO1xuXG4gICAgdmFyIGNvbXBhcnRtZW50RWxzID0geG1sT2JqZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoXCJnbHlwaFtjbGFzcz0nY29tcGFydG1lbnQnXVwiKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcGFydG1lbnRFbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjb21wYXJ0bWVudCA9IGNvbXBhcnRtZW50RWxzW2ldO1xuICAgICAgdmFyIGJib3ggPSB0aGlzLmZpbmRDaGlsZE5vZGUoY29tcGFydG1lbnQsICdiYm94Jyk7XG4gICAgICBjb21wYXJ0bWVudHMucHVzaCh7XG4gICAgICAgICd4JzogcGFyc2VGbG9hdChiYm94LmdldEF0dHJpYnV0ZSgneCcpKSxcbiAgICAgICAgJ3knOiBwYXJzZUZsb2F0KGJib3guZ2V0QXR0cmlidXRlKCd5JykpLFxuICAgICAgICAndyc6IHBhcnNlRmxvYXQoYmJveC5nZXRBdHRyaWJ1dGUoJ3cnKSksXG4gICAgICAgICdoJzogcGFyc2VGbG9hdChiYm94LmdldEF0dHJpYnV0ZSgnaCcpKSxcbiAgICAgICAgJ2lkJzogY29tcGFydG1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb21wYXJ0bWVudHMuc29ydChmdW5jdGlvbiAoYzEsIGMyKSB7XG4gICAgICBpZiAoYzEuaCAqIGMxLncgPCBjMi5oICogYzIudykge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZiAoYzEuaCAqIGMxLncgPiBjMi5oICogYzIudykge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbXBhcnRtZW50cztcbiAgfSxcbiAgaXNJbkJvdW5kaW5nQm94OiBmdW5jdGlvbiAoYmJveDEsIGJib3gyKSB7XG4gICAgaWYgKGJib3gxLnggPiBiYm94Mi54ICYmXG4gICAgICAgIGJib3gxLnkgPiBiYm94Mi55ICYmXG4gICAgICAgIGJib3gxLnggKyBiYm94MS53IDwgYmJveDIueCArIGJib3gyLncgJiZcbiAgICAgICAgYmJveDEueSArIGJib3gxLmggPCBiYm94Mi55ICsgYmJveDIuaCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgYmJveFByb3A6IGZ1bmN0aW9uIChlbGUpIHtcbiAgICB2YXIgYmJveCA9IHt9O1xuICAgIHZhciBiYm94RWwgPSBlbGUucXVlcnlTZWxlY3RvcignYmJveCcpO1xuXG4gICAgYmJveC54ID0gYmJveEVsLmdldEF0dHJpYnV0ZSgneCcpO1xuICAgIGJib3gueSA9IGJib3hFbC5nZXRBdHRyaWJ1dGUoJ3knKTtcbiAgICBiYm94LncgPSBiYm94RWwuZ2V0QXR0cmlidXRlKCd3Jyk7XG4gICAgYmJveC5oID0gYmJveEVsLmdldEF0dHJpYnV0ZSgnaCcpO1xuICAgIC8vIHNldCBwb3NpdGlvbnMgYXMgY2VudGVyXG4gICAgYmJveC54ID0gcGFyc2VGbG9hdChiYm94LngpICsgcGFyc2VGbG9hdChiYm94LncpIC8gMjtcbiAgICBiYm94LnkgPSBwYXJzZUZsb2F0KGJib3gueSkgKyBwYXJzZUZsb2F0KGJib3guaCkgLyAyO1xuXG4gICAgcmV0dXJuIGJib3g7XG4gIH0sXG4gIHN0YXRlQW5kSW5mb0Jib3hQcm9wOiBmdW5jdGlvbiAoZWxlLCBwYXJlbnRCYm94KSB7XG4gICAgdmFyIHhQb3MgPSBwYXJzZUZsb2F0KHBhcmVudEJib3gueCk7XG4gICAgdmFyIHlQb3MgPSBwYXJzZUZsb2F0KHBhcmVudEJib3gueSk7XG5cbiAgICB2YXIgYmJveCA9IHt9O1xuICAgIHZhciBiYm94RWwgPSBlbGUucXVlcnlTZWxlY3RvcignYmJveCcpO1xuXG4gICAgYmJveC54ID0gYmJveEVsLmdldEF0dHJpYnV0ZSgneCcpO1xuICAgIGJib3gueSA9IGJib3hFbC5nZXRBdHRyaWJ1dGUoJ3knKTtcbiAgICBiYm94LncgPSBiYm94RWwuZ2V0QXR0cmlidXRlKCd3Jyk7XG4gICAgYmJveC5oID0gYmJveEVsLmdldEF0dHJpYnV0ZSgnaCcpO1xuXG4gICAgLy8gc2V0IHBvc2l0aW9ucyBhcyBjZW50ZXJcbiAgICBiYm94LnggPSBwYXJzZUZsb2F0KGJib3gueCkgKyBwYXJzZUZsb2F0KGJib3gudykgLyAyIC0geFBvcztcbiAgICBiYm94LnkgPSBwYXJzZUZsb2F0KGJib3gueSkgKyBwYXJzZUZsb2F0KGJib3guaCkgLyAyIC0geVBvcztcblxuICAgIGJib3gueCA9IGJib3gueCAvIHBhcnNlRmxvYXQocGFyZW50QmJveC53KSAqIDEwMDtcbiAgICBiYm94LnkgPSBiYm94LnkgLyBwYXJzZUZsb2F0KHBhcmVudEJib3guaCkgKiAxMDA7XG5cbiAgICByZXR1cm4gYmJveDtcbiAgfSxcbiAgZmluZENoaWxkTm9kZXM6IGZ1bmN0aW9uIChlbGUsIGNoaWxkVGFnTmFtZSkge1xuICAgIC8vIGZpbmQgY2hpbGQgbm9kZXMgYXQgZGVwdGggbGV2ZWwgb2YgMSByZWxhdGl2ZSB0byB0aGUgZWxlbWVudFxuICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IGVsZS5jaGlsZE5vZGVzW2ldO1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxICYmIGNoaWxkLnRhZ05hbWUgPT09IGNoaWxkVGFnTmFtZSkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9LFxuICBmaW5kQ2hpbGROb2RlOiBmdW5jdGlvbiAoZWxlLCBjaGlsZFRhZ05hbWUpIHtcbiAgICB2YXIgbm9kZXMgPSB0aGlzLmZpbmRDaGlsZE5vZGVzKGVsZSwgY2hpbGRUYWdOYW1lKTtcbiAgICByZXR1cm4gbm9kZXMubGVuZ3RoID4gMCA/IG5vZGVzWzBdIDogdW5kZWZpbmVkO1xuICB9LFxuICBzdGF0ZUFuZEluZm9Qcm9wOiBmdW5jdGlvbiAoZWxlLCBwYXJlbnRCYm94KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBzdGF0ZUFuZEluZm9BcnJheSA9IFtdO1xuXG4gICAgdmFyIGNoaWxkR2x5cGhzID0gdGhpcy5maW5kQ2hpbGROb2RlcyhlbGUsICdnbHlwaCcpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZEdseXBocy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGdseXBoID0gY2hpbGRHbHlwaHNbaV07XG4gICAgICB2YXIgaW5mbyA9IHt9O1xuXG4gICAgICBpZiAoZ2x5cGguY2xhc3NOYW1lID09PSAndW5pdCBvZiBpbmZvcm1hdGlvbicpIHtcbiAgICAgICAgaW5mby5pZCA9IGdseXBoLmdldEF0dHJpYnV0ZSgnaWQnKSB8fCB1bmRlZmluZWQ7XG4gICAgICAgIGluZm8uY2xhenogPSBnbHlwaC5jbGFzc05hbWUgfHwgdW5kZWZpbmVkO1xuICAgICAgICB2YXIgbGFiZWwgPSBnbHlwaC5xdWVyeVNlbGVjdG9yKCdsYWJlbCcpO1xuICAgICAgICBpbmZvLmxhYmVsID0ge1xuICAgICAgICAgICd0ZXh0JzogKGxhYmVsICYmIGxhYmVsLmdldEF0dHJpYnV0ZSgndGV4dCcpKSB8fCB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgICAgaW5mby5iYm94ID0gc2VsZi5zdGF0ZUFuZEluZm9CYm94UHJvcChnbHlwaCwgcGFyZW50QmJveCk7XG4gICAgICAgIHN0YXRlQW5kSW5mb0FycmF5LnB1c2goaW5mbyk7XG4gICAgICB9IGVsc2UgaWYgKGdseXBoLmNsYXNzTmFtZSA9PT0gJ3N0YXRlIHZhcmlhYmxlJykge1xuICAgICAgICBpbmZvLmlkID0gZ2x5cGguZ2V0QXR0cmlidXRlKCdpZCcpIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgaW5mby5jbGF6eiA9IGdseXBoLmNsYXNzTmFtZSB8fCB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdseXBoLnF1ZXJ5U2VsZWN0b3IoJ3N0YXRlJyk7XG4gICAgICAgIHZhciB2YWx1ZSA9IChzdGF0ZSAmJiBzdGF0ZS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHZhcmlhYmxlID0gKHN0YXRlICYmIHN0YXRlLmdldEF0dHJpYnV0ZSgndmFyaWFibGUnKSkgfHwgdW5kZWZpbmVkO1xuICAgICAgICBpbmZvLnN0YXRlID0ge1xuICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgICAgICd2YXJpYWJsZSc6IHZhcmlhYmxlXG4gICAgICAgIH07XG4gICAgICAgIGluZm8uYmJveCA9IHNlbGYuc3RhdGVBbmRJbmZvQmJveFByb3AoZ2x5cGgsIHBhcmVudEJib3gpO1xuICAgICAgICBzdGF0ZUFuZEluZm9BcnJheS5wdXNoKGluZm8pO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgcmV0dXJuIHN0YXRlQW5kSW5mb0FycmF5O1xuICB9LFxuICBhZGRQYXJlbnRJbmZvVG9Ob2RlOiBmdW5jdGlvbiAoZWxlLCBub2RlT2JqLCBwYXJlbnQsIGNvbXBhcnRtZW50cykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY29tcGFydG1lbnRSZWYgPSBlbGUuZ2V0QXR0cmlidXRlKCdjb21wYXJ0bWVudFJlZicpO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgbm9kZU9iai5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNvbXBhcnRtZW50UmVmKSB7XG4gICAgICBub2RlT2JqLnBhcmVudCA9IGNvbXBhcnRtZW50UmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlT2JqLnBhcmVudCA9ICcnO1xuXG4gICAgICAvLyBhZGQgY29tcGFydG1lbnQgYWNjb3JkaW5nIHRvIGdlb21ldHJ5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBhcnRtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYmJveEVsID0gc2VsZi5maW5kQ2hpbGROb2RlKGVsZSwgJ2Jib3gnKTtcbiAgICAgICAgdmFyIGJib3ggPSB7XG4gICAgICAgICAgJ3gnOiBwYXJzZUZsb2F0KGJib3hFbC5nZXRBdHRyaWJ1dGUoJ3gnKSksXG4gICAgICAgICAgJ3knOiBwYXJzZUZsb2F0KGJib3hFbC5nZXRBdHRyaWJ1dGUoJ3knKSksXG4gICAgICAgICAgJ3cnOiBwYXJzZUZsb2F0KGJib3hFbC5nZXRBdHRyaWJ1dGUoJ3cnKSksXG4gICAgICAgICAgJ2gnOiBwYXJzZUZsb2F0KGJib3hFbC5nZXRBdHRyaWJ1dGUoJ2gnKSksXG4gICAgICAgICAgJ2lkJzogZWxlLmdldEF0dHJpYnV0ZSgnaWQnKVxuICAgICAgICB9O1xuICAgICAgICBpZiAoc2VsZi5pc0luQm91bmRpbmdCb3goYmJveCwgY29tcGFydG1lbnRzW2ldKSkge1xuICAgICAgICAgIG5vZGVPYmoucGFyZW50ID0gY29tcGFydG1lbnRzW2ldLmlkO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBhZGRDeXRvc2NhcGVKc05vZGU6IGZ1bmN0aW9uIChlbGUsIGpzb25BcnJheSwgcGFyZW50LCBjb21wYXJ0bWVudHMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIG5vZGVPYmogPSB7fTtcblxuICAgIC8vIGFkZCBpZCBpbmZvcm1hdGlvblxuICAgIG5vZGVPYmouaWQgPSBlbGUuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgIC8vIGFkZCBub2RlIGJvdW5kaW5nIGJveCBpbmZvcm1hdGlvblxuICAgIG5vZGVPYmouYmJveCA9IHNlbGYuYmJveFByb3AoZWxlKTtcbiAgICAvLyBhZGQgY2xhc3MgaW5mb3JtYXRpb25cbiAgICBub2RlT2JqLmNsYXNzID0gZWxlLmNsYXNzTmFtZTtcbiAgICAvLyBhZGQgbGFiZWwgaW5mb3JtYXRpb25cbiAgICB2YXIgbGFiZWwgPSBzZWxmLmZpbmRDaGlsZE5vZGUoZWxlLCAnbGFiZWwnKTtcbiAgICBub2RlT2JqLmxhYmVsID0gKGxhYmVsICYmIGxhYmVsLmdldEF0dHJpYnV0ZSgndGV4dCcpKSB8fCB1bmRlZmluZWQ7XG4gICAgLy8gYWRkIHN0YXRlIGFuZCBpbmZvIGJveCBpbmZvcm1hdGlvblxuICAgIG5vZGVPYmouc3RhdGVzYW5kaW5mb3MgPSBzZWxmLnN0YXRlQW5kSW5mb1Byb3AoZWxlLCBub2RlT2JqLmJib3gpO1xuICAgIC8vIGFkZGluZyBwYXJlbnQgaW5mb3JtYXRpb25cbiAgICBzZWxmLmFkZFBhcmVudEluZm9Ub05vZGUoZWxlLCBub2RlT2JqLCBwYXJlbnQsIGNvbXBhcnRtZW50cyk7XG5cbiAgICAvLyBhZGQgY2xvbmUgaW5mb3JtYXRpb25cbiAgICB2YXIgY2xvbmVNYXJrZXJzID0gc2VsZi5maW5kQ2hpbGROb2RlcyhlbGUsICdjbG9uZScpO1xuICAgIGlmIChjbG9uZU1hcmtlcnMubGVuZ3RoID4gMCkge1xuICAgICAgbm9kZU9iai5jbG9uZW1hcmtlciA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGVPYmouY2xvbmVtYXJrZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gYWRkIHBvcnQgaW5mb3JtYXRpb25cbiAgICB2YXIgcG9ydHMgPSBbXTtcbiAgICB2YXIgcG9ydEVsZW1lbnRzID0gZWxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3BvcnQnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9ydEVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcG9ydEVsID0gcG9ydEVsZW1lbnRzW2ldO1xuICAgICAgdmFyIGlkID0gcG9ydEVsLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgIHZhciByZWxhdGl2ZVhQb3MgPSBwYXJzZUZsb2F0KHBvcnRFbC5nZXRBdHRyaWJ1dGUoJ3gnKSkgLSBub2RlT2JqLmJib3gueDtcbiAgICAgIHZhciByZWxhdGl2ZVlQb3MgPSBwYXJzZUZsb2F0KHBvcnRFbC5nZXRBdHRyaWJ1dGUoJ3knKSkgLSBub2RlT2JqLmJib3gueTtcblxuICAgICAgcmVsYXRpdmVYUG9zID0gcmVsYXRpdmVYUG9zIC8gcGFyc2VGbG9hdChub2RlT2JqLmJib3gudykgKiAxMDA7XG4gICAgICByZWxhdGl2ZVlQb3MgPSByZWxhdGl2ZVlQb3MgLyBwYXJzZUZsb2F0KG5vZGVPYmouYmJveC5oKSAqIDEwMDtcblxuICAgICAgcG9ydHMucHVzaCh7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgeDogcmVsYXRpdmVYUG9zLFxuICAgICAgICB5OiByZWxhdGl2ZVlQb3NcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIG5vZGVPYmoucG9ydHMgPSBwb3J0cztcblxuICAgIHZhciBjeXRvc2NhcGVKc05vZGUgPSB7ZGF0YTogbm9kZU9ian07XG4gICAganNvbkFycmF5LnB1c2goY3l0b3NjYXBlSnNOb2RlKTtcbiAgfSxcbiAgdHJhdmVyc2VOb2RlczogZnVuY3Rpb24gKGVsZSwganNvbkFycmF5LCBwYXJlbnQsIGNvbXBhcnRtZW50cykge1xuICAgIHZhciBlbElkID0gZWxlLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICBpZiAoIXRoaXMuc2Jnbm1sVGFnc1tlbGUuY2xhc3NOYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmluc2VydGVkTm9kZXNbZWxJZF0gPSB0cnVlO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAvLyBhZGQgY29tcGxleCBub2RlcyBoZXJlXG5cbiAgICB2YXIgZWxlQ2xhc3MgPSBlbGUuY2xhc3NOYW1lO1xuXG4gICAgaWYgKGVsZUNsYXNzID09PSAnY29tcGxleCcgfHwgZWxlQ2xhc3MgPT09ICdzdWJtYXAnKSB7XG4gICAgICBzZWxmLmFkZEN5dG9zY2FwZUpzTm9kZShlbGUsIGpzb25BcnJheSwgcGFyZW50LCBjb21wYXJ0bWVudHMpO1xuXG4gICAgICB2YXIgY2hpbGRHbHlwaHMgPSBzZWxmLmZpbmRDaGlsZE5vZGVzKGVsZSwgJ2dseXBoJyk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkR2x5cGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBnbHlwaCA9IGNoaWxkR2x5cGhzW2ldO1xuICAgICAgICB2YXIgZ2x5cGhDbGFzcyA9IGdseXBoLmNsYXNzTmFtZTtcbiAgICAgICAgaWYgKGdseXBoQ2xhc3MgIT09ICdzdGF0ZSB2YXJpYWJsZScgJiYgZ2x5cGhDbGFzcyAhPT0gJ3VuaXQgb2YgaW5mb3JtYXRpb24nKSB7XG4gICAgICAgICAgc2VsZi50cmF2ZXJzZU5vZGVzKGdseXBoLCBqc29uQXJyYXksIGVsSWQsIGNvbXBhcnRtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5hZGRDeXRvc2NhcGVKc05vZGUoZWxlLCBqc29uQXJyYXksIHBhcmVudCwgY29tcGFydG1lbnRzKTtcbiAgICB9XG4gIH0sXG4gIGdldFBvcnRzOiBmdW5jdGlvbiAoeG1sT2JqZWN0KSB7XG4gICAgcmV0dXJuICggeG1sT2JqZWN0Ll9jYWNoZWRQb3J0cyA9IHhtbE9iamVjdC5fY2FjaGVkUG9ydHMgfHwgeG1sT2JqZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoJ3BvcnQnKSk7XG4gIH0sXG4gIGdldEdseXBoczogZnVuY3Rpb24gKHhtbE9iamVjdCkge1xuICAgIHZhciBnbHlwaHMgPSB4bWxPYmplY3QuX2NhY2hlZEdseXBocztcblxuICAgIGlmICghZ2x5cGhzKSB7XG4gICAgICBnbHlwaHMgPSB4bWxPYmplY3QuX2NhY2hlZEdseXBocyA9IHhtbE9iamVjdC5fY2FjaGVkR2x5cGhzIHx8IHhtbE9iamVjdC5xdWVyeVNlbGVjdG9yQWxsKCdnbHlwaCcpO1xuXG4gICAgICB2YXIgaWQyZ2x5cGggPSB4bWxPYmplY3QuX2lkMmdseXBoID0ge307XG5cbiAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGdseXBocy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgdmFyIGcgPSBnbHlwaHNbaV07XG4gICAgICAgIHZhciBpZCA9IGcuZ2V0QXR0cmlidXRlKCdpZCcpO1xuXG4gICAgICAgIGlkMmdseXBoWyBpZCBdID0gZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ2x5cGhzO1xuICB9LFxuICBnZXRHbHlwaEJ5SWQ6IGZ1bmN0aW9uICh4bWxPYmplY3QsIGlkKSB7XG4gICAgdGhpcy5nZXRHbHlwaHMoeG1sT2JqZWN0KTsgLy8gbWFrZSBzdXJlIGNhY2hlIGlzIGJ1aWx0XG5cbiAgICByZXR1cm4geG1sT2JqZWN0Ll9pZDJnbHlwaFtpZF07XG4gIH0sXG4gIGdldEFyY1NvdXJjZUFuZFRhcmdldDogZnVuY3Rpb24gKGFyYywgeG1sT2JqZWN0KSB7XG4gICAgLy8gc291cmNlIGFuZCB0YXJnZXQgY2FuIGJlIGluc2lkZSBvZiBhIHBvcnRcbiAgICB2YXIgc291cmNlID0gYXJjLmdldEF0dHJpYnV0ZSgnc291cmNlJyk7XG4gICAgdmFyIHRhcmdldCA9IGFyYy5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpO1xuICAgIHZhciBzb3VyY2VOb2RlSWQ7XG4gICAgdmFyIHRhcmdldE5vZGVJZDtcblxuICAgIHZhciBzb3VyY2VFeGlzdHMgPSB0aGlzLmdldEdseXBoQnlJZCh4bWxPYmplY3QsIHNvdXJjZSk7XG4gICAgdmFyIHRhcmdldEV4aXN0cyA9IHRoaXMuZ2V0R2x5cGhCeUlkKHhtbE9iamVjdCwgdGFyZ2V0KTtcblxuICAgIGlmIChzb3VyY2VFeGlzdHMpIHtcbiAgICAgIHNvdXJjZU5vZGVJZCA9IHNvdXJjZTtcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0RXhpc3RzKSB7XG4gICAgICB0YXJnZXROb2RlSWQgPSB0YXJnZXQ7XG4gICAgfVxuXG5cbiAgICB2YXIgaTtcbiAgICB2YXIgcG9ydEVscyA9IHRoaXMuZ2V0UG9ydHMoeG1sT2JqZWN0KTtcbiAgICB2YXIgcG9ydDtcbiAgICBpZiAoc291cmNlTm9kZUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBwb3J0RWxzLmxlbmd0aDsgaSsrICkge1xuICAgICAgICBwb3J0ID0gcG9ydEVsc1tpXTtcbiAgICAgICAgaWYgKHBvcnQuZ2V0QXR0cmlidXRlKCdpZCcpID09PSBzb3VyY2UpIHtcbiAgICAgICAgICBzb3VyY2VOb2RlSWQgPSBwb3J0LnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRhcmdldE5vZGVJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcG9ydEVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwb3J0ID0gcG9ydEVsc1tpXTtcbiAgICAgICAgaWYgKHBvcnQuZ2V0QXR0cmlidXRlKCdpZCcpID09PSB0YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXROb2RlSWQgPSBwb3J0LnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsnc291cmNlJzogc291cmNlTm9kZUlkLCAndGFyZ2V0JzogdGFyZ2V0Tm9kZUlkfTtcbiAgfSxcblxuICBnZXRBcmNCZW5kUG9pbnRQb3NpdGlvbnM6IGZ1bmN0aW9uIChlbGUpIHtcbiAgICB2YXIgYmVuZFBvaW50UG9zaXRpb25zID0gW107XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmZpbmRDaGlsZE5vZGVzKGVsZSwgJ25leHQnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwb3NYID0gY2hpbGRyZW5baV0uZ2V0QXR0cmlidXRlKCd4Jyk7XG4gICAgICB2YXIgcG9zWSA9IGNoaWxkcmVuW2ldLmdldEF0dHJpYnV0ZSgneScpO1xuXG4gICAgICBiZW5kUG9pbnRQb3NpdGlvbnMucHVzaCh7XG4gICAgICAgIHg6IHBvc1gsXG4gICAgICAgIHk6IHBvc1lcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBiZW5kUG9pbnRQb3NpdGlvbnM7XG4gIH0sXG4gIGFkZEN5dG9zY2FwZUpzRWRnZTogZnVuY3Rpb24gKGVsZSwganNvbkFycmF5LCB4bWxPYmplY3QpIHtcbiAgICBpZiAoIXRoaXMuc2Jnbm1sVGFnc1tlbGUuY2xhc3NOYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgc291cmNlQW5kVGFyZ2V0ID0gc2VsZi5nZXRBcmNTb3VyY2VBbmRUYXJnZXQoZWxlLCB4bWxPYmplY3QpO1xuXG4gICAgaWYgKCF0aGlzLmluc2VydGVkTm9kZXNbc291cmNlQW5kVGFyZ2V0LnNvdXJjZV0gfHwgIXRoaXMuaW5zZXJ0ZWROb2Rlc1tzb3VyY2VBbmRUYXJnZXQudGFyZ2V0XSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBlZGdlT2JqID0ge307XG4gICAgdmFyIGJlbmRQb2ludFBvc2l0aW9ucyA9IHNlbGYuZ2V0QXJjQmVuZFBvaW50UG9zaXRpb25zKGVsZSk7XG5cbiAgICBlZGdlT2JqLmlkID0gZWxlLmdldEF0dHJpYnV0ZSgnaWQnKSB8fCB1bmRlZmluZWQ7XG4gICAgZWRnZU9iai5jbGFzcyA9IGVsZS5jbGFzc05hbWU7XG4gICAgZWRnZU9iai5iZW5kUG9pbnRQb3NpdGlvbnMgPSBiZW5kUG9pbnRQb3NpdGlvbnM7XG5cbiAgICB2YXIgZ2x5cGhDaGlsZHJlbiA9IHNlbGYuZmluZENoaWxkTm9kZXMoZWxlLCAnZ2x5cGgnKTtcbiAgICB2YXIgZ2x5cGhEZXNjZW5kZW50cyA9IGVsZS5xdWVyeVNlbGVjdG9yQWxsKCdnbHlwaCcpO1xuICAgIGlmIChnbHlwaERlc2NlbmRlbnRzLmxlbmd0aCA8PSAwKSB7XG4gICAgICBlZGdlT2JqLmNhcmRpbmFsaXR5ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbHlwaENoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChnbHlwaENoaWxkcmVuW2ldLmNsYXNzTmFtZSA9PT0gJ2NhcmRpbmFsaXR5Jykge1xuICAgICAgICAgIHZhciBsYWJlbCA9IGdseXBoQ2hpbGRyZW5baV0ucXVlcnlTZWxlY3RvcignbGFiZWwnKTtcbiAgICAgICAgICBlZGdlT2JqLmNhcmRpbmFsaXR5ID0gbGFiZWwuZ2V0QXR0cmlidXRlKCd0ZXh0JykgfHwgdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZWRnZU9iai5zb3VyY2UgPSBzb3VyY2VBbmRUYXJnZXQuc291cmNlO1xuICAgIGVkZ2VPYmoudGFyZ2V0ID0gc291cmNlQW5kVGFyZ2V0LnRhcmdldDtcblxuICAgIGVkZ2VPYmoucG9ydHNvdXJjZSA9IGVsZS5nZXRBdHRyaWJ1dGUoJ3NvdXJjZScpO1xuICAgIGVkZ2VPYmoucG9ydHRhcmdldCA9IGVsZS5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpO1xuXG4gICAgdmFyIGN5dG9zY2FwZUpzRWRnZSA9IHtkYXRhOiBlZGdlT2JqfTtcbiAgICBqc29uQXJyYXkucHVzaChjeXRvc2NhcGVKc0VkZ2UpO1xuICB9LFxuICBjb252ZXJ0OiBmdW5jdGlvbiAoc2Jnbm1sVGV4dCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY3l0b3NjYXBlSnNOb2RlcyA9IFtdO1xuICAgIHZhciBjeXRvc2NhcGVKc0VkZ2VzID0gW107XG5cbiAgICB2YXIgeG1sT2JqZWN0ID0gdGhpcy5sb2FkWE1MRnJvbVN0cmluZyhzYmdubWxUZXh0KTtcblxuICAgIHZhciBjb21wYXJ0bWVudHMgPSBzZWxmLmdldEFsbENvbXBhcnRtZW50cyh4bWxPYmplY3QpO1xuXG4gICAgdmFyIGdseXBocyA9IHNlbGYuZmluZENoaWxkTm9kZXMoeG1sT2JqZWN0LnF1ZXJ5U2VsZWN0b3IoJ21hcCcpLCAnZ2x5cGgnKTtcbiAgICB2YXIgYXJjcyA9IHNlbGYuZmluZENoaWxkTm9kZXMoeG1sT2JqZWN0LnF1ZXJ5U2VsZWN0b3IoJ21hcCcpLCAnYXJjJyk7XG5cbiAgICB2YXIgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZ2x5cGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZ2x5cGggPSBnbHlwaHNbaV07XG4gICAgICBzZWxmLnRyYXZlcnNlTm9kZXMoZ2x5cGgsIGN5dG9zY2FwZUpzTm9kZXMsICcnLCBjb21wYXJ0bWVudHMpO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBhcmNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYXJjID0gYXJjc1tpXTtcbiAgICAgIHNlbGYuYWRkQ3l0b3NjYXBlSnNFZGdlKGFyYywgY3l0b3NjYXBlSnNFZGdlcywgeG1sT2JqZWN0KTtcbiAgICB9XG5cbiAgICB2YXIgY3l0b3NjYXBlSnNHcmFwaCA9IHt9O1xuICAgIGN5dG9zY2FwZUpzR3JhcGgubm9kZXMgPSBjeXRvc2NhcGVKc05vZGVzO1xuICAgIGN5dG9zY2FwZUpzR3JhcGguZWRnZXMgPSBjeXRvc2NhcGVKc0VkZ2VzO1xuXG4gICAgdGhpcy5pbnNlcnRlZE5vZGVzID0ge307XG5cbiAgICByZXR1cm4gY3l0b3NjYXBlSnNHcmFwaDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzYmdubWxDb252ZXJ0ZXI7XG4iLCJsZXQgQ3l0b3NjYXBlID0gcmVxdWlyZSgnY3l0b3NjYXBlLWZvci1zYmdudml6Jyk7XG5sZXQgZGVmYXVsdHNEZWVwID0gcmVxdWlyZSgnbG9kYXNoLmRlZmF1bHRzZGVlcCcpO1xuXG5sZXQgYXVnbWVudCA9IHJlcXVpcmUoJy4vc2JnblJlbmRlcmVyL2F1Z21lbnRDeXRvc2NhcGUnKTtcbmxldCBncmFwaFN0eWxlU2hlZXQgPSByZXF1aXJlKCcuL3N0eWxlL2dyYXBoU3R5bGVTaGVldCcpO1xuXG5hdWdtZW50KCBDeXRvc2NhcGUgKTsgLy8gVE9ETyBzaG91bGQgYmUgcmVtb3ZlZCBldmVudHVhbGx5IChqdXN0IHVzZSB2YW5pbGxhIGN5KVxuXG5sZXQgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIHN0eWxlOiBncmFwaFN0eWxlU2hlZXQoQ3l0b3NjYXBlKSxcbiAgYm94U2VsZWN0aW9uRW5hYmxlZDogdHJ1ZSxcbiAgc2hvd092ZXJsYXk6IGZhbHNlLFxuICBtaW5ab29tOiBmYWxzZSxcbiAgbWF4Wm9vbTogZmFsc2UsXG4gIG1vdGlvbkJsdXI6IGZhbHNlLFxuICB3aGVlbFNlbnNpdGl2aXR5OiAwLjFcbn07XG5cbmNsYXNzIFNCR05SZW5kZXJlciBleHRlbmRzIEN5dG9zY2FwZSB7XG4gIGNvbnN0cnVjdG9yKCBvcHRpb25zICl7XG4gICAgc3VwZXIoIGRlZmF1bHRzRGVlcCgge30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zICkgKTtcbiAgfVxuLy8gICBUT0RPOiBJbml0aWFsIHNiZ24tcmVuZGVyZXIgYXBpXG4vLyAgIHNiZ24gKGtkZmtkKSB7IC8vIHRoZSBmdW5jdGlvbiB0aGF0IGNhbiBwb3NzaWJseSB0dXJuZWQgaW50byBhbiBleHRlbnNpb25cbi8vICAgLi4uOyAvLyBzdHlsZSBzaGVldCBjYW4gYmUgc2V0IGluIGhlcmVcbi8vICAgLi4uOyAvLyBhY2NlcHQgc2JuZ21sIGZpbGUgb3Igc3RyaW5nLCBwcm9taXNlIHRvIHJlc29sdmUgdG8gc3RyaW5nIChmZXRjaCBzdXBwb3J0KSwgcG9zc2libHkgYWx3YXlzIHRyZWF0IGl0IGFzIGEgcHJvbWlzZVxuLy8gICAuLi47IC8vIGV4cG9ydCAgdG8gc2Jnbm1sIGZpbGUgb3IgcGljdHVyZVxuLy8gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU0JHTlJlbmRlcmVyO1xuIiwidmFyIGV4dGVuZCA9IHJlcXVpcmUoJ2V4dGVuZCcpO1xuXG4vLyBzYmduIGNvbnN0YW50c1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnJyk7XG5cbi8vIHJlbmRlcmluZ1xudmFyIGRyYXcgPSByZXF1aXJlKCcuL2RyYXcnKTtcbnZhciByZW5kZXJJbnRlcnNlY3QgPSByZXF1aXJlKCcuL2ludGVyc2VjdCcpO1xudmFyIHJlbmRlclBvaW50ID0gcmVxdWlyZSgnLi9wb2ludCcpOyAgLy8gclBvaW50IGJlY2F1c2UgaXQgc2VlbXMgdGhhdCBwb2ludCBpcyB1c2VkIGFzIGEgdmFyaWFibGUgb2Z0ZW5cblxuLy8gY3l0b3NjYXBlIG1hdGhcbnZhciBjeU1hdGggPSByZXF1aXJlKCcuL2N5TWF0aCcpO1xuXG4vLyBBdCB0aGUgY29yZSBvZiB0aGUgcmVuZGVyZXIgaXMgY3l0b3NjYXBlLlxuLy8gV2UgbmVlZCB0byBhdWdtZW50IGl0IHRvIHJlbmRlciBTQkdOIHNwZWNpZmljIGdyYXBoaWNzLlxuXG4vLyBBdCBhIGJpcmRzIGV5ZSB2aWV3LCB0aGVzZSBhcmUgZnVuY3Rpb25zIGFyZSBkZXNpZ25lZCB0b1xuLy8gd3JpdGUgc2JnbiBzaGFwZXMgc3VjaCBhcyBwb2x5Z29ucywgc3F1YXJlIGJveGVzLCBhcnJvd3MsIGV0Yy4gdG8gdGhlXG4vLyBjYW52YXMuXG5cbi8vIEF0IHRoZSBjb25jZXB0dWFsIGxldmVsIHRoaXMgaXMgYmFkLiAgSXQgZXhwb3NlcyBjeXRvc2NhcGUgaW50ZXJuYWxzXG4vLyBhbmQgbW9kaWZpZXMgdGhlIGN5dG9zY2FwZSBvYmplY3QgaXRzZWxmLlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjeXRvc2NhcGUpIHtcbiAgdmFyIGN5U3R5bGVQcm9wZXJ0aWVzID0gY3l0b3NjYXBlLnN0eWxlUHJvcGVydGllcztcbiAgdmFyIGN5QmFzZUFycm93U2hhcGVzID0gY3l0b3NjYXBlLmJhc2VBcnJvd1NoYXBlcztcbiAgdmFyIGN5U2hhcGVzID0gY3l0b3NjYXBlLmJhc2VOb2RlU2hhcGVzOyAgLy8gd2UgbmVlZCBkb250IHdhbnQgdG8gbXV0YXRlIC4vY3lTaGFwZXMuanNcbiAgdmFyICQkID0gY3l0b3NjYXBlO1xuXG4gIC8vIG1vZGlmaWVkIGN5dG9zY2FwZS5qcyBuZWVkcyB0aGVzZSBvciBpdCBicmVha3NcbiAgJCQuc2Jnbi5zYmduU2hhcGVzID0gY29uZmlnLnNiZ25TaGFwZXM7XG5cbiAgLy8gZGVmaW5lIG5ldyBjeXRvc2NhcGUgc2hhcGVzLCBsaW5lIHN0eWxlcywgYXJyb3dzaGFwZXNcbiAgY3lTdHlsZVByb3BlcnRpZXMudHlwZXMubm9kZVNoYXBlLmVudW1zLnB1c2goJ251Y2xlaWMgYWNpZCBmZWF0dXJlJyk7XG4gIGN5U3R5bGVQcm9wZXJ0aWVzLnR5cGVzLm5vZGVTaGFwZS5lbnVtcy5wdXNoKCdjb21wbGV4Jyk7XG4gIGN5U3R5bGVQcm9wZXJ0aWVzLnR5cGVzLm5vZGVTaGFwZS5lbnVtcy5wdXNoKCdtYWNyb21vbGVjdWxlJyk7XG4gIGN5U3R5bGVQcm9wZXJ0aWVzLnR5cGVzLm5vZGVTaGFwZS5lbnVtcy5wdXNoKCdzaW1wbGUgY2hlbWljYWwnKTtcbiAgY3lTdHlsZVByb3BlcnRpZXMudHlwZXMubm9kZVNoYXBlLmVudW1zLnB1c2goJ3Vuc3BlY2lmaWVkIGVudGl0eScpO1xuICBjeVN0eWxlUHJvcGVydGllcy50eXBlcy5ub2RlU2hhcGUuZW51bXMucHVzaCgncHJvY2VzcycpO1xuICBjeVN0eWxlUHJvcGVydGllcy50eXBlcy5ub2RlU2hhcGUuZW51bXMucHVzaCgnb21pdHRlZCBwcm9jZXNzJyk7XG4gIGN5U3R5bGVQcm9wZXJ0aWVzLnR5cGVzLm5vZGVTaGFwZS5lbnVtcy5wdXNoKCd1bmNlcnRhaW4gcHJvY2VzcycpO1xuICBjeVN0eWxlUHJvcGVydGllcy50eXBlcy5ub2RlU2hhcGUuZW51bXMucHVzaCgnYXNzb2NpYXRpb24nKTtcblxuICBjeVN0eWxlUHJvcGVydGllcy50eXBlcy5saW5lU3R5bGUuZW51bXMucHVzaCgnY29uc3VtcHRpb24nKTtcbiAgY3lTdHlsZVByb3BlcnRpZXMudHlwZXMubGluZVN0eWxlLmVudW1zLnB1c2goJ3Byb2R1Y3Rpb24nKTtcblxuICBjeVN0eWxlUHJvcGVydGllcy50eXBlcy5hcnJvd1NoYXBlLmVudW1zLnB1c2goJ25lY2Vzc2FyeSBzdGltdWxhdGlvbicpO1xuXG4gICQkLnNiZ24ucmVnaXN0ZXJTYmduQXJyb3dTaGFwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY3lCYXNlQXJyb3dTaGFwZXNbJ25lY2Vzc2FyeSBzdGltdWxhdGlvbiddID0gZXh0ZW5kKHt9LCBjeUJhc2VBcnJvd1NoYXBlc1sndHJpYW5nbGUtdGVlJ10pO1xuICAgIGN5QmFzZUFycm93U2hhcGVzWyduZWNlc3Nhcnkgc3RpbXVsYXRpb24nXS5wb2ludHNUZWUgPSBbXG4gICAgICAtMC4xOCwgLTAuNDMsXG4gICAgICAwLjE4LCAtMC40M1xuICAgIF07XG4gIH07XG5cbiAgJCQuc2Jnbi5yZWdpc3RlclNiZ25Ob2RlU2hhcGVzID0gZnVuY3Rpb24gKCkge1xuICAgIGN5U2hhcGVzWydwcm9jZXNzJ10gPSB7XG4gICAgICBwb2ludHM6IGN5TWF0aC5nZW5lcmF0ZVVuaXROZ29uUG9pbnRzRml0VG9TcXVhcmUoNCwgMCksXG4gICAgICBsYWJlbDogJycsXG4gICAgICBkcmF3OiBmdW5jdGlvbiAoY29udGV4dCwgbm9kZSkge1xuICAgICAgICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICAgICAgICB2YXIgY2VudGVyWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgICAgICAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG5cbiAgICAgICAgZHJhdy5kcmF3UG9seWdvblBhdGgoY29udGV4dCxcbiAgICAgICAgICAgICAgICBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsXG4gICAgICAgICAgICAgICAgY3lTaGFwZXNbJ3Byb2Nlc3MnXS5wb2ludHMpO1xuICAgICAgICBjb250ZXh0LmZpbGwoKTtcblxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICAgIGRyYXcuZHJhd1BvcnRzVG9Qb2x5Z29uU2hhcGUoY29udGV4dCwgbm9kZSwgdGhpcy5wb2ludHMpO1xuICAgICAgfSxcbiAgICAgIGludGVyc2VjdExpbmU6IGZ1bmN0aW9uIChub2RlLCB4LCB5LCBwb3J0SWQpIHtcbiAgICAgICAgdmFyIG5vZGVYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xuICAgICAgICB2YXIgbm9kZVkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG4gICAgICAgIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IG5vZGUuaGVpZ2h0KCk7XG4gICAgICAgIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKSAvIDI7XG5cbiAgICAgICAgdmFyIHBvcnRJbnRlcnNlY3Rpb24gPSByZW5kZXJJbnRlcnNlY3QuaW50ZXJzZWN0TGluZVBvcnRzKG5vZGUsIHgsIHksIHBvcnRJZCk7XG4gICAgICAgIGlmIChwb3J0SW50ZXJzZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gcG9ydEludGVyc2VjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjeU1hdGgucG9seWdvbkludGVyc2VjdExpbmUoXG4gICAgICAgICAgICAgICAgeCwgeSxcbiAgICAgICAgICAgICAgICBjeVNoYXBlc1sncHJvY2VzcyddLnBvaW50cyxcbiAgICAgICAgICAgICAgICBub2RlWCxcbiAgICAgICAgICAgICAgICBub2RlWSxcbiAgICAgICAgICAgICAgICB3aWR0aCAvIDIsIGhlaWdodCAvIDIsXG4gICAgICAgICAgICAgICAgcGFkZGluZyk7XG4gICAgICB9LFxuICAgICAgY2hlY2tQb2ludDogZnVuY3Rpb24gKHgsIHksIG5vZGUpIHtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuICAgICAgICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICAgICAgICB2YXIgcGFkZGluZyA9IHBhcnNlSW50KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSkgLyAyO1xuXG4gICAgICAgIHJldHVybiBjeU1hdGgucG9pbnRJbnNpZGVQb2x5Z29uKHgsIHksIGN5U2hhcGVzWydwcm9jZXNzJ10ucG9pbnRzLFxuICAgICAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclksIHdpZHRoLCBoZWlnaHQsIFswLCAtMV0sIHBhZGRpbmcpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjeVNoYXBlc1snb21pdHRlZCBwcm9jZXNzJ10gPSBleHRlbmQodHJ1ZSwge30sIGN5U2hhcGVzWydwcm9jZXNzJ10pO1xuICAgIGN5U2hhcGVzWydvbWl0dGVkIHByb2Nlc3MnXS5sYWJlbCA9ICdcXFxcXFxcXCc7XG5cbiAgICBjeVNoYXBlc1sndW5jZXJ0YWluIHByb2Nlc3MnXSA9IGV4dGVuZCh0cnVlLCB7fSwgY3lTaGFwZXNbJ3Byb2Nlc3MnXSk7XG4gICAgY3lTaGFwZXNbJ3VuY2VydGFpbiBwcm9jZXNzJ10ubGFiZWwgPSAnPyc7XG5cbiAgICBjeVNoYXBlc1sndW5zcGVjaWZpZWQgZW50aXR5J10gPSB7XG4gICAgICBkcmF3OiBmdW5jdGlvbiAoY29udGV4dCwgbm9kZSkge1xuICAgICAgICB2YXIgY2VudGVyWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgICAgICAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG5cbiAgICAgICAgdmFyIHdpZHRoID0gbm9kZS53aWR0aCgpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcbiAgICAgICAgdmFyIGNsb25lTWFya2VyID0gbm9kZS5fcHJpdmF0ZS5kYXRhLmNsb25lbWFya2VyO1xuXG4gICAgICAgIGRyYXcuZHJhd0VsbGlwc2UoY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcblxuICAgICAgICAkJC5zYmduLmNsb25lTWFya2VyLnVuc3BlY2lmaWVkRW50aXR5KGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgY2xvbmVNYXJrZXIsXG4gICAgICAgICAgICAgICAgbm9kZS5jc3MoJ2JhY2tncm91bmQtb3BhY2l0eScpKTtcblxuICAgICAgICBmb3JjZU9wYWNpdHlUb09uZShub2RlLCBjb250ZXh0KTtcbiAgICAgICAgZHJhdy5kcmF3U3RhdGVBbmRJbmZvcyhub2RlLCBjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICAgIH0sXG4gICAgICBpbnRlcnNlY3RMaW5lOiBmdW5jdGlvbiAobm9kZSwgeCwgeSwgcG9ydElkKSB7XG4gICAgICAgIHZhciBjZW50ZXJYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xuICAgICAgICB2YXIgY2VudGVyWSA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueTtcblxuICAgICAgICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICAgICAgICB2YXIgcGFkZGluZyA9IHBhcnNlSW50KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSkgLyAyO1xuXG4gICAgICAgIHZhciBwb3J0SW50ZXJzZWN0aW9uID0gcmVuZGVySW50ZXJzZWN0LmludGVyc2VjdExpbmVQb3J0cyhub2RlLCB4LCB5LCBwb3J0SWQpO1xuICAgICAgICBpZiAocG9ydEludGVyc2VjdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIHBvcnRJbnRlcnNlY3Rpb247XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhdGVBbmRJbmZvSW50ZXJzZWN0TGluZXMgPSByZW5kZXJJbnRlcnNlY3QuaW50ZXJzZWN0TGluZVN0YXRlQW5kSW5mb0JveGVzKFxuICAgICAgICAgICAgICAgIG5vZGUsIHgsIHkpO1xuXG4gICAgICAgIHZhciBub2RlSW50ZXJzZWN0TGluZXMgPSBjeVNoYXBlc1snZWxsaXBzZSddLmludGVyc2VjdExpbmUoY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0LCB4LCB5LCBwYWRkaW5nKTtcblxuICAgICAgICB2YXIgaW50ZXJzZWN0aW9ucyA9IHN0YXRlQW5kSW5mb0ludGVyc2VjdExpbmVzLmNvbmNhdChub2RlSW50ZXJzZWN0TGluZXMpO1xuICAgICAgICByZXR1cm4gcmVuZGVySW50ZXJzZWN0LmludGVyc2VjdENsb3Nlc3RQb2ludChbeCwgeV0sIGludGVyc2VjdGlvbnMpO1xuXG4gICAgICB9LFxuICAgICAgY2hlY2tQb2ludDogZnVuY3Rpb24gKHgsIHksIG5vZGUsIHRocmVzaG9sZCkge1xuICAgICAgICB2YXIgY2VudGVyWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgICAgICAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG5cbiAgICAgICAgdmFyIHdpZHRoID0gbm9kZS53aWR0aCgpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcbiAgICAgICAgdmFyIHBhZGRpbmcgPSBwYXJzZUludChub2RlLmNzcygnYm9yZGVyLXdpZHRoJykpIC8gMjtcblxuICAgICAgICB2YXIgbm9kZUNoZWNrUG9pbnQgPSBjeVNoYXBlc1snZWxsaXBzZSddLmNoZWNrUG9pbnQoeCwgeSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nLCB3aWR0aCwgaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclkpO1xuXG4gICAgICAgIHZhciBzdGF0ZUFuZEluZm9DaGVja1BvaW50ID0gcmVuZGVyUG9pbnQuY2hlY2tQb2ludFN0YXRlQW5kSW5mb0JveGVzKHgsIHksIG5vZGUsXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkKTtcblxuICAgICAgICByZXR1cm4gbm9kZUNoZWNrUG9pbnQgfHwgc3RhdGVBbmRJbmZvQ2hlY2tQb2ludDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY3lTaGFwZXNbJ3NpbXBsZSBjaGVtaWNhbCddID0ge1xuICAgICAgbXVsdGltZXJQYWRkaW5nOiA1LFxuICAgICAgZHJhdzogZnVuY3Rpb24gKGNvbnRleHQsIG5vZGUpIHtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuXG4gICAgICAgIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IG5vZGUuaGVpZ2h0KCk7XG4gICAgICAgIHZhciBtdWx0aW1lclBhZGRpbmcgPSBjeVNoYXBlc1snc2ltcGxlIGNoZW1pY2FsJ10ubXVsdGltZXJQYWRkaW5nO1xuICAgICAgICB2YXIgcGFkZGluZyA9IHBhcnNlSW50KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSk7XG4gICAgICAgIHZhciBjbG9uZU1hcmtlciA9IG5vZGUuX3ByaXZhdGUuZGF0YS5jbG9uZW1hcmtlcjtcblxuICAgICAgICBpZiAoJCQuc2Jnbi5pc011bHRpbWVyKG5vZGUpKSB7XG4gICAgICAgICAgLy9hZGQgbXVsdGltZXIgc2hhcGVcbiAgICAgICAgICBkcmF3LmRyYXdTaW1wbGVDaGVtaWNhbChjb250ZXh0LCBjZW50ZXJYICsgbXVsdGltZXJQYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgY2VudGVyWSArIG11bHRpbWVyUGFkZGluZywgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICAgICAgJCQuc2Jnbi5jbG9uZU1hcmtlci5zaW1wbGVDaGVtaWNhbChjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgY2VudGVyWCArIG11bHRpbWVyUGFkZGluZywgY2VudGVyWSArIG11bHRpbWVyUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIHdpZHRoIC0gcGFkZGluZywgaGVpZ2h0IC0gcGFkZGluZywgY2xvbmVNYXJrZXIsIHRydWUsXG4gICAgICAgICAgICAgICAgICBub2RlLmNzcygnYmFja2dyb3VuZC1vcGFjaXR5JykpO1xuICAgICAgICB9XG5cbiAgICAgICAgZHJhdy5kcmF3U2ltcGxlQ2hlbWljYWwoY29udGV4dCxcbiAgICAgICAgICAgICAgICBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgICAgJCQuc2Jnbi5jbG9uZU1hcmtlci5zaW1wbGVDaGVtaWNhbChjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIHdpZHRoIC0gcGFkZGluZywgaGVpZ2h0IC0gcGFkZGluZywgY2xvbmVNYXJrZXIsIGZhbHNlLFxuICAgICAgICAgICAgICAgIG5vZGUuY3NzKCdiYWNrZ3JvdW5kLW9wYWNpdHknKSk7XG5cbiAgICAgICAgdmFyIG9sZFN0eWxlID0gY29udGV4dC5maWxsU3R5bGU7XG4gICAgICAgIGZvcmNlT3BhY2l0eVRvT25lKG5vZGUsIGNvbnRleHQpO1xuICAgICAgICBkcmF3LmRyYXdTdGF0ZUFuZEluZm9zKG5vZGUsIGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IG9sZFN0eWxlO1xuICAgICAgfSxcbiAgICAgIGludGVyc2VjdExpbmU6IGZ1bmN0aW9uIChub2RlLCB4LCB5LCBwb3J0SWQpIHtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuXG4gICAgICAgIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IG5vZGUuaGVpZ2h0KCk7XG4gICAgICAgIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKTtcbiAgICAgICAgdmFyIG11bHRpbWVyUGFkZGluZyA9IGN5U2hhcGVzWydzaW1wbGUgY2hlbWljYWwnXS5tdWx0aW1lclBhZGRpbmc7XG5cbiAgICAgICAgdmFyIHBvcnRJbnRlcnNlY3Rpb24gPSByZW5kZXJJbnRlcnNlY3QuaW50ZXJzZWN0TGluZVBvcnRzKG5vZGUsIHgsIHksIHBvcnRJZCk7XG4gICAgICAgIGlmIChwb3J0SW50ZXJzZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gcG9ydEludGVyc2VjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGF0ZUFuZEluZm9JbnRlcnNlY3RMaW5lcyA9IHJlbmRlckludGVyc2VjdC5pbnRlcnNlY3RMaW5lU3RhdGVBbmRJbmZvQm94ZXMoXG4gICAgICAgICAgICAgICAgbm9kZSwgeCwgeSk7XG5cbiAgICAgICAgdmFyIG5vZGVJbnRlcnNlY3RMaW5lcyA9IGN5U2hhcGVzWydlbGxpcHNlJ10uaW50ZXJzZWN0TGluZShcbiAgICAgICAgICAgICAgICBjZW50ZXJYLCBjZW50ZXJZLCB3aWR0aCwgaGVpZ2h0LCB4LCB5LCBwYWRkaW5nKTtcblxuICAgICAgICAvL2NoZWNrIHdoZXRoZXIgc2JnbiBjbGFzcyBpbmNsdWRlcyBtdWx0aW1lciBzdWJzdHJpbmcgb3Igbm90XG4gICAgICAgIHZhciBtdWx0aW1lckludGVyc2VjdGlvbkxpbmVzID0gW107XG4gICAgICAgIGlmICgkJC5zYmduLmlzTXVsdGltZXIobm9kZSkpIHtcbiAgICAgICAgICBtdWx0aW1lckludGVyc2VjdGlvbkxpbmVzID0gY3lTaGFwZXNbJ2VsbGlwc2UnXS5pbnRlcnNlY3RMaW5lKFxuICAgICAgICAgICAgICAgICAgY2VudGVyWCArIG11bHRpbWVyUGFkZGluZywgY2VudGVyWSArIG11bHRpbWVyUGFkZGluZywgd2lkdGgsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQsIHgsIHksIHBhZGRpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGludGVyc2VjdGlvbnMgPSBzdGF0ZUFuZEluZm9JbnRlcnNlY3RMaW5lcy5jb25jYXQobm9kZUludGVyc2VjdExpbmVzLCBtdWx0aW1lckludGVyc2VjdGlvbkxpbmVzKTtcblxuICAgICAgICByZXR1cm4gcmVuZGVySW50ZXJzZWN0LmludGVyc2VjdENsb3Nlc3RQb2ludChbeCwgeV0sIGludGVyc2VjdGlvbnMpO1xuICAgICAgfSxcbiAgICAgIGNoZWNrUG9pbnQ6IGZ1bmN0aW9uICh4LCB5LCBub2RlLCB0aHJlc2hvbGQpIHtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuXG4gICAgICAgIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IG5vZGUuaGVpZ2h0KCk7XG4gICAgICAgIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKSAvIDI7XG4gICAgICAgIHZhciBtdWx0aW1lclBhZGRpbmcgPSBjeVNoYXBlc1snc2ltcGxlIGNoZW1pY2FsJ10ubXVsdGltZXJQYWRkaW5nO1xuXG4gICAgICAgIHZhciBub2RlQ2hlY2tQb2ludCA9IGN5U2hhcGVzWydyb3VuZHJlY3RhbmdsZSddLmNoZWNrUG9pbnQoeCwgeSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nLCB3aWR0aCwgaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclkpO1xuXG4gICAgICAgIHZhciBzdGF0ZUFuZEluZm9DaGVja1BvaW50ID0gcmVuZGVyUG9pbnQuY2hlY2tQb2ludFN0YXRlQW5kSW5mb0JveGVzKHgsIHksIG5vZGUsXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkKTtcblxuICAgICAgICAvL2NoZWNrIHdoZXRoZXIgc2JnbiBjbGFzcyBpbmNsdWRlcyBtdWx0aW1lciBzdWJzdHJpbmcgb3Igbm90XG4gICAgICAgIHZhciBtdWx0aW1lckNoZWNrUG9pbnQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCQkLnNiZ24uaXNNdWx0aW1lcihub2RlKSkge1xuICAgICAgICAgIG11bHRpbWVyQ2hlY2tQb2ludCA9IGN5U2hhcGVzWydlbGxpcHNlJ10uY2hlY2tQb2ludCh4LCB5LFxuICAgICAgICAgICAgICAgICAgcGFkZGluZywgd2lkdGgsIGhlaWdodCxcbiAgICAgICAgICAgICAgICAgIGNlbnRlclggKyBtdWx0aW1lclBhZGRpbmcsIGNlbnRlclkgKyBtdWx0aW1lclBhZGRpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vZGVDaGVja1BvaW50IHx8IHN0YXRlQW5kSW5mb0NoZWNrUG9pbnQgfHwgbXVsdGltZXJDaGVja1BvaW50O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjeVNoYXBlc1snbWFjcm9tb2xlY3VsZSddID0ge1xuICAgICAgcG9pbnRzOiBjeU1hdGguZ2VuZXJhdGVVbml0TmdvblBvaW50cyg0LCAwKSxcbiAgICAgIG11bHRpbWVyUGFkZGluZzogNSxcbiAgICAgIGRyYXc6IGZ1bmN0aW9uIChjb250ZXh0LCBub2RlKSB7XG4gICAgICAgIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IG5vZGUuaGVpZ2h0KCk7XG4gICAgICAgIHZhciBjZW50ZXJYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xuICAgICAgICB2YXIgY2VudGVyWSA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueTtcbiAgICAgICAgdmFyIG11bHRpbWVyUGFkZGluZyA9IGN5U2hhcGVzWydtYWNyb21vbGVjdWxlJ10ubXVsdGltZXJQYWRkaW5nO1xuICAgICAgICB2YXIgY2xvbmVNYXJrZXIgPSBub2RlLl9wcml2YXRlLmRhdGEuY2xvbmVtYXJrZXI7XG5cbiAgICAgICAgLy9jaGVjayB3aGV0aGVyIHNiZ24gY2xhc3MgaW5jbHVkZXMgbXVsdGltZXIgc3Vic3RyaW5nIG9yIG5vdFxuICAgICAgICBpZiAoJCQuc2Jnbi5pc011bHRpbWVyKG5vZGUpKSB7XG4gICAgICAgICAgLy9hZGQgbXVsdGltZXIgc2hhcGVcbiAgICAgICAgICBkcmF3LmRyYXdSb3VuZFJlY3RhbmdsZVBhdGgoY29udGV4dCxcbiAgICAgICAgICAgICAgICAgIGNlbnRlclggKyBtdWx0aW1lclBhZGRpbmcsIGNlbnRlclkgKyBtdWx0aW1lclBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgICAgICAkJC5zYmduLmNsb25lTWFya2VyLm1hY3JvbW9sZWN1bGUoY29udGV4dCxcbiAgICAgICAgICAgICAgICAgIGNlbnRlclggKyBtdWx0aW1lclBhZGRpbmcsIGNlbnRlclkgKyBtdWx0aW1lclBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCBjbG9uZU1hcmtlciwgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIG5vZGUuY3NzKCdiYWNrZ3JvdW5kLW9wYWNpdHknKSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXcuZHJhd1JvdW5kUmVjdGFuZ2xlUGF0aChjb250ZXh0LFxuICAgICAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xuXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgICAgJCQuc2Jnbi5jbG9uZU1hcmtlci5tYWNyb21vbGVjdWxlKGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgY2xvbmVNYXJrZXIsIGZhbHNlLFxuICAgICAgICAgICAgICAgIG5vZGUuY3NzKCdiYWNrZ3JvdW5kLW9wYWNpdHknKSk7XG5cbiAgICAgICAgdmFyIG9sZFN0eWxlID0gY29udGV4dC5maWxsU3R5bGU7XG4gICAgICAgIGZvcmNlT3BhY2l0eVRvT25lKG5vZGUsIGNvbnRleHQpO1xuICAgICAgICBkcmF3LmRyYXdTdGF0ZUFuZEluZm9zKG5vZGUsIGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IG9sZFN0eWxlO1xuICAgICAgfSxcbiAgICAgIGludGVyc2VjdExpbmU6IGZ1bmN0aW9uIChub2RlLCB4LCB5LCBwb3J0SWQpIHtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuICAgICAgICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICAgICAgICB2YXIgcGFkZGluZyA9IHBhcnNlSW50KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSkgLyAyO1xuICAgICAgICB2YXIgbXVsdGltZXJQYWRkaW5nID0gY3lTaGFwZXNbJ21hY3JvbW9sZWN1bGUnXS5tdWx0aW1lclBhZGRpbmc7XG4gICAgICAgIHZhciBjb3JuZXJSYWRpdXMgPSBjeU1hdGguZ2V0Um91bmRSZWN0YW5nbGVSYWRpdXMod2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgdmFyIHBvcnRJbnRlcnNlY3Rpb24gPSByZW5kZXJJbnRlcnNlY3QuaW50ZXJzZWN0TGluZVBvcnRzKG5vZGUsIHgsIHksIHBvcnRJZCk7XG4gICAgICAgIGlmIChwb3J0SW50ZXJzZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gcG9ydEludGVyc2VjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGF0ZUFuZEluZm9JbnRlcnNlY3RMaW5lcyA9IHJlbmRlckludGVyc2VjdC5pbnRlcnNlY3RMaW5lU3RhdGVBbmRJbmZvQm94ZXMoXG4gICAgICAgICAgICAgICAgbm9kZSwgeCwgeSk7XG5cbiAgICAgICAgdmFyIG5vZGVJbnRlcnNlY3RMaW5lcyA9IHJlbmRlckludGVyc2VjdC5pbnRlcnNlY3RSb3VuZFJlY3RhbmdsZUxpbmUoXG4gICAgICAgICAgICAgICAgeCwgeSxcbiAgICAgICAgICAgICAgICBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCxcbiAgICAgICAgICAgICAgICBjb3JuZXJSYWRpdXMsIHBhZGRpbmcpO1xuXG4gICAgICAgIC8vY2hlY2sgd2hldGhlciBzYmduIGNsYXNzIGluY2x1ZGVzIG11bHRpbWVyIHN1YnN0cmluZyBvciBub3RcbiAgICAgICAgdmFyIG11bHRpbWVySW50ZXJzZWN0aW9uTGluZXMgPSBbXTtcbiAgICAgICAgaWYgKCQkLnNiZ24uaXNNdWx0aW1lcihub2RlKSkge1xuICAgICAgICAgIG11bHRpbWVySW50ZXJzZWN0aW9uTGluZXMgPSByZW5kZXJJbnRlcnNlY3QuaW50ZXJzZWN0Um91bmRSZWN0YW5nbGVMaW5lKFxuICAgICAgICAgICAgICAgICAgeCwgeSxcbiAgICAgICAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgICAgICBjZW50ZXJYICsgbXVsdGltZXJQYWRkaW5nLCBjZW50ZXJZICsgbXVsdGltZXJQYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCxcbiAgICAgICAgICAgICAgICAgIGNvcm5lclJhZGl1cywgcGFkZGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW50ZXJzZWN0aW9ucyA9IHN0YXRlQW5kSW5mb0ludGVyc2VjdExpbmVzLmNvbmNhdChub2RlSW50ZXJzZWN0TGluZXMsIG11bHRpbWVySW50ZXJzZWN0aW9uTGluZXMpO1xuXG4gICAgICAgIHJldHVybiByZW5kZXJJbnRlcnNlY3QuaW50ZXJzZWN0Q2xvc2VzdFBvaW50KFt4LCB5XSwgaW50ZXJzZWN0aW9ucyk7XG4gICAgICB9LFxuICAgICAgY2hlY2tQb2ludDogZnVuY3Rpb24gKHgsIHksIG5vZGUsIHRocmVzaG9sZCkge1xuICAgICAgICB2YXIgY2VudGVyWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgICAgICAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG4gICAgICAgIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKSArIHRocmVzaG9sZDtcbiAgICAgICAgdmFyIGhlaWdodCA9IG5vZGUuaGVpZ2h0KCkgKyB0aHJlc2hvbGQ7XG4gICAgICAgIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKSAvIDI7XG4gICAgICAgIHZhciBtdWx0aW1lclBhZGRpbmcgPSBjeVNoYXBlc1snbWFjcm9tb2xlY3VsZSddLm11bHRpbWVyUGFkZGluZztcblxuICAgICAgICB2YXIgbm9kZUNoZWNrUG9pbnQgPSBjeVNoYXBlc1sncm91bmRyZWN0YW5nbGUnXS5jaGVja1BvaW50KHgsIHksIHBhZGRpbmcsXG4gICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgY2VudGVyWCwgY2VudGVyWSk7XG4gICAgICAgIHZhciBzdGF0ZUFuZEluZm9DaGVja1BvaW50ID0gcmVuZGVyUG9pbnQuY2hlY2tQb2ludFN0YXRlQW5kSW5mb0JveGVzKHgsIHksIG5vZGUsXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkKTtcblxuICAgICAgICAvL2NoZWNrIHdoZXRoZXIgc2JnbiBjbGFzcyBpbmNsdWRlcyBtdWx0aW1lciBzdWJzdHJpbmcgb3Igbm90XG4gICAgICAgIHZhciBtdWx0aW1lckNoZWNrUG9pbnQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCQkLnNiZ24uaXNNdWx0aW1lcihub2RlKSkge1xuICAgICAgICAgIG11bHRpbWVyQ2hlY2tQb2ludCA9IGN5U2hhcGVzWydyb3VuZHJlY3RhbmdsZSddLmNoZWNrUG9pbnQoeCwgeSwgcGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNlbnRlclggKyBtdWx0aW1lclBhZGRpbmcsIGNlbnRlclkgKyBtdWx0aW1lclBhZGRpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vZGVDaGVja1BvaW50IHx8IHN0YXRlQW5kSW5mb0NoZWNrUG9pbnQgfHwgbXVsdGltZXJDaGVja1BvaW50O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjeVNoYXBlc1snYXNzb2NpYXRpb24nXSA9IHtcbiAgICAgIGRyYXc6IGZ1bmN0aW9uIChjb250ZXh0LCBub2RlKSB7XG4gICAgICAgIHZhciBjZW50ZXJYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xuICAgICAgICB2YXIgY2VudGVyWSA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueTtcbiAgICAgICAgdmFyIHdpZHRoID0gbm9kZS53aWR0aCgpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcblxuICAgICAgICBjeVNoYXBlc1snZWxsaXBzZSddLmRyYXcoY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICAgIGRyYXcuZHJhd1BvcnRzVG9FbGxpcHNlU2hhcGUoY29udGV4dCwgbm9kZSk7XG4gICAgICB9LFxuICAgICAgaW50ZXJzZWN0TGluZTogZnVuY3Rpb24gKG5vZGUsIHgsIHksIHBvcnRJZCkge1xuICAgICAgICB2YXIgY2VudGVyWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgICAgICAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG4gICAgICAgIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IG5vZGUuaGVpZ2h0KCk7XG4gICAgICAgIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKSAvIDI7XG5cbiAgICAgICAgdmFyIHBvcnRJbnRlcnNlY3Rpb24gPSByZW5kZXJJbnRlcnNlY3QuaW50ZXJzZWN0TGluZVBvcnRzKG5vZGUsIHgsIHksIHBvcnRJZCk7XG4gICAgICAgIGlmIChwb3J0SW50ZXJzZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gcG9ydEludGVyc2VjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbnRlcnNlY3QgPSBjeU1hdGguaW50ZXJzZWN0TGluZUVsbGlwc2UoXG4gICAgICAgICAgICAgICAgeCwgeSxcbiAgICAgICAgICAgICAgICBjZW50ZXJYLFxuICAgICAgICAgICAgICAgIGNlbnRlclksXG4gICAgICAgICAgICAgICAgd2lkdGggLyAyICsgcGFkZGluZyxcbiAgICAgICAgICAgICAgICBoZWlnaHQgLyAyICsgcGFkZGluZyk7XG5cbiAgICAgICAgcmV0dXJuIGludGVyc2VjdDtcbiAgICAgIH0sXG4gICAgICBjaGVja1BvaW50OiBmdW5jdGlvbiAoeCwgeSwgbm9kZSkge1xuICAgICAgICB2YXIgY2VudGVyWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgICAgICAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG4gICAgICAgIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IG5vZGUuaGVpZ2h0KCk7XG4gICAgICAgIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKSAvIDI7XG5cbiAgICAgICAgeCAtPSBjZW50ZXJYO1xuICAgICAgICB5IC09IGNlbnRlclk7XG5cbiAgICAgICAgeCAvPSAod2lkdGggLyAyICsgcGFkZGluZyk7XG4gICAgICAgIHkgLz0gKGhlaWdodCAvIDIgKyBwYWRkaW5nKTtcblxuICAgICAgICByZXR1cm4gKE1hdGgucG93KHgsIDIpICsgTWF0aC5wb3coeSwgMikgPD0gMSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGN5U2hhcGVzWydjb21wbGV4J10gPSB7XG4gICAgICBwb2ludHM6IFtdLFxuICAgICAgbXVsdGltZXJQYWRkaW5nOiA1LFxuICAgICAgY29ybmVyTGVuZ3RoOiAxMixcbiAgICAgIGRyYXc6IGZ1bmN0aW9uIChjb250ZXh0LCBub2RlKSB7XG4gICAgICAgIHZhciB3aWR0aCA9IG5vZGUub3V0ZXJXaWR0aCgpIC0gcGFyc2VGbG9hdChub2RlLmNzcygnYm9yZGVyLXdpZHRoJykpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gbm9kZS5vdXRlckhlaWdodCgpLSBwYXJzZUZsb2F0KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSk7XG4gICAgICAgIHZhciBjZW50ZXJYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xuICAgICAgICB2YXIgY2VudGVyWSA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueTtcbiAgICAgICAgdmFyIHN0YXRlQW5kSW5mb3MgPSBub2RlLl9wcml2YXRlLmRhdGEuc3RhdGVzYW5kaW5mb3M7XG4gICAgICAgIHZhciBjb3JuZXJMZW5ndGggPSBjeVNoYXBlc1snY29tcGxleCddLmNvcm5lckxlbmd0aDtcbiAgICAgICAgdmFyIG11bHRpbWVyUGFkZGluZyA9IGN5U2hhcGVzWydjb21wbGV4J10ubXVsdGltZXJQYWRkaW5nO1xuICAgICAgICB2YXIgY2xvbmVNYXJrZXIgPSBub2RlLl9wcml2YXRlLmRhdGEuY2xvbmVtYXJrZXI7XG5cbiAgICAgICAgY3lTaGFwZXNbJ2NvbXBsZXgnXS5wb2ludHMgPSByZW5kZXJQb2ludC5nZW5lcmF0ZUNvbXBsZXhTaGFwZVBvaW50cyhjb3JuZXJMZW5ndGgsXG4gICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgLy9jaGVjayB3aGV0aGVyIHNiZ24gY2xhc3MgaW5jbHVkZXMgbXVsdGltZXIgc3Vic3RyaW5nIG9yIG5vdFxuICAgICAgICBpZiAoJCQuc2Jnbi5pc011bHRpbWVyKG5vZGUpKSB7XG4gICAgICAgICAgLy9hZGQgbXVsdGltZXIgc2hhcGVcbiAgICAgICAgICBkcmF3LmRyYXdQb2x5Z29uUGF0aChjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgY2VudGVyWCArIG11bHRpbWVyUGFkZGluZywgY2VudGVyWSArIG11bHRpbWVyUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGN5U2hhcGVzWydjb21wbGV4J10ucG9pbnRzKTtcbiAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcblxuICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgICAgICAkJC5zYmduLmNsb25lTWFya2VyLmNvbXBsZXgoY29udGV4dCxcbiAgICAgICAgICAgICAgICAgIGNlbnRlclggKyBtdWx0aW1lclBhZGRpbmcsIGNlbnRlclkgKyBtdWx0aW1lclBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCBjb3JuZXJMZW5ndGgsIGNsb25lTWFya2VyLCB0cnVlLFxuICAgICAgICAgICAgICAgICAgbm9kZS5jc3MoJ2JhY2tncm91bmQtb3BhY2l0eScpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXcuZHJhd1BvbHlnb25QYXRoKGNvbnRleHQsXG4gICAgICAgICAgICAgICAgY2VudGVyWCwgY2VudGVyWSxcbiAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCBjeVNoYXBlc1snY29tcGxleCddLnBvaW50cyk7XG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xuXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgICAgJCQuc2Jnbi5jbG9uZU1hcmtlci5jb21wbGV4KGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgY29ybmVyTGVuZ3RoLCBjbG9uZU1hcmtlciwgZmFsc2UsXG4gICAgICAgICAgICAgICAgbm9kZS5jc3MoJ2JhY2tncm91bmQtb3BhY2l0eScpKTtcblxuICAgICAgICB2YXIgb2xkU3R5bGUgPSBjb250ZXh0LmZpbGxTdHlsZTtcbiAgICAgICAgZm9yY2VPcGFjaXR5VG9PbmUobm9kZSwgY29udGV4dCk7XG4gICAgICAgIGRyYXcuZHJhd0NvbXBsZXhTdGF0ZUFuZEluZm8oY29udGV4dCwgbm9kZSwgc3RhdGVBbmRJbmZvcywgY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gb2xkU3R5bGU7XG4gICAgICB9LFxuICAgICAgaW50ZXJzZWN0TGluZTogZnVuY3Rpb24gKG5vZGUsIHgsIHksIHBvcnRJZCkge1xuICAgICAgICB2YXIgY2VudGVyWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgICAgICAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG4gICAgICAgIHZhciB3aWR0aCA9IG5vZGUub3V0ZXJXaWR0aCgpIC0gcGFyc2VGbG9hdChub2RlLmNzcygnYm9yZGVyLXdpZHRoJykpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gbm9kZS5vdXRlckhlaWdodCgpLSBwYXJzZUZsb2F0KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSk7XG4gICAgICAgIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKSAvIDI7XG4gICAgICAgIHZhciBtdWx0aW1lclBhZGRpbmcgPSBjeVNoYXBlc1snY29tcGxleCddLm11bHRpbWVyUGFkZGluZztcbiAgICAgICAgdmFyIGNvcm5lckxlbmd0aCA9IGN5U2hhcGVzWydjb21wbGV4J10uY29ybmVyTGVuZ3RoO1xuXG4gICAgICAgIHZhciBwb3J0SW50ZXJzZWN0aW9uID0gcmVuZGVySW50ZXJzZWN0LmludGVyc2VjdExpbmVQb3J0cyhub2RlLCB4LCB5LCBwb3J0SWQpO1xuICAgICAgICBpZiAocG9ydEludGVyc2VjdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIHBvcnRJbnRlcnNlY3Rpb247XG4gICAgICAgIH1cblxuICAgICAgICBjeVNoYXBlc1snY29tcGxleCddLnBvaW50cyA9IHJlbmRlclBvaW50LmdlbmVyYXRlQ29tcGxleFNoYXBlUG9pbnRzKGNvcm5lckxlbmd0aCxcbiAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICB2YXIgc3RhdGVBbmRJbmZvSW50ZXJzZWN0TGluZXMgPSByZW5kZXJJbnRlcnNlY3QuaW50ZXJzZWN0TGluZVN0YXRlQW5kSW5mb0JveGVzKFxuICAgICAgICAgICAgICAgIG5vZGUsIHgsIHkpO1xuXG4gICAgICAgIHZhciBub2RlSW50ZXJzZWN0TGluZXMgPSBjeU1hdGgucG9seWdvbkludGVyc2VjdExpbmUoXG4gICAgICAgICAgICAgICAgeCwgeSxcbiAgICAgICAgICAgICAgICBjeVNoYXBlc1snY29tcGxleCddLnBvaW50cyxcbiAgICAgICAgICAgICAgICBjZW50ZXJYLFxuICAgICAgICAgICAgICAgIGNlbnRlclksXG4gICAgICAgICAgICAgICAgd2lkdGggLyAyLCBoZWlnaHQgLyAyLFxuICAgICAgICAgICAgICAgIHBhZGRpbmcpO1xuXG4gICAgICAgIC8vY2hlY2sgd2hldGhlciBzYmduIGNsYXNzIGluY2x1ZGVzIG11bHRpbWVyIHN1YnN0cmluZyBvciBub3RcbiAgICAgICAgdmFyIG11bHRpbWVySW50ZXJzZWN0aW9uTGluZXMgPSBbXTtcbiAgICAgICAgaWYgKCQkLnNiZ24uaXNNdWx0aW1lcihub2RlKSkge1xuICAgICAgICAgIG11bHRpbWVySW50ZXJzZWN0aW9uTGluZXMgPSBjeU1hdGgucG9seWdvbkludGVyc2VjdExpbmUoXG4gICAgICAgICAgICAgICAgICB4LCB5LFxuICAgICAgICAgICAgICAgICAgY3lTaGFwZXNbJ2NvbXBsZXgnXS5wb2ludHMsXG4gICAgICAgICAgICAgICAgICBjZW50ZXJYICsgbXVsdGltZXJQYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgY2VudGVyWSArIG11bHRpbWVyUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMixcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGludGVyc2VjdGlvbnMgPSBzdGF0ZUFuZEluZm9JbnRlcnNlY3RMaW5lcy5jb25jYXQobm9kZUludGVyc2VjdExpbmVzLCBtdWx0aW1lckludGVyc2VjdGlvbkxpbmVzKTtcblxuICAgICAgICByZXR1cm4gcmVuZGVySW50ZXJzZWN0LmludGVyc2VjdENsb3Nlc3RQb2ludChbeCwgeV0sIGludGVyc2VjdGlvbnMpO1xuICAgICAgfSxcbiAgICAgIGNoZWNrUG9pbnQ6IGZ1bmN0aW9uICh4LCB5LCBub2RlLCB0aHJlc2hvbGQpIHtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuICAgICAgICB2YXIgd2lkdGggPSBub2RlLm91dGVyV2lkdGgoKSAtIHBhcnNlRmxvYXQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IG5vZGUub3V0ZXJIZWlnaHQoKS0gcGFyc2VGbG9hdChub2RlLmNzcygnYm9yZGVyLXdpZHRoJykpO1xuICAgICAgICB2YXIgcGFkZGluZyA9IHBhcnNlSW50KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSkgLyAyO1xuICAgICAgICB2YXIgbXVsdGltZXJQYWRkaW5nID0gY3lTaGFwZXNbJ2NvbXBsZXgnXS5tdWx0aW1lclBhZGRpbmc7XG4gICAgICAgIHZhciBjb3JuZXJMZW5ndGggPSBjeVNoYXBlc1snY29tcGxleCddLmNvcm5lckxlbmd0aDtcblxuICAgICAgICBjeVNoYXBlc1snY29tcGxleCddLnBvaW50cyA9IHJlbmRlclBvaW50LmdlbmVyYXRlQ29tcGxleFNoYXBlUG9pbnRzKGNvcm5lckxlbmd0aCxcbiAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICB2YXIgbm9kZUNoZWNrUG9pbnQgPSBjeU1hdGgucG9pbnRJbnNpZGVQb2x5Z29uKHgsIHksIGN5U2hhcGVzWydjb21wbGV4J10ucG9pbnRzLFxuICAgICAgICAgICAgICAgIGNlbnRlclgsIGNlbnRlclksIHdpZHRoLCBoZWlnaHQsIFswLCAtMV0sIHBhZGRpbmcpO1xuXG4gICAgICAgIHZhciBzdGF0ZUFuZEluZm9DaGVja1BvaW50ID0gcmVuZGVyUG9pbnQuY2hlY2tQb2ludFN0YXRlQW5kSW5mb0JveGVzKHgsIHksIG5vZGUsXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkKTtcblxuICAgICAgICAvL2NoZWNrIHdoZXRoZXIgc2JnbiBjbGFzcyBpbmNsdWRlcyBtdWx0aW1lciBzdWJzdHJpbmcgb3Igbm90XG4gICAgICAgIHZhciBtdWx0aW1lckNoZWNrUG9pbnQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCQkLnNiZ24uaXNNdWx0aW1lcihub2RlKSkge1xuICAgICAgICAgIG11bHRpbWVyQ2hlY2tQb2ludCA9IGN5TWF0aC5wb2ludEluc2lkZVBvbHlnb24oeCwgeSxcbiAgICAgICAgICAgICAgICAgIGN5U2hhcGVzWydjb21wbGV4J10ucG9pbnRzLFxuICAgICAgICAgICAgICAgICAgY2VudGVyWCArIG11bHRpbWVyUGFkZGluZywgY2VudGVyWSArIG11bHRpbWVyUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIFswLCAtMV0sIHBhZGRpbmcpO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZUNoZWNrUG9pbnQgfHwgc3RhdGVBbmRJbmZvQ2hlY2tQb2ludCB8fCBtdWx0aW1lckNoZWNrUG9pbnQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGN5U2hhcGVzWydudWNsZWljIGFjaWQgZmVhdHVyZSddID0ge1xuICAgICAgcG9pbnRzOiBjeU1hdGguZ2VuZXJhdGVVbml0TmdvblBvaW50c0ZpdFRvU3F1YXJlKDQsIDApLFxuICAgICAgbXVsdGltZXJQYWRkaW5nOiA1LFxuICAgICAgZHJhdzogZnVuY3Rpb24gKGNvbnRleHQsIG5vZGUpIHtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuICAgICAgICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICAgICAgICB2YXIgY29ybmVyUmFkaXVzID0gY3lNYXRoLmdldFJvdW5kUmVjdGFuZ2xlUmFkaXVzKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB2YXIgbXVsdGltZXJQYWRkaW5nID0gY3lTaGFwZXNbJ251Y2xlaWMgYWNpZCBmZWF0dXJlJ10ubXVsdGltZXJQYWRkaW5nO1xuICAgICAgICB2YXIgY2xvbmVNYXJrZXIgPSBub2RlLl9wcml2YXRlLmRhdGEuY2xvbmVtYXJrZXI7XG5cbiAgICAgICAgLy9jaGVjayB3aGV0aGVyIHNiZ24gY2xhc3MgaW5jbHVkZXMgbXVsdGltZXIgc3Vic3RyaW5nIG9yIG5vdFxuICAgICAgICBpZiAoJCQuc2Jnbi5pc011bHRpbWVyKG5vZGUpKSB7XG4gICAgICAgICAgLy9hZGQgbXVsdGltZXIgc2hhcGVcbiAgICAgICAgICBkcmF3LmRyYXdOdWNBY2lkRmVhdHVyZShjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgY2VudGVyWCArIG11bHRpbWVyUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIGNlbnRlclkgKyBtdWx0aW1lclBhZGRpbmcsIGNvcm5lclJhZGl1cyk7XG5cbiAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICAgICAgJCQuc2Jnbi5jbG9uZU1hcmtlci5udWNsZWljQWNpZEZlYXR1cmUoY29udGV4dCxcbiAgICAgICAgICAgICAgICAgIGNlbnRlclggKyBtdWx0aW1lclBhZGRpbmcsIGNlbnRlclkgKyBtdWx0aW1lclBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCBjbG9uZU1hcmtlciwgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIG5vZGUuY3NzKCdiYWNrZ3JvdW5kLW9wYWNpdHknKSk7XG4gICAgICAgIH1cblxuICAgICAgICBkcmF3LmRyYXdOdWNBY2lkRmVhdHVyZShjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjZW50ZXJYLFxuICAgICAgICAgICAgICAgIGNlbnRlclksIGNvcm5lclJhZGl1cyk7XG5cbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcblxuICAgICAgICAkJC5zYmduLmNsb25lTWFya2VyLm51Y2xlaWNBY2lkRmVhdHVyZShjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNsb25lTWFya2VyLCBmYWxzZSxcbiAgICAgICAgICAgICAgICBub2RlLmNzcygnYmFja2dyb3VuZC1vcGFjaXR5JykpO1xuXG4gICAgICAgIHZhciBvbGRTdHlsZSA9IGNvbnRleHQuZmlsbFN0eWxlO1xuICAgICAgICBmb3JjZU9wYWNpdHlUb09uZShub2RlLCBjb250ZXh0KTtcbiAgICAgICAgZHJhdy5kcmF3U3RhdGVBbmRJbmZvcyhub2RlLCBjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBvbGRTdHlsZTtcbiAgICAgIH0sXG4gICAgICBkcmF3UGF0aDogZnVuY3Rpb24gKGNvbnRleHQsIG5vZGUpIHtcblxuICAgICAgfSxcbiAgICAgIGludGVyc2VjdExpbmU6IGZ1bmN0aW9uIChub2RlLCB4LCB5LCBwb3J0SWQpIHtcbiAgICAgICAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gICAgICAgIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuICAgICAgICB2YXIgbXVsdGltZXJQYWRkaW5nID0gY3lTaGFwZXNbJ251Y2xlaWMgYWNpZCBmZWF0dXJlJ10ubXVsdGltZXJQYWRkaW5nO1xuICAgICAgICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICAgICAgICB2YXIgY29ybmVyUmFkaXVzID0gY3lNYXRoLmdldFJvdW5kUmVjdGFuZ2xlUmFkaXVzKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIHZhciBwb3J0SW50ZXJzZWN0aW9uID0gcmVuZGVySW50ZXJzZWN0LmludGVyc2VjdExpbmVQb3J0cyhub2RlLCB4LCB5LCBwb3J0SWQpO1xuICAgICAgICBpZiAocG9ydEludGVyc2VjdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIHBvcnRJbnRlcnNlY3Rpb247XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhdGVBbmRJbmZvSW50ZXJzZWN0TGluZXMgPSByZW5kZXJJbnRlcnNlY3QuaW50ZXJzZWN0TGluZVN0YXRlQW5kSW5mb0JveGVzKFxuICAgICAgICAgICAgICAgIG5vZGUsIHgsIHkpO1xuXG4gICAgICAgIHZhciBub2RlSW50ZXJzZWN0TGluZXMgPSByZW5kZXJJbnRlcnNlY3QuaW50ZXJzZWN0TnVjbGVpY0FjaWRMaW5lKG5vZGUsXG4gICAgICAgICAgICAgICAgeCwgeSwgY2VudGVyWCwgY2VudGVyWSwgY29ybmVyUmFkaXVzKTtcblxuICAgICAgICAvL2NoZWNrIHdoZXRoZXIgc2JnbiBjbGFzcyBpbmNsdWRlcyBtdWx0aW1lciBzdWJzdHJpbmcgb3Igbm90XG4gICAgICAgIHZhciBtdWx0aW1lckludGVyc2VjdGlvbkxpbmVzID0gW107XG4gICAgICAgIGlmICgkJC5zYmduLmlzTXVsdGltZXIobm9kZSkpIHtcbiAgICAgICAgICBtdWx0aW1lckludGVyc2VjdGlvbkxpbmVzID0gcmVuZGVySW50ZXJzZWN0LmludGVyc2VjdE51Y2xlaWNBY2lkTGluZShub2RlLFxuICAgICAgICAgICAgICAgICAgeCwgeSwgY2VudGVyWCArIG11bHRpbWVyUGFkZGluZywgY2VudGVyWSArIG11bHRpbWVyUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgIGNvcm5lclJhZGl1cyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW50ZXJzZWN0aW9ucyA9IHN0YXRlQW5kSW5mb0ludGVyc2VjdExpbmVzLmNvbmNhdChub2RlSW50ZXJzZWN0TGluZXMsXG4gICAgICAgICAgICAgICAgbXVsdGltZXJJbnRlcnNlY3Rpb25MaW5lcyk7XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlckludGVyc2VjdC5pbnRlcnNlY3RDbG9zZXN0UG9pbnQoW3gsIHldLCBpbnRlcnNlY3Rpb25zKTtcbiAgICAgIH0sXG4gICAgICBjaGVja1BvaW50OiBmdW5jdGlvbiAoeCwgeSwgbm9kZSwgdGhyZXNob2xkKSB7XG4gICAgICAgIHZhciBjZW50ZXJYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xuICAgICAgICB2YXIgY2VudGVyWSA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueTtcbiAgICAgICAgdmFyIG11bHRpbWVyUGFkZGluZyA9IGN5U2hhcGVzWydudWNsZWljIGFjaWQgZmVhdHVyZSddLm11bHRpbWVyUGFkZGluZztcbiAgICAgICAgdmFyIHdpZHRoID0gbm9kZS53aWR0aCgpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcbiAgICAgICAgdmFyIGNvcm5lclJhZGl1cyA9IGN5TWF0aC5nZXRSb3VuZFJlY3RhbmdsZVJhZGl1cyh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICB2YXIgbm9kZUNoZWNrUG9pbnQgPSByZW5kZXJQb2ludC5udWNsZWljQWNpZENoZWNrUG9pbnQoeCwgeSwgY2VudGVyWCwgY2VudGVyWSxcbiAgICAgICAgICAgICAgICBub2RlLCB0aHJlc2hvbGQsIHRoaXMucG9pbnRzLCBjb3JuZXJSYWRpdXMpO1xuICAgICAgICB2YXIgc3RhdGVBbmRJbmZvQ2hlY2tQb2ludCA9IHJlbmRlclBvaW50LmNoZWNrUG9pbnRTdGF0ZUFuZEluZm9Cb3hlcyh4LCB5LCBub2RlLFxuICAgICAgICAgICAgICAgIHRocmVzaG9sZCk7XG5cbiAgICAgICAgLy9jaGVjayB3aGV0aGVyIHNiZ24gY2xhc3MgaW5jbHVkZXMgbXVsdGltZXIgc3Vic3RyaW5nIG9yIG5vdFxuICAgICAgICB2YXIgbXVsdGltZXJDaGVja1BvaW50ID0gZmFsc2U7XG4gICAgICAgIGlmICgkJC5zYmduLmlzTXVsdGltZXIobm9kZSkpIHtcbiAgICAgICAgICBtdWx0aW1lckNoZWNrUG9pbnQgPSByZW5kZXJQb2ludC5udWNsZWljQWNpZENoZWNrUG9pbnQoeCwgeSxcbiAgICAgICAgICAgICAgICAgIGNlbnRlclggKyBtdWx0aW1lclBhZGRpbmcsIGNlbnRlclkgKyBtdWx0aW1lclBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICBub2RlLCB0aHJlc2hvbGQsIHRoaXMucG9pbnRzLCBjb3JuZXJSYWRpdXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vZGVDaGVja1BvaW50IHx8IHN0YXRlQW5kSW5mb0NoZWNrUG9pbnQgfHwgbXVsdGltZXJDaGVja1BvaW50O1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gc2ltcGxlQ2hlbWljYWxMZWZ0Q2xvbmUoY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSxcbiAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCBjbG9uZU1hcmtlciwgb3BhY2l0eSkge1xuICAgIGlmIChjbG9uZU1hcmtlciAhPSBudWxsKSB7XG4gICAgICB2YXIgb2xkR2xvYmFsQWxwaGEgPSBjb250ZXh0Lmdsb2JhbEFscGhhO1xuICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9wYWNpdHk7XG4gICAgICB2YXIgb2xkU3R5bGUgPSBjb250ZXh0LmZpbGxTdHlsZTtcbiAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY29uZmlnLmNvbG9ycy5jbG9uZTtcblxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIGNvbnRleHQudHJhbnNsYXRlKGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgY29udGV4dC5zY2FsZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuXG4gICAgICB2YXIgbWFya2VyQmVnaW5YID0gLTEgKiBNYXRoLnNpbihNYXRoLlBJIC8gMyk7XG4gICAgICB2YXIgbWFya2VyQmVnaW5ZID0gTWF0aC5jb3MoTWF0aC5QSSAvIDMpO1xuICAgICAgdmFyIG1hcmtlckVuZFggPSAwO1xuICAgICAgdmFyIG1hcmtlckVuZFkgPSBtYXJrZXJCZWdpblk7XG5cbiAgICAgIGNvbnRleHQubW92ZVRvKG1hcmtlckJlZ2luWCwgbWFya2VyQmVnaW5ZKTtcbiAgICAgIGNvbnRleHQubGluZVRvKG1hcmtlckVuZFgsIG1hcmtlckVuZFkpO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgMSwgMyAqIE1hdGguUEkgLyA2LCA1ICogTWF0aC5QSSAvIDYpO1xuXG4gICAgICBjb250ZXh0LnNjYWxlKDIgLyB3aWR0aCwgMiAvIGhlaWdodCk7XG4gICAgICBjb250ZXh0LnRyYW5zbGF0ZSgtY2VudGVyWCwgLWNlbnRlclkpO1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IG9sZFN0eWxlO1xuICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9sZEdsb2JhbEFscGhhO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNpbXBsZUNoZW1pY2FsUmlnaHRDbG9uZShjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNsb25lTWFya2VyLCBvcGFjaXR5KSB7XG4gICAgaWYgKGNsb25lTWFya2VyICE9IG51bGwpIHtcbiAgICAgIHZhciBvbGRHbG9iYWxBbHBoYSA9IGNvbnRleHQuZ2xvYmFsQWxwaGE7XG4gICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gb3BhY2l0eTtcbiAgICAgIHZhciBvbGRTdHlsZSA9IGNvbnRleHQuZmlsbFN0eWxlO1xuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBjb25maWcuY29sb3JzLmNsb25lO1xuXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgY29udGV4dC50cmFuc2xhdGUoY2VudGVyWCwgY2VudGVyWSk7XG4gICAgICBjb250ZXh0LnNjYWxlKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG5cbiAgICAgIHZhciBtYXJrZXJCZWdpblggPSAwO1xuICAgICAgdmFyIG1hcmtlckJlZ2luWSA9IE1hdGguY29zKE1hdGguUEkgLyAzKTtcbiAgICAgIHZhciBtYXJrZXJFbmRYID0gMSAqIE1hdGguc2luKE1hdGguUEkgLyAzKTtcbiAgICAgIHZhciBtYXJrZXJFbmRZID0gbWFya2VyQmVnaW5ZO1xuXG4gICAgICBjb250ZXh0Lm1vdmVUbyhtYXJrZXJCZWdpblgsIG1hcmtlckJlZ2luWSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhtYXJrZXJFbmRYLCBtYXJrZXJFbmRZKTtcbiAgICAgIGNvbnRleHQuYXJjKDAsIDAsIDEsIE1hdGguUEkgLyA2LCAzICogTWF0aC5QSSAvIDYpO1xuXG4gICAgICBjb250ZXh0LnNjYWxlKDIgLyB3aWR0aCwgMiAvIGhlaWdodCk7XG4gICAgICBjb250ZXh0LnRyYW5zbGF0ZSgtY2VudGVyWCwgLWNlbnRlclkpO1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IG9sZFN0eWxlO1xuICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9sZEdsb2JhbEFscGhhO1xuICAgIH1cbiAgfVxuXG4gICQkLnNiZ24uY2xvbmVNYXJrZXIgPSB7XG4gICAgdW5zcGVjaWZpZWRFbnRpdHk6IGZ1bmN0aW9uIChjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgY2xvbmVNYXJrZXIsIG9wYWNpdHkpIHtcbiAgICAgIGlmIChjbG9uZU1hcmtlciAhPSBudWxsKSB7XG4gICAgICAgIHZhciBvbGRHbG9iYWxBbHBoYSA9IGNvbnRleHQuZ2xvYmFsQWxwaGE7XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xuICAgICAgICB2YXIgb2xkU3R5bGUgPSBjb250ZXh0LmZpbGxTdHlsZTtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBjb25maWcuY29sb3JzLmNsb25lO1xuXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQudHJhbnNsYXRlKGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgICBjb250ZXh0LnNjYWxlKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG5cbiAgICAgICAgdmFyIG1hcmtlckJlZ2luWCA9IC0xICogTWF0aC5zaW4oTWF0aC5QSSAvIDMpO1xuICAgICAgICB2YXIgbWFya2VyQmVnaW5ZID0gTWF0aC5jb3MoTWF0aC5QSSAvIDMpO1xuICAgICAgICB2YXIgbWFya2VyRW5kWCA9IDEgKiBNYXRoLnNpbihNYXRoLlBJIC8gMyk7XG4gICAgICAgIHZhciBtYXJrZXJFbmRZID0gbWFya2VyQmVnaW5ZO1xuXG4gICAgICAgIGNvbnRleHQubW92ZVRvKG1hcmtlckJlZ2luWCwgbWFya2VyQmVnaW5ZKTtcbiAgICAgICAgY29udGV4dC5saW5lVG8obWFya2VyRW5kWCwgbWFya2VyRW5kWSk7XG4gICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIDEsIE1hdGguUEkgLyA2LCA1ICogTWF0aC5QSSAvIDYpO1xuXG4gICAgICAgIGNvbnRleHQuc2NhbGUoMiAvIHdpZHRoLCAyIC8gaGVpZ2h0KTtcbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUoLWNlbnRlclgsIC1jZW50ZXJZKTtcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBvbGRTdHlsZTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9sZEdsb2JhbEFscGhhO1xuICAgICAgfVxuICAgIH0sXG4gICAgc291cmNlQW5kU2luazogZnVuY3Rpb24gKGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCBjbG9uZU1hcmtlciwgb3BhY2l0eSkge1xuICAgICAgJCQuc2Jnbi5jbG9uZU1hcmtlci51bnNwZWNpZmllZEVudGl0eShjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCBjbG9uZU1hcmtlciwgb3BhY2l0eSk7XG4gICAgfSxcbiAgICBzaW1wbGVDaGVtaWNhbDogZnVuY3Rpb24gKGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCBjbG9uZU1hcmtlciwgaXNNdWx0aW1lciwgb3BhY2l0eSkge1xuICAgICAgaWYgKGNsb25lTWFya2VyICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGNvcm5lclJhZGl1cyA9IE1hdGgubWluKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG5cbiAgICAgICAgdmFyIGZpcnN0Q2lyY2xlQ2VudGVyWCA9IGNlbnRlclggLSB3aWR0aCAvIDIgKyBjb3JuZXJSYWRpdXM7XG4gICAgICAgIHZhciBmaXJzdENpcmNsZUNlbnRlclkgPSBjZW50ZXJZO1xuICAgICAgICB2YXIgc2Vjb25kQ2lyY2xlQ2VudGVyWCA9IGNlbnRlclggKyB3aWR0aCAvIDIgLSBjb3JuZXJSYWRpdXM7XG4gICAgICAgIHZhciBzZWNvbmRDaXJjbGVDZW50ZXJZID0gY2VudGVyWTtcblxuICAgICAgICBzaW1wbGVDaGVtaWNhbExlZnRDbG9uZShjb250ZXh0LCBmaXJzdENpcmNsZUNlbnRlclgsIGZpcnN0Q2lyY2xlQ2VudGVyWSxcbiAgICAgICAgICAgICAgICAyICogY29ybmVyUmFkaXVzLCAyICogY29ybmVyUmFkaXVzLCBjbG9uZU1hcmtlciwgb3BhY2l0eSk7XG5cbiAgICAgICAgc2ltcGxlQ2hlbWljYWxSaWdodENsb25lKGNvbnRleHQsIHNlY29uZENpcmNsZUNlbnRlclgsIHNlY29uZENpcmNsZUNlbnRlclksXG4gICAgICAgICAgICAgICAgMiAqIGNvcm5lclJhZGl1cywgMiAqIGNvcm5lclJhZGl1cywgY2xvbmVNYXJrZXIsIG9wYWNpdHkpO1xuXG4gICAgICAgIHZhciBvbGRTdHlsZSA9IGNvbnRleHQuZmlsbFN0eWxlO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGNvbmZpZy5jb2xvcnMuY2xvbmU7XG4gICAgICAgIHZhciBvbGRHbG9iYWxBbHBoYSA9IGNvbnRleHQuZ2xvYmFsQWxwaGE7XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xuXG4gICAgICAgIHZhciByZWNQb2ludHMgPSBjeU1hdGguZ2VuZXJhdGVVbml0TmdvblBvaW50c0ZpdFRvU3F1YXJlKDQsIDApO1xuICAgICAgICB2YXIgY2xvbmVYID0gY2VudGVyWDtcbiAgICAgICAgdmFyIGNsb25lWSA9IGNlbnRlclkgKyAzIC8gNCAqIGNvcm5lclJhZGl1cztcbiAgICAgICAgdmFyIGNsb25lV2lkdGggPSB3aWR0aCAtIDIgKiBjb3JuZXJSYWRpdXM7XG4gICAgICAgIHZhciBjbG9uZUhlaWdodCA9IGNvcm5lclJhZGl1cyAvIDI7XG5cbiAgICAgICAgZHJhdy5kcmF3UG9seWdvblBhdGgoY29udGV4dCwgY2xvbmVYLCBjbG9uZVksIGNsb25lV2lkdGgsIGNsb25lSGVpZ2h0LCByZWNQb2ludHMpO1xuICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBvbGRTdHlsZTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9sZEdsb2JhbEFscGhhO1xuICAgICAgfVxuICAgIH0sXG4gICAgcGVydHVyYmluZ0FnZW50OiBmdW5jdGlvbiAoY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSxcbiAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNsb25lTWFya2VyLCBvcGFjaXR5KSB7XG4gICAgICBpZiAoY2xvbmVNYXJrZXIgIT0gbnVsbCkge1xuICAgICAgICB2YXIgY2xvbmVXaWR0aCA9IHdpZHRoO1xuICAgICAgICB2YXIgY2xvbmVIZWlnaHQgPSBoZWlnaHQgLyA0O1xuICAgICAgICB2YXIgY2xvbmVYID0gY2VudGVyWDtcbiAgICAgICAgdmFyIGNsb25lWSA9IGNlbnRlclkgKyBoZWlnaHQgLyAyIC0gaGVpZ2h0IC8gODtcblxuICAgICAgICB2YXIgbWFya2VyUG9pbnRzID0gWy01IC8gNiwgLTEsIDUgLyA2LCAtMSwgMSwgMSwgLTEsIDFdO1xuXG4gICAgICAgIHZhciBvbGRTdHlsZSA9IGNvbnRleHQuZmlsbFN0eWxlO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGNvbmZpZy5jb2xvcnMuY2xvbmU7XG4gICAgICAgIHZhciBvbGRHbG9iYWxBbHBoYSA9IGNvbnRleHQuZ2xvYmFsQWxwaGE7XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xuXG4gICAgICAgIGRyYXcuZHJhd1BvbHlnb25QYXRoKGNvbnRleHQsXG4gICAgICAgICAgICAgICAgY2xvbmVYLCBjbG9uZVksXG4gICAgICAgICAgICAgICAgY2xvbmVXaWR0aCwgY2xvbmVIZWlnaHQsIG1hcmtlclBvaW50cyk7XG5cbiAgICAgICAgY29udGV4dC5maWxsKCk7XG5cbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBvbGRTdHlsZTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9sZEdsb2JhbEFscGhhO1xuICAgICAgfVxuICAgIH0sXG4gICAgbnVjbGVpY0FjaWRGZWF0dXJlOiBmdW5jdGlvbiAoY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSxcbiAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNsb25lTWFya2VyLCBpc011bHRpbWVyLCBvcGFjaXR5KSB7XG4gICAgICBpZiAoY2xvbmVNYXJrZXIgIT0gbnVsbCkge1xuICAgICAgICB2YXIgY2xvbmVXaWR0aCA9IHdpZHRoO1xuICAgICAgICB2YXIgY2xvbmVIZWlnaHQgPSBoZWlnaHQgLyA0O1xuICAgICAgICB2YXIgY2xvbmVYID0gY2VudGVyWDtcbiAgICAgICAgdmFyIGNsb25lWSA9IGNlbnRlclkgKyAzICogaGVpZ2h0IC8gODtcblxuICAgICAgICB2YXIgb2xkU3R5bGUgPSBjb250ZXh0LmZpbGxTdHlsZTtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBjb25maWcuY29sb3JzLmNsb25lO1xuICAgICAgICB2YXIgb2xkR2xvYmFsQWxwaGEgPSBjb250ZXh0Lmdsb2JhbEFscGhhO1xuICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gb3BhY2l0eTtcblxuICAgICAgICB2YXIgY29ybmVyUmFkaXVzID0gY3lNYXRoLmdldFJvdW5kUmVjdGFuZ2xlUmFkaXVzKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIGRyYXcuZHJhd051Y0FjaWRGZWF0dXJlKGNvbnRleHQsIGNsb25lV2lkdGgsIGNsb25lSGVpZ2h0LFxuICAgICAgICAgICAgICAgIGNsb25lWCwgY2xvbmVZLCBjb3JuZXJSYWRpdXMsIG9wYWNpdHkpO1xuXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gb2xkU3R5bGU7XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvbGRHbG9iYWxBbHBoYTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1hY3JvbW9sZWN1bGU6IGZ1bmN0aW9uIChjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgY2xvbmVNYXJrZXIsIGlzTXVsdGltZXIsIG9wYWNpdHkpIHtcbiAgICAgICQkLnNiZ24uY2xvbmVNYXJrZXIubnVjbGVpY0FjaWRGZWF0dXJlKGNvbnRleHQsIGNlbnRlclgsIGNlbnRlclksXG4gICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGNsb25lTWFya2VyLCBpc011bHRpbWVyLCBvcGFjaXR5KTtcbiAgICB9LFxuICAgIGNvbXBsZXg6IGZ1bmN0aW9uIChjb250ZXh0LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgd2lkdGgsIGhlaWdodCwgY29ybmVyTGVuZ3RoLCBjbG9uZU1hcmtlciwgaXNNdWx0aW1lciwgb3BhY2l0eSkge1xuICAgICAgaWYgKGNsb25lTWFya2VyICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGNwWCA9IGNvcm5lckxlbmd0aCAvIHdpZHRoO1xuICAgICAgICB2YXIgY3BZID0gY29ybmVyTGVuZ3RoIC8gaGVpZ2h0O1xuICAgICAgICB2YXIgY2xvbmVXaWR0aCA9IHdpZHRoO1xuICAgICAgICB2YXIgY2xvbmVIZWlnaHQgPSBoZWlnaHQgKiBjcFkgLyAyO1xuICAgICAgICB2YXIgY2xvbmVYID0gY2VudGVyWDtcbiAgICAgICAgdmFyIGNsb25lWSA9IGNlbnRlclkgKyBoZWlnaHQgLyAyIC0gY2xvbmVIZWlnaHQgLyAyO1xuXG4gICAgICAgIHZhciBtYXJrZXJQb2ludHMgPSBbLTEsIC0xLCAxLCAtMSwgMSAtIGNwWCwgMSwgLTEgKyBjcFgsIDFdO1xuXG4gICAgICAgIHZhciBvbGRTdHlsZSA9IGNvbnRleHQuZmlsbFN0eWxlO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGNvbmZpZy5jb2xvcnMuY2xvbmU7XG4gICAgICAgIHZhciBvbGRHbG9iYWxBbHBoYSA9IGNvbnRleHQuZ2xvYmFsQWxwaGE7XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xuXG4gICAgICAgIGRyYXcuZHJhd1BvbHlnb25QYXRoKGNvbnRleHQsXG4gICAgICAgICAgICAgICAgY2xvbmVYLCBjbG9uZVksXG4gICAgICAgICAgICAgICAgY2xvbmVXaWR0aCwgY2xvbmVIZWlnaHQsIG1hcmtlclBvaW50cyk7XG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xuXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gb2xkU3R5bGU7XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvbGRHbG9iYWxBbHBoYTtcblxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuXG4gIC8vIG1vZGlmaWVkIGN5dG9zY2FwZS5qcyBuZWVkcyB0aGVzZSBvciBpdCBicmVha3NcbiAgJCQuc2Jnbi5hZGRQb3J0UmVwbGFjZW1lbnRJZkFueSA9IGZ1bmN0aW9uIChub2RlLCBlZGdlUG9ydCkge1xuICAgIHZhciBwb3NYID0gbm9kZS5wb3NpdGlvbigpLng7XG4gICAgdmFyIHBvc1kgPSBub2RlLnBvc2l0aW9uKCkueTtcbiAgICBpZiAodHlwZW9mIG5vZGUuX3ByaXZhdGUuZGF0YS5wb3J0cyAhPSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLl9wcml2YXRlLmRhdGEucG9ydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBvcnQgPSBub2RlLl9wcml2YXRlLmRhdGEucG9ydHNbaV07XG4gICAgICAgIGlmIChwb3J0LmlkID09IGVkZ2VQb3J0KSB7XG4gICAgICAgICAgcG9zWCA9IHBvc1ggKyBwb3J0LnggKiBub2RlLndpZHRoKCkgLyAxMDA7XG4gICAgICAgICAgcG9zWSA9IHBvc1kgKyBwb3J0LnkgKiBub2RlLmhlaWdodCgpIC8gMTAwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7J3gnOiBwb3NYLCAneSc6IHBvc1l9O1xuICB9O1xuXG4gIC8vIENoZWNrcyBpZiBlYWNoIG9mIHRoZSBkcmF3LCBpbnRlcnNlY3QsIGFuZCBjaGVjayBwb2ludCBmdW5jdGlvbnMgYXJlXG4gIC8vIG92ZXJyaWRlbiBmb3IgYSBnaXZlbiBub2RlLiAgaS5lIGl0IGlzIGEgc2JnbiBub2RlIHRoYXQgb3ZlcnJpZGVzIGVhY2ggb2ZcbiAgLy8gdGhlIGJhc2Ugbm9kZXMgbWV0aG9kc1xuICAvLyBtb2RpZmllZCBjeXRvc2NhcGUuanMgbmVlZHMgdGhlc2Ugb3IgaXQgYnJlYWtzXG4gICQkLnNiZ24uaXNOb2RlU2hhcGVUb3RhbGx5T3ZlcnJpZGVuID0gZnVuY3Rpb24gKHJlbmRlciwgbm9kZSkge1xuICAgIHJldHVybiAhIShjb25maWcudG90YWxseU92ZXJyaWRlbk5vZGVTaGFwZXNbcmVuZGVyLmdldE5vZGVTaGFwZShub2RlKV0pO1xuICB9O1xuXG4gIC8vIG1vZGlmaWVkIGN5dG9zY2FwZS5qcyBuZWVkcyB0aGlzIG9yIGl0IGJyZWFrc1xuICAkJC5zYmduLmlzTXVsdGltZXIgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIHZhciBzYmduQ2xhc3MgPSBub2RlLl9wcml2YXRlLmRhdGEuY2xhc3M7XG4gICAgcmV0dXJuIHNiZ25DbGFzcyAmJiBzYmduQ2xhc3MuaW5kZXhPZignbXVsdGltZXInKSAhPSAtMTtcbiAgfTtcblxuICB2YXIgZm9yY2VPcGFjaXR5VG9PbmUgPSBmdW5jdGlvbiAobm9kZSwgY29udGV4dCkge1xuICAgIHZhciBwYXJlbnRPcGFjaXR5ID0gbm9kZS5lZmZlY3RpdmVPcGFjaXR5KCk7XG4gICAgaWYgKHBhcmVudE9wYWNpdHkgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKCdcbiAgICAgICAgICAgICsgbm9kZS5fcHJpdmF0ZS5zdHlsZVsnYmFja2dyb3VuZC1jb2xvciddLnZhbHVlWzBdICsgJywnXG4gICAgICAgICAgICArIG5vZGUuX3ByaXZhdGUuc3R5bGVbJ2JhY2tncm91bmQtY29sb3InXS52YWx1ZVsxXSArICcsJ1xuICAgICAgICAgICAgKyBub2RlLl9wcml2YXRlLnN0eWxlWydiYWNrZ3JvdW5kLWNvbG9yJ10udmFsdWVbMl0gKyAnLCdcbiAgICAgICAgICAgICsgKDEgKiBub2RlLmNzcygnb3BhY2l0eScpICogcGFyZW50T3BhY2l0eSkgKyAnKSc7XG4gIH07XG59O1xuIiwidmFyIGNvbmZpZyA9IHtcbiAgc2JnblNoYXBlczoge1xuICAgICdudWNsZWljIGFjaWQgZmVhdHVyZSc6IHRydWUsXG4gICAgJ2NvbXBsZXgnOiB0cnVlLFxuICAgICdkaXNzb2NpYXRpb24nOiB0cnVlLFxuICAgICdtYWNyb21vbGVjdWxlJzogdHJ1ZSxcbiAgICAnc2ltcGxlIGNoZW1pY2FsJzogdHJ1ZSxcbiAgICAndW5zcGVjaWZpZWQgZW50aXR5JzogdHJ1ZSxcbiAgICAnbmVjZXNzYXJ5IHN0aW11bGF0aW9uJzogdHJ1ZSxcbiAgICAncHJvY2Vzcyc6IHRydWUsXG4gICAgJ3VuY2VydGFpbiBwcm9jZXNzJzogdHJ1ZSxcbiAgICAnb21pdHRlZCBwcm9jZXNzJzogdHJ1ZSxcbiAgICAnYXNzb2NpYXRpb24nOiB0cnVlXG4gIH0sXG4gIHRvdGFsbHlPdmVycmlkZW5Ob2RlU2hhcGVzOiB7XG4gICAgJ21hY3JvbW9sZWN1bGUnOiB0cnVlLFxuICAgICdudWNsZWljIGFjaWQgZmVhdHVyZSc6IHRydWUsXG4gICAgJ3NpbXBsZSBjaGVtaWNhbCc6IHRydWUsXG4gICAgJ2NvbXBsZXgnOiB0cnVlLFxuICAgICd1bnNwZWNpZmllZCBlbnRpdHknOiB0cnVlLFxuICAgICdwcm9jZXNzJzogdHJ1ZSxcbiAgICAndW5jZXJ0YWluIHByb2Nlc3MnOiB0cnVlLFxuICAgICdvbWl0dGVkIHByb2Nlc3MnOiB0cnVlLFxuICAgICdkaXNzb2NpYXRpb24nOiB0cnVlLFxuICAgICdhc3NvY2lhdGlvbic6IHRydWVcbiAgfSxcbiAgY29sb3JzOiAge1xuICAgIGNsb25lOiAnI2E5YTlhOScsXG4gICAgYXNzb2NpYXRpb246ICcjNkI2QjZCJyxcbiAgICBwb3J0OiAnIzZCNkI2QidcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb25maWc7XG4iLCJ2YXIgY3l0b3NjYXBlID0gcmVxdWlyZSgnY3l0b3NjYXBlLWZvci1zYmdudml6Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY3l0b3NjYXBlLm1hdGg7IiwidmFyIGN5dG9zY2FwZSA9IHJlcXVpcmUoJ2N5dG9zY2FwZS1mb3Itc2JnbnZpeicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGN5dG9zY2FwZS5iYXNlTm9kZVNoYXBlczsiLCJ2YXIgY29sb3JzID0gcmVxdWlyZSgnLi9jb25maWcnKS5jb2xvcnM7XG52YXIgY3lNYXRoID0gcmVxdWlyZSgnLi9jeU1hdGgnKTtcbnZhciBjeVNoYXBlcyA9IHJlcXVpcmUoJy4vY3lTaGFwZXMnKTtcblxudmFyIGRyYXdSb3VuZFJlY3RhbmdsZVBhdGggPSBmdW5jdGlvbihcbiAgY29udGV4dCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzICl7XG5cbiAgdmFyIGhhbGZXaWR0aCA9IHdpZHRoIC8gMjtcbiAgdmFyIGhhbGZIZWlnaHQgPSBoZWlnaHQgLyAyO1xuICB2YXIgY29ybmVyUmFkaXVzID0gcmFkaXVzIHx8IE1hdGgubWluKHdpZHRoIC8gNCwgaGVpZ2h0IC8gNCwgOCk7XG5cbiAgaWYoIGNvbnRleHQuYmVnaW5QYXRoICl7IGNvbnRleHQuYmVnaW5QYXRoKCk7IH1cblxuICAvLyBTdGFydCBhdCB0b3AgbWlkZGxlXG4gIGNvbnRleHQubW92ZVRvKCB4LCB5IC0gaGFsZkhlaWdodCApO1xuICAvLyBBcmMgZnJvbSBtaWRkbGUgdG9wIHRvIHJpZ2h0IHNpZGVcbiAgY29udGV4dC5hcmNUbyggeCArIGhhbGZXaWR0aCwgeSAtIGhhbGZIZWlnaHQsIHggKyBoYWxmV2lkdGgsIHksIGNvcm5lclJhZGl1cyApO1xuICAvLyBBcmMgZnJvbSByaWdodCBzaWRlIHRvIGJvdHRvbVxuICBjb250ZXh0LmFyY1RvKCB4ICsgaGFsZldpZHRoLCB5ICsgaGFsZkhlaWdodCwgeCwgeSArIGhhbGZIZWlnaHQsIGNvcm5lclJhZGl1cyApO1xuICAvLyBBcmMgZnJvbSBib3R0b20gdG8gbGVmdCBzaWRlXG4gIGNvbnRleHQuYXJjVG8oIHggLSBoYWxmV2lkdGgsIHkgKyBoYWxmSGVpZ2h0LCB4IC0gaGFsZldpZHRoLCB5LCBjb3JuZXJSYWRpdXMgKTtcbiAgLy8gQXJjIGZyb20gbGVmdCBzaWRlIHRvIHRvcEJvcmRlclxuICBjb250ZXh0LmFyY1RvKCB4IC0gaGFsZldpZHRoLCB5IC0gaGFsZkhlaWdodCwgeCwgeSAtIGhhbGZIZWlnaHQsIGNvcm5lclJhZGl1cyApO1xuICAvLyBKb2luIGxpbmVcbiAgY29udGV4dC5saW5lVG8oIHgsIHkgLSBoYWxmSGVpZ2h0ICk7XG5cblxuICBjb250ZXh0LmNsb3NlUGF0aCgpO1xufTtcblxuLy8gVGFrZW4gZnJvbSBjeXRvc2NhcGUuanNcbnZhciBkcmF3UG9seWdvblBhdGggPSBmdW5jdGlvbihcbiAgY29udGV4dCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgcG9pbnRzICl7XG5cbiAgdmFyIGhhbGZXID0gd2lkdGggLyAyO1xuICB2YXIgaGFsZkggPSBoZWlnaHQgLyAyO1xuXG4gIGlmKCBjb250ZXh0LmJlZ2luUGF0aCApeyBjb250ZXh0LmJlZ2luUGF0aCgpOyB9XG5cbiAgY29udGV4dC5tb3ZlVG8oIHggKyBoYWxmVyAqIHBvaW50c1swXSwgeSArIGhhbGZIICogcG9pbnRzWzFdICk7XG5cbiAgZm9yKCB2YXIgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoIC8gMjsgaSsrICl7XG4gICAgY29udGV4dC5saW5lVG8oIHggKyBoYWxmVyAqIHBvaW50c1sgaSAqIDJdLCB5ICsgaGFsZkggKiBwb2ludHNbIGkgKiAyICsgMV0gKTtcbiAgfVxuXG4gIGNvbnRleHQuY2xvc2VQYXRoKCk7XG59O1xuXG52YXIgZHJhd0VsbGlwc2UgPSBmdW5jdGlvbihjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGN5U2hhcGVzWydlbGxpcHNlJ10uZHJhdyhjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbn07XG5cblxudmFyIGRyYXdQb3J0c1RvUG9seWdvblNoYXBlID0gZnVuY3Rpb24gKGNvbnRleHQsIG5vZGUsIHBvaW50cykge1xuICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICB2YXIgY2VudGVyWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG4gIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKSAvIDI7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLl9wcml2YXRlLmRhdGEucG9ydHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcG9ydCA9IG5vZGUuX3ByaXZhdGUuZGF0YS5wb3J0c1tpXTtcbiAgICB2YXIgcG9ydFggPSBwb3J0LnggKiB3aWR0aCAvIDEwMCArIGNlbnRlclg7XG4gICAgdmFyIHBvcnRZID0gcG9ydC55ICogaGVpZ2h0IC8gMTAwICsgY2VudGVyWTtcbiAgICB2YXIgY2xvc2VzdFBvaW50ID0gY3lNYXRoLnBvbHlnb25JbnRlcnNlY3RMaW5lKHBvcnRYLCBwb3J0WSxcbiAgICAgICAgICAgIHBvaW50cywgY2VudGVyWCwgY2VudGVyWSwgd2lkdGggLyAyLCBoZWlnaHQgLyAyLCBwYWRkaW5nKTtcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQubW92ZVRvKHBvcnRYLCBwb3J0WSk7XG4gICAgY29udGV4dC5saW5lVG8oY2xvc2VzdFBvaW50WzBdLCBjbG9zZXN0UG9pbnRbMV0pO1xuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuXG4gICAgLy9hZGQgYSBsaXR0bGUgYmxhY2sgY2lyY2xlIHRvIHBvcnRzXG4gICAgdmFyIG9sZFN0eWxlID0gY29udGV4dC5maWxsU3R5bGU7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSBjb2xvcnMucG9ydDtcbiAgICBkcmF3RWxsaXBzZShjb250ZXh0LCBwb3J0WCwgcG9ydFksIDIsIDIpO1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gb2xkU3R5bGU7XG4gICAgY29udGV4dC5zdHJva2UoKTtcbiAgfVxufTtcblxudmFyIGRyYXdTdGF0ZVRleHQgPSBmdW5jdGlvbiAoY29udGV4dCwgdGV4dFByb3ApIHtcbiAgdmFyIHN0YXRlVmFsdWUgPSB0ZXh0UHJvcC5zdGF0ZS52YWx1ZSB8fCAnJztcbiAgdmFyIHN0YXRlVmFyaWFibGUgPSB0ZXh0UHJvcC5zdGF0ZS52YXJpYWJsZSB8fCAnJztcblxuICB2YXIgc3RhdGVMYWJlbCA9IHN0YXRlVmFsdWUgKyAoc3RhdGVWYXJpYWJsZVxuICAgICAgICAgID8gJ0AnICsgc3RhdGVWYXJpYWJsZVxuICAgICAgICAgIDogJycpO1xuXG4gIHZhciBmb250U2l6ZSA9IHBhcnNlSW50KHRleHRQcm9wLmhlaWdodCAvIDEuNSk7XG5cbiAgdGV4dFByb3AuZm9udCA9IGZvbnRTaXplICsgJ3B4IEFyaWFsJztcbiAgdGV4dFByb3AubGFiZWwgPSBzdGF0ZUxhYmVsO1xuICB0ZXh0UHJvcC5jb2xvciA9ICcjMGYwZjBmJztcbiAgZHJhd1RleHQoY29udGV4dCwgdGV4dFByb3ApO1xufTtcblxudmFyIGRyYXdJbmZvVGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0LCB0ZXh0UHJvcCkge1xuICB2YXIgZm9udFNpemUgPSBwYXJzZUludCh0ZXh0UHJvcC5oZWlnaHQgLyAxLjUpO1xuICB0ZXh0UHJvcC5mb250ID0gZm9udFNpemUgKyAncHggQXJpYWwnO1xuICB0ZXh0UHJvcC5jb2xvciA9ICcjMGYwZjBmJztcbiAgZHJhd1RleHQoY29udGV4dCwgdGV4dFByb3ApO1xufTtcblxudmFyIGRyYXdUZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQsIHRleHRQcm9wKSB7XG4gIHZhciBvbGRGb250ID0gY29udGV4dC5mb250O1xuICBjb250ZXh0LmZvbnQgPSB0ZXh0UHJvcC5mb250O1xuICBjb250ZXh0LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICBjb250ZXh0LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICB2YXIgb2xkU3R5bGUgPSBjb250ZXh0LmZpbGxTdHlsZTtcbiAgY29udGV4dC5maWxsU3R5bGUgPSB0ZXh0UHJvcC5jb2xvcjtcbiAgdmFyIG9sZE9wYWNpdHkgPSBjb250ZXh0Lmdsb2JhbEFscGhhO1xuICBjb250ZXh0Lmdsb2JhbEFscGhhID0gdGV4dFByb3Aub3BhY2l0eTtcbiAgdmFyIHRleHQ7XG5cbiAgdGV4dFByb3AubGFiZWwgPSB0ZXh0UHJvcC5sYWJlbCB8fCAnJztcblxuICB0ZXh0ID0gdGV4dFByb3AubGFiZWw7XG5cbiAgY29udGV4dC5maWxsVGV4dCh0ZXh0LCB0ZXh0UHJvcC5jZW50ZXJYLCB0ZXh0UHJvcC5jZW50ZXJZKTtcbiAgY29udGV4dC5maWxsU3R5bGUgPSBvbGRTdHlsZTtcbiAgY29udGV4dC5mb250ID0gb2xkRm9udDtcbiAgY29udGV4dC5nbG9iYWxBbHBoYSA9IG9sZE9wYWNpdHk7XG59O1xuXG52YXIgZHJhd1N0YXRlQW5kSW5mb3MgPSBmdW5jdGlvbiAobm9kZSwgY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSkge1xuICB2YXIgdW5pdE9mSW5mb1JhZGl1cyA9IDQ7XG4gIHZhciBzdGF0ZVZhclJhZGl1cyA9IDE1O1xuXG4gIHZhciBzdGF0ZUFuZEluZm9zID0gbm9kZS5fcHJpdmF0ZS5kYXRhLnN0YXRlc2FuZGluZm9zO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGVBbmRJbmZvcy5sZW5ndGggJiYgaSA8IDQ7IGkrKykge1xuICAgIHZhciBzdGF0ZSA9IHN0YXRlQW5kSW5mb3NbaV07XG4gICAgdmFyIHN0YXRlV2lkdGggPSBzdGF0ZS5iYm94Lnc7XG4gICAgdmFyIHN0YXRlSGVpZ2h0ID0gc3RhdGUuYmJveC5oO1xuICAgIHZhciBzdGF0ZUNlbnRlclggPSBzdGF0ZS5iYm94LnggKiBub2RlLndpZHRoKCkgLyAxMDAgKyBjZW50ZXJYO1xuICAgIHZhciBzdGF0ZUNlbnRlclkgPSBzdGF0ZS5iYm94LnkgKiBub2RlLmhlaWdodCgpIC8gMTAwICsgY2VudGVyWTtcblxuICAgIHZhciB0ZXh0UHJvcCA9IHsnY2VudGVyWCc6IHN0YXRlQ2VudGVyWCwgJ2NlbnRlclknOiBzdGF0ZUNlbnRlclksXG4gICAgICAnb3BhY2l0eSc6IG5vZGUuY3NzKCd0ZXh0LW9wYWNpdHknKSAqIG5vZGUuY3NzKCdvcGFjaXR5JyksXG4gICAgICAnd2lkdGgnOiBzdGF0ZVdpZHRoLCAnaGVpZ2h0Jzogc3RhdGVIZWlnaHR9O1xuXG4gICAgaWYgKHN0YXRlLmNsYXp6ID09ICdzdGF0ZSB2YXJpYWJsZScpIHsvL2RyYXcgZWxsaXBzZVxuICAgICAgLy92YXIgc3RhdGVMYWJlbCA9IHN0YXRlLnN0YXRlLnZhbHVlO1xuICAgICAgZHJhd1JvdW5kUmVjdGFuZ2xlUGF0aChjb250ZXh0LCBzdGF0ZUNlbnRlclgsIHN0YXRlQ2VudGVyWSxcbiAgICAgICAgICAgICAgc3RhdGVXaWR0aCwgc3RhdGVIZWlnaHQsIE1hdGgubWluKHN0YXRlV2lkdGggLyAyLCBzdGF0ZUhlaWdodCAvIDIsIHN0YXRlVmFyUmFkaXVzKSk7XG5cbiAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgdGV4dFByb3Auc3RhdGUgPSBzdGF0ZS5zdGF0ZTtcbiAgICAgIGRyYXdTdGF0ZVRleHQoY29udGV4dCwgdGV4dFByb3ApO1xuXG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgfSBlbHNlIGlmIChzdGF0ZS5jbGF6eiA9PSAndW5pdCBvZiBpbmZvcm1hdGlvbicpIHsvL2RyYXcgcmVjdGFuZ2xlXG4gICAgICBkcmF3Um91bmRSZWN0YW5nbGVQYXRoKGNvbnRleHQsXG4gICAgICAgICAgICAgIHN0YXRlQ2VudGVyWCwgc3RhdGVDZW50ZXJZLFxuICAgICAgICAgICAgICBzdGF0ZVdpZHRoLCBzdGF0ZUhlaWdodCxcbiAgICAgICAgICAgICAgTWF0aC5taW4oc3RhdGVXaWR0aCAvIDIsIHN0YXRlSGVpZ2h0IC8gMiwgdW5pdE9mSW5mb1JhZGl1cykpO1xuXG4gICAgICBjb250ZXh0LmZpbGwoKTtcblxuICAgICAgdGV4dFByb3AubGFiZWwgPSBzdGF0ZS5sYWJlbC50ZXh0IHx8ICcnO1xuICAgICAgZHJhd0luZm9UZXh0KGNvbnRleHQsIHRleHRQcm9wKTtcblxuICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICB9XG4gIH1cbiAgZHJhd0VsbGlwc2UoY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSwgMCwgMCk7XG59O1xuXG52YXIgZHJhd0NvbXBsZXhTdGF0ZUFuZEluZm8gPSBmdW5jdGlvbiAoY29udGV4dCwgbm9kZSwgc3RhdGVBbmRJbmZvcyxcbiAgICAgICAgY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsIGhlaWdodCkge1xuXG4gIHZhciB1bml0T2ZJbmZvUmFkaXVzID0gNDtcbiAgdmFyIHN0YXRlVmFyUmFkaXVzID0gMTU7XG5cbiAgZHJhd0VsbGlwc2UoY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSwgMCwgMCk7XG5cbiAgdmFyIHVwV2lkdGggPSAwLCBkb3duV2lkdGggPSAwO1xuICB2YXIgYm94UGFkZGluZyA9IDEwO1xuICB2YXIgYmVnaW5Qb3NZID0gaGVpZ2h0IC8gMiwgYmVnaW5Qb3NYID0gd2lkdGggLyAyO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGVBbmRJbmZvcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzdGF0ZSA9IHN0YXRlQW5kSW5mb3NbaV07XG4gICAgdmFyIHN0YXRlV2lkdGggPSBzdGF0ZS5iYm94Lnc7XG4gICAgdmFyIHN0YXRlSGVpZ2h0ID0gc3RhdGUuYmJveC5oO1xuICAgIHZhciByZWxhdGl2ZVlQb3MgPSBzdGF0ZS5iYm94Lnk7XG4gICAgdmFyIHN0YXRlQ2VudGVyWCwgc3RhdGVDZW50ZXJZO1xuXG4gICAgaWYgKHJlbGF0aXZlWVBvcyA8IDApIHtcbiAgICAgIGlmICh1cFdpZHRoICsgc3RhdGVXaWR0aCA8IHdpZHRoKSB7XG4gICAgICAgIHN0YXRlQ2VudGVyWCA9IGNlbnRlclggLSBiZWdpblBvc1ggKyBib3hQYWRkaW5nICsgdXBXaWR0aCArIHN0YXRlV2lkdGggLyAyO1xuICAgICAgICBzdGF0ZUNlbnRlclkgPSBjZW50ZXJZIC0gYmVnaW5Qb3NZO1xuXG4gICAgICAgIHZhciB0ZXh0UHJvcCA9IHsnY2VudGVyWCc6IHN0YXRlQ2VudGVyWCwgJ2NlbnRlclknOiBzdGF0ZUNlbnRlclksXG4gICAgICAgICAgJ29wYWNpdHknOiBub2RlLmNzcygndGV4dC1vcGFjaXR5JykgKiBub2RlLmNzcygnb3BhY2l0eScpLFxuICAgICAgICAgICd3aWR0aCc6IHN0YXRlV2lkdGgsICdoZWlnaHQnOiBzdGF0ZUhlaWdodH07XG5cbiAgICAgICAgaWYgKHN0YXRlLmNsYXp6ID09ICdzdGF0ZSB2YXJpYWJsZScpIHsvL2RyYXcgZWxsaXBzZVxuICAgICAgICAgIGRyYXdSb3VuZFJlY3RhbmdsZVBhdGgoY29udGV4dCxcbiAgICAgICAgICAgICAgICAgIHN0YXRlQ2VudGVyWCwgc3RhdGVDZW50ZXJZLFxuICAgICAgICAgICAgICAgICAgc3RhdGVXaWR0aCwgc3RhdGVIZWlnaHQsIE1hdGgubWluKHN0YXRlV2lkdGggLyAyLCBzdGF0ZUhlaWdodCAvIDIsIHN0YXRlVmFyUmFkaXVzKSk7XG4gICAgICAgICAgY29udGV4dC5maWxsKCk7XG5cbiAgICAgICAgICB0ZXh0UHJvcC5zdGF0ZSA9IHN0YXRlLnN0YXRlO1xuICAgICAgICAgIGRyYXdTdGF0ZVRleHQoY29udGV4dCwgdGV4dFByb3ApO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmNsYXp6ID09ICd1bml0IG9mIGluZm9ybWF0aW9uJykgey8vZHJhdyByZWN0YW5nbGVcbiAgICAgICAgICBkcmF3Um91bmRSZWN0YW5nbGVQYXRoKGNvbnRleHQsXG4gICAgICAgICAgICAgICAgICBzdGF0ZUNlbnRlclgsIHN0YXRlQ2VudGVyWSxcbiAgICAgICAgICAgICAgICAgIHN0YXRlV2lkdGgsIHN0YXRlSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgTWF0aC5taW4oc3RhdGVXaWR0aCAvIDIsIHN0YXRlSGVpZ2h0IC8gMiwgdW5pdE9mSW5mb1JhZGl1cykpO1xuICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuXG4gICAgICAgICAgdGV4dFByb3AubGFiZWwgPSBzdGF0ZS5sYWJlbC50ZXh0O1xuICAgICAgICAgIGRyYXdJbmZvVGV4dChjb250ZXh0LCB0ZXh0UHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHVwV2lkdGggPSB1cFdpZHRoICsgd2lkdGggKyBib3hQYWRkaW5nO1xuICAgIH0gZWxzZSBpZiAocmVsYXRpdmVZUG9zID4gMCkge1xuICAgICAgaWYgKGRvd25XaWR0aCArIHN0YXRlV2lkdGggPCB3aWR0aCkge1xuICAgICAgICBzdGF0ZUNlbnRlclggPSBjZW50ZXJYIC0gYmVnaW5Qb3NYICsgYm94UGFkZGluZyArIGRvd25XaWR0aCArIHN0YXRlV2lkdGggLyAyO1xuICAgICAgICBzdGF0ZUNlbnRlclkgPSBjZW50ZXJZICsgYmVnaW5Qb3NZO1xuXG4gICAgICAgIHZhciB0ZXh0UHJvcCA9IHsnY2VudGVyWCc6IHN0YXRlQ2VudGVyWCwgJ2NlbnRlclknOiBzdGF0ZUNlbnRlclksXG4gICAgICAgICAgJ29wYWNpdHknOiBub2RlLmNzcygndGV4dC1vcGFjaXR5JykgKiBub2RlLmNzcygnb3BhY2l0eScpLFxuICAgICAgICAgICd3aWR0aCc6IHN0YXRlV2lkdGgsICdoZWlnaHQnOiBzdGF0ZUhlaWdodH07XG5cbiAgICAgICAgaWYgKHN0YXRlLmNsYXp6ID09ICdzdGF0ZSB2YXJpYWJsZScpIHsvL2RyYXcgZWxsaXBzZVxuICAgICAgICAgIGRyYXdSb3VuZFJlY3RhbmdsZVBhdGgoY29udGV4dCxcbiAgICAgICAgICAgICAgICAgIHN0YXRlQ2VudGVyWCwgc3RhdGVDZW50ZXJZLFxuICAgICAgICAgICAgICAgICAgc3RhdGVXaWR0aCwgc3RhdGVIZWlnaHQsIE1hdGgubWluKHN0YXRlV2lkdGggLyAyLCBzdGF0ZUhlaWdodCAvIDIsIHN0YXRlVmFyUmFkaXVzKSk7XG4gICAgICAgICAgY29udGV4dC5maWxsKCk7XG5cbiAgICAgICAgICB0ZXh0UHJvcC5zdGF0ZSA9IHN0YXRlLnN0YXRlO1xuICAgICAgICAgIGRyYXdTdGF0ZVRleHQoY29udGV4dCwgdGV4dFByb3ApO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmNsYXp6ID09ICd1bml0IG9mIGluZm9ybWF0aW9uJykgey8vZHJhdyByZWN0YW5nbGVcbiAgICAgICAgICBkcmF3Um91bmRSZWN0YW5nbGVQYXRoKGNvbnRleHQsXG4gICAgICAgICAgICAgICAgICBzdGF0ZUNlbnRlclgsIHN0YXRlQ2VudGVyWSxcbiAgICAgICAgICAgICAgICAgIHN0YXRlV2lkdGgsIHN0YXRlSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgTWF0aC5taW4oc3RhdGVXaWR0aCAvIDIsIHN0YXRlSGVpZ2h0IC8gMiwgdW5pdE9mSW5mb1JhZGl1cykpO1xuICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuXG4gICAgICAgICAgdGV4dFByb3AubGFiZWwgPSBzdGF0ZS5sYWJlbC50ZXh0O1xuICAgICAgICAgIGRyYXdJbmZvVGV4dChjb250ZXh0LCB0ZXh0UHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRvd25XaWR0aCA9IGRvd25XaWR0aCArIHdpZHRoICsgYm94UGFkZGluZztcbiAgICB9XG4gICAgY29udGV4dC5zdHJva2UoKTtcblxuICAgIC8vVGhpcyBpcyBhIHRlbXBvcmFyeSB3b3JrYXJvdW5kXG4gICAgZHJhd0VsbGlwc2UoY29udGV4dCwgY2VudGVyWCwgY2VudGVyWSwgMCwgMCk7XG5cbiAgICAvL3VwZGF0ZSBuZXcgc3RhdGUgYW5kIGluZm8gcG9zaXRpb24ocmVsYXRpdmUgdG8gbm9kZSBjZW50ZXIpXG4gICAgc3RhdGUuYmJveC54ID0gKHN0YXRlQ2VudGVyWCAtIGNlbnRlclgpICogMTAwIC8gbm9kZS53aWR0aCgpO1xuICAgIHN0YXRlLmJib3gueSA9IChzdGF0ZUNlbnRlclkgLSBjZW50ZXJZKSAqIDEwMCAvIG5vZGUuaGVpZ2h0KCk7XG4gIH1cbn07XG52YXIgZHJhd1NpbXBsZUNoZW1pY2FsUGF0aCA9IGZ1bmN0aW9uIChjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG5cbiAgdmFyIGhhbGZXaWR0aCA9IHdpZHRoIC8gMjtcbiAgdmFyIGhhbGZIZWlnaHQgPSBoZWlnaHQgLyAyO1xuICAvL3ZhciBjb3JuZXJSYWRpdXMgPSAkJC5tYXRoLmdldFJvdW5kUmVjdGFuZ2xlUmFkaXVzKHdpZHRoLCBoZWlnaHQpO1xuICB2YXIgY29ybmVyUmFkaXVzID0gTWF0aC5taW4oaGFsZldpZHRoLCBoYWxmSGVpZ2h0KTtcbiAgY29udGV4dC50cmFuc2xhdGUoeCwgeSk7XG5cbiAgY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAvLyBTdGFydCBhdCB0b3AgbWlkZGxlXG4gIGNvbnRleHQubW92ZVRvKDAsIC1oYWxmSGVpZ2h0KTtcbiAgLy8gQXJjIGZyb20gbWlkZGxlIHRvcCB0byByaWdodCBzaWRlXG4gIGNvbnRleHQuYXJjVG8oaGFsZldpZHRoLCAtaGFsZkhlaWdodCwgaGFsZldpZHRoLCAwLCBjb3JuZXJSYWRpdXMpO1xuICAvLyBBcmMgZnJvbSByaWdodCBzaWRlIHRvIGJvdHRvbVxuICBjb250ZXh0LmFyY1RvKGhhbGZXaWR0aCwgaGFsZkhlaWdodCwgMCwgaGFsZkhlaWdodCwgY29ybmVyUmFkaXVzKTtcbiAgLy8gQXJjIGZyb20gYm90dG9tIHRvIGxlZnQgc2lkZVxuICBjb250ZXh0LmFyY1RvKC1oYWxmV2lkdGgsIGhhbGZIZWlnaHQsIC1oYWxmV2lkdGgsIDAsIGNvcm5lclJhZGl1cyk7XG4gIC8vIEFyYyBmcm9tIGxlZnQgc2lkZSB0byB0b3BCb3JkZXJcbiAgY29udGV4dC5hcmNUbygtaGFsZldpZHRoLCAtaGFsZkhlaWdodCwgMCwgLWhhbGZIZWlnaHQsIGNvcm5lclJhZGl1cyk7XG4gIC8vIEpvaW4gbGluZVxuICBjb250ZXh0LmxpbmVUbygwLCAtaGFsZkhlaWdodCk7XG5cbiAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICBjb250ZXh0LnRyYW5zbGF0ZSgteCwgLXkpO1xufTtcblxuXG52YXIgZHJhd1NpbXBsZUNoZW1pY2FsID0gZnVuY3Rpb24gKGNvbnRleHQsIHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgZHJhd1NpbXBsZUNoZW1pY2FsUGF0aChjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgY29udGV4dC5maWxsKCk7XG59O1xuXG52YXIgZHJhd051Y0FjaWRGZWF0dXJlID0gZnVuY3Rpb24gKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNlbnRlclgsIGNlbnRlclksIGNvcm5lclJhZGl1cykge1xuICB2YXIgaGFsZldpZHRoID0gd2lkdGggLyAyO1xuICB2YXIgaGFsZkhlaWdodCA9IGhlaWdodCAvIDI7XG5cbiAgY29udGV4dC50cmFuc2xhdGUoY2VudGVyWCwgY2VudGVyWSk7XG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgY29udGV4dC5tb3ZlVG8oLWhhbGZXaWR0aCwgLWhhbGZIZWlnaHQpO1xuICBjb250ZXh0LmxpbmVUbyhoYWxmV2lkdGgsIC1oYWxmSGVpZ2h0KTtcbiAgY29udGV4dC5saW5lVG8oaGFsZldpZHRoLCAwKTtcbiAgY29udGV4dC5hcmNUbyhoYWxmV2lkdGgsIGhhbGZIZWlnaHQsIDAsIGhhbGZIZWlnaHQsIGNvcm5lclJhZGl1cyk7XG4gIGNvbnRleHQuYXJjVG8oLWhhbGZXaWR0aCwgaGFsZkhlaWdodCwgLWhhbGZXaWR0aCwgMCwgY29ybmVyUmFkaXVzKTtcbiAgY29udGV4dC5saW5lVG8oLWhhbGZXaWR0aCwgLWhhbGZIZWlnaHQpO1xuXG4gIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIGNvbnRleHQudHJhbnNsYXRlKC1jZW50ZXJYLCAtY2VudGVyWSk7XG4gIGNvbnRleHQuZmlsbCgpO1xufTtcblxudmFyIGRyYXdQb3J0c1RvRWxsaXBzZVNoYXBlID0gZnVuY3Rpb24gKGNvbnRleHQsIG5vZGUpIHtcbiAgdmFyIHdpZHRoID0gbm9kZS53aWR0aCgpO1xuICB2YXIgaGVpZ2h0ID0gbm9kZS5oZWlnaHQoKTtcbiAgdmFyIGNlbnRlclggPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLng7XG4gIHZhciBjZW50ZXJZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5fcHJpdmF0ZS5kYXRhLnBvcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBvcnQgPSBub2RlLl9wcml2YXRlLmRhdGEucG9ydHNbaV07XG4gICAgdmFyIHBvcnRYID0gcG9ydC54ICogd2lkdGggLyAxMDAgKyBjZW50ZXJYO1xuICAgIHZhciBwb3J0WSA9IHBvcnQueSAqIGhlaWdodCAvIDEwMCArIGNlbnRlclk7XG4gICAgdmFyIGNsb3Nlc3RQb2ludCA9IGN5TWF0aC5pbnRlcnNlY3RMaW5lRWxsaXBzZShcbiAgICAgICAgICAgIHBvcnRYLCBwb3J0WSwgY2VudGVyWCwgY2VudGVyWSwgd2lkdGggLyAyLCBoZWlnaHQgLyAyKTtcbiAgICBjb250ZXh0Lm1vdmVUbyhwb3J0WCwgcG9ydFkpO1xuICAgIGNvbnRleHQubGluZVRvKGNsb3Nlc3RQb2ludFswXSwgY2xvc2VzdFBvaW50WzFdKTtcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgLy9hZGQgYSBsaXR0bGUgYmxhY2sgY2lyY2xlIHRvIHBvcnRzXG4gICAgdmFyIG9sZFN0eWxlID0gY29udGV4dC5maWxsU3R5bGU7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSBjb2xvcnMucG9ydDtcbiAgICBkcmF3RWxsaXBzZShjb250ZXh0LCBwb3J0WCwgcG9ydFksIDIsIDIpO1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gb2xkU3R5bGU7XG4gICAgY29udGV4dC5zdHJva2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRyYXdFbGxpcHNlOiBkcmF3RWxsaXBzZSxcbiAgZHJhd0luZm9UZXh0OiBkcmF3SW5mb1RleHQsXG4gIGRyYXdTdGF0ZVRleHQ6IGRyYXdTdGF0ZVRleHQsXG4gIGRyYXdTdGF0ZUFuZEluZm9zOiBkcmF3U3RhdGVBbmRJbmZvcyxcbiAgZHJhd0NvbXBsZXhTdGF0ZUFuZEluZm86IGRyYXdDb21wbGV4U3RhdGVBbmRJbmZvLFxuICBkcmF3UG9ydHNUb0VsbGlwc2VTaGFwZTogZHJhd1BvcnRzVG9FbGxpcHNlU2hhcGUsXG4gIGRyYXdOdWNBY2lkRmVhdHVyZTogZHJhd051Y0FjaWRGZWF0dXJlLFxuICBkcmF3VGV4dDogZHJhd1RleHQsXG4gIGRyYXdQb2x5Z29uUGF0aDogZHJhd1BvbHlnb25QYXRoLFxuICBkcmF3Um91bmRSZWN0YW5nbGVQYXRoOiBkcmF3Um91bmRSZWN0YW5nbGVQYXRoLFxuICBkcmF3UG9ydHNUb1BvbHlnb25TaGFwZTogZHJhd1BvcnRzVG9Qb2x5Z29uU2hhcGUsXG4gIGRyYXdTaW1wbGVDaGVtaWNhbDogZHJhd1NpbXBsZUNoZW1pY2FsLFxuICBkcmF3U2ltcGxlQ2hlbWljYWxQYXRoOiBkcmF3U2ltcGxlQ2hlbWljYWxQYXRoXG59O1xuIiwidmFyIGN5TWF0aCA9IHJlcXVpcmUoJy4vY3lNYXRoJyk7XG5cbnZhciBpbnRlcnNlY3RMaW5lRWxsaXBzZSA9IGZ1bmN0aW9uICh4MSwgeTEsIHgyLCB5MiwgY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsIGhlaWdodCwgcGFkZGluZykge1xuXG4gIHZhciB3ID0gd2lkdGggLyAyICsgcGFkZGluZztcbiAgdmFyIGggPSBoZWlnaHQgLyAyICsgcGFkZGluZztcbiAgdmFyIGFuID0gY2VudGVyWDtcbiAgdmFyIGJuID0gY2VudGVyWTtcblxuICB2YXIgZCA9IFt4MiAtIHgxLCB5MiAtIHkxXTtcblxuICB2YXIgbSA9IGRbMV0gLyBkWzBdO1xuICB2YXIgbiA9IC0xICogbSAqIHgyICsgeTI7XG4gIHZhciBhID0gaCAqIGggKyB3ICogdyAqIG0gKiBtO1xuICB2YXIgYiA9IC0yICogYW4gKiBoICogaCArIDIgKiBtICogbiAqIHcgKiB3IC0gMiAqIGJuICogbSAqIHcgKiB3O1xuICB2YXIgYyA9IGFuICogYW4gKiBoICogaCArIG4gKiBuICogdyAqIHcgLSAyICogYm4gKiB3ICogdyAqIG4gK1xuICAgICAgICAgIGJuICogYm4gKiB3ICogdyAtIGggKiBoICogdyAqIHc7XG5cbiAgdmFyIGRpc2NyaW1pbmFudCA9IGIgKiBiIC0gNCAqIGEgKiBjO1xuXG4gIGlmIChkaXNjcmltaW5hbnQgPCAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIHQxID0gKC1iICsgTWF0aC5zcXJ0KGRpc2NyaW1pbmFudCkpIC8gKDIgKiBhKTtcbiAgdmFyIHQyID0gKC1iIC0gTWF0aC5zcXJ0KGRpc2NyaW1pbmFudCkpIC8gKDIgKiBhKTtcblxuICB2YXIgeE1pbiA9IE1hdGgubWluKHQxLCB0Mik7XG4gIHZhciB4TWF4ID0gTWF0aC5tYXgodDEsIHQyKTtcblxuICB2YXIgeU1pbiA9IG0gKiB4TWluIC0gbSAqIHgyICsgeTI7XG4gIHZhciB5TWF4ID0gbSAqIHhNYXggLSBtICogeDIgKyB5MjtcblxuICByZXR1cm4gW3hNaW4sIHlNaW4sIHhNYXgsIHlNYXhdO1xufTtcblxudmFyIGludGVyc2VjdExpbmVQb3J0cyA9IGZ1bmN0aW9uIChub2RlLCB4LCB5LCBwb3J0SWQpIHtcbiAgdmFyIHBvcnRzID0gbm9kZS5fcHJpdmF0ZS5kYXRhLnBvcnRzO1xuICBpZiAocG9ydHMubGVuZ3RoIDwgMClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIG5vZGVYID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi54O1xuICB2YXIgbm9kZVkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG4gIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgdmFyIGhlaWdodCA9IG5vZGUuaGVpZ2h0KCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLl9wcml2YXRlLmRhdGEucG9ydHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcG9ydCA9IG5vZGUuX3ByaXZhdGUuZGF0YS5wb3J0c1tpXTtcbiAgICBpZiAocG9ydElkID09IHBvcnQuaWQpIHtcbiAgICAgIHJldHVybiBjeU1hdGguaW50ZXJzZWN0TGluZUVsbGlwc2UoXG4gICAgICAgICAgICAgIHgsIHksIHBvcnQueCAqIHdpZHRoIC8gMTAwICsgbm9kZVgsIHBvcnQueSAqIGhlaWdodCAvIDEwMCArIG5vZGVZLCAxLCAxKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtdO1xufTtcblxudmFyIGludGVyc2VjdFJvdW5kUmVjdGFuZ2xlTGluZSA9IGZ1bmN0aW9uIChcbiAgICAgICAgICB4MSwgeTEsIHgyLCB5Miwgbm9kZVgsIG5vZGVZLCB3aWR0aCwgaGVpZ2h0LCBjb3JuZXJSYWRpdXMsIHBhZGRpbmcpIHtcblxuICB2YXIgaGFsZldpZHRoID0gd2lkdGggLyAyO1xuICB2YXIgaGFsZkhlaWdodCA9IGhlaWdodCAvIDI7XG5cbiAgLy8gQ2hlY2sgaW50ZXJzZWN0aW9ucyB3aXRoIHN0cmFpZ2h0IGxpbmUgc2VnbWVudHNcbiAgdmFyIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMgPSBbXTtcbiAgdmFyIGludGVyc2VjdGlvbjtcblxuICAvLyBUb3Agc2VnbWVudCwgbGVmdCB0byByaWdodFxuICB7XG4gICAgdmFyIHRvcFN0YXJ0WCA9IG5vZGVYIC0gaGFsZldpZHRoICsgY29ybmVyUmFkaXVzIC0gcGFkZGluZztcbiAgICB2YXIgdG9wU3RhcnRZID0gbm9kZVkgLSBoYWxmSGVpZ2h0IC0gcGFkZGluZztcbiAgICB2YXIgdG9wRW5kWCA9IG5vZGVYICsgaGFsZldpZHRoIC0gY29ybmVyUmFkaXVzICsgcGFkZGluZztcbiAgICB2YXIgdG9wRW5kWSA9IHRvcFN0YXJ0WTtcblxuICAgIGludGVyc2VjdGlvbiA9IGN5TWF0aC5maW5pdGVMaW5lc0ludGVyc2VjdChcbiAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyLCB0b3BTdGFydFgsIHRvcFN0YXJ0WSwgdG9wRW5kWCwgdG9wRW5kWSwgZmFsc2UpO1xuXG4gICAgaWYgKGludGVyc2VjdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zID0gc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucy5jb25jYXQoaW50ZXJzZWN0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvLyBSaWdodCBzZWdtZW50LCB0b3AgdG8gYm90dG9tXG4gIHtcbiAgICB2YXIgcmlnaHRTdGFydFggPSBub2RlWCArIGhhbGZXaWR0aCArIHBhZGRpbmc7XG4gICAgdmFyIHJpZ2h0U3RhcnRZID0gbm9kZVkgLSBoYWxmSGVpZ2h0ICsgY29ybmVyUmFkaXVzIC0gcGFkZGluZztcbiAgICB2YXIgcmlnaHRFbmRYID0gcmlnaHRTdGFydFg7XG4gICAgdmFyIHJpZ2h0RW5kWSA9IG5vZGVZICsgaGFsZkhlaWdodCAtIGNvcm5lclJhZGl1cyArIHBhZGRpbmc7XG5cbiAgICBpbnRlcnNlY3Rpb24gPSBjeU1hdGguZmluaXRlTGluZXNJbnRlcnNlY3QoXG4gICAgICAgICAgICB4MSwgeTEsIHgyLCB5MiwgcmlnaHRTdGFydFgsIHJpZ2h0U3RhcnRZLCByaWdodEVuZFgsIHJpZ2h0RW5kWSwgZmFsc2UpO1xuXG4gICAgaWYgKGludGVyc2VjdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zID0gc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucy5jb25jYXQoaW50ZXJzZWN0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvLyBCb3R0b20gc2VnbWVudCwgbGVmdCB0byByaWdodFxuICB7XG4gICAgdmFyIGJvdHRvbVN0YXJ0WCA9IG5vZGVYIC0gaGFsZldpZHRoICsgY29ybmVyUmFkaXVzIC0gcGFkZGluZztcbiAgICB2YXIgYm90dG9tU3RhcnRZID0gbm9kZVkgKyBoYWxmSGVpZ2h0ICsgcGFkZGluZztcbiAgICB2YXIgYm90dG9tRW5kWCA9IG5vZGVYICsgaGFsZldpZHRoIC0gY29ybmVyUmFkaXVzICsgcGFkZGluZztcbiAgICB2YXIgYm90dG9tRW5kWSA9IGJvdHRvbVN0YXJ0WTtcblxuICAgIGludGVyc2VjdGlvbiA9IGN5TWF0aC5maW5pdGVMaW5lc0ludGVyc2VjdChcbiAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyLCBib3R0b21TdGFydFgsIGJvdHRvbVN0YXJ0WSwgYm90dG9tRW5kWCwgYm90dG9tRW5kWSwgZmFsc2UpO1xuXG4gICAgaWYgKGludGVyc2VjdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zID0gc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucy5jb25jYXQoaW50ZXJzZWN0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvLyBMZWZ0IHNlZ21lbnQsIHRvcCB0byBib3R0b21cbiAge1xuICAgIHZhciBsZWZ0U3RhcnRYID0gbm9kZVggLSBoYWxmV2lkdGggLSBwYWRkaW5nO1xuICAgIHZhciBsZWZ0U3RhcnRZID0gbm9kZVkgLSBoYWxmSGVpZ2h0ICsgY29ybmVyUmFkaXVzIC0gcGFkZGluZztcbiAgICB2YXIgbGVmdEVuZFggPSBsZWZ0U3RhcnRYO1xuICAgIHZhciBsZWZ0RW5kWSA9IG5vZGVZICsgaGFsZkhlaWdodCAtIGNvcm5lclJhZGl1cyArIHBhZGRpbmc7XG5cbiAgICBpbnRlcnNlY3Rpb24gPSBjeU1hdGguZmluaXRlTGluZXNJbnRlcnNlY3QoXG4gICAgICAgICAgICB4MSwgeTEsIHgyLCB5MiwgbGVmdFN0YXJ0WCwgbGVmdFN0YXJ0WSwgbGVmdEVuZFgsIGxlZnRFbmRZLCBmYWxzZSk7XG5cbiAgICBpZiAoaW50ZXJzZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMgPSBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zLmNvbmNhdChpbnRlcnNlY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIC8vIENoZWNrIGludGVyc2VjdGlvbnMgd2l0aCBhcmMgc2VnbWVudHNcbiAgdmFyIGFyY0ludGVyc2VjdGlvbnM7XG5cbiAgLy8gVG9wIExlZnRcbiAge1xuICAgIHZhciB0b3BMZWZ0Q2VudGVyWCA9IG5vZGVYIC0gaGFsZldpZHRoICsgY29ybmVyUmFkaXVzO1xuICAgIHZhciB0b3BMZWZ0Q2VudGVyWSA9IG5vZGVZIC0gaGFsZkhlaWdodCArIGNvcm5lclJhZGl1cztcbiAgICBhcmNJbnRlcnNlY3Rpb25zID0gY3lNYXRoLmludGVyc2VjdExpbmVDaXJjbGUoXG4gICAgICAgICAgICB4MSwgeTEsIHgyLCB5MixcbiAgICAgICAgICAgIHRvcExlZnRDZW50ZXJYLCB0b3BMZWZ0Q2VudGVyWSwgY29ybmVyUmFkaXVzICsgcGFkZGluZyk7XG5cbiAgICAvLyBFbnN1cmUgdGhlIGludGVyc2VjdGlvbiBpcyBvbiB0aGUgZGVzaXJlZCBxdWFydGVyIG9mIHRoZSBjaXJjbGVcbiAgICBpZiAoYXJjSW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwXG4gICAgICAgICAgICAmJiBhcmNJbnRlcnNlY3Rpb25zWzBdIDw9IHRvcExlZnRDZW50ZXJYXG4gICAgICAgICAgICAmJiBhcmNJbnRlcnNlY3Rpb25zWzFdIDw9IHRvcExlZnRDZW50ZXJZKSB7XG4gICAgICBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zID0gc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucy5jb25jYXQoYXJjSW50ZXJzZWN0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgLy8gVG9wIFJpZ2h0XG4gIHtcbiAgICB2YXIgdG9wUmlnaHRDZW50ZXJYID0gbm9kZVggKyBoYWxmV2lkdGggLSBjb3JuZXJSYWRpdXM7XG4gICAgdmFyIHRvcFJpZ2h0Q2VudGVyWSA9IG5vZGVZIC0gaGFsZkhlaWdodCArIGNvcm5lclJhZGl1cztcbiAgICBhcmNJbnRlcnNlY3Rpb25zID0gY3lNYXRoLmludGVyc2VjdExpbmVDaXJjbGUoXG4gICAgICAgICAgICB4MSwgeTEsIHgyLCB5MixcbiAgICAgICAgICAgIHRvcFJpZ2h0Q2VudGVyWCwgdG9wUmlnaHRDZW50ZXJZLCBjb3JuZXJSYWRpdXMgKyBwYWRkaW5nKTtcblxuICAgIC8vIEVuc3VyZSB0aGUgaW50ZXJzZWN0aW9uIGlzIG9uIHRoZSBkZXNpcmVkIHF1YXJ0ZXIgb2YgdGhlIGNpcmNsZVxuICAgIGlmIChhcmNJbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICYmIGFyY0ludGVyc2VjdGlvbnNbMF0gPj0gdG9wUmlnaHRDZW50ZXJYXG4gICAgICAgICAgICAmJiBhcmNJbnRlcnNlY3Rpb25zWzFdIDw9IHRvcFJpZ2h0Q2VudGVyWSkge1xuICAgICAgc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucyA9IHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMuY29uY2F0KGFyY0ludGVyc2VjdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEJvdHRvbSBSaWdodFxuICB7XG4gICAgdmFyIGJvdHRvbVJpZ2h0Q2VudGVyWCA9IG5vZGVYICsgaGFsZldpZHRoIC0gY29ybmVyUmFkaXVzO1xuICAgIHZhciBib3R0b21SaWdodENlbnRlclkgPSBub2RlWSArIGhhbGZIZWlnaHQgLSBjb3JuZXJSYWRpdXM7XG4gICAgYXJjSW50ZXJzZWN0aW9ucyA9IGN5TWF0aC5pbnRlcnNlY3RMaW5lQ2lyY2xlKFxuICAgICAgICAgICAgeDEsIHkxLCB4MiwgeTIsXG4gICAgICAgICAgICBib3R0b21SaWdodENlbnRlclgsIGJvdHRvbVJpZ2h0Q2VudGVyWSwgY29ybmVyUmFkaXVzICsgcGFkZGluZyk7XG5cbiAgICAvLyBFbnN1cmUgdGhlIGludGVyc2VjdGlvbiBpcyBvbiB0aGUgZGVzaXJlZCBxdWFydGVyIG9mIHRoZSBjaXJjbGVcbiAgICBpZiAoYXJjSW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwXG4gICAgICAgICAgICAmJiBhcmNJbnRlcnNlY3Rpb25zWzBdID49IGJvdHRvbVJpZ2h0Q2VudGVyWFxuICAgICAgICAgICAgJiYgYXJjSW50ZXJzZWN0aW9uc1sxXSA+PSBib3R0b21SaWdodENlbnRlclkpIHtcbiAgICAgIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMgPSBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zLmNvbmNhdChhcmNJbnRlcnNlY3Rpb25zKTtcbiAgICB9XG4gIH1cblxuICAvLyBCb3R0b20gTGVmdFxuICB7XG4gICAgdmFyIGJvdHRvbUxlZnRDZW50ZXJYID0gbm9kZVggLSBoYWxmV2lkdGggKyBjb3JuZXJSYWRpdXM7XG4gICAgdmFyIGJvdHRvbUxlZnRDZW50ZXJZID0gbm9kZVkgKyBoYWxmSGVpZ2h0IC0gY29ybmVyUmFkaXVzO1xuICAgIGFyY0ludGVyc2VjdGlvbnMgPSBjeU1hdGguaW50ZXJzZWN0TGluZUNpcmNsZShcbiAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyLFxuICAgICAgICAgICAgYm90dG9tTGVmdENlbnRlclgsIGJvdHRvbUxlZnRDZW50ZXJZLCBjb3JuZXJSYWRpdXMgKyBwYWRkaW5nKTtcblxuICAgIC8vIEVuc3VyZSB0aGUgaW50ZXJzZWN0aW9uIGlzIG9uIHRoZSBkZXNpcmVkIHF1YXJ0ZXIgb2YgdGhlIGNpcmNsZVxuICAgIGlmIChhcmNJbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICYmIGFyY0ludGVyc2VjdGlvbnNbMF0gPD0gYm90dG9tTGVmdENlbnRlclhcbiAgICAgICAgICAgICYmIGFyY0ludGVyc2VjdGlvbnNbMV0gPj0gYm90dG9tTGVmdENlbnRlclkpIHtcbiAgICAgIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMgPSBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zLmNvbmNhdChhcmNJbnRlcnNlY3Rpb25zKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwKVxuICAgIHJldHVybiBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zO1xuICByZXR1cm4gW107IC8vIGlmIG5vdGhpbmdcbn07XG5cbnZhciBpbnRlcnNlY3RMaW5lU3RhdGVBbmRJbmZvQm94ZXMgPSBmdW5jdGlvbiAobm9kZSwgeCwgeSkge1xuICB2YXIgY2VudGVyWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG4gIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKSAvIDI7XG5cbiAgdmFyIHN0YXRlQW5kSW5mb3MgPSBub2RlLl9wcml2YXRlLmRhdGEuc3RhdGVzYW5kaW5mb3M7XG5cbiAgdmFyIHN0YXRlQ291bnQgPSAwLCBpbmZvQ291bnQgPSAwO1xuXG4gIHZhciBpbnRlcnNlY3Rpb25zID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZUFuZEluZm9zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHN0YXRlID0gc3RhdGVBbmRJbmZvc1tpXTtcbiAgICB2YXIgc3RhdGVXaWR0aCA9IHN0YXRlLmJib3gudztcbiAgICB2YXIgc3RhdGVIZWlnaHQgPSBzdGF0ZS5iYm94Lmg7XG4gICAgdmFyIHN0YXRlQ2VudGVyWCA9IHN0YXRlLmJib3gueCAqIG5vZGUud2lkdGgoKSAvIDEwMCArIGNlbnRlclg7XG4gICAgdmFyIHN0YXRlQ2VudGVyWSA9IHN0YXRlLmJib3gueSAqIG5vZGUuaGVpZ2h0KCkgLyAxMDAgKyBjZW50ZXJZO1xuXG4gICAgaWYgKHN0YXRlLmNsYXp6ID09ICdzdGF0ZSB2YXJpYWJsZScgJiYgc3RhdGVDb3VudCA8IDIpIHsvL2RyYXcgZWxsaXBzZVxuICAgICAgdmFyIHN0YXRlSW50ZXJzZWN0TGluZXMgPSBpbnRlcnNlY3RMaW5lRWxsaXBzZSh4LCB5LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICBzdGF0ZUNlbnRlclgsIHN0YXRlQ2VudGVyWSwgc3RhdGVXaWR0aCwgc3RhdGVIZWlnaHQsIHBhZGRpbmcpO1xuXG4gICAgICBpZiAoc3RhdGVJbnRlcnNlY3RMaW5lcy5sZW5ndGggPiAwKVxuICAgICAgICBpbnRlcnNlY3Rpb25zID0gaW50ZXJzZWN0aW9ucy5jb25jYXQoc3RhdGVJbnRlcnNlY3RMaW5lcyk7XG5cbiAgICAgIHN0YXRlQ291bnQrKztcbiAgICB9IGVsc2UgaWYgKHN0YXRlLmNsYXp6ID09ICd1bml0IG9mIGluZm9ybWF0aW9uJyAmJiBpbmZvQ291bnQgPCAyKSB7Ly9kcmF3IHJlY3RhbmdsZVxuICAgICAgdmFyIGluZm9JbnRlcnNlY3RMaW5lcyA9IGludGVyc2VjdFJvdW5kUmVjdGFuZ2xlTGluZSh4LCB5LCBjZW50ZXJYLCBjZW50ZXJZLFxuICAgICAgICAgICAgICBzdGF0ZUNlbnRlclgsIHN0YXRlQ2VudGVyWSwgc3RhdGVXaWR0aCwgc3RhdGVIZWlnaHQsIDUsIHBhZGRpbmcpO1xuXG4gICAgICBpZiAoaW5mb0ludGVyc2VjdExpbmVzLmxlbmd0aCA+IDApXG4gICAgICAgIGludGVyc2VjdGlvbnMgPSBpbnRlcnNlY3Rpb25zLmNvbmNhdChpbmZvSW50ZXJzZWN0TGluZXMpO1xuXG4gICAgICBpbmZvQ291bnQrKztcbiAgICB9XG5cbiAgfVxuICBpZiAoaW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwKVxuICAgIHJldHVybiBpbnRlcnNlY3Rpb25zO1xuICByZXR1cm4gW107XG59O1xuXG52YXIgaW50ZXJzZWN0TnVjbGVpY0FjaWRMaW5lID0gZnVuY3Rpb24gKG5vZGUsIHgsIHksIG5vZGVYLCBub2RlWSwgY29ybmVyUmFkaXVzKSB7XG4gIHZhciBub2RlWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgdmFyIG5vZGVZID0gbm9kZS5fcHJpdmF0ZS5wb3NpdGlvbi55O1xuICB2YXIgd2lkdGggPSBub2RlLndpZHRoKCk7XG4gIHZhciBoZWlnaHQgPSBub2RlLmhlaWdodCgpO1xuICB2YXIgcGFkZGluZyA9IHBhcnNlSW50KG5vZGUuY3NzKCdib3JkZXItd2lkdGgnKSkgLyAyO1xuXG4gIHZhciBoYWxmV2lkdGggPSB3aWR0aCAvIDI7XG4gIHZhciBoYWxmSGVpZ2h0ID0gaGVpZ2h0IC8gMjtcblxuICB2YXIgc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucztcblxuICAvLyBUb3Agc2VnbWVudCwgbGVmdCB0byByaWdodFxuICB7XG4gICAgdmFyIHRvcFN0YXJ0WCA9IG5vZGVYIC0gaGFsZldpZHRoIC0gcGFkZGluZztcbiAgICB2YXIgdG9wU3RhcnRZID0gbm9kZVkgLSBoYWxmSGVpZ2h0IC0gcGFkZGluZztcbiAgICB2YXIgdG9wRW5kWCA9IG5vZGVYICsgaGFsZldpZHRoICsgcGFkZGluZztcbiAgICB2YXIgdG9wRW5kWSA9IHRvcFN0YXJ0WTtcblxuICAgIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMgPSBjeU1hdGguZmluaXRlTGluZXNJbnRlcnNlY3QoXG4gICAgICAgICAgICB4LCB5LCBub2RlWCwgbm9kZVksIHRvcFN0YXJ0WCwgdG9wU3RhcnRZLCB0b3BFbmRYLCB0b3BFbmRZLCBmYWxzZSk7XG5cbiAgICBpZiAoc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucztcbiAgICB9XG4gIH1cblxuICAvLyBSaWdodCBzZWdtZW50LCB0b3AgdG8gYm90dG9tXG4gIHtcbiAgICB2YXIgcmlnaHRTdGFydFggPSBub2RlWCArIGhhbGZXaWR0aCArIHBhZGRpbmc7XG4gICAgdmFyIHJpZ2h0U3RhcnRZID0gbm9kZVkgLSBoYWxmSGVpZ2h0IC0gcGFkZGluZztcbiAgICB2YXIgcmlnaHRFbmRYID0gcmlnaHRTdGFydFg7XG4gICAgdmFyIHJpZ2h0RW5kWSA9IG5vZGVZICsgaGFsZkhlaWdodCAtIGNvcm5lclJhZGl1cyArIHBhZGRpbmc7XG5cbiAgICBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zID0gY3lNYXRoLmZpbml0ZUxpbmVzSW50ZXJzZWN0KFxuICAgICAgICAgICAgeCwgeSwgbm9kZVgsIG5vZGVZLCByaWdodFN0YXJ0WCwgcmlnaHRTdGFydFksIHJpZ2h0RW5kWCwgcmlnaHRFbmRZLCBmYWxzZSk7XG5cbiAgICBpZiAoc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucztcbiAgICB9XG4gIH1cblxuICAvLyBCb3R0b20gc2VnbWVudCwgbGVmdCB0byByaWdodFxuICB7XG4gICAgdmFyIGJvdHRvbVN0YXJ0WCA9IG5vZGVYIC0gaGFsZldpZHRoICsgY29ybmVyUmFkaXVzIC0gcGFkZGluZztcbiAgICB2YXIgYm90dG9tU3RhcnRZID0gbm9kZVkgKyBoYWxmSGVpZ2h0ICsgcGFkZGluZztcbiAgICB2YXIgYm90dG9tRW5kWCA9IG5vZGVYICsgaGFsZldpZHRoIC0gY29ybmVyUmFkaXVzICsgcGFkZGluZztcbiAgICB2YXIgYm90dG9tRW5kWSA9IGJvdHRvbVN0YXJ0WTtcblxuICAgIHN0cmFpZ2h0TGluZUludGVyc2VjdGlvbnMgPSBjeU1hdGguZmluaXRlTGluZXNJbnRlcnNlY3QoXG4gICAgICAgICAgICB4LCB5LCBub2RlWCwgbm9kZVksIGJvdHRvbVN0YXJ0WCwgYm90dG9tU3RhcnRZLCBib3R0b21FbmRYLCBib3R0b21FbmRZLCBmYWxzZSk7XG5cbiAgICBpZiAoc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gc3RyYWlnaHRMaW5lSW50ZXJzZWN0aW9ucztcbiAgICB9XG4gIH1cblxuICAvLyBMZWZ0IHNlZ21lbnQsIHRvcCB0byBib3R0b21cbiAge1xuICAgIHZhciBsZWZ0U3RhcnRYID0gbm9kZVggLSBoYWxmV2lkdGggLSBwYWRkaW5nO1xuICAgIHZhciBsZWZ0U3RhcnRZID0gbm9kZVkgLSBoYWxmSGVpZ2h0IC0gcGFkZGluZztcbiAgICB2YXIgbGVmdEVuZFggPSBsZWZ0U3RhcnRYO1xuICAgIHZhciBsZWZ0RW5kWSA9IG5vZGVZICsgaGFsZkhlaWdodCAtIGNvcm5lclJhZGl1cyArIHBhZGRpbmc7XG5cbiAgICBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zID0gY3lNYXRoLmZpbml0ZUxpbmVzSW50ZXJzZWN0KFxuICAgICAgICAgICAgeCwgeSwgbm9kZVgsIG5vZGVZLCBsZWZ0U3RhcnRYLCBsZWZ0U3RhcnRZLCBsZWZ0RW5kWCwgbGVmdEVuZFksIGZhbHNlKTtcblxuICAgIGlmIChzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBzdHJhaWdodExpbmVJbnRlcnNlY3Rpb25zO1xuICAgIH1cbiAgfVxuXG4gIC8vIENoZWNrIGludGVyc2VjdGlvbnMgd2l0aCBhcmMgc2VnbWVudHMsIHdlIGhhdmUgb25seSB0d28gYXJjcyBmb3JcbiAgLy9udWNsZWljIGFjaWQgZmVhdHVyZXNcbiAgdmFyIGFyY0ludGVyc2VjdGlvbnM7XG5cbiAgLy8gQm90dG9tIFJpZ2h0XG4gIHtcbiAgICB2YXIgYm90dG9tUmlnaHRDZW50ZXJYID0gbm9kZVggKyBoYWxmV2lkdGggLSBjb3JuZXJSYWRpdXM7XG4gICAgdmFyIGJvdHRvbVJpZ2h0Q2VudGVyWSA9IG5vZGVZICsgaGFsZkhlaWdodCAtIGNvcm5lclJhZGl1cztcbiAgICBhcmNJbnRlcnNlY3Rpb25zID0gY3lNYXRoLmludGVyc2VjdExpbmVDaXJjbGUoXG4gICAgICAgICAgICB4LCB5LCBub2RlWCwgbm9kZVksXG4gICAgICAgICAgICBib3R0b21SaWdodENlbnRlclgsIGJvdHRvbVJpZ2h0Q2VudGVyWSwgY29ybmVyUmFkaXVzICsgcGFkZGluZyk7XG5cbiAgICAvLyBFbnN1cmUgdGhlIGludGVyc2VjdGlvbiBpcyBvbiB0aGUgZGVzaXJlZCBxdWFydGVyIG9mIHRoZSBjaXJjbGVcbiAgICBpZiAoYXJjSW50ZXJzZWN0aW9ucy5sZW5ndGggPiAwXG4gICAgICAgICAgICAmJiBhcmNJbnRlcnNlY3Rpb25zWzBdID49IGJvdHRvbVJpZ2h0Q2VudGVyWFxuICAgICAgICAgICAgJiYgYXJjSW50ZXJzZWN0aW9uc1sxXSA+PSBib3R0b21SaWdodENlbnRlclkpIHtcbiAgICAgIHJldHVybiBbYXJjSW50ZXJzZWN0aW9uc1swXSwgYXJjSW50ZXJzZWN0aW9uc1sxXV07XG4gICAgfVxuICB9XG5cbiAgLy8gQm90dG9tIExlZnRcbiAge1xuICAgIHZhciBib3R0b21MZWZ0Q2VudGVyWCA9IG5vZGVYIC0gaGFsZldpZHRoICsgY29ybmVyUmFkaXVzO1xuICAgIHZhciBib3R0b21MZWZ0Q2VudGVyWSA9IG5vZGVZICsgaGFsZkhlaWdodCAtIGNvcm5lclJhZGl1cztcbiAgICBhcmNJbnRlcnNlY3Rpb25zID0gY3lNYXRoLmludGVyc2VjdExpbmVDaXJjbGUoXG4gICAgICAgICAgICB4LCB5LCBub2RlWCwgbm9kZVksXG4gICAgICAgICAgICBib3R0b21MZWZ0Q2VudGVyWCwgYm90dG9tTGVmdENlbnRlclksIGNvcm5lclJhZGl1cyArIHBhZGRpbmcpO1xuXG4gICAgLy8gRW5zdXJlIHRoZSBpbnRlcnNlY3Rpb24gaXMgb24gdGhlIGRlc2lyZWQgcXVhcnRlciBvZiB0aGUgY2lyY2xlXG4gICAgaWYgKGFyY0ludGVyc2VjdGlvbnMubGVuZ3RoID4gMFxuICAgICAgICAgICAgJiYgYXJjSW50ZXJzZWN0aW9uc1swXSA8PSBib3R0b21MZWZ0Q2VudGVyWFxuICAgICAgICAgICAgJiYgYXJjSW50ZXJzZWN0aW9uc1sxXSA+PSBib3R0b21MZWZ0Q2VudGVyWSkge1xuICAgICAgcmV0dXJuIFthcmNJbnRlcnNlY3Rpb25zWzBdLCBhcmNJbnRlcnNlY3Rpb25zWzFdXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtdOyAvLyBpZiBub3RoaW5nXG59O1xuXG52YXIgaW50ZXJzZWN0Q2xvc2VzdFBvaW50ID0gZnVuY3Rpb24gKHBvaW50LCBpbnRlcnNlY3Rpb25zKSB7XG4gIGlmIChpbnRlcnNlY3Rpb25zLmxlbmd0aCA8PSAwKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgY2xvc2VzdEludGVyc2VjdGlvbiA9IFtdO1xuICB2YXIgbWluRGlzdGFuY2UgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW50ZXJzZWN0aW9ucy5sZW5ndGg7IGkgPSBpICsgMikge1xuICAgIHZhciBjaGVja1BvaW50ID0gW2ludGVyc2VjdGlvbnNbaV0sIGludGVyc2VjdGlvbnNbaSArIDFdXTtcbiAgICB2YXIgZGlzdGFuY2UgPSAgTWF0aC5zcXJ0KE1hdGgucG93KHBvaW50WzBdIC0gY2hlY2tQb2ludFswXSwgMikgKyBNYXRoLnBvdyhwb2ludFsxXSAtIGNoZWNrUG9pbnRbMV0sIDIpKTtcblxuICAgIGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgY2xvc2VzdEludGVyc2VjdGlvbiA9IGNoZWNrUG9pbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNsb3Nlc3RJbnRlcnNlY3Rpb247XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW50ZXJzZWN0TGluZUVsbGlwc2U6IGludGVyc2VjdExpbmVFbGxpcHNlLFxuICBpbnRlcnNlY3RMaW5lUG9ydHM6IGludGVyc2VjdExpbmVQb3J0cyxcbiAgaW50ZXJzZWN0TGluZVN0YXRlQW5kSW5mb0JveGVzOiBpbnRlcnNlY3RMaW5lU3RhdGVBbmRJbmZvQm94ZXMsXG4gIGludGVyc2VjdE51Y2xlaWNBY2lkTGluZTogaW50ZXJzZWN0TnVjbGVpY0FjaWRMaW5lLFxuICBpbnRlcnNlY3RSb3VuZFJlY3RhbmdsZUxpbmU6IGludGVyc2VjdFJvdW5kUmVjdGFuZ2xlTGluZSxcbiAgaW50ZXJzZWN0Q2xvc2VzdFBvaW50OiBpbnRlcnNlY3RDbG9zZXN0UG9pbnRcbn07XG4iLCJ2YXIgY3lTaGFwZXMgPSByZXF1aXJlKCcuL2N5U2hhcGVzJyk7XG52YXIgY3lNYXRoID0gcmVxdWlyZSgnLi9jeU1hdGgnKTtcblxuLy90aGlzIGZ1bmN0aW9uIGlzIGNyZWF0ZWQgdG8gaGF2ZSBzYW1lIGNvcm5lciBsZW5ndGggd2hlblxuLy9jb21wbGV4J3Mgd2lkdGggb3IgaGVpZ2h0IGlzIGNoYW5nZWRcbnZhciBnZW5lcmF0ZUNvbXBsZXhTaGFwZVBvaW50cyA9IGZ1bmN0aW9uIChjb3JuZXJMZW5ndGgsIHdpZHRoLCBoZWlnaHQpIHtcbiAgLy9jcCBzdGFuZHMgZm9yIGNvcm5lciBwcm9wb3J0aW9uXG4gIHZhciBjcFggPSBjb3JuZXJMZW5ndGggLyB3aWR0aDtcbiAgdmFyIGNwWSA9IGNvcm5lckxlbmd0aCAvIGhlaWdodDtcblxuICB2YXIgY29tcGxleFBvaW50cyA9IFstMSArIGNwWCwgLTEsIC0xLCAtMSArIGNwWSwgLTEsIDEgLSBjcFksIC0xICsgY3BYLFxuICAgIDEsIDEgLSBjcFgsIDEsIDEsIDEgLSBjcFksIDEsIC0xICsgY3BZLCAxIC0gY3BYLCAtMV07XG5cbiAgcmV0dXJuIGNvbXBsZXhQb2ludHM7XG59O1xuXG52YXIgY2hlY2tQb2ludFN0YXRlQW5kSW5mb0JveGVzID0gZnVuY3Rpb24gKHgsIHksIG5vZGUsIHRocmVzaG9sZCkge1xuICB2YXIgY2VudGVyWCA9IG5vZGUuX3ByaXZhdGUucG9zaXRpb24ueDtcbiAgdmFyIGNlbnRlclkgPSBub2RlLl9wcml2YXRlLnBvc2l0aW9uLnk7XG4gIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKSAvIDI7XG4gIHZhciBzdGF0ZUFuZEluZm9zID0gbm9kZS5fcHJpdmF0ZS5kYXRhLnN0YXRlc2FuZGluZm9zO1xuXG4gIHZhciBzdGF0ZUNvdW50ID0gMCwgaW5mb0NvdW50ID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlQW5kSW5mb3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3RhdGUgPSBzdGF0ZUFuZEluZm9zW2ldO1xuICAgIHZhciBzdGF0ZVdpZHRoID0gcGFyc2VGbG9hdChzdGF0ZS5iYm94LncpICsgdGhyZXNob2xkO1xuICAgIHZhciBzdGF0ZUhlaWdodCA9IHBhcnNlRmxvYXQoc3RhdGUuYmJveC5oKSArIHRocmVzaG9sZDtcbiAgICB2YXIgc3RhdGVDZW50ZXJYID0gc3RhdGUuYmJveC54ICogbm9kZS53aWR0aCgpIC8gMTAwICsgY2VudGVyWDtcbiAgICB2YXIgc3RhdGVDZW50ZXJZID0gc3RhdGUuYmJveC55ICogbm9kZS5oZWlnaHQoKSAvIDEwMCArIGNlbnRlclk7XG5cbiAgICBpZiAoc3RhdGUuY2xhenogPT0gJ3N0YXRlIHZhcmlhYmxlJyAmJiBzdGF0ZUNvdW50IDwgMikgey8vZHJhdyBlbGxpcHNlXG4gICAgICB2YXIgc3RhdGVDaGVja1BvaW50ID0gY3lTaGFwZXNbJ2VsbGlwc2UnXS5jaGVja1BvaW50KFxuICAgICAgICAgICAgICB4LCB5LCBwYWRkaW5nLCBzdGF0ZVdpZHRoLCBzdGF0ZUhlaWdodCwgc3RhdGVDZW50ZXJYLCBzdGF0ZUNlbnRlclkpO1xuXG4gICAgICBpZiAoc3RhdGVDaGVja1BvaW50ID09IHRydWUpXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICBzdGF0ZUNvdW50Kys7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5jbGF6eiA9PSAndW5pdCBvZiBpbmZvcm1hdGlvbicgJiYgaW5mb0NvdW50IDwgMikgey8vZHJhdyByZWN0YW5nbGVcbiAgICAgIHZhciBpbmZvQ2hlY2tQb2ludCA9IGN5U2hhcGVzWydyb3VuZHJlY3RhbmdsZSddLmNoZWNrUG9pbnQoXG4gICAgICAgICAgICAgIHgsIHksIHBhZGRpbmcsIHN0YXRlV2lkdGgsIHN0YXRlSGVpZ2h0LCBzdGF0ZUNlbnRlclgsIHN0YXRlQ2VudGVyWSk7XG5cbiAgICAgIGlmIChpbmZvQ2hlY2tQb2ludCA9PSB0cnVlKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgaW5mb0NvdW50Kys7XG4gICAgfVxuXG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxudmFyIG51Y2xlaWNBY2lkQ2hlY2tQb2ludCA9IGZ1bmN0aW9uICh4LCB5LCBjZW50ZXJYLCBjZW50ZXJZLCBub2RlLCB0aHJlc2hvbGQsIHBvaW50cywgY29ybmVyUmFkaXVzKSB7XG4gIHZhciB3aWR0aCA9IG5vZGUud2lkdGgoKTtcbiAgdmFyIGhlaWdodCA9IG5vZGUuaGVpZ2h0KCk7XG4gIHZhciBwYWRkaW5nID0gcGFyc2VJbnQobm9kZS5jc3MoJ2JvcmRlci13aWR0aCcpKSAvIDI7XG5cbiAgLy9jaGVjayByZWN0YW5nbGUgYXQgdG9wXG4gIGlmIChjeU1hdGgucG9pbnRJbnNpZGVQb2x5Z29uKHgsIHksIHBvaW50cyxcbiAgICAgICAgICBjZW50ZXJYLCBjZW50ZXJZIC0gY29ybmVyUmFkaXVzIC8gMiwgd2lkdGgsIGhlaWdodCAtIGNvcm5lclJhZGl1cyAvIDMsIFswLCAtMV0sXG4gICAgICAgICAgcGFkZGluZykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vY2hlY2sgcmVjdGFuZ2xlIGF0IGJvdHRvbVxuICBpZiAoY3lNYXRoLnBvaW50SW5zaWRlUG9seWdvbih4LCB5LCBwb2ludHMsXG4gICAgICAgICAgY2VudGVyWCwgY2VudGVyWSArIGhlaWdodCAvIDIgLSBjb3JuZXJSYWRpdXMgLyAyLCB3aWR0aCAtIDIgKiBjb3JuZXJSYWRpdXMsIGNvcm5lclJhZGl1cywgWzAsIC0xXSxcbiAgICAgICAgICBwYWRkaW5nKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy9jaGVjayBlbGxpcHNlc1xuICB2YXIgY2hlY2tJbkVsbGlwc2UgPSBmdW5jdGlvbiAoeCwgeSwgY2VudGVyWCwgY2VudGVyWSwgd2lkdGgsIGhlaWdodCwgcGFkZGluZykge1xuICAgIHggLT0gY2VudGVyWDtcbiAgICB5IC09IGNlbnRlclk7XG5cbiAgICB4IC89ICh3aWR0aCAvIDIgKyBwYWRkaW5nKTtcbiAgICB5IC89IChoZWlnaHQgLyAyICsgcGFkZGluZyk7XG5cbiAgICByZXR1cm4gKE1hdGgucG93KHgsIDIpICsgTWF0aC5wb3coeSwgMikgPD0gMSk7XG4gIH07XG5cbiAgLy8gQ2hlY2sgYm90dG9tIHJpZ2h0IHF1YXJ0ZXIgY2lyY2xlXG4gIGlmIChjaGVja0luRWxsaXBzZSh4LCB5LFxuICAgICAgICAgIGNlbnRlclggKyB3aWR0aCAvIDIgLSBjb3JuZXJSYWRpdXMsXG4gICAgICAgICAgY2VudGVyWSArIGhlaWdodCAvIDIgLSBjb3JuZXJSYWRpdXMsXG4gICAgICAgICAgY29ybmVyUmFkaXVzICogMiwgY29ybmVyUmFkaXVzICogMiwgcGFkZGluZykpIHtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gQ2hlY2sgYm90dG9tIGxlZnQgcXVhcnRlciBjaXJjbGVcbiAgaWYgKGNoZWNrSW5FbGxpcHNlKHgsIHksXG4gICAgICAgICAgY2VudGVyWCAtIHdpZHRoIC8gMiArIGNvcm5lclJhZGl1cyxcbiAgICAgICAgICBjZW50ZXJZICsgaGVpZ2h0IC8gMiAtIGNvcm5lclJhZGl1cyxcbiAgICAgICAgICBjb3JuZXJSYWRpdXMgKiAyLCBjb3JuZXJSYWRpdXMgKiAyLCBwYWRkaW5nKSkge1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2VuZXJhdGVDb21wbGV4U2hhcGVQb2ludHM6IGdlbmVyYXRlQ29tcGxleFNoYXBlUG9pbnRzLFxuICBjaGVja1BvaW50U3RhdGVBbmRJbmZvQm94ZXM6IGNoZWNrUG9pbnRTdGF0ZUFuZEluZm9Cb3hlcyxcbiAgbnVjbGVpY0FjaWRDaGVja1BvaW50OiBudWNsZWljQWNpZENoZWNrUG9pbnRcbn07XG4iLCJsZXQgc3ZnYjY0U3RyID0gcmVxdWlyZSgnLi9zdmdVdGlsLmpzJyk7XG4vLyBRVUFEMSAgfCAgUVVBRDJcbi8vICgtLCAtKSB8ICAoKywgLSlcbi8vIC0tLS0tLS0tLS0tLS1cbi8vIFFVQUQ0ICB8IFFVQUQzXG4vLyAoLSwgKykgfCAgKCssICspXG5jb25zdCBxdWFkMSA9ICctMSwgLTAuOSwgLTAuOTUsIC0wLjk1LCAtMC4zMywgLTEnO1xuXG5jb25zdCBxdWFkMiA9ICcwLjMzLCAtMSwgMC45LCAtMC45MywgMSwgLTAuODUnO1xuXG5jb25zdCBxdWFkMyA9ICcxLCAwLjgsIDAuOSwgMC44OSwgMC4zMywgMSc7XG5cbmNvbnN0IHF1YWQ0ID0gJy0wLjMzLCAxLCAtMC45LCAwLjksIC0xLCAwLjgnO1xuXG5cblxuY29uc3QgcG9pbnRzID0gKCkgPT4ge1xuICByZXR1cm4gYCR7cXVhZDF9LCAke3F1YWQyfSwgJHtxdWFkM30sICR7cXVhZDR9YDtcbn07XG5cbmNvbnN0IHN2Z1VyaSA9IChub2RlLCBib3JkZXJXaWR0aCA9IDMuNzUpID0+IHtcblxuICBsZXQgbmggPSBub2RlLmhlaWdodCgpO1xuICBsZXQgbncgPSBub2RlLndpZHRoKCk7XG5cbiAgY29uc3QgY29tcGFydG1lbnQgPVxuICBgXG4gIDxnIHN0eWxlPVwic3Ryb2tlOiAjNkE2QTZBOyBmaWxsOiBub25lOyBzdHJva2Utd2lkdGg6ICR7Ym9yZGVyV2lkdGh9O1wiPlxuICAgIDxwYXRoIGQ9XCJNICR7MCpud30gJHsuMDMqbmh9IEwgJHswKm53fSAkey45NypuaH0gUSAkezAuMDYqbnd9ICR7bmh9ICR7MC4yNSpud30gJHtuaH1cIi8+XG4gICAgXG4gICAgPHBhdGggZD1cIk0gJHswLjI1Km53fSAke25ofSBMICR7MC43NSpud30gJHtuaH0gUSAkezAuOTMqbnd9ICR7bmh9ICR7bnd9ICR7Ljk3Km5ofVwiLz5cblxuICAgIDxwYXRoIGQ9XCJNICR7bnd9ICR7Ljk3Km5ofSBMICR7bnd9ICR7MC4wMypuaH0gUSAkezAuOTcqbnd9ICR7MCpuaH0gJHswLjc1Km53fSAkezAqbmh9XCIvPlxuXG4gICAgPHBhdGggZD1cIk0gJHswLjc1Km53fSAkezAqbmh9IEwgJHswLjI1Km53fSAkezAqbmh9IFEgJHswLjA2Km53fSAkezAqbmh9ICR7MCpud30gJHswLjAzKm5ofVwiLz5cbiAgPC9nPlxuICBgO1xuXG4gIHJldHVybiBzdmdiNjRTdHIoY29tcGFydG1lbnQsIG53LCBuaCwgMCwgMCwgbncsIG5oKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwb2ludHM6IHBvaW50cyxcbiAgc3ZnVXJpOiBzdmdVcmlcbn07XG4iLCJsZXQgc3ZnYjY0U3RyID0gcmVxdWlyZSgnLi9zdmdVdGlsLmpzJyk7XG5cblxuY29uc3Qgc3ZnVXJpID0gKG5vZGUsIHN0cm9rZUNvbG9yID0gJ2dyZXknICwgZWRnZVdpZHRoID0gMi4zKSA9PiB7XG4gIGxldCBub2RlQ2VudGVyWCA9IG5vZGUud2lkdGgoKSAvIDI7XG4gIGxldCBub2RlQ2VudGVyWSA9IG5vZGUuaGVpZ2h0KCkgLyAyO1xuICBsZXQgb3V0ZXJDaXJjbGVSYWRpdXMgPSAobm9kZS53aWR0aCgpIC0gMikgLyAyO1xuICBsZXQgaW5uZXJDaXJjbGVSYWRpdXMgPSAobm9kZS53aWR0aCgpIC0gMikgLyAzO1xuICBjb25zdCBkaXNzb2NpYXRpb24gPSBcbiAgYFxuICAgIDxjaXJjbGUgY3g9JyR7bm9kZUNlbnRlclh9JyBjeT0nJHtub2RlQ2VudGVyWX0nIHI9JyR7b3V0ZXJDaXJjbGVSYWRpdXN9JyBmaWxsPSdub25lJyBzdHJva2U9JyR7c3Ryb2tlQ29sb3J9JyBzdHJva2Utd2lkdGg9JyR7ZWRnZVdpZHRofScgIC8+XG4gICAgPGNpcmNsZSBjeD0nJHtub2RlQ2VudGVyWH0nIGN5PScke25vZGVDZW50ZXJZfScgcj0nJHtpbm5lckNpcmNsZVJhZGl1c30nIGZpbGw9J25vbmUnIHN0cm9rZT0nJHtzdHJva2VDb2xvcn0nIHN0cm9rZS13aWR0aD0nJHtlZGdlV2lkdGh9JyAgLz5cblxuICBgO1xuICByZXR1cm4gc3ZnYjY0U3RyKGRpc3NvY2lhdGlvbiwgbm9kZS53aWR0aCgpLCBub2RlLmhlaWdodCgpLCAwLCAwLCBub2RlLndpZHRoKCksIG5vZGUuaGVpZ2h0KCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN2Z1VyaTogc3ZnVXJpXG59OyIsImNvbnN0IG5vZGVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi9ub2RlUHJvcGVydGllcy5qcycpO1xuY29uc3Qgc291cmNlQW5kU2luayA9IHJlcXVpcmUoJy4vc291cmNlQW5kU2luay5qcycpO1xuY29uc3QgY29tcGFydG1lbnQgPSByZXF1aXJlKCcuL2NvbXBhcnRtZW50LmpzJyk7XG5jb25zdCBkaXNzb2NpYXRpb24gPSByZXF1aXJlKCcuL2Rpc3NvY2lhdGlvbi5qcycpO1xuXG4vLyBBIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhIGN5dG9zY2FwZSBzdHlsZSBzaGVldCBmcm9tIGEgZ2l2ZW5cbi8vIGN5dG9zY2FwZSBpbnN0YW5jZVxudmFyIGdyYXBoU3R5bGVTaGVldCA9IGZ1bmN0aW9uIChjeXRvc2NhcGUpIHtcblxuICByZXR1cm4gY3l0b3NjYXBlLnN0eWxlc2hlZXQoKVxuICAgICAgICAuc2VsZWN0b3IoJ25vZGUnKVxuICAgICAgICAuY3NzKHtcbiAgICAgICAgICAnY29udGVudCc6IGZ1bmN0aW9uIChjeU5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlUHJvcGVydGllcy5nZXROb2RlQ29udGVudChjeU5vZGUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ2ZvbnQtc2l6ZSc6IGZ1bmN0aW9uIChjeU5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlUHJvcGVydGllcy5nZXRMYWJlbFRleHRTaXplKGN5Tm9kZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAndGV4dC12YWxpZ24nOiAnY2VudGVyJyxcbiAgICAgICAgICAndGV4dC1oYWxpZ24nOiAnY2VudGVyJyxcbiAgICAgICAgICAnYm9yZGVyLXdpZHRoJzogMS41LFxuICAgICAgICAgICdib3JkZXItY29sb3InOiAnIzU1NScsXG4gICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiAnI2Y2ZjZmNicsXG4gICAgICAgICAgJ2JhY2tncm91bmQtb3BhY2l0eSc6IDAuNSxcbiAgICAgICAgICAndGV4dC1vcGFjaXR5JzogMSxcbiAgICAgICAgICAnb3BhY2l0eSc6IDEsXG4gICAgICAgICAgJ3RleHQtd3JhcCc6ICd3cmFwJyxcbiAgICAgICAgICAndGV4dC1tYXgtd2lkdGgnOiAxMDAsXG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3Rvcignbm9kZVs/Y2xvbmVtYXJrZXJdW2NsYXNzPVwicGVydHVyYmluZyBhZ2VudFwiXScpXG4gICAgICAgIC5jc3Moe1xuICAgICAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGVQcm9wZXJ0aWVzLmdldGNsb25lTWFya2VySW1hZ2VQYXRoKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAnYmFja2dyb3VuZC1wb3NpdGlvbi14JzogJzUwJScsXG4gICAgICAgICAgJ2JhY2tncm91bmQtcG9zaXRpb24teSc6ICcxMDAlJyxcbiAgICAgICAgICAnYmFja2dyb3VuZC13aWR0aCc6ICcxMDAlJyxcbiAgICAgICAgICAnYmFja2dyb3VuZC1oZWlnaHQnOiAnMjUlJyxcbiAgICAgICAgICAnYmFja2dyb3VuZC1maXQnOiAnbm9uZScsXG4gICAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2Utb3BhY2l0eSc6IGZ1bmN0aW9uIChjeU5vZGUpIHtcbiAgICAgICAgICAgIGlmICghY3lOb2RlLmRhdGEoJ2Nsb25lbWFya2VyJykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3lOb2RlLmNzcygnYmFja2dyb3VuZC1vcGFjaXR5Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0b3IoJ25vZGVbY2xhc3NdJylcbiAgICAgICAgLmNzcyh7XG4gICAgICAgICAgJ3NoYXBlJzogZnVuY3Rpb24gKGN5Tm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGVQcm9wZXJ0aWVzLmdldEN5U2hhcGUoY3lOb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3Rvcignbm9kZVtjbGFzcz1cInNvdXJjZSBhbmQgc2lua1wiXScpXG4gICAgICAgIC5jc3Moe1xuICAgICAgICAgICdzaGFwZS1wb2x5Z29uLXBvaW50cyc6ICBzb3VyY2VBbmRTaW5rLnBvaW50cygpLFxuICAgICAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogKG5vZGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgdXJsKCR7c291cmNlQW5kU2luay5zdmdVcmkobm9kZSl9KWA7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAnYmFja2dyb3VuZC1maXQnOiAnbm9uZScsXG4gICAgICAgICAgJ2JhY2tncm91bmQtd2lkdGgnOiAnMTAwJScsXG4gICAgICAgICAgJ2JhY2tncm91bmQtaGVpZ2h0JzogJzEwMCUnLFxuICAgICAgICAgICdiYWNrZ3JvdW5kLWNsaXAnOiAnbm9uZScsXG4gICAgICAgICAgJ2JhY2tncm91bmQtcmVwZWF0JzogJ25vLXJlcGVhdCcsXG4gICAgICAgICAgJ2JvcmRlci13aWR0aCc6IDBcbiAgICAgICAgfSlcbiAgICAgICAgLnNlbGVjdG9yKCdub2RlW2NsYXNzPVwiY29tcGFydG1lbnRcIl0nKVxuICAgICAgICAuY3NzKHtcbiAgICAgICAgICAnc2hhcGUtcG9seWdvbi1wb2ludHMnOiBjb21wYXJ0bWVudC5wb2ludHMoKSxcbiAgICAgICAgICAnYmFja2dyb3VuZC1pbWFnZSc6IChub2RlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYHVybCgke2NvbXBhcnRtZW50LnN2Z1VyaShub2RlKX0pYDtcbiAgICAgICAgICB9LFxuICAgICAgICAgICdiYWNrZ3JvdW5kLWZpdCc6ICdjb3ZlcicsXG4gICAgICAgICAgJ2JhY2tncm91bmQtd2lkdGgnOiAnMTAwJScsXG4gICAgICAgICAgJ2JhY2tncm91bmQtaGVpZ2h0JzogJzEwMCUnLFxuICAgICAgICAgICdiYWNrZ3JvdW5kLWNsaXAnOiAnbm9uZScsXG4gICAgICAgICAgJ2JhY2tncm91bmQtcmVwZWF0JzogJ25vLXJlcGVhdCcsXG4gICAgICAgICAgJ2JvcmRlci13aWR0aCc6IDAsXG4gICAgICAgICAgJ2JhY2tncm91bmQtb3BhY2l0eSc6IDAsXG4gICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiAnI0ZGRkZGRicsXG4gICAgICAgICAgJ3RleHQtdmFsaWduJzogJ2JvdHRvbScsXG4gICAgICAgICAgJ3RleHQtaGFsaWduJzogJ2NlbnRlcidcbiAgICAgICAgfSlcbiAgICAgICAgLnNlbGVjdG9yKCdub2RlW2NsYXNzPVwiZGlzc29jaWF0aW9uXCJdJylcbiAgICAgICAgLmNzcyh7XG4gICAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiAobm9kZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGB1cmwoJHtkaXNzb2NpYXRpb24uc3ZnVXJpKG5vZGUpfSlgO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ2JhY2tncm91bmQtZml0JzogJ2NvdmVyJyxcbiAgICAgICAgICAnYmFja2dyb3VuZC13aWR0aCc6ICcxMDAlJyxcbiAgICAgICAgICAnYmFja2dyb3VuZC1oZWlnaHQnOiAnMTAwJScsXG4gICAgICAgICAgJ2JhY2tncm91bmQtY2xpcCc6ICdub25lJyxcbiAgICAgICAgICAnYmFja2dyb3VuZC1yZXBlYXQnOiAnbm8tcmVwZWF0JyxcbiAgICAgICAgICAnYm9yZGVyLXdpZHRoJzogMCxcbiAgICAgICAgICAnYmFja2dyb3VuZC1vcGFjaXR5JzogMFxuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0b3IoJ25vZGVbY2xhc3M9XCJwZXJ0dXJiaW5nIGFnZW50XCJdJylcbiAgICAgICAgLmNzcyh7XG4gICAgICAgICAgJ3NoYXBlLXBvbHlnb24tcG9pbnRzJzogJy0xLCAtMSwgICAtMC41LCAwLCAgLTEsIDEsICAgMSwgMSwgICAwLjUsIDAsIDEsIC0xJ1xuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0b3IoJ25vZGVbY2xhc3M9XCJ0YWdcIl0nKVxuICAgICAgICAuY3NzKHtcbiAgICAgICAgICAnc2hhcGUtcG9seWdvbi1wb2ludHMnOiAnLTEsIC0xLCAgIDAuMjUsIC0xLCAgIDEsIDAsICAgIDAuMjUsIDEsICAgIC0xLCAxJ1xuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0b3IoJ25vZGVbY2xhc3M9XCJhc3NvY2lhdGlvblwiXScpXG4gICAgICAgIC5jc3Moe1xuICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogJyM2QjZCNkInXG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3Rvcignbm9kZVtjbGFzcz1cImNvbXBsZXhcIl0nKVxuICAgICAgICAuY3NzKHtcbiAgICAgICAgICAnYmFja2dyb3VuZC1jb2xvcic6ICcjRjRGM0VFJyxcbiAgICAgICAgICAndGV4dC12YWxpZ24nOiAnYm90dG9tJyxcbiAgICAgICAgICAndGV4dC1oYWxpZ24nOiAnY2VudGVyJ1xuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0b3IoJ25vZGVbYmJveF1bY2xhc3NdW2NsYXNzIT1cImNvbXBsZXhcIl1bY2xhc3MhPVwiY29tcGFydG1lbnRcIl1bY2xhc3MhPVwic3VibWFwXCJdJylcbiAgICAgICAgLmNzcyh7XG4gICAgICAgICAgJ3dpZHRoJzogJ2RhdGEoYmJveC53KScsXG4gICAgICAgICAgJ2hlaWdodCc6ICdkYXRhKGJib3guaCknXG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3Rvcignbm9kZVtleHBhbmRlZC1jb2xsYXBzZWQ9XCJjb2xsYXBzZWRcIl0nKVxuICAgICAgICAuY3NzKHtcbiAgICAgICAgICAnd2lkdGgnOiAzNixcbiAgICAgICAgICAnaGVpZ2h0JzogMzZcbiAgICAgICAgfSlcbiAgICAgICAgLnNlbGVjdG9yKCdub2RlOnNlbGVjdGVkJylcbiAgICAgICAgLmNzcyh7XG4gICAgICAgICAgJ2JvcmRlci1jb2xvcic6ICcjZDY3NjE0JyxcbiAgICAgICAgICAndGFyZ2V0LWFycm93LWNvbG9yJzogJyMwMDAnLFxuICAgICAgICAgICd0ZXh0LW91dGxpbmUtY29sb3InOiAnIzAwMCdcbiAgICAgICAgfSlcbiAgICAgICAgLnNlbGVjdG9yKCdub2RlOmFjdGl2ZScpXG4gICAgICAgIC5jc3Moe1xuICAgICAgICAgICdiYWNrZ3JvdW5kLW9wYWNpdHknOiAwLjcsICdvdmVybGF5LWNvbG9yJzogJyNkNjc2MTQnLFxuICAgICAgICAgICdvdmVybGF5LXBhZGRpbmcnOiAnMTQnXG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3RvcignZWRnZScpXG4gICAgICAgIC5jc3Moe1xuICAgICAgICAgICdjdXJ2ZS1zdHlsZSc6ICdiZXppZXInLFxuICAgICAgICAgICdsaW5lLWNvbG9yJzogJyM1NTUnLFxuICAgICAgICAgICd0YXJnZXQtYXJyb3ctZmlsbCc6ICdob2xsb3cnLFxuICAgICAgICAgICdzb3VyY2UtYXJyb3ctZmlsbCc6ICdob2xsb3cnLFxuICAgICAgICAgICd3aWR0aCc6IDEuNSxcbiAgICAgICAgICAndGFyZ2V0LWFycm93LWNvbG9yJzogJyM1NTUnLFxuICAgICAgICAgICdzb3VyY2UtYXJyb3ctY29sb3InOiAnIzU1NScsXG4gICAgICAgICAgJ3RleHQtYm9yZGVyLWNvbG9yJzogZnVuY3Rpb24gKGN5Tm9kZSkge1xuICAgICAgICAgICAgaWYgKGN5Tm9kZS5zZWxlY3RlZCgpKSB7XG4gICAgICAgICAgICAgIHJldHVybiAnI2Q2NzYxNCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3lOb2RlLmNzcygnbGluZS1jb2xvcicpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ2NvbG9yJzogZnVuY3Rpb24gKGN5Tm9kZSkge1xuICAgICAgICAgICAgaWYgKGN5Tm9kZS5zZWxlY3RlZCgpKSB7XG4gICAgICAgICAgICAgIHJldHVybiAnI2Q2NzYxNCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3lOb2RlLmNzcygnbGluZS1jb2xvcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnNlbGVjdG9yKCdlZGdlOnNlbGVjdGVkJylcbiAgICAgICAgLmNzcyh7XG4gICAgICAgICAgJ2xpbmUtY29sb3InOiAnI2Q2NzYxNCcsXG4gICAgICAgICAgJ3NvdXJjZS1hcnJvdy1jb2xvcic6ICcjZDY3NjE0JyxcbiAgICAgICAgICAndGFyZ2V0LWFycm93LWNvbG9yJzogJyNkNjc2MTQnXG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3RvcignZWRnZTphY3RpdmUnKVxuICAgICAgICAuY3NzKHtcbiAgICAgICAgICAnYmFja2dyb3VuZC1vcGFjaXR5JzogMC43LCAnb3ZlcmxheS1jb2xvcic6ICcjZDY3NjE0JyxcbiAgICAgICAgICAnb3ZlcmxheS1wYWRkaW5nJzogJzgnXG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3RvcignZWRnZVtjYXJkaW5hbGl0eSA+IDBdJylcbiAgICAgICAgLmNzcyh7XG4gICAgICAgICAgJ3RleHQtcm90YXRpb24nOiAnYXV0b3JvdGF0ZScsXG4gICAgICAgICAgJ3RleHQtYmFja2dyb3VuZC1zaGFwZSc6ICdyZWN0YW5nbGUnLFxuICAgICAgICAgICd0ZXh0LWJvcmRlci1vcGFjaXR5JzogJzEnLFxuICAgICAgICAgICd0ZXh0LWJvcmRlci13aWR0aCc6ICcxJyxcbiAgICAgICAgICAndGV4dC1iYWNrZ3JvdW5kLWNvbG9yJzogJ3doaXRlJyxcbiAgICAgICAgICAndGV4dC1iYWNrZ3JvdW5kLW9wYWNpdHknOiAnMSdcbiAgICAgICAgfSlcbiAgICAgICAgLnNlbGVjdG9yKCdlZGdlW2NsYXNzPVwiY29uc3VtcHRpb25cIl1bY2FyZGluYWxpdHkgPiAwXScpXG4gICAgICAgIC5jc3Moe1xuICAgICAgICAgICdzb3VyY2UtbGFiZWwnOiBmdW5jdGlvbiAoY3lOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gJycgKyBjeU5vZGUuZGF0YSgnY2FyZGluYWxpdHknKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgICdzb3VyY2UtdGV4dC1tYXJnaW4teSc6ICctMTAnLFxuICAgICAgICAgICdzb3VyY2UtdGV4dC1vZmZzZXQnOiBmdW5jdGlvbiAoY3lOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZVByb3BlcnRpZXMuZ2V0Q2FyZGluYWxpdHlEaXN0YW5jZShjeU5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnNlbGVjdG9yKCdlZGdlW2NsYXNzPVwicHJvZHVjdGlvblwiXVtjYXJkaW5hbGl0eSA+IDBdJylcbiAgICAgICAgLmNzcyh7XG4gICAgICAgICAgJ3RhcmdldC1sYWJlbCc6IGZ1bmN0aW9uIChjeU5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiAnJyArIGN5Tm9kZS5kYXRhKCdjYXJkaW5hbGl0eScpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ3RhcmdldC10ZXh0LW1hcmdpbi15JzogJy0xMCcsXG4gICAgICAgICAgJ3RhcmdldC10ZXh0LW9mZnNldCc6IGZ1bmN0aW9uIChjeU5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlUHJvcGVydGllcy5nZXRDYXJkaW5hbGl0eURpc3RhbmNlKGN5Tm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0b3IoJ2VkZ2VbY2xhc3NdJylcbiAgICAgICAgLmNzcyh7XG4gICAgICAgICAgJ3RhcmdldC1hcnJvdy1zaGFwZSc6IGZ1bmN0aW9uIChjeU5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlUHJvcGVydGllcy5nZXRDeUFycm93U2hhcGUoY3lOb2RlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgICdzb3VyY2UtYXJyb3ctc2hhcGUnOiAnbm9uZSdcbiAgICAgICAgfSlcbiAgICAgICAgLnNlbGVjdG9yKCdlZGdlW2NsYXNzPVwiaW5oaWJpdGlvblwiXScpXG4gICAgICAgIC5jc3Moe1xuICAgICAgICAgICd0YXJnZXQtYXJyb3ctZmlsbCc6ICdmaWxsZWQnXG4gICAgICAgIH0pXG4gICAgICAgIC5zZWxlY3RvcignZWRnZVtjbGFzcz1cInByb2R1Y3Rpb25cIl0nKVxuICAgICAgICAuY3NzKHtcbiAgICAgICAgICAndGFyZ2V0LWFycm93LWZpbGwnOiAnZmlsbGVkJ1xuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0b3IoJ2NvcmUnKVxuICAgICAgICAuY3NzKHtcbiAgICAgICAgICAnc2VsZWN0aW9uLWJveC1jb2xvcic6ICcjZDY3NjE0JyxcbiAgICAgICAgICAnc2VsZWN0aW9uLWJveC1vcGFjaXR5JzogJzAuMicsICdzZWxlY3Rpb24tYm94LWJvcmRlci1jb2xvcic6ICcjZDY3NjE0J1xuICAgICAgICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ3JhcGhTdHlsZVNoZWV0O1xuIiwiXG4vLyByZW5kZXIgbm9kZSBwcm9wZXJ0aWVzIGJhc2VkIG9uIFNCR05cblxudmFyIG5vZGVQcm9wZXJ0aWVzID0ge307XG5cbm5vZGVQcm9wZXJ0aWVzLmdldENsb25lTWFya2VySW1nUGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICcnO1xufTtcblxubm9kZVByb3BlcnRpZXMuZ2V0Q3lTaGFwZSA9IGZ1bmN0aW9uKGN5Tm9kZSkge1xuICB2YXIgX2NsYXNzID0gY3lOb2RlLmRhdGEoJ2NsYXNzJyk7XG4gIGlmIChfY2xhc3MuZW5kc1dpdGgoJyBtdWx0aW1lcicpKSB7XG4gICAgX2NsYXNzID0gX2NsYXNzLnJlcGxhY2UoJyBtdWx0aW1lcicsICcnKTtcbiAgfVxuXG4gIGlmIChfY2xhc3MgPT0gJ2NvbXBhcnRtZW50Jykge1xuICAgIHJldHVybiAncG9seWdvbic7XG4gIH1cblxuICBpZiAoX2NsYXNzID09ICdwaGVub3R5cGUnKSB7XG4gICAgcmV0dXJuICdoZXhhZ29uJztcbiAgfVxuICBpZiAoX2NsYXNzID09ICdwZXJ0dXJiaW5nIGFnZW50JyB8fCBfY2xhc3MgPT0gJ3RhZycgfHwgX2NsYXNzID09ICdzb3VyY2UgYW5kIHNpbmsnKSB7XG4gICAgcmV0dXJuICdwb2x5Z29uJztcbiAgfVxuICBpZiAoX2NsYXNzID09ICdkaXNzb2NpYXRpb24nKSB7XG4gICAgcmV0dXJuICdlbGxpcHNlJztcbiAgfVxuICBpZiAoIF9jbGFzcyA9PSAnbnVjbGVpYyBhY2lkIGZlYXR1cmUnXG4gICAgICB8fCBfY2xhc3MgPT0gJ21hY3JvbW9sZWN1bGUnIHx8IF9jbGFzcyA9PSAnc2ltcGxlIGNoZW1pY2FsJyB8fCBfY2xhc3MgPT0gJ2NvbXBsZXgnXG4gICAgICB8fCBfY2xhc3MgPT0gJ3Vuc3BlY2lmaWVkIGVudGl0eScgfHwgX2NsYXNzID09ICdwcm9jZXNzJyB8fCBfY2xhc3MgPT0gJ29taXR0ZWQgcHJvY2VzcydcbiAgICAgIHx8IF9jbGFzcyA9PSAndW5jZXJ0YWluIHByb2Nlc3MnIHx8IF9jbGFzcyA9PSAnYXNzb2NpYXRpb24nKSB7XG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfVxuICByZXR1cm4gJ2VsbGlwc2UnO1xufTtcblxubm9kZVByb3BlcnRpZXMuZ2V0Q3lBcnJvd1NoYXBlID0gZnVuY3Rpb24oY3lOb2RlKSB7XG4gIHZhciBfY2xhc3MgPSBjeU5vZGUuZGF0YSgnY2xhc3MnKTtcbiAgaWYgKF9jbGFzcyA9PSAnbmVjZXNzYXJ5IHN0aW11bGF0aW9uJykge1xuICAgIHJldHVybiAnbmVjZXNzYXJ5IHN0aW11bGF0aW9uJztcbiAgfVxuICBpZiAoX2NsYXNzID09ICdpbmhpYml0aW9uJykge1xuICAgIHJldHVybiAndGVlJztcbiAgfVxuICBpZiAoX2NsYXNzID09ICdjYXRhbHlzaXMnKSB7XG4gICAgcmV0dXJuICdjaXJjbGUnO1xuICB9XG4gIGlmIChfY2xhc3MgPT0gJ3N0aW11bGF0aW9uJyB8fCBfY2xhc3MgPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuICd0cmlhbmdsZSc7XG4gIH1cbiAgaWYgKF9jbGFzcyA9PSAnbW9kdWxhdGlvbicpIHtcbiAgICByZXR1cm4gJ2RpYW1vbmQnO1xuICB9XG4gIHJldHVybiAnbm9uZSc7XG59O1xuXG5ub2RlUHJvcGVydGllcy5nZXROb2RlQ29udGVudCA9IGZ1bmN0aW9uKGN5Tm9kZSkge1xuICB2YXIgX2NsYXNzID0gY3lOb2RlLmRhdGEoJ2NsYXNzJyk7XG5cbiAgaWYgKF9jbGFzcy5lbmRzV2l0aCgnIG11bHRpbWVyJykpIHtcbiAgICBfY2xhc3MgPSBfY2xhc3MucmVwbGFjZSgnIG11bHRpbWVyJywgJycpO1xuICB9XG5cbiAgdmFyIGNvbnRlbnQgPSAnJztcbiAgaWYgKF9jbGFzcyA9PSAnbWFjcm9tb2xlY3VsZScgfHwgX2NsYXNzID09ICdzaW1wbGUgY2hlbWljYWwnXG4gICAgICB8fCBfY2xhc3MgPT0gJ3BoZW5vdHlwZSdcbiAgICAgIHx8IF9jbGFzcyA9PSAndW5zcGVjaWZpZWQgZW50aXR5JyB8fCBfY2xhc3MgPT0gJ251Y2xlaWMgYWNpZCBmZWF0dXJlJ1xuICAgICAgfHwgX2NsYXNzID09ICdwZXJ0dXJiaW5nIGFnZW50JyB8fCBfY2xhc3MgPT0gJ3RhZycpIHtcbiAgICBjb250ZW50ID0gY3lOb2RlLmRhdGEoJ2xhYmVsJykgPyBjeU5vZGUuZGF0YSgnbGFiZWwnKSA6ICcnO1xuICB9XG4gIGVsc2UgaWYoX2NsYXNzID09ICdjb21wYXJ0bWVudCcpe1xuICAgIGNvbnRlbnQgPSBjeU5vZGUuZGF0YSgnbGFiZWwnKSA/IGN5Tm9kZS5kYXRhKCdsYWJlbCcpIDogJyc7XG4gIH1cbiAgZWxzZSBpZihfY2xhc3MgPT0gJ2NvbXBsZXgnKXtcbiAgICBpZihjeU5vZGUuY2hpbGRyZW4oKS5sZW5ndGggPT0gMCl7XG4gICAgICBpZihjeU5vZGUuZGF0YSgnbGFiZWwnKSl7XG4gICAgICAgIGNvbnRlbnQgPSBjeU5vZGUuZGF0YSgnbGFiZWwnKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYoY3lOb2RlLmRhdGEoJ2luZm9MYWJlbCcpKXtcbiAgICAgICAgY29udGVudCA9IGN5Tm9kZS5kYXRhKCdpbmZvTGFiZWwnKTtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIGNvbnRlbnQgPSAnJztcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIGNvbnRlbnQgPSAnJztcbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAoX2NsYXNzID09ICdhbmQnKSB7XG4gICAgY29udGVudCA9ICdBTkQnO1xuICB9XG4gIGVsc2UgaWYgKF9jbGFzcyA9PSAnb3InKSB7XG4gICAgY29udGVudCA9ICdPUic7XG4gIH1cbiAgZWxzZSBpZiAoX2NsYXNzID09ICdub3QnKSB7XG4gICAgY29udGVudCA9ICdOT1QnO1xuICB9XG4gIGVsc2UgaWYgKF9jbGFzcyA9PSAnb21pdHRlZCBwcm9jZXNzJykge1xuICAgIGNvbnRlbnQgPSAnXFxcXFxcXFwnO1xuICB9XG4gIGVsc2UgaWYgKF9jbGFzcyA9PSAndW5jZXJ0YWluIHByb2Nlc3MnKSB7XG4gICAgY29udGVudCA9ICc/JztcbiAgfVxuXG4gIHJldHVybiBjb250ZW50O1xufTtcblxubm9kZVByb3BlcnRpZXMuZ2V0TGFiZWxUZXh0U2l6ZSA9IGZ1bmN0aW9uIChjeU5vZGUpIHtcbiAgdmFyIF9jbGFzcyA9IGN5Tm9kZS5kYXRhKCdjbGFzcycpO1xuXG4gIC8vIERpcnR5IGxlZ2FjeSBoYWNrLiAgVGhlc2UgdHlwZXMgb2Ygbm9kZXMgYXJlIG5vdCBzdXBwb3NlZCB0byBoYXZlIGxhYmVsc1xuICAvLyBidXQgYXBwYXJlbnRseSB0aGV5IG5lZWQgdG8gaGF2ZSBhIHRleHQgc2l6ZVxuICBpZiAoX2NsYXNzID09PSAnYXNzb2NpYXRpb24nIHx8IF9jbGFzcyA9PT0gJ2Rpc3NvY2lhdGlvbicpIHtcbiAgICByZXR1cm4gMjA7XG4gIH1cblxuICBpZiAoX2NsYXNzID09PSAnYW5kJyB8fCBfY2xhc3MgPT09ICdvcicgfHwgX2NsYXNzID09PSAnbm90Jykge1xuICAgIHJldHVybiBub2RlUHJvcGVydGllcy5nZXREeW5hbWljTGFiZWxUZXh0U2l6ZShjeU5vZGUsIDEpO1xuICB9XG5cbiAgaWYgKF9jbGFzcy5lbmRzV2l0aCgncHJvY2VzcycpKSB7XG4gICAgcmV0dXJuIG5vZGVQcm9wZXJ0aWVzLmdldER5bmFtaWNMYWJlbFRleHRTaXplKGN5Tm9kZSwgMS41KTtcbiAgfVxuXG4gIGlmIChfY2xhc3MgPT09ICdjb21wbGV4JyB8fCBfY2xhc3MgPT09ICdjb21wYXJ0bWVudCcpIHtcbiAgICByZXR1cm4gMTY7XG4gIH1cblxuICByZXR1cm4gbm9kZVByb3BlcnRpZXMuZ2V0RHluYW1pY0xhYmVsVGV4dFNpemUoY3lOb2RlKTtcbn07XG5cbm5vZGVQcm9wZXJ0aWVzLmdldENhcmRpbmFsaXR5RGlzdGFuY2UgPSBmdW5jdGlvbiAoY3lOb2RlKSB7XG4gIHZhciBzcmNQb3MgPSBjeU5vZGUuc291cmNlKCkucG9zaXRpb24oKTtcbiAgdmFyIHRndFBvcyA9IGN5Tm9kZS50YXJnZXQoKS5wb3NpdGlvbigpO1xuXG4gIHZhciBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdygoc3JjUG9zLnggLSB0Z3RQb3MueCksIDIpICsgTWF0aC5wb3coKHNyY1Bvcy55IC0gdGd0UG9zLnkpLCAyKSk7XG4gIHJldHVybiBkaXN0YW5jZSAqIDAuMTU7XG59O1xuXG5ub2RlUHJvcGVydGllcy5nZXREeW5hbWljTGFiZWxUZXh0U2l6ZSA9IGZ1bmN0aW9uIChjeU5vZGUsIHNpemVDb2VmZmljaWVudCkge1xuICB2YXIgbGFiZWxTaXplQ29lZmZpY2llbnQgPSBzaXplQ29lZmZpY2llbnQgfHwgMTtcblxuICB2YXIgaCA9IGN5Tm9kZS5oZWlnaHQoKTtcbiAgdmFyIHRleHRIZWlnaHQgPSBwYXJzZUludChoIC8gMi40NSkgKiBsYWJlbFNpemVDb2VmZmljaWVudDtcblxuICByZXR1cm4gdGV4dEhlaWdodDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbm9kZVByb3BlcnRpZXM7XG4iLCJsZXQgc3ZnYjY0U3RyID0gcmVxdWlyZSgnLi9zdmdVdGlsLmpzJyk7XG5cbi8vIFFVQUQxICB8ICBRVUFEMlxuLy8gKC0sIC0pIHwgICgrLCAtKVxuLy8gLS0tLS0tLS0tLS0tLVxuLy8gUVVBRDQgIHwgUVVBRDNcbi8vICgtLCArKSB8ICAoKywgKylcbmNvbnN0IHF1YWQxID0gJy0wLjg2LCAwLjUsIC0wLjc1LCAwLjY1LCAtMSwgMC45NSwgLTAuOTUsIDEsIC0wLjY1LCAwLjc1LCAtMC41LCAwLjg2LCAwLCAxJztcblxuY29uc3QgcXVhZDIgPSAnMC41LCAwLjg2LCAwLjcxLCAwLjcxLCAwLjg2LCAwLjUsIDEsIDAnO1xuXG5jb25zdCBxdWFkMyA9ICcwLjg2LCAtMC41LCAwLjc1LCAtMC42NSwgMSwgLTAuOTUsIDAuOTUsIC0xLCAwLjY1LCAtMC43NSwgMC41LCAtMC44NiwgMCwgLTEnO1xuXG5jb25zdCBxdWFkNCA9ICctMC41LCAtMC44NiwgLTAuNzEsIC0wLjcxLCAtMC44NiwgLTAuNSwgLTEsIDAsJztcblxuY29uc3QgcG9pbnRzID0gKCkgPT4ge1xuICByZXR1cm4gYCR7cXVhZDF9LCAke3F1YWQyfSwgJHtxdWFkM30sICR7cXVhZDR9YDtcbn07XG5cbmNvbnN0IHN2Z1VyaSA9IChub2RlLCBzdHJva2VDb2xvciA9ICdncmV5JyAsIGVkZ2VXaWR0aCA9IDEpID0+IHtcbiAgbGV0IGNsb25lTWFya2VyID0gJyc7XG4gIGxldCBjbGlwUGF0aCA9ICcnO1xuXG4gIGxldCBub2RlQ2VudGVyWCA9IG5vZGUud2lkdGgoKSAvIDI7XG4gIGxldCBub2RlQ2VudGVyWSA9IG5vZGUuaGVpZ2h0KCkgLyAyO1xuICBsZXQgY2lyY2xlUmFkaXVzID0gKG5vZGUud2lkdGgoKSAtIDIpIC8gMjtcblxuICBpZiAobm9kZS5kYXRhKCdjbG9uZW1hcmtlcicpKSB7XG4gICAgY2xpcFBhdGggPSBgXG4gICAgPGRlZnM+XG4gICAgICA8Y2xpcFBhdGggaWQ9XCJjdXQtb2ZmLWJvdHRvbVwiPlxuICAgICAgICA8cmVjdCB4PVwiMTMwXCIgeT1cIjMwMFwiIHdpZHRoPVwiMzAwXCIgaGVpZ2h0PVwiMjAwXCIgLz5cbiAgICAgIDwvY2xpcFBhdGg+XG4gICAgPC9kZWZzPlxuICAgIGA7XG4gICAgY2xvbmVNYXJrZXIgPSBgXG4gICAgPGNpcmNsZSBjeD1cIiR7bm9kZUNlbnRlclh9XCIgY3k9XCIke25vZGVDZW50ZXJZfVwiIHI9XCIke2NpcmNsZVJhZGl1c31cIiBmaWxsPScjRDJEMkQyJyBzdHJva2U9J2dyZXknIGNsaXAtcGF0aD1cInVybCgjY3V0LW9mZi1ib3R0b20pXCIgLz5cbiAgICBgO1xuICB9XG5cbiAgY29uc3Qgc291cmNlQW5kU2luayA9IFxuICBgXG4gICAgJHtjbGlwUGF0aH1cbiAgICA8Y2lyY2xlIGN4PScke25vZGVDZW50ZXJYfScgY3k9JyR7bm9kZUNlbnRlcll9JyByPScke2NpcmNsZVJhZGl1c30nIGZpbGw9J25vbmUnIHN0cm9rZT0nJHtzdHJva2VDb2xvcn0nIHN0cm9rZS13aWR0aD0nJHtlZGdlV2lkdGh9JyAgLz5cbiAgICAke2Nsb25lTWFya2VyfVxuICAgIDxsaW5lIHgxPScwJyB5MT0nJHtub2RlLmhlaWdodCgpfScgeDI9JyR7bm9kZS53aWR0aCgpfScgeTI9JzAnIHN0cm9rZS13aWR0aD0nJHtlZGdlV2lkdGh9JyBzdHJva2U9JyR7c3Ryb2tlQ29sb3J9Jy8+XG4gIGA7XG4gIHJldHVybiBzdmdiNjRTdHIoc291cmNlQW5kU2luaywgbm9kZS53aWR0aCgpLCBub2RlLmhlaWdodCgpLCAwLCAwLCBub2RlLndpZHRoKCksIG5vZGUuaGVpZ2h0KCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN2Z1VyaTogc3ZnVXJpLFxuICBwb2ludHM6IHBvaW50c1xufTtcbiIsImNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuXG5jb25zdCBzdmcgPSAoc3ZnU3RyLCB3aWR0aCA9IDEwMCwgaGVpZ2h0ID0gMTAwLCB2YlggPSAwLCB2YlkgPSAwLCB2YldpZHRoID0gMTAwLCB2YkhlaWdodCA9IDEwMCkgPT4ge1xuICBsZXQgc3ZnVGV4dCA9IFxuICBgXG4gICAgPHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZlcnNpb249JzEuMScgd2lkdGg9JyR7d2lkdGh9JyBoZWlnaHQ9JyR7aGVpZ2h0fScgdmlld0JveD0nJHt2Ylh9ICR7dmJZfSAke3ZiV2lkdGh9ICR7dmJIZWlnaHR9Jz5cbiAgICAke3N2Z1N0cn1cbiAgICA8L3N2Zz5cbiAgYDtcbiAgcmV0dXJuIHBhcnNlci5wYXJzZUZyb21TdHJpbmcoc3ZnVGV4dCwgJ3RleHQveG1sJykuZG9jdW1lbnRFbGVtZW50O1xufTtcblxuY29uc3Qgc3ZnYjY0U3RyID0gKHN2Z1RleHQsIHZpZXdQb3J0V2lkdGgsIHZpZXdQb3J0SGVpZ2h0LCB2aWV3Qm94WCwgdmlld0JveFksIHZpZXdCb3hXaWR0aCwgdmlld0JveEhlaWdodCkgPT4ge1xuICBsZXQgc3ZnRWwgPSBzdmcoc3ZnVGV4dCwgdmlld1BvcnRXaWR0aCwgdmlld1BvcnRIZWlnaHQsIHZpZXdCb3hYLCB2aWV3Qm94WSwgdmlld0JveFdpZHRoLCB2aWV3Qm94SGVpZ2h0KTtcbiAgbGV0IGI2NERhdGEgPSBgZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwke2J0b2Eoc3ZnRWwub3V0ZXJIVE1MKX1gO1xuXG4gIHJldHVybiBiNjREYXRhO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdmdiNjRTdHI7Il19
